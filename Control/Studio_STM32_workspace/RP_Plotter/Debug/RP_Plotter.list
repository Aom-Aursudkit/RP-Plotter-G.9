
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca0c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800cbe4  0800cbe4  0000dbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff4  0800cff4  0000f284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cff4  0800cff4  0000dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cffc  0800cffc  0000f284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cffc  0800cffc  0000dffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d000  0800d000  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  0800d004  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000288  0800d288  0000f288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  0800d288  0000f4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f34  00000000  00000000  0000f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2e  00000000  00000000  000271e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00029f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  0002b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027449  00000000  00000000  0002c071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016abf  00000000  00000000  000534ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100022  00000000  00000000  00069f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005508  00000000  00000000  00169fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016f4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000288 	.word	0x20000288
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cbcc 	.word	0x0800cbcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000028c 	.word	0x2000028c
 8000214:	0800cbcc 	.word	0x0800cbcc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002a4 	.word	0x200002a4

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002a4 	.word	0x200002a4

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fe09 	bl	800ad6c <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fe07 	bl	8008da0 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fd91 	bl	800acc0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fda8 	bl	800acf8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 f84f 	bl	800a254 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 f977 	bl	800a4c8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fb61 	bl	80078b8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 ff22 	bl	8008048 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002a4 	.word	0x200002a4
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <Modbus_Protocal_Worker>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void Modbus_Protocal_Worker() {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08b      	sub	sp, #44	@ 0x2c
 800128c:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 800128e:	4bae      	ldr	r3, [pc, #696]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001290:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001294:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 8001296:	4bad      	ldr	r3, [pc, #692]	@ (800154c <Modbus_Protocal_Worker+0x2c4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Modbus_Protocal_Worker+0x1a>
 800129e:	2202      	movs	r2, #2
 80012a0:	e000      	b.n	80012a4 <Modbus_Protocal_Worker+0x1c>
 80012a2:	2201      	movs	r2, #1
 80012a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012a6:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 80012a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012aa:	895b      	ldrh	r3, [r3, #10]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001550 <Modbus_Protocal_Worker+0x2c8>)
 80012ba:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 80012bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001554 <Modbus_Protocal_Worker+0x2cc>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001558 <Modbus_Protocal_Worker+0x2d0>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 80012d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012da:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8ec 	bl	80004bc <__aeabi_i2d>
 80012e4:	a392      	add	r3, pc, #584	@ (adr r3, 8001530 <Modbus_Protocal_Worker+0x2a8>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f951 	bl	8000590 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc05 	bl	8000b04 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8ef 	bl	80004e0 <__aeabi_f2d>
 8001302:	a38d      	add	r3, pc, #564	@ (adr r3, 8001538 <Modbus_Protocal_Worker+0x2b0>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7fe ff8a 	bl	8000220 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fbf6 	bl	8000b04 <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4a8f      	ldr	r2, [pc, #572]	@ (8001558 <Modbus_Protocal_Worker+0x2d0>)
 800131c:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 800131e:	f107 040c 	add.w	r4, r7, #12
 8001322:	f107 0210 	add.w	r2, r7, #16
 8001326:	f107 0114 	add.w	r1, r7, #20
 800132a:	f107 0018 	add.w	r0, r7, #24
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4623      	mov	r3, r4
 800133a:	f003 ff67 	bl	800520c <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8cd 	bl	80004e0 <__aeabi_f2d>
 8001346:	a37c      	add	r3, pc, #496	@ (adr r3, 8001538 <Modbus_Protocal_Worker+0x2b0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ff6a 	bl	8000224 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	a379      	add	r3, pc, #484	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f917 	bl	8000590 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbcb 	bl	8000b04 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001372:	edd7 7a07 	vldr	s15, [r7, #28]
 8001376:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b6f      	ldr	r3, [pc, #444]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 800138c:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8a5 	bl	80004e0 <__aeabi_f2d>
 8001396:	a36a      	add	r3, pc, #424	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f8f8 	bl	8000590 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fbac 	bl	8000b04 <__aeabi_d2f>
 80013ac:	ee07 0a90 	vmov	s15, r0
 80013b0:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 80013b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80013ca:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f886 	bl	80004e0 <__aeabi_f2d>
 80013d4:	a35a      	add	r3, pc, #360	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f8d9 	bl	8000590 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb8d 	bl	8000b04 <__aeabi_d2f>
 80013ea:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80013ee:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80013f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013f6:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80013fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fe:	ee17 3a90 	vmov	r3, s15
 8001402:	b21b      	sxth	r3, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b50      	ldr	r3, [pc, #320]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001408:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	eef0 7ae7 	vabs.f32	s15, s15
 8001412:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 3a90 	vmov	r3, s15
 8001422:	b21b      	sxth	r3, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b48      	ldr	r3, [pc, #288]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001428:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	eef0 7ae7 	vabs.f32	s15, s15
 8001432:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	ee17 3a90 	vmov	r3, s15
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) mmPosition * 10.0f;
 800144a:	edd7 7a04 	vldr	s15, [r7, #16]
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21b      	sxth	r3, r3
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b35      	ldr	r3, [pc, #212]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001474:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 8001476:	4b39      	ldr	r3, [pc, #228]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7ddb      	ldrb	r3, [r3, #23]
 800147c:	3b01      	subs	r3, #1
 800147e:	2b03      	cmp	r3, #3
 8001480:	d80a      	bhi.n	8001498 <Modbus_Protocal_Worker+0x210>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <Modbus_Protocal_Worker+0x200>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	080014a3 	.word	0x080014a3
 800148c:	08001669 	.word	0x08001669
 8001490:	08001561 	.word	0x08001561
 8001494:	080015a5 	.word	0x080015a5
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	75da      	strb	r2, [r3, #23]
		break;
 80014a0:	e0fa      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80014a2:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <Modbus_Protocal_Worker+0x234>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2202      	movs	r2, #2
 80014b4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80014b6:	f000 f9e5 	bl	8001884 <Modbus_Emission>
 80014ba:	e018      	b.n	80014ee <Modbus_Protocal_Worker+0x266>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d00b      	beq.n	80014ee <Modbus_Protocal_Worker+0x266>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2203      	movs	r2, #3
 80014ec:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 80014ee:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	f040 80c6 	bne.w	800168a <Modbus_Protocal_Worker+0x402>
			hModbus->modbusUartStructure.RxTail = 0;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 800151a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800151e:	4413      	add	r3, r2
 8001520:	3302      	adds	r3, #2
 8001522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001526:	4619      	mov	r1, r3
 8001528:	f008 ffce 	bl	800a4c8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 800152c:	e0ad      	b.n	800168a <Modbus_Protocal_Worker+0x402>
 800152e:	bf00      	nop
 8001530:	03b761f5 	.word	0x03b761f5
 8001534:	3f5c9871 	.word	0x3f5c9871
 8001538:	54442d18 	.word	0x54442d18
 800153c:	3ff921fb 	.word	0x3ff921fb
 8001540:	1a63c1f8 	.word	0x1a63c1f8
 8001544:	404ca5dc 	.word	0x404ca5dc
 8001548:	20001134 	.word	0x20001134
 800154c:	20000bc7 	.word	0x20000bc7
 8001550:	20000c50 	.word	0x20000c50
 8001554:	3dcccccd 	.word	0x3dcccccd
 8001558:	20000c48 	.word	0x20000c48
 800155c:	200002a4 	.word	0x200002a4
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001560:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	7d1b      	ldrb	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8091 	beq.w	800168e <Modbus_Protocal_Worker+0x406>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	22fe      	movs	r2, #254	@ 0xfe
 8001572:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001590:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001592:	1a8a      	subs	r2, r1, r2
 8001594:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001596:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800159a:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2204      	movs	r2, #4
 80015a0:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015a2:	e074      	b.n	800168e <Modbus_Protocal_Worker+0x406>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80015a4:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80015ac:	f113 0f02 	cmn.w	r3, #2
 80015b0:	d150      	bne.n	8001654 <Modbus_Protocal_Worker+0x3cc>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 80015ba:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 80015ca:	3b02      	subs	r3, #2
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fe22 	bl	8001218 <CRC16>
 80015d4:	4603      	mov	r3, r0
 80015d6:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 80015d8:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 80015e6:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015e8:	440b      	add	r3, r1
 80015ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d10c      	bne.n	800160c <Modbus_Protocal_Worker+0x384>
					&& CalculateCRC.U8[1]
 80015f2:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001600:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001602:	440b      	add	r3, r1
 8001604:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d004      	beq.n	8001616 <Modbus_Protocal_Worker+0x38e>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	22ff      	movs	r2, #255	@ 0xff
 8001612:	759a      	strb	r2, [r3, #22]
				break;
 8001614:	e040      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d113      	bne.n	8001650 <Modbus_Protocal_Worker+0x3c8>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001638:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001642:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001644:	461a      	mov	r2, r3
 8001646:	f00a fd1d 	bl	800c084 <memcpy>

			//execute command
			Modbus_frame_response();
 800164a:	f000 f903 	bl	8001854 <Modbus_frame_response>
 800164e:	e001      	b.n	8001654 <Modbus_Protocal_Worker+0x3cc>
				break;
 8001650:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001652:	e021      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		if (hModbus->Flag_T35TimeOut) {
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	7d5b      	ldrb	r3, [r3, #21]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <Modbus_Protocal_Worker+0x40a>
			hModbus->Mstatus = Modbus_state_Idle;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	75da      	strb	r2, [r3, #23]
		break;
 8001666:	e014      	b.n	8001692 <Modbus_Protocal_Worker+0x40a>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001672:	2b20      	cmp	r3, #32
 8001674:	d10f      	bne.n	8001696 <Modbus_Protocal_Worker+0x40e>
			hModbus->TxCount = 0;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	75da      	strb	r2, [r3, #23]
		break;
 8001688:	e005      	b.n	8001696 <Modbus_Protocal_Worker+0x40e>
		break;
 800168a:	bf00      	nop
 800168c:	e004      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 8001696:	bf00      	nop
}
 8001698:	bf00      	nop
 800169a:	3724      	adds	r7, #36	@ 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	200002a4 	.word	0x200002a4

080016a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	7e5b      	ldrb	r3, [r3, #25]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	7e92      	ldrb	r2, [r2, #26]
 80016ba:	4413      	add	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d903      	bls.n	80016d2 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f000 f8a0 	bl	8001810 <ModbusErrorReply>
		return;
 80016d0:	e023      	b.n	800171a <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	440b      	add	r3, r1
 80016e2:	7ed2      	ldrb	r2, [r2, #27]
 80016e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	7f12      	ldrb	r2, [r2, #28]
 80016f8:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <modbusWrite1Register+0x7c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3318      	adds	r3, #24
 8001708:	2208      	movs	r2, #8
 800170a:	4619      	mov	r1, r3
 800170c:	f00a fcba 	bl	800c084 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <modbusWrite1Register+0x7c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002a4 	.word	0x200002a4

08001724 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <modbusRead1Register+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	7edb      	ldrb	r3, [r3, #27]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 8001734:	4a35      	ldr	r2, [pc, #212]	@ (800180c <modbusRead1Register+0xe8>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 800173a:	4413      	add	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <modbusRead1Register+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	7e5b      	ldrb	r3, [r3, #25]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	4a30      	ldr	r2, [pc, #192]	@ (800180c <modbusRead1Register+0xe8>)
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	7e92      	ldrb	r2, [r2, #26]
 800174e:	4413      	add	r3, r2
 8001750:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <modbusRead1Register+0x3a>
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2b7d      	cmp	r3, #125	@ 0x7d
 800175c:	d903      	bls.n	8001766 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f856 	bl	8001810 <ModbusErrorReply>
		return;
 8001764:	e04e      	b.n	8001804 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 8001766:	88ba      	ldrh	r2, [r7, #4]
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <modbusRead1Register+0xe8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d808      	bhi.n	8001784 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001772:	88ba      	ldrh	r2, [r7, #4]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <modbusRead1Register+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d903      	bls.n	800178c <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001784:	2002      	movs	r0, #2
 8001786:	f000 f843 	bl	8001810 <ModbusErrorReply>
		return;
 800178a:	e03b      	b.n	8001804 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <modbusRead1Register+0xe8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2203      	movs	r2, #3
 8001792:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <modbusRead1Register+0xe8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80017a6:	2400      	movs	r4, #0
 80017a8:	e020      	b.n	80017ec <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <modbusRead1Register+0xe8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	4423      	add	r3, r4
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <modbusRead1Register+0xe8>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	1c63      	adds	r3, r4, #1
 80017be:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80017c0:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 80017c2:	4413      	add	r3, r2
 80017c4:	460a      	mov	r2, r1
 80017c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <modbusRead1Register+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	4423      	add	r3, r4
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <modbusRead1Register+0xe8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	0063      	lsls	r3, r4, #1
 80017de:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80017e0:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 80017e2:	4413      	add	r3, r2
 80017e4:	460a      	mov	r2, r1
 80017e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 80017ea:	3401      	adds	r4, #1
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	429c      	cmp	r4, r3
 80017f0:	dbdb      	blt.n	80017aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <modbusRead1Register+0xe8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	200002a4 	.word	0x200002a4

08001810 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <ModbusErrorReply+0x40>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	7e1a      	ldrb	r2, [r3, #24]
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <ModbusErrorReply+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <ModbusErrorReply+0x40>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <ModbusErrorReply+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200002a4 	.word	0x200002a4

08001854 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <Modbus_frame_response+0x2c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	7e1b      	ldrb	r3, [r3, #24]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d004      	beq.n	800186c <Modbus_frame_response+0x18>
 8001862:	2b06      	cmp	r3, #6
 8001864:	d105      	bne.n	8001872 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001866:	f7ff ff1d 	bl	80016a4 <modbusWrite1Register>
		break;
 800186a:	e006      	b.n	800187a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800186c:	f7ff ff5a 	bl	8001724 <modbusRead1Register>
		break;
 8001870:	e003      	b.n	800187a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff ffcc 	bl	8001810 <ModbusErrorReply>
		break;
 8001878:	bf00      	nop

	}
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002a4 	.word	0x200002a4

08001884 <Modbus_Emission>:

void Modbus_Emission() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <Modbus_Emission+0xe8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001894:	2b20      	cmp	r3, #32
 8001896:	d15d      	bne.n	8001954 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <Modbus_Emission+0xe8>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <Modbus_Emission+0xe8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80018a6:	4b31      	ldr	r3, [pc, #196]	@ (800196c <Modbus_Emission+0xe8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80018ae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <Modbus_Emission+0xe8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 80018b8:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <Modbus_Emission+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80018c0:	461a      	mov	r2, r3
 80018c2:	f00a fbdf 	bl	800c084 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 80018c6:	4b29      	ldr	r3, [pc, #164]	@ (800196c <Modbus_Emission+0xe8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <Modbus_Emission+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3203      	adds	r2, #3
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018dc:	4b23      	ldr	r3, [pc, #140]	@ (800196c <Modbus_Emission+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <Modbus_Emission+0xe8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018ec:	3b02      	subs	r3, #2
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff fc91 	bl	8001218 <CRC16>
 80018f6:	4603      	mov	r3, r0
 80018f8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <Modbus_Emission+0xe8>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <Modbus_Emission+0xe8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001906:	3b02      	subs	r3, #2
 8001908:	7939      	ldrb	r1, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	460a      	mov	r2, r1
 800190e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <Modbus_Emission+0xe8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <Modbus_Emission+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 800191e:	3b01      	subs	r3, #1
 8001920:	7979      	ldrb	r1, [r7, #5]
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <Modbus_Emission+0xe8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001934:	2b20      	cmp	r3, #32
 8001936:	d10d      	bne.n	8001954 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <Modbus_Emission+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <Modbus_Emission+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <Modbus_Emission+0xe8>)
 8001948:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 800194a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800194e:	461a      	mov	r2, r3
 8001950:	f008 fd3a 	bl	800a3c8 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <Modbus_Emission+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <Modbus_Emission+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	755a      	strb	r2, [r3, #21]

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200002a4 	.word	0x200002a4

08001970 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	ed87 0a02 	vstr	s0, [r7, #8]
 800197c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001980:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	eef0 7ae7 	vabs.f32	s15, s15
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef0 7ae7 	vabs.f32	s15, s15
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 80019a0:	edd7 7a00 	vldr	s15, [r7]
 80019a4:	eef0 7ae7 	vabs.f32	s15, s15
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 80019c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db02      	blt.n	80019d8 <Trapezoidal_Init+0x68>
 80019d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019d6:	e000      	b.n	80019da <Trapezoidal_Init+0x6a>
 80019d8:	4a49      	ldr	r2, [pc, #292]	@ (8001b00 <Trapezoidal_Init+0x190>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a06:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd14      	ble.n	8001a48 <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	f00a fb32 	bl	800c0a0 <sqrtf>
 8001a3c:	eef0 7a40 	vmov.f32	s15, s0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edc3 7a03 	vstr	s15, [r3, #12]
 8001a46:	e006      	b.n	8001a56 <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aac:	e017      	b.n	8001ade <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001aba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ae4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	bf800000 	.word	0xbf800000

08001b04 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b04:	b480      	push	{r7}
 8001b06:	b095      	sub	sp, #84	@ 0x54
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 812c 	bne.w	8001d72 <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001b20:	edd7 7a00 	vldr	s15, [r7]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001b46:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001b4a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001b56:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b62:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d111      	bne.n	8001bae <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001b8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b92:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001b9e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001ba2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001bb2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bb6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001bc2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bc6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001bec:	4b64      	ldr	r3, [pc, #400]	@ (8001d80 <Trapezoidal_Update+0x27c>)
 8001bee:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001bf0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d51a      	bpl.n	8001c40 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c16:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001c2a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c2e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c3e:	e079      	b.n	8001d34 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d519      	bpl.n	8001c8e <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001c5a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001c6a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c84:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8c:	e052      	b.n	8001d34 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001c8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	d53a      	bpl.n	8001d1e <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001ca8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001cb8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001cbc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cd8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001cdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001cf8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d04:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d10:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d14:	eef1 7a67 	vneg.f32	s15, s15
 8001d18:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001d1c:	e00a      	b.n	8001d34 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d20:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d3a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d4e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d62:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	edc3 7a06 	vstr	s15, [r3, #24]
 8001d70:	e000      	b.n	8001d74 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001d72:	bf00      	nop
}
 8001d74:	3754      	adds	r7, #84	@ 0x54
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	358637bd 	.word	0x358637bd
 8001d84:	00000000 	.word	0x00000000

08001d88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d8c:	ed2d 8b02 	vpush	{d8}
 8001d90:	b0df      	sub	sp, #380	@ 0x17c
 8001d92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d94:	f003 fe0f 	bl	80059b6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d98:	f001 ffca 	bl	8003d30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d9c:	f002 fc24 	bl	80045e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001da0:	f002 fbf0 	bl	8004584 <MX_DMA_Init>
	MX_TIM4_Init();
 8001da4:	f002 f96c 	bl	8004080 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001da8:	f002 f9c0 	bl	800412c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001dac:	f002 f912 	bl	8003fd4 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001db0:	f002 fa0a 	bl	80041c8 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001db4:	f002 fac4 	bl	8004340 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001db8:	f002 f806 	bl	8003dc8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001dbc:	f002 f88a 	bl	8003ed4 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001dc0:	f002 fb62 	bl	8004488 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001dc4:	f002 fb90 	bl	80044e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001dc8:	484b      	ldr	r0, [pc, #300]	@ (8001ef8 <main+0x170>)
 8001dca:	f005 fd05 	bl	80077d8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4849      	ldr	r0, [pc, #292]	@ (8001ef8 <main+0x170>)
 8001dd2:	f005 ffcd 	bl	8007d70 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4847      	ldr	r0, [pc, #284]	@ (8001ef8 <main+0x170>)
 8001dda:	f005 ffc9 	bl	8007d70 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001dde:	4847      	ldr	r0, [pc, #284]	@ (8001efc <main+0x174>)
 8001de0:	f005 fcfa 	bl	80077d8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001de4:	2100      	movs	r1, #0
 8001de6:	4845      	ldr	r0, [pc, #276]	@ (8001efc <main+0x174>)
 8001de8:	f005 ffc2 	bl	8007d70 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001dec:	2104      	movs	r1, #4
 8001dee:	4843      	ldr	r0, [pc, #268]	@ (8001efc <main+0x174>)
 8001df0:	f005 ffbe 	bl	8007d70 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001df4:	213c      	movs	r1, #60	@ 0x3c
 8001df6:	4842      	ldr	r0, [pc, #264]	@ (8001f00 <main+0x178>)
 8001df8:	f006 fa68 	bl	80082cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001dfc:	213c      	movs	r1, #60	@ 0x3c
 8001dfe:	4841      	ldr	r0, [pc, #260]	@ (8001f04 <main+0x17c>)
 8001e00:	f006 fa64 	bl	80082cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e04:	4840      	ldr	r0, [pc, #256]	@ (8001f08 <main+0x180>)
 8001e06:	f005 fd57 	bl	80078b8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e0a:	4840      	ldr	r0, [pc, #256]	@ (8001f0c <main+0x184>)
 8001e0c:	f005 fce4 	bl	80077d8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e10:	2108      	movs	r1, #8
 8001e12:	483e      	ldr	r0, [pc, #248]	@ (8001f0c <main+0x184>)
 8001e14:	f005 fe36 	bl	8007a84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001e18:	210c      	movs	r1, #12
 8001e1a:	483c      	ldr	r0, [pc, #240]	@ (8001f0c <main+0x184>)
 8001e1c:	f005 fe32 	bl	8007a84 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001e20:	483b      	ldr	r0, [pc, #236]	@ (8001f10 <main+0x188>)
 8001e22:	f005 fcd9 	bl	80077d8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001e26:	2100      	movs	r1, #0
 8001e28:	4839      	ldr	r0, [pc, #228]	@ (8001f10 <main+0x188>)
 8001e2a:	f005 fe2b 	bl	8007a84 <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001e2e:	f002 fd03 	bl	8004838 <DWT_Init>

	PID.Kp = 0.1;
 8001e32:	4a38      	ldr	r2, [pc, #224]	@ (8001f14 <main+0x18c>)
 8001e34:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <main+0x190>)
 8001e36:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001e38:	4a36      	ldr	r2, [pc, #216]	@ (8001f14 <main+0x18c>)
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <main+0x194>)
 8001e3c:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001e3e:	4a35      	ldr	r2, [pc, #212]	@ (8001f14 <main+0x18c>)
 8001e40:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <main+0x190>)
 8001e42:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4833      	ldr	r0, [pc, #204]	@ (8001f14 <main+0x18c>)
 8001e48:	f00a f8b4 	bl	800bfb4 <arm_pid_init_f32>

	Reset_R();
 8001e4c:	f003 f946 	bl	80050dc <Reset_R>
	Reset_P();
 8001e50:	f003 f954 	bl	80050fc <Reset_P>
	calibState = CALIB_IDLE;
 8001e54:	4a32      	ldr	r2, [pc, #200]	@ (8001f20 <main+0x198>)
 8001e56:	2300      	movs	r3, #0
 8001e58:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f003 f914 	bl	8005088 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001e60:	4a30      	ldr	r2, [pc, #192]	@ (8001f24 <main+0x19c>)
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <main+0x1a0>)
 8001e64:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001e66:	4a2f      	ldr	r2, [pc, #188]	@ (8001f24 <main+0x19c>)
 8001e68:	4b30      	ldr	r3, [pc, #192]	@ (8001f2c <main+0x1a4>)
 8001e6a:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <main+0x19c>)
 8001e6e:	2315      	movs	r3, #21
 8001e70:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001e72:	4a2c      	ldr	r2, [pc, #176]	@ (8001f24 <main+0x19c>)
 8001e74:	23c8      	movs	r3, #200	@ 0xc8
 8001e76:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001e78:	492d      	ldr	r1, [pc, #180]	@ (8001f30 <main+0x1a8>)
 8001e7a:	482a      	ldr	r0, [pc, #168]	@ (8001f24 <main+0x19c>)
 8001e7c:	f7ff f976 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001e80:	4a2b      	ldr	r2, [pc, #172]	@ (8001f30 <main+0x1a8>)
 8001e82:	2300      	movs	r3, #0
 8001e84:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001e86:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001f34 <main+0x1ac>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f003 f87e 	bl	8004f8c <Set_Motor>
	Set_Motor(1, 0);
 8001e90:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001f34 <main+0x1ac>
 8001e94:	2001      	movs	r0, #1
 8001e96:	f003 f879 	bl	8004f8c <Set_Motor>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (Test_no_BaseSystem == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001e9a:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <main+0x1b0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <main+0x130>
 8001ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea6:	4825      	ldr	r0, [pc, #148]	@ (8001f3c <main+0x1b4>)
 8001ea8:	f004 fbba 	bl	8006620 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <main+0x130>
		{
			Test_no_BaseSystem = 1;
 8001eb2:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <main+0x1b0>)
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <main+0x1a8>)
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	@ (8001f40 <main+0x1b8>)
 8001ebe:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0)
 8001ec0:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <main+0x1bc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d17f      	bne.n	8001fc8 <main+0x240>
		{
			switch (base_status)
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <main+0x1b8>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d00e      	beq.n	8001eee <main+0x166>
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	dc39      	bgt.n	8001f48 <main+0x1c0>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <main+0x156>
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d004      	beq.n	8001ee6 <main+0x15e>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001edc:	e034      	b.n	8001f48 <main+0x1c0>
				REG16(REG_MOTION_STATUS) = 1;
 8001ede:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <main+0x1a8>)
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	8413      	strh	r3, [r2, #32]
				break;
 8001ee4:	e031      	b.n	8001f4a <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 2;
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <main+0x1a8>)
 8001ee8:	2302      	movs	r3, #2
 8001eea:	8413      	strh	r3, [r2, #32]
				break;
 8001eec:	e02d      	b.n	8001f4a <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 4;
 8001eee:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <main+0x1a8>)
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	8413      	strh	r3, [r2, #32]
				break;
 8001ef4:	e029      	b.n	8001f4a <main+0x1c2>
 8001ef6:	bf00      	nop
 8001ef8:	200002a8 	.word	0x200002a8
 8001efc:	20000374 	.word	0x20000374
 8001f00:	20000440 	.word	0x20000440
 8001f04:	2000050c 	.word	0x2000050c
 8001f08:	200005d8 	.word	0x200005d8
 8001f0c:	200006a4 	.word	0x200006a4
 8001f10:	20000770 	.word	0x20000770
 8001f14:	20000bd8 	.word	0x20000bd8
 8001f18:	3dcccccd 	.word	0x3dcccccd
 8001f1c:	3727c5ac 	.word	0x3727c5ac
 8001f20:	20000c24 	.word	0x20000c24
 8001f24:	20000c5c 	.word	0x20000c5c
 8001f28:	20000908 	.word	0x20000908
 8001f2c:	2000083c 	.word	0x2000083c
 8001f30:	20001134 	.word	0x20001134
 8001f34:	00000000 	.word	0x00000000
 8001f38:	20000c46 	.word	0x20000c46
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	200012c4 	.word	0x200012c4
 8001f44:	20000bc5 	.word	0x20000bc5
				break;
 8001f48:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem)
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <main+0x3e8>)
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <main+0x3ec>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d007      	beq.n	8001f70 <main+0x1e8>
			{
				TargetR = TargetR_BaseSystem;
 8001f60:	4b83      	ldr	r3, [pc, #524]	@ (8002170 <main+0x3e8>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b84      	ldr	r3, [pc, #528]	@ (8002178 <main+0x3f0>)
 8001f66:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001f68:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <main+0x3e8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b81      	ldr	r3, [pc, #516]	@ (8002174 <main+0x3ec>)
 8001f6e:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem)
 8001f70:	4b82      	ldr	r3, [pc, #520]	@ (800217c <main+0x3f4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7c:	4b80      	ldr	r3, [pc, #512]	@ (8002180 <main+0x3f8>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d00e      	beq.n	8001faa <main+0x222>
			{
				TargetP = TargetP_BaseSystem;
 8001f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8002180 <main+0x3f8>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b7c      	ldr	r3, [pc, #496]	@ (8002184 <main+0x3fc>)
 8001f92:	601a      	str	r2, [r3, #0]
				Last_Pen_BaseSystem = TargetP_BaseSystem;
 8001f94:	4b7a      	ldr	r3, [pc, #488]	@ (8002180 <main+0x3f8>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4a75      	ldr	r2, [pc, #468]	@ (800217c <main+0x3f4>)
 8001fa8:	7013      	strb	r3, [r2, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem)
 8001faa:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <main+0x400>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b73      	ldr	r3, [pc, #460]	@ (800217c <main+0x3f4>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d008      	beq.n	8001fc8 <main+0x240>
			{
				Set_Servo(Pen_BaseSystem);
 8001fb6:	4b74      	ldr	r3, [pc, #464]	@ (8002188 <main+0x400>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 f864 	bl	8005088 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 8001fc0:	4b71      	ldr	r3, [pc, #452]	@ (8002188 <main+0x400>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800217c <main+0x3f4>)
 8001fc6:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8001fc8:	f7ff f95e 	bl	8001288 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <main+0x404>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8002190 <main+0x408>)
 8001fd4:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002194 <main+0x40c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fdc:	4b6e      	ldr	r3, [pc, #440]	@ (8002198 <main+0x410>)
 8001fde:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001fe0:	f002 fd20 	bl	8004a24 <micros>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		if (currentTime > timestamp)
 8001fec:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800219c <main+0x414>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	4282      	cmp	r2, r0
 8001ff8:	418b      	sbcs	r3, r1
 8001ffa:	d212      	bcs.n	8002022 <main+0x29a>
		{
			timestamp = currentTime + 1000; // us
 8001ffc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8002000:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002004:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002008:	f143 0300 	adc.w	r3, r3, #0
 800200c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002010:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002014:	4b61      	ldr	r3, [pc, #388]	@ (800219c <main+0x414>)
 8002016:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 800201a:	f002 fde9 	bl	8004bf0 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 800201e:	f002 fef1 	bl	8004e04 <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8002022:	f002 fcff 	bl	8004a24 <micros>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
		if (currentTime1 > timestamp1)
 800202e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002032:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <main+0x418>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4282      	cmp	r2, r0
 800203a:	418b      	sbcs	r3, r1
 800203c:	d20f      	bcs.n	800205e <main+0x2d6>
		{
			timestamp1 = currentTime1 + 10000; // us
 800203e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8002042:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002046:	1851      	adds	r1, r2, r1
 8002048:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800204c:	f143 0300 	adc.w	r3, r3, #0
 8002050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002054:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002058:	4b51      	ldr	r3, [pc, #324]	@ (80021a0 <main+0x418>)
 800205a:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 800205e:	f002 fce1 	bl	8004a24 <micros>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		if (currentTime2 > timestamp2)
 800206a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800206e:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <main+0x41c>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	4282      	cmp	r2, r0
 8002076:	418b      	sbcs	r3, r1
 8002078:	d20c      	bcs.n	8002094 <main+0x30c>
		{
			timestamp2 = currentTime2 + 100000; // us
 800207a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800207e:	494a      	ldr	r1, [pc, #296]	@ (80021a8 <main+0x420>)
 8002080:	1851      	adds	r1, r2, r1
 8002082:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002084:	f143 0300 	adc.w	r3, r3, #0
 8002088:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800208a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800208e:	4b45      	ldr	r3, [pc, #276]	@ (80021a4 <main+0x41c>)
 8002090:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition * cosf(Revolute_QEIdata.RadPosition * -1);
 8002094:	4b45      	ldr	r3, [pc, #276]	@ (80021ac <main+0x424>)
 8002096:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 800209a:	4b45      	ldr	r3, [pc, #276]	@ (80021b0 <main+0x428>)
 800209c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020a0:	eef1 7a67 	vneg.f32	s15, s15
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	f00a f818 	bl	800c0dc <cosf>
 80020ac:	eef0 7a40 	vmov.f32	s15, s0
 80020b0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80020b4:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <main+0x42c>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition * sinf(Revolute_QEIdata.RadPosition);
 80020ba:	4b3c      	ldr	r3, [pc, #240]	@ (80021ac <main+0x424>)
 80020bc:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 80020c0:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <main+0x428>)
 80020c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	f00a f84b 	bl	800c164 <sinf>
 80020ce:	eef0 7a40 	vmov.f32	s15, s0
 80020d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80020d6:	4b38      	ldr	r3, [pc, #224]	@ (80021b8 <main+0x430>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1)
 80020dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e0:	4836      	ldr	r0, [pc, #216]	@ (80021bc <main+0x434>)
 80020e2:	f004 fa9d 	bl	8006620 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10e      	bne.n	800210a <main+0x382>
		{
			Mode = 0;
 80020ec:	4a34      	ldr	r2, [pc, #208]	@ (80021c0 <main+0x438>)
 80020ee:	2300      	movs	r3, #0
 80020f0:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 80020f2:	4a34      	ldr	r2, [pc, #208]	@ (80021c4 <main+0x43c>)
 80020f4:	2301      	movs	r3, #1
 80020f6:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f002 ffc5 	bl	8005088 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002104:	482d      	ldr	r0, [pc, #180]	@ (80021bc <main+0x434>)
 8002106:	f004 faa3 	bl	8006650 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 800210a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800210e:	482e      	ldr	r0, [pc, #184]	@ (80021c8 <main+0x440>)
 8002110:	f004 fa86 	bl	8006620 <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <main+0x3a4>
		{
			EmergencyState = 0;
 800211a:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <main+0x43c>)
 800211c:	2300      	movs	r3, #0
 800211e:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002126:	4825      	ldr	r0, [pc, #148]	@ (80021bc <main+0x434>)
 8002128:	f004 fa92 	bl	8006650 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1)
 800212c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002130:	4825      	ldr	r0, [pc, #148]	@ (80021c8 <main+0x440>)
 8002132:	f004 fa75 	bl	8006620 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d102      	bne.n	8002142 <main+0x3ba>
		{
			Pen_Status = 0;
 800213c:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <main+0x444>)
 800213e:	2300      	movs	r3, #0
 8002140:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002142:	2104      	movs	r1, #4
 8002144:	4820      	ldr	r0, [pc, #128]	@ (80021c8 <main+0x440>)
 8002146:	f004 fa6b 	bl	8006620 <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <main+0x3ce>
		{
			Pen_Status = 1;
 8002150:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <main+0x444>)
 8002152:	2301      	movs	r3, #1
 8002154:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 8002156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800215a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215e:	f004 fa5f 	bl	8006620 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b01      	cmp	r3, #1
 8002166:	d135      	bne.n	80021d4 <main+0x44c>
		{
			z_temp = 1;
 8002168:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <main+0x448>)
 800216a:	2301      	movs	r3, #1
 800216c:	7013      	strb	r3, [r2, #0]
 800216e:	e03d      	b.n	80021ec <main+0x464>
 8002170:	20000c48 	.word	0x20000c48
 8002174:	20000c54 	.word	0x20000c54
 8002178:	20000b8c 	.word	0x20000b8c
 800217c:	20000c58 	.word	0x20000c58
 8002180:	20000c4c 	.word	0x20000c4c
 8002184:	20000b90 	.word	0x20000b90
 8002188:	20000c50 	.word	0x20000c50
 800218c:	2000050c 	.word	0x2000050c
 8002190:	20000ae8 	.word	0x20000ae8
 8002194:	20000440 	.word	0x20000440
 8002198:	20000aec 	.word	0x20000aec
 800219c:	20001320 	.word	0x20001320
 80021a0:	20001328 	.word	0x20001328
 80021a4:	20001330 	.word	0x20001330
 80021a8:	000186a0 	.word	0x000186a0
 80021ac:	20000b30 	.word	0x20000b30
 80021b0:	20000af0 	.word	0x20000af0
 80021b4:	20000b7c 	.word	0x20000b7c
 80021b8:	20000b80 	.word	0x20000b80
 80021bc:	48000800 	.word	0x48000800
 80021c0:	20000bc4 	.word	0x20000bc4
 80021c4:	20000bc5 	.word	0x20000bc5
 80021c8:	48000400 	.word	0x48000400
 80021cc:	20000bc7 	.word	0x20000bc7
 80021d0:	20000b71 	.word	0x20000b71
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 80021d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f004 fa20 	bl	8006620 <HAL_GPIO_ReadPin>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <main+0x464>
		{
			z_temp = 0;
 80021e6:	4ab7      	ldr	r2, [pc, #732]	@ (80024c4 <main+0x73c>)
 80021e8:	2300      	movs	r3, #0
 80021ea:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1)
 80021ec:	4bb6      	ldr	r3, [pc, #728]	@ (80024c8 <main+0x740>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <main+0x472>
		{
			REG16(REG_MOTION_STATUS) = 0;
 80021f4:	4ab5      	ldr	r2, [pc, #724]	@ (80024cc <main+0x744>)
 80021f6:	2300      	movs	r3, #0
 80021f8:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem == 1)) || base_status == 8)
 80021fa:	4bb5      	ldr	r3, [pc, #724]	@ (80024d0 <main+0x748>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <main+0x48a>
 8002202:	4bb4      	ldr	r3, [pc, #720]	@ (80024d4 <main+0x74c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d008      	beq.n	800221c <main+0x494>
 800220a:	4bb3      	ldr	r3, [pc, #716]	@ (80024d8 <main+0x750>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d004      	beq.n	800221c <main+0x494>
 8002212:	4bb0      	ldr	r3, [pc, #704]	@ (80024d4 <main+0x74c>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b08      	cmp	r3, #8
 8002218:	f040 81e5 	bne.w	80025e6 <main+0x85e>
		{
			//////////////////////////////////////////////////////////////
			REG16(REG_MOTION_STATUS) = 8;
 800221c:	4aab      	ldr	r2, [pc, #684]	@ (80024cc <main+0x744>)
 800221e:	2308      	movs	r3, #8
 8002220:	8413      	strh	r3, [r2, #32]

			if (TenPointMode)
 8002222:	4bae      	ldr	r3, [pc, #696]	@ (80024dc <main+0x754>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <main+0x4c8>
			{
				//				float R, P;
				//				ReadOneSlot(counter, &R, &P);
				//				TargetR = R;
				//				TargetP = P;
				TargetR = testArray[(counter * 2) + 1];
 800222a:	4bad      	ldr	r3, [pc, #692]	@ (80024e0 <main+0x758>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	3301      	adds	r3, #1
 8002232:	4aac      	ldr	r2, [pc, #688]	@ (80024e4 <main+0x75c>)
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4bab      	ldr	r3, [pc, #684]	@ (80024e8 <main+0x760>)
 800223c:	601a      	str	r2, [r3, #0]
				TargetP = testArray[counter * 2];
 800223e:	4ba8      	ldr	r3, [pc, #672]	@ (80024e0 <main+0x758>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4aa7      	ldr	r2, [pc, #668]	@ (80024e4 <main+0x75c>)
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4ba7      	ldr	r3, [pc, #668]	@ (80024ec <main+0x764>)
 800224e:	601a      	str	r2, [r3, #0]
			}
			//////////////////////////////////////////////////////////////

			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 8002250:	4ba5      	ldr	r3, [pc, #660]	@ (80024e8 <main+0x760>)
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	4ba6      	ldr	r3, [pc, #664]	@ (80024f0 <main+0x768>)
 8002258:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800225c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002260:	4ba4      	ldr	r3, [pc, #656]	@ (80024f4 <main+0x76c>)
 8002262:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 8002266:	4ba0      	ldr	r3, [pc, #640]	@ (80024e8 <main+0x760>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			//			PID.Ki = 10;
			//			PID.Kd = 0.1;
			//			arm_pid_init_f32(&PID, 1);
			//			R_PWM = arm_pid_f32(&PID, R_Pos_Error);
			//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800226e:	4b9f      	ldr	r3, [pc, #636]	@ (80024ec <main+0x764>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	4ba0      	ldr	r3, [pc, #640]	@ (80024f8 <main+0x770>)
 8002276:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	4b9f      	ldr	r3, [pc, #636]	@ (80024fc <main+0x774>)
 8002280:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 8002284:	4b99      	ldr	r3, [pc, #612]	@ (80024ec <main+0x764>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			//			arm_pid_init_f32(&PID, 1);
			//			P_PWM = arm_pid_f32(&PID, P_Pos_Error);

			// Call every 0.001 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 800228c:	f002 fbca 	bl	8004a24 <micros>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
			if (currentTimeState2 > timestampState2)
 8002298:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800229c:	4b98      	ldr	r3, [pc, #608]	@ (8002500 <main+0x778>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	4282      	cmp	r2, r0
 80022a4:	418b      	sbcs	r3, r1
 80022a6:	f080 80d3 	bcs.w	8002450 <main+0x6c8>
			{
				timestampState2 = currentTimeState2 + 1000; // us
 80022aa:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80022ae:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 80022b2:	6739      	str	r1, [r7, #112]	@ 0x70
 80022b4:	f143 0300 	adc.w	r3, r3, #0
 80022b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80022ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80022be:	4b90      	ldr	r3, [pc, #576]	@ (8002500 <main+0x778>)
 80022c0:	e9c3 0100 	strd	r0, r1, [r3]

				//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
				//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0)
 80022c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d13c      	bne.n	8002346 <main+0x5be>
				{
					revolute.current_position = Revolute_QEIdata.RadPosition;
 80022cc:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <main+0x768>)
 80022ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					Trapezoidal_Update(&revolute, 0.01);
 80022d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022d8:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8002504 <main+0x77c>
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fc11 	bl	8001b04 <Trapezoidal_Update>
					TargetRVel = revolute.current_velocity;
 80022e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <main+0x780>)
 80022e8:	601a      	str	r2, [r3, #0]
					R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 80022ea:	4b87      	ldr	r3, [pc, #540]	@ (8002508 <main+0x780>)
 80022ec:	ed93 7a00 	vldr	s14, [r3]
 80022f0:	4b7f      	ldr	r3, [pc, #508]	@ (80024f0 <main+0x768>)
 80022f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	4b84      	ldr	r3, [pc, #528]	@ (800250c <main+0x784>)
 80022fc:	edc3 7a00 	vstr	s15, [r3]
					//					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f,
					//							0.01f, -100.0f, 100.0f, &pid_r_v);
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8002300:	4b82      	ldr	r3, [pc, #520]	@ (800250c <main+0x784>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	4b82      	ldr	r3, [pc, #520]	@ (8002510 <main+0x788>)
 8002308:	ed93 7a00 	vldr	s14, [r3]
 800230c:	4b81      	ldr	r3, [pc, #516]	@ (8002514 <main+0x78c>)
 800230e:	edd3 6a00 	vldr	s13, [r3]
 8002312:	4b81      	ldr	r3, [pc, #516]	@ (8002518 <main+0x790>)
 8002314:	ed93 6a00 	vldr	s12, [r3]
 8002318:	4880      	ldr	r0, [pc, #512]	@ (800251c <main+0x794>)
 800231a:	ed9f 3a81 	vldr	s6, [pc, #516]	@ 8002520 <main+0x798>
 800231e:	eddf 2a81 	vldr	s5, [pc, #516]	@ 8002524 <main+0x79c>
 8002322:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 8002504 <main+0x77c>
 8002326:	eef0 1a46 	vmov.f32	s3, s12
 800232a:	eeb0 1a66 	vmov.f32	s2, s13
 800232e:	eef0 0a47 	vmov.f32	s1, s14
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	f002 fb8f 	bl	8004a58 <PID_Update>
 800233a:	eef0 7a40 	vmov.f32	s15, s0
 800233e:	4b7a      	ldr	r3, [pc, #488]	@ (8002528 <main+0x7a0>)
 8002340:	edc3 7a00 	vstr	s15, [r3]
 8002344:	e021      	b.n	800238a <main+0x602>
									   R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
				}
				else
				{
					R_PWM = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 8002346:	4b6b      	ldr	r3, [pc, #428]	@ (80024f4 <main+0x76c>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	4b77      	ldr	r3, [pc, #476]	@ (800252c <main+0x7a4>)
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	4b77      	ldr	r3, [pc, #476]	@ (8002530 <main+0x7a8>)
 8002354:	edd3 6a00 	vldr	s13, [r3]
 8002358:	4b76      	ldr	r3, [pc, #472]	@ (8002534 <main+0x7ac>)
 800235a:	ed93 6a00 	vldr	s12, [r3]
 800235e:	4876      	ldr	r0, [pc, #472]	@ (8002538 <main+0x7b0>)
 8002360:	ed9f 3a6f 	vldr	s6, [pc, #444]	@ 8002520 <main+0x798>
 8002364:	eddf 2a6f 	vldr	s5, [pc, #444]	@ 8002524 <main+0x79c>
 8002368:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 8002504 <main+0x77c>
 800236c:	eef0 1a46 	vmov.f32	s3, s12
 8002370:	eeb0 1a66 	vmov.f32	s2, s13
 8002374:	eef0 0a47 	vmov.f32	s1, s14
 8002378:	eeb0 0a67 	vmov.f32	s0, s15
 800237c:	f002 fb6c 	bl	8004a58 <PID_Update>
 8002380:	eef0 7a40 	vmov.f32	s15, s0
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <main+0x7a0>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
									   R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
				}

				if (prismatic.finished == 0)
 800238a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13c      	bne.n	800240c <main+0x684>
				{
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 8002392:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <main+0x770>)
 8002394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
					Trapezoidal_Update(&prismatic, 0.01);
 800239a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800239e:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002504 <main+0x77c>
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fbae 	bl	8001b04 <Trapezoidal_Update>
					TargetPVel = prismatic.current_velocity;
 80023a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <main+0x7b4>)
 80023ae:	601a      	str	r2, [r3, #0]
					P_Velo_Error = (TargetPVel - Prismatic_QEIdata.Velocity);
 80023b0:	4b62      	ldr	r3, [pc, #392]	@ (800253c <main+0x7b4>)
 80023b2:	ed93 7a00 	vldr	s14, [r3]
 80023b6:	4b50      	ldr	r3, [pc, #320]	@ (80024f8 <main+0x770>)
 80023b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <main+0x7b8>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
					//					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
					//							-100.0f, 100.0f, &pid_p_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 80023c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <main+0x7b8>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002544 <main+0x7bc>)
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <main+0x7c0>)
 80023d4:	edd3 6a00 	vldr	s13, [r3]
 80023d8:	4b5c      	ldr	r3, [pc, #368]	@ (800254c <main+0x7c4>)
 80023da:	ed93 6a00 	vldr	s12, [r3]
 80023de:	485c      	ldr	r0, [pc, #368]	@ (8002550 <main+0x7c8>)
 80023e0:	ed9f 3a4f 	vldr	s6, [pc, #316]	@ 8002520 <main+0x798>
 80023e4:	eddf 2a4f 	vldr	s5, [pc, #316]	@ 8002524 <main+0x79c>
 80023e8:	ed9f 2a46 	vldr	s4, [pc, #280]	@ 8002504 <main+0x77c>
 80023ec:	eef0 1a46 	vmov.f32	s3, s12
 80023f0:	eeb0 1a66 	vmov.f32	s2, s13
 80023f4:	eef0 0a47 	vmov.f32	s1, s14
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	f002 fb2c 	bl	8004a58 <PID_Update>
 8002400:	eef0 7a40 	vmov.f32	s15, s0
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <main+0x7cc>)
 8002406:	edc3 7a00 	vstr	s15, [r3]
 800240a:	e021      	b.n	8002450 <main+0x6c8>
									   P_kD_vel, 0.01f, -100.0f, 100.0f, &pid_p_v);
				}
				else
				{
					P_PWM = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 800240c:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <main+0x774>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	4b51      	ldr	r3, [pc, #324]	@ (8002558 <main+0x7d0>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b50      	ldr	r3, [pc, #320]	@ (800255c <main+0x7d4>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	4b50      	ldr	r3, [pc, #320]	@ (8002560 <main+0x7d8>)
 8002420:	ed93 6a00 	vldr	s12, [r3]
 8002424:	484f      	ldr	r0, [pc, #316]	@ (8002564 <main+0x7dc>)
 8002426:	ed9f 3a3e 	vldr	s6, [pc, #248]	@ 8002520 <main+0x798>
 800242a:	eddf 2a3e 	vldr	s5, [pc, #248]	@ 8002524 <main+0x79c>
 800242e:	ed9f 2a35 	vldr	s4, [pc, #212]	@ 8002504 <main+0x77c>
 8002432:	eef0 1a46 	vmov.f32	s3, s12
 8002436:	eeb0 1a66 	vmov.f32	s2, s13
 800243a:	eef0 0a47 	vmov.f32	s1, s14
 800243e:	eeb0 0a67 	vmov.f32	s0, s15
 8002442:	f002 fb09 	bl	8004a58 <PID_Update>
 8002446:	eef0 7a40 	vmov.f32	s15, s0
 800244a:	4b42      	ldr	r3, [pc, #264]	@ (8002554 <main+0x7cc>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
									   P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);
				}
			}

			Workspace_limit();
 8002450:	f002 fe66 	bl	8005120 <Workspace_limit>

			Set_Motor(0, R_PWM);
 8002454:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <main+0x7a0>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eeb0 0a67 	vmov.f32	s0, s15
 800245e:	2000      	movs	r0, #0
 8002460:	f002 fd94 	bl	8004f8c <Set_Motor>
			Set_Motor(1, P_PWM);
 8002464:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <main+0x7cc>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eeb0 0a67 	vmov.f32	s0, s15
 800246e:	2001      	movs	r0, #1
 8002470:	f002 fd8c 	bl	8004f8c <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD && fabsf(P_Pos_Error) < P_ERR_TOL_MM)
 8002474:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <main+0x76c>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	eef0 7ae7 	vabs.f32	s15, s15
 800247e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002568 <main+0x7e0>
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	f140 80a3 	bpl.w	80025d4 <main+0x84c>
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <main+0x774>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	eef0 7ae7 	vabs.f32	s15, s15
 8002498:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800256c <main+0x7e4>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	f140 8096 	bpl.w	80025d4 <main+0x84c>
			{
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 80024a8:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <main+0x7e8>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	d160      	bne.n	8002574 <main+0x7ec>
					lock_timer_us = micros(); /* start timing */
 80024b2:	f002 fab7 	bl	8004a24 <micros>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	492d      	ldr	r1, [pc, #180]	@ (8002570 <main+0x7e8>)
 80024bc:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 80024c0:	e090      	b.n	80025e4 <main+0x85c>
 80024c2:	bf00      	nop
 80024c4:	20000b71 	.word	0x20000b71
 80024c8:	20000bc5 	.word	0x20000bc5
 80024cc:	20001134 	.word	0x20001134
 80024d0:	20000bc4 	.word	0x20000bc4
 80024d4:	200012c4 	.word	0x200012c4
 80024d8:	20000c46 	.word	0x20000c46
 80024dc:	20000c45 	.word	0x20000c45
 80024e0:	20000c44 	.word	0x20000c44
 80024e4:	200012c8 	.word	0x200012c8
 80024e8:	20000b8c 	.word	0x20000b8c
 80024ec:	20000b90 	.word	0x20000b90
 80024f0:	20000af0 	.word	0x20000af0
 80024f4:	20000bac 	.word	0x20000bac
 80024f8:	20000b30 	.word	0x20000b30
 80024fc:	20000bb0 	.word	0x20000bb0
 8002500:	20001338 	.word	0x20001338
 8002504:	3c23d70a 	.word	0x3c23d70a
 8002508:	20000b9c 	.word	0x20000b9c
 800250c:	20000bb4 	.word	0x20000bb4
 8002510:	20000200 	.word	0x20000200
 8002514:	20000204 	.word	0x20000204
 8002518:	20000c1c 	.word	0x20000c1c
 800251c:	20000c0c 	.word	0x20000c0c
 8002520:	42c80000 	.word	0x42c80000
 8002524:	c2c80000 	.word	0xc2c80000
 8002528:	20000bbc 	.word	0x20000bbc
 800252c:	20000208 	.word	0x20000208
 8002530:	2000020c 	.word	0x2000020c
 8002534:	20000210 	.word	0x20000210
 8002538:	20000bfc 	.word	0x20000bfc
 800253c:	20000ba0 	.word	0x20000ba0
 8002540:	20000bb8 	.word	0x20000bb8
 8002544:	20000214 	.word	0x20000214
 8002548:	20000218 	.word	0x20000218
 800254c:	20000c20 	.word	0x20000c20
 8002550:	20000c14 	.word	0x20000c14
 8002554:	20000bc0 	.word	0x20000bc0
 8002558:	2000021c 	.word	0x2000021c
 800255c:	20000220 	.word	0x20000220
 8002560:	20000224 	.word	0x20000224
 8002564:	20000c04 	.word	0x20000c04
 8002568:	3d0b4396 	.word	0x3d0b4396
 800256c:	3e4ccccd 	.word	0x3e4ccccd
 8002570:	20000bd0 	.word	0x20000bd0

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US)
 8002574:	f002 fa56 	bl	8004a24 <micros>
 8002578:	4bb7      	ldr	r3, [pc, #732]	@ (8002858 <main+0xad0>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	1a84      	subs	r4, r0, r2
 8002580:	eb61 0503 	sbc.w	r5, r1, r3
 8002584:	4bb5      	ldr	r3, [pc, #724]	@ (800285c <main+0xad4>)
 8002586:	429c      	cmp	r4, r3
 8002588:	f175 0300 	sbcs.w	r3, r5, #0
 800258c:	d32a      	bcc.n	80025e4 <main+0x85c>
				{
					Set_Servo(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f002 fd7a 	bl	8005088 <Set_Servo>
					if (TenPointMode)
 8002594:	4bb2      	ldr	r3, [pc, #712]	@ (8002860 <main+0xad8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <main+0x83c>
					{
						if (counter == 9)
 800259c:	4bb1      	ldr	r3, [pc, #708]	@ (8002864 <main+0xadc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d109      	bne.n	80025b8 <main+0x830>
						{
							TenPointMode = 0;
 80025a4:	4aae      	ldr	r2, [pc, #696]	@ (8002860 <main+0xad8>)
 80025a6:	2300      	movs	r3, #0
 80025a8:	7013      	strb	r3, [r2, #0]
							counter = 0;
 80025aa:	4aae      	ldr	r2, [pc, #696]	@ (8002864 <main+0xadc>)
 80025ac:	2300      	movs	r3, #0
 80025ae:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 80025b0:	4aad      	ldr	r2, [pc, #692]	@ (8002868 <main+0xae0>)
 80025b2:	2301      	movs	r3, #1
 80025b4:	7013      	strb	r3, [r2, #0]
 80025b6:	e005      	b.n	80025c4 <main+0x83c>
						}
						else
						{
							counter++;
 80025b8:	4baa      	ldr	r3, [pc, #680]	@ (8002864 <main+0xadc>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4aa8      	ldr	r2, [pc, #672]	@ (8002864 <main+0xadc>)
 80025c2:	7013      	strb	r3, [r2, #0]
						}
					}
					//////////////////////////////////////////////////////////////
					if (base_status == 8)
 80025c4:	4ba9      	ldr	r3, [pc, #676]	@ (800286c <main+0xae4>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d10b      	bne.n	80025e4 <main+0x85c>
					{
						REG16(REG_MOTION_STATUS) = 0;
 80025cc:	4aa8      	ldr	r2, [pc, #672]	@ (8002870 <main+0xae8>)
 80025ce:	2300      	movs	r3, #0
 80025d0:	8413      	strh	r3, [r2, #32]
				if (lock_timer_us == 0)
 80025d2:	e007      	b.n	80025e4 <main+0x85c>
					//////////////////////////////////////////////////////////////
				}
			}
			else
			{
				lock_timer_us = 0;
 80025d4:	49a0      	ldr	r1, [pc, #640]	@ (8002858 <main+0xad0>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
 80025e2:	e000      	b.n	80025e6 <main+0x85e>
				if (lock_timer_us == 0)
 80025e4:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem == 1)) || base_status == 1)
 80025e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002868 <main+0xae0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d107      	bne.n	80025fe <main+0x876>
 80025ee:	4b9f      	ldr	r3, [pc, #636]	@ (800286c <main+0xae4>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d008      	beq.n	8002608 <main+0x880>
 80025f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002874 <main+0xaec>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d004      	beq.n	8002608 <main+0x880>
 80025fe:	4b9b      	ldr	r3, [pc, #620]	@ (800286c <main+0xae4>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	f040 827d 	bne.w	8002b02 <main+0xd7a>
		{
			switch (calibState)
 8002608:	4b9b      	ldr	r3, [pc, #620]	@ (8002878 <main+0xaf0>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	f200 8278 	bhi.w	8002b02 <main+0xd7a>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <main+0x890>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	0800264d 	.word	0x0800264d
 800261c:	08002683 	.word	0x08002683
 8002620:	080026c9 	.word	0x080026c9
 8002624:	08002713 	.word	0x08002713
 8002628:	0800275d 	.word	0x0800275d
 800262c:	080027ab 	.word	0x080027ab
 8002630:	08002803 	.word	0x08002803
 8002634:	08002843 	.word	0x08002843
 8002638:	080028ef 	.word	0x080028ef
 800263c:	0800295b 	.word	0x0800295b
 8002640:	080029c7 	.word	0x080029c7
 8002644:	08002a37 	.word	0x08002a37
 8002648:	08002a79 	.word	0x08002a79
			{
			case CALIB_IDLE:
				Set_Motor(0, 0);
 800264c:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 800287c <main+0xaf4>
 8002650:	2000      	movs	r0, #0
 8002652:	f002 fc9b 	bl	8004f8c <Set_Motor>
				Set_Motor(1, 0);
 8002656:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 800287c <main+0xaf4>
 800265a:	2001      	movs	r0, #1
 800265c:	f002 fc96 	bl	8004f8c <Set_Motor>
				P_Limit = 0;
 8002660:	4a87      	ldr	r2, [pc, #540]	@ (8002880 <main+0xaf8>)
 8002662:	2300      	movs	r3, #0
 8002664:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002666:	4a87      	ldr	r2, [pc, #540]	@ (8002884 <main+0xafc>)
 8002668:	2300      	movs	r3, #0
 800266a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 800266c:	4a82      	ldr	r2, [pc, #520]	@ (8002878 <main+0xaf0>)
 800266e:	2301      	movs	r3, #1
 8002670:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002672:	f002 f9d7 	bl	8004a24 <micros>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4983      	ldr	r1, [pc, #524]	@ (8002888 <main+0xb00>)
 800267c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002680:	e23f      	b.n	8002b02 <main+0xd7a>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80)
 8002682:	4b82      	ldr	r3, [pc, #520]	@ (800288c <main+0xb04>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002890 <main+0xb08>
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	dd06      	ble.n	80026a4 <main+0x91c>
				{
					Cal_Side = 1;
 8002696:	4a7f      	ldr	r2, [pc, #508]	@ (8002894 <main+0xb0c>)
 8002698:	2301      	movs	r3, #1
 800269a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 800269c:	4a76      	ldr	r2, [pc, #472]	@ (8002878 <main+0xaf0>)
 800269e:	2302      	movs	r3, #2
 80026a0:	7013      	strb	r3, [r2, #0]
				else if (Receiver[0] < -80)
				{
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80026a2:	e22e      	b.n	8002b02 <main+0xd7a>
				else if (Receiver[0] < -80)
 80026a4:	4b79      	ldr	r3, [pc, #484]	@ (800288c <main+0xb04>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8002898 <main+0xb10>
 80026ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	d400      	bmi.n	80026ba <main+0x932>
				break;
 80026b8:	e223      	b.n	8002b02 <main+0xd7a>
					Cal_Side = 2;
 80026ba:	4a76      	ldr	r2, [pc, #472]	@ (8002894 <main+0xb0c>)
 80026bc:	2302      	movs	r3, #2
 80026be:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80026c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002878 <main+0xaf0>)
 80026c2:	2302      	movs	r3, #2
 80026c4:	7013      	strb	r3, [r2, #0]
				break;
 80026c6:	e21c      	b.n	8002b02 <main+0xd7a>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 80026c8:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 80026cc:	2001      	movs	r0, #1
 80026ce:	f002 fc5d 	bl	8004f8c <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0)
 80026d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026d6:	4871      	ldr	r0, [pc, #452]	@ (800289c <main+0xb14>)
 80026d8:	f003 ffa2 	bl	8006620 <HAL_GPIO_ReadPin>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d004      	beq.n	80026ec <main+0x964>
 80026e2:	4b67      	ldr	r3, [pc, #412]	@ (8002880 <main+0xaf8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 81dd 	beq.w	8002aa6 <main+0xd1e>
				{
					Set_Motor(1, 0);
 80026ec:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 800287c <main+0xaf4>
 80026f0:	2001      	movs	r0, #1
 80026f2:	f002 fc4b 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 80026f6:	f002 f995 	bl	8004a24 <micros>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4962      	ldr	r1, [pc, #392]	@ (8002888 <main+0xb00>)
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002704:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <main+0xaf8>)
 8002706:	2300      	movs	r3, #0
 8002708:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800270a:	4a5b      	ldr	r2, [pc, #364]	@ (8002878 <main+0xaf0>)
 800270c:	2303      	movs	r3, #3
 800270e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002710:	e1c9      	b.n	8002aa6 <main+0xd1e>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002712:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800287c <main+0xaf4>
 8002716:	2001      	movs	r0, #1
 8002718:	f002 fc38 	bl	8004f8c <Set_Motor>

				if (micros() - calib_timer > 100000)
 800271c:	f002 f982 	bl	8004a24 <micros>
 8002720:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <main+0xb00>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	ebb0 0802 	subs.w	r8, r0, r2
 800272a:	eb61 0903 	sbc.w	r9, r1, r3
 800272e:	4b5c      	ldr	r3, [pc, #368]	@ (80028a0 <main+0xb18>)
 8002730:	4598      	cmp	r8, r3
 8002732:	f179 0300 	sbcs.w	r3, r9, #0
 8002736:	d311      	bcc.n	800275c <main+0x9d4>
				{
					Set_Motor(1, 15);
 8002738:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800273c:	2001      	movs	r0, #1
 800273e:	f002 fc25 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 8002742:	f002 f96f 	bl	8004a24 <micros>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	494f      	ldr	r1, [pc, #316]	@ (8002888 <main+0xb00>)
 800274c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002750:	4a4b      	ldr	r2, [pc, #300]	@ (8002880 <main+0xaf8>)
 8002752:	2300      	movs	r3, #0
 8002754:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002756:	4a48      	ldr	r2, [pc, #288]	@ (8002878 <main+0xaf0>)
 8002758:	2304      	movs	r3, #4
 800275a:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 800275c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002760:	2001      	movs	r0, #1
 8002762:	f002 fc13 	bl	8004f8c <Set_Motor>

				if (micros() - calib_timer > 100000)
 8002766:	f002 f95d 	bl	8004a24 <micros>
 800276a:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <main+0xb00>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	ebb0 0a02 	subs.w	sl, r0, r2
 8002774:	eb61 0b03 	sbc.w	fp, r1, r3
 8002778:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <main+0xb18>)
 800277a:	459a      	cmp	sl, r3
 800277c:	f17b 0300 	sbcs.w	r3, fp, #0
 8002780:	f0c0 8193 	bcc.w	8002aaa <main+0xd22>
				{
					Set_Motor(1, 0);
 8002784:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800287c <main+0xaf4>
 8002788:	2001      	movs	r0, #1
 800278a:	f002 fbff 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 800278e:	f002 f949 	bl	8004a24 <micros>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	493c      	ldr	r1, [pc, #240]	@ (8002888 <main+0xb00>)
 8002798:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 800279c:	4a38      	ldr	r2, [pc, #224]	@ (8002880 <main+0xaf8>)
 800279e:	2300      	movs	r3, #0
 80027a0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80027a2:	4a35      	ldr	r2, [pc, #212]	@ (8002878 <main+0xaf0>)
 80027a4:	2305      	movs	r3, #5
 80027a6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027a8:	e17f      	b.n	8002aaa <main+0xd22>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80027aa:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800287c <main+0xaf4>
 80027ae:	2001      	movs	r0, #1
 80027b0:	f002 fbec 	bl	8004f8c <Set_Motor>

				if (micros() - calib_timer > 100000)
 80027b4:	f002 f936 	bl	8004a24 <micros>
 80027b8:	4b33      	ldr	r3, [pc, #204]	@ (8002888 <main+0xb00>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	1a86      	subs	r6, r0, r2
 80027c0:	66be      	str	r6, [r7, #104]	@ 0x68
 80027c2:	eb61 0303 	sbc.w	r3, r1, r3
 80027c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c8:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <main+0xb18>)
 80027ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ce:	4602      	mov	r2, r0
 80027d0:	429a      	cmp	r2, r3
 80027d2:	460b      	mov	r3, r1
 80027d4:	f173 0300 	sbcs.w	r3, r3, #0
 80027d8:	f0c0 8169 	bcc.w	8002aae <main+0xd26>
				{
					Set_Motor(1, -5);
 80027dc:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80027e0:	2001      	movs	r0, #1
 80027e2:	f002 fbd3 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 80027e6:	f002 f91d 	bl	8004a24 <micros>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4926      	ldr	r1, [pc, #152]	@ (8002888 <main+0xb00>)
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80027f4:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <main+0xaf8>)
 80027f6:	2300      	movs	r3, #0
 80027f8:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 80027fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002878 <main+0xaf0>)
 80027fc:	2306      	movs	r3, #6
 80027fe:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002800:	e155      	b.n	8002aae <main+0xd26>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002802:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002806:	2001      	movs	r0, #1
 8002808:	f002 fbc0 	bl	8004f8c <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0)
 800280c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002810:	4822      	ldr	r0, [pc, #136]	@ (800289c <main+0xb14>)
 8002812:	f003 ff05 	bl	8006620 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d004      	beq.n	8002826 <main+0xa9e>
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <main+0xaf8>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8146 	beq.w	8002ab2 <main+0xd2a>
				{
					Set_Motor(1, 0);
 8002826:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800287c <main+0xaf4>
 800282a:	2001      	movs	r0, #1
 800282c:	f002 fbae 	bl	8004f8c <Set_Motor>
					Reset_P();
 8002830:	f002 fc64 	bl	80050fc <Reset_P>
					P_Limit = 0;
 8002834:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <main+0xaf8>)
 8002836:	2300      	movs	r3, #0
 8002838:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 800283a:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <main+0xaf0>)
 800283c:	2307      	movs	r3, #7
 800283e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002840:	e137      	b.n	8002ab2 <main+0xd2a>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <main+0xb0c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d12c      	bne.n	80028a4 <main+0xb1c>
					Set_Motor(0, -30);
 800284a:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 800284e:	2000      	movs	r0, #0
 8002850:	f002 fb9c 	bl	8004f8c <Set_Motor>
 8002854:	e02b      	b.n	80028ae <main+0xb26>
 8002856:	bf00      	nop
 8002858:	20000bd0 	.word	0x20000bd0
 800285c:	000f4240 	.word	0x000f4240
 8002860:	20000c45 	.word	0x20000c45
 8002864:	20000c44 	.word	0x20000c44
 8002868:	20000bc4 	.word	0x20000bc4
 800286c:	200012c4 	.word	0x200012c4
 8002870:	20001134 	.word	0x20001134
 8002874:	20000c46 	.word	0x20000c46
 8002878:	20000c24 	.word	0x20000c24
 800287c:	00000000 	.word	0x00000000
 8002880:	20000bc9 	.word	0x20000bc9
 8002884:	20000bca 	.word	0x20000bca
 8002888:	20000c28 	.word	0x20000c28
 800288c:	20000aa8 	.word	0x20000aa8
 8002890:	42a00000 	.word	0x42a00000
 8002894:	20000c30 	.word	0x20000c30
 8002898:	c2a00000 	.word	0xc2a00000
 800289c:	48000400 	.word	0x48000400
 80028a0:	000186a1 	.word	0x000186a1
				else
					Set_Motor(0, 30);
 80028a4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f002 fb6f 	bl	8004f8c <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0)
 80028ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b2:	4886      	ldr	r0, [pc, #536]	@ (8002acc <main+0xd44>)
 80028b4:	f003 feb4 	bl	8006620 <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d004      	beq.n	80028c8 <main+0xb40>
 80028be:	4b84      	ldr	r3, [pc, #528]	@ (8002ad0 <main+0xd48>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80f7 	beq.w	8002ab6 <main+0xd2e>
				{
					Set_Motor(0, 0);
 80028c8:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8002ad4 <main+0xd4c>
 80028cc:	2000      	movs	r0, #0
 80028ce:	f002 fb5d 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 80028d2:	f002 f8a7 	bl	8004a24 <micros>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	497f      	ldr	r1, [pc, #508]	@ (8002ad8 <main+0xd50>)
 80028dc:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80028e0:	4a7b      	ldr	r2, [pc, #492]	@ (8002ad0 <main+0xd48>)
 80028e2:	2300      	movs	r3, #0
 80028e4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 80028e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002adc <main+0xd54>)
 80028e8:	2308      	movs	r3, #8
 80028ea:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028ec:	e0e3      	b.n	8002ab6 <main+0xd2e>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 80028ee:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8002ad4 <main+0xd4c>
 80028f2:	2000      	movs	r0, #0
 80028f4:	f002 fb4a 	bl	8004f8c <Set_Motor>

				if (micros() - calib_timer > 100000)
 80028f8:	f002 f894 	bl	8004a24 <micros>
 80028fc:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <main+0xd50>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	1a86      	subs	r6, r0, r2
 8002904:	663e      	str	r6, [r7, #96]	@ 0x60
 8002906:	eb61 0303 	sbc.w	r3, r1, r3
 800290a:	667b      	str	r3, [r7, #100]	@ 0x64
 800290c:	4b74      	ldr	r3, [pc, #464]	@ (8002ae0 <main+0xd58>)
 800290e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002912:	4602      	mov	r2, r0
 8002914:	429a      	cmp	r2, r3
 8002916:	460b      	mov	r3, r1
 8002918:	f173 0300 	sbcs.w	r3, r3, #0
 800291c:	f0c0 80cd 	bcc.w	8002aba <main+0xd32>
				{
					if (Cal_Side == 1)
 8002920:	4b70      	ldr	r3, [pc, #448]	@ (8002ae4 <main+0xd5c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <main+0xbac>
						Set_Motor(0, 30);
 8002928:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800292c:	2000      	movs	r0, #0
 800292e:	f002 fb2d 	bl	8004f8c <Set_Motor>
 8002932:	e004      	b.n	800293e <main+0xbb6>
					else
						Set_Motor(0, -30);
 8002934:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002938:	2000      	movs	r0, #0
 800293a:	f002 fb27 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 800293e:	f002 f871 	bl	8004a24 <micros>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4964      	ldr	r1, [pc, #400]	@ (8002ad8 <main+0xd50>)
 8002948:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800294c:	4a60      	ldr	r2, [pc, #384]	@ (8002ad0 <main+0xd48>)
 800294e:	2300      	movs	r3, #0
 8002950:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002952:	4a62      	ldr	r2, [pc, #392]	@ (8002adc <main+0xd54>)
 8002954:	2309      	movs	r3, #9
 8002956:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002958:	e0af      	b.n	8002aba <main+0xd32>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800295a:	4b62      	ldr	r3, [pc, #392]	@ (8002ae4 <main+0xd5c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <main+0xbe6>
					Set_Motor(0, 30);
 8002962:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002966:	2000      	movs	r0, #0
 8002968:	f002 fb10 	bl	8004f8c <Set_Motor>
 800296c:	e004      	b.n	8002978 <main+0xbf0>
				else
					Set_Motor(0, -30);
 800296e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002972:	2000      	movs	r0, #0
 8002974:	f002 fb0a 	bl	8004f8c <Set_Motor>

				if (micros() - calib_timer > 200000)
 8002978:	f002 f854 	bl	8004a24 <micros>
 800297c:	4b56      	ldr	r3, [pc, #344]	@ (8002ad8 <main+0xd50>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	1a86      	subs	r6, r0, r2
 8002984:	65be      	str	r6, [r7, #88]	@ 0x58
 8002986:	eb61 0303 	sbc.w	r3, r1, r3
 800298a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800298c:	4b56      	ldr	r3, [pc, #344]	@ (8002ae8 <main+0xd60>)
 800298e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002992:	4602      	mov	r2, r0
 8002994:	429a      	cmp	r2, r3
 8002996:	460b      	mov	r3, r1
 8002998:	f173 0300 	sbcs.w	r3, r3, #0
 800299c:	f0c0 808f 	bcc.w	8002abe <main+0xd36>
				{
					Set_Motor(0, 0);
 80029a0:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8002ad4 <main+0xd4c>
 80029a4:	2000      	movs	r0, #0
 80029a6:	f002 faf1 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 80029aa:	f002 f83b 	bl	8004a24 <micros>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4949      	ldr	r1, [pc, #292]	@ (8002ad8 <main+0xd50>)
 80029b4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80029b8:	4a45      	ldr	r2, [pc, #276]	@ (8002ad0 <main+0xd48>)
 80029ba:	2300      	movs	r3, #0
 80029bc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80029be:	4a47      	ldr	r2, [pc, #284]	@ (8002adc <main+0xd54>)
 80029c0:	230a      	movs	r3, #10
 80029c2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80029c4:	e07b      	b.n	8002abe <main+0xd36>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 80029c6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002ad4 <main+0xd4c>
 80029ca:	2000      	movs	r0, #0
 80029cc:	f002 fade 	bl	8004f8c <Set_Motor>
				Z_index_R = 0;
 80029d0:	4a46      	ldr	r2, [pc, #280]	@ (8002aec <main+0xd64>)
 80029d2:	2300      	movs	r3, #0
 80029d4:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000)
 80029d6:	f002 f825 	bl	8004a24 <micros>
 80029da:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad8 <main+0xd50>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	1a86      	subs	r6, r0, r2
 80029e2:	653e      	str	r6, [r7, #80]	@ 0x50
 80029e4:	eb61 0303 	sbc.w	r3, r1, r3
 80029e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae0 <main+0xd58>)
 80029ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80029f0:	4602      	mov	r2, r0
 80029f2:	429a      	cmp	r2, r3
 80029f4:	460b      	mov	r3, r1
 80029f6:	f173 0300 	sbcs.w	r3, r3, #0
 80029fa:	d362      	bcc.n	8002ac2 <main+0xd3a>
				{
					if (Cal_Side == 1)
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <main+0xd5c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <main+0xc88>
						Set_Motor(0, -25);
 8002a04:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f002 fabf 	bl	8004f8c <Set_Motor>
 8002a0e:	e004      	b.n	8002a1a <main+0xc92>
					else
						Set_Motor(0, 25);
 8002a10:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002a14:	2000      	movs	r0, #0
 8002a16:	f002 fab9 	bl	8004f8c <Set_Motor>
					calib_timer = micros();
 8002a1a:	f002 f803 	bl	8004a24 <micros>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	492d      	ldr	r1, [pc, #180]	@ (8002ad8 <main+0xd50>)
 8002a24:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <main+0xd48>)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002adc <main+0xd54>)
 8002a30:	230b      	movs	r3, #11
 8002a32:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a34:	e045      	b.n	8002ac2 <main+0xd3a>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002a36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <main+0xd5c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <main+0xcc2>
					Set_Motor(0, -25);
 8002a3e:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002a42:	2000      	movs	r0, #0
 8002a44:	f002 faa2 	bl	8004f8c <Set_Motor>
 8002a48:	e004      	b.n	8002a54 <main+0xccc>
				else
					Set_Motor(0, 25);
 8002a4a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f002 fa9c 	bl	8004f8c <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0)
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <main+0xd64>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d034      	beq.n	8002ac6 <main+0xd3e>
				{
					Set_Motor(0, 0);
 8002a5c:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002ad4 <main+0xd4c>
 8002a60:	2000      	movs	r0, #0
 8002a62:	f002 fa93 	bl	8004f8c <Set_Motor>
					Reset_R();
 8002a66:	f002 fb39 	bl	80050dc <Reset_R>
					R_Limit = 0;
 8002a6a:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <main+0xd48>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002a70:	4a1a      	ldr	r2, [pc, #104]	@ (8002adc <main+0xd54>)
 8002a72:	230c      	movs	r3, #12
 8002a74:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a76:	e026      	b.n	8002ac6 <main+0xd3e>

			case CALIB_DONE:
				Cal_Side = 0;
 8002a78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae4 <main+0xd5c>)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002af0 <main+0xd68>)
 8002a80:	2300      	movs	r3, #0
 8002a82:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8002a84:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <main+0xd6c>)
 8002a86:	2300      	movs	r3, #0
 8002a88:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002a8a:	4a11      	ldr	r2, [pc, #68]	@ (8002ad0 <main+0xd48>)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002a90:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <main+0xd54>)
 8002a92:	2300      	movs	r3, #0
 8002a94:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1)
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <main+0xd70>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d130      	bne.n	8002b00 <main+0xd78>
				{
					REG16(REG_MOTION_STATUS) = 0;
 8002a9e:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <main+0xd74>)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 8002aa4:	e02c      	b.n	8002b00 <main+0xd78>
				break;
 8002aa6:	bf00      	nop
 8002aa8:	e02b      	b.n	8002b02 <main+0xd7a>
				break;
 8002aaa:	bf00      	nop
 8002aac:	e029      	b.n	8002b02 <main+0xd7a>
				break;
 8002aae:	bf00      	nop
 8002ab0:	e027      	b.n	8002b02 <main+0xd7a>
				break;
 8002ab2:	bf00      	nop
 8002ab4:	e025      	b.n	8002b02 <main+0xd7a>
				break;
 8002ab6:	bf00      	nop
 8002ab8:	e023      	b.n	8002b02 <main+0xd7a>
				break;
 8002aba:	bf00      	nop
 8002abc:	e021      	b.n	8002b02 <main+0xd7a>
				break;
 8002abe:	bf00      	nop
 8002ac0:	e01f      	b.n	8002b02 <main+0xd7a>
				break;
 8002ac2:	bf00      	nop
 8002ac4:	e01d      	b.n	8002b02 <main+0xd7a>
				break;
 8002ac6:	bf00      	nop
 8002ac8:	e01b      	b.n	8002b02 <main+0xd7a>
 8002aca:	bf00      	nop
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	20000bca 	.word	0x20000bca
 8002ad4:	00000000 	.word	0x00000000
 8002ad8:	20000c28 	.word	0x20000c28
 8002adc:	20000c24 	.word	0x20000c24
 8002ae0:	000186a1 	.word	0x000186a1
 8002ae4:	20000c30 	.word	0x20000c30
 8002ae8:	00030d41 	.word	0x00030d41
 8002aec:	20000b70 	.word	0x20000b70
 8002af0:	20000bc4 	.word	0x20000bc4
 8002af4:	20000bc9 	.word	0x20000bc9
 8002af8:	200012c4 	.word	0x200012c4
 8002afc:	20001134 	.word	0x20001134
				break;
 8002b00:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem == 1)
 8002b02:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <main+0xf00>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d004      	beq.n	8002b14 <main+0xd8c>
 8002b0a:	4b60      	ldr	r3, [pc, #384]	@ (8002c8c <main+0xf04>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f47f a9c3 	bne.w	8001e9a <main+0x112>
		{

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002b14:	4b5e      	ldr	r3, [pc, #376]	@ (8002c90 <main+0xf08>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <main+0xf0c>)
 8002b1e:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002b20:	4b5d      	ldr	r3, [pc, #372]	@ (8002c98 <main+0xf10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b5a      	ldr	r3, [pc, #360]	@ (8002c94 <main+0xf0c>)
 8002b2a:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
				__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 8002b2c:	4b58      	ldr	r3, [pc, #352]	@ (8002c90 <main+0xf08>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcb2 	bl	800049c <__aeabi_ui2d>
 8002b38:	a34f      	add	r3, pc, #316	@ (adr r3, 8002c78 <main+0xef0>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fb6f 	bl	8000220 <__aeabi_dsub>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
			float RX_temp = map(
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd ffdb 	bl	8000b04 <__aeabi_d2f>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 8002c9c <main+0xf14>
 8002b54:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002ca0 <main+0xf18>
 8002b58:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 8002ca4 <main+0xf1c>
 8002b5c:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8002ca8 <main+0xf20>
 8002b60:	ee00 3a10 	vmov	s0, r3
 8002b64:	f001 fe3a 	bl	80047dc <map>
 8002b68:	ed87 0a55 	vstr	s0, [r7, #340]	@ 0x154
				500.00, -100.00, 100.00);
			float RY_temp = map(
				__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c98 <main+0xf10>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fc92 	bl	800049c <__aeabi_ui2d>
 8002b78:	a341      	add	r3, pc, #260	@ (adr r3, 8002c80 <main+0xef8>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fb4f 	bl	8000220 <__aeabi_dsub>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
			float RY_temp = map(
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f7fd ffbb 	bl	8000b04 <__aeabi_d2f>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8002c9c <main+0xf14>
 8002b94:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8002ca0 <main+0xf18>
 8002b98:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8002ca4 <main+0xf1c>
 8002b9c:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002ca8 <main+0xf20>
 8002ba0:	ee00 3a10 	vmov	s0, r3
 8002ba4:	f001 fe1a 	bl	80047dc <map>
 8002ba8:	ed87 0a54 	vstr	s0, [r7, #336]	@ 0x150
				500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 8002bac:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8002bb0:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	db0d      	blt.n	8002bda <main+0xe52>
 8002bbe:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8002bc2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d804      	bhi.n	8002bda <main+0xe52>
				Receiver[0] = 0.00;
 8002bd0:	4a36      	ldr	r2, [pc, #216]	@ (8002cac <main+0xf24>)
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e01d      	b.n	8002c16 <main+0xe8e>
			else if (RX_temp > 100)
 8002bda:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8002bde:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002c9c <main+0xf14>
 8002be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	dd03      	ble.n	8002bf4 <main+0xe6c>
				Receiver[0] = 100.00;
 8002bec:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <main+0xf24>)
 8002bee:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <main+0xf28>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e010      	b.n	8002c16 <main+0xe8e>
			else if (RX_temp < -100)
 8002bf4:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8002bf8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002ca0 <main+0xf18>
 8002bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d503      	bpl.n	8002c0e <main+0xe86>
				Receiver[0] = -100.00;
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <main+0xf24>)
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <main+0xf2c>)
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e003      	b.n	8002c16 <main+0xe8e>
			else
				Receiver[0] = RX_temp;
 8002c0e:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <main+0xf24>)
 8002c10:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002c14:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002c16:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8002c1a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	db0d      	blt.n	8002c44 <main+0xebc>
 8002c28:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8002c2c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	d804      	bhi.n	8002c44 <main+0xebc>
				Receiver[1] = 0.00;
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <main+0xf24>)
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	6053      	str	r3, [r2, #4]
 8002c42:	e03d      	b.n	8002cc0 <main+0xf38>
			else if (RY_temp > 100)
 8002c44:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8002c48:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c9c <main+0xf14>
 8002c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	dd03      	ble.n	8002c5e <main+0xed6>
				Receiver[1] = 100.00;
 8002c56:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <main+0xf24>)
 8002c58:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <main+0xf28>)
 8002c5a:	6053      	str	r3, [r2, #4]
 8002c5c:	e030      	b.n	8002cc0 <main+0xf38>
			else if (RY_temp < -100)
 8002c5e:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8002c62:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002ca0 <main+0xf18>
 8002c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	d523      	bpl.n	8002cb8 <main+0xf30>
				Receiver[1] = -100.00;
 8002c70:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <main+0xf24>)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <main+0xf2c>)
 8002c74:	6053      	str	r3, [r2, #4]
 8002c76:	e023      	b.n	8002cc0 <main+0xf38>
 8002c78:	00000000 	.word	0x00000000
 8002c7c:	40977000 	.word	0x40977000
 8002c80:	00000000 	.word	0x00000000
 8002c84:	40d21880 	.word	0x40d21880
 8002c88:	200012c4 	.word	0x200012c4
 8002c8c:	20000c46 	.word	0x20000c46
 8002c90:	20000374 	.word	0x20000374
 8002c94:	20000abc 	.word	0x20000abc
 8002c98:	200002a8 	.word	0x200002a8
 8002c9c:	42c80000 	.word	0x42c80000
 8002ca0:	c2c80000 	.word	0xc2c80000
 8002ca4:	43fa0000 	.word	0x43fa0000
 8002ca8:	c3fa0000 	.word	0xc3fa0000
 8002cac:	20000aa8 	.word	0x20000aa8
 8002cb0:	42c80000 	.word	0x42c80000
 8002cb4:	c2c80000 	.word	0xc2c80000
			else
				Receiver[1] = RY_temp;
 8002cb8:	4abf      	ldr	r2, [pc, #764]	@ (8002fb8 <main+0x1230>)
 8002cba:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002cbe:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002cc0:	4bbe      	ldr	r3, [pc, #760]	@ (8002fbc <main+0x1234>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002cc8:	d912      	bls.n	8002cf0 <main+0xf68>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002cca:	4bbc      	ldr	r3, [pc, #752]	@ (8002fbc <main+0x1234>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fbe4 	bl	800049c <__aeabi_ui2d>
 8002cd4:	a3b4      	add	r3, pc, #720	@ (adr r3, 8002fa8 <main+0x1220>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd faa1 	bl	8000220 <__aeabi_dsub>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd feed 	bl	8000ac4 <__aeabi_d2uiz>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4bb3      	ldr	r3, [pc, #716]	@ (8002fbc <main+0x1234>)
 8002cee:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002cf0:	4bb2      	ldr	r3, [pc, #712]	@ (8002fbc <main+0x1234>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002cf8:	d912      	bls.n	8002d20 <main+0xf98>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002cfa:	4bb0      	ldr	r3, [pc, #704]	@ (8002fbc <main+0x1234>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fbcc 	bl	800049c <__aeabi_ui2d>
 8002d04:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002fa8 <main+0x1220>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f7fd fa89 	bl	8000220 <__aeabi_dsub>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd fed5 	bl	8000ac4 <__aeabi_d2uiz>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4ba7      	ldr	r3, [pc, #668]	@ (8002fbc <main+0x1234>)
 8002d1e:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002d20:	4ba6      	ldr	r3, [pc, #664]	@ (8002fbc <main+0x1234>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002d28:	d912      	bls.n	8002d50 <main+0xfc8>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002d2a:	4ba4      	ldr	r3, [pc, #656]	@ (8002fbc <main+0x1234>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fbb4 	bl	800049c <__aeabi_ui2d>
 8002d34:	a39c      	add	r3, pc, #624	@ (adr r3, 8002fa8 <main+0x1220>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fa71 	bl	8000220 <__aeabi_dsub>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fd febd 	bl	8000ac4 <__aeabi_d2uiz>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	@ (8002fbc <main+0x1234>)
 8002d4e:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float)pulse_width_us[0] - 1500.00, -500.00,
 8002d50:	4b9a      	ldr	r3, [pc, #616]	@ (8002fbc <main+0x1234>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5c:	ee17 0a90 	vmov	r0, s15
 8002d60:	f7fd fbbe 	bl	80004e0 <__aeabi_f2d>
 8002d64:	a392      	add	r3, pc, #584	@ (adr r3, 8002fb0 <main+0x1228>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fa59 	bl	8000220 <__aeabi_dsub>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd fec5 	bl	8000b04 <__aeabi_d2f>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8002fc0 <main+0x1238>
 8002d80:	eddf 1a90 	vldr	s3, [pc, #576]	@ 8002fc4 <main+0x123c>
 8002d84:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8002fc8 <main+0x1240>
 8002d88:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8002fcc <main+0x1244>
 8002d8c:	ee00 3a10 	vmov	s0, r3
 8002d90:	f001 fd24 	bl	80047dc <map>
 8002d94:	eef0 7a40 	vmov.f32	s15, s0
 8002d98:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <main+0x1230>)
 8002d9a:	edc3 7a02 	vstr	s15, [r3, #8]
							  500.00, -100.00, 100.00);
			Receiver[3] = map((float)pulse_width_us[1] - 1500.00, -500.00,
 8002d9e:	4b87      	ldr	r3, [pc, #540]	@ (8002fbc <main+0x1234>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	ee17 0a90 	vmov	r0, s15
 8002dae:	f7fd fb97 	bl	80004e0 <__aeabi_f2d>
 8002db2:	a37f      	add	r3, pc, #508	@ (adr r3, 8002fb0 <main+0x1228>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fa32 	bl	8000220 <__aeabi_dsub>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7fd fe9e 	bl	8000b04 <__aeabi_d2f>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 8002fc0 <main+0x1238>
 8002dce:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8002fc4 <main+0x123c>
 8002dd2:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8002fc8 <main+0x1240>
 8002dd6:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8002fcc <main+0x1244>
 8002dda:	ee00 3a10 	vmov	s0, r3
 8002dde:	f001 fcfd 	bl	80047dc <map>
 8002de2:	eef0 7a40 	vmov.f32	s15, s0
 8002de6:	4b74      	ldr	r3, [pc, #464]	@ (8002fb8 <main+0x1230>)
 8002de8:	edc3 7a03 	vstr	s15, [r3, #12]
							  500.00, -100.00, 100.00);
			Receiver[4] = map((float)pulse_width_us[2] - 1500.00, -500.00,
 8002dec:	4b73      	ldr	r3, [pc, #460]	@ (8002fbc <main+0x1234>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df8:	ee17 0a90 	vmov	r0, s15
 8002dfc:	f7fd fb70 	bl	80004e0 <__aeabi_f2d>
 8002e00:	a36b      	add	r3, pc, #428	@ (adr r3, 8002fb0 <main+0x1228>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fa0b 	bl	8000220 <__aeabi_dsub>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd fe77 	bl	8000b04 <__aeabi_d2f>
 8002e16:	4603      	mov	r3, r0
 8002e18:	ed9f 2a69 	vldr	s4, [pc, #420]	@ 8002fc0 <main+0x1238>
 8002e1c:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8002fc4 <main+0x123c>
 8002e20:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8002fc8 <main+0x1240>
 8002e24:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002fcc <main+0x1244>
 8002e28:	ee00 3a10 	vmov	s0, r3
 8002e2c:	f001 fcd6 	bl	80047dc <map>
 8002e30:	eef0 7a40 	vmov.f32	s15, s0
 8002e34:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <main+0x1230>)
 8002e36:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float)Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb8 <main+0x1230>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8002fd0 <main+0x1248>
 8002e44:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8002fd4 <main+0x124c>
 8002e48:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8002fc0 <main+0x1238>
 8002e4c:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8002fc4 <main+0x123c>
 8002e50:	eeb0 0a67 	vmov.f32	s0, s15
 8002e54:	f001 fcc2 	bl	80047dc <map>
 8002e58:	eef0 7a40 	vmov.f32	s15, s0
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <main+0x1250>)
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float)Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002e62:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <main+0x1230>)
 8002e64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e68:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8002fd0 <main+0x1248>
 8002e6c:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8002fd4 <main+0x124c>
 8002e70:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002fc0 <main+0x1238>
 8002e74:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8002fc4 <main+0x123c>
 8002e78:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7c:	f001 fcae 	bl	80047dc <map>
 8002e80:	eef0 7a40 	vmov.f32	s15, s0
 8002e84:	4b55      	ldr	r3, [pc, #340]	@ (8002fdc <main+0x1254>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1)
 8002e8a:	4b55      	ldr	r3, [pc, #340]	@ (8002fe0 <main+0x1258>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d103      	bne.n	8002e9a <main+0x1112>
			{
				Mode = 0;
 8002e92:	4a54      	ldr	r2, [pc, #336]	@ (8002fe4 <main+0x125c>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	7013      	strb	r3, [r2, #0]
 8002e98:	e1a1      	b.n	80031de <main+0x1456>
			}
			else if (Receiver[2] < -30 && Receiver[4] < -30)
 8002e9a:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <main+0x1230>)
 8002e9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	d513      	bpl.n	8002ed6 <main+0x114e>
 8002eae:	4b42      	ldr	r3, [pc, #264]	@ (8002fb8 <main+0x1230>)
 8002eb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eb4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	d509      	bpl.n	8002ed6 <main+0x114e>
			{
				Mode = 0;
 8002ec2:	4a48      	ldr	r2, [pc, #288]	@ (8002fe4 <main+0x125c>)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ece:	4846      	ldr	r0, [pc, #280]	@ (8002fe8 <main+0x1260>)
 8002ed0:	f003 fbbe 	bl	8006650 <HAL_GPIO_WritePin>
 8002ed4:	e183      	b.n	80031de <main+0x1456>
			}
			else if (Receiver[3] > 0 && IsPress == 0)
 8002ed6:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <main+0x1230>)
 8002ed8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee4:	f340 8178 	ble.w	80031d8 <main+0x1450>
 8002ee8:	4b40      	ldr	r3, [pc, #256]	@ (8002fec <main+0x1264>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8173 	bne.w	80031d8 <main+0x1450>
			{
				IsPress = 1;
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fec <main+0x1264>)
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff0 <main+0x1268>)
 8002efa:	2300      	movs	r3, #0
 8002efc:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8002efe:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <main+0x1230>)
 8002f00:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f04:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	dd2c      	ble.n	8002f6c <main+0x11e4>
 8002f12:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <main+0x1230>)
 8002f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f18:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d522      	bpl.n	8002f6c <main+0x11e4>
 8002f26:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <main+0x1230>)
 8002f28:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f2c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d518      	bpl.n	8002f6c <main+0x11e4>
				{
					if (Mode != 1)
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <main+0x125c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d003      	beq.n	8002f4a <main+0x11c2>
					{
						Mode = 1;
 8002f42:	4a28      	ldr	r2, [pc, #160]	@ (8002fe4 <main+0x125c>)
 8002f44:	2301      	movs	r3, #1
 8002f46:	7013      	strb	r3, [r2, #0]
					if (Mode != 1)
 8002f48:	e137      	b.n	80031ba <main+0x1432>
					}
					else
					{
						TargetX = End_x;
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <main+0x126c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <main+0x1270>)
 8002f50:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002f52:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <main+0x1274>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b2a      	ldr	r3, [pc, #168]	@ (8003000 <main+0x1278>)
 8002f58:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <main+0x127c>)
 8002f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003008 <main+0x1280>)
 8002f60:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <main+0x1284>)
 8002f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f66:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <main+0x1288>)
 8002f68:	601a      	str	r2, [r3, #0]
					if (Mode != 1)
 8002f6a:	e126      	b.n	80031ba <main+0x1432>
					}
				}
				else if (Receiver[2] > 30 && Receiver[4] < -30)
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <main+0x1230>)
 8002f6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f72:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7e:	dd49      	ble.n	8003014 <main+0x128c>
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <main+0x1230>)
 8002f82:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f86:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	d53f      	bpl.n	8003014 <main+0x128c>
				{
					revolute.finished = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
					prismatic.finished = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					Mode = 2;
 8002fa0:	4a10      	ldr	r2, [pc, #64]	@ (8002fe4 <main+0x125c>)
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	7013      	strb	r3, [r2, #0]
 8002fa6:	e108      	b.n	80031ba <main+0x1432>
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40b32400 	.word	0x40b32400
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	40977000 	.word	0x40977000
 8002fb8:	20000aa8 	.word	0x20000aa8
 8002fbc:	20000adc 	.word	0x20000adc
 8002fc0:	42c80000 	.word	0x42c80000
 8002fc4:	c2c80000 	.word	0xc2c80000
 8002fc8:	43fa0000 	.word	0x43fa0000
 8002fcc:	c3fa0000 	.word	0xc3fa0000
 8002fd0:	43960000 	.word	0x43960000
 8002fd4:	c3960000 	.word	0xc3960000
 8002fd8:	20000b74 	.word	0x20000b74
 8002fdc:	20000b78 	.word	0x20000b78
 8002fe0:	20000bc5 	.word	0x20000bc5
 8002fe4:	20000bc4 	.word	0x20000bc4
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	20000bc6 	.word	0x20000bc6
 8002ff0:	20000c24 	.word	0x20000c24
 8002ff4:	20000b7c 	.word	0x20000b7c
 8002ff8:	20000b84 	.word	0x20000b84
 8002ffc:	20000b80 	.word	0x20000b80
 8003000:	20000b88 	.word	0x20000b88
 8003004:	20000af0 	.word	0x20000af0
 8003008:	20000b8c 	.word	0x20000b8c
 800300c:	20000b30 	.word	0x20000b30
 8003010:	20000b90 	.word	0x20000b90
				}
				else if (Receiver[2] < -30 && Receiver[4] > -30 && Receiver[4] < 30)
 8003014:	4b69      	ldr	r3, [pc, #420]	@ (80031bc <main+0x1434>)
 8003016:	edd3 7a02 	vldr	s15, [r3, #8]
 800301a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d517      	bpl.n	8003058 <main+0x12d0>
 8003028:	4b64      	ldr	r3, [pc, #400]	@ (80031bc <main+0x1434>)
 800302a:	edd3 7a04 	vldr	s15, [r3, #16]
 800302e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8003032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	dd0d      	ble.n	8003058 <main+0x12d0>
 800303c:	4b5f      	ldr	r3, [pc, #380]	@ (80031bc <main+0x1434>)
 800303e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003042:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	d503      	bpl.n	8003058 <main+0x12d0>
				{
					Mode = 3;
 8003050:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <main+0x1438>)
 8003052:	2303      	movs	r3, #3
 8003054:	7013      	strb	r3, [r2, #0]
 8003056:	e0b0      	b.n	80031ba <main+0x1432>
				}
				else if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] > -30 && Receiver[4] < 30)
 8003058:	4b58      	ldr	r3, [pc, #352]	@ (80031bc <main+0x1434>)
 800305a:	edd3 7a02 	vldr	s15, [r3, #8]
 800305e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8003062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	dd27      	ble.n	80030bc <main+0x1334>
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <main+0x1434>)
 800306e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003072:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	d51d      	bpl.n	80030bc <main+0x1334>
 8003080:	4b4e      	ldr	r3, [pc, #312]	@ (80031bc <main+0x1434>)
 8003082:	edd3 7a04 	vldr	s15, [r3, #16]
 8003086:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800308a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	dd13      	ble.n	80030bc <main+0x1334>
 8003094:	4b49      	ldr	r3, [pc, #292]	@ (80031bc <main+0x1434>)
 8003096:	edd3 7a04 	vldr	s15, [r3, #16]
 800309a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800309e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	d509      	bpl.n	80030bc <main+0x1334>
				{
					revolute.finished = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
					prismatic.finished = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					Mode = 4;
 80030b4:	4a42      	ldr	r2, [pc, #264]	@ (80031c0 <main+0x1438>)
 80030b6:	2304      	movs	r3, #4
 80030b8:	7013      	strb	r3, [r2, #0]
 80030ba:	e07e      	b.n	80031ba <main+0x1432>
				}
				else if (Receiver[2] > 30 && Receiver[4] > -30 && Receiver[4] < 30)
 80030bc:	4b3f      	ldr	r3, [pc, #252]	@ (80031bc <main+0x1434>)
 80030be:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80030c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ce:	dd17      	ble.n	8003100 <main+0x1378>
 80030d0:	4b3a      	ldr	r3, [pc, #232]	@ (80031bc <main+0x1434>)
 80030d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80030d6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80030da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	dd0d      	ble.n	8003100 <main+0x1378>
 80030e4:	4b35      	ldr	r3, [pc, #212]	@ (80031bc <main+0x1434>)
 80030e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80030ea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	d503      	bpl.n	8003100 <main+0x1378>
				{
					Mode = 5;
 80030f8:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <main+0x1438>)
 80030fa:	2305      	movs	r3, #5
 80030fc:	7013      	strb	r3, [r2, #0]
 80030fe:	e05c      	b.n	80031ba <main+0x1432>
				}
				else if (Receiver[2] < -30 && Receiver[4] > 30)
 8003100:	4b2e      	ldr	r3, [pc, #184]	@ (80031bc <main+0x1434>)
 8003102:	edd3 7a02 	vldr	s15, [r3, #8]
 8003106:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	d50d      	bpl.n	8003130 <main+0x13a8>
 8003114:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <main+0x1434>)
 8003116:	edd3 7a04 	vldr	s15, [r3, #16]
 800311a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800311e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	dd03      	ble.n	8003130 <main+0x13a8>
				{
					Mode = 6;
 8003128:	4a25      	ldr	r2, [pc, #148]	@ (80031c0 <main+0x1438>)
 800312a:	2306      	movs	r3, #6
 800312c:	7013      	strb	r3, [r2, #0]
 800312e:	e044      	b.n	80031ba <main+0x1432>
				}
				else if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] > 30)
 8003130:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <main+0x1434>)
 8003132:	edd3 7a02 	vldr	s15, [r3, #8]
 8003136:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800313a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	dd17      	ble.n	8003174 <main+0x13ec>
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <main+0x1434>)
 8003146:	edd3 7a02 	vldr	s15, [r3, #8]
 800314a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d50d      	bpl.n	8003174 <main+0x13ec>
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <main+0x1434>)
 800315a:	edd3 7a04 	vldr	s15, [r3, #16]
 800315e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	dd03      	ble.n	8003174 <main+0x13ec>
				{
					Mode = 7;
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <main+0x1438>)
 800316e:	2307      	movs	r3, #7
 8003170:	7013      	strb	r3, [r2, #0]
 8003172:	e022      	b.n	80031ba <main+0x1432>
				}
				else if (Receiver[2] > 30 && Receiver[4] > 30)
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <main+0x1434>)
 8003176:	edd3 7a02 	vldr	s15, [r3, #8]
 800317a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800317e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	dc00      	bgt.n	800318a <main+0x1402>
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8003188:	e029      	b.n	80031de <main+0x1456>
				else if (Receiver[2] > 30 && Receiver[4] > 30)
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <main+0x1434>)
 800318c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003190:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	dc00      	bgt.n	80031a0 <main+0x1418>
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 800319e:	e01e      	b.n	80031de <main+0x1456>
				{
					loop_counter = 0;
 80031a0:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <main+0x143c>)
 80031a2:	2300      	movs	r3, #0
 80031a4:	6013      	str	r3, [r2, #0]
					TargetR = 4.18879;
 80031a6:	4a08      	ldr	r2, [pc, #32]	@ (80031c8 <main+0x1440>)
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <main+0x1444>)
 80031aa:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 80031ac:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <main+0x1448>)
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <main+0x144c>)
 80031b0:	6013      	str	r3, [r2, #0]
					Mode = 8;
 80031b2:	4a03      	ldr	r2, [pc, #12]	@ (80031c0 <main+0x1438>)
 80031b4:	2308      	movs	r3, #8
 80031b6:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 80031b8:	e011      	b.n	80031de <main+0x1456>
 80031ba:	e010      	b.n	80031de <main+0x1456>
 80031bc:	20000aa8 	.word	0x20000aa8
 80031c0:	20000bc4 	.word	0x20000bc4
 80031c4:	20000c40 	.word	0x20000c40
 80031c8:	20000b8c 	.word	0x20000b8c
 80031cc:	40860a91 	.word	0x40860a91
 80031d0:	20000b90 	.word	0x20000b90
 80031d4:	42480000 	.word	0x42480000
				}
			}
			else
			{
				IsPress = 0;
 80031d8:	4acd      	ldr	r2, [pc, #820]	@ (8003510 <main+0x1788>)
 80031da:	2300      	movs	r3, #0
 80031dc:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0)
 80031de:	4bcd      	ldr	r3, [pc, #820]	@ (8003514 <main+0x178c>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <main+0x1478>
			{
				Set_Motor(0, 0);
 80031e6:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8003518 <main+0x1790>
 80031ea:	2000      	movs	r0, #0
 80031ec:	f001 fece 	bl	8004f8c <Set_Motor>
				Set_Motor(1, 0);
 80031f0:	ed9f 0ac9 	vldr	s0, [pc, #804]	@ 8003518 <main+0x1790>
 80031f4:	2001      	movs	r0, #1
 80031f6:	f001 fec9 	bl	8004f8c <Set_Motor>
				Set_Servo(0);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f001 ff44 	bl	8005088 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4)
 8003200:	4bc4      	ldr	r3, [pc, #784]	@ (8003514 <main+0x178c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	f040 8282 	bne.w	800370e <main+0x1986>
			{
				// TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
				// TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);

				TargetR = TargetR_Deg * M_PI / 180;
 800320a:	4bc4      	ldr	r3, [pc, #784]	@ (800351c <main+0x1794>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f966 	bl	80004e0 <__aeabi_f2d>
 8003214:	a3bc      	add	r3, pc, #752	@ (adr r3, 8003508 <main+0x1780>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9b9 	bl	8000590 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4bbd      	ldr	r3, [pc, #756]	@ (8003520 <main+0x1798>)
 800322c:	f7fd fada 	bl	80007e4 <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc64 	bl	8000b04 <__aeabi_d2f>
 800323c:	4602      	mov	r2, r0
 800323e:	4bb9      	ldr	r3, [pc, #740]	@ (8003524 <main+0x179c>)
 8003240:	601a      	str	r2, [r3, #0]
				R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 8003242:	4bb8      	ldr	r3, [pc, #736]	@ (8003524 <main+0x179c>)
 8003244:	ed93 7a00 	vldr	s14, [r3]
 8003248:	4bb7      	ldr	r3, [pc, #732]	@ (8003528 <main+0x17a0>)
 800324a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800324e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003252:	4bb6      	ldr	r3, [pc, #728]	@ (800352c <main+0x17a4>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003258:	4bb5      	ldr	r3, [pc, #724]	@ (8003530 <main+0x17a8>)
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	4bb5      	ldr	r3, [pc, #724]	@ (8003534 <main+0x17ac>)
 8003260:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	4bb3      	ldr	r3, [pc, #716]	@ (8003538 <main+0x17b0>)
 800326a:	edc3 7a00 	vstr	s15, [r3]
				R_Pos_Error_Deg = R_Pos_Error * 180 / M_PI;
 800326e:	4baf      	ldr	r3, [pc, #700]	@ (800352c <main+0x17a4>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800353c <main+0x17b4>
 8003278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327c:	ee17 0a90 	vmov	r0, s15
 8003280:	f7fd f92e 	bl	80004e0 <__aeabi_f2d>
 8003284:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003508 <main+0x1780>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd faab 	bl	80007e4 <__aeabi_ddiv>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fc35 	bl	8000b04 <__aeabi_d2f>
 800329a:	4602      	mov	r2, r0
 800329c:	4ba8      	ldr	r3, [pc, #672]	@ (8003540 <main+0x17b8>)
 800329e:	601a      	str	r2, [r3, #0]
				// Call every 0.001 s
				static uint64_t timestampState2 = 0;
				static int loop_counter = 0;
				static float P_Target_Velocity = 0;
				static float R_Target_Velocity = 0;
				int64_t currentTimeState2 = micros();
 80032a0:	f001 fbc0 	bl	8004a24 <micros>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				if (currentTimeState2 > timestampState2)
 80032ac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80032b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003544 <main+0x17bc>)
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	4282      	cmp	r2, r0
 80032b8:	418b      	sbcs	r3, r1
 80032ba:	f080 8228 	bcs.w	800370e <main+0x1986>
				{
					timestampState2 = currentTimeState2 + 1000; // us
 80032be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80032c2:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 80032c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032c8:	f143 0300 	adc.w	r3, r3, #0
 80032cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80032d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003544 <main+0x17bc>)
 80032d4:	e9c3 0100 	strd	r0, r1, [r3]
					loop_counter++;
 80032d8:	4b9b      	ldr	r3, [pc, #620]	@ (8003548 <main+0x17c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	4b9a      	ldr	r3, [pc, #616]	@ (8003548 <main+0x17c0>)
 80032e0:	601a      	str	r2, [r3, #0]

					float r_target_diff = fabsf(TargetR - last_TargetR);
 80032e2:	4b90      	ldr	r3, [pc, #576]	@ (8003524 <main+0x179c>)
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	4b98      	ldr	r3, [pc, #608]	@ (800354c <main+0x17c4>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	eef0 7ae7 	vabs.f32	s15, s15
 80032f6:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
					float p_target_diff = fabsf(TargetP - last_TargetP);
 80032fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003530 <main+0x17a8>)
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	4b93      	ldr	r3, [pc, #588]	@ (8003550 <main+0x17c8>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330a:	eef0 7ae7 	vabs.f32	s15, s15
 800330e:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140

					if (r_target_diff > 0.001f)
 8003312:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003316:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003554 <main+0x17cc>
 800331a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	dd18      	ble.n	8003356 <main+0x15ce>
					{
						float R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003324:	4b7f      	ldr	r3, [pc, #508]	@ (8003524 <main+0x179c>)
 8003326:	ed93 7a00 	vldr	s14, [r3]
 800332a:	4b7f      	ldr	r3, [pc, #508]	@ (8003528 <main+0x17a0>)
 800332c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
						Trapezoidal_Init(&revolute, R_Pos_Error, 1.40f, 9.0f);
 8003338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800333c:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003340:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8003558 <main+0x17d0>
 8003344:	ed97 0a4f 	vldr	s0, [r7, #316]	@ 0x13c
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fb11 	bl	8001970 <Trapezoidal_Init>
						last_TargetR = TargetR;
 800334e:	4b75      	ldr	r3, [pc, #468]	@ (8003524 <main+0x179c>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b7e      	ldr	r3, [pc, #504]	@ (800354c <main+0x17c4>)
 8003354:	601a      	str	r2, [r3, #0]
					}

					if (p_target_diff > 0.01f)
 8003356:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 800335a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800355c <main+0x17d4>
 800335e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	dd18      	ble.n	800339a <main+0x1612>
					{
						float P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003368:	4b71      	ldr	r3, [pc, #452]	@ (8003530 <main+0x17a8>)
 800336a:	ed93 7a00 	vldr	s14, [r3]
 800336e:	4b71      	ldr	r3, [pc, #452]	@ (8003534 <main+0x17ac>)
 8003370:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003378:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
						Trapezoidal_Init(&prismatic, P_Pos_Error, 600.0f, 3000.0f);
 800337c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003380:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 8003560 <main+0x17d8>
 8003384:	eddf 0a77 	vldr	s1, [pc, #476]	@ 8003564 <main+0x17dc>
 8003388:	ed97 0a4e 	vldr	s0, [r7, #312]	@ 0x138
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe faef 	bl	8001970 <Trapezoidal_Init>
						last_TargetP = TargetP;
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <main+0x17a8>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b6e      	ldr	r3, [pc, #440]	@ (8003550 <main+0x17c8>)
 8003398:	601a      	str	r2, [r3, #0]
					}

					// Update trajectory every 1ms
					Trapezoidal_Update(&revolute, 0.001);
 800339a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800339e:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8003554 <main+0x17cc>
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fbae 	bl	8001b04 <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 80033a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003568 <main+0x17e0>)
 80033ae:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 80033b0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80033b4:	4b6d      	ldr	r3, [pc, #436]	@ (800356c <main+0x17e4>)
 80033b6:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 80033b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003570 <main+0x17e8>)
 80033be:	601a      	str	r2, [r3, #0]

					Trapezoidal_Update(&prismatic, 0.001);
 80033c0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80033c4:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8003554 <main+0x17cc>
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fb9b 	bl	8001b04 <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 80033ce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80033d2:	4b68      	ldr	r3, [pc, #416]	@ (8003574 <main+0x17ec>)
 80033d4:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 80033d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80033da:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <main+0x17f0>)
 80033dc:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 80033de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033e2:	4b66      	ldr	r3, [pc, #408]	@ (800357c <main+0x17f4>)
 80033e4:	601a      	str	r2, [r3, #0]

					// Outer position PID every 10ms
					if (loop_counter >= 10)
 80033e6:	4b58      	ldr	r3, [pc, #352]	@ (8003548 <main+0x17c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	dd62      	ble.n	80034b4 <main+0x172c>
					{
						loop_counter = 0;
 80033ee:	4a56      	ldr	r2, [pc, #344]	@ (8003548 <main+0x17c0>)
 80033f0:	2300      	movs	r3, #0
 80033f2:	6013      	str	r3, [r2, #0]
						float R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 80033f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003524 <main+0x179c>)
 80033f6:	ed93 7a00 	vldr	s14, [r3]
 80033fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <main+0x17a0>)
 80033fc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
						float P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003408:	4b49      	ldr	r3, [pc, #292]	@ (8003530 <main+0x17a8>)
 800340a:	ed93 7a00 	vldr	s14, [r3]
 800340e:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <main+0x17ac>)
 8003410:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003418:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130

						float R_Corrective_Vel = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 800341c:	4b58      	ldr	r3, [pc, #352]	@ (8003580 <main+0x17f8>)
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	4b58      	ldr	r3, [pc, #352]	@ (8003584 <main+0x17fc>)
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <main+0x1800>)
 800342a:	edd3 6a00 	vldr	s13, [r3]
 800342e:	4857      	ldr	r0, [pc, #348]	@ (800358c <main+0x1804>)
 8003430:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 8003590 <main+0x1808>
 8003434:	eddf 2a57 	vldr	s5, [pc, #348]	@ 8003594 <main+0x180c>
 8003438:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 800355c <main+0x17d4>
 800343c:	eef0 1a66 	vmov.f32	s3, s13
 8003440:	eeb0 1a47 	vmov.f32	s2, s14
 8003444:	eef0 0a67 	vmov.f32	s1, s15
 8003448:	ed97 0a4d 	vldr	s0, [r7, #308]	@ 0x134
 800344c:	f001 fb04 	bl	8004a58 <PID_Update>
 8003450:	ed87 0a4b 	vstr	s0, [r7, #300]	@ 0x12c
															R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
						float P_Corrective_Vel = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 8003454:	4b50      	ldr	r3, [pc, #320]	@ (8003598 <main+0x1810>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	4b50      	ldr	r3, [pc, #320]	@ (800359c <main+0x1814>)
 800345c:	ed93 7a00 	vldr	s14, [r3]
 8003460:	4b4f      	ldr	r3, [pc, #316]	@ (80035a0 <main+0x1818>)
 8003462:	edd3 6a00 	vldr	s13, [r3]
 8003466:	484f      	ldr	r0, [pc, #316]	@ (80035a4 <main+0x181c>)
 8003468:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8003590 <main+0x1808>
 800346c:	eddf 2a49 	vldr	s5, [pc, #292]	@ 8003594 <main+0x180c>
 8003470:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 800355c <main+0x17d4>
 8003474:	eef0 1a66 	vmov.f32	s3, s13
 8003478:	eeb0 1a47 	vmov.f32	s2, s14
 800347c:	eef0 0a67 	vmov.f32	s1, s15
 8003480:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 8003484:	f001 fae8 	bl	8004a58 <PID_Update>
 8003488:	ed87 0a4a 	vstr	s0, [r7, #296]	@ 0x128
															P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);

						R_Target_Velocity = TargetRVel + R_Corrective_Vel;
 800348c:	4b37      	ldr	r3, [pc, #220]	@ (800356c <main+0x17e4>)
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	4b43      	ldr	r3, [pc, #268]	@ (80035a8 <main+0x1820>)
 800349c:	edc3 7a00 	vstr	s15, [r3]
						P_Target_Velocity = TargetPVel + P_Corrective_Vel;
 80034a0:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <main+0x17f0>)
 80034a2:	ed93 7a00 	vldr	s14, [r3]
 80034a6:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	4b3f      	ldr	r3, [pc, #252]	@ (80035ac <main+0x1824>)
 80034b0:	edc3 7a00 	vstr	s15, [r3]
					}

					// Inner velocity PID every 1ms
					R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 80034b4:	4b3c      	ldr	r3, [pc, #240]	@ (80035a8 <main+0x1820>)
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <main+0x17a0>)
 80034bc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <main+0x1828>)
 80034c6:	edc3 7a00 	vstr	s15, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel,
 80034ca:	4b39      	ldr	r3, [pc, #228]	@ (80035b0 <main+0x1828>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <main+0x182c>)
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <main+0x1830>)
 80034d8:	edd3 6a00 	vldr	s13, [r3]
 80034dc:	4b37      	ldr	r3, [pc, #220]	@ (80035bc <main+0x1834>)
 80034de:	ed93 6a00 	vldr	s12, [r3]
 80034e2:	4837      	ldr	r0, [pc, #220]	@ (80035c0 <main+0x1838>)
 80034e4:	ed9f 3a2a 	vldr	s6, [pc, #168]	@ 8003590 <main+0x1808>
 80034e8:	eddf 2a2a 	vldr	s5, [pc, #168]	@ 8003594 <main+0x180c>
 80034ec:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8003554 <main+0x17cc>
 80034f0:	eef0 1a46 	vmov.f32	s3, s12
 80034f4:	eeb0 1a66 	vmov.f32	s2, s13
 80034f8:	eef0 0a47 	vmov.f32	s1, s14
 80034fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003500:	e060      	b.n	80035c4 <main+0x183c>
 8003502:	bf00      	nop
 8003504:	f3af 8000 	nop.w
 8003508:	54442d18 	.word	0x54442d18
 800350c:	400921fb 	.word	0x400921fb
 8003510:	20000bc6 	.word	0x20000bc6
 8003514:	20000bc4 	.word	0x20000bc4
 8003518:	00000000 	.word	0x00000000
 800351c:	20000aa0 	.word	0x20000aa0
 8003520:	40668000 	.word	0x40668000
 8003524:	20000b8c 	.word	0x20000b8c
 8003528:	20000af0 	.word	0x20000af0
 800352c:	20000bac 	.word	0x20000bac
 8003530:	20000b90 	.word	0x20000b90
 8003534:	20000b30 	.word	0x20000b30
 8003538:	20000bb0 	.word	0x20000bb0
 800353c:	43340000 	.word	0x43340000
 8003540:	20000aa4 	.word	0x20000aa4
 8003544:	20001340 	.word	0x20001340
 8003548:	20001348 	.word	0x20001348
 800354c:	20001318 	.word	0x20001318
 8003550:	2000131c 	.word	0x2000131c
 8003554:	3a83126f 	.word	0x3a83126f
 8003558:	3fb33333 	.word	0x3fb33333
 800355c:	3c23d70a 	.word	0x3c23d70a
 8003560:	453b8000 	.word	0x453b8000
 8003564:	44160000 	.word	0x44160000
 8003568:	20000b94 	.word	0x20000b94
 800356c:	20000b9c 	.word	0x20000b9c
 8003570:	20000ba4 	.word	0x20000ba4
 8003574:	20000b98 	.word	0x20000b98
 8003578:	20000ba0 	.word	0x20000ba0
 800357c:	20000ba8 	.word	0x20000ba8
 8003580:	20000208 	.word	0x20000208
 8003584:	2000020c 	.word	0x2000020c
 8003588:	20000210 	.word	0x20000210
 800358c:	20000bfc 	.word	0x20000bfc
 8003590:	42c80000 	.word	0x42c80000
 8003594:	c2c80000 	.word	0xc2c80000
 8003598:	2000021c 	.word	0x2000021c
 800359c:	20000220 	.word	0x20000220
 80035a0:	20000224 	.word	0x20000224
 80035a4:	20000c04 	.word	0x20000c04
 80035a8:	2000134c 	.word	0x2000134c
 80035ac:	20001350 	.word	0x20001350
 80035b0:	20000bb4 	.word	0x20000bb4
 80035b4:	20000200 	.word	0x20000200
 80035b8:	20000204 	.word	0x20000204
 80035bc:	20000c1c 	.word	0x20000c1c
 80035c0:	20000c0c 	.word	0x20000c0c
 80035c4:	f001 fa48 	bl	8004a58 <PID_Update>
 80035c8:	eef0 7a40 	vmov.f32	s15, s0
 80035cc:	4b9f      	ldr	r3, [pc, #636]	@ (800384c <main+0x1ac4>)
 80035ce:	edc3 7a00 	vstr	s15, [r3]
									   0.001f, -100.0f, 100.0f, &pid_r_v);

					P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 80035d2:	4b9f      	ldr	r3, [pc, #636]	@ (8003850 <main+0x1ac8>)
 80035d4:	ed93 7a00 	vldr	s14, [r3]
 80035d8:	4b9e      	ldr	r3, [pc, #632]	@ (8003854 <main+0x1acc>)
 80035da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e2:	4b9d      	ldr	r3, [pc, #628]	@ (8003858 <main+0x1ad0>)
 80035e4:	edc3 7a00 	vstr	s15, [r3]
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel,
 80035e8:	4b9b      	ldr	r3, [pc, #620]	@ (8003858 <main+0x1ad0>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	4b9b      	ldr	r3, [pc, #620]	@ (800385c <main+0x1ad4>)
 80035f0:	ed93 7a00 	vldr	s14, [r3]
 80035f4:	4b9a      	ldr	r3, [pc, #616]	@ (8003860 <main+0x1ad8>)
 80035f6:	edd3 6a00 	vldr	s13, [r3]
 80035fa:	4b9a      	ldr	r3, [pc, #616]	@ (8003864 <main+0x1adc>)
 80035fc:	ed93 6a00 	vldr	s12, [r3]
 8003600:	4899      	ldr	r0, [pc, #612]	@ (8003868 <main+0x1ae0>)
 8003602:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 800386c <main+0x1ae4>
 8003606:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8003870 <main+0x1ae8>
 800360a:	ed9f 2a9a 	vldr	s4, [pc, #616]	@ 8003874 <main+0x1aec>
 800360e:	eef0 1a46 	vmov.f32	s3, s12
 8003612:	eeb0 1a66 	vmov.f32	s2, s13
 8003616:	eef0 0a47 	vmov.f32	s1, s14
 800361a:	eeb0 0a67 	vmov.f32	s0, s15
 800361e:	f001 fa1b 	bl	8004a58 <PID_Update>
 8003622:	eef0 7a40 	vmov.f32	s15, s0
 8003626:	4b94      	ldr	r3, [pc, #592]	@ (8003878 <main+0x1af0>)
 8003628:	edc3 7a00 	vstr	s15, [r3]
									   0.001f, -100.0f, 100.0f, &pid_p_v);

					Workspace_limit();
 800362c:	f001 fd78 	bl	8005120 <Workspace_limit>
					Set_Motor(0, R_PWM);
 8003630:	4b86      	ldr	r3, [pc, #536]	@ (800384c <main+0x1ac4>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	2000      	movs	r0, #0
 800363c:	f001 fca6 	bl	8004f8c <Set_Motor>
					Set_Motor(1, P_PWM);
 8003640:	4b8d      	ldr	r3, [pc, #564]	@ (8003878 <main+0x1af0>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	eeb0 0a67 	vmov.f32	s0, s15
 800364a:	2001      	movs	r0, #1
 800364c:	f001 fc9e 	bl	8004f8c <Set_Motor>

					if (fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD &&
 8003650:	4b8a      	ldr	r3, [pc, #552]	@ (800387c <main+0x1af4>)
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	4b8a      	ldr	r3, [pc, #552]	@ (8003880 <main+0x1af8>)
 8003658:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	eef0 7ae7 	vabs.f32	s15, s15
 8003664:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8003884 <main+0x1afc>
 8003668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d544      	bpl.n	80036fc <main+0x1974>
						fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)
 8003672:	4b85      	ldr	r3, [pc, #532]	@ (8003888 <main+0x1b00>)
 8003674:	ed93 7a00 	vldr	s14, [r3]
 8003678:	4b76      	ldr	r3, [pc, #472]	@ (8003854 <main+0x1acc>)
 800367a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800367e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003682:	eef0 7ae7 	vabs.f32	s15, s15
					if (fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD &&
 8003686:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800388c <main+0x1b04>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	d533      	bpl.n	80036fc <main+0x1974>
					{
						if (lock_timer_us == 0)
 8003694:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <main+0x1b08>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	4313      	orrs	r3, r2
 800369c:	d107      	bne.n	80036ae <main+0x1926>
							lock_timer_us = micros();
 800369e:	f001 f9c1 	bl	8004a24 <micros>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	497a      	ldr	r1, [pc, #488]	@ (8003890 <main+0x1b08>)
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
						if (lock_timer_us == 0)
 80036ac:	e02e      	b.n	800370c <main+0x1984>
						else if ((micros() - lock_timer_us) >= HOLD_TIME_US)
 80036ae:	f001 f9b9 	bl	8004a24 <micros>
 80036b2:	4b77      	ldr	r3, [pc, #476]	@ (8003890 <main+0x1b08>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	1a86      	subs	r6, r0, r2
 80036ba:	643e      	str	r6, [r7, #64]	@ 0x40
 80036bc:	eb61 0303 	sbc.w	r3, r1, r3
 80036c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c2:	4b74      	ldr	r3, [pc, #464]	@ (8003894 <main+0x1b0c>)
 80036c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80036c8:	4602      	mov	r2, r0
 80036ca:	429a      	cmp	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	f173 0300 	sbcs.w	r3, r3, #0
 80036d2:	d31b      	bcc.n	800370c <main+0x1984>
						{
							Set_Servo(1);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f001 fcd7 	bl	8005088 <Set_Servo>
							Set_Motor(0, 0);
 80036da:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8003898 <main+0x1b10>
 80036de:	2000      	movs	r0, #0
 80036e0:	f001 fc54 	bl	8004f8c <Set_Motor>
							Set_Motor(1, 0);
 80036e4:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8003898 <main+0x1b10>
 80036e8:	2001      	movs	r0, #1
 80036ea:	f001 fc4f 	bl	8004f8c <Set_Motor>
							revolute.finished = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
							prismatic.finished = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
						if (lock_timer_us == 0)
 80036fa:	e007      	b.n	800370c <main+0x1984>
						}
					}
					else
					{
						lock_timer_us = 0;
 80036fc:	4964      	ldr	r1, [pc, #400]	@ (8003890 <main+0x1b08>)
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9c1 2300 	strd	r2, r3, [r1]
 800370a:	e000      	b.n	800370e <main+0x1986>
						if (lock_timer_us == 0)
 800370c:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5)
 800370e:	4b63      	ldr	r3, [pc, #396]	@ (800389c <main+0x1b14>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d111      	bne.n	800373a <main+0x19b2>
			{

				Workspace_limit();
 8003716:	f001 fd03 	bl	8005120 <Workspace_limit>
				Set_Motor(0, R_PWM);
 800371a:	4b4c      	ldr	r3, [pc, #304]	@ (800384c <main+0x1ac4>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eeb0 0a67 	vmov.f32	s0, s15
 8003724:	2000      	movs	r0, #0
 8003726:	f001 fc31 	bl	8004f8c <Set_Motor>
				Set_Motor(1, P_PWM);
 800372a:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <main+0x1af0>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	2001      	movs	r0, #1
 8003736:	f001 fc29 	bl	8004f8c <Set_Motor>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			static uint64_t lastPressTime = 0; // Holds the last time a press was handled
			uint64_t currentTime = micros();   // Current time in microseconds
 800373a:	f001 f973 	bl	8004a24 <micros>
 800373e:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120
			if (Mode == 6)
 8003742:	4b56      	ldr	r3, [pc, #344]	@ (800389c <main+0x1b14>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b06      	cmp	r3, #6
 8003748:	f040 80d2 	bne.w	80038f0 <main+0x1b68>
			{
				if (TenPointMode == 1)
 800374c:	4b54      	ldr	r3, [pc, #336]	@ (80038a0 <main+0x1b18>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d103      	bne.n	800375c <main+0x19d4>
				{
					Mode = 2;
 8003754:	4a51      	ldr	r2, [pc, #324]	@ (800389c <main+0x1b14>)
 8003756:	2302      	movs	r3, #2
 8003758:	7013      	strb	r3, [r2, #0]
 800375a:	e0c9      	b.n	80038f0 <main+0x1b68>
				}
				else if (IsPress && currentTime - lastPressTime >= 3000000)
 800375c:	4b51      	ldr	r3, [pc, #324]	@ (80038a4 <main+0x1b1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80ab 	beq.w	80038bc <main+0x1b34>
 8003766:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <main+0x1b20>)
 8003768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800376c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003770:	1a16      	subs	r6, r2, r0
 8003772:	63be      	str	r6, [r7, #56]	@ 0x38
 8003774:	eb63 0301 	sbc.w	r3, r3, r1
 8003778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800377a:	4b4c      	ldr	r3, [pc, #304]	@ (80038ac <main+0x1b24>)
 800377c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003780:	4602      	mov	r2, r0
 8003782:	429a      	cmp	r2, r3
 8003784:	460b      	mov	r3, r1
 8003786:	f173 0300 	sbcs.w	r3, r3, #0
 800378a:	f0c0 8097 	bcc.w	80038bc <main+0x1b34>
				{
					lastPressTime = currentTime;
 800378e:	4946      	ldr	r1, [pc, #280]	@ (80038a8 <main+0x1b20>)
 8003790:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003794:	e9c1 2300 	strd	r2, r3, [r1]
					testArray[counter * 2] = Prismatic_QEIdata.mmPosition;
 8003798:	4b45      	ldr	r3, [pc, #276]	@ (80038b0 <main+0x1b28>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	0058      	lsls	r0, r3, #1
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <main+0x1acc>)
 80037a0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80037a2:	4a44      	ldr	r2, [pc, #272]	@ (80038b4 <main+0x1b2c>)
 80037a4:	0083      	lsls	r3, r0, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	6019      	str	r1, [r3, #0]
					testArray[(counter * 2) + 1] = Revolute_QEIdata.RadPosition;
 80037aa:	4b41      	ldr	r3, [pc, #260]	@ (80038b0 <main+0x1b28>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	1c58      	adds	r0, r3, #1
 80037b2:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <main+0x1af8>)
 80037b4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80037b6:	4a3f      	ldr	r2, [pc, #252]	@ (80038b4 <main+0x1b2c>)
 80037b8:	0083      	lsls	r3, r0, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	6019      	str	r1, [r3, #0]
					SET_TARGET(counter, (int16_t)Prismatic_QEIdata.mmPosition,
 80037be:	4b25      	ldr	r3, [pc, #148]	@ (8003854 <main+0x1acc>)
 80037c0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c8:	ee17 3a90 	vmov	r3, s15
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	4b38      	ldr	r3, [pc, #224]	@ (80038b0 <main+0x1b28>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d804      	bhi.n	80037e0 <main+0x1a58>
 80037d6:	4b36      	ldr	r3, [pc, #216]	@ (80038b0 <main+0x1b28>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3310      	adds	r3, #16
 80037dc:	0059      	lsls	r1, r3, #1
 80037de:	e003      	b.n	80037e8 <main+0x1a60>
 80037e0:	4b33      	ldr	r3, [pc, #204]	@ (80038b0 <main+0x1b28>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	3313      	adds	r3, #19
 80037e6:	0059      	lsls	r1, r3, #1
 80037e8:	b293      	uxth	r3, r2
 80037ea:	4a33      	ldr	r2, [pc, #204]	@ (80038b8 <main+0x1b30>)
 80037ec:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80037f0:	4b23      	ldr	r3, [pc, #140]	@ (8003880 <main+0x1af8>)
 80037f2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fa:	ee17 3a90 	vmov	r3, s15
 80037fe:	b21a      	sxth	r2, r3
 8003800:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <main+0x1b28>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d805      	bhi.n	8003814 <main+0x1a8c>
 8003808:	4b29      	ldr	r3, [pc, #164]	@ (80038b0 <main+0x1b28>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	3310      	adds	r3, #16
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	1c59      	adds	r1, r3, #1
 8003812:	e004      	b.n	800381e <main+0x1a96>
 8003814:	4b26      	ldr	r3, [pc, #152]	@ (80038b0 <main+0x1b28>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3313      	adds	r3, #19
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	1c59      	adds	r1, r3, #1
 800381e:	b293      	uxth	r3, r2
 8003820:	4a25      	ldr	r2, [pc, #148]	@ (80038b8 <main+0x1b30>)
 8003822:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							   (int16_t)Revolute_QEIdata.RadPosition);

					if (counter == 9)
 8003826:	4b22      	ldr	r3, [pc, #136]	@ (80038b0 <main+0x1b28>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b09      	cmp	r3, #9
 800382c:	d106      	bne.n	800383c <main+0x1ab4>
					{
						counter = 0;
 800382e:	4a20      	ldr	r2, [pc, #128]	@ (80038b0 <main+0x1b28>)
 8003830:	2300      	movs	r3, #0
 8003832:	7013      	strb	r3, [r2, #0]
						TenPointMode = 1;
 8003834:	4a1a      	ldr	r2, [pc, #104]	@ (80038a0 <main+0x1b18>)
 8003836:	2301      	movs	r3, #1
 8003838:	7013      	strb	r3, [r2, #0]
					if (counter == 9)
 800383a:	e059      	b.n	80038f0 <main+0x1b68>
					}
					else
					{
						counter++;
 800383c:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <main+0x1b28>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <main+0x1b28>)
 8003846:	7013      	strb	r3, [r2, #0]
					if (counter == 9)
 8003848:	e052      	b.n	80038f0 <main+0x1b68>
 800384a:	bf00      	nop
 800384c:	20000bbc 	.word	0x20000bbc
 8003850:	20001350 	.word	0x20001350
 8003854:	20000b30 	.word	0x20000b30
 8003858:	20000bb8 	.word	0x20000bb8
 800385c:	20000214 	.word	0x20000214
 8003860:	20000218 	.word	0x20000218
 8003864:	20000c20 	.word	0x20000c20
 8003868:	20000c14 	.word	0x20000c14
 800386c:	42c80000 	.word	0x42c80000
 8003870:	c2c80000 	.word	0xc2c80000
 8003874:	3a83126f 	.word	0x3a83126f
 8003878:	20000bc0 	.word	0x20000bc0
 800387c:	20000b8c 	.word	0x20000b8c
 8003880:	20000af0 	.word	0x20000af0
 8003884:	3d0b4396 	.word	0x3d0b4396
 8003888:	20000b90 	.word	0x20000b90
 800388c:	3e4ccccd 	.word	0x3e4ccccd
 8003890:	20000bd0 	.word	0x20000bd0
 8003894:	000f4240 	.word	0x000f4240
 8003898:	00000000 	.word	0x00000000
 800389c:	20000bc4 	.word	0x20000bc4
 80038a0:	20000c45 	.word	0x20000c45
 80038a4:	20000bc6 	.word	0x20000bc6
 80038a8:	20001358 	.word	0x20001358
 80038ac:	002dc6c0 	.word	0x002dc6c0
 80038b0:	20000c44 	.word	0x20000c44
 80038b4:	200012c8 	.word	0x200012c8
 80038b8:	20001134 	.word	0x20001134
					}
				}
				else if (IsPress && currentTime - lastPressTime < 3000000)
 80038bc:	4bb4      	ldr	r3, [pc, #720]	@ (8003b90 <main+0x1e08>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <main+0x1b68>
 80038c4:	4bb3      	ldr	r3, [pc, #716]	@ (8003b94 <main+0x1e0c>)
 80038c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80038ce:	1a16      	subs	r6, r2, r0
 80038d0:	633e      	str	r6, [r7, #48]	@ 0x30
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d8:	4baf      	ldr	r3, [pc, #700]	@ (8003b98 <main+0x1e10>)
 80038da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80038de:	4602      	mov	r2, r0
 80038e0:	429a      	cmp	r2, r3
 80038e2:	460b      	mov	r3, r1
 80038e4:	f173 0300 	sbcs.w	r3, r3, #0
 80038e8:	d202      	bcs.n	80038f0 <main+0x1b68>
				{
					Mode = 1;
 80038ea:	4aac      	ldr	r2, [pc, #688]	@ (8003b9c <main+0x1e14>)
 80038ec:	2301      	movs	r3, #1
 80038ee:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7)
 80038f0:	4baa      	ldr	r3, [pc, #680]	@ (8003b9c <main+0x1e14>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d11c      	bne.n	8003932 <main+0x1baa>
			{
				Set_Motor(0, 5);
 80038f8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80038fc:	2000      	movs	r0, #0
 80038fe:	f001 fb45 	bl	8004f8c <Set_Motor>
				if (Z_index_R > 0)
 8003902:	4ba7      	ldr	r3, [pc, #668]	@ (8003ba0 <main+0x1e18>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00e      	beq.n	8003928 <main+0x1ba0>
				{
					Set_Motor(0, 0);
 800390a:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 8003ba4 <main+0x1e1c>
 800390e:	2000      	movs	r0, #0
 8003910:	f001 fb3c 	bl	8004f8c <Set_Motor>
					Reset_R();
 8003914:	f001 fbe2 	bl	80050dc <Reset_R>
					TargetR = Revolute_QEIdata.RadPosition;
 8003918:	4ba3      	ldr	r3, [pc, #652]	@ (8003ba8 <main+0x1e20>)
 800391a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800391c:	4ba3      	ldr	r3, [pc, #652]	@ (8003bac <main+0x1e24>)
 800391e:	601a      	str	r2, [r3, #0]
					Mode = 0;
 8003920:	4a9e      	ldr	r2, [pc, #632]	@ (8003b9c <main+0x1e14>)
 8003922:	2300      	movs	r3, #0
 8003924:	7013      	strb	r3, [r2, #0]
 8003926:	e004      	b.n	8003932 <main+0x1baa>
				}
				else
				{
					Set_Motor(0, 25);
 8003928:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800392c:	2000      	movs	r0, #0
 800392e:	f001 fb2d 	bl	8004f8c <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8)
 8003932:	4b9a      	ldr	r3, [pc, #616]	@ (8003b9c <main+0x1e14>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b08      	cmp	r3, #8
 8003938:	f47e aaaf 	bne.w	8001e9a <main+0x112>
			{
				static uint64_t pen_delay_timer;
				if (loop_counter == 1 && micros() - pen_delay_timer < 300000)
 800393c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bb0 <main+0x1e28>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d120      	bne.n	8003986 <main+0x1bfe>
 8003944:	f001 f86e 	bl	8004a24 <micros>
 8003948:	4b9a      	ldr	r3, [pc, #616]	@ (8003bb4 <main+0x1e2c>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	1a86      	subs	r6, r0, r2
 8003950:	62be      	str	r6, [r7, #40]	@ 0x28
 8003952:	eb61 0303 	sbc.w	r3, r1, r3
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003958:	4b97      	ldr	r3, [pc, #604]	@ (8003bb8 <main+0x1e30>)
 800395a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800395e:	4602      	mov	r2, r0
 8003960:	429a      	cmp	r2, r3
 8003962:	460b      	mov	r3, r1
 8003964:	f173 0300 	sbcs.w	r3, r3, #0
 8003968:	d20d      	bcs.n	8003986 <main+0x1bfe>
				{
					Set_Motor(0, 0);
 800396a:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 8003ba4 <main+0x1e1c>
 800396e:	2000      	movs	r0, #0
 8003970:	f001 fb0c 	bl	8004f8c <Set_Motor>
					Set_Motor(1, 0);
 8003974:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8003ba4 <main+0x1e1c>
 8003978:	2001      	movs	r0, #1
 800397a:	f001 fb07 	bl	8004f8c <Set_Motor>
					Set_Servo(1);
 800397e:	2001      	movs	r0, #1
 8003980:	f001 fb82 	bl	8005088 <Set_Servo>
 8003984:	e1b7      	b.n	8003cf6 <main+0x1f6e>
				}
				else if (loop_counter == 1 && micros() - pen_delay_timer < 500000)
 8003986:	4b8a      	ldr	r3, [pc, #552]	@ (8003bb0 <main+0x1e28>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d116      	bne.n	80039bc <main+0x1c34>
 800398e:	f001 f849 	bl	8004a24 <micros>
 8003992:	4b88      	ldr	r3, [pc, #544]	@ (8003bb4 <main+0x1e2c>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	1a86      	subs	r6, r0, r2
 800399a:	623e      	str	r6, [r7, #32]
 800399c:	eb61 0303 	sbc.w	r3, r1, r3
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a2:	4b86      	ldr	r3, [pc, #536]	@ (8003bbc <main+0x1e34>)
 80039a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039a8:	4602      	mov	r2, r0
 80039aa:	429a      	cmp	r2, r3
 80039ac:	460b      	mov	r3, r1
 80039ae:	f173 0300 	sbcs.w	r3, r3, #0
 80039b2:	d203      	bcs.n	80039bc <main+0x1c34>
				{
					Set_Servo(0);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f001 fb67 	bl	8005088 <Set_Servo>
 80039ba:	e19c      	b.n	8003cf6 <main+0x1f6e>
				}
				else if (loop_counter < 100)
 80039bc:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb0 <main+0x1e28>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b63      	cmp	r3, #99	@ 0x63
 80039c2:	f300 816d 	bgt.w	8003ca0 <main+0x1f18>
				{
					static uint16_t loop_temp = 0;
					Set_Servo(0);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f001 fb5e 	bl	8005088 <Set_Servo>

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 80039cc:	4b77      	ldr	r3, [pc, #476]	@ (8003bac <main+0x1e24>)
 80039ce:	ed93 7a00 	vldr	s14, [r3]
 80039d2:	4b75      	ldr	r3, [pc, #468]	@ (8003ba8 <main+0x1e20>)
 80039d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80039d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039dc:	4b78      	ldr	r3, [pc, #480]	@ (8003bc0 <main+0x1e38>)
 80039de:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80039e2:	4b78      	ldr	r3, [pc, #480]	@ (8003bc4 <main+0x1e3c>)
 80039e4:	ed93 7a00 	vldr	s14, [r3]
 80039e8:	4b77      	ldr	r3, [pc, #476]	@ (8003bc8 <main+0x1e40>)
 80039ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80039ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <main+0x1e44>)
 80039f4:	edc3 7a00 	vstr	s15, [r3]

					static uint64_t timestampState8 = 0;
					int64_t currentTimeState8 = micros();
 80039f8:	f001 f814 	bl	8004a24 <micros>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
					if (currentTimeState8 > timestampState8)
 8003a04:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8003a08:	4b71      	ldr	r3, [pc, #452]	@ (8003bd0 <main+0x1e48>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	4282      	cmp	r2, r0
 8003a10:	418b      	sbcs	r3, r1
 8003a12:	d251      	bcs.n	8003ab8 <main+0x1d30>
					{
						timestampState8 = currentTimeState8 + 10000; // us
 8003a14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003a18:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003a1c:	1851      	adds	r1, r2, r1
 8003a1e:	61b9      	str	r1, [r7, #24]
 8003a20:	f143 0300 	adc.w	r3, r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a2a:	4b69      	ldr	r3, [pc, #420]	@ (8003bd0 <main+0x1e48>)
 8003a2c:	e9c3 0100 	strd	r0, r1, [r3]
						R_PWM = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 8003a30:	4b63      	ldr	r3, [pc, #396]	@ (8003bc0 <main+0x1e38>)
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <main+0x1e4c>)
 8003a38:	ed93 7a00 	vldr	s14, [r3]
 8003a3c:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <main+0x1e50>)
 8003a3e:	edd3 6a00 	vldr	s13, [r3]
 8003a42:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <main+0x1e54>)
 8003a44:	ed93 6a00 	vldr	s12, [r3]
 8003a48:	4865      	ldr	r0, [pc, #404]	@ (8003be0 <main+0x1e58>)
 8003a4a:	ed9f 3a66 	vldr	s6, [pc, #408]	@ 8003be4 <main+0x1e5c>
 8003a4e:	eddf 2a66 	vldr	s5, [pc, #408]	@ 8003be8 <main+0x1e60>
 8003a52:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 8003bec <main+0x1e64>
 8003a56:	eef0 1a46 	vmov.f32	s3, s12
 8003a5a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a5e:	eef0 0a47 	vmov.f32	s1, s14
 8003a62:	eeb0 0a67 	vmov.f32	s0, s15
 8003a66:	f000 fff7 	bl	8004a58 <PID_Update>
 8003a6a:	eef0 7a40 	vmov.f32	s15, s0
 8003a6e:	4b60      	ldr	r3, [pc, #384]	@ (8003bf0 <main+0x1e68>)
 8003a70:	edc3 7a00 	vstr	s15, [r3]
										   R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
						P_PWM = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 8003a74:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <main+0x1e44>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf4 <main+0x1e6c>)
 8003a7c:	ed93 7a00 	vldr	s14, [r3]
 8003a80:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf8 <main+0x1e70>)
 8003a82:	edd3 6a00 	vldr	s13, [r3]
 8003a86:	4b5d      	ldr	r3, [pc, #372]	@ (8003bfc <main+0x1e74>)
 8003a88:	ed93 6a00 	vldr	s12, [r3]
 8003a8c:	485c      	ldr	r0, [pc, #368]	@ (8003c00 <main+0x1e78>)
 8003a8e:	ed9f 3a55 	vldr	s6, [pc, #340]	@ 8003be4 <main+0x1e5c>
 8003a92:	eddf 2a55 	vldr	s5, [pc, #340]	@ 8003be8 <main+0x1e60>
 8003a96:	ed9f 2a55 	vldr	s4, [pc, #340]	@ 8003bec <main+0x1e64>
 8003a9a:	eef0 1a46 	vmov.f32	s3, s12
 8003a9e:	eeb0 1a66 	vmov.f32	s2, s13
 8003aa2:	eef0 0a47 	vmov.f32	s1, s14
 8003aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aaa:	f000 ffd5 	bl	8004a58 <PID_Update>
 8003aae:	eef0 7a40 	vmov.f32	s15, s0
 8003ab2:	4b54      	ldr	r3, [pc, #336]	@ (8003c04 <main+0x1e7c>)
 8003ab4:	edc3 7a00 	vstr	s15, [r3]
										   P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);
					}

					Workspace_limit();
 8003ab8:	f001 fb32 	bl	8005120 <Workspace_limit>

					Set_Motor(0, R_PWM);
 8003abc:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf0 <main+0x1e68>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f001 fa60 	bl	8004f8c <Set_Motor>
					Set_Motor(1, P_PWM);
 8003acc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c04 <main+0x1e7c>)
 8003ace:	edd3 7a00 	vldr	s15, [r3]
 8003ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f001 fa58 	bl	8004f8c <Set_Motor>
					if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD && fabsf(P_Pos_Error) < P_ERR_TOL_MM)
 8003adc:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <main+0x1e38>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ae6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003c08 <main+0x1e80>
 8003aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	f140 80cc 	bpl.w	8003c8e <main+0x1f06>
 8003af6:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <main+0x1e44>)
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	eef0 7ae7 	vabs.f32	s15, s15
 8003b00:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003c0c <main+0x1e84>
 8003b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	f140 80bf 	bpl.w	8003c8e <main+0x1f06>
					{
						/* within window —— start or continue timer */
						if (lock_timer_us == 0)
 8003b10:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <main+0x1e88>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	d107      	bne.n	8003b2a <main+0x1da2>
							lock_timer_us = micros(); /* start timing */
 8003b1a:	f000 ff83 	bl	8004a24 <micros>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	493b      	ldr	r1, [pc, #236]	@ (8003c10 <main+0x1e88>)
 8003b24:	e9c1 2300 	strd	r2, r3, [r1]
						if (lock_timer_us == 0)
 8003b28:	e0e4      	b.n	8003cf4 <main+0x1f6c>

						else if ((micros() - lock_timer_us) >= HOLD_TIME_US)
 8003b2a:	f000 ff7b 	bl	8004a24 <micros>
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <main+0x1e88>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	1a86      	subs	r6, r0, r2
 8003b36:	613e      	str	r6, [r7, #16]
 8003b38:	eb61 0303 	sbc.w	r3, r1, r3
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <main+0x1e8c>)
 8003b40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b44:	4602      	mov	r2, r0
 8003b46:	429a      	cmp	r2, r3
 8003b48:	460b      	mov	r3, r1
 8003b4a:	f173 0300 	sbcs.w	r3, r3, #0
 8003b4e:	f0c0 80d1 	bcc.w	8003cf4 <main+0x1f6c>
						{
							if (loop_temp == 0)
 8003b52:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <main+0x1e90>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d164      	bne.n	8003c24 <main+0x1e9c>
							{
								pid_r.integ = 0;
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <main+0x1e58>)
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	6013      	str	r3, [r2, #0]
								pid_r.prevError = 0;
 8003b62:	4a1f      	ldr	r2, [pc, #124]	@ (8003be0 <main+0x1e58>)
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	6053      	str	r3, [r2, #4]
								pid_p.integ = 0;
 8003b6a:	4a25      	ldr	r2, [pc, #148]	@ (8003c00 <main+0x1e78>)
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	6013      	str	r3, [r2, #0]
								pid_p.prevError = 0;
 8003b72:	4a23      	ldr	r2, [pc, #140]	@ (8003c00 <main+0x1e78>)
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	6053      	str	r3, [r2, #4]
								TargetR = -1.0472;
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bac <main+0x1e24>)
 8003b7c:	4b27      	ldr	r3, [pc, #156]	@ (8003c1c <main+0x1e94>)
 8003b7e:	6013      	str	r3, [r2, #0]
								TargetP = 250;
 8003b80:	4a10      	ldr	r2, [pc, #64]	@ (8003bc4 <main+0x1e3c>)
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <main+0x1e98>)
 8003b84:	6013      	str	r3, [r2, #0]
								loop_temp = 1;
 8003b86:	4a24      	ldr	r2, [pc, #144]	@ (8003c18 <main+0x1e90>)
 8003b88:	2301      	movs	r3, #1
 8003b8a:	8013      	strh	r3, [r2, #0]
						if (lock_timer_us == 0)
 8003b8c:	e0b2      	b.n	8003cf4 <main+0x1f6c>
 8003b8e:	bf00      	nop
 8003b90:	20000bc6 	.word	0x20000bc6
 8003b94:	20001358 	.word	0x20001358
 8003b98:	002dc6c0 	.word	0x002dc6c0
 8003b9c:	20000bc4 	.word	0x20000bc4
 8003ba0:	20000b70 	.word	0x20000b70
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	20000af0 	.word	0x20000af0
 8003bac:	20000b8c 	.word	0x20000b8c
 8003bb0:	20000c40 	.word	0x20000c40
 8003bb4:	20001360 	.word	0x20001360
 8003bb8:	000493e0 	.word	0x000493e0
 8003bbc:	0007a120 	.word	0x0007a120
 8003bc0:	20000bac 	.word	0x20000bac
 8003bc4:	20000b90 	.word	0x20000b90
 8003bc8:	20000b30 	.word	0x20000b30
 8003bcc:	20000bb0 	.word	0x20000bb0
 8003bd0:	20001368 	.word	0x20001368
 8003bd4:	20000208 	.word	0x20000208
 8003bd8:	2000020c 	.word	0x2000020c
 8003bdc:	20000210 	.word	0x20000210
 8003be0:	20000bfc 	.word	0x20000bfc
 8003be4:	42c80000 	.word	0x42c80000
 8003be8:	c2c80000 	.word	0xc2c80000
 8003bec:	3c23d70a 	.word	0x3c23d70a
 8003bf0:	20000bbc 	.word	0x20000bbc
 8003bf4:	2000021c 	.word	0x2000021c
 8003bf8:	20000220 	.word	0x20000220
 8003bfc:	20000224 	.word	0x20000224
 8003c00:	20000c04 	.word	0x20000c04
 8003c04:	20000bc0 	.word	0x20000bc0
 8003c08:	3d0b4396 	.word	0x3d0b4396
 8003c0c:	3e4ccccd 	.word	0x3e4ccccd
 8003c10:	20000bd0 	.word	0x20000bd0
 8003c14:	000f4240 	.word	0x000f4240
 8003c18:	20001370 	.word	0x20001370
 8003c1c:	bf860aa6 	.word	0xbf860aa6
 8003c20:	437a0000 	.word	0x437a0000
							}
							else
							{
								pid_r.integ = 0;
 8003c24:	4a35      	ldr	r2, [pc, #212]	@ (8003cfc <main+0x1f74>)
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	6013      	str	r3, [r2, #0]
								pid_r.prevError = 0;
 8003c2c:	4a33      	ldr	r2, [pc, #204]	@ (8003cfc <main+0x1f74>)
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	6053      	str	r3, [r2, #4]
								pid_p.integ = 0;
 8003c34:	4a32      	ldr	r2, [pc, #200]	@ (8003d00 <main+0x1f78>)
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	6013      	str	r3, [r2, #0]
								pid_p.prevError = 0;
 8003c3c:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <main+0x1f78>)
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	6053      	str	r3, [r2, #4]
								TargetR = 4.18879;
 8003c44:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <main+0x1f7c>)
 8003c46:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <main+0x1f80>)
 8003c48:	6013      	str	r3, [r2, #0]
								TargetP = 50;
 8003c4a:	4a30      	ldr	r2, [pc, #192]	@ (8003d0c <main+0x1f84>)
 8003c4c:	4b30      	ldr	r3, [pc, #192]	@ (8003d10 <main+0x1f88>)
 8003c4e:	6013      	str	r3, [r2, #0]
								loop_temp = 0;
 8003c50:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <main+0x1f8c>)
 8003c52:	2300      	movs	r3, #0
 8003c54:	8013      	strh	r3, [r2, #0]
								loop_counter++;
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <main+0x1f90>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d18 <main+0x1f90>)
 8003c5e:	601a      	str	r2, [r3, #0]
								if (loop_counter == 1)
 8003c60:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <main+0x1f90>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <main+0x1eee>
								{
									pen_delay_timer = micros();
 8003c68:	f000 fedc 	bl	8004a24 <micros>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	492a      	ldr	r1, [pc, #168]	@ (8003d1c <main+0x1f94>)
 8003c72:	e9c1 2300 	strd	r2, r3, [r1]
								}
								if (loop_counter == 100)
 8003c76:	4b28      	ldr	r3, [pc, #160]	@ (8003d18 <main+0x1f90>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d13a      	bne.n	8003cf4 <main+0x1f6c>
								{
									pen_delay_timer = micros();
 8003c7e:	f000 fed1 	bl	8004a24 <micros>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4925      	ldr	r1, [pc, #148]	@ (8003d1c <main+0x1f94>)
 8003c88:	e9c1 2300 	strd	r2, r3, [r1]
						if (lock_timer_us == 0)
 8003c8c:	e032      	b.n	8003cf4 <main+0x1f6c>
							}
						}
					}
					else
					{
						lock_timer_us = 0;
 8003c8e:	4924      	ldr	r1, [pc, #144]	@ (8003d20 <main+0x1f98>)
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
 8003c9c:	f7fe b8fd 	b.w	8001e9a <main+0x112>
					}
				}
				else
				{
					if (micros() - pen_delay_timer < 500000)
 8003ca0:	f000 fec0 	bl	8004a24 <micros>
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <main+0x1f94>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	1a86      	subs	r6, r0, r2
 8003cac:	60be      	str	r6, [r7, #8]
 8003cae:	eb61 0303 	sbc.w	r3, r1, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <main+0x1f9c>)
 8003cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cba:	4602      	mov	r2, r0
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	f173 0300 	sbcs.w	r3, r3, #0
 8003cc4:	d20e      	bcs.n	8003ce4 <main+0x1f5c>
					{
						Set_Motor(0, 0);
 8003cc6:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8003d28 <main+0x1fa0>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f001 f95e 	bl	8004f8c <Set_Motor>
						Set_Motor(1, 0);
 8003cd0:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003d28 <main+0x1fa0>
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f001 f959 	bl	8004f8c <Set_Motor>
						Set_Servo(1);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f001 f9d4 	bl	8005088 <Set_Servo>
 8003ce0:	f7fe b8db 	b.w	8001e9a <main+0x112>
					}
					else
					{
						Set_Servo(0);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f001 f9cf 	bl	8005088 <Set_Servo>
						Mode = 0;
 8003cea:	4a10      	ldr	r2, [pc, #64]	@ (8003d2c <main+0x1fa4>)
 8003cec:	2300      	movs	r3, #0
 8003cee:	7013      	strb	r3, [r2, #0]
 8003cf0:	f7fe b8d3 	b.w	8001e9a <main+0x112>
						if (lock_timer_us == 0)
 8003cf4:	bf00      	nop
	{
 8003cf6:	f7fe b8d0 	b.w	8001e9a <main+0x112>
 8003cfa:	bf00      	nop
 8003cfc:	20000bfc 	.word	0x20000bfc
 8003d00:	20000c04 	.word	0x20000c04
 8003d04:	20000b8c 	.word	0x20000b8c
 8003d08:	40860a91 	.word	0x40860a91
 8003d0c:	20000b90 	.word	0x20000b90
 8003d10:	42480000 	.word	0x42480000
 8003d14:	20001370 	.word	0x20001370
 8003d18:	20000c40 	.word	0x20000c40
 8003d1c:	20001360 	.word	0x20001360
 8003d20:	20000bd0 	.word	0x20000bd0
 8003d24:	0007a120 	.word	0x0007a120
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	20000bc4 	.word	0x20000bc4

08003d30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b094      	sub	sp, #80	@ 0x50
 8003d34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d36:	f107 0318 	add.w	r3, r7, #24
 8003d3a:	2238      	movs	r2, #56	@ 0x38
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f008 f96e 	bl	800c020 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003d52:	2000      	movs	r0, #0
 8003d54:	f002 fcac 	bl	80066b0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d62:	2340      	movs	r3, #64	@ 0x40
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d66:	2302      	movs	r3, #2
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003d72:	2355      	movs	r3, #85	@ 0x55
 8003d74:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d76:	2302      	movs	r3, #2
 8003d78:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d82:	f107 0318 	add.w	r3, r7, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 fd46 	bl	8006818 <HAL_RCC_OscConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8003d92:	f001 fa77 	bl	8005284 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d96:	230f      	movs	r3, #15
 8003d98:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003daa:	1d3b      	adds	r3, r7, #4
 8003dac:	2104      	movs	r1, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 f844 	bl	8006e3c <HAL_RCC_ClockConfig>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8003dba:	f001 fa63 	bl	8005284 <Error_Handler>
	}
}
 8003dbe:	bf00      	nop
 8003dc0:	3750      	adds	r7, #80	@ 0x50
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dec:	463b      	mov	r3, r7
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003df6:	4b35      	ldr	r3, [pc, #212]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003df8:	4a35      	ldr	r2, [pc, #212]	@ (8003ed0 <MX_TIM1_Init+0x108>)
 8003dfa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003dfc:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003dfe:	22a9      	movs	r2, #169	@ 0xa9
 8003e00:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e02:	4b32      	ldr	r3, [pc, #200]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003e08:	4b30      	ldr	r3, [pc, #192]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e0e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e10:	4b2e      	ldr	r3, [pc, #184]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003e22:	482a      	ldr	r0, [pc, #168]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e24:	f003 ff40 	bl	8007ca8 <HAL_TIM_IC_Init>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 8003e2e:	f001 fa29 	bl	8005284 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003e32:	2304      	movs	r3, #4
 8003e34:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003e36:	2360      	movs	r3, #96	@ 0x60
 8003e38:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	481f      	ldr	r0, [pc, #124]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e4e:	f004 ff0b 	bl	8008c68 <HAL_TIM_SlaveConfigSynchro>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8003e58:	f001 fa14 	bl	8005284 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003e60:	2302      	movs	r3, #2
 8003e62:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	2200      	movs	r2, #0
 8003e72:	4619      	mov	r1, r3
 8003e74:	4815      	ldr	r0, [pc, #84]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e76:	f004 fc30 	bl	80086da <HAL_TIM_IC_ConfigChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM1_Init+0xbc>
	{
		Error_Handler();
 8003e80:	f001 fa00 	bl	8005284 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003e84:	2302      	movs	r3, #2
 8003e86:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e8c:	f107 030c 	add.w	r3, r7, #12
 8003e90:	2204      	movs	r2, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	480d      	ldr	r0, [pc, #52]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003e96:	f004 fc20 	bl	80086da <HAL_TIM_IC_ConfigChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8003ea0:	f001 f9f0 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4805      	ldr	r0, [pc, #20]	@ (8003ecc <MX_TIM1_Init+0x104>)
 8003eb6:	f005 fff3 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 8003ec0:	f001 f9e0 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
}
 8003ec4:	bf00      	nop
 8003ec6:	3730      	adds	r7, #48	@ 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200002a8 	.word	0x200002a8
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003eda:	f107 031c 	add.w	r3, r7, #28
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ef8:	463b      	mov	r3, r7
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003f02:	4b33      	ldr	r3, [pc, #204]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f08:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003f0a:	4b31      	ldr	r3, [pc, #196]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f0c:	22a9      	movs	r2, #169	@ 0xa9
 8003f0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f10:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003f16:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003f2a:	4829      	ldr	r0, [pc, #164]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f2c:	f003 febc 	bl	8007ca8 <HAL_TIM_IC_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM2_Init+0x66>
	{
		Error_Handler();
 8003f36:	f001 f9a5 	bl	8005284 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003f3e:	2350      	movs	r3, #80	@ 0x50
 8003f40:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4619      	mov	r1, r3
 8003f54:	481e      	ldr	r0, [pc, #120]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f56:	f004 fe87 	bl	8008c68 <HAL_TIM_SlaveConfigSynchro>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8003f60:	f001 f990 	bl	8005284 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4814      	ldr	r0, [pc, #80]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f7e:	f004 fbac 	bl	80086da <HAL_TIM_IC_ConfigChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM2_Init+0xb8>
	{
		Error_Handler();
 8003f88:	f001 f97c 	bl	8005284 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003f90:	2302      	movs	r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480c      	ldr	r0, [pc, #48]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003f9e:	f004 fb9c 	bl	80086da <HAL_TIM_IC_ConfigChannel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8003fa8:	f001 f96c 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4805      	ldr	r0, [pc, #20]	@ (8003fd0 <MX_TIM2_Init+0xfc>)
 8003fba:	f005 ff71 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM2_Init+0xf4>
	{
		Error_Handler();
 8003fc4:	f001 f95e 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8003fc8:	bf00      	nop
 8003fca:	3730      	adds	r7, #48	@ 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000374 	.word	0x20000374

08003fd4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	@ 0x30
 8003fd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	2224      	movs	r2, #36	@ 0x24
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f008 f81c 	bl	800c020 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe8:	463b      	mov	r3, r7
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003ff2:	4b21      	ldr	r3, [pc, #132]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8003ff4:	4a21      	ldr	r2, [pc, #132]	@ (800407c <MX_TIM3_Init+0xa8>)
 8003ff6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8004004:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8004006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800400a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <MX_TIM3_Init+0xa4>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004018:	2303      	movs	r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8004028:	2304      	movs	r3, #4
 800402a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004030:	2301      	movs	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8004038:	2304      	movs	r3, #4
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	4619      	mov	r1, r3
 8004042:	480d      	ldr	r0, [pc, #52]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8004044:	f004 f88e 	bl	8008164 <HAL_TIM_Encoder_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800404e:	f001 f919 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800405a:	463b      	mov	r3, r7
 800405c:	4619      	mov	r1, r3
 800405e:	4806      	ldr	r0, [pc, #24]	@ (8004078 <MX_TIM3_Init+0xa4>)
 8004060:	f005 ff1e 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 800406a:	f001 f90b 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 800406e:	bf00      	nop
 8004070:	3730      	adds	r7, #48	@ 0x30
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000440 	.word	0x20000440
 800407c:	40000400 	.word	0x40000400

08004080 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	@ 0x30
 8004084:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f007 ffc6 	bl	800c020 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004094:	463b      	mov	r3, r7
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800409e:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040a0:	4a21      	ldr	r2, [pc, #132]	@ (8004128 <MX_TIM4_Init+0xa8>)
 80040a2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80040b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040b6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040c4:	2303      	movs	r3, #3
 80040c6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 80040d4:	2304      	movs	r3, #4
 80040d6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040dc:	2301      	movs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 80040e4:	2304      	movs	r3, #4
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	4619      	mov	r1, r3
 80040ee:	480d      	ldr	r0, [pc, #52]	@ (8004124 <MX_TIM4_Init+0xa4>)
 80040f0:	f004 f838 	bl	8008164 <HAL_TIM_Encoder_Init>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 80040fa:	f001 f8c3 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004106:	463b      	mov	r3, r7
 8004108:	4619      	mov	r1, r3
 800410a:	4806      	ldr	r0, [pc, #24]	@ (8004124 <MX_TIM4_Init+0xa4>)
 800410c:	f005 fec8 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8004116:	f001 f8b5 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 800411a:	bf00      	nop
 800411c:	3730      	adds	r7, #48	@ 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000050c 	.word	0x2000050c
 8004128:	40000800 	.word	0x40000800

0800412c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <MX_TIM5_Init+0x94>)
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <MX_TIM5_Init+0x98>)
 800414e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <MX_TIM5_Init+0x94>)
 8004152:	22a9      	movs	r2, #169	@ 0xa9
 8004154:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004156:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <MX_TIM5_Init+0x94>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800415c:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <MX_TIM5_Init+0x94>)
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	4b16      	ldr	r3, [pc, #88]	@ (80041c0 <MX_TIM5_Init+0x94>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416a:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <MX_TIM5_Init+0x94>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004170:	4813      	ldr	r0, [pc, #76]	@ (80041c0 <MX_TIM5_Init+0x94>)
 8004172:	f003 facd 	bl	8007710 <HAL_TIM_Base_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 800417c:	f001 f882 	bl	8005284 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004184:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004186:	f107 0310 	add.w	r3, r7, #16
 800418a:	4619      	mov	r1, r3
 800418c:	480c      	ldr	r0, [pc, #48]	@ (80041c0 <MX_TIM5_Init+0x94>)
 800418e:	f004 fc55 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 8004198:	f001 f874 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419c:	2300      	movs	r3, #0
 800419e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4805      	ldr	r0, [pc, #20]	@ (80041c0 <MX_TIM5_Init+0x94>)
 80041aa:	f005 fe79 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 80041b4:	f001 f866 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
}
 80041b8:	bf00      	nop
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200005d8 	.word	0x200005d8
 80041c4:	40000c00 	.word	0x40000c00

080041c8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b09c      	sub	sp, #112	@ 0x70
 80041cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80041e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
 80041f8:	615a      	str	r2, [r3, #20]
 80041fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2234      	movs	r2, #52	@ 0x34
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f007 ff0c 	bl	800c020 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8004208:	4b4b      	ldr	r3, [pc, #300]	@ (8004338 <MX_TIM8_Init+0x170>)
 800420a:	4a4c      	ldr	r2, [pc, #304]	@ (800433c <MX_TIM8_Init+0x174>)
 800420c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800420e:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004210:	22a9      	movs	r2, #169	@ 0xa9
 8004212:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004214:	4b48      	ldr	r3, [pc, #288]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 800421a:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <MX_TIM8_Init+0x170>)
 800421c:	2264      	movs	r2, #100	@ 0x64
 800421e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004220:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004226:	4b44      	ldr	r3, [pc, #272]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004228:	2200      	movs	r2, #0
 800422a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422c:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <MX_TIM8_Init+0x170>)
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004232:	4841      	ldr	r0, [pc, #260]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004234:	f003 fa6c 	bl	8007710 <HAL_TIM_Base_Init>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 800423e:	f001 f821 	bl	8005284 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004246:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004248:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800424c:	4619      	mov	r1, r3
 800424e:	483a      	ldr	r0, [pc, #232]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004250:	f004 fbf4 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 800425a:	f001 f813 	bl	8005284 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800425e:	4836      	ldr	r0, [pc, #216]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004260:	f003 fba2 	bl	80079a8 <HAL_TIM_PWM_Init>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 800426a:	f001 f80b 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800427a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800427e:	4619      	mov	r1, r3
 8004280:	482d      	ldr	r0, [pc, #180]	@ (8004338 <MX_TIM8_Init+0x170>)
 8004282:	f005 fe0d 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM8_Init+0xc8>
	{
		Error_Handler();
 800428c:	f000 fffa 	bl	8005284 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004290:	2360      	movs	r3, #96	@ 0x60
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8004294:	2364      	movs	r3, #100	@ 0x64
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004298:	2300      	movs	r3, #0
 800429a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800429c:	2300      	movs	r3, #0
 800429e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042a8:	2300      	movs	r3, #0
 80042aa:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80042b0:	2208      	movs	r2, #8
 80042b2:	4619      	mov	r1, r3
 80042b4:	4820      	ldr	r0, [pc, #128]	@ (8004338 <MX_TIM8_Init+0x170>)
 80042b6:	f004 faad 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_TIM8_Init+0xfc>
	{
		Error_Handler();
 80042c0:	f000 ffe0 	bl	8005284 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80042c8:	220c      	movs	r2, #12
 80042ca:	4619      	mov	r1, r3
 80042cc:	481a      	ldr	r0, [pc, #104]	@ (8004338 <MX_TIM8_Init+0x170>)
 80042ce:	f004 faa1 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_TIM8_Init+0x114>
	{
		Error_Handler();
 80042d8:	f000 ffd4 	bl	8005284 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042f4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004310:	2300      	movs	r3, #0
 8004312:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	4619      	mov	r1, r3
 8004318:	4807      	ldr	r0, [pc, #28]	@ (8004338 <MX_TIM8_Init+0x170>)
 800431a:	f005 fe57 	bl	8009fcc <HAL_TIMEx_ConfigBreakDeadTime>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM8_Init+0x160>
	{
		Error_Handler();
 8004324:	f000 ffae 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004328:	4803      	ldr	r0, [pc, #12]	@ (8004338 <MX_TIM8_Init+0x170>)
 800432a:	f001 f93f 	bl	80055ac <HAL_TIM_MspPostInit>
}
 800432e:	bf00      	nop
 8004330:	3770      	adds	r7, #112	@ 0x70
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200006a4 	.word	0x200006a4
 800433c:	40013400 	.word	0x40013400

08004340 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b09c      	sub	sp, #112	@ 0x70
 8004344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004346:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004360:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
 8004370:	615a      	str	r2, [r3, #20]
 8004372:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	2234      	movs	r2, #52	@ 0x34
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f007 fe50 	bl	800c020 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004380:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <MX_TIM15_Init+0x140>)
 8004382:	4a40      	ldr	r2, [pc, #256]	@ (8004484 <MX_TIM15_Init+0x144>)
 8004384:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8004386:	4b3e      	ldr	r3, [pc, #248]	@ (8004480 <MX_TIM15_Init+0x140>)
 8004388:	22a9      	movs	r2, #169	@ 0xa9
 800438a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <MX_TIM15_Init+0x140>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8004392:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <MX_TIM15_Init+0x140>)
 8004394:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8004398:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800439a:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <MX_TIM15_Init+0x140>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80043a0:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043a6:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80043ac:	4834      	ldr	r0, [pc, #208]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043ae:	f003 f9af 	bl	8007710 <HAL_TIM_Base_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM15_Init+0x7c>
	{
		Error_Handler();
 80043b8:	f000 ff64 	bl	8005284 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043c0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80043c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80043c6:	4619      	mov	r1, r3
 80043c8:	482d      	ldr	r0, [pc, #180]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043ca:	f004 fb37 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <MX_TIM15_Init+0x98>
	{
		Error_Handler();
 80043d4:	f000 ff56 	bl	8005284 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80043d8:	4829      	ldr	r0, [pc, #164]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043da:	f003 fae5 	bl	80079a8 <HAL_TIM_PWM_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM15_Init+0xa8>
	{
		Error_Handler();
 80043e4:	f000 ff4e 	bl	8005284 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80043f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043f4:	4619      	mov	r1, r3
 80043f6:	4822      	ldr	r0, [pc, #136]	@ (8004480 <MX_TIM15_Init+0x140>)
 80043f8:	f005 fd52 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM15_Init+0xc6>
	{
		Error_Handler();
 8004402:	f000 ff3f 	bl	8005284 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004406:	2360      	movs	r3, #96	@ 0x60
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800440e:	2300      	movs	r3, #0
 8004410:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004412:	2300      	movs	r3, #0
 8004414:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004422:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004426:	2200      	movs	r2, #0
 8004428:	4619      	mov	r1, r3
 800442a:	4815      	ldr	r0, [pc, #84]	@ (8004480 <MX_TIM15_Init+0x140>)
 800442c:	f004 f9f2 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM15_Init+0xfa>
	{
		Error_Handler();
 8004436:	f000 ff25 	bl	8005284 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800444e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004452:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4807      	ldr	r0, [pc, #28]	@ (8004480 <MX_TIM15_Init+0x140>)
 8004462:	f005 fdb3 	bl	8009fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM15_Init+0x130>
	{
		Error_Handler();
 800446c:	f000 ff0a 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8004470:	4803      	ldr	r0, [pc, #12]	@ (8004480 <MX_TIM15_Init+0x140>)
 8004472:	f001 f89b 	bl	80055ac <HAL_TIM_MspPostInit>
}
 8004476:	bf00      	nop
 8004478:	3770      	adds	r7, #112	@ 0x70
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000770 	.word	0x20000770
 8004484:	40014000 	.word	0x40014000

08004488 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <MX_TIM16_Init+0x58>)
 800448e:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <MX_TIM16_Init+0x5c>)
 8004490:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8004492:	4b13      	ldr	r3, [pc, #76]	@ (80044e0 <MX_TIM16_Init+0x58>)
 8004494:	22a9      	movs	r2, #169	@ 0xa9
 8004496:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <MX_TIM16_Init+0x58>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044a0:	f240 4279 	movw	r2, #1145	@ 0x479
 80044a4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a6:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80044b8:	4809      	ldr	r0, [pc, #36]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044ba:	f003 f929 	bl	8007710 <HAL_TIM_Base_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM16_Init+0x40>
	{
		Error_Handler();
 80044c4:	f000 fede 	bl	8005284 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80044c8:	2108      	movs	r1, #8
 80044ca:	4805      	ldr	r0, [pc, #20]	@ (80044e0 <MX_TIM16_Init+0x58>)
 80044cc:	f003 fd54 	bl	8007f78 <HAL_TIM_OnePulse_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM16_Init+0x52>
	{
		Error_Handler();
 80044d6:	f000 fed5 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2000083c 	.word	0x2000083c
 80044e4:	40014400 	.word	0x40014400

080044e8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80044ec:	4b23      	ldr	r3, [pc, #140]	@ (800457c <MX_USART2_UART_Init+0x94>)
 80044ee:	4a24      	ldr	r2, [pc, #144]	@ (8004580 <MX_USART2_UART_Init+0x98>)
 80044f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80044f2:	4b22      	ldr	r3, [pc, #136]	@ (800457c <MX_USART2_UART_Init+0x94>)
 80044f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80044f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80044fa:	4b20      	ldr	r3, [pc, #128]	@ (800457c <MX_USART2_UART_Init+0x94>)
 80044fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004500:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004502:	4b1e      	ldr	r3, [pc, #120]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8004508:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <MX_USART2_UART_Init+0x94>)
 800450a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800450e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004510:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004512:	220c      	movs	r2, #12
 8004514:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004516:	4b19      	ldr	r3, [pc, #100]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004518:	2200      	movs	r2, #0
 800451a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800451c:	4b17      	ldr	r3, [pc, #92]	@ (800457c <MX_USART2_UART_Init+0x94>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004522:	4b16      	ldr	r3, [pc, #88]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004524:	2200      	movs	r2, #0
 8004526:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004528:	4b14      	ldr	r3, [pc, #80]	@ (800457c <MX_USART2_UART_Init+0x94>)
 800452a:	2200      	movs	r2, #0
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800452e:	4b13      	ldr	r3, [pc, #76]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004530:	2200      	movs	r2, #0
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004534:	4811      	ldr	r0, [pc, #68]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004536:	f005 fe2d 	bl	800a194 <HAL_UART_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_USART2_UART_Init+0x5c>
	{
		Error_Handler();
 8004540:	f000 fea0 	bl	8005284 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004544:	2100      	movs	r1, #0
 8004546:	480d      	ldr	r0, [pc, #52]	@ (800457c <MX_USART2_UART_Init+0x94>)
 8004548:	f007 fc69 	bl	800be1e <HAL_UARTEx_SetTxFifoThreshold>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_USART2_UART_Init+0x6e>
	{
		Error_Handler();
 8004552:	f000 fe97 	bl	8005284 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004556:	2100      	movs	r1, #0
 8004558:	4808      	ldr	r0, [pc, #32]	@ (800457c <MX_USART2_UART_Init+0x94>)
 800455a:	f007 fc9e 	bl	800be9a <HAL_UARTEx_SetRxFifoThreshold>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_USART2_UART_Init+0x80>
	{
		Error_Handler();
 8004564:	f000 fe8e 	bl	8005284 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004568:	4804      	ldr	r0, [pc, #16]	@ (800457c <MX_USART2_UART_Init+0x94>)
 800456a:	f007 fc1f 	bl	800bdac <HAL_UARTEx_DisableFifoMode>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_USART2_UART_Init+0x90>
	{
		Error_Handler();
 8004574:	f000 fe86 	bl	8005284 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8004578:	bf00      	nop
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000908 	.word	0x20000908
 8004580:	40004400 	.word	0x40004400

08004584 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800458a:	4b16      	ldr	r3, [pc, #88]	@ (80045e4 <MX_DMA_Init+0x60>)
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <MX_DMA_Init+0x60>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6493      	str	r3, [r2, #72]	@ 0x48
 8004596:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <MX_DMA_Init+0x60>)
 8004598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80045a2:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <MX_DMA_Init+0x60>)
 80045a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a6:	4a0f      	ldr	r2, [pc, #60]	@ (80045e4 <MX_DMA_Init+0x60>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <MX_DMA_Init+0x60>)
 80045b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	200b      	movs	r0, #11
 80045c0:	f001 fb45 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80045c4:	200b      	movs	r0, #11
 80045c6:	f001 fb5c 	bl	8005c82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	200c      	movs	r0, #12
 80045d0:	f001 fb3d 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80045d4:	200c      	movs	r0, #12
 80045d6:	f001 fb54 	bl	8005c82 <HAL_NVIC_EnableIRQ>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000

080045e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045fe:	4b74      	ldr	r3, [pc, #464]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004602:	4a73      	ldr	r2, [pc, #460]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004604:	f043 0304 	orr.w	r3, r3, #4
 8004608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800460a:	4b71      	ldr	r3, [pc, #452]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004616:	4b6e      	ldr	r3, [pc, #440]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461a:	4a6d      	ldr	r2, [pc, #436]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 800461c:	f043 0320 	orr.w	r3, r3, #32
 8004620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004622:	4b6b      	ldr	r3, [pc, #428]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	4b68      	ldr	r3, [pc, #416]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004632:	4a67      	ldr	r2, [pc, #412]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800463a:	4b65      	ldr	r3, [pc, #404]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004646:	4b62      	ldr	r3, [pc, #392]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	4a61      	ldr	r2, [pc, #388]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004652:	4b5f      	ldr	r3, [pc, #380]	@ (80047d0 <MX_GPIO_Init+0x1e8>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800465e:	2200      	movs	r2, #0
 8004660:	2120      	movs	r1, #32
 8004662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004666:	f001 fff3 	bl	8006650 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 800466a:	2200      	movs	r2, #0
 800466c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004670:	4858      	ldr	r0, [pc, #352]	@ (80047d4 <MX_GPIO_Init+0x1ec>)
 8004672:	f001 ffed 	bl	8006650 <HAL_GPIO_WritePin>
					  GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8004676:	230d      	movs	r3, #13
 8004678:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800467a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800467e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4619      	mov	r1, r3
 800468a:	4852      	ldr	r0, [pc, #328]	@ (80047d4 <MX_GPIO_Init+0x1ec>)
 800468c:	f001 fe46 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004690:	2320      	movs	r3, #32
 8004692:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004694:	2301      	movs	r3, #1
 8004696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046aa:	f001 fe37 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80046ae:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80046b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046bc:	2300      	movs	r3, #0
 80046be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4619      	mov	r1, r3
 80046c6:	4843      	ldr	r0, [pc, #268]	@ (80047d4 <MX_GPIO_Init+0x1ec>)
 80046c8:	f001 fe28 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 80046cc:	f640 0304 	movw	r3, #2052	@ 0x804
 80046d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	4619      	mov	r1, r3
 80046e0:	483d      	ldr	r0, [pc, #244]	@ (80047d8 <MX_GPIO_Init+0x1f0>)
 80046e2:	f001 fe1b 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80046e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80046ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80046ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80046f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046f2:	2302      	movs	r3, #2
 80046f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f6:	f107 0314 	add.w	r3, r7, #20
 80046fa:	4619      	mov	r1, r3
 80046fc:	4836      	ldr	r0, [pc, #216]	@ (80047d8 <MX_GPIO_Init+0x1f0>)
 80046fe:	f001 fe0d 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004706:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004708:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800470c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800470e:	2302      	movs	r3, #2
 8004710:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	482f      	ldr	r0, [pc, #188]	@ (80047d8 <MX_GPIO_Init+0x1f0>)
 800471a:	f001 fdff 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800471e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004722:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004724:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004728:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004738:	f001 fdf0 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800473c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004740:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004748:	2302      	movs	r3, #2
 800474a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004756:	f001 fde1 	bl	800631c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800475a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800475e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004760:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004764:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004766:	2302      	movs	r3, #2
 8004768:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	4619      	mov	r1, r3
 8004770:	4818      	ldr	r0, [pc, #96]	@ (80047d4 <MX_GPIO_Init+0x1ec>)
 8004772:	f001 fdd3 	bl	800631c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2006      	movs	r0, #6
 800477c:	f001 fa67 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004780:	2006      	movs	r0, #6
 8004782:	f001 fa7e 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2100      	movs	r1, #0
 800478a:	2008      	movs	r0, #8
 800478c:	f001 fa5f 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004790:	2008      	movs	r0, #8
 8004792:	f001 fa76 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	2009      	movs	r0, #9
 800479c:	f001 fa57 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80047a0:	2009      	movs	r0, #9
 80047a2:	f001 fa6e 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	2017      	movs	r0, #23
 80047ac:	f001 fa4f 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80047b0:	2017      	movs	r0, #23
 80047b2:	f001 fa66 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2028      	movs	r0, #40	@ 0x28
 80047bc:	f001 fa47 	bl	8005c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047c0:	2028      	movs	r0, #40	@ 0x28
 80047c2:	f001 fa5e 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80047c6:	bf00      	nop
 80047c8:	3728      	adds	r7, #40	@ 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	48000800 	.word	0x48000800
 80047d8:	48000400 	.word	0x48000400

080047dc <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80047e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80047ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80047ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80047f2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80047f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80047fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80047fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004802:	edd7 6a01 	vldr	s13, [r7, #4]
 8004806:	edd7 7a02 	vldr	s15, [r7, #8]
 800480a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800480e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004812:	ed97 7a03 	vldr	s14, [r7, #12]
 8004816:	edd7 7a04 	vldr	s15, [r7, #16]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004822:	edd7 7a02 	vldr	s15, [r7, #8]
 8004826:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800482a:	eeb0 0a67 	vmov.f32	s0, s15
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <DWT_Init>:

void DWT_Init(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <DWT_Init+0x28>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a07      	ldr	r2, [pc, #28]	@ (8004860 <DWT_Init+0x28>)
 8004842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004846:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <DWT_Init+0x2c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a05      	ldr	r2, [pc, #20]	@ (8004864 <DWT_Init+0x2c>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000edf0 	.word	0xe000edf0
 8004864:	e0001000 	.word	0xe0001000

08004868 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9)
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004878:	d10e      	bne.n	8004898 <HAL_GPIO_EXTI_Callback+0x30>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 800487a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800487e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004882:	f001 fecd 	bl	8006620 <HAL_GPIO_ReadPin>
 8004886:	4603      	mov	r3, r0
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_GPIO_EXTI_Callback+0x30>
		{
			Z_index_R += 1;
 800488c:	4b4b      	ldr	r3, [pc, #300]	@ (80049bc <HAL_GPIO_EXTI_Callback+0x154>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_GPIO_EXTI_Callback+0x154>)
 8004896:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10)
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d10d      	bne.n	80048bc <HAL_GPIO_EXTI_Callback+0x54>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1)
 80048a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048a4:	4846      	ldr	r0, [pc, #280]	@ (80049c0 <HAL_GPIO_EXTI_Callback+0x158>)
 80048a6:	f001 febb 	bl	8006620 <HAL_GPIO_ReadPin>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_GPIO_EXTI_Callback+0x54>
		{
			Mode = 0;
 80048b0:	4b44      	ldr	r3, [pc, #272]	@ (80049c4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 80048b6:	4b44      	ldr	r3, [pc, #272]	@ (80049c8 <HAL_GPIO_EXTI_Callback+0x160>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12)
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c2:	d10e      	bne.n	80048e2 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 80048c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048c8:	4840      	ldr	r0, [pc, #256]	@ (80049cc <HAL_GPIO_EXTI_Callback+0x164>)
 80048ca:	f001 fea9 	bl	8006620 <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d103      	bne.n	80048dc <HAL_GPIO_EXTI_Callback+0x74>
		{
			P_Limit = 1;
 80048d4:	4b3e      	ldr	r3, [pc, #248]	@ (80049d0 <HAL_GPIO_EXTI_Callback+0x168>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e002      	b.n	80048e2 <HAL_GPIO_EXTI_Callback+0x7a>
		}
		else
		{
			P_Limit = 0;
 80048dc:	4b3c      	ldr	r3, [pc, #240]	@ (80049d0 <HAL_GPIO_EXTI_Callback+0x168>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13)
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e8:	d10e      	bne.n	8004908 <HAL_GPIO_EXTI_Callback+0xa0>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 80048ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048ee:	4837      	ldr	r0, [pc, #220]	@ (80049cc <HAL_GPIO_EXTI_Callback+0x164>)
 80048f0:	f001 fe96 	bl	8006620 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d103      	bne.n	8004902 <HAL_GPIO_EXTI_Callback+0x9a>
		{
			R_Limit = 1;
 80048fa:	4b36      	ldr	r3, [pc, #216]	@ (80049d4 <HAL_GPIO_EXTI_Callback+0x16c>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e002      	b.n	8004908 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		else
		{
			R_Limit = 0;
 8004902:	4b34      	ldr	r3, [pc, #208]	@ (80049d4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15)
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490e:	d102      	bne.n	8004916 <HAL_GPIO_EXTI_Callback+0xae>
	{
		EmergencyState = 0;
 8004910:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_GPIO_EXTI_Callback+0x160>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = {0}; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8004916:	4b30      	ldr	r3, [pc, #192]	@ (80049d8 <HAL_GPIO_EXTI_Callback+0x170>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d102      	bne.n	8004928 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e00a      	b.n	800493e <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d102      	bne.n	8004934 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 800492e:	2301      	movs	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e004      	b.n	800493e <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d13b      	bne.n	80049b2 <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 800493a:	2302      	movs	r3, #2
 800493c:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0)
 800493e:	4a27      	ldr	r2, [pc, #156]	@ (80049dc <HAL_GPIO_EXTI_Callback+0x174>)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4413      	add	r3, r2
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <HAL_GPIO_EXTI_Callback+0xf8>
	{
		rise_time[idx] = now;
 800494a:	4925      	ldr	r1, [pc, #148]	@ (80049e0 <HAL_GPIO_EXTI_Callback+0x178>)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8004954:	4a21      	ldr	r2, [pc, #132]	@ (80049dc <HAL_GPIO_EXTI_Callback+0x174>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e029      	b.n	80049b4 <HAL_GPIO_EXTI_Callback+0x14c>
	}
	else
	{
		uint32_t delta =
			(now >= rise_time[idx]) ? (now - rise_time[idx]) : (0xFFFFFFFF - rise_time[idx] + now);
 8004960:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <HAL_GPIO_EXTI_Callback+0x178>)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d306      	bcc.n	800497c <HAL_GPIO_EXTI_Callback+0x114>
 800496e:	4a1c      	ldr	r2, [pc, #112]	@ (80049e0 <HAL_GPIO_EXTI_Callback+0x178>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	e006      	b.n	800498a <HAL_GPIO_EXTI_Callback+0x122>
 800497c:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_GPIO_EXTI_Callback+0x178>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	3b01      	subs	r3, #1
		uint32_t delta =
 800498a:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 800498c:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <HAL_GPIO_EXTI_Callback+0x180>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0c9b      	lsrs	r3, r3, #18
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	fbb2 f2f3 	udiv	r2, r2, r3
 800499e:	4913      	ldr	r1, [pc, #76]	@ (80049ec <HAL_GPIO_EXTI_Callback+0x184>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 80049a6:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <HAL_GPIO_EXTI_Callback+0x174>)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e000      	b.n	80049b4 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80049b2:	bf00      	nop
	}
}
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000b70 	.word	0x20000b70
 80049c0:	48000800 	.word	0x48000800
 80049c4:	20000bc4 	.word	0x20000bc4
 80049c8:	20000bc5 	.word	0x20000bc5
 80049cc:	48000400 	.word	0x48000400
 80049d0:	20000bc9 	.word	0x20000bc9
 80049d4:	20000bca 	.word	0x20000bca
 80049d8:	e0001000 	.word	0xe0001000
 80049dc:	20001374 	.word	0x20001374
 80049e0:	20000ad0 	.word	0x20000ad0
 80049e4:	20000228 	.word	0x20000228
 80049e8:	431bde83 	.word	0x431bde83
 80049ec:	20000adc 	.word	0x20000adc

080049f0 <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b4b0      	push	{r4, r5, r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	1e54      	subs	r4, r2, #1
 8004a08:	f143 0500 	adc.w	r5, r3, #0
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004a0e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bcb0      	pop	{r4, r5, r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	200005d8 	.word	0x200005d8
 8004a20:	20000a98 	.word	0x20000a98

08004a24 <micros>:
uint64_t micros()
{
 8004a24:	b4b0      	push	{r4, r5, r7}
 8004a26:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004a28:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <micros+0x2c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	2200      	movs	r2, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	4611      	mov	r1, r2
 8004a34:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <micros+0x30>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	1884      	adds	r4, r0, r2
 8004a3c:	eb41 0503 	adc.w	r5, r1, r3
 8004a40:	4622      	mov	r2, r4
 8004a42:	462b      	mov	r3, r5
}
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bcb0      	pop	{r4, r5, r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	200005d8 	.word	0x200005d8
 8004a54:	20000a98 	.word	0x20000a98

08004a58 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
				 float outMin, float outMax, PID_State *state)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b08f      	sub	sp, #60	@ 0x3c
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	ed87 0a07 	vstr	s0, [r7, #28]
 8004a62:	edc7 0a06 	vstr	s1, [r7, #24]
 8004a66:	ed87 1a05 	vstr	s2, [r7, #20]
 8004a6a:	edc7 1a04 	vstr	s3, [r7, #16]
 8004a6e:	ed87 2a03 	vstr	s4, [r7, #12]
 8004a72:	edc7 2a02 	vstr	s5, [r7, #8]
 8004a76:	ed87 3a01 	vstr	s6, [r7, #4]
 8004a7a:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004a7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004a80:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	ed93 7a00 	vldr	s14, [r3]
 8004a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	ed93 7a00 	vldr	s14, [r3]
 8004aae:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ab2:	edd7 6a05 	vldr	s13, [r7, #20]
 8004ab6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	dd08      	ble.n	8004ad6 <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004ac4:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ac8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	ed93 7a00 	vldr	s14, [r3]
 8004adc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae0:	edd7 6a05 	vldr	s13, [r7, #20]
 8004ae4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af0:	d508      	bpl.n	8004b04 <PID_Update+0xac>
		state->integ = outMin / kI;
 8004af2:	edd7 6a02 	vldr	s13, [r7, #8]
 8004af6:	ed97 7a05 	vldr	s14, [r7, #20]
 8004afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	dd0b      	ble.n	8004b2a <PID_Update+0xd2>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b20:	d503      	bpl.n	8004b2a <PID_Update+0xd2>
		state->integ = 0;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	d50b      	bpl.n	8004b50 <PID_Update+0xf8>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	dd03      	ble.n	8004b50 <PID_Update+0xf8>
		state->integ = 0;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	edd3 7a00 	vldr	s15, [r3]
 8004b56:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b68:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004b70:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004b7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8004b92:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004b96:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004baa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	dd01      	ble.n	8004bc0 <PID_Update+0x168>
		out = outMax;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8004bc0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd0:	d501      	bpl.n	8004bd6 <PID_Update+0x17e>
		out = outMin;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	ee07 3a90 	vmov	s15, r3
}
 8004bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8004be0:	373c      	adds	r7, #60	@ 0x3c
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	0000      	movs	r0, r0
 8004bec:	0000      	movs	r0, r0
	...

08004bf0 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update()
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004bf8:	f7ff ff14 	bl	8004a24 <micros>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	497b      	ldr	r1, [pc, #492]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c02:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8004c06:	4b7b      	ldr	r3, [pc, #492]	@ (8004df4 <Revolute_PosVel_Update+0x204>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	4a78      	ldr	r2, [pc, #480]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c0e:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004c10:	4b77      	ldr	r3, [pc, #476]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	4b73      	ldr	r3, [pc, #460]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c22:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW] - Revolute_QEIdata.Position[OLD];
 8004c26:	4b72      	ldr	r3, [pc, #456]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b71      	ldr	r3, [pc, #452]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c38:	dd04      	ble.n	8004c44 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e007      	b.n	8004c54 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004c4a:	da03      	bge.n	8004c54 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004c52:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW] - Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004c54:	4b66      	ldr	r3, [pc, #408]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004c5a:	4b65      	ldr	r3, [pc, #404]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004c5c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c60:	ebb0 0a02 	subs.w	sl, r0, r2
 8004c64:	eb61 0b03 	sbc.w	fp, r1, r3
 8004c68:	4650      	mov	r0, sl
 8004c6a:	4659      	mov	r1, fp
 8004c6c:	f7fc f862 	bl	8000d34 <__aeabi_ul2f>
 8004c70:	ee07 0a10 	vmov	s14, r0
 8004c74:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004df8 <Revolute_PosVel_Update+0x208>
 8004c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7c:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	f000 80a0 	beq.w	8004dd0 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float)diffPosition_r / diffTime_r;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca2:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r - Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004ca6:	4b52      	ldr	r3, [pc, #328]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004ca8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cb0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004cb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004cbe:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fb fc09 	bl	80004e0 <__aeabi_f2d>
 8004cce:	a344      	add	r3, pc, #272	@ (adr r3, 8004de0 <Revolute_PosVel_Update+0x1f0>)
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f7fb fc5c 	bl	8000590 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fb ff10 	bl	8000b04 <__aeabi_d2f>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a42      	ldr	r2, [pc, #264]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004ce8:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <Revolute_PosVel_Update+0x20c>)
 8004cec:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity + (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004cee:	4b40      	ldr	r3, [pc, #256]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004cf0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004cf4:	edd7 7a00 	vldr	s15, [r7]
 8004cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d00:	edd7 7a00 	vldr	s15, [r7]
 8004d04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d08:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d18:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration * (2.0f * M_PI / 16384.0f);
 8004d1c:	4b34      	ldr	r3, [pc, #208]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fbdd 	bl	80004e0 <__aeabi_f2d>
 8004d26:	a32e      	add	r3, pc, #184	@ (adr r3, 8004de0 <Revolute_PosVel_Update+0x1f0>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fc30 	bl	8000590 <__aeabi_dmul>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	f7fb fee4 	bl	8000b04 <__aeabi_d2f>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004d42:	4b2b      	ldr	r3, [pc, #172]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d44:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	17c8      	asrs	r0, r1, #31
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	4605      	mov	r5, r0
 8004d50:	eb12 0804 	adds.w	r8, r2, r4
 8004d54:	eb43 0905 	adc.w	r9, r3, r5
 8004d58:	4b25      	ldr	r3, [pc, #148]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d5a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition * (2.0f * M_PI / 16384.0f);
 8004d5e:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	f7fb fbe4 	bl	8000534 <__aeabi_l2d>
 8004d6c:	a31c      	add	r3, pc, #112	@ (adr r3, 8004de0 <Revolute_PosVel_Update+0x1f0>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fc0d 	bl	8000590 <__aeabi_dmul>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f7fb fec1 	bl	8000b04 <__aeabi_d2f>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4a1a      	ldr	r2, [pc, #104]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d86:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004d88:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004d8a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004e00 <Revolute_PosVel_Update+0x210>
 8004d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d96:	ee17 0a90 	vmov	r0, s15
 8004d9a:	f7fb fba1 	bl	80004e0 <__aeabi_f2d>
 8004d9e:	a312      	add	r3, pc, #72	@ (adr r3, 8004de8 <Revolute_PosVel_Update+0x1f8>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fd1e 	bl	80007e4 <__aeabi_ddiv>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fb fea8 	bl	8000b04 <__aeabi_d2f>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a0e      	ldr	r2, [pc, #56]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004db8:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004dc0:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004dc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004dc8:	4909      	ldr	r1, [pc, #36]	@ (8004df0 <Revolute_PosVel_Update+0x200>)
 8004dca:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004dce:	e000      	b.n	8004dd2 <Revolute_PosVel_Update+0x1e2>
		return;
 8004dd0:	bf00      	nop
}
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w
 8004de0:	54442d18 	.word	0x54442d18
 8004de4:	3f3921fb 	.word	0x3f3921fb
 8004de8:	54442d18 	.word	0x54442d18
 8004dec:	400921fb 	.word	0x400921fb
 8004df0:	20000af0 	.word	0x20000af0
 8004df4:	2000050c 	.word	0x2000050c
 8004df8:	358637bd 	.word	0x358637bd
 8004dfc:	3ecccccd 	.word	0x3ecccccd
 8004e00:	43340000 	.word	0x43340000

08004e04 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update()
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004e0c:	f7ff fe0a 	bl	8004a24 <micros>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4958      	ldr	r1, [pc, #352]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004e1a:	4b58      	ldr	r3, [pc, #352]	@ (8004f7c <Prismatic_PosVel_Update+0x178>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	4a55      	ldr	r2, [pc, #340]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e22:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW] - Prismatic_QEIdata.Position[OLD];
 8004e24:	4b54      	ldr	r3, [pc, #336]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b53      	ldr	r3, [pc, #332]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e36:	dd04      	ble.n	8004e42 <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e007      	b.n	8004e52 <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004e48:	da03      	bge.n	8004e52 <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004e50:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW] - Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004e52:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e58:	4b47      	ldr	r3, [pc, #284]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004e5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e5e:	ebb0 0a02 	subs.w	sl, r0, r2
 8004e62:	eb61 0b03 	sbc.w	fp, r1, r3
 8004e66:	4650      	mov	r0, sl
 8004e68:	4659      	mov	r1, fp
 8004e6a:	f7fb ff63 	bl	8000d34 <__aeabi_ul2f>
 8004e6e:	ee07 0a10 	vmov	s14, r0
 8004e72:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004f80 <Prismatic_PosVel_Update+0x17c>
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	d070      	beq.n	8004f6e <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float)diffPosition_p / diffTime_p;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e96:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9e:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p - Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004ea2:	4b35      	ldr	r3, [pc, #212]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004ea4:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ea8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004eac:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004eba:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004f84 <Prismatic_PosVel_Update+0x180>
 8004ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed0:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004ed2:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f88 <Prismatic_PosVel_Update+0x184>)
 8004ed8:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity + (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004eda:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004edc:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ee0:	edd7 7a00 	vldr	s15, [r7]
 8004ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eec:	edd7 7a00 	vldr	s15, [r7]
 8004ef0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004ef4:	4b20      	ldr	r3, [pc, #128]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004ef6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f02:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f04:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration * (10.0f / 8192.0f);
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f0e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004f84 <Prismatic_PosVel_Update+0x180>
 8004f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f16:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f18:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004f1c:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f1e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	17c8      	asrs	r0, r1, #31
 8004f26:	460c      	mov	r4, r1
 8004f28:	4605      	mov	r5, r0
 8004f2a:	eb12 0804 	adds.w	r8, r2, r4
 8004f2e:	eb43 0905 	adc.w	r9, r3, r5
 8004f32:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f34:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition * (10.0f / 8192.0f);
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f7fb feff 	bl	8000d44 <__aeabi_l2f>
 8004f46:	ee07 0a10 	vmov	s14, r0
 8004f4a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004f84 <Prismatic_PosVel_Update+0x180>
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f54:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004f58:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a06      	ldr	r2, [pc, #24]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f5e:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f66:	4904      	ldr	r1, [pc, #16]	@ (8004f78 <Prismatic_PosVel_Update+0x174>)
 8004f68:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004f6c:	e000      	b.n	8004f70 <Prismatic_PosVel_Update+0x16c>
		return;
 8004f6e:	bf00      	nop
}
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f78:	20000b30 	.word	0x20000b30
 8004f7c:	20000440 	.word	0x20000440
 8004f80:	358637bd 	.word	0x358637bd
 8004f84:	3aa00000 	.word	0x3aa00000
 8004f88:	3ecccccd 	.word	0x3ecccccd

08004f8c <Set_Motor>:

void Set_Motor(int motor_num, float speed)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004f98:	edd7 7a00 	vldr	s15, [r7]
 8004f9c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005070 <Set_Motor+0xe4>
 8004fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	dd01      	ble.n	8004fae <Set_Motor+0x22>
		speed = 100.0f;
 8004faa:	4b32      	ldr	r3, [pc, #200]	@ (8005074 <Set_Motor+0xe8>)
 8004fac:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004fae:	edd7 7a00 	vldr	s15, [r7]
 8004fb2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005078 <Set_Motor+0xec>
 8004fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fbe:	d501      	bpl.n	8004fc4 <Set_Motor+0x38>
		speed = -100.0f;
 8004fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800507c <Set_Motor+0xf0>)
 8004fc2:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t)((fabsf(speed) * 100) / 100);
 8004fc4:	edd7 7a00 	vldr	s15, [r7]
 8004fc8:	eef0 7ae7 	vabs.f32	s15, s15
 8004fcc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005070 <Set_Motor+0xe4>
 8004fd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fd4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005070 <Set_Motor+0xe4>
 8004fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe0:	ee17 3a90 	vmov	r3, s15
 8004fe4:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11d      	bne.n	8005028 <Set_Motor+0x9c>
	{
		if (speed > 0)
 8004fec:	edd7 7a00 	vldr	s15, [r7]
 8004ff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff8:	dd05      	ble.n	8005006 <Set_Motor+0x7a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	4820      	ldr	r0, [pc, #128]	@ (8005080 <Set_Motor+0xf4>)
 8005000:	f001 fb26 	bl	8006650 <HAL_GPIO_WritePin>
 8005004:	e00b      	b.n	800501e <Set_Motor+0x92>
		}
		else if (speed < 0)
 8005006:	edd7 7a00 	vldr	s15, [r7]
 800500a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800500e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005012:	d504      	bpl.n	800501e <Set_Motor+0x92>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8005014:	2201      	movs	r2, #1
 8005016:	2120      	movs	r1, #32
 8005018:	4819      	ldr	r0, [pc, #100]	@ (8005080 <Set_Motor+0xf4>)
 800501a:	f001 fb19 	bl	8006650 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 800501e:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <Set_Motor+0xf8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	63da      	str	r2, [r3, #60]	@ 0x3c
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8005026:	e01f      	b.n	8005068 <Set_Motor+0xdc>
	else if (motor_num == 1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d11c      	bne.n	8005068 <Set_Motor+0xdc>
		if (speed > 0)
 800502e:	edd7 7a00 	vldr	s15, [r7]
 8005032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	dd05      	ble.n	8005048 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	2140      	movs	r1, #64	@ 0x40
 8005040:	480f      	ldr	r0, [pc, #60]	@ (8005080 <Set_Motor+0xf4>)
 8005042:	f001 fb05 	bl	8006650 <HAL_GPIO_WritePin>
 8005046:	e00b      	b.n	8005060 <Set_Motor+0xd4>
		else if (speed < 0)
 8005048:	edd7 7a00 	vldr	s15, [r7]
 800504c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005054:	d504      	bpl.n	8005060 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8005056:	2201      	movs	r2, #1
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	4809      	ldr	r0, [pc, #36]	@ (8005080 <Set_Motor+0xf4>)
 800505c:	f001 faf8 	bl	8006650 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8005060:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <Set_Motor+0xf8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	42c80000 	.word	0x42c80000
 8005074:	42c80000 	.word	0x42c80000
 8005078:	c2c80000 	.word	0xc2c80000
 800507c:	c2c80000 	.word	0xc2c80000
 8005080:	48000800 	.word	0x48000800
 8005084:	200006a4 	.word	0x200006a4

08005088 <Set_Servo>:

void Set_Servo(int Pen_Pos)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <Set_Servo+0x2e>
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8005096:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <Set_Servo+0x48>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800509e:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 80050a0:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <Set_Servo+0x4c>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 80050a6:	f7ff fcbd 	bl	8004a24 <micros>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	490a      	ldr	r1, [pc, #40]	@ (80050d8 <Set_Servo+0x50>)
 80050b0:	e9c1 2300 	strd	r2, r3, [r1]
	else
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 80050b4:	e007      	b.n	80050c6 <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 80050b6:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <Set_Servo+0x48>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050be:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 80050c0:	4b04      	ldr	r3, [pc, #16]	@ (80050d4 <Set_Servo+0x4c>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000770 	.word	0x20000770
 80050d4:	20000bc8 	.word	0x20000bc8
 80050d8:	20000c38 	.word	0x20000c38

080050dc <Reset_R>:

void Reset_R()
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 80050e0:	4905      	ldr	r1, [pc, #20]	@ (80050f8 <Reset_R+0x1c>)
 80050e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000af0 	.word	0x20000af0

080050fc <Reset_P>:
void Reset_P()
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8005100:	4905      	ldr	r1, [pc, #20]	@ (8005118 <Reset_P+0x1c>)
 8005102:	4a06      	ldr	r2, [pc, #24]	@ (800511c <Reset_P+0x20>)
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000b30 	.word	0x20000b30
 800511c:	fffff99a 	.word	0xfffff99a

08005120 <Workspace_limit>:

void Workspace_limit()
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0)
 8005124:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <Workspace_limit+0xd8>)
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f9d9 	bl	80004e0 <__aeabi_f2d>
 800512e:	a32e      	add	r3, pc, #184	@ (adr r3, 80051e8 <Workspace_limit+0xc8>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb fc9e 	bl	8000a74 <__aeabi_dcmplt>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <Workspace_limit+0x36>
 800513e:	4b2f      	ldr	r3, [pc, #188]	@ (80051fc <Workspace_limit+0xdc>)
 8005140:	edd3 7a00 	vldr	s15, [r3]
 8005144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	dd03      	ble.n	8005156 <Workspace_limit+0x36>
	{
		R_PWM = 0;
 800514e:	4b2b      	ldr	r3, [pc, #172]	@ (80051fc <Workspace_limit+0xdc>)
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0)
 8005156:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <Workspace_limit+0xd8>)
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9c0 	bl	80004e0 <__aeabi_f2d>
 8005160:	a323      	add	r3, pc, #140	@ (adr r3, 80051f0 <Workspace_limit+0xd0>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fca3 	bl	8000ab0 <__aeabi_dcmpgt>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <Workspace_limit+0x68>
 8005170:	4b22      	ldr	r3, [pc, #136]	@ (80051fc <Workspace_limit+0xdc>)
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d503      	bpl.n	8005188 <Workspace_limit+0x68>
	{
		R_PWM = 0;
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <Workspace_limit+0xdc>)
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0)
 8005188:	4b1d      	ldr	r3, [pc, #116]	@ (8005200 <Workspace_limit+0xe0>)
 800518a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800518e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005204 <Workspace_limit+0xe4>
 8005192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519a:	dd0b      	ble.n	80051b4 <Workspace_limit+0x94>
 800519c:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <Workspace_limit+0xe8>)
 800519e:	edd3 7a00 	vldr	s15, [r3]
 80051a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	dd03      	ble.n	80051b4 <Workspace_limit+0x94>
	{
		P_PWM = 0;
 80051ac:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <Workspace_limit+0xe8>)
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0)
 80051b4:	4b12      	ldr	r3, [pc, #72]	@ (8005200 <Workspace_limit+0xe0>)
 80051b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80051ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80051be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	d400      	bmi.n	80051ca <Workspace_limit+0xaa>
	{
		P_PWM = 0;
	}
}
 80051c8:	e00c      	b.n	80051e4 <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0)
 80051ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <Workspace_limit+0xe8>)
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	d400      	bmi.n	80051dc <Workspace_limit+0xbc>
}
 80051da:	e003      	b.n	80051e4 <Workspace_limit+0xc4>
		P_PWM = 0;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <Workspace_limit+0xe8>)
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	1e8e6080 	.word	0x1e8e6080
 80051ec:	bffeb7bf 	.word	0xbffeb7bf
 80051f0:	bfb15b57 	.word	0xbfb15b57
 80051f4:	40143eec 	.word	0x40143eec
 80051f8:	20000af0 	.word	0x20000af0
 80051fc:	20000bbc 	.word	0x20000bbc
 8005200:	20000b30 	.word	0x20000b30
 8005204:	43988000 	.word	0x43988000
 8005208:	20000bc0 	.word	0x20000bc0

0800520c <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
				 float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8005220:	4b16      	ldr	r3, [pc, #88]	@ (800527c <Get_QRIdata+0x70>)
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 800522e:	4b13      	ldr	r3, [pc, #76]	@ (800527c <Get_QRIdata+0x70>)
 8005230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 800523c:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <Get_QRIdata+0x70>)
 800523e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 800524a:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <Get_QRIdata+0x74>)
 800524c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <Get_QRIdata+0x74>)
 800525a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <Get_QRIdata+0x74>)
 8005268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000b30 	.word	0x20000b30
 8005280:	20000af0 	.word	0x20000af0

08005284 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005288:	b672      	cpsid	i
}
 800528a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <Error_Handler+0x8>

08005290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005296:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <HAL_MspInit+0x44>)
 8005298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529a:	4a0e      	ldr	r2, [pc, #56]	@ (80052d4 <HAL_MspInit+0x44>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <HAL_MspInit+0x44>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <HAL_MspInit+0x44>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	4a08      	ldr	r2, [pc, #32]	@ (80052d4 <HAL_MspInit+0x44>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_MspInit+0x44>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80052c6:	f001 fa97 	bl	80067f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000

080052d8 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <HAL_TIM_IC_MspInit+0xe8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d130      	bne.n	800535c <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052fa:	4b32      	ldr	r3, [pc, #200]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 80052fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fe:	4a31      	ldr	r2, [pc, #196]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005304:	6613      	str	r3, [r2, #96]	@ 0x60
 8005306:	4b2f      	ldr	r3, [pc, #188]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005312:	4b2c      	ldr	r3, [pc, #176]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005316:	4a2b      	ldr	r2, [pc, #172]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005318:	f043 0304 	orr.w	r3, r3, #4
 800531c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800531e:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800532a:	2302      	movs	r3, #2
 800532c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532e:	2302      	movs	r3, #2
 8005330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005332:	2300      	movs	r3, #0
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005336:	2300      	movs	r3, #0
 8005338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800533a:	2302      	movs	r3, #2
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800533e:	f107 031c 	add.w	r3, r7, #28
 8005342:	4619      	mov	r1, r3
 8005344:	4820      	ldr	r0, [pc, #128]	@ (80053c8 <HAL_TIM_IC_MspInit+0xf0>)
 8005346:	f000 ffe9 	bl	800631c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	2019      	movs	r0, #25
 8005350:	f000 fc7d 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005354:	2019      	movs	r0, #25
 8005356:	f000 fc94 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800535a:	e02d      	b.n	80053b8 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005364:	d128      	bne.n	80053b8 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005366:	4b17      	ldr	r3, [pc, #92]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536a:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6593      	str	r3, [r2, #88]	@ 0x58
 8005372:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537e:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	4a10      	ldr	r2, [pc, #64]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800538a:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <HAL_TIM_IC_MspInit+0xec>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005396:	2301      	movs	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a2:	2300      	movs	r3, #0
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053a6:	2301      	movs	r3, #1
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053b4:	f000 ffb2 	bl	800631c <HAL_GPIO_Init>
}
 80053b8:	bf00      	nop
 80053ba:	3730      	adds	r7, #48	@ 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40021000 	.word	0x40021000
 80053c8:	48000800 	.word	0x48000800

080053cc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08c      	sub	sp, #48	@ 0x30
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d4:	f107 031c 	add.w	r3, r7, #28
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a37      	ldr	r2, [pc, #220]	@ (80054c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d130      	bne.n	8005450 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053ee:	4b37      	ldr	r3, [pc, #220]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f2:	4a36      	ldr	r2, [pc, #216]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	4a30      	ldr	r2, [pc, #192]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005412:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800541e:	2330      	movs	r3, #48	@ 0x30
 8005420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005422:	2302      	movs	r3, #2
 8005424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542a:	2300      	movs	r3, #0
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800542e:	2302      	movs	r3, #2
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005432:	f107 031c 	add.w	r3, r7, #28
 8005436:	4619      	mov	r1, r3
 8005438:	4825      	ldr	r0, [pc, #148]	@ (80054d0 <HAL_TIM_Encoder_MspInit+0x104>)
 800543a:	f000 ff6f 	bl	800631c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800543e:	2200      	movs	r2, #0
 8005440:	2100      	movs	r1, #0
 8005442:	201d      	movs	r0, #29
 8005444:	f000 fc03 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005448:	201d      	movs	r0, #29
 800544a:	f000 fc1a 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800544e:	e036      	b.n	80054be <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	@ (80054d4 <HAL_TIM_Encoder_MspInit+0x108>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d131      	bne.n	80054be <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800545a:	4b1c      	ldr	r3, [pc, #112]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545e:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	6593      	str	r3, [r2, #88]	@ 0x58
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	4b16      	ldr	r3, [pc, #88]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800547e:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <HAL_TIM_Encoder_MspInit+0x100>)
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800548a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800548e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005490:	2302      	movs	r3, #2
 8005492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005498:	2300      	movs	r3, #0
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800549c:	230a      	movs	r3, #10
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a0:	f107 031c 	add.w	r3, r7, #28
 80054a4:	4619      	mov	r1, r3
 80054a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054aa:	f000 ff37 	bl	800631c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2100      	movs	r1, #0
 80054b2:	201e      	movs	r0, #30
 80054b4:	f000 fbcb 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054b8:	201e      	movs	r0, #30
 80054ba:	f000 fbe2 	bl	8005c82 <HAL_NVIC_EnableIRQ>
}
 80054be:	bf00      	nop
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40021000 	.word	0x40021000
 80054d0:	48000400 	.word	0x48000400
 80054d4:	40000800 	.word	0x40000800

080054d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005598 <HAL_TIM_Base_MspInit+0xc0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d114      	bne.n	8005514 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80054ea:	4b2c      	ldr	r3, [pc, #176]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ee:	4a2b      	ldr	r2, [pc, #172]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f6:	4b29      	ldr	r3, [pc, #164]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	2032      	movs	r0, #50	@ 0x32
 8005508:	f000 fba1 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800550c:	2032      	movs	r0, #50	@ 0x32
 800550e:	f000 fbb8 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005512:	e03c      	b.n	800558e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <HAL_TIM_Base_MspInit+0xc8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800551e:	4b1f      	ldr	r3, [pc, #124]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005528:	6613      	str	r3, [r2, #96]	@ 0x60
 800552a:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 800552c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	693b      	ldr	r3, [r7, #16]
}
 8005536:	e02a      	b.n	800558e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	@ (80055a4 <HAL_TIM_Base_MspInit+0xcc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005542:	4b16      	ldr	r3, [pc, #88]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005546:	4a15      	ldr	r2, [pc, #84]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554c:	6613      	str	r3, [r2, #96]	@ 0x60
 800554e:	4b13      	ldr	r3, [pc, #76]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	e018      	b.n	800558e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a11      	ldr	r2, [pc, #68]	@ (80055a8 <HAL_TIM_Base_MspInit+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d113      	bne.n	800558e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005566:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556a:	4a0c      	ldr	r2, [pc, #48]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 800556c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005570:	6613      	str	r3, [r2, #96]	@ 0x60
 8005572:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <HAL_TIM_Base_MspInit+0xc4>)
 8005574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800557e:	2200      	movs	r2, #0
 8005580:	2100      	movs	r1, #0
 8005582:	2019      	movs	r0, #25
 8005584:	f000 fb63 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005588:	2019      	movs	r0, #25
 800558a:	f000 fb7a 	bl	8005c82 <HAL_NVIC_EnableIRQ>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40021000 	.word	0x40021000
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400

080055ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b4:	f107 0314 	add.w	r3, r7, #20
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a23      	ldr	r2, [pc, #140]	@ (8005658 <HAL_TIM_MspPostInit+0xac>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d11d      	bne.n	800560a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ce:	4b23      	ldr	r3, [pc, #140]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 80055d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d2:	4a22      	ldr	r2, [pc, #136]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 80055dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80055ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80055f8:	2304      	movs	r3, #4
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	4619      	mov	r1, r3
 8005602:	4817      	ldr	r0, [pc, #92]	@ (8005660 <HAL_TIM_MspPostInit+0xb4>)
 8005604:	f000 fe8a 	bl	800631c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005608:	e021      	b.n	800564e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_TIM_MspPostInit+0xb8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d11c      	bne.n	800564e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 8005616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005618:	4a10      	ldr	r2, [pc, #64]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <HAL_TIM_MspPostInit+0xb0>)
 8005622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800562c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005632:	2302      	movs	r3, #2
 8005634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563a:	2300      	movs	r3, #0
 800563c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800563e:	2301      	movs	r3, #1
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005642:	f107 0314 	add.w	r3, r7, #20
 8005646:	4619      	mov	r1, r3
 8005648:	4807      	ldr	r0, [pc, #28]	@ (8005668 <HAL_TIM_MspPostInit+0xbc>)
 800564a:	f000 fe67 	bl	800631c <HAL_GPIO_Init>
}
 800564e:	bf00      	nop
 8005650:	3728      	adds	r7, #40	@ 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40013400 	.word	0x40013400
 800565c:	40021000 	.word	0x40021000
 8005660:	48000800 	.word	0x48000800
 8005664:	40014000 	.word	0x40014000
 8005668:	48000400 	.word	0x48000400

0800566c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b09e      	sub	sp, #120	@ 0x78
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	2254      	movs	r2, #84	@ 0x54
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f006 fcc7 	bl	800c020 <memset>
  if(huart->Instance==USART2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4d      	ldr	r2, [pc, #308]	@ (80057cc <HAL_UART_MspInit+0x160>)
 8005698:	4293      	cmp	r3, r2
 800569a:	f040 8092 	bne.w	80057c2 <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800569e:	2302      	movs	r3, #2
 80056a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056a6:	f107 0310 	add.w	r3, r7, #16
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fde2 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80056b6:	f7ff fde5 	bl	8005284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ba:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	4a44      	ldr	r2, [pc, #272]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056c6:	4b42      	ldr	r3, [pc, #264]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d2:	4b3f      	ldr	r3, [pc, #252]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	4a3e      	ldr	r2, [pc, #248]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056de:	4b3c      	ldr	r3, [pc, #240]	@ (80057d0 <HAL_UART_MspInit+0x164>)
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056ea:	230c      	movs	r3, #12
 80056ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ee:	2302      	movs	r3, #2
 80056f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f6:	2300      	movs	r3, #0
 80056f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056fa:	2307      	movs	r3, #7
 80056fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005708:	f000 fe08 	bl	800631c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800570c:	4b31      	ldr	r3, [pc, #196]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 800570e:	4a32      	ldr	r2, [pc, #200]	@ (80057d8 <HAL_UART_MspInit+0x16c>)
 8005710:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005712:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005714:	221a      	movs	r2, #26
 8005716:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005718:	4b2e      	ldr	r3, [pc, #184]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 800571a:	2200      	movs	r2, #0
 800571c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800571e:	4b2d      	ldr	r3, [pc, #180]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005720:	2200      	movs	r2, #0
 8005722:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005724:	4b2b      	ldr	r3, [pc, #172]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005726:	2280      	movs	r2, #128	@ 0x80
 8005728:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800572a:	4b2a      	ldr	r3, [pc, #168]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005730:	4b28      	ldr	r3, [pc, #160]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005736:	4b27      	ldr	r3, [pc, #156]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005738:	2200      	movs	r2, #0
 800573a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800573c:	4b25      	ldr	r3, [pc, #148]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 800573e:	2200      	movs	r2, #0
 8005740:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005742:	4824      	ldr	r0, [pc, #144]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005744:	f000 fab8 	bl	8005cb8 <HAL_DMA_Init>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800574e:	f7ff fd99 	bl	8005284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800575a:	4a1e      	ldr	r2, [pc, #120]	@ (80057d4 <HAL_UART_MspInit+0x168>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005760:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005762:	4a1f      	ldr	r2, [pc, #124]	@ (80057e0 <HAL_UART_MspInit+0x174>)
 8005764:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005766:	4b1d      	ldr	r3, [pc, #116]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005768:	221b      	movs	r2, #27
 800576a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <HAL_UART_MspInit+0x170>)
 800576e:	2210      	movs	r2, #16
 8005770:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005772:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005774:	2200      	movs	r2, #0
 8005776:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005778:	4b18      	ldr	r3, [pc, #96]	@ (80057dc <HAL_UART_MspInit+0x170>)
 800577a:	2280      	movs	r2, #128	@ 0x80
 800577c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005780:	2200      	movs	r2, #0
 8005782:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005784:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800578a:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <HAL_UART_MspInit+0x170>)
 800578c:	2200      	movs	r2, #0
 800578e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005790:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005792:	2200      	movs	r2, #0
 8005794:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005796:	4811      	ldr	r0, [pc, #68]	@ (80057dc <HAL_UART_MspInit+0x170>)
 8005798:	f000 fa8e 	bl	8005cb8 <HAL_DMA_Init>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80057a2:	f7ff fd6f 	bl	8005284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a0c      	ldr	r2, [pc, #48]	@ (80057dc <HAL_UART_MspInit+0x170>)
 80057aa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80057ac:	4a0b      	ldr	r2, [pc, #44]	@ (80057dc <HAL_UART_MspInit+0x170>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	2026      	movs	r0, #38	@ 0x26
 80057b8:	f000 fa49 	bl	8005c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057bc:	2026      	movs	r0, #38	@ 0x26
 80057be:	f000 fa60 	bl	8005c82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80057c2:	bf00      	nop
 80057c4:	3778      	adds	r7, #120	@ 0x78
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40004400 	.word	0x40004400
 80057d0:	40021000 	.word	0x40021000
 80057d4:	200009d4 	.word	0x200009d4
 80057d8:	40020008 	.word	0x40020008
 80057dc:	20000a34 	.word	0x20000a34
 80057e0:	4002001c 	.word	0x4002001c

080057e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <NMI_Handler+0x4>

080057ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <HardFault_Handler+0x4>

080057f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <MemManage_Handler+0x4>

080057fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <BusFault_Handler+0x4>

08005804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <UsageFault_Handler+0x4>

0800580c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800583a:	f000 f90f 	bl	8005a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}

08005842 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005846:	2001      	movs	r0, #1
 8005848:	f000 ff1a 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}

08005850 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005854:	2004      	movs	r0, #4
 8005856:	f000 ff13 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}

0800585e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005862:	2008      	movs	r0, #8
 8005864:	f000 ff0c 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005868:	bf00      	nop
 800586a:	bd80      	pop	{r7, pc}

0800586c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005870:	4802      	ldr	r0, [pc, #8]	@ (800587c <DMA1_Channel1_IRQHandler+0x10>)
 8005872:	f000 fc04 	bl	800607e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200009d4 	.word	0x200009d4

08005880 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005884:	4802      	ldr	r0, [pc, #8]	@ (8005890 <DMA1_Channel2_IRQHandler+0x10>)
 8005886:	f000 fbfa 	bl	800607e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000a34 	.word	0x20000a34

08005894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005898:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800589c:	f000 fef0 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80058a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80058a4:	f000 feec 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}

080058ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058b0:	4803      	ldr	r0, [pc, #12]	@ (80058c0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80058b2:	f002 fd99 	bl	80083e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80058b6:	4803      	ldr	r0, [pc, #12]	@ (80058c4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80058b8:	f002 fd96 	bl	80083e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058bc:	bf00      	nop
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200002a8 	.word	0x200002a8
 80058c4:	2000083c 	.word	0x2000083c

080058c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058cc:	4802      	ldr	r0, [pc, #8]	@ (80058d8 <TIM3_IRQHandler+0x10>)
 80058ce:	f002 fd8b 	bl	80083e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000440 	.word	0x20000440

080058dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80058e0:	4802      	ldr	r0, [pc, #8]	@ (80058ec <TIM4_IRQHandler+0x10>)
 80058e2:	f002 fd81 	bl	80083e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	2000050c 	.word	0x2000050c

080058f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058f4:	4802      	ldr	r0, [pc, #8]	@ (8005900 <USART2_IRQHandler+0x10>)
 80058f6:	f004 fe33 	bl	800a560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058fa:	bf00      	nop
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000908 	.word	0x20000908

08005904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005908:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800590c:	f000 feb8 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005910:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005914:	f000 feb4 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005918:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800591c:	f000 feb0 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005920:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005924:	f000 feac 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}

0800592c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005930:	4802      	ldr	r0, [pc, #8]	@ (800593c <TIM5_IRQHandler+0x10>)
 8005932:	f002 fd59 	bl	80083e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200005d8 	.word	0x200005d8

08005940 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005944:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <SystemInit+0x20>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	4a05      	ldr	r2, [pc, #20]	@ (8005960 <SystemInit+0x20>)
 800594c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005964:	480d      	ldr	r0, [pc, #52]	@ (800599c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005966:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005968:	f7ff ffea 	bl	8005940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800596c:	480c      	ldr	r0, [pc, #48]	@ (80059a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800596e:	490d      	ldr	r1, [pc, #52]	@ (80059a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005970:	4a0d      	ldr	r2, [pc, #52]	@ (80059a8 <LoopForever+0xe>)
  movs r3, #0
 8005972:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005974:	e002      	b.n	800597c <LoopCopyDataInit>

08005976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800597a:	3304      	adds	r3, #4

0800597c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800597c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800597e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005980:	d3f9      	bcc.n	8005976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005982:	4a0a      	ldr	r2, [pc, #40]	@ (80059ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8005984:	4c0a      	ldr	r4, [pc, #40]	@ (80059b0 <LoopForever+0x16>)
  movs r3, #0
 8005986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005988:	e001      	b.n	800598e <LoopFillZerobss>

0800598a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800598a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800598c:	3204      	adds	r2, #4

0800598e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800598e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005990:	d3fb      	bcc.n	800598a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005992:	f006 fb53 	bl	800c03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005996:	f7fc f9f7 	bl	8001d88 <main>

0800599a <LoopForever>:

LoopForever:
    b LoopForever
 800599a:	e7fe      	b.n	800599a <LoopForever>
  ldr   r0, =_estack
 800599c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059a4:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80059a8:	0800d004 	.word	0x0800d004
  ldr r2, =_sbss
 80059ac:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80059b0:	200014b4 	.word	0x200014b4

080059b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059b4:	e7fe      	b.n	80059b4 <ADC1_2_IRQHandler>

080059b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059c0:	2003      	movs	r0, #3
 80059c2:	f000 f939 	bl	8005c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059c6:	2000      	movs	r0, #0
 80059c8:	f000 f80e 	bl	80059e8 <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	71fb      	strb	r3, [r7, #7]
 80059d6:	e001      	b.n	80059dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059d8:	f7ff fc5a 	bl	8005290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059dc:	79fb      	ldrb	r3, [r7, #7]

}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80059f4:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <HAL_InitTick+0x68>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d022      	beq.n	8005a42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80059fc:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <HAL_InitTick+0x6c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b13      	ldr	r3, [pc, #76]	@ (8005a50 <HAL_InitTick+0x68>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f944 	bl	8005c9e <HAL_SYSTICK_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10f      	bne.n	8005a3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d809      	bhi.n	8005a36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a22:	2200      	movs	r2, #0
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2a:	f000 f910 	bl	8005c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a58 <HAL_InitTick+0x70>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e007      	b.n	8005a46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e004      	b.n	8005a46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e001      	b.n	8005a46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000230 	.word	0x20000230
 8005a54:	20000228 	.word	0x20000228
 8005a58:	2000022c 	.word	0x2000022c

08005a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a60:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <HAL_IncTick+0x1c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_IncTick+0x20>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4413      	add	r3, r2
 8005a6a:	4a03      	ldr	r2, [pc, #12]	@ (8005a78 <HAL_IncTick+0x1c>)
 8005a6c:	6013      	str	r3, [r2, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20001378 	.word	0x20001378
 8005a7c:	20000230 	.word	0x20000230

08005a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  return uwTick;
 8005a84:	4b03      	ldr	r3, [pc, #12]	@ (8005a94 <HAL_GetTick+0x14>)
 8005a86:	681b      	ldr	r3, [r3, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20001378 	.word	0x20001378

08005a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <__NVIC_SetPriorityGrouping+0x44>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aca:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <__NVIC_SetPriorityGrouping+0x44>)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	60d3      	str	r3, [r2, #12]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	e000ed00 	.word	0xe000ed00

08005ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae4:	4b04      	ldr	r3, [pc, #16]	@ (8005af8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	f003 0307 	and.w	r3, r3, #7
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db0b      	blt.n	8005b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	f003 021f 	and.w	r2, r3, #31
 8005b14:	4907      	ldr	r1, [pc, #28]	@ (8005b34 <__NVIC_EnableIRQ+0x38>)
 8005b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	e000e100 	.word	0xe000e100

08005b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db0a      	blt.n	8005b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	490c      	ldr	r1, [pc, #48]	@ (8005b84 <__NVIC_SetPriority+0x4c>)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b60:	e00a      	b.n	8005b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4908      	ldr	r1, [pc, #32]	@ (8005b88 <__NVIC_SetPriority+0x50>)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	440b      	add	r3, r1
 8005b76:	761a      	strb	r2, [r3, #24]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000e100 	.word	0xe000e100
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	@ 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf28      	it	cs
 8005baa:	2304      	movcs	r3, #4
 8005bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d902      	bls.n	8005bbc <NVIC_EncodePriority+0x30>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3b03      	subs	r3, #3
 8005bba:	e000      	b.n	8005bbe <NVIC_EncodePriority+0x32>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	401a      	ands	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43d9      	mvns	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	4313      	orrs	r3, r2
         );
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3724      	adds	r7, #36	@ 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c04:	d301      	bcc.n	8005c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00f      	b.n	8005c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <SysTick_Config+0x40>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c12:	210f      	movs	r1, #15
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	f7ff ff8e 	bl	8005b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <SysTick_Config+0x40>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c22:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <SysTick_Config+0x40>)
 8005c24:	2207      	movs	r2, #7
 8005c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000e010 	.word	0xe000e010

08005c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff29 	bl	8005a98 <__NVIC_SetPriorityGrouping>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	4603      	mov	r3, r0
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c5c:	f7ff ff40 	bl	8005ae0 <__NVIC_GetPriorityGrouping>
 8005c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff90 	bl	8005b8c <NVIC_EncodePriority>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff ff5f 	bl	8005b38 <__NVIC_SetPriority>
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	4603      	mov	r3, r0
 8005c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff33 	bl	8005afc <__NVIC_EnableIRQ>
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ffa4 	bl	8005bf4 <SysTick_Config>
 8005cac:	4603      	mov	r3, r0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e08d      	b.n	8005de6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <HAL_DMA_Init+0x138>)
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d80f      	bhi.n	8005cf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b45      	ldr	r3, [pc, #276]	@ (8005df4 <HAL_DMA_Init+0x13c>)
 8005cde:	4413      	add	r3, r2
 8005ce0:	4a45      	ldr	r2, [pc, #276]	@ (8005df8 <HAL_DMA_Init+0x140>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	009a      	lsls	r2, r3, #2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a42      	ldr	r2, [pc, #264]	@ (8005dfc <HAL_DMA_Init+0x144>)
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cf4:	e00e      	b.n	8005d14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4b40      	ldr	r3, [pc, #256]	@ (8005e00 <HAL_DMA_Init+0x148>)
 8005cfe:	4413      	add	r3, r2
 8005d00:	4a3d      	ldr	r2, [pc, #244]	@ (8005df8 <HAL_DMA_Init+0x140>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	009a      	lsls	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a3c      	ldr	r2, [pc, #240]	@ (8005e04 <HAL_DMA_Init+0x14c>)
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa76 	bl	8006258 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d74:	d102      	bne.n	8005d7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d010      	beq.n	8005dbc <HAL_DMA_Init+0x104>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d80c      	bhi.n	8005dbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa96 	bl	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e008      	b.n	8005dce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40020407 	.word	0x40020407
 8005df4:	bffdfff8 	.word	0xbffdfff8
 8005df8:	cccccccd 	.word	0xcccccccd
 8005dfc:	40020000 	.word	0x40020000
 8005e00:	bffdfbf8 	.word	0xbffdfbf8
 8005e04:	40020400 	.word	0x40020400

08005e08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_DMA_Start_IT+0x20>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e066      	b.n	8005ef6 <HAL_DMA_Start_IT+0xee>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d155      	bne.n	8005ee8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f9bb 	bl	80061dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 020e 	orr.w	r2, r2, #14
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e00f      	b.n	8005ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 020a 	orr.w	r2, r2, #10
 8005e9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ebc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e005      	b.n	8005ef4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d005      	beq.n	8005f22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e037      	b.n	8005f92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 020e 	bic.w	r2, r2, #14
 8005f30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	f003 021f 	and.w	r2, r3, #31
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	2101      	movs	r1, #1
 8005f60:	fa01 f202 	lsl.w	r2, r1, r2
 8005f64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
 8005fe2:	e047      	b.n	8006074 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 020e 	bic.w	r2, r2, #14
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800600e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006018:	f003 021f 	and.w	r2, r3, #31
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f202 	lsl.w	r2, r1, r2
 8006026:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
    }
  }
  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	2204      	movs	r2, #4
 80060a0:	409a      	lsls	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d026      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x7a>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d021      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0204 	bic.w	r2, r2, #4
 80060d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f003 021f 	and.w	r2, r3, #31
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2104      	movs	r1, #4
 80060e0:	fa01 f202 	lsl.w	r2, r1, r2
 80060e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d071      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060f6:	e06c      	b.n	80061d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2202      	movs	r2, #2
 8006102:	409a      	lsls	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02e      	beq.n	800616a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d029      	beq.n	800616a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 020a 	bic.w	r2, r2, #10
 8006132:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006140:	f003 021f 	and.w	r2, r3, #31
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006148:	2102      	movs	r1, #2
 800614a:	fa01 f202 	lsl.w	r2, r1, r2
 800614e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d038      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006168:	e033      	b.n	80061d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2208      	movs	r2, #8
 8006174:	409a      	lsls	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02a      	beq.n	80061d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d025      	beq.n	80061d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 020e 	bic.w	r2, r2, #14
 8006196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619c:	f003 021f 	and.w	r2, r3, #31
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a4:	2101      	movs	r1, #1
 80061a6:	fa01 f202 	lsl.w	r2, r1, r2
 80061aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
}
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620a:	f003 021f 	and.w	r2, r3, #31
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	2101      	movs	r1, #1
 8006214:	fa01 f202 	lsl.w	r2, r1, r2
 8006218:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b10      	cmp	r3, #16
 8006228:	d108      	bne.n	800623c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800623a:	e007      	b.n	800624c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	4b16      	ldr	r3, [pc, #88]	@ (80062c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006268:	429a      	cmp	r2, r3
 800626a:	d802      	bhi.n	8006272 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800626c:	4b15      	ldr	r3, [pc, #84]	@ (80062c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e001      	b.n	8006276 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006272:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006274:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	3b08      	subs	r3, #8
 8006282:	4a12      	ldr	r2, [pc, #72]	@ (80062cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a0b      	ldr	r2, [pc, #44]	@ (80062d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80062a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2201      	movs	r2, #1
 80062ac:	409a      	lsls	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40020407 	.word	0x40020407
 80062c4:	40020800 	.word	0x40020800
 80062c8:	40020820 	.word	0x40020820
 80062cc:	cccccccd 	.word	0xcccccccd
 80062d0:	40020880 	.word	0x40020880

080062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	2201      	movs	r2, #1
 8006302:	409a      	lsls	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006308:	bf00      	nop
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	1000823f 	.word	0x1000823f
 8006318:	40020940 	.word	0x40020940

0800631c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800632a:	e15a      	b.n	80065e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	2101      	movs	r1, #1
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	fa01 f303 	lsl.w	r3, r1, r3
 8006338:	4013      	ands	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 814c 	beq.w	80065dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	2b01      	cmp	r3, #1
 800634e:	d005      	beq.n	800635c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006358:	2b02      	cmp	r3, #2
 800635a:	d130      	bne.n	80063be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	2203      	movs	r2, #3
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4013      	ands	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006392:	2201      	movs	r2, #1
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4013      	ands	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	091b      	lsrs	r3, r3, #4
 80063a8:	f003 0201 	and.w	r2, r3, #1
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d017      	beq.n	80063fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	2203      	movs	r2, #3
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4013      	ands	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d123      	bne.n	800644e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	08da      	lsrs	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3208      	adds	r2, #8
 800640e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	220f      	movs	r2, #15
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	08da      	lsrs	r2, r3, #3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3208      	adds	r2, #8
 8006448:	6939      	ldr	r1, [r7, #16]
 800644a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	2203      	movs	r2, #3
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43db      	mvns	r3, r3
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 0203 	and.w	r2, r3, #3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80a6 	beq.w	80065dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006490:	4b5b      	ldr	r3, [pc, #364]	@ (8006600 <HAL_GPIO_Init+0x2e4>)
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	4a5a      	ldr	r2, [pc, #360]	@ (8006600 <HAL_GPIO_Init+0x2e4>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	6613      	str	r3, [r2, #96]	@ 0x60
 800649c:	4b58      	ldr	r3, [pc, #352]	@ (8006600 <HAL_GPIO_Init+0x2e4>)
 800649e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064a8:	4a56      	ldr	r2, [pc, #344]	@ (8006604 <HAL_GPIO_Init+0x2e8>)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	3302      	adds	r3, #2
 80064b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	220f      	movs	r2, #15
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	43db      	mvns	r3, r3
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4013      	ands	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80064d2:	d01f      	beq.n	8006514 <HAL_GPIO_Init+0x1f8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006608 <HAL_GPIO_Init+0x2ec>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d019      	beq.n	8006510 <HAL_GPIO_Init+0x1f4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a4b      	ldr	r2, [pc, #300]	@ (800660c <HAL_GPIO_Init+0x2f0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <HAL_GPIO_Init+0x1f0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006610 <HAL_GPIO_Init+0x2f4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00d      	beq.n	8006508 <HAL_GPIO_Init+0x1ec>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a49      	ldr	r2, [pc, #292]	@ (8006614 <HAL_GPIO_Init+0x2f8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <HAL_GPIO_Init+0x1e8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a48      	ldr	r2, [pc, #288]	@ (8006618 <HAL_GPIO_Init+0x2fc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d101      	bne.n	8006500 <HAL_GPIO_Init+0x1e4>
 80064fc:	2305      	movs	r3, #5
 80064fe:	e00a      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 8006500:	2306      	movs	r3, #6
 8006502:	e008      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 8006504:	2304      	movs	r3, #4
 8006506:	e006      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 8006508:	2303      	movs	r3, #3
 800650a:	e004      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 800650c:	2302      	movs	r3, #2
 800650e:	e002      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <HAL_GPIO_Init+0x1fa>
 8006514:	2300      	movs	r3, #0
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	f002 0203 	and.w	r2, r2, #3
 800651c:	0092      	lsls	r2, r2, #2
 800651e:	4093      	lsls	r3, r2
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006526:	4937      	ldr	r1, [pc, #220]	@ (8006604 <HAL_GPIO_Init+0x2e8>)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	3302      	adds	r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006534:	4b39      	ldr	r3, [pc, #228]	@ (800661c <HAL_GPIO_Init+0x300>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	43db      	mvns	r3, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4013      	ands	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006558:	4a30      	ldr	r2, [pc, #192]	@ (800661c <HAL_GPIO_Init+0x300>)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800655e:	4b2f      	ldr	r3, [pc, #188]	@ (800661c <HAL_GPIO_Init+0x300>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	43db      	mvns	r3, r3
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4013      	ands	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006582:	4a26      	ldr	r2, [pc, #152]	@ (800661c <HAL_GPIO_Init+0x300>)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006588:	4b24      	ldr	r3, [pc, #144]	@ (800661c <HAL_GPIO_Init+0x300>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	43db      	mvns	r3, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4013      	ands	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065ac:	4a1b      	ldr	r2, [pc, #108]	@ (800661c <HAL_GPIO_Init+0x300>)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80065b2:	4b1a      	ldr	r3, [pc, #104]	@ (800661c <HAL_GPIO_Init+0x300>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065d6:	4a11      	ldr	r2, [pc, #68]	@ (800661c <HAL_GPIO_Init+0x300>)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f47f ae9d 	bne.w	800632c <HAL_GPIO_Init+0x10>
  }
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40021000 	.word	0x40021000
 8006604:	40010000 	.word	0x40010000
 8006608:	48000400 	.word	0x48000400
 800660c:	48000800 	.word	0x48000800
 8006610:	48000c00 	.word	0x48000c00
 8006614:	48001000 	.word	0x48001000
 8006618:	48001400 	.word	0x48001400
 800661c:	40010400 	.word	0x40010400

08006620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	887b      	ldrh	r3, [r7, #2]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e001      	b.n	8006642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	807b      	strh	r3, [r7, #2]
 800665c:	4613      	mov	r3, r2
 800665e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006660:	787b      	ldrb	r3, [r7, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800666c:	e002      	b.n	8006674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800666e:	887a      	ldrh	r2, [r7, #2]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800668a:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006696:	4a05      	ldr	r2, [pc, #20]	@ (80066ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe f8e2 	bl	8004868 <HAL_GPIO_EXTI_Callback>
  }
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40010400 	.word	0x40010400

080066b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d141      	bne.n	8006742 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066be:	4b4b      	ldr	r3, [pc, #300]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ca:	d131      	bne.n	8006730 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066cc:	4b47      	ldr	r3, [pc, #284]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	4a46      	ldr	r2, [pc, #280]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066dc:	4b43      	ldr	r3, [pc, #268]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066e4:	4a41      	ldr	r2, [pc, #260]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066ec:	4b40      	ldr	r3, [pc, #256]	@ (80067f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2232      	movs	r2, #50	@ 0x32
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	4a3f      	ldr	r2, [pc, #252]	@ (80067f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	0c9b      	lsrs	r3, r3, #18
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006702:	e002      	b.n	800670a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b01      	subs	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800670a:	4b38      	ldr	r3, [pc, #224]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006716:	d102      	bne.n	800671e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f2      	bne.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800671e:	4b33      	ldr	r3, [pc, #204]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800672a:	d158      	bne.n	80067de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e057      	b.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006730:	4b2e      	ldr	r3, [pc, #184]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006736:	4a2d      	ldr	r2, [pc, #180]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800673c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006740:	e04d      	b.n	80067de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006748:	d141      	bne.n	80067ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800674a:	4b28      	ldr	r3, [pc, #160]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006756:	d131      	bne.n	80067bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006758:	4b24      	ldr	r3, [pc, #144]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675e:	4a23      	ldr	r2, [pc, #140]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006768:	4b20      	ldr	r3, [pc, #128]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006770:	4a1e      	ldr	r2, [pc, #120]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006778:	4b1d      	ldr	r3, [pc, #116]	@ (80067f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2232      	movs	r2, #50	@ 0x32
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	4a1c      	ldr	r2, [pc, #112]	@ (80067f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	0c9b      	lsrs	r3, r3, #18
 800678a:	3301      	adds	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800678e:	e002      	b.n	8006796 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b01      	subs	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006796:	4b15      	ldr	r3, [pc, #84]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a2:	d102      	bne.n	80067aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f2      	bne.n	8006790 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067aa:	4b10      	ldr	r3, [pc, #64]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b6:	d112      	bne.n	80067de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e011      	b.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067bc:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c2:	4a0a      	ldr	r2, [pc, #40]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067cc:	e007      	b.n	80067de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067ce:	4b07      	ldr	r3, [pc, #28]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067d6:	4a05      	ldr	r2, [pc, #20]	@ (80067ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40007000 	.word	0x40007000
 80067f0:	20000228 	.word	0x20000228
 80067f4:	431bde83 	.word	0x431bde83

080067f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067fc:	4b05      	ldr	r3, [pc, #20]	@ (8006814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4a04      	ldr	r2, [pc, #16]	@ (8006814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006806:	6093      	str	r3, [r2, #8]
}
 8006808:	bf00      	nop
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40007000 	.word	0x40007000

08006818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e2fe      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d075      	beq.n	8006922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006836:	4b97      	ldr	r3, [pc, #604]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006840:	4b94      	ldr	r3, [pc, #592]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d102      	bne.n	8006856 <HAL_RCC_OscConfig+0x3e>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d002      	beq.n	800685c <HAL_RCC_OscConfig+0x44>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d10b      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	4b8d      	ldr	r3, [pc, #564]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05b      	beq.n	8006920 <HAL_RCC_OscConfig+0x108>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d157      	bne.n	8006920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e2d9      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800687c:	d106      	bne.n	800688c <HAL_RCC_OscConfig+0x74>
 800687e:	4b85      	ldr	r3, [pc, #532]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a84      	ldr	r2, [pc, #528]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e01d      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x98>
 8006896:	4b7f      	ldr	r3, [pc, #508]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800689c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 80068b0:	4b78      	ldr	r3, [pc, #480]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a77      	ldr	r2, [pc, #476]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b75      	ldr	r3, [pc, #468]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a74      	ldr	r2, [pc, #464]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7ff f8d6 	bl	8005a80 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7ff f8d2 	bl	8005a80 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	@ 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e29e      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0xc0>
 80068f6:	e014      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7ff f8c2 	bl	8005a80 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006900:	f7ff f8be 	bl	8005a80 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	@ 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e28a      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006912:	4b60      	ldr	r3, [pc, #384]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0xe8>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d075      	beq.n	8006a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800692e:	4b59      	ldr	r3, [pc, #356]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006938:	4b56      	ldr	r3, [pc, #344]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b0c      	cmp	r3, #12
 8006946:	d102      	bne.n	800694e <HAL_RCC_OscConfig+0x136>
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d002      	beq.n	8006954 <HAL_RCC_OscConfig+0x13c>
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b04      	cmp	r3, #4
 8006952:	d11f      	bne.n	8006994 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006954:	4b4f      	ldr	r3, [pc, #316]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_RCC_OscConfig+0x154>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e25d      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696c:	4b49      	ldr	r3, [pc, #292]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	4946      	ldr	r1, [pc, #280]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006980:	4b45      	ldr	r3, [pc, #276]	@ (8006a98 <HAL_RCC_OscConfig+0x280>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff f82f 	bl	80059e8 <HAL_InitTick>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d043      	beq.n	8006a18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e249      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d023      	beq.n	80069e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800699c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7ff f86a 	bl	8005a80 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b0:	f7ff f866 	bl	8005a80 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e232      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069c2:	4b34      	ldr	r3, [pc, #208]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	492d      	ldr	r1, [pc, #180]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	604b      	str	r3, [r1, #4]
 80069e2:	e01a      	b.n	8006a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 80069ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f0:	f7ff f846 	bl	8005a80 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f8:	f7ff f842 	bl	8005a80 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e20e      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a0a:	4b22      	ldr	r3, [pc, #136]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x1e0>
 8006a16:	e000      	b.n	8006a1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d041      	beq.n	8006aaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01c      	beq.n	8006a68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a2e:	4b19      	ldr	r3, [pc, #100]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a34:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3e:	f7ff f81f 	bl	8005a80 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a46:	f7ff f81b 	bl	8005a80 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e1e7      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a58:	4b0e      	ldr	r3, [pc, #56]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ef      	beq.n	8006a46 <HAL_RCC_OscConfig+0x22e>
 8006a66:	e020      	b.n	8006aaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a6e:	4a09      	ldr	r2, [pc, #36]	@ (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a78:	f7ff f802 	bl	8005a80 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a7e:	e00d      	b.n	8006a9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a80:	f7fe fffe 	bl	8005a80 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d906      	bls.n	8006a9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e1ca      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
 8006a92:	bf00      	nop
 8006a94:	40021000 	.word	0x40021000
 8006a98:	2000022c 	.word	0x2000022c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ea      	bne.n	8006a80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006abc:	4b84      	ldr	r3, [pc, #528]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_RCC_OscConfig+0x2b4>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x2b6>
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ade:	4b7c      	ldr	r3, [pc, #496]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006aea:	2301      	movs	r3, #1
 8006aec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aee:	4b79      	ldr	r3, [pc, #484]	@ (8006cd4 <HAL_RCC_OscConfig+0x4bc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d118      	bne.n	8006b2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006afa:	4b76      	ldr	r3, [pc, #472]	@ (8006cd4 <HAL_RCC_OscConfig+0x4bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a75      	ldr	r2, [pc, #468]	@ (8006cd4 <HAL_RCC_OscConfig+0x4bc>)
 8006b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b06:	f7fe ffbb 	bl	8005a80 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0e:	f7fe ffb7 	bl	8005a80 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e183      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b20:	4b6c      	ldr	r3, [pc, #432]	@ (8006cd4 <HAL_RCC_OscConfig+0x4bc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d108      	bne.n	8006b46 <HAL_RCC_OscConfig+0x32e>
 8006b34:	4b66      	ldr	r3, [pc, #408]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3a:	4a65      	ldr	r2, [pc, #404]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b44:	e024      	b.n	8006b90 <HAL_RCC_OscConfig+0x378>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d110      	bne.n	8006b70 <HAL_RCC_OscConfig+0x358>
 8006b4e:	4b60      	ldr	r3, [pc, #384]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	4a5e      	ldr	r2, [pc, #376]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b56:	f043 0304 	orr.w	r3, r3, #4
 8006b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b64:	4a5a      	ldr	r2, [pc, #360]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b6e:	e00f      	b.n	8006b90 <HAL_RCC_OscConfig+0x378>
 8006b70:	4b57      	ldr	r3, [pc, #348]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b76:	4a56      	ldr	r2, [pc, #344]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b80:	4b53      	ldr	r3, [pc, #332]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b86:	4a52      	ldr	r2, [pc, #328]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006b88:	f023 0304 	bic.w	r3, r3, #4
 8006b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b98:	f7fe ff72 	bl	8005a80 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b9e:	e00a      	b.n	8006bb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba0:	f7fe ff6e 	bl	8005a80 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e138      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb6:	4b46      	ldr	r3, [pc, #280]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0ed      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x388>
 8006bc4:	e015      	b.n	8006bf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc6:	f7fe ff5b 	bl	8005a80 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bcc:	e00a      	b.n	8006be4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bce:	f7fe ff57 	bl	8005a80 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e121      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006be4:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1ed      	bne.n	8006bce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bf2:	7ffb      	ldrb	r3, [r7, #31]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d105      	bne.n	8006c04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf8:	4b35      	ldr	r3, [pc, #212]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfc:	4a34      	ldr	r2, [pc, #208]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03c      	beq.n	8006c8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01c      	beq.n	8006c52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c18:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fe ff2a 	bl	8005a80 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c30:	f7fe ff26 	bl	8005a80 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e0f2      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c42:	4b23      	ldr	r3, [pc, #140]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ef      	beq.n	8006c30 <HAL_RCC_OscConfig+0x418>
 8006c50:	e01b      	b.n	8006c8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c52:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c58:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c62:	f7fe ff0d 	bl	8005a80 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c6a:	f7fe ff09 	bl	8005a80 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0d5      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c7c:	4b14      	ldr	r3, [pc, #80]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1ef      	bne.n	8006c6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80c9 	beq.w	8006e26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c94:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 030c 	and.w	r3, r3, #12
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	f000 8083 	beq.w	8006da8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d15e      	bne.n	8006d68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006caa:	4b09      	ldr	r3, [pc, #36]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a08      	ldr	r2, [pc, #32]	@ (8006cd0 <HAL_RCC_OscConfig+0x4b8>)
 8006cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb6:	f7fe fee3 	bl	8005a80 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cbc:	e00c      	b.n	8006cd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cbe:	f7fe fedf 	bl	8005a80 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d905      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0ab      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd8:	4b55      	ldr	r3, [pc, #340]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1ec      	bne.n	8006cbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce4:	4b52      	ldr	r3, [pc, #328]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	4b52      	ldr	r3, [pc, #328]	@ (8006e34 <HAL_RCC_OscConfig+0x61c>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6a11      	ldr	r1, [r2, #32]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cf4:	3a01      	subs	r2, #1
 8006cf6:	0112      	lsls	r2, r2, #4
 8006cf8:	4311      	orrs	r1, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006cfe:	0212      	lsls	r2, r2, #8
 8006d00:	4311      	orrs	r1, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d06:	0852      	lsrs	r2, r2, #1
 8006d08:	3a01      	subs	r2, #1
 8006d0a:	0552      	lsls	r2, r2, #21
 8006d0c:	4311      	orrs	r1, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d12:	0852      	lsrs	r2, r2, #1
 8006d14:	3a01      	subs	r2, #1
 8006d16:	0652      	lsls	r2, r2, #25
 8006d18:	4311      	orrs	r1, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d1e:	06d2      	lsls	r2, r2, #27
 8006d20:	430a      	orrs	r2, r1
 8006d22:	4943      	ldr	r1, [pc, #268]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d28:	4b41      	ldr	r3, [pc, #260]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a40      	ldr	r2, [pc, #256]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d34:	4b3e      	ldr	r3, [pc, #248]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4a3d      	ldr	r2, [pc, #244]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fe fe9e 	bl	8005a80 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d48:	f7fe fe9a 	bl	8005a80 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e066      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5a:	4b35      	ldr	r3, [pc, #212]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0x530>
 8006d66:	e05e      	b.n	8006e26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d68:	4b31      	ldr	r3, [pc, #196]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a30      	ldr	r2, [pc, #192]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fe fe84 	bl	8005a80 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fe fe80 	bl	8005a80 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e04c      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d8e:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d9a:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	4924      	ldr	r1, [pc, #144]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <HAL_RCC_OscConfig+0x620>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	60cb      	str	r3, [r1, #12]
 8006da6:	e03e      	b.n	8006e26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e039      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006db4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <HAL_RCC_OscConfig+0x618>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f003 0203 	and.w	r2, r3, #3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d12c      	bne.n	8006e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d123      	bne.n	8006e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d11b      	bne.n	8006e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d113      	bne.n	8006e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	3b01      	subs	r3, #1
 8006e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d001      	beq.n	8006e26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40021000 	.word	0x40021000
 8006e34:	019f800c 	.word	0x019f800c
 8006e38:	feeefffc 	.word	0xfeeefffc

08006e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e11e      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e54:	4b91      	ldr	r3, [pc, #580]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d910      	bls.n	8006e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b8e      	ldr	r3, [pc, #568]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f023 020f 	bic.w	r2, r3, #15
 8006e6a:	498c      	ldr	r1, [pc, #560]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e72:	4b8a      	ldr	r3, [pc, #552]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e106      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d073      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d129      	bne.n	8006eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e98:	4b81      	ldr	r3, [pc, #516]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0f4      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ea8:	f000 f99e 	bl	80071e8 <RCC_GetSysClockFreqFromPLLSource>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4a7c      	ldr	r2, [pc, #496]	@ (80070a4 <HAL_RCC_ClockConfig+0x268>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d93f      	bls.n	8006f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d033      	beq.n	8006f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d12f      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ed6:	4b72      	ldr	r3, [pc, #456]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ede:	4a70      	ldr	r2, [pc, #448]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ee6:	2380      	movs	r3, #128	@ 0x80
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e024      	b.n	8006f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0c6      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f04:	4b66      	ldr	r3, [pc, #408]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0be      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f14:	f000 f8ce 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 8006f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4a61      	ldr	r2, [pc, #388]	@ (80070a4 <HAL_RCC_ClockConfig+0x268>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d909      	bls.n	8006f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f22:	4b5f      	ldr	r3, [pc, #380]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f32:	2380      	movs	r3, #128	@ 0x80
 8006f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f36:	4b5a      	ldr	r3, [pc, #360]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 0203 	bic.w	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4957      	ldr	r1, [pc, #348]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f48:	f7fe fd9a 	bl	8005a80 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4e:	e00a      	b.n	8006f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f50:	f7fe fd96 	bl	8005a80 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e095      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f66:	4b4e      	ldr	r3, [pc, #312]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 020c 	and.w	r2, r3, #12
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d1eb      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d023      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f90:	4b43      	ldr	r3, [pc, #268]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4a42      	ldr	r2, [pc, #264]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006fb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b39      	ldr	r3, [pc, #228]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4936      	ldr	r1, [pc, #216]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
 8006fca:	e008      	b.n	8006fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b80      	cmp	r3, #128	@ 0x80
 8006fd0:	d105      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006fd2:	4b33      	ldr	r3, [pc, #204]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8006fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fde:	4b2f      	ldr	r3, [pc, #188]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d21d      	bcs.n	8007028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fec:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f023 020f 	bic.w	r2, r3, #15
 8006ff4:	4929      	ldr	r1, [pc, #164]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ffc:	f7fe fd40 	bl	8005a80 <HAL_GetTick>
 8007000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	e00a      	b.n	800701a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007004:	f7fe fd3c 	bl	8005a80 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e03b      	b.n	8007092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800701a:	4b20      	ldr	r3, [pc, #128]	@ (800709c <HAL_RCC_ClockConfig+0x260>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d1ed      	bne.n	8007004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007034:	4b1a      	ldr	r3, [pc, #104]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4917      	ldr	r1, [pc, #92]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007052:	4b13      	ldr	r3, [pc, #76]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	490f      	ldr	r1, [pc, #60]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007066:	f000 f825 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 800706a:	4602      	mov	r2, r0
 800706c:	4b0c      	ldr	r3, [pc, #48]	@ (80070a0 <HAL_RCC_ClockConfig+0x264>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	490c      	ldr	r1, [pc, #48]	@ (80070a8 <HAL_RCC_ClockConfig+0x26c>)
 8007078:	5ccb      	ldrb	r3, [r1, r3]
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	fa22 f303 	lsr.w	r3, r2, r3
 8007082:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <HAL_RCC_ClockConfig+0x270>)
 8007084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007086:	4b0a      	ldr	r3, [pc, #40]	@ (80070b0 <HAL_RCC_ClockConfig+0x274>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fcac 	bl	80059e8 <HAL_InitTick>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40022000 	.word	0x40022000
 80070a0:	40021000 	.word	0x40021000
 80070a4:	04c4b400 	.word	0x04c4b400
 80070a8:	0800cbe4 	.word	0x0800cbe4
 80070ac:	20000228 	.word	0x20000228
 80070b0:	2000022c 	.word	0x2000022c

080070b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80070ba:	4b2c      	ldr	r3, [pc, #176]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d102      	bne.n	80070cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	e047      	b.n	800715c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80070cc:	4b27      	ldr	r3, [pc, #156]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 030c 	and.w	r3, r3, #12
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d102      	bne.n	80070de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070d8:	4b26      	ldr	r3, [pc, #152]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	e03e      	b.n	800715c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80070de:	4b23      	ldr	r3, [pc, #140]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b0c      	cmp	r3, #12
 80070e8:	d136      	bne.n	8007158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ea:	4b20      	ldr	r3, [pc, #128]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070f4:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	3301      	adds	r3, #1
 8007100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d10c      	bne.n	8007122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007108:	4a1a      	ldr	r2, [pc, #104]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	4a16      	ldr	r2, [pc, #88]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007112:	68d2      	ldr	r2, [r2, #12]
 8007114:	0a12      	lsrs	r2, r2, #8
 8007116:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800711a:	fb02 f303 	mul.w	r3, r2, r3
 800711e:	617b      	str	r3, [r7, #20]
      break;
 8007120:	e00c      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007122:	4a13      	ldr	r2, [pc, #76]	@ (8007170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	4a10      	ldr	r2, [pc, #64]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 800712c:	68d2      	ldr	r2, [r2, #12]
 800712e:	0a12      	lsrs	r2, r2, #8
 8007130:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	617b      	str	r3, [r7, #20]
      break;
 800713a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800713c:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <HAL_RCC_GetSysClockFreq+0xb8>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	0e5b      	lsrs	r3, r3, #25
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	3301      	adds	r3, #1
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	e001      	b.n	800715c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800715c:	693b      	ldr	r3, [r7, #16]
}
 800715e:	4618      	mov	r0, r3
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40021000 	.word	0x40021000
 8007170:	00f42400 	.word	0x00f42400
 8007174:	016e3600 	.word	0x016e3600

08007178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800717c:	4b03      	ldr	r3, [pc, #12]	@ (800718c <HAL_RCC_GetHCLKFreq+0x14>)
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000228 	.word	0x20000228

08007190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007194:	f7ff fff0 	bl	8007178 <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4904      	ldr	r1, [pc, #16]	@ (80071b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40021000 	.word	0x40021000
 80071b8:	0800cbf4 	.word	0x0800cbf4

080071bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80071c0:	f7ff ffda 	bl	8007178 <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b06      	ldr	r3, [pc, #24]	@ (80071e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0adb      	lsrs	r3, r3, #11
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4904      	ldr	r1, [pc, #16]	@ (80071e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071dc:	4618      	mov	r0, r3
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40021000 	.word	0x40021000
 80071e4:	0800cbf4 	.word	0x0800cbf4

080071e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d10c      	bne.n	8007226 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800720c:	4a17      	ldr	r2, [pc, #92]	@ (800726c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	4a14      	ldr	r2, [pc, #80]	@ (8007268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007216:	68d2      	ldr	r2, [r2, #12]
 8007218:	0a12      	lsrs	r2, r2, #8
 800721a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800721e:	fb02 f303 	mul.w	r3, r2, r3
 8007222:	617b      	str	r3, [r7, #20]
    break;
 8007224:	e00c      	b.n	8007240 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007226:	4a12      	ldr	r2, [pc, #72]	@ (8007270 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	4a0e      	ldr	r2, [pc, #56]	@ (8007268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007230:	68d2      	ldr	r2, [r2, #12]
 8007232:	0a12      	lsrs	r2, r2, #8
 8007234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007238:	fb02 f303 	mul.w	r3, r2, r3
 800723c:	617b      	str	r3, [r7, #20]
    break;
 800723e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	0e5b      	lsrs	r3, r3, #25
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	3301      	adds	r3, #1
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800725a:	687b      	ldr	r3, [r7, #4]
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40021000 	.word	0x40021000
 800726c:	016e3600 	.word	0x016e3600
 8007270:	00f42400 	.word	0x00f42400

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800727c:	2300      	movs	r3, #0
 800727e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007280:	2300      	movs	r3, #0
 8007282:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8098 	beq.w	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007292:	2300      	movs	r3, #0
 8007294:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007296:	4b43      	ldr	r3, [pc, #268]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a2:	4b40      	ldr	r3, [pc, #256]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a6:	4a3f      	ldr	r2, [pc, #252]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80072ae:	4b3d      	ldr	r3, [pc, #244]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ba:	2301      	movs	r3, #1
 80072bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072be:	4b3a      	ldr	r3, [pc, #232]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a39      	ldr	r2, [pc, #228]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ca:	f7fe fbd9 	bl	8005a80 <HAL_GetTick>
 80072ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d0:	e009      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fe fbd5 	bl	8005a80 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d902      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	74fb      	strb	r3, [r7, #19]
        break;
 80072e4:	e005      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e6:	4b30      	ldr	r3, [pc, #192]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d159      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072f8:	4b2a      	ldr	r3, [pc, #168]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007302:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01e      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	429a      	cmp	r2, r3
 8007312:	d019      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007314:	4b23      	ldr	r3, [pc, #140]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007320:	4b20      	ldr	r3, [pc, #128]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007326:	4a1f      	ldr	r2, [pc, #124]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800732c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007330:	4b1c      	ldr	r3, [pc, #112]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007336:	4a1b      	ldr	r2, [pc, #108]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800733c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007340:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007352:	f7fe fb95 	bl	8005a80 <HAL_GetTick>
 8007356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007358:	e00b      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735a:	f7fe fb91 	bl	8005a80 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007368:	4293      	cmp	r3, r2
 800736a:	d902      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	74fb      	strb	r3, [r7, #19]
            break;
 8007370:	e006      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007372:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ec      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007380:	7cfb      	ldrb	r3, [r7, #19]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007386:	4b07      	ldr	r3, [pc, #28]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007394:	4903      	ldr	r1, [pc, #12]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800739e:	7cfb      	ldrb	r3, [r7, #19]
 80073a0:	74bb      	strb	r3, [r7, #18]
 80073a2:	e005      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	7cfb      	ldrb	r3, [r7, #19]
 80073ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073b0:	7c7b      	ldrb	r3, [r7, #17]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d105      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b6:	4ba7      	ldr	r3, [pc, #668]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ba:	4aa6      	ldr	r2, [pc, #664]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ce:	4ba1      	ldr	r3, [pc, #644]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f023 0203 	bic.w	r2, r3, #3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	499d      	ldr	r1, [pc, #628]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073f0:	4b98      	ldr	r3, [pc, #608]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f023 020c 	bic.w	r2, r3, #12
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4995      	ldr	r1, [pc, #596]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007412:	4b90      	ldr	r3, [pc, #576]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	498c      	ldr	r1, [pc, #560]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007434:	4b87      	ldr	r3, [pc, #540]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	4984      	ldr	r1, [pc, #528]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007456:	4b7f      	ldr	r3, [pc, #508]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	497b      	ldr	r1, [pc, #492]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007478:	4b76      	ldr	r3, [pc, #472]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	4973      	ldr	r1, [pc, #460]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800749a:	4b6e      	ldr	r3, [pc, #440]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	496a      	ldr	r1, [pc, #424]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074bc:	4b65      	ldr	r3, [pc, #404]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	4962      	ldr	r1, [pc, #392]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074de:	4b5d      	ldr	r3, [pc, #372]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ec:	4959      	ldr	r1, [pc, #356]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007500:	4b54      	ldr	r3, [pc, #336]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007506:	f023 0203 	bic.w	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	4951      	ldr	r1, [pc, #324]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007522:	4b4c      	ldr	r3, [pc, #304]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	4948      	ldr	r1, [pc, #288]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007540:	2b00      	cmp	r3, #0
 8007542:	d015      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007544:	4b43      	ldr	r3, [pc, #268]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	4940      	ldr	r1, [pc, #256]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007562:	d105      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007564:	4b3b      	ldr	r3, [pc, #236]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4a3a      	ldr	r2, [pc, #232]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800756e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007578:	2b00      	cmp	r3, #0
 800757a:	d015      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800757c:	4b35      	ldr	r3, [pc, #212]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800758a:	4932      	ldr	r1, [pc, #200]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759a:	d105      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800759c:	4b2d      	ldr	r3, [pc, #180]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d015      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075b4:	4b27      	ldr	r3, [pc, #156]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	4924      	ldr	r1, [pc, #144]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075d2:	d105      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075ec:	4b19      	ldr	r3, [pc, #100]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fa:	4916      	ldr	r1, [pc, #88]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760a:	d105      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800760c:	4b11      	ldr	r3, [pc, #68]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a10      	ldr	r2, [pc, #64]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d019      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	4908      	ldr	r1, [pc, #32]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007644:	4b03      	ldr	r3, [pc, #12]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a02      	ldr	r2, [pc, #8]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800764e:	60d3      	str	r3, [r2, #12]
 8007650:	e002      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007652:	bf00      	nop
 8007654:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007664:	4b29      	ldr	r3, [pc, #164]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	4926      	ldr	r1, [pc, #152]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007674:	4313      	orrs	r3, r2
 8007676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007682:	d105      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007684:	4b21      	ldr	r3, [pc, #132]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4a20      	ldr	r2, [pc, #128]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800768a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800768e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d015      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800769c:	4b1b      	ldr	r3, [pc, #108]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076aa:	4918      	ldr	r1, [pc, #96]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ba:	d105      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4a12      	ldr	r2, [pc, #72]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d015      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076d4:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e2:	490a      	ldr	r1, [pc, #40]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076f2:	d105      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a04      	ldr	r2, [pc, #16]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007700:	7cbb      	ldrb	r3, [r7, #18]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40021000 	.word	0x40021000

08007710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e054      	b.n	80077cc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d111      	bne.n	8007752 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f002 fb3c 	bl	8009db4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a23      	ldr	r2, [pc, #140]	@ (80077d4 <HAL_TIM_Base_Init+0xc4>)
 8007748:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f001 fc7b 	bl	8009060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	080054d9 	.word	0x080054d9

080077d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d001      	beq.n	80077f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e04c      	b.n	800788a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a26      	ldr	r2, [pc, #152]	@ (8007898 <HAL_TIM_Base_Start+0xc0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d022      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780a:	d01d      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a22      	ldr	r2, [pc, #136]	@ (800789c <HAL_TIM_Base_Start+0xc4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d018      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <HAL_TIM_Base_Start+0xc8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d013      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1f      	ldr	r2, [pc, #124]	@ (80078a4 <HAL_TIM_Base_Start+0xcc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00e      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1e      	ldr	r2, [pc, #120]	@ (80078a8 <HAL_TIM_Base_Start+0xd0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d009      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1c      	ldr	r2, [pc, #112]	@ (80078ac <HAL_TIM_Base_Start+0xd4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d004      	beq.n	8007848 <HAL_TIM_Base_Start+0x70>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1b      	ldr	r2, [pc, #108]	@ (80078b0 <HAL_TIM_Base_Start+0xd8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d115      	bne.n	8007874 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	4b19      	ldr	r3, [pc, #100]	@ (80078b4 <HAL_TIM_Base_Start+0xdc>)
 8007850:	4013      	ands	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b06      	cmp	r3, #6
 8007858:	d015      	beq.n	8007886 <HAL_TIM_Base_Start+0xae>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007860:	d011      	beq.n	8007886 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0201 	orr.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007872:	e008      	b.n	8007886 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e000      	b.n	8007888 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40000c00 	.word	0x40000c00
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40015000 	.word	0x40015000
 80078b4:	00010007 	.word	0x00010007

080078b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d001      	beq.n	80078d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e054      	b.n	800797a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a26      	ldr	r2, [pc, #152]	@ (8007988 <HAL_TIM_Base_Start_IT+0xd0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d022      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fa:	d01d      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a22      	ldr	r2, [pc, #136]	@ (800798c <HAL_TIM_Base_Start_IT+0xd4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d018      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a21      	ldr	r2, [pc, #132]	@ (8007990 <HAL_TIM_Base_Start_IT+0xd8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d013      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1f      	ldr	r2, [pc, #124]	@ (8007994 <HAL_TIM_Base_Start_IT+0xdc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1e      	ldr	r2, [pc, #120]	@ (8007998 <HAL_TIM_Base_Start_IT+0xe0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1c      	ldr	r2, [pc, #112]	@ (800799c <HAL_TIM_Base_Start_IT+0xe4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1b      	ldr	r2, [pc, #108]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d115      	bne.n	8007964 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	4b19      	ldr	r3, [pc, #100]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xec>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b06      	cmp	r3, #6
 8007948:	d015      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007950:	d011      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0201 	orr.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	e008      	b.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e000      	b.n	8007978 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40015000 	.word	0x40015000
 80079a4:	00010007 	.word	0x00010007

080079a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e054      	b.n	8007a64 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d111      	bne.n	80079ea <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f002 f9f0 	bl	8009db4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a23      	ldr	r2, [pc, #140]	@ (8007a6c <HAL_TIM_PWM_Init+0xc4>)
 80079e0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f001 fb2f 	bl	8009060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	08007a71 	.word	0x08007a71

08007a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x24>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e03c      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d109      	bne.n	8007ac2 <HAL_TIM_PWM_Start+0x3e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	2300      	moveq	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	e02f      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d109      	bne.n	8007adc <HAL_TIM_PWM_Start+0x58>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e022      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d109      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x72>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e015      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d109      	bne.n	8007b10 <HAL_TIM_PWM_Start+0x8c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e008      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e0a6      	b.n	8007c78 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0xb6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0xc6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b48:	e01b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b58:	e013      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start+0xe6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b68:	e00b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start+0xf6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b78:	e003      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f002 f8ec 	bl	8009d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a3a      	ldr	r2, [pc, #232]	@ (8007c80 <HAL_TIM_PWM_Start+0x1fc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x148>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a39      	ldr	r2, [pc, #228]	@ (8007c84 <HAL_TIM_PWM_Start+0x200>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x148>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a37      	ldr	r2, [pc, #220]	@ (8007c88 <HAL_TIM_PWM_Start+0x204>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x148>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a36      	ldr	r2, [pc, #216]	@ (8007c8c <HAL_TIM_PWM_Start+0x208>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x148>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a34      	ldr	r2, [pc, #208]	@ (8007c90 <HAL_TIM_PWM_Start+0x20c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x148>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a33      	ldr	r2, [pc, #204]	@ (8007c94 <HAL_TIM_PWM_Start+0x210>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIM_PWM_Start+0x14c>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <HAL_TIM_PWM_Start+0x14e>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007be4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a25      	ldr	r2, [pc, #148]	@ (8007c80 <HAL_TIM_PWM_Start+0x1fc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf8:	d01d      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a26      	ldr	r2, [pc, #152]	@ (8007c98 <HAL_TIM_PWM_Start+0x214>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a24      	ldr	r2, [pc, #144]	@ (8007c9c <HAL_TIM_PWM_Start+0x218>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a23      	ldr	r2, [pc, #140]	@ (8007ca0 <HAL_TIM_PWM_Start+0x21c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a19      	ldr	r2, [pc, #100]	@ (8007c84 <HAL_TIM_PWM_Start+0x200>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a18      	ldr	r2, [pc, #96]	@ (8007c88 <HAL_TIM_PWM_Start+0x204>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_TIM_PWM_Start+0x1b2>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <HAL_TIM_PWM_Start+0x210>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d115      	bne.n	8007c62 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <HAL_TIM_PWM_Start+0x220>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b06      	cmp	r3, #6
 8007c46:	d015      	beq.n	8007c74 <HAL_TIM_PWM_Start+0x1f0>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c4e:	d011      	beq.n	8007c74 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	e008      	b.n	8007c74 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e000      	b.n	8007c76 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40012c00 	.word	0x40012c00
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800
 8007c94:	40015000 	.word	0x40015000
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	00010007 	.word	0x00010007

08007ca8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e054      	b.n	8007d64 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d111      	bne.n	8007cea <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f002 f870 	bl	8009db4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a23      	ldr	r2, [pc, #140]	@ (8007d6c <HAL_TIM_IC_Init+0xc4>)
 8007ce0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f001 f9af 	bl	8009060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	080052d9 	.word	0x080052d9

08007d70 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_IC_Start+0x1a>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_IC_Start+0x62>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start+0x2a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e01b      	b.n	8007dd2 <HAL_TIM_IC_Start+0x62>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start+0x3a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	e013      	b.n	8007dd2 <HAL_TIM_IC_Start+0x62>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_IC_Start+0x4a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	e00b      	b.n	8007dd2 <HAL_TIM_IC_Start+0x62>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_IC_Start+0x5a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	e003      	b.n	8007dd2 <HAL_TIM_IC_Start+0x62>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_TIM_IC_Start+0x74>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e013      	b.n	8007e0c <HAL_TIM_IC_Start+0x9c>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d104      	bne.n	8007df4 <HAL_TIM_IC_Start+0x84>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e00b      	b.n	8007e0c <HAL_TIM_IC_Start+0x9c>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d104      	bne.n	8007e04 <HAL_TIM_IC_Start+0x94>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e003      	b.n	8007e0c <HAL_TIM_IC_Start+0x9c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d102      	bne.n	8007e1a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d001      	beq.n	8007e1e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e097      	b.n	8007f4e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start+0xbe>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e2c:	e023      	b.n	8007e76 <HAL_TIM_IC_Start+0x106>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start+0xce>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e3c:	e01b      	b.n	8007e76 <HAL_TIM_IC_Start+0x106>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_IC_Start+0xde>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e4c:	e013      	b.n	8007e76 <HAL_TIM_IC_Start+0x106>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_IC_Start+0xee>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e5c:	e00b      	b.n	8007e76 <HAL_TIM_IC_Start+0x106>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_IC_Start+0xfe>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e6c:	e003      	b.n	8007e76 <HAL_TIM_IC_Start+0x106>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <HAL_TIM_IC_Start+0x116>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e84:	e013      	b.n	8007eae <HAL_TIM_IC_Start+0x13e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d104      	bne.n	8007e96 <HAL_TIM_IC_Start+0x126>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e94:	e00b      	b.n	8007eae <HAL_TIM_IC_Start+0x13e>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d104      	bne.n	8007ea6 <HAL_TIM_IC_Start+0x136>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ea4:	e003      	b.n	8007eae <HAL_TIM_IC_Start+0x13e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 ff56 	bl	8009d68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a25      	ldr	r2, [pc, #148]	@ (8007f58 <HAL_TIM_IC_Start+0x1e8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d022      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ece:	d01d      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a21      	ldr	r2, [pc, #132]	@ (8007f5c <HAL_TIM_IC_Start+0x1ec>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d018      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a20      	ldr	r2, [pc, #128]	@ (8007f60 <HAL_TIM_IC_Start+0x1f0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d013      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f64 <HAL_TIM_IC_Start+0x1f4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00e      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <HAL_TIM_IC_Start+0x1f8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d009      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f6c <HAL_TIM_IC_Start+0x1fc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_TIM_IC_Start+0x19c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1a      	ldr	r2, [pc, #104]	@ (8007f70 <HAL_TIM_IC_Start+0x200>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d115      	bne.n	8007f38 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	4b18      	ldr	r3, [pc, #96]	@ (8007f74 <HAL_TIM_IC_Start+0x204>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b06      	cmp	r3, #6
 8007f1c:	d015      	beq.n	8007f4a <HAL_TIM_IC_Start+0x1da>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f24:	d011      	beq.n	8007f4a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0201 	orr.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	e008      	b.n	8007f4a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e000      	b.n	8007f4c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40012c00 	.word	0x40012c00
 8007f5c:	40000400 	.word	0x40000400
 8007f60:	40000800 	.word	0x40000800
 8007f64:	40000c00 	.word	0x40000c00
 8007f68:	40013400 	.word	0x40013400
 8007f6c:	40014000 	.word	0x40014000
 8007f70:	40015000 	.word	0x40015000
 8007f74:	00010007 	.word	0x00010007

08007f78 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e04c      	b.n	8008026 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d111      	bne.n	8007fbc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 ff07 	bl	8009db4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008030 <HAL_TIM_OnePulse_Init+0xb8>)
 8007fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f001 f846 	bl	8009060 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0208 	bic.w	r2, r2, #8
 8007fe2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	08008035 	.word	0x08008035

08008034 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008058:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008060:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008068:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008070:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d108      	bne.n	800808a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d105      	bne.n	800808a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800807e:	7b7b      	ldrb	r3, [r7, #13]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d102      	bne.n	800808a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008084:	7b3b      	ldrb	r3, [r7, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e059      	b.n	8008142 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0202 	orr.w	r2, r2, #2
 80080bc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0204 	orr.w	r2, r2, #4
 80080cc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2201      	movs	r2, #1
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fe46 	bl	8009d68 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2201      	movs	r2, #1
 80080e2:	2104      	movs	r1, #4
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fe3f 	bl	8009d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a17      	ldr	r2, [pc, #92]	@ (800814c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIM_OnePulse_Start_IT+0xde>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a15      	ldr	r2, [pc, #84]	@ (8008150 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <HAL_TIM_OnePulse_Start_IT+0xde>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a14      	ldr	r2, [pc, #80]	@ (8008154 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a12      	ldr	r2, [pc, #72]	@ (8008158 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a11      	ldr	r2, [pc, #68]	@ (800815c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIM_OnePulse_Start_IT+0xde>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0f      	ldr	r2, [pc, #60]	@ (8008160 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d101      	bne.n	800812a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800812a:	2300      	movs	r3, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800813e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800
 8008160:	40015000 	.word	0x40015000

08008164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0a2      	b.n	80082be <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d111      	bne.n	80081a8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fe11 	bl	8009db4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a4a      	ldr	r2, [pc, #296]	@ (80082c8 <HAL_TIM_Encoder_Init+0x164>)
 800819e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80081be:	f023 0307 	bic.w	r3, r3, #7
 80081c2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f000 ff46 	bl	8009060 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	4313      	orrs	r3, r2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800821a:	f023 030c 	bic.w	r3, r3, #12
 800821e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800822a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	4313      	orrs	r3, r2
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	011a      	lsls	r2, r3, #4
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	031b      	lsls	r3, r3, #12
 800824a:	4313      	orrs	r3, r2
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008258:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008260:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	4313      	orrs	r3, r2
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	080053cd 	.word	0x080053cd

080082cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d110      	bne.n	800831e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d102      	bne.n	8008308 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008302:	7b7b      	ldrb	r3, [r7, #13]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d001      	beq.n	800830c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e069      	b.n	80083e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831c:	e031      	b.n	8008382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b04      	cmp	r3, #4
 8008322:	d110      	bne.n	8008346 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d102      	bne.n	8008330 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800832a:	7b3b      	ldrb	r3, [r7, #12]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d001      	beq.n	8008334 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e055      	b.n	80083e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008344:	e01d      	b.n	8008382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d108      	bne.n	800835e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d105      	bne.n	800835e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d102      	bne.n	800835e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008358:	7b3b      	ldrb	r3, [r7, #12]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d001      	beq.n	8008362 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e03e      	b.n	80083e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2202      	movs	r2, #2
 8008366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_TIM_Encoder_Start+0xc4>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b04      	cmp	r3, #4
 800838c:	d008      	beq.n	80083a0 <HAL_TIM_Encoder_Start+0xd4>
 800838e:	e00f      	b.n	80083b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2201      	movs	r2, #1
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fce5 	bl	8009d68 <TIM_CCxChannelCmd>
      break;
 800839e:	e016      	b.n	80083ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	2104      	movs	r1, #4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fcdd 	bl	8009d68 <TIM_CCxChannelCmd>
      break;
 80083ae:	e00e      	b.n	80083ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fcd5 	bl	8009d68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2201      	movs	r2, #1
 80083c4:	2104      	movs	r1, #4
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fcce 	bl	8009d68 <TIM_CCxChannelCmd>
      break;
 80083cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d026      	beq.n	8008458 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d021      	beq.n	8008458 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0202 	mvn.w	r2, #2
 800841c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
 800843c:	e009      	b.n	8008452 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d026      	beq.n	80084b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d021      	beq.n	80084b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0204 	mvn.w	r2, #4
 8008474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2202      	movs	r2, #2
 800847a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
 8008494:	e009      	b.n	80084aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d026      	beq.n	8008508 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d021      	beq.n	8008508 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0208 	mvn.w	r2, #8
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
 80084ec:	e009      	b.n	8008502 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	d026      	beq.n	8008560 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d021      	beq.n	8008560 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0210 	mvn.w	r2, #16
 8008524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2208      	movs	r2, #8
 800852a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
 8008544:	e009      	b.n	800855a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00e      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0201 	mvn.w	r2, #1
 800857c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00e      	beq.n	80085ba <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80085ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f06f 0220 	mvn.w	r2, #32
 8008626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00e      	beq.n	800865a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800864e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800869e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80086c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d2:	bf00      	nop
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e088      	b.n	800880a <HAL_TIM_IC_ConfigChannel+0x130>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11b      	bne.n	800873e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008716:	f001 f961 	bl	80099dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 020c 	bic.w	r2, r2, #12
 8008728:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6999      	ldr	r1, [r3, #24]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	619a      	str	r2, [r3, #24]
 800873c:	e060      	b.n	8008800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b04      	cmp	r3, #4
 8008742:	d11c      	bne.n	800877e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008754:	f001 f9e5 	bl	8009b22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008766:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6999      	ldr	r1, [r3, #24]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	021a      	lsls	r2, r3, #8
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	619a      	str	r2, [r3, #24]
 800877c:	e040      	b.n	8008800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d11b      	bne.n	80087bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008794:	f001 fa32 	bl	8009bfc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69da      	ldr	r2, [r3, #28]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 020c 	bic.w	r2, r2, #12
 80087a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69d9      	ldr	r1, [r3, #28]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	61da      	str	r2, [r3, #28]
 80087ba:	e021      	b.n	8008800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b0c      	cmp	r3, #12
 80087c0:	d11c      	bne.n	80087fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80087d2:	f001 fa4f 	bl	8009c74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80087e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69d9      	ldr	r1, [r3, #28]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	021a      	lsls	r2, r3, #8
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	61da      	str	r2, [r3, #28]
 80087fa:	e001      	b.n	8008800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800882e:	2302      	movs	r3, #2
 8008830:	e0ff      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b14      	cmp	r3, #20
 800883e:	f200 80f0 	bhi.w	8008a22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008842:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	0800889d 	.word	0x0800889d
 800884c:	08008a23 	.word	0x08008a23
 8008850:	08008a23 	.word	0x08008a23
 8008854:	08008a23 	.word	0x08008a23
 8008858:	080088dd 	.word	0x080088dd
 800885c:	08008a23 	.word	0x08008a23
 8008860:	08008a23 	.word	0x08008a23
 8008864:	08008a23 	.word	0x08008a23
 8008868:	0800891f 	.word	0x0800891f
 800886c:	08008a23 	.word	0x08008a23
 8008870:	08008a23 	.word	0x08008a23
 8008874:	08008a23 	.word	0x08008a23
 8008878:	0800895f 	.word	0x0800895f
 800887c:	08008a23 	.word	0x08008a23
 8008880:	08008a23 	.word	0x08008a23
 8008884:	08008a23 	.word	0x08008a23
 8008888:	080089a1 	.word	0x080089a1
 800888c:	08008a23 	.word	0x08008a23
 8008890:	08008a23 	.word	0x08008a23
 8008894:	08008a23 	.word	0x08008a23
 8008898:	080089e1 	.word	0x080089e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fc90 	bl	80091c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0204 	bic.w	r2, r2, #4
 80088c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6999      	ldr	r1, [r3, #24]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	619a      	str	r2, [r3, #24]
      break;
 80088da:	e0a5      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fd0a 	bl	80092fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6999      	ldr	r1, [r3, #24]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]
      break;
 800891c:	e084      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fd7d 	bl	8009424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0208 	orr.w	r2, r2, #8
 8008938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0204 	bic.w	r2, r2, #4
 8008948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	61da      	str	r2, [r3, #28]
      break;
 800895c:	e064      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fdef 	bl	8009548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69d9      	ldr	r1, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	021a      	lsls	r2, r3, #8
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	61da      	str	r2, [r3, #28]
      break;
 800899e:	e043      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fe62 	bl	8009670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0208 	orr.w	r2, r2, #8
 80089ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0204 	bic.w	r2, r2, #4
 80089ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089de:	e023      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 feac 	bl	8009744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	021a      	lsls	r2, r3, #8
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a20:	e002      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
      break;
 8008a26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_TIM_ConfigClockSource+0x1c>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e0f6      	b.n	8008c46 <HAL_TIM_ConfigClockSource+0x20a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a6f      	ldr	r2, [pc, #444]	@ (8008c50 <HAL_TIM_ConfigClockSource+0x214>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	f000 80c1 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008a98:	4a6d      	ldr	r2, [pc, #436]	@ (8008c50 <HAL_TIM_ConfigClockSource+0x214>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f200 80c6 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8008c54 <HAL_TIM_ConfigClockSource+0x218>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	f000 80b9 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8008c54 <HAL_TIM_ConfigClockSource+0x218>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	f200 80be 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ab0:	4a69      	ldr	r2, [pc, #420]	@ (8008c58 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	f000 80b1 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008ab8:	4a67      	ldr	r2, [pc, #412]	@ (8008c58 <HAL_TIM_ConfigClockSource+0x21c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	f200 80b6 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ac0:	4a66      	ldr	r2, [pc, #408]	@ (8008c5c <HAL_TIM_ConfigClockSource+0x220>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	f000 80a9 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008ac8:	4a64      	ldr	r2, [pc, #400]	@ (8008c5c <HAL_TIM_ConfigClockSource+0x220>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	f200 80ae 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ad0:	4a63      	ldr	r2, [pc, #396]	@ (8008c60 <HAL_TIM_ConfigClockSource+0x224>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	f000 80a1 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008ad8:	4a61      	ldr	r2, [pc, #388]	@ (8008c60 <HAL_TIM_ConfigClockSource+0x224>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	f200 80a6 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ae0:	4a60      	ldr	r2, [pc, #384]	@ (8008c64 <HAL_TIM_ConfigClockSource+0x228>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	f000 8099 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8008c64 <HAL_TIM_ConfigClockSource+0x228>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	f200 809e 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008af0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008af4:	f000 8091 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008af8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008afc:	f200 8096 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b04:	f000 8089 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0c:	f200 808e 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d03e      	beq.n	8008b94 <HAL_TIM_ConfigClockSource+0x158>
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b1a:	f200 8087 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b22:	f000 8086 	beq.w	8008c32 <HAL_TIM_ConfigClockSource+0x1f6>
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b2a:	d87f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b2c:	2b70      	cmp	r3, #112	@ 0x70
 8008b2e:	d01a      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x12a>
 8008b30:	2b70      	cmp	r3, #112	@ 0x70
 8008b32:	d87b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	d050      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x19e>
 8008b38:	2b60      	cmp	r3, #96	@ 0x60
 8008b3a:	d877      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b3c:	2b50      	cmp	r3, #80	@ 0x50
 8008b3e:	d03c      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0x17e>
 8008b40:	2b50      	cmp	r3, #80	@ 0x50
 8008b42:	d873      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d058      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x1be>
 8008b48:	2b40      	cmp	r3, #64	@ 0x40
 8008b4a:	d86f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b4c:	2b30      	cmp	r3, #48	@ 0x30
 8008b4e:	d064      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008b50:	2b30      	cmp	r3, #48	@ 0x30
 8008b52:	d86b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d060      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d867      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05c      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d05a      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x1de>
 8008b64:	e062      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b76:	f001 f8d7 	bl	8009d28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	609a      	str	r2, [r3, #8]
      break;
 8008b92:	e04f      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ba4:	f001 f8c0 	bl	8009d28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb6:	609a      	str	r2, [r3, #8]
      break;
 8008bb8:	e03c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 ff7c 	bl	8009ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2150      	movs	r1, #80	@ 0x50
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f88b 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8008bd8:	e02c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 ffd8 	bl	8009b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2160      	movs	r1, #96	@ 0x60
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f87b 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8008bf8:	e01c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c06:	461a      	mov	r2, r3
 8008c08:	f000 ff5c 	bl	8009ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2140      	movs	r1, #64	@ 0x40
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 f86b 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8008c18:	e00c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f001 f862 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8008c2a:	e003      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c30:	e000      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	00100070 	.word	0x00100070
 8008c54:	00100060 	.word	0x00100060
 8008c58:	00100050 	.word	0x00100050
 8008c5c:	00100040 	.word	0x00100040
 8008c60:	00100030 	.word	0x00100030
 8008c64:	00100020 	.word	0x00100020

08008c68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e031      	b.n	8008ce4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fdc2 	bl	800981c <TIM_SlaveTimer_SetConfig>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e018      	b.n	8008ce4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cd0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e14a      	b.n	8009052 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	f040 80dd 	bne.w	8008f84 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008dca:	7afb      	ldrb	r3, [r7, #11]
 8008dcc:	2b1f      	cmp	r3, #31
 8008dce:	f200 80d6 	bhi.w	8008f7e <HAL_TIM_RegisterCallback+0x1de>
 8008dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd8 <HAL_TIM_RegisterCallback+0x38>)
 8008dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd8:	08008e59 	.word	0x08008e59
 8008ddc:	08008e61 	.word	0x08008e61
 8008de0:	08008e69 	.word	0x08008e69
 8008de4:	08008e71 	.word	0x08008e71
 8008de8:	08008e79 	.word	0x08008e79
 8008dec:	08008e81 	.word	0x08008e81
 8008df0:	08008e89 	.word	0x08008e89
 8008df4:	08008e91 	.word	0x08008e91
 8008df8:	08008e99 	.word	0x08008e99
 8008dfc:	08008ea1 	.word	0x08008ea1
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008eb1 	.word	0x08008eb1
 8008e08:	08008eb9 	.word	0x08008eb9
 8008e0c:	08008ec1 	.word	0x08008ec1
 8008e10:	08008ecb 	.word	0x08008ecb
 8008e14:	08008ed5 	.word	0x08008ed5
 8008e18:	08008edf 	.word	0x08008edf
 8008e1c:	08008ee9 	.word	0x08008ee9
 8008e20:	08008ef3 	.word	0x08008ef3
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	08008f07 	.word	0x08008f07
 8008e2c:	08008f11 	.word	0x08008f11
 8008e30:	08008f1b 	.word	0x08008f1b
 8008e34:	08008f25 	.word	0x08008f25
 8008e38:	08008f2f 	.word	0x08008f2f
 8008e3c:	08008f39 	.word	0x08008f39
 8008e40:	08008f43 	.word	0x08008f43
 8008e44:	08008f4d 	.word	0x08008f4d
 8008e48:	08008f57 	.word	0x08008f57
 8008e4c:	08008f61 	.word	0x08008f61
 8008e50:	08008f6b 	.word	0x08008f6b
 8008e54:	08008f75 	.word	0x08008f75
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008e5e:	e0f7      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008e66:	e0f3      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008e6e:	e0ef      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008e76:	e0eb      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008e7e:	e0e7      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008e86:	e0e3      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008e8e:	e0df      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008e96:	e0db      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008e9e:	e0d7      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008ea6:	e0d3      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008eae:	e0cf      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008eb6:	e0cb      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008ebe:	e0c7      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008ec8:	e0c2      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008ed2:	e0bd      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008edc:	e0b8      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008ee6:	e0b3      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008ef0:	e0ae      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008efa:	e0a9      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008f04:	e0a4      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008f0e:	e09f      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008f18:	e09a      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008f22:	e095      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008f2c:	e090      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008f36:	e08b      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008f40:	e086      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008f4a:	e081      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008f54:	e07c      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008f5e:	e077      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008f68:	e072      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008f72:	e06d      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008f7c:	e068      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	75fb      	strb	r3, [r7, #23]
        break;
 8008f82:	e065      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d15d      	bne.n	800904c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	2b0d      	cmp	r3, #13
 8008f94:	d857      	bhi.n	8009046 <HAL_TIM_RegisterCallback+0x2a6>
 8008f96:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <HAL_TIM_RegisterCallback+0x1fc>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fdd 	.word	0x08008fdd
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008ff5 	.word	0x08008ff5
 8008fb0:	08008ffd 	.word	0x08008ffd
 8008fb4:	08009005 	.word	0x08009005
 8008fb8:	0800900d 	.word	0x0800900d
 8008fbc:	08009015 	.word	0x08009015
 8008fc0:	0800901d 	.word	0x0800901d
 8008fc4:	08009025 	.word	0x08009025
 8008fc8:	0800902d 	.word	0x0800902d
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	0800903d 	.word	0x0800903d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008fda:	e039      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008fe2:	e035      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008fea:	e031      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ff2:	e02d      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ffa:	e029      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009002:	e025      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800900a:	e021      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009012:	e01d      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800901a:	e019      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009022:	e015      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800902a:	e011      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009032:	e00d      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800903a:	e009      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009044:	e004      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
        break;
 800904a:	e001      	b.n	8009050 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
}
 8009052:	4618      	mov	r0, r3
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop

08009060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a4c      	ldr	r2, [pc, #304]	@ (80091a4 <TIM_Base_SetConfig+0x144>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d017      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907e:	d013      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a49      	ldr	r2, [pc, #292]	@ (80091a8 <TIM_Base_SetConfig+0x148>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00f      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a48      	ldr	r2, [pc, #288]	@ (80091ac <TIM_Base_SetConfig+0x14c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00b      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a47      	ldr	r2, [pc, #284]	@ (80091b0 <TIM_Base_SetConfig+0x150>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d007      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a46      	ldr	r2, [pc, #280]	@ (80091b4 <TIM_Base_SetConfig+0x154>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_Base_SetConfig+0x48>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a45      	ldr	r2, [pc, #276]	@ (80091b8 <TIM_Base_SetConfig+0x158>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d108      	bne.n	80090ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a39      	ldr	r2, [pc, #228]	@ (80091a4 <TIM_Base_SetConfig+0x144>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d023      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c8:	d01f      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a36      	ldr	r2, [pc, #216]	@ (80091a8 <TIM_Base_SetConfig+0x148>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01b      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a35      	ldr	r2, [pc, #212]	@ (80091ac <TIM_Base_SetConfig+0x14c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d017      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a34      	ldr	r2, [pc, #208]	@ (80091b0 <TIM_Base_SetConfig+0x150>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d013      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a33      	ldr	r2, [pc, #204]	@ (80091b4 <TIM_Base_SetConfig+0x154>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00f      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a33      	ldr	r2, [pc, #204]	@ (80091bc <TIM_Base_SetConfig+0x15c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00b      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a32      	ldr	r2, [pc, #200]	@ (80091c0 <TIM_Base_SetConfig+0x160>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a31      	ldr	r2, [pc, #196]	@ (80091c4 <TIM_Base_SetConfig+0x164>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_Base_SetConfig+0xaa>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a2c      	ldr	r2, [pc, #176]	@ (80091b8 <TIM_Base_SetConfig+0x158>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d108      	bne.n	800911c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a18      	ldr	r2, [pc, #96]	@ (80091a4 <TIM_Base_SetConfig+0x144>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <TIM_Base_SetConfig+0x110>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a1a      	ldr	r2, [pc, #104]	@ (80091b4 <TIM_Base_SetConfig+0x154>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d00f      	beq.n	8009170 <TIM_Base_SetConfig+0x110>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a1a      	ldr	r2, [pc, #104]	@ (80091bc <TIM_Base_SetConfig+0x15c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00b      	beq.n	8009170 <TIM_Base_SetConfig+0x110>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <TIM_Base_SetConfig+0x160>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d007      	beq.n	8009170 <TIM_Base_SetConfig+0x110>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a18      	ldr	r2, [pc, #96]	@ (80091c4 <TIM_Base_SetConfig+0x164>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_Base_SetConfig+0x110>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a13      	ldr	r2, [pc, #76]	@ (80091b8 <TIM_Base_SetConfig+0x158>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d103      	bne.n	8009178 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b01      	cmp	r3, #1
 8009188:	d105      	bne.n	8009196 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f023 0201 	bic.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	611a      	str	r2, [r3, #16]
  }
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	40012c00 	.word	0x40012c00
 80091a8:	40000400 	.word	0x40000400
 80091ac:	40000800 	.word	0x40000800
 80091b0:	40000c00 	.word	0x40000c00
 80091b4:	40013400 	.word	0x40013400
 80091b8:	40015000 	.word	0x40015000
 80091bc:	40014000 	.word	0x40014000
 80091c0:	40014400 	.word	0x40014400
 80091c4:	40014800 	.word	0x40014800

080091c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	f023 0201 	bic.w	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 0302 	bic.w	r3, r3, #2
 8009214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a30      	ldr	r2, [pc, #192]	@ (80092e4 <TIM_OC1_SetConfig+0x11c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <TIM_OC1_SetConfig+0x88>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a2f      	ldr	r2, [pc, #188]	@ (80092e8 <TIM_OC1_SetConfig+0x120>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00f      	beq.n	8009250 <TIM_OC1_SetConfig+0x88>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a2e      	ldr	r2, [pc, #184]	@ (80092ec <TIM_OC1_SetConfig+0x124>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00b      	beq.n	8009250 <TIM_OC1_SetConfig+0x88>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a2d      	ldr	r2, [pc, #180]	@ (80092f0 <TIM_OC1_SetConfig+0x128>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <TIM_OC1_SetConfig+0x88>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a2c      	ldr	r2, [pc, #176]	@ (80092f4 <TIM_OC1_SetConfig+0x12c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_OC1_SetConfig+0x88>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a2b      	ldr	r2, [pc, #172]	@ (80092f8 <TIM_OC1_SetConfig+0x130>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10c      	bne.n	800926a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 0308 	bic.w	r3, r3, #8
 8009256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 0304 	bic.w	r3, r3, #4
 8009268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a1d      	ldr	r2, [pc, #116]	@ (80092e4 <TIM_OC1_SetConfig+0x11c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d013      	beq.n	800929a <TIM_OC1_SetConfig+0xd2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a1c      	ldr	r2, [pc, #112]	@ (80092e8 <TIM_OC1_SetConfig+0x120>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00f      	beq.n	800929a <TIM_OC1_SetConfig+0xd2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a1b      	ldr	r2, [pc, #108]	@ (80092ec <TIM_OC1_SetConfig+0x124>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00b      	beq.n	800929a <TIM_OC1_SetConfig+0xd2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a1a      	ldr	r2, [pc, #104]	@ (80092f0 <TIM_OC1_SetConfig+0x128>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d007      	beq.n	800929a <TIM_OC1_SetConfig+0xd2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a19      	ldr	r2, [pc, #100]	@ (80092f4 <TIM_OC1_SetConfig+0x12c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d003      	beq.n	800929a <TIM_OC1_SetConfig+0xd2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a18      	ldr	r2, [pc, #96]	@ (80092f8 <TIM_OC1_SetConfig+0x130>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d111      	bne.n	80092be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	621a      	str	r2, [r3, #32]
}
 80092d8:	bf00      	nop
 80092da:	371c      	adds	r7, #28
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	40012c00 	.word	0x40012c00
 80092e8:	40013400 	.word	0x40013400
 80092ec:	40014000 	.word	0x40014000
 80092f0:	40014400 	.word	0x40014400
 80092f4:	40014800 	.word	0x40014800
 80092f8:	40015000 	.word	0x40015000

080092fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f023 0210 	bic.w	r2, r3, #16
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800932a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f023 0320 	bic.w	r3, r3, #32
 800934a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a2c      	ldr	r2, [pc, #176]	@ (800940c <TIM_OC2_SetConfig+0x110>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d007      	beq.n	8009370 <TIM_OC2_SetConfig+0x74>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a2b      	ldr	r2, [pc, #172]	@ (8009410 <TIM_OC2_SetConfig+0x114>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC2_SetConfig+0x74>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a2a      	ldr	r2, [pc, #168]	@ (8009414 <TIM_OC2_SetConfig+0x118>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d10d      	bne.n	800938c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800938a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1f      	ldr	r2, [pc, #124]	@ (800940c <TIM_OC2_SetConfig+0x110>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d013      	beq.n	80093bc <TIM_OC2_SetConfig+0xc0>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1e      	ldr	r2, [pc, #120]	@ (8009410 <TIM_OC2_SetConfig+0x114>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d00f      	beq.n	80093bc <TIM_OC2_SetConfig+0xc0>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a1e      	ldr	r2, [pc, #120]	@ (8009418 <TIM_OC2_SetConfig+0x11c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00b      	beq.n	80093bc <TIM_OC2_SetConfig+0xc0>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a1d      	ldr	r2, [pc, #116]	@ (800941c <TIM_OC2_SetConfig+0x120>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d007      	beq.n	80093bc <TIM_OC2_SetConfig+0xc0>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009420 <TIM_OC2_SetConfig+0x124>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_OC2_SetConfig+0xc0>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a17      	ldr	r2, [pc, #92]	@ (8009414 <TIM_OC2_SetConfig+0x118>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d113      	bne.n	80093e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40012c00 	.word	0x40012c00
 8009410:	40013400 	.word	0x40013400
 8009414:	40015000 	.word	0x40015000
 8009418:	40014000 	.word	0x40014000
 800941c:	40014400 	.word	0x40014400
 8009420:	40014800 	.word	0x40014800

08009424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a2b      	ldr	r2, [pc, #172]	@ (8009530 <TIM_OC3_SetConfig+0x10c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d007      	beq.n	8009496 <TIM_OC3_SetConfig+0x72>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2a      	ldr	r2, [pc, #168]	@ (8009534 <TIM_OC3_SetConfig+0x110>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d003      	beq.n	8009496 <TIM_OC3_SetConfig+0x72>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a29      	ldr	r2, [pc, #164]	@ (8009538 <TIM_OC3_SetConfig+0x114>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d10d      	bne.n	80094b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800949c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009530 <TIM_OC3_SetConfig+0x10c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <TIM_OC3_SetConfig+0xbe>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <TIM_OC3_SetConfig+0x110>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <TIM_OC3_SetConfig+0xbe>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1d      	ldr	r2, [pc, #116]	@ (800953c <TIM_OC3_SetConfig+0x118>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <TIM_OC3_SetConfig+0xbe>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009540 <TIM_OC3_SetConfig+0x11c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <TIM_OC3_SetConfig+0xbe>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009544 <TIM_OC3_SetConfig+0x120>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_OC3_SetConfig+0xbe>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a16      	ldr	r2, [pc, #88]	@ (8009538 <TIM_OC3_SetConfig+0x114>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d113      	bne.n	800950a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	621a      	str	r2, [r3, #32]
}
 8009524:	bf00      	nop
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40013400 	.word	0x40013400
 8009538:	40015000 	.word	0x40015000
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800

08009548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800957a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	031b      	lsls	r3, r3, #12
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009658 <TIM_OC4_SetConfig+0x110>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d007      	beq.n	80095bc <TIM_OC4_SetConfig+0x74>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a2b      	ldr	r2, [pc, #172]	@ (800965c <TIM_OC4_SetConfig+0x114>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d003      	beq.n	80095bc <TIM_OC4_SetConfig+0x74>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009660 <TIM_OC4_SetConfig+0x118>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d10d      	bne.n	80095d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	031b      	lsls	r3, r3, #12
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a1f      	ldr	r2, [pc, #124]	@ (8009658 <TIM_OC4_SetConfig+0x110>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <TIM_OC4_SetConfig+0xc0>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a1e      	ldr	r2, [pc, #120]	@ (800965c <TIM_OC4_SetConfig+0x114>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00f      	beq.n	8009608 <TIM_OC4_SetConfig+0xc0>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009664 <TIM_OC4_SetConfig+0x11c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00b      	beq.n	8009608 <TIM_OC4_SetConfig+0xc0>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009668 <TIM_OC4_SetConfig+0x120>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d007      	beq.n	8009608 <TIM_OC4_SetConfig+0xc0>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a1c      	ldr	r2, [pc, #112]	@ (800966c <TIM_OC4_SetConfig+0x124>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_OC4_SetConfig+0xc0>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a17      	ldr	r2, [pc, #92]	@ (8009660 <TIM_OC4_SetConfig+0x118>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d113      	bne.n	8009630 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800960e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009616:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	019b      	lsls	r3, r3, #6
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	019b      	lsls	r3, r3, #6
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40013400 	.word	0x40013400
 8009660:	40015000 	.word	0x40015000
 8009664:	40014000 	.word	0x40014000
 8009668:	40014400 	.word	0x40014400
 800966c:	40014800 	.word	0x40014800

08009670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80096b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4313      	orrs	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a19      	ldr	r2, [pc, #100]	@ (800972c <TIM_OC5_SetConfig+0xbc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <TIM_OC5_SetConfig+0x82>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a18      	ldr	r2, [pc, #96]	@ (8009730 <TIM_OC5_SetConfig+0xc0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00f      	beq.n	80096f2 <TIM_OC5_SetConfig+0x82>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a17      	ldr	r2, [pc, #92]	@ (8009734 <TIM_OC5_SetConfig+0xc4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00b      	beq.n	80096f2 <TIM_OC5_SetConfig+0x82>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a16      	ldr	r2, [pc, #88]	@ (8009738 <TIM_OC5_SetConfig+0xc8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d007      	beq.n	80096f2 <TIM_OC5_SetConfig+0x82>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a15      	ldr	r2, [pc, #84]	@ (800973c <TIM_OC5_SetConfig+0xcc>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_OC5_SetConfig+0x82>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a14      	ldr	r2, [pc, #80]	@ (8009740 <TIM_OC5_SetConfig+0xd0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d109      	bne.n	8009706 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	40012c00 	.word	0x40012c00
 8009730:	40013400 	.word	0x40013400
 8009734:	40014000 	.word	0x40014000
 8009738:	40014400 	.word	0x40014400
 800973c:	40014800 	.word	0x40014800
 8009740:	40015000 	.word	0x40015000

08009744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800978a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	051b      	lsls	r3, r3, #20
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a1a      	ldr	r2, [pc, #104]	@ (8009804 <TIM_OC6_SetConfig+0xc0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d013      	beq.n	80097c8 <TIM_OC6_SetConfig+0x84>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a19      	ldr	r2, [pc, #100]	@ (8009808 <TIM_OC6_SetConfig+0xc4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00f      	beq.n	80097c8 <TIM_OC6_SetConfig+0x84>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a18      	ldr	r2, [pc, #96]	@ (800980c <TIM_OC6_SetConfig+0xc8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00b      	beq.n	80097c8 <TIM_OC6_SetConfig+0x84>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a17      	ldr	r2, [pc, #92]	@ (8009810 <TIM_OC6_SetConfig+0xcc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d007      	beq.n	80097c8 <TIM_OC6_SetConfig+0x84>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a16      	ldr	r2, [pc, #88]	@ (8009814 <TIM_OC6_SetConfig+0xd0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d003      	beq.n	80097c8 <TIM_OC6_SetConfig+0x84>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a15      	ldr	r2, [pc, #84]	@ (8009818 <TIM_OC6_SetConfig+0xd4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d109      	bne.n	80097dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	029b      	lsls	r3, r3, #10
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4313      	orrs	r3, r2
 80097da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	621a      	str	r2, [r3, #32]
}
 80097f6:	bf00      	nop
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40013400 	.word	0x40013400
 800980c:	40014000 	.word	0x40014000
 8009810:	40014400 	.word	0x40014400
 8009814:	40014800 	.word	0x40014800
 8009818:	40015000 	.word	0x40015000

0800981c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800984e:	f023 0307 	bic.w	r3, r3, #7
 8009852:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4a56      	ldr	r2, [pc, #344]	@ (80099c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	f000 80a2 	beq.w	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009872:	4a54      	ldr	r2, [pc, #336]	@ (80099c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009874:	4293      	cmp	r3, r2
 8009876:	f200 809b 	bhi.w	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 800987a:	4a53      	ldr	r2, [pc, #332]	@ (80099c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800987c:	4293      	cmp	r3, r2
 800987e:	f000 809a 	beq.w	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009882:	4a51      	ldr	r2, [pc, #324]	@ (80099c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009884:	4293      	cmp	r3, r2
 8009886:	f200 8093 	bhi.w	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 800988a:	4a50      	ldr	r2, [pc, #320]	@ (80099cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800988c:	4293      	cmp	r3, r2
 800988e:	f000 8092 	beq.w	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009892:	4a4e      	ldr	r2, [pc, #312]	@ (80099cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	f200 808b 	bhi.w	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 800989a:	4a4d      	ldr	r2, [pc, #308]	@ (80099d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	f000 808a 	beq.w	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80098a2:	4a4b      	ldr	r2, [pc, #300]	@ (80099d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	f200 8083 	bhi.w	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098aa:	4a4a      	ldr	r2, [pc, #296]	@ (80099d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	f000 8082 	beq.w	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80098b2:	4a48      	ldr	r2, [pc, #288]	@ (80099d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d87b      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098b8:	4a47      	ldr	r2, [pc, #284]	@ (80099d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d07b      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80098be:	4a46      	ldr	r2, [pc, #280]	@ (80099d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d875      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098c8:	d075      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80098ca:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098ce:	d86f      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098d4:	d06f      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80098d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098da:	d869      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098dc:	2b70      	cmp	r3, #112	@ 0x70
 80098de:	d01a      	beq.n	8009916 <TIM_SlaveTimer_SetConfig+0xfa>
 80098e0:	2b70      	cmp	r3, #112	@ 0x70
 80098e2:	d865      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098e4:	2b60      	cmp	r3, #96	@ 0x60
 80098e6:	d059      	beq.n	800999c <TIM_SlaveTimer_SetConfig+0x180>
 80098e8:	2b60      	cmp	r3, #96	@ 0x60
 80098ea:	d861      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098ec:	2b50      	cmp	r3, #80	@ 0x50
 80098ee:	d04b      	beq.n	8009988 <TIM_SlaveTimer_SetConfig+0x16c>
 80098f0:	2b50      	cmp	r3, #80	@ 0x50
 80098f2:	d85d      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098f4:	2b40      	cmp	r3, #64	@ 0x40
 80098f6:	d019      	beq.n	800992c <TIM_SlaveTimer_SetConfig+0x110>
 80098f8:	2b40      	cmp	r3, #64	@ 0x40
 80098fa:	d859      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 80098fc:	2b30      	cmp	r3, #48	@ 0x30
 80098fe:	d05a      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009900:	2b30      	cmp	r3, #48	@ 0x30
 8009902:	d855      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 8009904:	2b20      	cmp	r3, #32
 8009906:	d056      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009908:	2b20      	cmp	r3, #32
 800990a:	d851      	bhi.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d052      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009910:	2b10      	cmp	r3, #16
 8009912:	d050      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009914:	e04c      	b.n	80099b0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009926:	f000 f9ff 	bl	8009d28 <TIM_ETR_SetConfig>
      break;
 800992a:	e045      	b.n	80099b8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b05      	cmp	r3, #5
 8009932:	d004      	beq.n	800993e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009938:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800993c:	d101      	bne.n	8009942 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e03b      	b.n	80099ba <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0201 	bic.w	r2, r2, #1
 8009958:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009968:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	4313      	orrs	r3, r2
 8009974:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
      break;
 8009986:	e017      	b.n	80099b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009994:	461a      	mov	r2, r3
 8009996:	f000 f895 	bl	8009ac4 <TIM_TI1_ConfigInputStage>
      break;
 800999a:	e00d      	b.n	80099b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099a8:	461a      	mov	r2, r3
 80099aa:	f000 f8f7 	bl	8009b9c <TIM_TI2_ConfigInputStage>
      break;
 80099ae:	e003      	b.n	80099b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
      break;
 80099b4:	e000      	b.n	80099b8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80099b6:	bf00      	nop
  }

  return status;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	00100070 	.word	0x00100070
 80099c8:	00100060 	.word	0x00100060
 80099cc:	00100050 	.word	0x00100050
 80099d0:	00100040 	.word	0x00100040
 80099d4:	00100030 	.word	0x00100030
 80099d8:	00100020 	.word	0x00100020

080099dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	f023 0201 	bic.w	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a28      	ldr	r2, [pc, #160]	@ (8009aa8 <TIM_TI1_SetConfig+0xcc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01b      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a10:	d017      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4a25      	ldr	r2, [pc, #148]	@ (8009aac <TIM_TI1_SetConfig+0xd0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d013      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4a24      	ldr	r2, [pc, #144]	@ (8009ab0 <TIM_TI1_SetConfig+0xd4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00f      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <TIM_TI1_SetConfig+0xd8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00b      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4a22      	ldr	r2, [pc, #136]	@ (8009ab8 <TIM_TI1_SetConfig+0xdc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d007      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a21      	ldr	r2, [pc, #132]	@ (8009abc <TIM_TI1_SetConfig+0xe0>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d003      	beq.n	8009a42 <TIM_TI1_SetConfig+0x66>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4a20      	ldr	r2, [pc, #128]	@ (8009ac0 <TIM_TI1_SetConfig+0xe4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d101      	bne.n	8009a46 <TIM_TI1_SetConfig+0x6a>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e000      	b.n	8009a48 <TIM_TI1_SetConfig+0x6c>
 8009a46:	2300      	movs	r3, #0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e003      	b.n	8009a66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f023 030a 	bic.w	r3, r3, #10
 8009a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f003 030a 	and.w	r3, r3, #10
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	621a      	str	r2, [r3, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	40012c00 	.word	0x40012c00
 8009aac:	40000400 	.word	0x40000400
 8009ab0:	40000800 	.word	0x40000800
 8009ab4:	40000c00 	.word	0x40000c00
 8009ab8:	40013400 	.word	0x40013400
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	40015000 	.word	0x40015000

08009ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	f023 0201 	bic.w	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f023 030a 	bic.w	r3, r3, #10
 8009b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	621a      	str	r2, [r3, #32]
}
 8009b16:	bf00      	nop
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b087      	sub	sp, #28
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f023 0210 	bic.w	r2, r3, #16
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	021b      	lsls	r3, r3, #8
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	031b      	lsls	r3, r3, #12
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	621a      	str	r2, [r3, #32]
}
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f023 0210 	bic.w	r2, r3, #16
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	031b      	lsls	r3, r3, #12
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	621a      	str	r2, [r3, #32]
}
 8009bf0:	bf00      	nop
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f023 0303 	bic.w	r3, r3, #3
 8009c28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	621a      	str	r2, [r3, #32]
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ca0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	031b      	lsls	r3, r3, #12
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	031b      	lsls	r3, r3, #12
 8009ccc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f043 0307 	orr.w	r3, r3, #7
 8009d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	021a      	lsls	r2, r3, #8
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	609a      	str	r2, [r3, #8]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a1a      	ldr	r2, [r3, #32]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	401a      	ands	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1a      	ldr	r2, [r3, #32]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f003 031f 	and.w	r3, r3, #31
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	431a      	orrs	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a26      	ldr	r2, [pc, #152]	@ (8009e58 <TIM_ResetCallback+0xa4>)
 8009dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a25      	ldr	r2, [pc, #148]	@ (8009e5c <TIM_ResetCallback+0xa8>)
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a24      	ldr	r2, [pc, #144]	@ (8009e60 <TIM_ResetCallback+0xac>)
 8009dd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a23      	ldr	r2, [pc, #140]	@ (8009e64 <TIM_ResetCallback+0xb0>)
 8009dd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a22      	ldr	r2, [pc, #136]	@ (8009e68 <TIM_ResetCallback+0xb4>)
 8009de0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a21      	ldr	r2, [pc, #132]	@ (8009e6c <TIM_ResetCallback+0xb8>)
 8009de8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a20      	ldr	r2, [pc, #128]	@ (8009e70 <TIM_ResetCallback+0xbc>)
 8009df0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a1f      	ldr	r2, [pc, #124]	@ (8009e74 <TIM_ResetCallback+0xc0>)
 8009df8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8009e78 <TIM_ResetCallback+0xc4>)
 8009e00:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a1d      	ldr	r2, [pc, #116]	@ (8009e7c <TIM_ResetCallback+0xc8>)
 8009e08:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e80 <TIM_ResetCallback+0xcc>)
 8009e10:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a1b      	ldr	r2, [pc, #108]	@ (8009e84 <TIM_ResetCallback+0xd0>)
 8009e18:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009e88 <TIM_ResetCallback+0xd4>)
 8009e20:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a19      	ldr	r2, [pc, #100]	@ (8009e8c <TIM_ResetCallback+0xd8>)
 8009e28:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <TIM_ResetCallback+0xdc>)
 8009e30:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a17      	ldr	r2, [pc, #92]	@ (8009e94 <TIM_ResetCallback+0xe0>)
 8009e38:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a16      	ldr	r2, [pc, #88]	@ (8009e98 <TIM_ResetCallback+0xe4>)
 8009e40:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a15      	ldr	r2, [pc, #84]	@ (8009e9c <TIM_ResetCallback+0xe8>)
 8009e48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	080049f1 	.word	0x080049f1
 8009e5c:	08008ced 	.word	0x08008ced
 8009e60:	08008d65 	.word	0x08008d65
 8009e64:	08008d79 	.word	0x08008d79
 8009e68:	08008d15 	.word	0x08008d15
 8009e6c:	08008d29 	.word	0x08008d29
 8009e70:	08008d01 	.word	0x08008d01
 8009e74:	08008d3d 	.word	0x08008d3d
 8009e78:	08008d51 	.word	0x08008d51
 8009e7c:	08008d8d 	.word	0x08008d8d
 8009e80:	0800a0f5 	.word	0x0800a0f5
 8009e84:	0800a109 	.word	0x0800a109
 8009e88:	0800a11d 	.word	0x0800a11d
 8009e8c:	0800a131 	.word	0x0800a131
 8009e90:	0800a145 	.word	0x0800a145
 8009e94:	0800a159 	.word	0x0800a159
 8009e98:	0800a16d 	.word	0x0800a16d
 8009e9c:	0800a181 	.word	0x0800a181

08009ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e074      	b.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a34      	ldr	r2, [pc, #208]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d009      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a33      	ldr	r2, [pc, #204]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d004      	beq.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a31      	ldr	r2, [pc, #196]	@ (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d108      	bne.n	8009f08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009efc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d022      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f38:	d01d      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d018      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1c      	ldr	r2, [pc, #112]	@ (8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00e      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a15      	ldr	r2, [pc, #84]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d009      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a18      	ldr	r2, [pc, #96]	@ (8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d004      	beq.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a11      	ldr	r2, [pc, #68]	@ (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d10c      	bne.n	8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	40015000 	.word	0x40015000
 8009fbc:	40000400 	.word	0x40000400
 8009fc0:	40000800 	.word	0x40000800
 8009fc4:	40000c00 	.word	0x40000c00
 8009fc8:	40014000 	.word	0x40014000

08009fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e078      	b.n	800a0da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	041b      	lsls	r3, r3, #16
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d009      	beq.n	800a08e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d004      	beq.n	800a08e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a19      	ldr	r2, [pc, #100]	@ (800a0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d11c      	bne.n	800a0c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	051b      	lsls	r3, r3, #20
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40012c00 	.word	0x40012c00
 800a0ec:	40013400 	.word	0x40013400
 800a0f0:	40015000 	.word	0x40015000

0800a0f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e050      	b.n	800a248 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d114      	bne.n	800a1da <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fde5 	bl	800ad88 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a21      	ldr	r2, [pc, #132]	@ (800a250 <HAL_UART_Init+0xbc>)
 800a1cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2224      	movs	r2, #36	@ 0x24
 800a1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0201 	bic.w	r2, r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f001 f912 	bl	800b424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fe13 	bl	800ae2c <UART_SetConfig>
 800a206:	4603      	mov	r3, r0
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e01b      	b.n	800a248 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a21e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a22e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0201 	orr.w	r2, r2, #1
 800a23e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 f991 	bl	800b568 <UART_CheckIdleState>
 800a246:	4603      	mov	r3, r0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	0800566d 	.word	0x0800566d

0800a254 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	460b      	mov	r3, r1
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d109      	bne.n	800a280 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a272:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e09c      	b.n	800a3ba <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a286:	2b20      	cmp	r3, #32
 800a288:	d16c      	bne.n	800a364 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	2b0c      	cmp	r3, #12
 800a28e:	d85e      	bhi.n	800a34e <HAL_UART_RegisterCallback+0xfa>
 800a290:	a201      	add	r2, pc, #4	@ (adr r2, 800a298 <HAL_UART_RegisterCallback+0x44>)
 800a292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a296:	bf00      	nop
 800a298:	0800a2cd 	.word	0x0800a2cd
 800a29c:	0800a2d7 	.word	0x0800a2d7
 800a2a0:	0800a2e1 	.word	0x0800a2e1
 800a2a4:	0800a2eb 	.word	0x0800a2eb
 800a2a8:	0800a2f5 	.word	0x0800a2f5
 800a2ac:	0800a2ff 	.word	0x0800a2ff
 800a2b0:	0800a309 	.word	0x0800a309
 800a2b4:	0800a313 	.word	0x0800a313
 800a2b8:	0800a31d 	.word	0x0800a31d
 800a2bc:	0800a327 	.word	0x0800a327
 800a2c0:	0800a331 	.word	0x0800a331
 800a2c4:	0800a33b 	.word	0x0800a33b
 800a2c8:	0800a345 	.word	0x0800a345
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a2d4:	e070      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a2de:	e06b      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a2e8:	e066      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a2f2:	e061      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a2fc:	e05c      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a306:	e057      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a310:	e052      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a31a:	e04d      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a324:	e048      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a32e:	e043      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a338:	e03e      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a342:	e039      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a34c:	e034      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a354:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	75fb      	strb	r3, [r7, #23]
        break;
 800a362:	e029      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d11a      	bne.n	800a3a4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	2b0b      	cmp	r3, #11
 800a372:	d002      	beq.n	800a37a <HAL_UART_RegisterCallback+0x126>
 800a374:	2b0c      	cmp	r3, #12
 800a376:	d005      	beq.n	800a384 <HAL_UART_RegisterCallback+0x130>
 800a378:	e009      	b.n	800a38e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a382:	e019      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a38c:	e014      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a394:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	75fb      	strb	r3, [r7, #23]
        break;
 800a3a2:	e009      	b.n	800a3b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop

0800a3c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	@ 0x28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d167      	bne.n	800a4b0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HAL_UART_Transmit_DMA+0x24>
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e060      	b.n	800a4b2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	88fa      	ldrh	r2, [r7, #6]
 800a402:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2221      	movs	r2, #33	@ 0x21
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d028      	beq.n	800a470 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a422:	4a26      	ldr	r2, [pc, #152]	@ (800a4bc <HAL_UART_Transmit_DMA+0xf4>)
 800a424:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a42a:	4a25      	ldr	r2, [pc, #148]	@ (800a4c0 <HAL_UART_Transmit_DMA+0xf8>)
 800a42c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a432:	4a24      	ldr	r2, [pc, #144]	@ (800a4c4 <HAL_UART_Transmit_DMA+0xfc>)
 800a434:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a43a:	2200      	movs	r2, #0
 800a43c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a446:	4619      	mov	r1, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3328      	adds	r3, #40	@ 0x28
 800a44e:	461a      	mov	r2, r3
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	f7fb fcd9 	bl	8005e08 <HAL_DMA_Start_IT>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d009      	beq.n	800a470 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2210      	movs	r2, #16
 800a460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e020      	b.n	800a4b2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2240      	movs	r2, #64	@ 0x40
 800a476:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	613b      	str	r3, [r7, #16]
   return(result);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a498:	623a      	str	r2, [r7, #32]
 800a49a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	69f9      	ldr	r1, [r7, #28]
 800a49e:	6a3a      	ldr	r2, [r7, #32]
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e000      	b.n	800a4b2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a4b0:	2302      	movs	r3, #2
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3728      	adds	r7, #40	@ 0x28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	0800ba33 	.word	0x0800ba33
 800a4c0:	0800bad1 	.word	0x0800bad1
 800a4c4:	0800bc6b 	.word	0x0800bc6b

0800a4c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	@ 0x28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	d137      	bne.n	800a550 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <HAL_UART_Receive_DMA+0x24>
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e030      	b.n	800a552 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a18      	ldr	r2, [pc, #96]	@ (800a55c <HAL_UART_Receive_DMA+0x94>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d01f      	beq.n	800a540 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d018      	beq.n	800a540 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	613b      	str	r3, [r7, #16]
   return(result);
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	623b      	str	r3, [r7, #32]
 800a52e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a530:	69f9      	ldr	r1, [r7, #28]
 800a532:	6a3a      	ldr	r2, [r7, #32]
 800a534:	e841 2300 	strex	r3, r2, [r1]
 800a538:	61bb      	str	r3, [r7, #24]
   return(result);
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e6      	bne.n	800a50e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a540:	88fb      	ldrh	r3, [r7, #6]
 800a542:	461a      	mov	r2, r3
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f001 f926 	bl	800b798 <UART_Start_Receive_DMA>
 800a54c:	4603      	mov	r3, r0
 800a54e:	e000      	b.n	800a552 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a550:	2302      	movs	r3, #2
  }
}
 800a552:	4618      	mov	r0, r3
 800a554:	3728      	adds	r7, #40	@ 0x28
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	40008000 	.word	0x40008000

0800a560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b0ba      	sub	sp, #232	@ 0xe8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a586:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a58a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a58e:	4013      	ands	r3, r2
 800a590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d11b      	bne.n	800a5d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d015      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d105      	bne.n	800a5c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d009      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 8312 	beq.w	800abee <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
      }
      return;
 800a5d2:	e30c      	b.n	800abee <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 8129 	beq.w	800a830 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a5e2:	4b90      	ldr	r3, [pc, #576]	@ (800a824 <HAL_UART_IRQHandler+0x2c4>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a5ee:	4b8e      	ldr	r3, [pc, #568]	@ (800a828 <HAL_UART_IRQHandler+0x2c8>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 811c 	beq.w	800a830 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d011      	beq.n	800a628 <HAL_UART_IRQHandler+0xc8>
 800a604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00b      	beq.n	800a628 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2201      	movs	r2, #1
 800a616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a61e:	f043 0201 	orr.w	r2, r3, #1
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d011      	beq.n	800a658 <HAL_UART_IRQHandler+0xf8>
 800a634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2202      	movs	r2, #2
 800a646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a64e:	f043 0204 	orr.w	r2, r3, #4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65c:	f003 0304 	and.w	r3, r3, #4
 800a660:	2b00      	cmp	r3, #0
 800a662:	d011      	beq.n	800a688 <HAL_UART_IRQHandler+0x128>
 800a664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2204      	movs	r2, #4
 800a676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a67e:	f043 0202 	orr.w	r2, r3, #2
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a68c:	f003 0308 	and.w	r3, r3, #8
 800a690:	2b00      	cmp	r3, #0
 800a692:	d017      	beq.n	800a6c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d105      	bne.n	800a6ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a6a4:	4b5f      	ldr	r3, [pc, #380]	@ (800a824 <HAL_UART_IRQHandler+0x2c4>)
 800a6a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ba:	f043 0208 	orr.w	r2, r3, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d012      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x196>
 800a6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00c      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ec:	f043 0220 	orr.w	r2, r3, #32
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8278 	beq.w	800abf2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d013      	beq.n	800a736 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a70e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a71e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a73c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74a:	2b40      	cmp	r3, #64	@ 0x40
 800a74c:	d005      	beq.n	800a75a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a74e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a756:	2b00      	cmp	r3, #0
 800a758:	d058      	beq.n	800a80c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 f903 	bl	800b966 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76a:	2b40      	cmp	r3, #64	@ 0x40
 800a76c:	d148      	bne.n	800a800 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a79a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a79e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a7a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a7b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1d9      	bne.n	800a76e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d017      	beq.n	800a7f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ca:	4a18      	ldr	r2, [pc, #96]	@ (800a82c <HAL_UART_IRQHandler+0x2cc>)
 800a7cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fb fbeb 	bl	8005fb0 <HAL_DMA_Abort_IT>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01f      	beq.n	800a820 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f2:	e015      	b.n	800a820 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fe:	e00f      	b.n	800a820 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80a:	e009      	b.n	800a820 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a81e:	e1e8      	b.n	800abf2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a820:	bf00      	nop
    return;
 800a822:	e1e6      	b.n	800abf2 <HAL_UART_IRQHandler+0x692>
 800a824:	10000001 	.word	0x10000001
 800a828:	04000120 	.word	0x04000120
 800a82c:	0800bcef 	.word	0x0800bcef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a834:	2b01      	cmp	r3, #1
 800a836:	f040 8176 	bne.w	800ab26 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83e:	f003 0310 	and.w	r3, r3, #16
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 816f 	beq.w	800ab26 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8168 	beq.w	800ab26 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2210      	movs	r2, #16
 800a85c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a868:	2b40      	cmp	r3, #64	@ 0x40
 800a86a:	f040 80dc 	bne.w	800aa26 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a87c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 80b1 	beq.w	800a9e8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a88c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a890:	429a      	cmp	r2, r3
 800a892:	f080 80a9 	bcs.w	800a9e8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a89c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f040 8087 	bne.w	800a9c2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a8ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a8f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1da      	bne.n	800a8b4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3308      	adds	r3, #8
 800a904:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a90e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3308      	adds	r3, #8
 800a91e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a922:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a926:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a92a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e1      	bne.n	800a8fe <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a94a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a94c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a95e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a960:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a964:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a96c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e3      	bne.n	800a93a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a98e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a990:	f023 0310 	bic.w	r3, r3, #16
 800a994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e4      	bne.n	800a980 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fb fa9e 	bl	8005efe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	1a8a      	subs	r2, r1, r2
 800a9de:	b292      	uxth	r2, r2
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a9e6:	e106      	b.n	800abf6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	f040 80ff 	bne.w	800abf6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	f040 80f5 	bne.w	800abf6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aa1e:	4611      	mov	r1, r2
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
      return;
 800aa24:	e0e7      	b.n	800abf6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 80d9 	beq.w	800abfa <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800aa48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 80d4 	beq.w	800abfa <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa74:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e4      	bne.n	800aa52 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	623b      	str	r3, [r7, #32]
   return(result);
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa9e:	f023 0301 	bic.w	r3, r3, #1
 800aaa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aab0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e1      	bne.n	800aa88 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f023 0310 	bic.w	r3, r3, #16
 800aaec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	69b9      	ldr	r1, [r7, #24]
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	617b      	str	r3, [r7, #20]
   return(result);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e4      	bne.n	800aad8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2202      	movs	r2, #2
 800ab12:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab1a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ab1e:	4611      	mov	r1, r2
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab24:	e069      	b.n	800abfa <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d010      	beq.n	800ab54 <HAL_UART_IRQHandler+0x5f4>
 800ab32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ab46:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab52:	e055      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d014      	beq.n	800ab8a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d105      	bne.n	800ab78 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d03e      	beq.n	800abfe <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
    }
    return;
 800ab88:	e039      	b.n	800abfe <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d009      	beq.n	800abaa <HAL_UART_IRQHandler+0x64a>
 800ab96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 f8b7 	bl	800bd16 <UART_EndTransmit_IT>
    return;
 800aba8:	e02a      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00b      	beq.n	800abce <HAL_UART_IRQHandler+0x66e>
 800abb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abcc:	e018      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800abce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d012      	beq.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
 800abda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da0e      	bge.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abec:	e008      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800abee:	bf00      	nop
 800abf0:	e006      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
    return;
 800abf2:	bf00      	nop
 800abf4:	e004      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800abf6:	bf00      	nop
 800abf8:	e002      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800abfa:	bf00      	nop
 800abfc:	e000      	b.n	800ac00 <HAL_UART_IRQHandler+0x6a0>
    return;
 800abfe:	bf00      	nop
  }
}
 800ac00:	37e8      	adds	r7, #232	@ 0xe8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop

0800ac08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a09      	ldr	r2, [pc, #36]	@ (800acf4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d009      	beq.n	800ace8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	615a      	str	r2, [r3, #20]
  }
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	40008000 	.word	0x40008000

0800acf8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a18      	ldr	r2, [pc, #96]	@ (800ad68 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d027      	beq.n	800ad5a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d120      	bne.n	800ad56 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d101      	bne.n	800ad22 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	e01c      	b.n	800ad5c <HAL_UART_EnableReceiverTimeout+0x64>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2224      	movs	r2, #36	@ 0x24
 800ad2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ad40:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e002      	b.n	800ad5c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ad56:	2302      	movs	r3, #2
 800ad58:	e000      	b.n	800ad5c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
  }
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	40008000 	.word	0x40008000

0800ad6c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a1a      	ldr	r2, [pc, #104]	@ (800adfc <UART_InitCallbacksToDefault+0x74>)
 800ad94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a19      	ldr	r2, [pc, #100]	@ (800ae00 <UART_InitCallbacksToDefault+0x78>)
 800ad9c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a18      	ldr	r2, [pc, #96]	@ (800ae04 <UART_InitCallbacksToDefault+0x7c>)
 800ada4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a17      	ldr	r2, [pc, #92]	@ (800ae08 <UART_InitCallbacksToDefault+0x80>)
 800adac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a16      	ldr	r2, [pc, #88]	@ (800ae0c <UART_InitCallbacksToDefault+0x84>)
 800adb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a15      	ldr	r2, [pc, #84]	@ (800ae10 <UART_InitCallbacksToDefault+0x88>)
 800adbc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a14      	ldr	r2, [pc, #80]	@ (800ae14 <UART_InitCallbacksToDefault+0x8c>)
 800adc4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a13      	ldr	r2, [pc, #76]	@ (800ae18 <UART_InitCallbacksToDefault+0x90>)
 800adcc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a12      	ldr	r2, [pc, #72]	@ (800ae1c <UART_InitCallbacksToDefault+0x94>)
 800add4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a11      	ldr	r2, [pc, #68]	@ (800ae20 <UART_InitCallbacksToDefault+0x98>)
 800addc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a10      	ldr	r2, [pc, #64]	@ (800ae24 <UART_InitCallbacksToDefault+0x9c>)
 800ade4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a0f      	ldr	r2, [pc, #60]	@ (800ae28 <UART_InitCallbacksToDefault+0xa0>)
 800adec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	0800ac1d 	.word	0x0800ac1d
 800ae00:	0800ac09 	.word	0x0800ac09
 800ae04:	0800ac45 	.word	0x0800ac45
 800ae08:	0800ac31 	.word	0x0800ac31
 800ae0c:	0800ac59 	.word	0x0800ac59
 800ae10:	0800ac6d 	.word	0x0800ac6d
 800ae14:	0800ac81 	.word	0x0800ac81
 800ae18:	0800ac95 	.word	0x0800ac95
 800ae1c:	0800bd71 	.word	0x0800bd71
 800ae20:	0800bd85 	.word	0x0800bd85
 800ae24:	0800bd99 	.word	0x0800bd99
 800ae28:	0800aca9 	.word	0x0800aca9

0800ae2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae30:	b08c      	sub	sp, #48	@ 0x30
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	431a      	orrs	r2, r3
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	4baa      	ldr	r3, [pc, #680]	@ (800b104 <UART_SetConfig+0x2d8>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	6812      	ldr	r2, [r2, #0]
 800ae62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae64:	430b      	orrs	r3, r1
 800ae66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a9f      	ldr	r2, [pc, #636]	@ (800b108 <UART_SetConfig+0x2dc>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d004      	beq.n	800ae98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae94:	4313      	orrs	r3, r2
 800ae96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aea2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	6812      	ldr	r2, [r2, #0]
 800aeaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeac:	430b      	orrs	r3, r1
 800aeae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb6:	f023 010f 	bic.w	r1, r3, #15
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a90      	ldr	r2, [pc, #576]	@ (800b10c <UART_SetConfig+0x2e0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d125      	bne.n	800af1c <UART_SetConfig+0xf0>
 800aed0:	4b8f      	ldr	r3, [pc, #572]	@ (800b110 <UART_SetConfig+0x2e4>)
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed6:	f003 0303 	and.w	r3, r3, #3
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d81a      	bhi.n	800af14 <UART_SetConfig+0xe8>
 800aede:	a201      	add	r2, pc, #4	@ (adr r2, 800aee4 <UART_SetConfig+0xb8>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800aef5 	.word	0x0800aef5
 800aee8:	0800af05 	.word	0x0800af05
 800aeec:	0800aefd 	.word	0x0800aefd
 800aef0:	0800af0d 	.word	0x0800af0d
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefa:	e116      	b.n	800b12a <UART_SetConfig+0x2fe>
 800aefc:	2302      	movs	r3, #2
 800aefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af02:	e112      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af04:	2304      	movs	r3, #4
 800af06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0a:	e10e      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af0c:	2308      	movs	r3, #8
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af12:	e10a      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af14:	2310      	movs	r3, #16
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1a:	e106      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a7c      	ldr	r2, [pc, #496]	@ (800b114 <UART_SetConfig+0x2e8>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d138      	bne.n	800af98 <UART_SetConfig+0x16c>
 800af26:	4b7a      	ldr	r3, [pc, #488]	@ (800b110 <UART_SetConfig+0x2e4>)
 800af28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af2c:	f003 030c 	and.w	r3, r3, #12
 800af30:	2b0c      	cmp	r3, #12
 800af32:	d82d      	bhi.n	800af90 <UART_SetConfig+0x164>
 800af34:	a201      	add	r2, pc, #4	@ (adr r2, 800af3c <UART_SetConfig+0x110>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af71 	.word	0x0800af71
 800af40:	0800af91 	.word	0x0800af91
 800af44:	0800af91 	.word	0x0800af91
 800af48:	0800af91 	.word	0x0800af91
 800af4c:	0800af81 	.word	0x0800af81
 800af50:	0800af91 	.word	0x0800af91
 800af54:	0800af91 	.word	0x0800af91
 800af58:	0800af91 	.word	0x0800af91
 800af5c:	0800af79 	.word	0x0800af79
 800af60:	0800af91 	.word	0x0800af91
 800af64:	0800af91 	.word	0x0800af91
 800af68:	0800af91 	.word	0x0800af91
 800af6c:	0800af89 	.word	0x0800af89
 800af70:	2300      	movs	r3, #0
 800af72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af76:	e0d8      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af78:	2302      	movs	r3, #2
 800af7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7e:	e0d4      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af86:	e0d0      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8e:	e0cc      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af96:	e0c8      	b.n	800b12a <UART_SetConfig+0x2fe>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a5e      	ldr	r2, [pc, #376]	@ (800b118 <UART_SetConfig+0x2ec>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d125      	bne.n	800afee <UART_SetConfig+0x1c2>
 800afa2:	4b5b      	ldr	r3, [pc, #364]	@ (800b110 <UART_SetConfig+0x2e4>)
 800afa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afac:	2b30      	cmp	r3, #48	@ 0x30
 800afae:	d016      	beq.n	800afde <UART_SetConfig+0x1b2>
 800afb0:	2b30      	cmp	r3, #48	@ 0x30
 800afb2:	d818      	bhi.n	800afe6 <UART_SetConfig+0x1ba>
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d00a      	beq.n	800afce <UART_SetConfig+0x1a2>
 800afb8:	2b20      	cmp	r3, #32
 800afba:	d814      	bhi.n	800afe6 <UART_SetConfig+0x1ba>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <UART_SetConfig+0x19a>
 800afc0:	2b10      	cmp	r3, #16
 800afc2:	d008      	beq.n	800afd6 <UART_SetConfig+0x1aa>
 800afc4:	e00f      	b.n	800afe6 <UART_SetConfig+0x1ba>
 800afc6:	2300      	movs	r3, #0
 800afc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afcc:	e0ad      	b.n	800b12a <UART_SetConfig+0x2fe>
 800afce:	2302      	movs	r3, #2
 800afd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd4:	e0a9      	b.n	800b12a <UART_SetConfig+0x2fe>
 800afd6:	2304      	movs	r3, #4
 800afd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afdc:	e0a5      	b.n	800b12a <UART_SetConfig+0x2fe>
 800afde:	2308      	movs	r3, #8
 800afe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe4:	e0a1      	b.n	800b12a <UART_SetConfig+0x2fe>
 800afe6:	2310      	movs	r3, #16
 800afe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afec:	e09d      	b.n	800b12a <UART_SetConfig+0x2fe>
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a4a      	ldr	r2, [pc, #296]	@ (800b11c <UART_SetConfig+0x2f0>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d125      	bne.n	800b044 <UART_SetConfig+0x218>
 800aff8:	4b45      	ldr	r3, [pc, #276]	@ (800b110 <UART_SetConfig+0x2e4>)
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800affe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b002:	2bc0      	cmp	r3, #192	@ 0xc0
 800b004:	d016      	beq.n	800b034 <UART_SetConfig+0x208>
 800b006:	2bc0      	cmp	r3, #192	@ 0xc0
 800b008:	d818      	bhi.n	800b03c <UART_SetConfig+0x210>
 800b00a:	2b80      	cmp	r3, #128	@ 0x80
 800b00c:	d00a      	beq.n	800b024 <UART_SetConfig+0x1f8>
 800b00e:	2b80      	cmp	r3, #128	@ 0x80
 800b010:	d814      	bhi.n	800b03c <UART_SetConfig+0x210>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <UART_SetConfig+0x1f0>
 800b016:	2b40      	cmp	r3, #64	@ 0x40
 800b018:	d008      	beq.n	800b02c <UART_SetConfig+0x200>
 800b01a:	e00f      	b.n	800b03c <UART_SetConfig+0x210>
 800b01c:	2300      	movs	r3, #0
 800b01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b022:	e082      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b024:	2302      	movs	r3, #2
 800b026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02a:	e07e      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b02c:	2304      	movs	r3, #4
 800b02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b032:	e07a      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b034:	2308      	movs	r3, #8
 800b036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03a:	e076      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b03c:	2310      	movs	r3, #16
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b042:	e072      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a35      	ldr	r2, [pc, #212]	@ (800b120 <UART_SetConfig+0x2f4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d12a      	bne.n	800b0a4 <UART_SetConfig+0x278>
 800b04e:	4b30      	ldr	r3, [pc, #192]	@ (800b110 <UART_SetConfig+0x2e4>)
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b05c:	d01a      	beq.n	800b094 <UART_SetConfig+0x268>
 800b05e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b062:	d81b      	bhi.n	800b09c <UART_SetConfig+0x270>
 800b064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b068:	d00c      	beq.n	800b084 <UART_SetConfig+0x258>
 800b06a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b06e:	d815      	bhi.n	800b09c <UART_SetConfig+0x270>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <UART_SetConfig+0x250>
 800b074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b078:	d008      	beq.n	800b08c <UART_SetConfig+0x260>
 800b07a:	e00f      	b.n	800b09c <UART_SetConfig+0x270>
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b082:	e052      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b084:	2302      	movs	r3, #2
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08a:	e04e      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b08c:	2304      	movs	r3, #4
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b092:	e04a      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b094:	2308      	movs	r3, #8
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09a:	e046      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b09c:	2310      	movs	r3, #16
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a2:	e042      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a17      	ldr	r2, [pc, #92]	@ (800b108 <UART_SetConfig+0x2dc>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d13a      	bne.n	800b124 <UART_SetConfig+0x2f8>
 800b0ae:	4b18      	ldr	r3, [pc, #96]	@ (800b110 <UART_SetConfig+0x2e4>)
 800b0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b0b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0bc:	d01a      	beq.n	800b0f4 <UART_SetConfig+0x2c8>
 800b0be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0c2:	d81b      	bhi.n	800b0fc <UART_SetConfig+0x2d0>
 800b0c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0c8:	d00c      	beq.n	800b0e4 <UART_SetConfig+0x2b8>
 800b0ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ce:	d815      	bhi.n	800b0fc <UART_SetConfig+0x2d0>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <UART_SetConfig+0x2b0>
 800b0d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0d8:	d008      	beq.n	800b0ec <UART_SetConfig+0x2c0>
 800b0da:	e00f      	b.n	800b0fc <UART_SetConfig+0x2d0>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e2:	e022      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ea:	e01e      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f2:	e01a      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fa:	e016      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b102:	e012      	b.n	800b12a <UART_SetConfig+0x2fe>
 800b104:	cfff69f3 	.word	0xcfff69f3
 800b108:	40008000 	.word	0x40008000
 800b10c:	40013800 	.word	0x40013800
 800b110:	40021000 	.word	0x40021000
 800b114:	40004400 	.word	0x40004400
 800b118:	40004800 	.word	0x40004800
 800b11c:	40004c00 	.word	0x40004c00
 800b120:	40005000 	.word	0x40005000
 800b124:	2310      	movs	r3, #16
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4aae      	ldr	r2, [pc, #696]	@ (800b3e8 <UART_SetConfig+0x5bc>)
 800b130:	4293      	cmp	r3, r2
 800b132:	f040 8097 	bne.w	800b264 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b13a:	2b08      	cmp	r3, #8
 800b13c:	d823      	bhi.n	800b186 <UART_SetConfig+0x35a>
 800b13e:	a201      	add	r2, pc, #4	@ (adr r2, 800b144 <UART_SetConfig+0x318>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b169 	.word	0x0800b169
 800b148:	0800b187 	.word	0x0800b187
 800b14c:	0800b171 	.word	0x0800b171
 800b150:	0800b187 	.word	0x0800b187
 800b154:	0800b177 	.word	0x0800b177
 800b158:	0800b187 	.word	0x0800b187
 800b15c:	0800b187 	.word	0x0800b187
 800b160:	0800b187 	.word	0x0800b187
 800b164:	0800b17f 	.word	0x0800b17f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b168:	f7fc f812 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 800b16c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b16e:	e010      	b.n	800b192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b170:	4b9e      	ldr	r3, [pc, #632]	@ (800b3ec <UART_SetConfig+0x5c0>)
 800b172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b174:	e00d      	b.n	800b192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b176:	f7fb ff9d 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 800b17a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b17c:	e009      	b.n	800b192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b17e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b184:	e005      	b.n	800b192 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 8130 	beq.w	800b3fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19e:	4a94      	ldr	r2, [pc, #592]	@ (800b3f0 <UART_SetConfig+0x5c4>)
 800b1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4413      	add	r3, r2
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d305      	bcc.n	800b1ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1d0:	e113      	b.n	800b3fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	60bb      	str	r3, [r7, #8]
 800b1d8:	60fa      	str	r2, [r7, #12]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1de:	4a84      	ldr	r2, [pc, #528]	@ (800b3f0 <UART_SetConfig+0x5c4>)
 800b1e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	603b      	str	r3, [r7, #0]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1f4:	f7f5 fde4 	bl	8000dc0 <__aeabi_uldivmod>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4619      	mov	r1, r3
 800b200:	f04f 0200 	mov.w	r2, #0
 800b204:	f04f 0300 	mov.w	r3, #0
 800b208:	020b      	lsls	r3, r1, #8
 800b20a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b20e:	0202      	lsls	r2, r0, #8
 800b210:	6979      	ldr	r1, [r7, #20]
 800b212:	6849      	ldr	r1, [r1, #4]
 800b214:	0849      	lsrs	r1, r1, #1
 800b216:	2000      	movs	r0, #0
 800b218:	460c      	mov	r4, r1
 800b21a:	4605      	mov	r5, r0
 800b21c:	eb12 0804 	adds.w	r8, r2, r4
 800b220:	eb43 0905 	adc.w	r9, r3, r5
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	469a      	mov	sl, r3
 800b22c:	4693      	mov	fp, r2
 800b22e:	4652      	mov	r2, sl
 800b230:	465b      	mov	r3, fp
 800b232:	4640      	mov	r0, r8
 800b234:	4649      	mov	r1, r9
 800b236:	f7f5 fdc3 	bl	8000dc0 <__aeabi_uldivmod>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4613      	mov	r3, r2
 800b240:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b248:	d308      	bcc.n	800b25c <UART_SetConfig+0x430>
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b250:	d204      	bcs.n	800b25c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6a3a      	ldr	r2, [r7, #32]
 800b258:	60da      	str	r2, [r3, #12]
 800b25a:	e0ce      	b.n	800b3fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b262:	e0ca      	b.n	800b3fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b26c:	d166      	bne.n	800b33c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b26e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b272:	2b08      	cmp	r3, #8
 800b274:	d827      	bhi.n	800b2c6 <UART_SetConfig+0x49a>
 800b276:	a201      	add	r2, pc, #4	@ (adr r2, 800b27c <UART_SetConfig+0x450>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b2a1 	.word	0x0800b2a1
 800b280:	0800b2a9 	.word	0x0800b2a9
 800b284:	0800b2b1 	.word	0x0800b2b1
 800b288:	0800b2c7 	.word	0x0800b2c7
 800b28c:	0800b2b7 	.word	0x0800b2b7
 800b290:	0800b2c7 	.word	0x0800b2c7
 800b294:	0800b2c7 	.word	0x0800b2c7
 800b298:	0800b2c7 	.word	0x0800b2c7
 800b29c:	0800b2bf 	.word	0x0800b2bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a0:	f7fb ff76 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 800b2a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2a6:	e014      	b.n	800b2d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2a8:	f7fb ff88 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 800b2ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2ae:	e010      	b.n	800b2d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2b0:	4b4e      	ldr	r3, [pc, #312]	@ (800b3ec <UART_SetConfig+0x5c0>)
 800b2b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2b4:	e00d      	b.n	800b2d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2b6:	f7fb fefd 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 800b2ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2bc:	e009      	b.n	800b2d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2c4:	e005      	b.n	800b2d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b2d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 8090 	beq.w	800b3fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	4a44      	ldr	r2, [pc, #272]	@ (800b3f0 <UART_SetConfig+0x5c4>)
 800b2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2ec:	005a      	lsls	r2, r3, #1
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d916      	bls.n	800b334 <UART_SetConfig+0x508>
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b30c:	d212      	bcs.n	800b334 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	b29b      	uxth	r3, r3
 800b312:	f023 030f 	bic.w	r3, r3, #15
 800b316:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	b29a      	uxth	r2, r3
 800b324:	8bfb      	ldrh	r3, [r7, #30]
 800b326:	4313      	orrs	r3, r2
 800b328:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	8bfa      	ldrh	r2, [r7, #30]
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e062      	b.n	800b3fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b33a:	e05e      	b.n	800b3fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b33c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b340:	2b08      	cmp	r3, #8
 800b342:	d828      	bhi.n	800b396 <UART_SetConfig+0x56a>
 800b344:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <UART_SetConfig+0x520>)
 800b346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34a:	bf00      	nop
 800b34c:	0800b371 	.word	0x0800b371
 800b350:	0800b379 	.word	0x0800b379
 800b354:	0800b381 	.word	0x0800b381
 800b358:	0800b397 	.word	0x0800b397
 800b35c:	0800b387 	.word	0x0800b387
 800b360:	0800b397 	.word	0x0800b397
 800b364:	0800b397 	.word	0x0800b397
 800b368:	0800b397 	.word	0x0800b397
 800b36c:	0800b38f 	.word	0x0800b38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b370:	f7fb ff0e 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 800b374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b376:	e014      	b.n	800b3a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b378:	f7fb ff20 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 800b37c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b37e:	e010      	b.n	800b3a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b380:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ec <UART_SetConfig+0x5c0>)
 800b382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b384:	e00d      	b.n	800b3a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b386:	f7fb fe95 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 800b38a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b38c:	e009      	b.n	800b3a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b38e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b394:	e005      	b.n	800b3a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3a0:	bf00      	nop
    }

    if (pclk != 0U)
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d028      	beq.n	800b3fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ac:	4a10      	ldr	r2, [pc, #64]	@ (800b3f0 <UART_SetConfig+0x5c4>)
 800b3ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	085b      	lsrs	r3, r3, #1
 800b3c0:	441a      	add	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	2b0f      	cmp	r3, #15
 800b3d0:	d910      	bls.n	800b3f4 <UART_SetConfig+0x5c8>
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3d8:	d20c      	bcs.n	800b3f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60da      	str	r2, [r3, #12]
 800b3e4:	e009      	b.n	800b3fa <UART_SetConfig+0x5ce>
 800b3e6:	bf00      	nop
 800b3e8:	40008000 	.word	0x40008000
 800b3ec:	00f42400 	.word	0x00f42400
 800b3f0:	0800cbfc 	.word	0x0800cbfc
      }
      else
      {
        ret = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2201      	movs	r2, #1
 800b406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2200      	movs	r2, #0
 800b40e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2200      	movs	r2, #0
 800b414:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b416:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3730      	adds	r7, #48	@ 0x30
 800b41e:	46bd      	mov	sp, r7
 800b420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b430:	f003 0308 	and.w	r3, r3, #8
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b496:	f003 0304 	and.w	r3, r3, #4
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00a      	beq.n	800b4b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b8:	f003 0310 	and.w	r3, r3, #16
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00a      	beq.n	800b4d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01a      	beq.n	800b53a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b522:	d10a      	bne.n	800b53a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]
  }
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b098      	sub	sp, #96	@ 0x60
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b578:	f7fa fa82 	bl	8005a80 <HAL_GetTick>
 800b57c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0308 	and.w	r3, r3, #8
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d12f      	bne.n	800b5ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b58c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b594:	2200      	movs	r2, #0
 800b596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f88e 	bl	800b6bc <UART_WaitOnFlagUntilTimeout>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d022      	beq.n	800b5ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e6      	bne.n	800b5a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e063      	b.n	800b6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d149      	bne.n	800b68e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b602:	2200      	movs	r2, #0
 800b604:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f857 	bl	800b6bc <UART_WaitOnFlagUntilTimeout>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d03c      	beq.n	800b68e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	623b      	str	r3, [r7, #32]
   return(result);
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b632:	633b      	str	r3, [r7, #48]	@ 0x30
 800b634:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e6      	bne.n	800b614 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	60fb      	str	r3, [r7, #12]
   return(result);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3308      	adds	r3, #8
 800b664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b666:	61fa      	str	r2, [r7, #28]
 800b668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	69b9      	ldr	r1, [r7, #24]
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	617b      	str	r3, [r7, #20]
   return(result);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e5      	bne.n	800b646 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e012      	b.n	800b6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2220      	movs	r2, #32
 800b69a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3758      	adds	r7, #88	@ 0x58
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6cc:	e04f      	b.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d4:	d04b      	beq.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d6:	f7fa f9d3 	bl	8005a80 <HAL_GetTick>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	69ba      	ldr	r2, [r7, #24]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d302      	bcc.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e04e      	b.n	800b78e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d037      	beq.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b80      	cmp	r3, #128	@ 0x80
 800b702:	d034      	beq.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b40      	cmp	r3, #64	@ 0x40
 800b708:	d031      	beq.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b08      	cmp	r3, #8
 800b716:	d110      	bne.n	800b73a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2208      	movs	r2, #8
 800b71e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 f920 	bl	800b966 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2208      	movs	r2, #8
 800b72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e029      	b.n	800b78e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b748:	d111      	bne.n	800b76e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f906 	bl	800b966 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e00f      	b.n	800b78e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69da      	ldr	r2, [r3, #28]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	4013      	ands	r3, r2
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	bf0c      	ite	eq
 800b77e:	2301      	moveq	r3, #1
 800b780:	2300      	movne	r3, #0
 800b782:	b2db      	uxtb	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d0a0      	beq.n	800b6ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b096      	sub	sp, #88	@ 0x58
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	88fa      	ldrh	r2, [r7, #6]
 800b7b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2222      	movs	r2, #34	@ 0x22
 800b7c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d02d      	beq.n	800b82a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7d4:	4a40      	ldr	r2, [pc, #256]	@ (800b8d8 <UART_Start_Receive_DMA+0x140>)
 800b7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7de:	4a3f      	ldr	r2, [pc, #252]	@ (800b8dc <UART_Start_Receive_DMA+0x144>)
 800b7e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7e8:	4a3d      	ldr	r2, [pc, #244]	@ (800b8e0 <UART_Start_Receive_DMA+0x148>)
 800b7ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3324      	adds	r3, #36	@ 0x24
 800b802:	4619      	mov	r1, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b808:	461a      	mov	r2, r3
 800b80a:	88fb      	ldrh	r3, [r7, #6]
 800b80c:	f7fa fafc 	bl	8005e08 <HAL_DMA_Start_IT>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2210      	movs	r2, #16
 800b81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2220      	movs	r2, #32
 800b822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e051      	b.n	800b8ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d018      	beq.n	800b864 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b846:	657b      	str	r3, [r7, #84]	@ 0x54
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b850:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b852:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e6      	bne.n	800b832 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	f043 0301 	orr.w	r3, r3, #1
 800b87a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3308      	adds	r3, #8
 800b882:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b884:	637a      	str	r2, [r7, #52]	@ 0x34
 800b886:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b88a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b88c:	e841 2300 	strex	r3, r2, [r1]
 800b890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e5      	bne.n	800b864 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8b8:	623a      	str	r2, [r7, #32]
 800b8ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	69f9      	ldr	r1, [r7, #28]
 800b8be:	6a3a      	ldr	r2, [r7, #32]
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3758      	adds	r7, #88	@ 0x58
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800baf1 	.word	0x0800baf1
 800b8dc:	0800bc25 	.word	0x0800bc25
 800b8e0:	0800bc6b 	.word	0x0800bc6b

0800b8e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b08f      	sub	sp, #60	@ 0x3c
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b90a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b90c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e6      	bne.n	800b8ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3308      	adds	r3, #8
 800b924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b934:	633b      	str	r3, [r7, #48]	@ 0x30
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3308      	adds	r3, #8
 800b93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b93e:	61ba      	str	r2, [r7, #24]
 800b940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6979      	ldr	r1, [r7, #20]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	613b      	str	r3, [r7, #16]
   return(result);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e5      	bne.n	800b91e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b95a:	bf00      	nop
 800b95c:	373c      	adds	r7, #60	@ 0x3c
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b966:	b480      	push	{r7}
 800b968:	b095      	sub	sp, #84	@ 0x54
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b98c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b98e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b992:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e6      	bne.n	800b96e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	e853 3f00 	ldrex	r3, [r3]
 800b9ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9b6:	f023 0301 	bic.w	r3, r3, #1
 800b9ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e3      	bne.n	800b9a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d118      	bne.n	800ba12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f023 0310 	bic.w	r3, r3, #16
 800b9f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9fe:	61bb      	str	r3, [r7, #24]
 800ba00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6979      	ldr	r1, [r7, #20]
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e6      	bne.n	800b9e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2220      	movs	r2, #32
 800ba16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba26:	bf00      	nop
 800ba28:	3754      	adds	r7, #84	@ 0x54
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b090      	sub	sp, #64	@ 0x40
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d137      	bne.n	800babe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba50:	2200      	movs	r2, #0
 800ba52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	623b      	str	r3, [r7, #32]
   return(result);
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3308      	adds	r3, #8
 800ba74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba76:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e5      	bne.n	800ba56 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	e853 3f00 	ldrex	r3, [r3]
 800ba96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	461a      	mov	r2, r3
 800baa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	69b9      	ldr	r1, [r7, #24]
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	e841 2300 	strex	r3, r2, [r1]
 800bab4:	617b      	str	r3, [r7, #20]
   return(result);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e6      	bne.n	800ba8a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800babc:	e004      	b.n	800bac8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800babe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bac4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bac6:	4798      	blx	r3
}
 800bac8:	bf00      	nop
 800baca:	3740      	adds	r7, #64	@ 0x40
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800badc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b09c      	sub	sp, #112	@ 0x70
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d171      	bne.n	800bbf0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bb0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb32:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb58:	f023 0301 	bic.w	r3, r3, #1
 800bb5c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bb66:	647a      	str	r2, [r7, #68]	@ 0x44
 800bb68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e5      	bne.n	800bb46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	e853 3f00 	ldrex	r3, [r3]
 800bb88:	623b      	str	r3, [r7, #32]
   return(result);
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb90:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3308      	adds	r3, #8
 800bb98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb9a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba2:	e841 2300 	strex	r3, r2, [r1]
 800bba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1e5      	bne.n	800bb7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bbae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb0:	2220      	movs	r2, #32
 800bbb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d118      	bne.n	800bbf0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 0310 	bic.w	r3, r3, #16
 800bbd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	69b9      	ldr	r1, [r7, #24]
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e6      	bne.n	800bbbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d109      	bne.n	800bc12 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800bbfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bc04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc06:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc0e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc10:	e004      	b.n	800bc1c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800bc12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc1a:	4798      	blx	r3
}
 800bc1c:	bf00      	nop
 800bc1e:	3770      	adds	r7, #112	@ 0x70
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc30:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d10b      	bne.n	800bc58 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bc4c:	0852      	lsrs	r2, r2, #1
 800bc4e:	b292      	uxth	r2, r2
 800bc50:	4611      	mov	r1, r2
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc56:	e004      	b.n	800bc62 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	4798      	blx	r3
}
 800bc62:	bf00      	nop
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b086      	sub	sp, #24
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc92:	2b80      	cmp	r3, #128	@ 0x80
 800bc94:	d109      	bne.n	800bcaa <UART_DMAError+0x40>
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b21      	cmp	r3, #33	@ 0x21
 800bc9a:	d106      	bne.n	800bcaa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bca4:	6978      	ldr	r0, [r7, #20]
 800bca6:	f7ff fe1d 	bl	800b8e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb4:	2b40      	cmp	r3, #64	@ 0x40
 800bcb6:	d109      	bne.n	800bccc <UART_DMAError+0x62>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b22      	cmp	r3, #34	@ 0x22
 800bcbc:	d106      	bne.n	800bccc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bcc6:	6978      	ldr	r0, [r7, #20]
 800bcc8:	f7ff fe4d 	bl	800b966 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcd2:	f043 0210 	orr.w	r2, r3, #16
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bce2:	6978      	ldr	r0, [r7, #20]
 800bce4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bce6:	bf00      	nop
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd0e:	bf00      	nop
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b088      	sub	sp, #32
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	e853 3f00 	ldrex	r3, [r3]
 800bd2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd32:	61fb      	str	r3, [r7, #28]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	461a      	mov	r2, r3
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	61bb      	str	r3, [r7, #24]
 800bd3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd40:	6979      	ldr	r1, [r7, #20]
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	613b      	str	r3, [r7, #16]
   return(result);
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e6      	bne.n	800bd1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd68:	bf00      	nop
 800bd6a:	3720      	adds	r7, #32
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d101      	bne.n	800bdc2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e027      	b.n	800be12 <HAL_UARTEx_DisableFifoMode+0x66>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2224      	movs	r2, #36	@ 0x24
 800bdce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 0201 	bic.w	r2, r2, #1
 800bde8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bdf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2220      	movs	r2, #32
 800be04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d101      	bne.n	800be36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be32:	2302      	movs	r3, #2
 800be34:	e02d      	b.n	800be92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2224      	movs	r2, #36	@ 0x24
 800be42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 0201 	bic.w	r2, r2, #1
 800be5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f850 	bl	800bf18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d101      	bne.n	800beb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800beae:	2302      	movs	r3, #2
 800beb0:	e02d      	b.n	800bf0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2224      	movs	r2, #36	@ 0x24
 800bebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f022 0201 	bic.w	r2, r2, #1
 800bed8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f812 	bl	800bf18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2220      	movs	r2, #32
 800bf00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d108      	bne.n	800bf3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf38:	e031      	b.n	800bf9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf3e:	2308      	movs	r3, #8
 800bf40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	0e5b      	lsrs	r3, r3, #25
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0307 	and.w	r3, r3, #7
 800bf50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	0f5b      	lsrs	r3, r3, #29
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0307 	and.w	r3, r3, #7
 800bf60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	7b3a      	ldrb	r2, [r7, #12]
 800bf66:	4911      	ldr	r1, [pc, #68]	@ (800bfac <UARTEx_SetNbDataToProcess+0x94>)
 800bf68:	5c8a      	ldrb	r2, [r1, r2]
 800bf6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf6e:	7b3a      	ldrb	r2, [r7, #12]
 800bf70:	490f      	ldr	r1, [pc, #60]	@ (800bfb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bf72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf74:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	7b7a      	ldrb	r2, [r7, #13]
 800bf84:	4909      	ldr	r1, [pc, #36]	@ (800bfac <UARTEx_SetNbDataToProcess+0x94>)
 800bf86:	5c8a      	ldrb	r2, [r1, r2]
 800bf88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf8c:	7b7a      	ldrb	r2, [r7, #13]
 800bf8e:	4908      	ldr	r1, [pc, #32]	@ (800bfb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bf90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf92:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bf9e:	bf00      	nop
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	0800cc14 	.word	0x0800cc14
 800bfb0:	0800cc1c 	.word	0x0800cc1c

0800bfb4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	ed93 7a06 	vldr	s14, [r3, #24]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	edd3 7a07 	vldr	s15, [r3, #28]
 800bfca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	edd3 7a08 	vldr	s15, [r3, #32]
 800bfd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	edd3 7a06 	vldr	s15, [r3, #24]
 800bfe4:	eeb1 7a67 	vneg.f32	s14, s15
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	edd3 7a08 	vldr	s15, [r3, #32]
 800bfee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1a      	ldr	r2, [r3, #32]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d006      	beq.n	800c018 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	330c      	adds	r3, #12
 800c00e:	220c      	movs	r2, #12
 800c010:	2100      	movs	r1, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f000 f804 	bl	800c020 <memset>
  }

}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <memset>:
 800c020:	4402      	add	r2, r0
 800c022:	4603      	mov	r3, r0
 800c024:	4293      	cmp	r3, r2
 800c026:	d100      	bne.n	800c02a <memset+0xa>
 800c028:	4770      	bx	lr
 800c02a:	f803 1b01 	strb.w	r1, [r3], #1
 800c02e:	e7f9      	b.n	800c024 <memset+0x4>

0800c030 <__errno>:
 800c030:	4b01      	ldr	r3, [pc, #4]	@ (800c038 <__errno+0x8>)
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	20000234 	.word	0x20000234

0800c03c <__libc_init_array>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4d0d      	ldr	r5, [pc, #52]	@ (800c074 <__libc_init_array+0x38>)
 800c040:	4c0d      	ldr	r4, [pc, #52]	@ (800c078 <__libc_init_array+0x3c>)
 800c042:	1b64      	subs	r4, r4, r5
 800c044:	10a4      	asrs	r4, r4, #2
 800c046:	2600      	movs	r6, #0
 800c048:	42a6      	cmp	r6, r4
 800c04a:	d109      	bne.n	800c060 <__libc_init_array+0x24>
 800c04c:	4d0b      	ldr	r5, [pc, #44]	@ (800c07c <__libc_init_array+0x40>)
 800c04e:	4c0c      	ldr	r4, [pc, #48]	@ (800c080 <__libc_init_array+0x44>)
 800c050:	f000 fdbc 	bl	800cbcc <_init>
 800c054:	1b64      	subs	r4, r4, r5
 800c056:	10a4      	asrs	r4, r4, #2
 800c058:	2600      	movs	r6, #0
 800c05a:	42a6      	cmp	r6, r4
 800c05c:	d105      	bne.n	800c06a <__libc_init_array+0x2e>
 800c05e:	bd70      	pop	{r4, r5, r6, pc}
 800c060:	f855 3b04 	ldr.w	r3, [r5], #4
 800c064:	4798      	blx	r3
 800c066:	3601      	adds	r6, #1
 800c068:	e7ee      	b.n	800c048 <__libc_init_array+0xc>
 800c06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06e:	4798      	blx	r3
 800c070:	3601      	adds	r6, #1
 800c072:	e7f2      	b.n	800c05a <__libc_init_array+0x1e>
 800c074:	0800cffc 	.word	0x0800cffc
 800c078:	0800cffc 	.word	0x0800cffc
 800c07c:	0800cffc 	.word	0x0800cffc
 800c080:	0800d000 	.word	0x0800d000

0800c084 <memcpy>:
 800c084:	440a      	add	r2, r1
 800c086:	4291      	cmp	r1, r2
 800c088:	f100 33ff 	add.w	r3, r0, #4294967295
 800c08c:	d100      	bne.n	800c090 <memcpy+0xc>
 800c08e:	4770      	bx	lr
 800c090:	b510      	push	{r4, lr}
 800c092:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c09a:	4291      	cmp	r1, r2
 800c09c:	d1f9      	bne.n	800c092 <memcpy+0xe>
 800c09e:	bd10      	pop	{r4, pc}

0800c0a0 <sqrtf>:
 800c0a0:	b508      	push	{r3, lr}
 800c0a2:	ed2d 8b02 	vpush	{d8}
 800c0a6:	eeb0 8a40 	vmov.f32	s16, s0
 800c0aa:	f000 f8a1 	bl	800c1f0 <__ieee754_sqrtf>
 800c0ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800c0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b6:	d60c      	bvs.n	800c0d2 <sqrtf+0x32>
 800c0b8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c0d8 <sqrtf+0x38>
 800c0bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c4:	d505      	bpl.n	800c0d2 <sqrtf+0x32>
 800c0c6:	f7ff ffb3 	bl	800c030 <__errno>
 800c0ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c0ce:	2321      	movs	r3, #33	@ 0x21
 800c0d0:	6003      	str	r3, [r0, #0]
 800c0d2:	ecbd 8b02 	vpop	{d8}
 800c0d6:	bd08      	pop	{r3, pc}
 800c0d8:	00000000 	.word	0x00000000

0800c0dc <cosf>:
 800c0dc:	ee10 3a10 	vmov	r3, s0
 800c0e0:	b507      	push	{r0, r1, r2, lr}
 800c0e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c15c <cosf+0x80>)
 800c0e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d806      	bhi.n	800c0fa <cosf+0x1e>
 800c0ec:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c160 <cosf+0x84>
 800c0f0:	b003      	add	sp, #12
 800c0f2:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f6:	f000 b87f 	b.w	800c1f8 <__kernel_cosf>
 800c0fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c0fe:	d304      	bcc.n	800c10a <cosf+0x2e>
 800c100:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c104:	b003      	add	sp, #12
 800c106:	f85d fb04 	ldr.w	pc, [sp], #4
 800c10a:	4668      	mov	r0, sp
 800c10c:	f000 f914 	bl	800c338 <__ieee754_rem_pio2f>
 800c110:	f000 0003 	and.w	r0, r0, #3
 800c114:	2801      	cmp	r0, #1
 800c116:	d009      	beq.n	800c12c <cosf+0x50>
 800c118:	2802      	cmp	r0, #2
 800c11a:	d010      	beq.n	800c13e <cosf+0x62>
 800c11c:	b9b0      	cbnz	r0, 800c14c <cosf+0x70>
 800c11e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c122:	ed9d 0a00 	vldr	s0, [sp]
 800c126:	f000 f867 	bl	800c1f8 <__kernel_cosf>
 800c12a:	e7eb      	b.n	800c104 <cosf+0x28>
 800c12c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c130:	ed9d 0a00 	vldr	s0, [sp]
 800c134:	f000 f8b8 	bl	800c2a8 <__kernel_sinf>
 800c138:	eeb1 0a40 	vneg.f32	s0, s0
 800c13c:	e7e2      	b.n	800c104 <cosf+0x28>
 800c13e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c142:	ed9d 0a00 	vldr	s0, [sp]
 800c146:	f000 f857 	bl	800c1f8 <__kernel_cosf>
 800c14a:	e7f5      	b.n	800c138 <cosf+0x5c>
 800c14c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c150:	ed9d 0a00 	vldr	s0, [sp]
 800c154:	2001      	movs	r0, #1
 800c156:	f000 f8a7 	bl	800c2a8 <__kernel_sinf>
 800c15a:	e7d3      	b.n	800c104 <cosf+0x28>
 800c15c:	3f490fd8 	.word	0x3f490fd8
 800c160:	00000000 	.word	0x00000000

0800c164 <sinf>:
 800c164:	ee10 3a10 	vmov	r3, s0
 800c168:	b507      	push	{r0, r1, r2, lr}
 800c16a:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e8 <sinf+0x84>)
 800c16c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c170:	4293      	cmp	r3, r2
 800c172:	d807      	bhi.n	800c184 <sinf+0x20>
 800c174:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c1ec <sinf+0x88>
 800c178:	2000      	movs	r0, #0
 800c17a:	b003      	add	sp, #12
 800c17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c180:	f000 b892 	b.w	800c2a8 <__kernel_sinf>
 800c184:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c188:	d304      	bcc.n	800c194 <sinf+0x30>
 800c18a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c18e:	b003      	add	sp, #12
 800c190:	f85d fb04 	ldr.w	pc, [sp], #4
 800c194:	4668      	mov	r0, sp
 800c196:	f000 f8cf 	bl	800c338 <__ieee754_rem_pio2f>
 800c19a:	f000 0003 	and.w	r0, r0, #3
 800c19e:	2801      	cmp	r0, #1
 800c1a0:	d00a      	beq.n	800c1b8 <sinf+0x54>
 800c1a2:	2802      	cmp	r0, #2
 800c1a4:	d00f      	beq.n	800c1c6 <sinf+0x62>
 800c1a6:	b9c0      	cbnz	r0, 800c1da <sinf+0x76>
 800c1a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1ac:	ed9d 0a00 	vldr	s0, [sp]
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	f000 f879 	bl	800c2a8 <__kernel_sinf>
 800c1b6:	e7ea      	b.n	800c18e <sinf+0x2a>
 800c1b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1bc:	ed9d 0a00 	vldr	s0, [sp]
 800c1c0:	f000 f81a 	bl	800c1f8 <__kernel_cosf>
 800c1c4:	e7e3      	b.n	800c18e <sinf+0x2a>
 800c1c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1ca:	ed9d 0a00 	vldr	s0, [sp]
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	f000 f86a 	bl	800c2a8 <__kernel_sinf>
 800c1d4:	eeb1 0a40 	vneg.f32	s0, s0
 800c1d8:	e7d9      	b.n	800c18e <sinf+0x2a>
 800c1da:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1de:	ed9d 0a00 	vldr	s0, [sp]
 800c1e2:	f000 f809 	bl	800c1f8 <__kernel_cosf>
 800c1e6:	e7f5      	b.n	800c1d4 <sinf+0x70>
 800c1e8:	3f490fd8 	.word	0x3f490fd8
 800c1ec:	00000000 	.word	0x00000000

0800c1f0 <__ieee754_sqrtf>:
 800c1f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <__kernel_cosf>:
 800c1f8:	ee10 3a10 	vmov	r3, s0
 800c1fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c200:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c204:	eef0 6a40 	vmov.f32	s13, s0
 800c208:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c20c:	d204      	bcs.n	800c218 <__kernel_cosf+0x20>
 800c20e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c212:	ee17 2a90 	vmov	r2, s15
 800c216:	b342      	cbz	r2, 800c26a <__kernel_cosf+0x72>
 800c218:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c21c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c288 <__kernel_cosf+0x90>
 800c220:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c28c <__kernel_cosf+0x94>
 800c224:	4a1a      	ldr	r2, [pc, #104]	@ (800c290 <__kernel_cosf+0x98>)
 800c226:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c22a:	4293      	cmp	r3, r2
 800c22c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c294 <__kernel_cosf+0x9c>
 800c230:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c234:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c298 <__kernel_cosf+0xa0>
 800c238:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c23c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c29c <__kernel_cosf+0xa4>
 800c240:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c244:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c2a0 <__kernel_cosf+0xa8>
 800c248:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c24c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c250:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c254:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c258:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c260:	d804      	bhi.n	800c26c <__kernel_cosf+0x74>
 800c262:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c266:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c26a:	4770      	bx	lr
 800c26c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2a4 <__kernel_cosf+0xac>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	bf9a      	itte	ls
 800c272:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c276:	ee07 3a10 	vmovls	s14, r3
 800c27a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c27e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c286:	e7ec      	b.n	800c262 <__kernel_cosf+0x6a>
 800c288:	ad47d74e 	.word	0xad47d74e
 800c28c:	310f74f6 	.word	0x310f74f6
 800c290:	3e999999 	.word	0x3e999999
 800c294:	b493f27c 	.word	0xb493f27c
 800c298:	37d00d01 	.word	0x37d00d01
 800c29c:	bab60b61 	.word	0xbab60b61
 800c2a0:	3d2aaaab 	.word	0x3d2aaaab
 800c2a4:	3f480000 	.word	0x3f480000

0800c2a8 <__kernel_sinf>:
 800c2a8:	ee10 3a10 	vmov	r3, s0
 800c2ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c2b4:	d204      	bcs.n	800c2c0 <__kernel_sinf+0x18>
 800c2b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c2ba:	ee17 3a90 	vmov	r3, s15
 800c2be:	b35b      	cbz	r3, 800c318 <__kernel_sinf+0x70>
 800c2c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c2c4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c31c <__kernel_sinf+0x74>
 800c2c8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c320 <__kernel_sinf+0x78>
 800c2cc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c2d0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c324 <__kernel_sinf+0x7c>
 800c2d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c2d8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c328 <__kernel_sinf+0x80>
 800c2dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c2e0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c32c <__kernel_sinf+0x84>
 800c2e4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c2e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c2ec:	b930      	cbnz	r0, 800c2fc <__kernel_sinf+0x54>
 800c2ee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c330 <__kernel_sinf+0x88>
 800c2f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c2f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c2fa:	4770      	bx	lr
 800c2fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c300:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c304:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c308:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c30c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c334 <__kernel_sinf+0x8c>
 800c310:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c314:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c320:	b2d72f34 	.word	0xb2d72f34
 800c324:	3638ef1b 	.word	0x3638ef1b
 800c328:	b9500d01 	.word	0xb9500d01
 800c32c:	3c088889 	.word	0x3c088889
 800c330:	be2aaaab 	.word	0xbe2aaaab
 800c334:	3e2aaaab 	.word	0x3e2aaaab

0800c338 <__ieee754_rem_pio2f>:
 800c338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33a:	ee10 6a10 	vmov	r6, s0
 800c33e:	4b88      	ldr	r3, [pc, #544]	@ (800c560 <__ieee754_rem_pio2f+0x228>)
 800c340:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c344:	429d      	cmp	r5, r3
 800c346:	b087      	sub	sp, #28
 800c348:	4604      	mov	r4, r0
 800c34a:	d805      	bhi.n	800c358 <__ieee754_rem_pio2f+0x20>
 800c34c:	2300      	movs	r3, #0
 800c34e:	ed80 0a00 	vstr	s0, [r0]
 800c352:	6043      	str	r3, [r0, #4]
 800c354:	2000      	movs	r0, #0
 800c356:	e022      	b.n	800c39e <__ieee754_rem_pio2f+0x66>
 800c358:	4b82      	ldr	r3, [pc, #520]	@ (800c564 <__ieee754_rem_pio2f+0x22c>)
 800c35a:	429d      	cmp	r5, r3
 800c35c:	d83a      	bhi.n	800c3d4 <__ieee754_rem_pio2f+0x9c>
 800c35e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c362:	2e00      	cmp	r6, #0
 800c364:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c568 <__ieee754_rem_pio2f+0x230>
 800c368:	4a80      	ldr	r2, [pc, #512]	@ (800c56c <__ieee754_rem_pio2f+0x234>)
 800c36a:	f023 030f 	bic.w	r3, r3, #15
 800c36e:	dd18      	ble.n	800c3a2 <__ieee754_rem_pio2f+0x6a>
 800c370:	4293      	cmp	r3, r2
 800c372:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c376:	bf09      	itett	eq
 800c378:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c570 <__ieee754_rem_pio2f+0x238>
 800c37c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c574 <__ieee754_rem_pio2f+0x23c>
 800c380:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c578 <__ieee754_rem_pio2f+0x240>
 800c384:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c388:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c38c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c390:	ed80 7a00 	vstr	s14, [r0]
 800c394:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c398:	edc0 7a01 	vstr	s15, [r0, #4]
 800c39c:	2001      	movs	r0, #1
 800c39e:	b007      	add	sp, #28
 800c3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c3a8:	bf09      	itett	eq
 800c3aa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c570 <__ieee754_rem_pio2f+0x238>
 800c3ae:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c574 <__ieee754_rem_pio2f+0x23c>
 800c3b2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c578 <__ieee754_rem_pio2f+0x240>
 800c3b6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c3ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3c2:	ed80 7a00 	vstr	s14, [r0]
 800c3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ca:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d2:	e7e4      	b.n	800c39e <__ieee754_rem_pio2f+0x66>
 800c3d4:	4b69      	ldr	r3, [pc, #420]	@ (800c57c <__ieee754_rem_pio2f+0x244>)
 800c3d6:	429d      	cmp	r5, r3
 800c3d8:	d873      	bhi.n	800c4c2 <__ieee754_rem_pio2f+0x18a>
 800c3da:	f000 f8dd 	bl	800c598 <fabsf>
 800c3de:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c580 <__ieee754_rem_pio2f+0x248>
 800c3e2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c3e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c3ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3f2:	ee17 0a90 	vmov	r0, s15
 800c3f6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c568 <__ieee754_rem_pio2f+0x230>
 800c3fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c3fe:	281f      	cmp	r0, #31
 800c400:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c574 <__ieee754_rem_pio2f+0x23c>
 800c404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c408:	eeb1 6a47 	vneg.f32	s12, s14
 800c40c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c410:	ee16 1a90 	vmov	r1, s13
 800c414:	dc09      	bgt.n	800c42a <__ieee754_rem_pio2f+0xf2>
 800c416:	4a5b      	ldr	r2, [pc, #364]	@ (800c584 <__ieee754_rem_pio2f+0x24c>)
 800c418:	1e47      	subs	r7, r0, #1
 800c41a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c41e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c422:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c426:	4293      	cmp	r3, r2
 800c428:	d107      	bne.n	800c43a <__ieee754_rem_pio2f+0x102>
 800c42a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c42e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c432:	2a08      	cmp	r2, #8
 800c434:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c438:	dc14      	bgt.n	800c464 <__ieee754_rem_pio2f+0x12c>
 800c43a:	6021      	str	r1, [r4, #0]
 800c43c:	ed94 7a00 	vldr	s14, [r4]
 800c440:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c444:	2e00      	cmp	r6, #0
 800c446:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c44a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c44e:	daa6      	bge.n	800c39e <__ieee754_rem_pio2f+0x66>
 800c450:	eeb1 7a47 	vneg.f32	s14, s14
 800c454:	eeb1 0a40 	vneg.f32	s0, s0
 800c458:	ed84 7a00 	vstr	s14, [r4]
 800c45c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c460:	4240      	negs	r0, r0
 800c462:	e79c      	b.n	800c39e <__ieee754_rem_pio2f+0x66>
 800c464:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c570 <__ieee754_rem_pio2f+0x238>
 800c468:	eef0 6a40 	vmov.f32	s13, s0
 800c46c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c470:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c474:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c478:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c578 <__ieee754_rem_pio2f+0x240>
 800c47c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c480:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c484:	ee15 2a90 	vmov	r2, s11
 800c488:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c48c:	1a5b      	subs	r3, r3, r1
 800c48e:	2b19      	cmp	r3, #25
 800c490:	dc04      	bgt.n	800c49c <__ieee754_rem_pio2f+0x164>
 800c492:	edc4 5a00 	vstr	s11, [r4]
 800c496:	eeb0 0a66 	vmov.f32	s0, s13
 800c49a:	e7cf      	b.n	800c43c <__ieee754_rem_pio2f+0x104>
 800c49c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c588 <__ieee754_rem_pio2f+0x250>
 800c4a0:	eeb0 0a66 	vmov.f32	s0, s13
 800c4a4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c4a8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c4ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c58c <__ieee754_rem_pio2f+0x254>
 800c4b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c4b4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c4b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c4bc:	ed84 7a00 	vstr	s14, [r4]
 800c4c0:	e7bc      	b.n	800c43c <__ieee754_rem_pio2f+0x104>
 800c4c2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c4c6:	d306      	bcc.n	800c4d6 <__ieee754_rem_pio2f+0x19e>
 800c4c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c4cc:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4d0:	edc0 7a00 	vstr	s15, [r0]
 800c4d4:	e73e      	b.n	800c354 <__ieee754_rem_pio2f+0x1c>
 800c4d6:	15ea      	asrs	r2, r5, #23
 800c4d8:	3a86      	subs	r2, #134	@ 0x86
 800c4da:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4e6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c590 <__ieee754_rem_pio2f+0x258>
 800c4ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4f2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c4f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c506:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c50a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c50e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c516:	edcd 7a05 	vstr	s15, [sp, #20]
 800c51a:	d11e      	bne.n	800c55a <__ieee754_rem_pio2f+0x222>
 800c51c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c524:	bf0c      	ite	eq
 800c526:	2301      	moveq	r3, #1
 800c528:	2302      	movne	r3, #2
 800c52a:	491a      	ldr	r1, [pc, #104]	@ (800c594 <__ieee754_rem_pio2f+0x25c>)
 800c52c:	9101      	str	r1, [sp, #4]
 800c52e:	2102      	movs	r1, #2
 800c530:	9100      	str	r1, [sp, #0]
 800c532:	a803      	add	r0, sp, #12
 800c534:	4621      	mov	r1, r4
 800c536:	f000 f89d 	bl	800c674 <__kernel_rem_pio2f>
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	f6bf af2f 	bge.w	800c39e <__ieee754_rem_pio2f+0x66>
 800c540:	edd4 7a00 	vldr	s15, [r4]
 800c544:	eef1 7a67 	vneg.f32	s15, s15
 800c548:	edc4 7a00 	vstr	s15, [r4]
 800c54c:	edd4 7a01 	vldr	s15, [r4, #4]
 800c550:	eef1 7a67 	vneg.f32	s15, s15
 800c554:	edc4 7a01 	vstr	s15, [r4, #4]
 800c558:	e782      	b.n	800c460 <__ieee754_rem_pio2f+0x128>
 800c55a:	2303      	movs	r3, #3
 800c55c:	e7e5      	b.n	800c52a <__ieee754_rem_pio2f+0x1f2>
 800c55e:	bf00      	nop
 800c560:	3f490fd8 	.word	0x3f490fd8
 800c564:	4016cbe3 	.word	0x4016cbe3
 800c568:	3fc90f80 	.word	0x3fc90f80
 800c56c:	3fc90fd0 	.word	0x3fc90fd0
 800c570:	37354400 	.word	0x37354400
 800c574:	37354443 	.word	0x37354443
 800c578:	2e85a308 	.word	0x2e85a308
 800c57c:	43490f80 	.word	0x43490f80
 800c580:	3f22f984 	.word	0x3f22f984
 800c584:	0800cc24 	.word	0x0800cc24
 800c588:	2e85a300 	.word	0x2e85a300
 800c58c:	248d3132 	.word	0x248d3132
 800c590:	43800000 	.word	0x43800000
 800c594:	0800cca4 	.word	0x0800cca4

0800c598 <fabsf>:
 800c598:	ee10 3a10 	vmov	r3, s0
 800c59c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5a0:	ee00 3a10 	vmov	s0, r3
 800c5a4:	4770      	bx	lr
	...

0800c5a8 <scalbnf>:
 800c5a8:	ee10 3a10 	vmov	r3, s0
 800c5ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c5b0:	d02b      	beq.n	800c60a <scalbnf+0x62>
 800c5b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c5b6:	d302      	bcc.n	800c5be <scalbnf+0x16>
 800c5b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5bc:	4770      	bx	lr
 800c5be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c5c2:	d123      	bne.n	800c60c <scalbnf+0x64>
 800c5c4:	4b24      	ldr	r3, [pc, #144]	@ (800c658 <scalbnf+0xb0>)
 800c5c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c65c <scalbnf+0xb4>
 800c5ca:	4298      	cmp	r0, r3
 800c5cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c5d0:	db17      	blt.n	800c602 <scalbnf+0x5a>
 800c5d2:	ee10 3a10 	vmov	r3, s0
 800c5d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5da:	3a19      	subs	r2, #25
 800c5dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c5e0:	4288      	cmp	r0, r1
 800c5e2:	dd15      	ble.n	800c610 <scalbnf+0x68>
 800c5e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c660 <scalbnf+0xb8>
 800c5e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c664 <scalbnf+0xbc>
 800c5ec:	ee10 3a10 	vmov	r3, s0
 800c5f0:	eeb0 7a67 	vmov.f32	s14, s15
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfb8      	it	lt
 800c5f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800c5fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c600:	4770      	bx	lr
 800c602:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c668 <scalbnf+0xc0>
 800c606:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c60a:	4770      	bx	lr
 800c60c:	0dd2      	lsrs	r2, r2, #23
 800c60e:	e7e5      	b.n	800c5dc <scalbnf+0x34>
 800c610:	4410      	add	r0, r2
 800c612:	28fe      	cmp	r0, #254	@ 0xfe
 800c614:	dce6      	bgt.n	800c5e4 <scalbnf+0x3c>
 800c616:	2800      	cmp	r0, #0
 800c618:	dd06      	ble.n	800c628 <scalbnf+0x80>
 800c61a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c61e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c622:	ee00 3a10 	vmov	s0, r3
 800c626:	4770      	bx	lr
 800c628:	f110 0f16 	cmn.w	r0, #22
 800c62c:	da09      	bge.n	800c642 <scalbnf+0x9a>
 800c62e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c668 <scalbnf+0xc0>
 800c632:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c66c <scalbnf+0xc4>
 800c636:	ee10 3a10 	vmov	r3, s0
 800c63a:	eeb0 7a67 	vmov.f32	s14, s15
 800c63e:	2b00      	cmp	r3, #0
 800c640:	e7d9      	b.n	800c5f6 <scalbnf+0x4e>
 800c642:	3019      	adds	r0, #25
 800c644:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c648:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c64c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c670 <scalbnf+0xc8>
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	e7d7      	b.n	800c606 <scalbnf+0x5e>
 800c656:	bf00      	nop
 800c658:	ffff3cb0 	.word	0xffff3cb0
 800c65c:	4c000000 	.word	0x4c000000
 800c660:	7149f2ca 	.word	0x7149f2ca
 800c664:	f149f2ca 	.word	0xf149f2ca
 800c668:	0da24260 	.word	0x0da24260
 800c66c:	8da24260 	.word	0x8da24260
 800c670:	33000000 	.word	0x33000000

0800c674 <__kernel_rem_pio2f>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	ed2d 8b04 	vpush	{d8-d9}
 800c67c:	b0d9      	sub	sp, #356	@ 0x164
 800c67e:	4690      	mov	r8, r2
 800c680:	9001      	str	r0, [sp, #4]
 800c682:	4ab6      	ldr	r2, [pc, #728]	@ (800c95c <__kernel_rem_pio2f+0x2e8>)
 800c684:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c686:	f118 0f04 	cmn.w	r8, #4
 800c68a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c68e:	460f      	mov	r7, r1
 800c690:	f103 3bff 	add.w	fp, r3, #4294967295
 800c694:	db26      	blt.n	800c6e4 <__kernel_rem_pio2f+0x70>
 800c696:	f1b8 0203 	subs.w	r2, r8, #3
 800c69a:	bf48      	it	mi
 800c69c:	f108 0204 	addmi.w	r2, r8, #4
 800c6a0:	10d2      	asrs	r2, r2, #3
 800c6a2:	1c55      	adds	r5, r2, #1
 800c6a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c6a6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800c6aa:	00e8      	lsls	r0, r5, #3
 800c6ac:	eba2 060b 	sub.w	r6, r2, fp
 800c6b0:	9002      	str	r0, [sp, #8]
 800c6b2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c6b6:	eb0a 0c0b 	add.w	ip, sl, fp
 800c6ba:	ac1c      	add	r4, sp, #112	@ 0x70
 800c6bc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	4560      	cmp	r0, ip
 800c6c4:	dd10      	ble.n	800c6e8 <__kernel_rem_pio2f+0x74>
 800c6c6:	a91c      	add	r1, sp, #112	@ 0x70
 800c6c8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c6cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c6d0:	2600      	movs	r6, #0
 800c6d2:	4556      	cmp	r6, sl
 800c6d4:	dc24      	bgt.n	800c720 <__kernel_rem_pio2f+0xac>
 800c6d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c6da:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800c6de:	4684      	mov	ip, r0
 800c6e0:	2400      	movs	r4, #0
 800c6e2:	e016      	b.n	800c712 <__kernel_rem_pio2f+0x9e>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	e7dc      	b.n	800c6a2 <__kernel_rem_pio2f+0x2e>
 800c6e8:	42c6      	cmn	r6, r0
 800c6ea:	bf5d      	ittte	pl
 800c6ec:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c6f0:	ee07 1a90 	vmovpl	s15, r1
 800c6f4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c6f8:	eef0 7a47 	vmovmi.f32	s15, s14
 800c6fc:	ece4 7a01 	vstmia	r4!, {s15}
 800c700:	3001      	adds	r0, #1
 800c702:	e7de      	b.n	800c6c2 <__kernel_rem_pio2f+0x4e>
 800c704:	ecfe 6a01 	vldmia	lr!, {s13}
 800c708:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c70c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c710:	3401      	adds	r4, #1
 800c712:	455c      	cmp	r4, fp
 800c714:	ddf6      	ble.n	800c704 <__kernel_rem_pio2f+0x90>
 800c716:	ece9 7a01 	vstmia	r9!, {s15}
 800c71a:	3601      	adds	r6, #1
 800c71c:	3004      	adds	r0, #4
 800c71e:	e7d8      	b.n	800c6d2 <__kernel_rem_pio2f+0x5e>
 800c720:	a908      	add	r1, sp, #32
 800c722:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c726:	9104      	str	r1, [sp, #16]
 800c728:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c72a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c968 <__kernel_rem_pio2f+0x2f4>
 800c72e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c964 <__kernel_rem_pio2f+0x2f0>
 800c732:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c736:	9203      	str	r2, [sp, #12]
 800c738:	4654      	mov	r4, sl
 800c73a:	00a2      	lsls	r2, r4, #2
 800c73c:	9205      	str	r2, [sp, #20]
 800c73e:	aa58      	add	r2, sp, #352	@ 0x160
 800c740:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c744:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c748:	a944      	add	r1, sp, #272	@ 0x110
 800c74a:	aa08      	add	r2, sp, #32
 800c74c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c750:	4694      	mov	ip, r2
 800c752:	4626      	mov	r6, r4
 800c754:	2e00      	cmp	r6, #0
 800c756:	dc4c      	bgt.n	800c7f2 <__kernel_rem_pio2f+0x17e>
 800c758:	4628      	mov	r0, r5
 800c75a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c75e:	f7ff ff23 	bl	800c5a8 <scalbnf>
 800c762:	eeb0 8a40 	vmov.f32	s16, s0
 800c766:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c76a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c76e:	f000 f9e9 	bl	800cb44 <floorf>
 800c772:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c776:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c77a:	2d00      	cmp	r5, #0
 800c77c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c780:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c784:	ee17 9a90 	vmov	r9, s15
 800c788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c78c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c790:	dd41      	ble.n	800c816 <__kernel_rem_pio2f+0x1a2>
 800c792:	f104 3cff 	add.w	ip, r4, #4294967295
 800c796:	a908      	add	r1, sp, #32
 800c798:	f1c5 0e08 	rsb	lr, r5, #8
 800c79c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c7a0:	fa46 f00e 	asr.w	r0, r6, lr
 800c7a4:	4481      	add	r9, r0
 800c7a6:	fa00 f00e 	lsl.w	r0, r0, lr
 800c7aa:	1a36      	subs	r6, r6, r0
 800c7ac:	f1c5 0007 	rsb	r0, r5, #7
 800c7b0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c7b4:	4106      	asrs	r6, r0
 800c7b6:	2e00      	cmp	r6, #0
 800c7b8:	dd3c      	ble.n	800c834 <__kernel_rem_pio2f+0x1c0>
 800c7ba:	f04f 0e00 	mov.w	lr, #0
 800c7be:	f109 0901 	add.w	r9, r9, #1
 800c7c2:	4670      	mov	r0, lr
 800c7c4:	4574      	cmp	r4, lr
 800c7c6:	dc68      	bgt.n	800c89a <__kernel_rem_pio2f+0x226>
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	dd03      	ble.n	800c7d4 <__kernel_rem_pio2f+0x160>
 800c7cc:	2d01      	cmp	r5, #1
 800c7ce:	d074      	beq.n	800c8ba <__kernel_rem_pio2f+0x246>
 800c7d0:	2d02      	cmp	r5, #2
 800c7d2:	d07d      	beq.n	800c8d0 <__kernel_rem_pio2f+0x25c>
 800c7d4:	2e02      	cmp	r6, #2
 800c7d6:	d12d      	bne.n	800c834 <__kernel_rem_pio2f+0x1c0>
 800c7d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c7dc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c7e0:	b340      	cbz	r0, 800c834 <__kernel_rem_pio2f+0x1c0>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	9306      	str	r3, [sp, #24]
 800c7e6:	f7ff fedf 	bl	800c5a8 <scalbnf>
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c7f0:	e020      	b.n	800c834 <__kernel_rem_pio2f+0x1c0>
 800c7f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c7f6:	3e01      	subs	r6, #1
 800c7f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c800:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c808:	ecac 0a01 	vstmia	ip!, {s0}
 800c80c:	ed30 0a01 	vldmdb	r0!, {s0}
 800c810:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c814:	e79e      	b.n	800c754 <__kernel_rem_pio2f+0xe0>
 800c816:	d105      	bne.n	800c824 <__kernel_rem_pio2f+0x1b0>
 800c818:	1e60      	subs	r0, r4, #1
 800c81a:	a908      	add	r1, sp, #32
 800c81c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c820:	11f6      	asrs	r6, r6, #7
 800c822:	e7c8      	b.n	800c7b6 <__kernel_rem_pio2f+0x142>
 800c824:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c828:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c830:	da31      	bge.n	800c896 <__kernel_rem_pio2f+0x222>
 800c832:	2600      	movs	r6, #0
 800c834:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83c:	f040 8098 	bne.w	800c970 <__kernel_rem_pio2f+0x2fc>
 800c840:	1e60      	subs	r0, r4, #1
 800c842:	2200      	movs	r2, #0
 800c844:	4550      	cmp	r0, sl
 800c846:	da4b      	bge.n	800c8e0 <__kernel_rem_pio2f+0x26c>
 800c848:	2a00      	cmp	r2, #0
 800c84a:	d065      	beq.n	800c918 <__kernel_rem_pio2f+0x2a4>
 800c84c:	3c01      	subs	r4, #1
 800c84e:	ab08      	add	r3, sp, #32
 800c850:	3d08      	subs	r5, #8
 800c852:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0f8      	beq.n	800c84c <__kernel_rem_pio2f+0x1d8>
 800c85a:	4628      	mov	r0, r5
 800c85c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c860:	f7ff fea2 	bl	800c5a8 <scalbnf>
 800c864:	1c63      	adds	r3, r4, #1
 800c866:	aa44      	add	r2, sp, #272	@ 0x110
 800c868:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c968 <__kernel_rem_pio2f+0x2f4>
 800c86c:	0099      	lsls	r1, r3, #2
 800c86e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c872:	4623      	mov	r3, r4
 800c874:	2b00      	cmp	r3, #0
 800c876:	f280 80a9 	bge.w	800c9cc <__kernel_rem_pio2f+0x358>
 800c87a:	4623      	mov	r3, r4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f2c0 80c7 	blt.w	800ca10 <__kernel_rem_pio2f+0x39c>
 800c882:	aa44      	add	r2, sp, #272	@ 0x110
 800c884:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c888:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c960 <__kernel_rem_pio2f+0x2ec>
 800c88c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800c890:	2000      	movs	r0, #0
 800c892:	1ae2      	subs	r2, r4, r3
 800c894:	e0b1      	b.n	800c9fa <__kernel_rem_pio2f+0x386>
 800c896:	2602      	movs	r6, #2
 800c898:	e78f      	b.n	800c7ba <__kernel_rem_pio2f+0x146>
 800c89a:	f852 1b04 	ldr.w	r1, [r2], #4
 800c89e:	b948      	cbnz	r0, 800c8b4 <__kernel_rem_pio2f+0x240>
 800c8a0:	b121      	cbz	r1, 800c8ac <__kernel_rem_pio2f+0x238>
 800c8a2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c8a6:	f842 1c04 	str.w	r1, [r2, #-4]
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	f10e 0e01 	add.w	lr, lr, #1
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	e787      	b.n	800c7c4 <__kernel_rem_pio2f+0x150>
 800c8b4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c8b8:	e7f5      	b.n	800c8a6 <__kernel_rem_pio2f+0x232>
 800c8ba:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8be:	aa08      	add	r2, sp, #32
 800c8c0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c8c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c8c8:	a908      	add	r1, sp, #32
 800c8ca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c8ce:	e781      	b.n	800c7d4 <__kernel_rem_pio2f+0x160>
 800c8d0:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8d4:	aa08      	add	r2, sp, #32
 800c8d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c8da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c8de:	e7f3      	b.n	800c8c8 <__kernel_rem_pio2f+0x254>
 800c8e0:	a908      	add	r1, sp, #32
 800c8e2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c8e6:	3801      	subs	r0, #1
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	e7ab      	b.n	800c844 <__kernel_rem_pio2f+0x1d0>
 800c8ec:	3201      	adds	r2, #1
 800c8ee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	d0fa      	beq.n	800c8ec <__kernel_rem_pio2f+0x278>
 800c8f6:	9905      	ldr	r1, [sp, #20]
 800c8f8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c8fc:	eb0d 0001 	add.w	r0, sp, r1
 800c900:	18e6      	adds	r6, r4, r3
 800c902:	a91c      	add	r1, sp, #112	@ 0x70
 800c904:	f104 0c01 	add.w	ip, r4, #1
 800c908:	384c      	subs	r0, #76	@ 0x4c
 800c90a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c90e:	4422      	add	r2, r4
 800c910:	4562      	cmp	r2, ip
 800c912:	da04      	bge.n	800c91e <__kernel_rem_pio2f+0x2aa>
 800c914:	4614      	mov	r4, r2
 800c916:	e710      	b.n	800c73a <__kernel_rem_pio2f+0xc6>
 800c918:	9804      	ldr	r0, [sp, #16]
 800c91a:	2201      	movs	r2, #1
 800c91c:	e7e7      	b.n	800c8ee <__kernel_rem_pio2f+0x27a>
 800c91e:	9903      	ldr	r1, [sp, #12]
 800c920:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c924:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c928:	9105      	str	r1, [sp, #20]
 800c92a:	ee07 1a90 	vmov	s15, r1
 800c92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c932:	2400      	movs	r4, #0
 800c934:	ece6 7a01 	vstmia	r6!, {s15}
 800c938:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800c93c:	46b1      	mov	r9, r6
 800c93e:	455c      	cmp	r4, fp
 800c940:	dd04      	ble.n	800c94c <__kernel_rem_pio2f+0x2d8>
 800c942:	ece0 7a01 	vstmia	r0!, {s15}
 800c946:	f10c 0c01 	add.w	ip, ip, #1
 800c94a:	e7e1      	b.n	800c910 <__kernel_rem_pio2f+0x29c>
 800c94c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c950:	ed39 7a01 	vldmdb	r9!, {s14}
 800c954:	3401      	adds	r4, #1
 800c956:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c95a:	e7f0      	b.n	800c93e <__kernel_rem_pio2f+0x2ca>
 800c95c:	0800cfe8 	.word	0x0800cfe8
 800c960:	0800cfbc 	.word	0x0800cfbc
 800c964:	43800000 	.word	0x43800000
 800c968:	3b800000 	.word	0x3b800000
 800c96c:	00000000 	.word	0x00000000
 800c970:	9b02      	ldr	r3, [sp, #8]
 800c972:	eeb0 0a48 	vmov.f32	s0, s16
 800c976:	eba3 0008 	sub.w	r0, r3, r8
 800c97a:	f7ff fe15 	bl	800c5a8 <scalbnf>
 800c97e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c964 <__kernel_rem_pio2f+0x2f0>
 800c982:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98a:	db19      	blt.n	800c9c0 <__kernel_rem_pio2f+0x34c>
 800c98c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c968 <__kernel_rem_pio2f+0x2f4>
 800c990:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c994:	aa08      	add	r2, sp, #32
 800c996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c99a:	3508      	adds	r5, #8
 800c99c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c9a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c9ac:	ee10 3a10 	vmov	r3, s0
 800c9b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c9b4:	ee17 3a90 	vmov	r3, s15
 800c9b8:	3401      	adds	r4, #1
 800c9ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c9be:	e74c      	b.n	800c85a <__kernel_rem_pio2f+0x1e6>
 800c9c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c9c4:	aa08      	add	r2, sp, #32
 800c9c6:	ee10 3a10 	vmov	r3, s0
 800c9ca:	e7f6      	b.n	800c9ba <__kernel_rem_pio2f+0x346>
 800c9cc:	a808      	add	r0, sp, #32
 800c9ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c9d2:	9001      	str	r0, [sp, #4]
 800c9d4:	ee07 0a90 	vmov	s15, r0
 800c9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c9e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c9e6:	ed62 7a01 	vstmdb	r2!, {s15}
 800c9ea:	e743      	b.n	800c874 <__kernel_rem_pio2f+0x200>
 800c9ec:	ecfc 6a01 	vldmia	ip!, {s13}
 800c9f0:	ecb5 7a01 	vldmia	r5!, {s14}
 800c9f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	4550      	cmp	r0, sl
 800c9fc:	dc01      	bgt.n	800ca02 <__kernel_rem_pio2f+0x38e>
 800c9fe:	4290      	cmp	r0, r2
 800ca00:	ddf4      	ble.n	800c9ec <__kernel_rem_pio2f+0x378>
 800ca02:	a858      	add	r0, sp, #352	@ 0x160
 800ca04:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ca08:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	e735      	b.n	800c87c <__kernel_rem_pio2f+0x208>
 800ca10:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	dc09      	bgt.n	800ca2a <__kernel_rem_pio2f+0x3b6>
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	dc27      	bgt.n	800ca6a <__kernel_rem_pio2f+0x3f6>
 800ca1a:	d040      	beq.n	800ca9e <__kernel_rem_pio2f+0x42a>
 800ca1c:	f009 0007 	and.w	r0, r9, #7
 800ca20:	b059      	add	sp, #356	@ 0x164
 800ca22:	ecbd 8b04 	vpop	{d8-d9}
 800ca26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d1f5      	bne.n	800ca1c <__kernel_rem_pio2f+0x3a8>
 800ca30:	aa30      	add	r2, sp, #192	@ 0xc0
 800ca32:	1f0b      	subs	r3, r1, #4
 800ca34:	4413      	add	r3, r2
 800ca36:	461a      	mov	r2, r3
 800ca38:	4620      	mov	r0, r4
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	dc50      	bgt.n	800cae0 <__kernel_rem_pio2f+0x46c>
 800ca3e:	4622      	mov	r2, r4
 800ca40:	2a01      	cmp	r2, #1
 800ca42:	dc5d      	bgt.n	800cb00 <__kernel_rem_pio2f+0x48c>
 800ca44:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca46:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800ca4a:	440b      	add	r3, r1
 800ca4c:	2c01      	cmp	r4, #1
 800ca4e:	dc67      	bgt.n	800cb20 <__kernel_rem_pio2f+0x4ac>
 800ca50:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ca54:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ca58:	2e00      	cmp	r6, #0
 800ca5a:	d167      	bne.n	800cb2c <__kernel_rem_pio2f+0x4b8>
 800ca5c:	edc7 6a00 	vstr	s13, [r7]
 800ca60:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca64:	edc7 7a02 	vstr	s15, [r7, #8]
 800ca68:	e7d8      	b.n	800ca1c <__kernel_rem_pio2f+0x3a8>
 800ca6a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca6c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800ca70:	440b      	add	r3, r1
 800ca72:	4622      	mov	r2, r4
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	da24      	bge.n	800cac2 <__kernel_rem_pio2f+0x44e>
 800ca78:	b34e      	cbz	r6, 800cace <__kernel_rem_pio2f+0x45a>
 800ca7a:	eef1 7a47 	vneg.f32	s15, s14
 800ca7e:	edc7 7a00 	vstr	s15, [r7]
 800ca82:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ca86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca8a:	aa31      	add	r2, sp, #196	@ 0xc4
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	429c      	cmp	r4, r3
 800ca90:	da20      	bge.n	800cad4 <__kernel_rem_pio2f+0x460>
 800ca92:	b10e      	cbz	r6, 800ca98 <__kernel_rem_pio2f+0x424>
 800ca94:	eef1 7a67 	vneg.f32	s15, s15
 800ca98:	edc7 7a01 	vstr	s15, [r7, #4]
 800ca9c:	e7be      	b.n	800ca1c <__kernel_rem_pio2f+0x3a8>
 800ca9e:	ab30      	add	r3, sp, #192	@ 0xc0
 800caa0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c96c <__kernel_rem_pio2f+0x2f8>
 800caa4:	440b      	add	r3, r1
 800caa6:	2c00      	cmp	r4, #0
 800caa8:	da05      	bge.n	800cab6 <__kernel_rem_pio2f+0x442>
 800caaa:	b10e      	cbz	r6, 800cab0 <__kernel_rem_pio2f+0x43c>
 800caac:	eef1 7a67 	vneg.f32	s15, s15
 800cab0:	edc7 7a00 	vstr	s15, [r7]
 800cab4:	e7b2      	b.n	800ca1c <__kernel_rem_pio2f+0x3a8>
 800cab6:	ed33 7a01 	vldmdb	r3!, {s14}
 800caba:	3c01      	subs	r4, #1
 800cabc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cac0:	e7f1      	b.n	800caa6 <__kernel_rem_pio2f+0x432>
 800cac2:	ed73 7a01 	vldmdb	r3!, {s15}
 800cac6:	3a01      	subs	r2, #1
 800cac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cacc:	e7d2      	b.n	800ca74 <__kernel_rem_pio2f+0x400>
 800cace:	eef0 7a47 	vmov.f32	s15, s14
 800cad2:	e7d4      	b.n	800ca7e <__kernel_rem_pio2f+0x40a>
 800cad4:	ecb2 7a01 	vldmia	r2!, {s14}
 800cad8:	3301      	adds	r3, #1
 800cada:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cade:	e7d6      	b.n	800ca8e <__kernel_rem_pio2f+0x41a>
 800cae0:	ed72 7a01 	vldmdb	r2!, {s15}
 800cae4:	edd2 6a01 	vldr	s13, [r2, #4]
 800cae8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800caec:	3801      	subs	r0, #1
 800caee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800caf2:	ed82 7a00 	vstr	s14, [r2]
 800caf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafa:	edc2 7a01 	vstr	s15, [r2, #4]
 800cafe:	e79c      	b.n	800ca3a <__kernel_rem_pio2f+0x3c6>
 800cb00:	ed73 7a01 	vldmdb	r3!, {s15}
 800cb04:	edd3 6a01 	vldr	s13, [r3, #4]
 800cb08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb0c:	3a01      	subs	r2, #1
 800cb0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb12:	ed83 7a00 	vstr	s14, [r3]
 800cb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1a:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb1e:	e78f      	b.n	800ca40 <__kernel_rem_pio2f+0x3cc>
 800cb20:	ed33 7a01 	vldmdb	r3!, {s14}
 800cb24:	3c01      	subs	r4, #1
 800cb26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb2a:	e78f      	b.n	800ca4c <__kernel_rem_pio2f+0x3d8>
 800cb2c:	eef1 6a66 	vneg.f32	s13, s13
 800cb30:	eeb1 7a47 	vneg.f32	s14, s14
 800cb34:	edc7 6a00 	vstr	s13, [r7]
 800cb38:	ed87 7a01 	vstr	s14, [r7, #4]
 800cb3c:	eef1 7a67 	vneg.f32	s15, s15
 800cb40:	e790      	b.n	800ca64 <__kernel_rem_pio2f+0x3f0>
 800cb42:	bf00      	nop

0800cb44 <floorf>:
 800cb44:	ee10 3a10 	vmov	r3, s0
 800cb48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cb4c:	3a7f      	subs	r2, #127	@ 0x7f
 800cb4e:	2a16      	cmp	r2, #22
 800cb50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb54:	dc2b      	bgt.n	800cbae <floorf+0x6a>
 800cb56:	2a00      	cmp	r2, #0
 800cb58:	da12      	bge.n	800cb80 <floorf+0x3c>
 800cb5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cbc0 <floorf+0x7c>
 800cb5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	dd06      	ble.n	800cb7a <floorf+0x36>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	da24      	bge.n	800cbba <floorf+0x76>
 800cb70:	2900      	cmp	r1, #0
 800cb72:	4b14      	ldr	r3, [pc, #80]	@ (800cbc4 <floorf+0x80>)
 800cb74:	bf08      	it	eq
 800cb76:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cb7a:	ee00 3a10 	vmov	s0, r3
 800cb7e:	4770      	bx	lr
 800cb80:	4911      	ldr	r1, [pc, #68]	@ (800cbc8 <floorf+0x84>)
 800cb82:	4111      	asrs	r1, r2
 800cb84:	420b      	tst	r3, r1
 800cb86:	d0fa      	beq.n	800cb7e <floorf+0x3a>
 800cb88:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cbc0 <floorf+0x7c>
 800cb8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb98:	ddef      	ble.n	800cb7a <floorf+0x36>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bfbe      	ittt	lt
 800cb9e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800cba2:	fa40 f202 	asrlt.w	r2, r0, r2
 800cba6:	189b      	addlt	r3, r3, r2
 800cba8:	ea23 0301 	bic.w	r3, r3, r1
 800cbac:	e7e5      	b.n	800cb7a <floorf+0x36>
 800cbae:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cbb2:	d3e4      	bcc.n	800cb7e <floorf+0x3a>
 800cbb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cbb8:	4770      	bx	lr
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e7dd      	b.n	800cb7a <floorf+0x36>
 800cbbe:	bf00      	nop
 800cbc0:	7149f2ca 	.word	0x7149f2ca
 800cbc4:	bf800000 	.word	0xbf800000
 800cbc8:	007fffff 	.word	0x007fffff

0800cbcc <_init>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr

0800cbd8 <_fini>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	bf00      	nop
 800cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbde:	bc08      	pop	{r3}
 800cbe0:	469e      	mov	lr, r3
 800cbe2:	4770      	bx	lr
