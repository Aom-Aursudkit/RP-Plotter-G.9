
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf10  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d1a0  0800d0e8  0800d0e8  0000e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a288  0801a288  0001c2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a288  0801a288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a290  0801a290  0001c2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a290  0801a290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a294  0801a294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0801a298  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  200002c8  0801a55c  0001c2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000158c  0801a55c  0001c58c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001866e  00000000  00000000  0001c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2a  00000000  00000000  00034962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00037790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecc  00000000  00000000  00038a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747f  00000000  00000000  0003994c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b57  00000000  00000000  00060dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010028e  00000000  00000000  00077922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177bb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  00177bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0017d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c8 	.word	0x200002c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d0d0 	.word	0x0800d0d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002cc 	.word	0x200002cc
 8000214:	0800d0d0 	.word	0x0800d0d0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002e4 	.word	0x200002e4

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002e4 	.word	0x200002e4

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 ff15 	bl	800af84 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 ff13 	bl	8008fb8 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fe9d 	bl	800aed8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 feb4 	bl	800af10 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 f95b 	bl	800a46c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 fa83 	bl	800a6e0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fc6d 	bl	8007ad0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 f82e 	bl	8008260 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002e4 	.word	0x200002e4
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET( slot, dist, ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	dc03      	bgt.n	80012be <SET_TARGET+0x36>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3310      	adds	r3, #16
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	e002      	b.n	80012c4 <SET_TARGET+0x3c>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3313      	adds	r3, #19
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b291      	uxth	r1, r2
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <SET_TARGET+0x8c>)
 80012c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dc04      	bgt.n	80012f8 <SET_TARGET+0x70>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3310      	adds	r3, #16
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	3301      	adds	r3, #1
 80012f6:	e003      	b.n	8001300 <SET_TARGET+0x78>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3313      	adds	r3, #19
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3301      	adds	r3, #1
 8001300:	b291      	uxth	r1, r2
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <SET_TARGET+0x8c>)
 8001304:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20001164 	.word	0x20001164

08001318 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08b      	sub	sp, #44	@ 0x2c
 800131c:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 800131e:	4bbc      	ldr	r3, [pc, #752]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001320:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001324:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 8001326:	4bbb      	ldr	r3, [pc, #748]	@ (8001614 <Modbus_Protocal_Worker+0x2fc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <Modbus_Protocal_Worker+0x1a>
 800132e:	2202      	movs	r2, #2
 8001330:	e000      	b.n	8001334 <Modbus_Protocal_Worker+0x1c>
 8001332:	2201      	movs	r2, #1
 8001334:	4bb6      	ldr	r3, [pc, #728]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001336:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001338:	4bb5      	ldr	r3, [pc, #724]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800133a:	895b      	ldrh	r3, [r3, #10]
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4bb3      	ldr	r3, [pc, #716]	@ (8001618 <Modbus_Protocal_Worker+0x300>)
 800134a:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 800134c:	4bb0      	ldr	r3, [pc, #704]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800134e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800161c <Modbus_Protocal_Worker+0x304>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	4baf      	ldr	r3, [pc, #700]	@ (8001620 <Modbus_Protocal_Worker+0x308>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 8001368:	4ba9      	ldr	r3, [pc, #676]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800136a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8a4 	bl	80004bc <__aeabi_i2d>
 8001374:	a3a0      	add	r3, pc, #640	@ (adr r3, 80015f8 <Modbus_Protocal_Worker+0x2e0>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f909 	bl	8000590 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbbd 	bl	8000b04 <__aeabi_d2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8a7 	bl	80004e0 <__aeabi_f2d>
 8001392:	a39b      	add	r3, pc, #620	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff42 	bl	8000220 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbae 	bl	8000b04 <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a9d      	ldr	r2, [pc, #628]	@ (8001620 <Modbus_Protocal_Worker+0x308>)
 80013ac:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013ae:	f107 040c 	add.w	r4, r7, #12
 80013b2:	f107 0210 	add.w	r2, r7, #16
 80013b6:	f107 0114 	add.w	r1, r7, #20
 80013ba:	f107 0018 	add.w	r0, r7, #24
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4623      	mov	r3, r4
 80013ca:	f003 fca3 	bl	8004d14 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f885 	bl	80004e0 <__aeabi_f2d>
 80013d6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7fe ff22 	bl	8000224 <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	a387      	add	r3, pc, #540	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f8cf 	bl	8000590 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fb83 	bl	8000b04 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001402:	edd7 7a07 	vldr	s15, [r7, #28]
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	b21b      	sxth	r3, r3
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b7d      	ldr	r3, [pc, #500]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800141c:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f85d 	bl	80004e0 <__aeabi_f2d>
 8001426:	a378      	add	r3, pc, #480	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb64 	bl	8000b04 <__aeabi_d2f>
 800143c:	ee07 0a90 	vmov	s15, r0
 8001440:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 8001444:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800144c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b6d      	ldr	r3, [pc, #436]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800145a:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f83e 	bl	80004e0 <__aeabi_f2d>
 8001464:	a368      	add	r3, pc, #416	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f891 	bl	8000590 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb45 	bl	8000b04 <__aeabi_d2f>
 800147a:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 800147e:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 8001482:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	b21b      	sxth	r3, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b5e      	ldr	r3, [pc, #376]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001498:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 800149a:	edd7 7a06 	vldr	s15, [r7, #24]
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014b8:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eef0 7ae7 	vabs.f32	s15, s15
 80014c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014f4:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 80014f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7ddb      	ldrb	r3, [r3, #23]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d80a      	bhi.n	8001518 <Modbus_Protocal_Worker+0x200>
 8001502:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <Modbus_Protocal_Worker+0x1f0>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001523 	.word	0x08001523
 800150c:	080016ed 	.word	0x080016ed
 8001510:	080015af 	.word	0x080015af
 8001514:	08001629 	.word	0x08001629
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001518:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	75da      	strb	r2, [r3, #23]
		break;
 8001520:	e0fc      	b.n	800171c <Modbus_Protocal_Worker+0x404>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001522:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <Modbus_Protocal_Worker+0x224>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001536:	f000 f9e7 	bl	8001908 <Modbus_Emission>
 800153a:	e018      	b.n	800156e <Modbus_Protocal_Worker+0x256>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001550:	b29b      	uxth	r3, r3
 8001552:	429a      	cmp	r2, r3
 8001554:	d00b      	beq.n	800156e <Modbus_Protocal_Worker+0x256>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2203      	movs	r2, #3
 800156c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	2b20      	cmp	r3, #32
 800157a:	f040 80c8 	bne.w	800170e <Modbus_Protocal_Worker+0x3f6>
			hModbus->modbusUartStructure.RxTail = 0;
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 800159a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800159e:	4413      	add	r3, r2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f009 f89a 	bl	800a6e0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015ac:	e0af      	b.n	800170e <Modbus_Protocal_Worker+0x3f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	7d1b      	ldrb	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ac 	beq.w	8001712 <Modbus_Protocal_Worker+0x3fa>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	22fe      	movs	r2, #254	@ 0xfe
 80015c0:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015de:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015e0:	1a8a      	subs	r2, r1, r2
 80015e2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2204      	movs	r2, #4
 80015ee:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015f0:	e08f      	b.n	8001712 <Modbus_Protocal_Worker+0x3fa>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	03b761f5 	.word	0x03b761f5
 80015fc:	3f5c9871 	.word	0x3f5c9871
 8001600:	54442d18 	.word	0x54442d18
 8001604:	3ff921fb 	.word	0x3ff921fb
 8001608:	1a63c1f8 	.word	0x1a63c1f8
 800160c:	404ca5dc 	.word	0x404ca5dc
 8001610:	20001164 	.word	0x20001164
 8001614:	20000c07 	.word	0x20000c07
 8001618:	20000c80 	.word	0x20000c80
 800161c:	3dcccccd 	.word	0x3dcccccd
 8001620:	20000c78 	.word	0x20000c78
 8001624:	200002e4 	.word	0x200002e4
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001628:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001630:	f113 0f02 	cmn.w	r3, #2
 8001634:	d150      	bne.n	80016d8 <Modbus_Protocal_Worker+0x3c0>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 800163e:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 800164e:	3b02      	subs	r3, #2
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fde0 	bl	8001218 <CRC16>
 8001658:	4603      	mov	r3, r0
 800165a:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 800165c:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 800166a:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800166c:	440b      	add	r3, r1
 800166e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d10c      	bne.n	8001690 <Modbus_Protocal_Worker+0x378>
					&& CalculateCRC.U8[1]
 8001676:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800167a:	6819      	ldr	r1, [r3, #0]
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001684:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001686:	440b      	add	r3, r1
 8001688:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d004      	beq.n	800169a <Modbus_Protocal_Worker+0x382>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22ff      	movs	r2, #255	@ 0xff
 8001696:	759a      	strb	r2, [r3, #22]
				break;
 8001698:	e040      	b.n	800171c <Modbus_Protocal_Worker+0x404>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800169a:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d113      	bne.n	80016d4 <Modbus_Protocal_Worker+0x3bc>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016bc:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016c6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016c8:	461a      	mov	r2, r3
 80016ca:	f00a fde7 	bl	800c29c <memcpy>

			//execute command
			Modbus_frame_response();
 80016ce:	f000 f903 	bl	80018d8 <Modbus_frame_response>
 80016d2:	e001      	b.n	80016d8 <Modbus_Protocal_Worker+0x3c0>
				break;
 80016d4:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80016d6:	e021      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		if (hModbus->Flag_T35TimeOut) {
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	7d5b      	ldrb	r3, [r3, #21]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d019      	beq.n	8001716 <Modbus_Protocal_Worker+0x3fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	75da      	strb	r2, [r3, #23]
		break;
 80016ea:	e014      	b.n	8001716 <Modbus_Protocal_Worker+0x3fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d10f      	bne.n	800171a <Modbus_Protocal_Worker+0x402>
			hModbus->TxCount = 0;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	75da      	strb	r2, [r3, #23]
		break;
 800170c:	e005      	b.n	800171a <Modbus_Protocal_Worker+0x402>
		break;
 800170e:	bf00      	nop
 8001710:	e004      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 800171a:	bf00      	nop
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	@ 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	200002e4 	.word	0x200002e4

08001728 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	7e5b      	ldrb	r3, [r3, #25]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	7e92      	ldrb	r2, [r2, #26]
 800173e:	4413      	add	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	429a      	cmp	r2, r3
 800174c:	d903      	bls.n	8001756 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800174e:	2002      	movs	r0, #2
 8001750:	f000 f8a0 	bl	8001894 <ModbusErrorReply>
		return;
 8001754:	e023      	b.n	800179e <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	440b      	add	r3, r1
 8001766:	7ed2      	ldrb	r2, [r2, #27]
 8001768:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	440b      	add	r3, r1
 800177a:	7f12      	ldrb	r2, [r2, #28]
 800177c:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3318      	adds	r3, #24
 800178c:	2208      	movs	r2, #8
 800178e:	4619      	mov	r1, r3
 8001790:	f00a fd84 	bl	800c29c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2205      	movs	r2, #5
 800179a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002e4 	.word	0x200002e4

080017a8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017ae:	4b38      	ldr	r3, [pc, #224]	@ (8001890 <modbusRead1Register+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	7edb      	ldrb	r3, [r3, #27]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017b8:	4a35      	ldr	r2, [pc, #212]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017be:	4413      	add	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017c2:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <modbusRead1Register+0xe8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	7e5b      	ldrb	r3, [r3, #25]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	7e92      	ldrb	r2, [r2, #26]
 80017d2:	4413      	add	r3, r2
 80017d4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <modbusRead1Register+0x3a>
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b7d      	cmp	r3, #125	@ 0x7d
 80017e0:	d903      	bls.n	80017ea <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80017e2:	2003      	movs	r0, #3
 80017e4:	f000 f856 	bl	8001894 <ModbusErrorReply>
		return;
 80017e8:	e04e      	b.n	8001888 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80017ea:	88ba      	ldrh	r2, [r7, #4]
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d808      	bhi.n	8001808 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80017f6:	88ba      	ldrh	r2, [r7, #4]
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <modbusRead1Register+0xe8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d903      	bls.n	8001810 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001808:	2002      	movs	r0, #2
 800180a:	f000 f843 	bl	8001894 <ModbusErrorReply>
		return;
 800180e:	e03b      	b.n	8001888 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <modbusRead1Register+0xe8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2203      	movs	r2, #3
 8001816:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <modbusRead1Register+0xe8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 800182a:	2400      	movs	r4, #0
 800182c:	e020      	b.n	8001870 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <modbusRead1Register+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	4423      	add	r3, r4
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <modbusRead1Register+0xe8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	1c63      	adds	r3, r4, #1
 8001842:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001844:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <modbusRead1Register+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4423      	add	r3, r4
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <modbusRead1Register+0xe8>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	0063      	lsls	r3, r4, #1
 8001862:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001864:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 8001866:	4413      	add	r3, r2
 8001868:	460a      	mov	r2, r1
 800186a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 800186e:	3401      	adds	r4, #1
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	429c      	cmp	r4, r3
 8001874:	dbdb      	blt.n	800182e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	3301      	adds	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <modbusRead1Register+0xe8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0052      	lsls	r2, r2, #1
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	200002e4 	.word	0x200002e4

08001894 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	7e1a      	ldrb	r2, [r3, #24]
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200002e4 	.word	0x200002e4

080018d8 <Modbus_frame_response>:

void Modbus_frame_response() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <Modbus_frame_response+0x2c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	7e1b      	ldrb	r3, [r3, #24]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d004      	beq.n	80018f0 <Modbus_frame_response+0x18>
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d105      	bne.n	80018f6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80018ea:	f7ff ff1d 	bl	8001728 <modbusWrite1Register>
		break;
 80018ee:	e006      	b.n	80018fe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80018f0:	f7ff ff5a 	bl	80017a8 <modbusRead1Register>
		break;
 80018f4:	e003      	b.n	80018fe <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff ffcc 	bl	8001894 <ModbusErrorReply>
		break;
 80018fc:	bf00      	nop

	}
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002e4 	.word	0x200002e4

08001908 <Modbus_Emission>:

void Modbus_Emission() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001918:	2b20      	cmp	r3, #32
 800191a:	d15d      	bne.n	80019d8 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <Modbus_Emission+0xe8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800192a:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <Modbus_Emission+0xe8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001932:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001944:	461a      	mov	r2, r3
 8001946:	f00a fca9 	bl	800c29c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800194a:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <Modbus_Emission+0xe8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001952:	461a      	mov	r2, r3
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3203      	adds	r2, #3
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <Modbus_Emission+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001970:	3b02      	subs	r3, #2
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff fc4f 	bl	8001218 <CRC16>
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 800198a:	3b02      	subs	r3, #2
 800198c:	7939      	ldrb	r1, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	460a      	mov	r2, r1
 8001992:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <Modbus_Emission+0xe8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019a2:	3b01      	subs	r3, #1
 80019a4:	7979      	ldrb	r1, [r7, #5]
 80019a6:	4413      	add	r3, r2
 80019a8:	460a      	mov	r2, r1
 80019aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d10d      	bne.n	80019d8 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019ce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019d2:	461a      	mov	r2, r3
 80019d4:	f008 fe04 	bl	800a5e0 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	755a      	strb	r2, [r3, #21]

}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002e4 	.word	0x200002e4

080019f4 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a00:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a04:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a24:	edd7 7a00 	vldr	s15, [r7]
 8001a28:	eef0 7ae7 	vabs.f32	s15, s15
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	db02      	blt.n	8001a5c <Trapezoidal_Init+0x68>
 8001a56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a5a:	e000      	b.n	8001a5e <Trapezoidal_Init+0x6a>
 8001a5c:	4a49      	ldr	r2, [pc, #292]	@ (8001b84 <Trapezoidal_Init+0x190>)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd14      	ble.n	8001acc <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f00a fbfe 	bl	800c2bc <sqrtf>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001aca:	e006      	b.n	8001ada <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b30:	e017      	b.n	8001b62 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	bf800000 	.word	0xbf800000

08001b88 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b095      	sub	sp, #84	@ 0x54
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 812c 	bne.w	8001df6 <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001ba4:	edd7 7a00 	vldr	s15, [r7]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bca:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bce:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001bda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d111      	bne.n	8001c32 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c16:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c22:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c26:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c34:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c36:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c3a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c42:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c46:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c4a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001c70:	4b64      	ldr	r3, [pc, #400]	@ (8001e04 <Trapezoidal_Update+0x27c>)
 8001c72:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001c74:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d51a      	bpl.n	8001cc4 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c8e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cae:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cb2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc2:	e079      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001cc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d519      	bpl.n	8001d12 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001cde:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001cee:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d08:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d10:	e052      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d53a      	bpl.n	8001da2 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d2c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d3c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d40:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d5c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001d7c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d88:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d94:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d98:	eef1 7a67 	vneg.f32	s15, s15
 8001d9c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001da0:	e00a      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da4:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dbe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dd2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001de6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edc3 7a06 	vstr	s15, [r3, #24]
 8001df4:	e000      	b.n	8001df8 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001df6:	bf00      	nop
}
 8001df8:	3754      	adds	r7, #84	@ 0x54
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	358637bd 	.word	0x358637bd

08001e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e0c:	ed2d 8b02 	vpush	{d8}
 8001e10:	b0b1      	sub	sp, #196	@ 0xc4
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e14:	f003 fedb 	bl	8005bce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e18:	f001 fd02 	bl	8003820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e1c:	f002 f95c 	bl	80040d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e20:	f002 f928 	bl	8004074 <MX_DMA_Init>
	MX_TIM4_Init();
 8001e24:	f001 fea4 	bl	8003b70 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e28:	f001 fef8 	bl	8003c1c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e2c:	f001 fe4a 	bl	8003ac4 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e30:	f001 ff42 	bl	8003cb8 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e34:	f001 fffc 	bl	8003e30 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e38:	f001 fd3e 	bl	80038b8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e3c:	f001 fdc2 	bl	80039c4 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e40:	f002 f89a 	bl	8003f78 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e44:	f002 f8c8 	bl	8003fd8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e48:	484b      	ldr	r0, [pc, #300]	@ (8001f78 <main+0x170>)
 8001e4a:	f005 fdd1 	bl	80079f0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4849      	ldr	r0, [pc, #292]	@ (8001f78 <main+0x170>)
 8001e52:	f006 f899 	bl	8007f88 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e56:	2104      	movs	r1, #4
 8001e58:	4847      	ldr	r0, [pc, #284]	@ (8001f78 <main+0x170>)
 8001e5a:	f006 f895 	bl	8007f88 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e5e:	4847      	ldr	r0, [pc, #284]	@ (8001f7c <main+0x174>)
 8001e60:	f005 fdc6 	bl	80079f0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e64:	2100      	movs	r1, #0
 8001e66:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <main+0x174>)
 8001e68:	f006 f88e 	bl	8007f88 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4843      	ldr	r0, [pc, #268]	@ (8001f7c <main+0x174>)
 8001e70:	f006 f88a 	bl	8007f88 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e74:	213c      	movs	r1, #60	@ 0x3c
 8001e76:	4842      	ldr	r0, [pc, #264]	@ (8001f80 <main+0x178>)
 8001e78:	f006 fb34 	bl	80084e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e7c:	213c      	movs	r1, #60	@ 0x3c
 8001e7e:	4841      	ldr	r0, [pc, #260]	@ (8001f84 <main+0x17c>)
 8001e80:	f006 fb30 	bl	80084e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e84:	4840      	ldr	r0, [pc, #256]	@ (8001f88 <main+0x180>)
 8001e86:	f005 fe23 	bl	8007ad0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e8a:	4840      	ldr	r0, [pc, #256]	@ (8001f8c <main+0x184>)
 8001e8c:	f005 fdb0 	bl	80079f0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e90:	2108      	movs	r1, #8
 8001e92:	483e      	ldr	r0, [pc, #248]	@ (8001f8c <main+0x184>)
 8001e94:	f005 ff02 	bl	8007c9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001e98:	210c      	movs	r1, #12
 8001e9a:	483c      	ldr	r0, [pc, #240]	@ (8001f8c <main+0x184>)
 8001e9c:	f005 fefe 	bl	8007c9c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ea0:	483b      	ldr	r0, [pc, #236]	@ (8001f90 <main+0x188>)
 8001ea2:	f005 fda5 	bl	80079f0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4839      	ldr	r0, [pc, #228]	@ (8001f90 <main+0x188>)
 8001eaa:	f005 fef7 	bl	8007c9c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001eae:	f002 fa47 	bl	8004340 <DWT_Init>

	PID.Kp = 0.1;
 8001eb2:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <main+0x18c>)
 8001eb4:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <main+0x190>)
 8001eb6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001eb8:	4a36      	ldr	r2, [pc, #216]	@ (8001f94 <main+0x18c>)
 8001eba:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <main+0x194>)
 8001ebc:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001ebe:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <main+0x18c>)
 8001ec0:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <main+0x190>)
 8001ec2:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4833      	ldr	r0, [pc, #204]	@ (8001f94 <main+0x18c>)
 8001ec8:	f00a f980 	bl	800c1cc <arm_pid_init_f32>

	Reset_R();
 8001ecc:	f002 fe8a 	bl	8004be4 <Reset_R>
	Reset_P();
 8001ed0:	f002 fe98 	bl	8004c04 <Reset_P>
	calibState = CALIB_IDLE;
 8001ed4:	4a32      	ldr	r2, [pc, #200]	@ (8001fa0 <main+0x198>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f002 fe58 	bl	8004b90 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <main+0x19c>)
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <main+0x1a0>)
 8001ee4:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <main+0x19c>)
 8001ee8:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <main+0x1a4>)
 8001eea:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001eec:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <main+0x19c>)
 8001eee:	2315      	movs	r3, #21
 8001ef0:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <main+0x19c>)
 8001ef4:	23c8      	movs	r3, #200	@ 0xc8
 8001ef6:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001ef8:	492d      	ldr	r1, [pc, #180]	@ (8001fb0 <main+0x1a8>)
 8001efa:	482a      	ldr	r0, [pc, #168]	@ (8001fa4 <main+0x19c>)
 8001efc:	f7ff f936 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <main+0x1a8>)
 8001f02:	2300      	movs	r3, #0
 8001f04:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f06:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001fb4 <main+0x1ac>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f002 fdc2 	bl	8004a94 <Set_Motor>
	Set_Motor(1, 0);
 8001f10:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001fb4 <main+0x1ac>
 8001f14:	2001      	movs	r0, #1
 8001f16:	f002 fdbd 	bl	8004a94 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (Test_no_BaseSystem == 0
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <main+0x1b0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <main+0x130>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f26:	4825      	ldr	r0, [pc, #148]	@ (8001fbc <main+0x1b4>)
 8001f28:	f004 fc86 	bl	8006838 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <main+0x130>
			Test_no_BaseSystem = 1;
 8001f32:	4a21      	ldr	r2, [pc, #132]	@ (8001fb8 <main+0x1b0>)
 8001f34:	2301      	movs	r3, #1
 8001f36:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <main+0x1a8>)
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	4a20      	ldr	r2, [pc, #128]	@ (8001fc0 <main+0x1b8>)
 8001f3e:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <main+0x1bc>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d17f      	bne.n	8002048 <main+0x240>
			switch (base_status) {
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <main+0x1b8>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00e      	beq.n	8001f6e <main+0x166>
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	dc39      	bgt.n	8001fc8 <main+0x1c0>
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d002      	beq.n	8001f5e <main+0x156>
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d004      	beq.n	8001f66 <main+0x15e>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f5c:	e034      	b.n	8001fc8 <main+0x1c0>
				REG16(REG_MOTION_STATUS) = 1;
 8001f5e:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <main+0x1a8>)
 8001f60:	2301      	movs	r3, #1
 8001f62:	8413      	strh	r3, [r2, #32]
				break;
 8001f64:	e031      	b.n	8001fca <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 2;
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <main+0x1a8>)
 8001f68:	2302      	movs	r3, #2
 8001f6a:	8413      	strh	r3, [r2, #32]
				break;
 8001f6c:	e02d      	b.n	8001fca <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 4;
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <main+0x1a8>)
 8001f70:	2304      	movs	r3, #4
 8001f72:	8413      	strh	r3, [r2, #32]
				break;
 8001f74:	e029      	b.n	8001fca <main+0x1c2>
 8001f76:	bf00      	nop
 8001f78:	200002e8 	.word	0x200002e8
 8001f7c:	200003b4 	.word	0x200003b4
 8001f80:	20000480 	.word	0x20000480
 8001f84:	2000054c 	.word	0x2000054c
 8001f88:	20000618 	.word	0x20000618
 8001f8c:	200006e4 	.word	0x200006e4
 8001f90:	200007b0 	.word	0x200007b0
 8001f94:	20000c0c 	.word	0x20000c0c
 8001f98:	3dcccccd 	.word	0x3dcccccd
 8001f9c:	3727c5ac 	.word	0x3727c5ac
 8001fa0:	20000c54 	.word	0x20000c54
 8001fa4:	20000c8c 	.word	0x20000c8c
 8001fa8:	20000948 	.word	0x20000948
 8001fac:	2000087c 	.word	0x2000087c
 8001fb0:	20001164 	.word	0x20001164
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	20000c76 	.word	0x20000c76
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	200012f4 	.word	0x200012f4
 8001fc4:	20000c05 	.word	0x20000c05
				break;
 8001fc8:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem) {
 8001fca:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <main+0x3e0>)
 8001fcc:	ed93 7a00 	vldr	s14, [r3]
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <main+0x3e4>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d007      	beq.n	8001ff0 <main+0x1e8>
				TargetR = TargetR_BaseSystem;
 8001fe0:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <main+0x3e0>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b82      	ldr	r3, [pc, #520]	@ (80021f0 <main+0x3e8>)
 8001fe6:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <main+0x3e0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <main+0x3e4>)
 8001fee:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem) {
 8001ff0:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <main+0x3ec>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80021f8 <main+0x3f0>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb4 7a67 	vcmp.f32	s14, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d00e      	beq.n	800202a <main+0x222>
				TargetP = TargetP_BaseSystem;
 800200c:	4b7a      	ldr	r3, [pc, #488]	@ (80021f8 <main+0x3f0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b7a      	ldr	r3, [pc, #488]	@ (80021fc <main+0x3f4>)
 8002012:	601a      	str	r2, [r3, #0]
				Last_Pen_BaseSystem = TargetP_BaseSystem;
 8002014:	4b78      	ldr	r3, [pc, #480]	@ (80021f8 <main+0x3f0>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002022:	793b      	ldrb	r3, [r7, #4]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4a73      	ldr	r2, [pc, #460]	@ (80021f4 <main+0x3ec>)
 8002028:	7013      	strb	r3, [r2, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 800202a:	4b75      	ldr	r3, [pc, #468]	@ (8002200 <main+0x3f8>)
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <main+0x3ec>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d008      	beq.n	8002048 <main+0x240>
				Set_Servo(Pen_BaseSystem);
 8002036:	4b72      	ldr	r3, [pc, #456]	@ (8002200 <main+0x3f8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fda8 	bl	8004b90 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 8002040:	4b6f      	ldr	r3, [pc, #444]	@ (8002200 <main+0x3f8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4a6b      	ldr	r2, [pc, #428]	@ (80021f4 <main+0x3ec>)
 8002046:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8002048:	f7ff f966 	bl	8001318 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 800204c:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <main+0x3fc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <main+0x400>)
 8002054:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8002056:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <main+0x404>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205c:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <main+0x408>)
 800205e:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8002060:	f002 fa64 	bl	800452c <micros>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (currentTime > timestamp) {
 800206c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <main+0x40c>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	4282      	cmp	r2, r0
 8002078:	418b      	sbcs	r3, r1
 800207a:	d210      	bcs.n	800209e <main+0x296>
			timestamp = currentTime + 1000; // us
 800207c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002080:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002084:	6639      	str	r1, [r7, #96]	@ 0x60
 8002086:	f143 0300 	adc.w	r3, r3, #0
 800208a:	667b      	str	r3, [r7, #100]	@ 0x64
 800208c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002090:	4b60      	ldr	r3, [pc, #384]	@ (8002214 <main+0x40c>)
 8002092:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8002096:	f002 fb2f 	bl	80046f8 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 800209a:	f002 fc37 	bl	800490c <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 800209e:	f002 fa45 	bl	800452c <micros>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		if (currentTime1 > timestamp1) {
 80020aa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80020ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002218 <main+0x410>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	4282      	cmp	r2, r0
 80020b6:	418b      	sbcs	r3, r1
 80020b8:	d20d      	bcs.n	80020d6 <main+0x2ce>
			timestamp1 = currentTime1 + 10000; // us
 80020ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80020be:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020c6:	f143 0300 	adc.w	r3, r3, #0
 80020ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80020d0:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <main+0x410>)
 80020d2:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020d6:	f002 fa29 	bl	800452c <micros>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if (currentTime2 > timestamp2) {
 80020e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020e6:	4b4d      	ldr	r3, [pc, #308]	@ (800221c <main+0x414>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	4282      	cmp	r2, r0
 80020ee:	418b      	sbcs	r3, r1
 80020f0:	d20c      	bcs.n	800210c <main+0x304>
			timestamp2 = currentTime2 + 100000; // us
 80020f2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80020f6:	494a      	ldr	r1, [pc, #296]	@ (8002220 <main+0x418>)
 80020f8:	1851      	adds	r1, r2, r1
 80020fa:	6539      	str	r1, [r7, #80]	@ 0x50
 80020fc:	f143 0300 	adc.w	r3, r3, #0
 8002100:	657b      	str	r3, [r7, #84]	@ 0x54
 8002102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002106:	4b45      	ldr	r3, [pc, #276]	@ (800221c <main+0x414>)
 8002108:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <main+0x41c>)
 800210e:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8002112:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <main+0x420>)
 8002114:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002118:	eef1 7a67 	vneg.f32	s15, s15
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f00a f8ea 	bl	800c2f8 <cosf>
 8002124:	eef0 7a40 	vmov.f32	s15, s0
 8002128:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 800212c:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <main+0x424>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8002132:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <main+0x41c>)
 8002134:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 8002138:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <main+0x420>)
 800213a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	f00a f91d 	bl	800c380 <sinf>
 8002146:	eef0 7a40 	vmov.f32	s15, s0
 800214a:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <main+0x428>)
 8002150:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002158:	4836      	ldr	r0, [pc, #216]	@ (8002234 <main+0x42c>)
 800215a:	f004 fb6d 	bl	8006838 <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10e      	bne.n	8002182 <main+0x37a>
			Mode = 0;
 8002164:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <main+0x430>)
 8002166:	2300      	movs	r3, #0
 8002168:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 800216a:	4a34      	ldr	r2, [pc, #208]	@ (800223c <main+0x434>)
 800216c:	2301      	movs	r3, #1
 800216e:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8002170:	2000      	movs	r0, #0
 8002172:	f002 fd0d 	bl	8004b90 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800217c:	482d      	ldr	r0, [pc, #180]	@ (8002234 <main+0x42c>)
 800217e:	f004 fb73 	bl	8006868 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8002182:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002186:	482e      	ldr	r0, [pc, #184]	@ (8002240 <main+0x438>)
 8002188:	f004 fb56 	bl	8006838 <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <main+0x39c>
			EmergencyState = 0;
 8002192:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <main+0x434>)
 8002194:	2300      	movs	r3, #0
 8002196:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800219e:	4825      	ldr	r0, [pc, #148]	@ (8002234 <main+0x42c>)
 80021a0:	f004 fb62 	bl	8006868 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 80021a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021a8:	4825      	ldr	r0, [pc, #148]	@ (8002240 <main+0x438>)
 80021aa:	f004 fb45 	bl	8006838 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <main+0x3b2>
			Pen_Status = 0;
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <main+0x43c>)
 80021b6:	2300      	movs	r3, #0
 80021b8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 80021ba:	2104      	movs	r1, #4
 80021bc:	4820      	ldr	r0, [pc, #128]	@ (8002240 <main+0x438>)
 80021be:	f004 fb3b 	bl	8006838 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d102      	bne.n	80021ce <main+0x3c6>
			Pen_Status = 1;
 80021c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <main+0x43c>)
 80021ca:	2301      	movs	r3, #1
 80021cc:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80021ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d6:	f004 fb2f 	bl	8006838 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d135      	bne.n	800224c <main+0x444>
			z_temp = 1;
 80021e0:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <main+0x440>)
 80021e2:	2301      	movs	r3, #1
 80021e4:	7013      	strb	r3, [r2, #0]
 80021e6:	e03d      	b.n	8002264 <main+0x45c>
 80021e8:	20000c78 	.word	0x20000c78
 80021ec:	20000c84 	.word	0x20000c84
 80021f0:	20000bcc 	.word	0x20000bcc
 80021f4:	20000c88 	.word	0x20000c88
 80021f8:	20000c7c 	.word	0x20000c7c
 80021fc:	20000bd0 	.word	0x20000bd0
 8002200:	20000c80 	.word	0x20000c80
 8002204:	2000054c 	.word	0x2000054c
 8002208:	20000b24 	.word	0x20000b24
 800220c:	20000480 	.word	0x20000480
 8002210:	20000b28 	.word	0x20000b28
 8002214:	200013f8 	.word	0x200013f8
 8002218:	20001400 	.word	0x20001400
 800221c:	20001408 	.word	0x20001408
 8002220:	000186a0 	.word	0x000186a0
 8002224:	20000b70 	.word	0x20000b70
 8002228:	20000b30 	.word	0x20000b30
 800222c:	20000bbc 	.word	0x20000bbc
 8002230:	20000bc0 	.word	0x20000bc0
 8002234:	48000800 	.word	0x48000800
 8002238:	20000c04 	.word	0x20000c04
 800223c:	20000c05 	.word	0x20000c05
 8002240:	48000400 	.word	0x48000400
 8002244:	20000c07 	.word	0x20000c07
 8002248:	20000bb1 	.word	0x20000bb1
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 800224c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f004 faf0 	bl	8006838 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <main+0x45c>
			z_temp = 0;
 800225e:	4aaa      	ldr	r2, [pc, #680]	@ (8002508 <main+0x700>)
 8002260:	2300      	movs	r3, #0
 8002262:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 8002264:	4ba9      	ldr	r3, [pc, #676]	@ (800250c <main+0x704>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <main+0x46a>
			REG16(REG_MOTION_STATUS) = 0;
 800226c:	4aa8      	ldr	r2, [pc, #672]	@ (8002510 <main+0x708>)
 800226e:	2300      	movs	r3, #0
 8002270:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem == 1))
 8002272:	4ba8      	ldr	r3, [pc, #672]	@ (8002514 <main+0x70c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <main+0x482>
 800227a:	4ba7      	ldr	r3, [pc, #668]	@ (8002518 <main+0x710>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d007      	beq.n	8002292 <main+0x48a>
 8002282:	4ba6      	ldr	r3, [pc, #664]	@ (800251c <main+0x714>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d003      	beq.n	8002292 <main+0x48a>
				|| base_status == 8) {
 800228a:	4ba3      	ldr	r3, [pc, #652]	@ (8002518 <main+0x710>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d159      	bne.n	8002346 <main+0x53e>
			REG16(REG_MOTION_STATUS) = 8;
 8002292:	4a9f      	ldr	r2, [pc, #636]	@ (8002510 <main+0x708>)
 8002294:	2308      	movs	r3, #8
 8002296:	8413      	strh	r3, [r2, #32]

			if (TenPointMode) {
 8002298:	4ba1      	ldr	r3, [pc, #644]	@ (8002520 <main+0x718>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <main+0x4be>
				//				float R, P;
				//				ReadOneSlot(counter, &R, &P);
				//				TargetR = R;
				//				TargetP = P;
				TargetR = testArray[(counter * 2) + 1];
 80022a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002524 <main+0x71c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002528 <main+0x720>)
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b9e      	ldr	r3, [pc, #632]	@ (800252c <main+0x724>)
 80022b2:	601a      	str	r2, [r3, #0]
				TargetP = testArray[counter * 2];
 80022b4:	4b9b      	ldr	r3, [pc, #620]	@ (8002524 <main+0x71c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4a9b      	ldr	r2, [pc, #620]	@ (8002528 <main+0x720>)
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b9b      	ldr	r3, [pc, #620]	@ (8002530 <main+0x728>)
 80022c4:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 80022c6:	f003 f867 	bl	8005398 <CascadeControl_Step>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d033      	beq.n	8002338 <main+0x530>
				Set_Servo(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f002 fc5d 	bl	8004b90 <Set_Servo>
				if (micros() - pen_delay_timer >= 500000) {
 80022d6:	f002 f929 	bl	800452c <micros>
 80022da:	4b96      	ldr	r3, [pc, #600]	@ (8002534 <main+0x72c>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	ebb0 0802 	subs.w	r8, r0, r2
 80022e4:	eb61 0903 	sbc.w	r9, r1, r3
 80022e8:	4b93      	ldr	r3, [pc, #588]	@ (8002538 <main+0x730>)
 80022ea:	4598      	cmp	r8, r3
 80022ec:	f179 0300 	sbcs.w	r3, r9, #0
 80022f0:	d329      	bcc.n	8002346 <main+0x53e>
					Set_Servo(0);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f002 fc4c 	bl	8004b90 <Set_Servo>
					if (TenPointMode) {
 80022f8:	4b89      	ldr	r3, [pc, #548]	@ (8002520 <main+0x718>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <main+0x520>
						if (counter == 9) {
 8002300:	4b88      	ldr	r3, [pc, #544]	@ (8002524 <main+0x71c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d109      	bne.n	800231c <main+0x514>
							TenPointMode = 0;
 8002308:	4a85      	ldr	r2, [pc, #532]	@ (8002520 <main+0x718>)
 800230a:	2300      	movs	r3, #0
 800230c:	7013      	strb	r3, [r2, #0]
							counter = 0;
 800230e:	4a85      	ldr	r2, [pc, #532]	@ (8002524 <main+0x71c>)
 8002310:	2300      	movs	r3, #0
 8002312:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 8002314:	4a7f      	ldr	r2, [pc, #508]	@ (8002514 <main+0x70c>)
 8002316:	2301      	movs	r3, #1
 8002318:	7013      	strb	r3, [r2, #0]
 800231a:	e005      	b.n	8002328 <main+0x520>
						} else {
							counter++;
 800231c:	4b81      	ldr	r3, [pc, #516]	@ (8002524 <main+0x71c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	4a7f      	ldr	r2, [pc, #508]	@ (8002524 <main+0x71c>)
 8002326:	7013      	strb	r3, [r2, #0]
						}
					}
					if (base_status == 8) {
 8002328:	4b7b      	ldr	r3, [pc, #492]	@ (8002518 <main+0x710>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d10a      	bne.n	8002346 <main+0x53e>
						REG16(REG_MOTION_STATUS) = 0;
 8002330:	4a77      	ldr	r2, [pc, #476]	@ (8002510 <main+0x708>)
 8002332:	2300      	movs	r3, #0
 8002334:	8413      	strh	r3, [r2, #32]
 8002336:	e006      	b.n	8002346 <main+0x53e>
					}
				}
			} else {
				pen_delay_timer = micros();
 8002338:	f002 f8f8 	bl	800452c <micros>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	497c      	ldr	r1, [pc, #496]	@ (8002534 <main+0x72c>)
 8002342:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem == 1))
 8002346:	4b73      	ldr	r3, [pc, #460]	@ (8002514 <main+0x70c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <main+0x556>
 800234e:	4b72      	ldr	r3, [pc, #456]	@ (8002518 <main+0x710>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d008      	beq.n	8002368 <main+0x560>
 8002356:	4b71      	ldr	r3, [pc, #452]	@ (800251c <main+0x714>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d004      	beq.n	8002368 <main+0x560>
				|| base_status == 1) {
 800235e:	4b6e      	ldr	r3, [pc, #440]	@ (8002518 <main+0x710>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	f040 8285 	bne.w	8002872 <main+0xa6a>
			switch (calibState) {
 8002368:	4b74      	ldr	r3, [pc, #464]	@ (800253c <main+0x734>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f200 8280 	bhi.w	8002872 <main+0xa6a>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <main+0x570>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023ad 	.word	0x080023ad
 800237c:	080023e3 	.word	0x080023e3
 8002380:	08002429 	.word	0x08002429
 8002384:	08002473 	.word	0x08002473
 8002388:	080024bd 	.word	0x080024bd
 800238c:	08002569 	.word	0x08002569
 8002390:	080025c1 	.word	0x080025c1
 8002394:	08002601 	.word	0x08002601
 8002398:	0800265f 	.word	0x0800265f
 800239c:	080026cb 	.word	0x080026cb
 80023a0:	08002737 	.word	0x08002737
 80023a4:	080027a7 	.word	0x080027a7
 80023a8:	080027e9 	.word	0x080027e9
			case CALIB_IDLE:
				Set_Motor(0, 0);
 80023ac:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8002564 <main+0x75c>
 80023b0:	2000      	movs	r0, #0
 80023b2:	f002 fb6f 	bl	8004a94 <Set_Motor>
				Set_Motor(1, 0);
 80023b6:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8002564 <main+0x75c>
 80023ba:	2001      	movs	r0, #1
 80023bc:	f002 fb6a 	bl	8004a94 <Set_Motor>
				P_Limit = 0;
 80023c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002540 <main+0x738>)
 80023c2:	2300      	movs	r3, #0
 80023c4:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80023c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002544 <main+0x73c>)
 80023c8:	2300      	movs	r3, #0
 80023ca:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80023cc:	4a5b      	ldr	r2, [pc, #364]	@ (800253c <main+0x734>)
 80023ce:	2301      	movs	r3, #1
 80023d0:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80023d2:	f002 f8ab 	bl	800452c <micros>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	495b      	ldr	r1, [pc, #364]	@ (8002548 <main+0x740>)
 80023dc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023e0:	e247      	b.n	8002872 <main+0xa6a>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80023e2:	4b5a      	ldr	r3, [pc, #360]	@ (800254c <main+0x744>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002550 <main+0x748>
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	dd06      	ble.n	8002404 <main+0x5fc>
					Cal_Side = 1;
 80023f6:	4a57      	ldr	r2, [pc, #348]	@ (8002554 <main+0x74c>)
 80023f8:	2301      	movs	r3, #1
 80023fa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023fc:	4a4f      	ldr	r2, [pc, #316]	@ (800253c <main+0x734>)
 80023fe:	2302      	movs	r3, #2
 8002400:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002402:	e236      	b.n	8002872 <main+0xa6a>
				} else if (Receiver[0] < -80) {
 8002404:	4b51      	ldr	r3, [pc, #324]	@ (800254c <main+0x744>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002558 <main+0x750>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d400      	bmi.n	800241a <main+0x612>
				break;
 8002418:	e22b      	b.n	8002872 <main+0xa6a>
					Cal_Side = 2;
 800241a:	4a4e      	ldr	r2, [pc, #312]	@ (8002554 <main+0x74c>)
 800241c:	2302      	movs	r3, #2
 800241e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002420:	4a46      	ldr	r2, [pc, #280]	@ (800253c <main+0x734>)
 8002422:	2302      	movs	r3, #2
 8002424:	7013      	strb	r3, [r2, #0]
				break;
 8002426:	e224      	b.n	8002872 <main+0xa6a>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002428:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 800242c:	2001      	movs	r0, #1
 800242e:	f002 fb31 	bl	8004a94 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002432:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002436:	4849      	ldr	r0, [pc, #292]	@ (800255c <main+0x754>)
 8002438:	f004 f9fe 	bl	8006838 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d004      	beq.n	800244c <main+0x644>
 8002442:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <main+0x738>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 81e5 	beq.w	8002816 <main+0xa0e>
					Set_Motor(1, 0);
 800244c:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002564 <main+0x75c>
 8002450:	2001      	movs	r0, #1
 8002452:	f002 fb1f 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 8002456:	f002 f869 	bl	800452c <micros>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	493a      	ldr	r1, [pc, #232]	@ (8002548 <main+0x740>)
 8002460:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002464:	4a36      	ldr	r2, [pc, #216]	@ (8002540 <main+0x738>)
 8002466:	2300      	movs	r3, #0
 8002468:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800246a:	4a34      	ldr	r2, [pc, #208]	@ (800253c <main+0x734>)
 800246c:	2303      	movs	r3, #3
 800246e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002470:	e1d1      	b.n	8002816 <main+0xa0e>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002472:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002564 <main+0x75c>
 8002476:	2001      	movs	r0, #1
 8002478:	f002 fb0c 	bl	8004a94 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800247c:	f002 f856 	bl	800452c <micros>
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <main+0x740>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	ebb0 0a02 	subs.w	sl, r0, r2
 800248a:	eb61 0b03 	sbc.w	fp, r1, r3
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <main+0x758>)
 8002490:	459a      	cmp	sl, r3
 8002492:	f17b 0300 	sbcs.w	r3, fp, #0
 8002496:	d311      	bcc.n	80024bc <main+0x6b4>
					Set_Motor(1, 15);
 8002498:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800249c:	2001      	movs	r0, #1
 800249e:	f002 faf9 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 80024a2:	f002 f843 	bl	800452c <micros>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4927      	ldr	r1, [pc, #156]	@ (8002548 <main+0x740>)
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024b0:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <main+0x738>)
 80024b2:	2300      	movs	r3, #0
 80024b4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80024b6:	4a21      	ldr	r2, [pc, #132]	@ (800253c <main+0x734>)
 80024b8:	2304      	movs	r3, #4
 80024ba:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 80024bc:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80024c0:	2001      	movs	r0, #1
 80024c2:	f002 fae7 	bl	8004a94 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024c6:	f002 f831 	bl	800452c <micros>
 80024ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <main+0x740>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	1a85      	subs	r5, r0, r2
 80024d2:	eb61 0603 	sbc.w	r6, r1, r3
 80024d6:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <main+0x758>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	f176 0300 	sbcs.w	r3, r6, #0
 80024de:	f0c0 819c 	bcc.w	800281a <main+0xa12>
					Set_Motor(1, 0);
 80024e2:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002564 <main+0x75c>
 80024e6:	2001      	movs	r0, #1
 80024e8:	f002 fad4 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 80024ec:	f002 f81e 	bl	800452c <micros>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4914      	ldr	r1, [pc, #80]	@ (8002548 <main+0x740>)
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <main+0x738>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002500:	4a0e      	ldr	r2, [pc, #56]	@ (800253c <main+0x734>)
 8002502:	2305      	movs	r3, #5
 8002504:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002506:	e188      	b.n	800281a <main+0xa12>
 8002508:	20000bb1 	.word	0x20000bb1
 800250c:	20000c05 	.word	0x20000c05
 8002510:	20001164 	.word	0x20001164
 8002514:	20000c04 	.word	0x20000c04
 8002518:	200012f4 	.word	0x200012f4
 800251c:	20000c76 	.word	0x20000c76
 8002520:	20000c75 	.word	0x20000c75
 8002524:	20000c74 	.word	0x20000c74
 8002528:	200012f8 	.word	0x200012f8
 800252c:	20000bcc 	.word	0x20000bcc
 8002530:	20000bd0 	.word	0x20000bd0
 8002534:	20001358 	.word	0x20001358
 8002538:	0007a120 	.word	0x0007a120
 800253c:	20000c54 	.word	0x20000c54
 8002540:	20000c09 	.word	0x20000c09
 8002544:	20000c0a 	.word	0x20000c0a
 8002548:	20000c58 	.word	0x20000c58
 800254c:	20000ae4 	.word	0x20000ae4
 8002550:	42a00000 	.word	0x42a00000
 8002554:	20000c60 	.word	0x20000c60
 8002558:	c2a00000 	.word	0xc2a00000
 800255c:	48000400 	.word	0x48000400
 8002560:	000186a1 	.word	0x000186a1
 8002564:	00000000 	.word	0x00000000

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002568:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002564 <main+0x75c>
 800256c:	2001      	movs	r0, #1
 800256e:	f002 fa91 	bl	8004a94 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002572:	f001 ffdb 	bl	800452c <micros>
 8002576:	4bb1      	ldr	r3, [pc, #708]	@ (800283c <main+0xa34>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	1a84      	subs	r4, r0, r2
 800257e:	64bc      	str	r4, [r7, #72]	@ 0x48
 8002580:	eb61 0303 	sbc.w	r3, r1, r3
 8002584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002586:	4bae      	ldr	r3, [pc, #696]	@ (8002840 <main+0xa38>)
 8002588:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800258c:	4602      	mov	r2, r0
 800258e:	429a      	cmp	r2, r3
 8002590:	460b      	mov	r3, r1
 8002592:	f173 0300 	sbcs.w	r3, r3, #0
 8002596:	f0c0 8142 	bcc.w	800281e <main+0xa16>
					Set_Motor(1, -5);
 800259a:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 800259e:	2001      	movs	r0, #1
 80025a0:	f002 fa78 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 80025a4:	f001 ffc2 	bl	800452c <micros>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	49a3      	ldr	r1, [pc, #652]	@ (800283c <main+0xa34>)
 80025ae:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80025b2:	4aa4      	ldr	r2, [pc, #656]	@ (8002844 <main+0xa3c>)
 80025b4:	2300      	movs	r3, #0
 80025b6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 80025b8:	4aa3      	ldr	r2, [pc, #652]	@ (8002848 <main+0xa40>)
 80025ba:	2306      	movs	r3, #6
 80025bc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025be:	e12e      	b.n	800281e <main+0xa16>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 80025c0:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80025c4:	2001      	movs	r0, #1
 80025c6:	f002 fa65 	bl	8004a94 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80025ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025ce:	489f      	ldr	r0, [pc, #636]	@ (800284c <main+0xa44>)
 80025d0:	f004 f932 	bl	8006838 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d004      	beq.n	80025e4 <main+0x7dc>
 80025da:	4b9a      	ldr	r3, [pc, #616]	@ (8002844 <main+0xa3c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 811f 	beq.w	8002822 <main+0xa1a>
					Set_Motor(1, 0);
 80025e4:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8002850 <main+0xa48>
 80025e8:	2001      	movs	r0, #1
 80025ea:	f002 fa53 	bl	8004a94 <Set_Motor>
					Reset_P();
 80025ee:	f002 fb09 	bl	8004c04 <Reset_P>
					P_Limit = 0;
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <main+0xa3c>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80025f8:	4a93      	ldr	r2, [pc, #588]	@ (8002848 <main+0xa40>)
 80025fa:	2307      	movs	r3, #7
 80025fc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025fe:	e110      	b.n	8002822 <main+0xa1a>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002600:	4b94      	ldr	r3, [pc, #592]	@ (8002854 <main+0xa4c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <main+0x80c>
					Set_Motor(0, -30);
 8002608:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 800260c:	2000      	movs	r0, #0
 800260e:	f002 fa41 	bl	8004a94 <Set_Motor>
 8002612:	e004      	b.n	800261e <main+0x816>
				else
					Set_Motor(0, 30);
 8002614:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002618:	2000      	movs	r0, #0
 800261a:	f002 fa3b 	bl	8004a94 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 800261e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002622:	488a      	ldr	r0, [pc, #552]	@ (800284c <main+0xa44>)
 8002624:	f004 f908 	bl	8006838 <HAL_GPIO_ReadPin>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d004      	beq.n	8002638 <main+0x830>
 800262e:	4b8a      	ldr	r3, [pc, #552]	@ (8002858 <main+0xa50>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80f7 	beq.w	8002826 <main+0xa1e>
					Set_Motor(0, 0);
 8002638:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8002850 <main+0xa48>
 800263c:	2000      	movs	r0, #0
 800263e:	f002 fa29 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 8002642:	f001 ff73 	bl	800452c <micros>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	497c      	ldr	r1, [pc, #496]	@ (800283c <main+0xa34>)
 800264c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002650:	4a81      	ldr	r2, [pc, #516]	@ (8002858 <main+0xa50>)
 8002652:	2300      	movs	r3, #0
 8002654:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002656:	4a7c      	ldr	r2, [pc, #496]	@ (8002848 <main+0xa40>)
 8002658:	2308      	movs	r3, #8
 800265a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800265c:	e0e3      	b.n	8002826 <main+0xa1e>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 800265e:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8002850 <main+0xa48>
 8002662:	2000      	movs	r0, #0
 8002664:	f002 fa16 	bl	8004a94 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002668:	f001 ff60 	bl	800452c <micros>
 800266c:	4b73      	ldr	r3, [pc, #460]	@ (800283c <main+0xa34>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	1a84      	subs	r4, r0, r2
 8002674:	643c      	str	r4, [r7, #64]	@ 0x40
 8002676:	eb61 0303 	sbc.w	r3, r1, r3
 800267a:	647b      	str	r3, [r7, #68]	@ 0x44
 800267c:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <main+0xa38>)
 800267e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002682:	4602      	mov	r2, r0
 8002684:	429a      	cmp	r2, r3
 8002686:	460b      	mov	r3, r1
 8002688:	f173 0300 	sbcs.w	r3, r3, #0
 800268c:	f0c0 80cd 	bcc.w	800282a <main+0xa22>
					if (Cal_Side == 1)
 8002690:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <main+0xa4c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <main+0x89c>
						Set_Motor(0, 30);
 8002698:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800269c:	2000      	movs	r0, #0
 800269e:	f002 f9f9 	bl	8004a94 <Set_Motor>
 80026a2:	e004      	b.n	80026ae <main+0x8a6>
					else
						Set_Motor(0, -30);
 80026a4:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026a8:	2000      	movs	r0, #0
 80026aa:	f002 f9f3 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 80026ae:	f001 ff3d 	bl	800452c <micros>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4961      	ldr	r1, [pc, #388]	@ (800283c <main+0xa34>)
 80026b8:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026bc:	4a66      	ldr	r2, [pc, #408]	@ (8002858 <main+0xa50>)
 80026be:	2300      	movs	r3, #0
 80026c0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 80026c2:	4a61      	ldr	r2, [pc, #388]	@ (8002848 <main+0xa40>)
 80026c4:	2309      	movs	r3, #9
 80026c6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80026c8:	e0af      	b.n	800282a <main+0xa22>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <main+0xa4c>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <main+0x8d6>
					Set_Motor(0, 30);
 80026d2:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80026d6:	2000      	movs	r0, #0
 80026d8:	f002 f9dc 	bl	8004a94 <Set_Motor>
 80026dc:	e004      	b.n	80026e8 <main+0x8e0>
				else
					Set_Motor(0, -30);
 80026de:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f002 f9d6 	bl	8004a94 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 80026e8:	f001 ff20 	bl	800452c <micros>
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <main+0xa34>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	1a84      	subs	r4, r0, r2
 80026f4:	63bc      	str	r4, [r7, #56]	@ 0x38
 80026f6:	eb61 0303 	sbc.w	r3, r1, r3
 80026fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026fc:	4b57      	ldr	r3, [pc, #348]	@ (800285c <main+0xa54>)
 80026fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002702:	4602      	mov	r2, r0
 8002704:	429a      	cmp	r2, r3
 8002706:	460b      	mov	r3, r1
 8002708:	f173 0300 	sbcs.w	r3, r3, #0
 800270c:	f0c0 808f 	bcc.w	800282e <main+0xa26>
					Set_Motor(0, 0);
 8002710:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8002850 <main+0xa48>
 8002714:	2000      	movs	r0, #0
 8002716:	f002 f9bd 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 800271a:	f001 ff07 	bl	800452c <micros>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4946      	ldr	r1, [pc, #280]	@ (800283c <main+0xa34>)
 8002724:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002728:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <main+0xa50>)
 800272a:	2300      	movs	r3, #0
 800272c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 800272e:	4a46      	ldr	r2, [pc, #280]	@ (8002848 <main+0xa40>)
 8002730:	230a      	movs	r3, #10
 8002732:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002734:	e07b      	b.n	800282e <main+0xa26>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002736:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002850 <main+0xa48>
 800273a:	2000      	movs	r0, #0
 800273c:	f002 f9aa 	bl	8004a94 <Set_Motor>
				Z_index_R = 0;
 8002740:	4a47      	ldr	r2, [pc, #284]	@ (8002860 <main+0xa58>)
 8002742:	2300      	movs	r3, #0
 8002744:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 8002746:	f001 fef1 	bl	800452c <micros>
 800274a:	4b3c      	ldr	r3, [pc, #240]	@ (800283c <main+0xa34>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	1a84      	subs	r4, r0, r2
 8002752:	633c      	str	r4, [r7, #48]	@ 0x30
 8002754:	eb61 0303 	sbc.w	r3, r1, r3
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
 800275a:	4b39      	ldr	r3, [pc, #228]	@ (8002840 <main+0xa38>)
 800275c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002760:	4602      	mov	r2, r0
 8002762:	429a      	cmp	r2, r3
 8002764:	460b      	mov	r3, r1
 8002766:	f173 0300 	sbcs.w	r3, r3, #0
 800276a:	d362      	bcc.n	8002832 <main+0xa2a>
					if (Cal_Side == 1)
 800276c:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <main+0xa4c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <main+0x978>
						Set_Motor(0, -25);
 8002774:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002778:	2000      	movs	r0, #0
 800277a:	f002 f98b 	bl	8004a94 <Set_Motor>
 800277e:	e004      	b.n	800278a <main+0x982>
					else
						Set_Motor(0, 25);
 8002780:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002784:	2000      	movs	r0, #0
 8002786:	f002 f985 	bl	8004a94 <Set_Motor>
					calib_timer = micros();
 800278a:	f001 fecf 	bl	800452c <micros>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	492a      	ldr	r1, [pc, #168]	@ (800283c <main+0xa34>)
 8002794:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002798:	4a2f      	ldr	r2, [pc, #188]	@ (8002858 <main+0xa50>)
 800279a:	2300      	movs	r3, #0
 800279c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 800279e:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <main+0xa40>)
 80027a0:	230b      	movs	r3, #11
 80027a2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027a4:	e045      	b.n	8002832 <main+0xa2a>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <main+0xa4c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <main+0x9b2>
					Set_Motor(0, -25);
 80027ae:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 80027b2:	2000      	movs	r0, #0
 80027b4:	f002 f96e 	bl	8004a94 <Set_Motor>
 80027b8:	e004      	b.n	80027c4 <main+0x9bc>
				else
					Set_Motor(0, 25);
 80027ba:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80027be:	2000      	movs	r0, #0
 80027c0:	f002 f968 	bl	8004a94 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <main+0xa58>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d034      	beq.n	8002836 <main+0xa2e>
					Set_Motor(0, 0);
 80027cc:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002850 <main+0xa48>
 80027d0:	2000      	movs	r0, #0
 80027d2:	f002 f95f 	bl	8004a94 <Set_Motor>
					Reset_R();
 80027d6:	f002 fa05 	bl	8004be4 <Reset_R>
					R_Limit = 0;
 80027da:	4a1f      	ldr	r2, [pc, #124]	@ (8002858 <main+0xa50>)
 80027dc:	2300      	movs	r3, #0
 80027de:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 80027e0:	4a19      	ldr	r2, [pc, #100]	@ (8002848 <main+0xa40>)
 80027e2:	230c      	movs	r3, #12
 80027e4:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027e6:	e026      	b.n	8002836 <main+0xa2e>

			case CALIB_DONE:
				Cal_Side = 0;
 80027e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <main+0xa4c>)
 80027ea:	2300      	movs	r3, #0
 80027ec:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80027ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <main+0xa5c>)
 80027f0:	2300      	movs	r3, #0
 80027f2:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80027f4:	4a13      	ldr	r2, [pc, #76]	@ (8002844 <main+0xa3c>)
 80027f6:	2300      	movs	r3, #0
 80027f8:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027fa:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <main+0xa50>)
 80027fc:	2300      	movs	r3, #0
 80027fe:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <main+0xa40>)
 8002802:	2300      	movs	r3, #0
 8002804:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <main+0xa60>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d130      	bne.n	8002870 <main+0xa68>
					REG16(REG_MOTION_STATUS) = 0;
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <main+0xa64>)
 8002810:	2300      	movs	r3, #0
 8002812:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 8002814:	e02c      	b.n	8002870 <main+0xa68>
				break;
 8002816:	bf00      	nop
 8002818:	e02b      	b.n	8002872 <main+0xa6a>
				break;
 800281a:	bf00      	nop
 800281c:	e029      	b.n	8002872 <main+0xa6a>
				break;
 800281e:	bf00      	nop
 8002820:	e027      	b.n	8002872 <main+0xa6a>
				break;
 8002822:	bf00      	nop
 8002824:	e025      	b.n	8002872 <main+0xa6a>
				break;
 8002826:	bf00      	nop
 8002828:	e023      	b.n	8002872 <main+0xa6a>
				break;
 800282a:	bf00      	nop
 800282c:	e021      	b.n	8002872 <main+0xa6a>
				break;
 800282e:	bf00      	nop
 8002830:	e01f      	b.n	8002872 <main+0xa6a>
				break;
 8002832:	bf00      	nop
 8002834:	e01d      	b.n	8002872 <main+0xa6a>
				break;
 8002836:	bf00      	nop
 8002838:	e01b      	b.n	8002872 <main+0xa6a>
 800283a:	bf00      	nop
 800283c:	20000c58 	.word	0x20000c58
 8002840:	000186a1 	.word	0x000186a1
 8002844:	20000c09 	.word	0x20000c09
 8002848:	20000c54 	.word	0x20000c54
 800284c:	48000400 	.word	0x48000400
 8002850:	00000000 	.word	0x00000000
 8002854:	20000c60 	.word	0x20000c60
 8002858:	20000c0a 	.word	0x20000c0a
 800285c:	00030d41 	.word	0x00030d41
 8002860:	20000bb0 	.word	0x20000bb0
 8002864:	20000c04 	.word	0x20000c04
 8002868:	200012f4 	.word	0x200012f4
 800286c:	20001164 	.word	0x20001164
				break;
 8002870:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem == 1) {
 8002872:	4b61      	ldr	r3, [pc, #388]	@ (80029f8 <main+0xbf0>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d004      	beq.n	8002884 <main+0xa7c>
 800287a:	4b60      	ldr	r3, [pc, #384]	@ (80029fc <main+0xbf4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f47f ab4b 	bne.w	8001f1a <main+0x112>

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002884:	4b5e      	ldr	r3, [pc, #376]	@ (8002a00 <main+0xbf8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	461a      	mov	r2, r3
 800288c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <main+0xbfc>)
 800288e:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002890:	4b5d      	ldr	r3, [pc, #372]	@ (8002a08 <main+0xc00>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002896:	461a      	mov	r2, r3
 8002898:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <main+0xbfc>)
 800289a:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800289c:	4b58      	ldr	r3, [pc, #352]	@ (8002a00 <main+0xbf8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fdfa 	bl	800049c <__aeabi_ui2d>
 80028a8:	a34f      	add	r3, pc, #316	@ (adr r3, 80029e8 <main+0xbe0>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fcb7 	bl	8000220 <__aeabi_dsub>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
			float RX_temp = map(
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f923 	bl	8000b04 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 8002a0c <main+0xc04>
 80028c4:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002a10 <main+0xc08>
 80028c8:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 8002a14 <main+0xc0c>
 80028cc:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8002a18 <main+0xc10>
 80028d0:	ee00 3a10 	vmov	s0, r3
 80028d4:	f001 fd06 	bl	80042e4 <map>
 80028d8:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 80028dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <main+0xc00>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fdda 	bl	800049c <__aeabi_ui2d>
 80028e8:	a341      	add	r3, pc, #260	@ (adr r3, 80029f0 <main+0xbe8>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fc97 	bl	8000220 <__aeabi_dsub>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
			float RY_temp = map(
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f903 	bl	8000b04 <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8002a0c <main+0xc04>
 8002904:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8002a10 <main+0xc08>
 8002908:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8002a14 <main+0xc0c>
 800290c:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002a18 <main+0xc10>
 8002910:	ee00 3a10 	vmov	s0, r3
 8002914:	f001 fce6 	bl	80042e4 <map>
 8002918:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 800291c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002920:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	db0d      	blt.n	800294a <main+0xb42>
 800292e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002932:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d804      	bhi.n	800294a <main+0xb42>
				Receiver[0] = 0.00;
 8002940:	4a36      	ldr	r2, [pc, #216]	@ (8002a1c <main+0xc14>)
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e01d      	b.n	8002986 <main+0xb7e>
			else if (RX_temp > 100)
 800294a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800294e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002a0c <main+0xc04>
 8002952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	dd03      	ble.n	8002964 <main+0xb5c>
				Receiver[0] = 100.00;
 800295c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a1c <main+0xc14>)
 800295e:	4b30      	ldr	r3, [pc, #192]	@ (8002a20 <main+0xc18>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e010      	b.n	8002986 <main+0xb7e>
			else if (RX_temp < -100)
 8002964:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002968:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002a10 <main+0xc08>
 800296c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002974:	d503      	bpl.n	800297e <main+0xb76>
				Receiver[0] = -100.00;
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <main+0xc14>)
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <main+0xc1c>)
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e003      	b.n	8002986 <main+0xb7e>
			else
				Receiver[0] = RX_temp;
 800297e:	4a27      	ldr	r2, [pc, #156]	@ (8002a1c <main+0xc14>)
 8002980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002984:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002986:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800298a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	db0d      	blt.n	80029b4 <main+0xbac>
 8002998:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800299c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80029a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d804      	bhi.n	80029b4 <main+0xbac>
				Receiver[1] = 0.00;
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <main+0xc14>)
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	e03d      	b.n	8002a30 <main+0xc28>
			else if (RY_temp > 100)
 80029b4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029b8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002a0c <main+0xc04>
 80029bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c4:	dd03      	ble.n	80029ce <main+0xbc6>
				Receiver[1] = 100.00;
 80029c6:	4a15      	ldr	r2, [pc, #84]	@ (8002a1c <main+0xc14>)
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <main+0xc18>)
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	e030      	b.n	8002a30 <main+0xc28>
			else if (RY_temp < -100)
 80029ce:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002a10 <main+0xc08>
 80029d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	d523      	bpl.n	8002a28 <main+0xc20>
				Receiver[1] = -100.00;
 80029e0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <main+0xc14>)
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <main+0xc1c>)
 80029e4:	6053      	str	r3, [r2, #4]
 80029e6:	e023      	b.n	8002a30 <main+0xc28>
 80029e8:	00000000 	.word	0x00000000
 80029ec:	40977000 	.word	0x40977000
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40d21880 	.word	0x40d21880
 80029f8:	200012f4 	.word	0x200012f4
 80029fc:	20000c76 	.word	0x20000c76
 8002a00:	200003b4 	.word	0x200003b4
 8002a04:	20000af8 	.word	0x20000af8
 8002a08:	200002e8 	.word	0x200002e8
 8002a0c:	42c80000 	.word	0x42c80000
 8002a10:	c2c80000 	.word	0xc2c80000
 8002a14:	43fa0000 	.word	0x43fa0000
 8002a18:	c3fa0000 	.word	0xc3fa0000
 8002a1c:	20000ae4 	.word	0x20000ae4
 8002a20:	42c80000 	.word	0x42c80000
 8002a24:	c2c80000 	.word	0xc2c80000
			else
				Receiver[1] = RY_temp;
 8002a28:	4abf      	ldr	r2, [pc, #764]	@ (8002d28 <main+0xf20>)
 8002a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a2e:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a30:	4bbe      	ldr	r3, [pc, #760]	@ (8002d2c <main+0xf24>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a38:	d912      	bls.n	8002a60 <main+0xc58>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a3a:	4bbc      	ldr	r3, [pc, #752]	@ (8002d2c <main+0xf24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd2c 	bl	800049c <__aeabi_ui2d>
 8002a44:	a3b4      	add	r3, pc, #720	@ (adr r3, 8002d18 <main+0xf10>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fbe9 	bl	8000220 <__aeabi_dsub>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f835 	bl	8000ac4 <__aeabi_d2uiz>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4bb3      	ldr	r3, [pc, #716]	@ (8002d2c <main+0xf24>)
 8002a5e:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a60:	4bb2      	ldr	r3, [pc, #712]	@ (8002d2c <main+0xf24>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a68:	d912      	bls.n	8002a90 <main+0xc88>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a6a:	4bb0      	ldr	r3, [pc, #704]	@ (8002d2c <main+0xf24>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd14 	bl	800049c <__aeabi_ui2d>
 8002a74:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002d18 <main+0xf10>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fbd1 	bl	8000220 <__aeabi_dsub>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f81d 	bl	8000ac4 <__aeabi_d2uiz>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4ba7      	ldr	r3, [pc, #668]	@ (8002d2c <main+0xf24>)
 8002a8e:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a90:	4ba6      	ldr	r3, [pc, #664]	@ (8002d2c <main+0xf24>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a98:	d912      	bls.n	8002ac0 <main+0xcb8>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8002d2c <main+0xf24>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fcfc 	bl	800049c <__aeabi_ui2d>
 8002aa4:	a39c      	add	r3, pc, #624	@ (adr r3, 8002d18 <main+0xf10>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fbb9 	bl	8000220 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f805 	bl	8000ac4 <__aeabi_d2uiz>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b9b      	ldr	r3, [pc, #620]	@ (8002d2c <main+0xf24>)
 8002abe:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002ac0:	4b9a      	ldr	r3, [pc, #616]	@ (8002d2c <main+0xf24>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002acc:	ee17 0a90 	vmov	r0, s15
 8002ad0:	f7fd fd06 	bl	80004e0 <__aeabi_f2d>
 8002ad4:	a392      	add	r3, pc, #584	@ (adr r3, 8002d20 <main+0xf18>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fba1 	bl	8000220 <__aeabi_dsub>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f80d 	bl	8000b04 <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8002d30 <main+0xf28>
 8002af0:	eddf 1a90 	vldr	s3, [pc, #576]	@ 8002d34 <main+0xf2c>
 8002af4:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8002d38 <main+0xf30>
 8002af8:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8002d3c <main+0xf34>
 8002afc:	ee00 3a10 	vmov	s0, r3
 8002b00:	f001 fbf0 	bl	80042e4 <map>
 8002b04:	eef0 7a40 	vmov.f32	s15, s0
 8002b08:	4b87      	ldr	r3, [pc, #540]	@ (8002d28 <main+0xf20>)
 8002b0a:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002b0e:	4b87      	ldr	r3, [pc, #540]	@ (8002d2c <main+0xf24>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	ee17 0a90 	vmov	r0, s15
 8002b1e:	f7fd fcdf 	bl	80004e0 <__aeabi_f2d>
 8002b22:	a37f      	add	r3, pc, #508	@ (adr r3, 8002d20 <main+0xf18>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fb7a 	bl	8000220 <__aeabi_dsub>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fd ffe6 	bl	8000b04 <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 8002d30 <main+0xf28>
 8002b3e:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8002d34 <main+0xf2c>
 8002b42:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8002d38 <main+0xf30>
 8002b46:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8002d3c <main+0xf34>
 8002b4a:	ee00 3a10 	vmov	s0, r3
 8002b4e:	f001 fbc9 	bl	80042e4 <map>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	4b74      	ldr	r3, [pc, #464]	@ (8002d28 <main+0xf20>)
 8002b58:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b5c:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <main+0xf24>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b68:	ee17 0a90 	vmov	r0, s15
 8002b6c:	f7fd fcb8 	bl	80004e0 <__aeabi_f2d>
 8002b70:	a36b      	add	r3, pc, #428	@ (adr r3, 8002d20 <main+0xf18>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fb53 	bl	8000220 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ffbf 	bl	8000b04 <__aeabi_d2f>
 8002b86:	4603      	mov	r3, r0
 8002b88:	ed9f 2a69 	vldr	s4, [pc, #420]	@ 8002d30 <main+0xf28>
 8002b8c:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8002d34 <main+0xf2c>
 8002b90:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8002d38 <main+0xf30>
 8002b94:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002d3c <main+0xf34>
 8002b98:	ee00 3a10 	vmov	s0, r3
 8002b9c:	f001 fba2 	bl	80042e4 <map>
 8002ba0:	eef0 7a40 	vmov.f32	s15, s0
 8002ba4:	4b60      	ldr	r3, [pc, #384]	@ (8002d28 <main+0xf20>)
 8002ba6:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002baa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d28 <main+0xf20>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8002d40 <main+0xf38>
 8002bb4:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8002d44 <main+0xf3c>
 8002bb8:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8002d30 <main+0xf28>
 8002bbc:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8002d34 <main+0xf2c>
 8002bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc4:	f001 fb8e 	bl	80042e4 <map>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002d48 <main+0xf40>)
 8002bce:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002bd2:	4b55      	ldr	r3, [pc, #340]	@ (8002d28 <main+0xf20>)
 8002bd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bd8:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8002d40 <main+0xf38>
 8002bdc:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8002d44 <main+0xf3c>
 8002be0:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002d30 <main+0xf28>
 8002be4:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8002d34 <main+0xf2c>
 8002be8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bec:	f001 fb7a 	bl	80042e4 <map>
 8002bf0:	eef0 7a40 	vmov.f32	s15, s0
 8002bf4:	4b55      	ldr	r3, [pc, #340]	@ (8002d4c <main+0xf44>)
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002bfa:	4b55      	ldr	r3, [pc, #340]	@ (8002d50 <main+0xf48>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d103      	bne.n	8002c0a <main+0xe02>
				Mode = 0;
 8002c02:	4a54      	ldr	r2, [pc, #336]	@ (8002d54 <main+0xf4c>)
 8002c04:	2300      	movs	r3, #0
 8002c06:	7013      	strb	r3, [r2, #0]
 8002c08:	e1a9      	b.n	8002f5e <main+0x1156>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <main+0xf20>)
 8002c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c10:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	d513      	bpl.n	8002c46 <main+0xe3e>
 8002c1e:	4b42      	ldr	r3, [pc, #264]	@ (8002d28 <main+0xf20>)
 8002c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c24:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	d509      	bpl.n	8002c46 <main+0xe3e>
				Mode = 0;
 8002c32:	4a48      	ldr	r2, [pc, #288]	@ (8002d54 <main+0xf4c>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c3e:	4846      	ldr	r0, [pc, #280]	@ (8002d58 <main+0xf50>)
 8002c40:	f003 fe12 	bl	8006868 <HAL_GPIO_WritePin>
 8002c44:	e18b      	b.n	8002f5e <main+0x1156>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002c46:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <main+0xf20>)
 8002c48:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	f340 8180 	ble.w	8002f58 <main+0x1150>
 8002c58:	4b40      	ldr	r3, [pc, #256]	@ (8002d5c <main+0xf54>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 817b 	bne.w	8002f58 <main+0x1150>
				IsPress = 1;
 8002c62:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <main+0xf54>)
 8002c64:	2301      	movs	r3, #1
 8002c66:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c68:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <main+0xf58>)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d28 <main+0xf20>)
 8002c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c74:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	dd2c      	ble.n	8002cdc <main+0xed4>
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <main+0xf20>)
 8002c84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c88:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d522      	bpl.n	8002cdc <main+0xed4>
						&& Receiver[4] < -30) {
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <main+0xf20>)
 8002c98:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c9c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d518      	bpl.n	8002cdc <main+0xed4>
					if (Mode != 1) {
 8002caa:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <main+0xf4c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d003      	beq.n	8002cba <main+0xeb2>
						Mode = 1;
 8002cb2:	4a28      	ldr	r2, [pc, #160]	@ (8002d54 <main+0xf4c>)
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002cb8:	e13b      	b.n	8002f32 <main+0x112a>
					} else {
						TargetX = End_x;
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <main+0xf5c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <main+0xf60>)
 8002cc0:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <main+0xf64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <main+0xf68>)
 8002cc8:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002cca:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <main+0xf6c>)
 8002ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cce:	4b2a      	ldr	r3, [pc, #168]	@ (8002d78 <main+0xf70>)
 8002cd0:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <main+0xf74>)
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <main+0xf78>)
 8002cd8:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002cda:	e12a      	b.n	8002f32 <main+0x112a>
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <main+0xf20>)
 8002cde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ce2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cee:	dd4d      	ble.n	8002d8c <main+0xf84>
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <main+0xf20>)
 8002cf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cf6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d543      	bpl.n	8002d8c <main+0xf84>
					revolute.finished = 0;
 8002d04:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <main+0xf7c>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <main+0xf80>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002d10:	4a10      	ldr	r2, [pc, #64]	@ (8002d54 <main+0xf4c>)
 8002d12:	2302      	movs	r3, #2
 8002d14:	7013      	strb	r3, [r2, #0]
 8002d16:	e10c      	b.n	8002f32 <main+0x112a>
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	40b32400 	.word	0x40b32400
 8002d20:	00000000 	.word	0x00000000
 8002d24:	40977000 	.word	0x40977000
 8002d28:	20000ae4 	.word	0x20000ae4
 8002d2c:	20000b18 	.word	0x20000b18
 8002d30:	42c80000 	.word	0x42c80000
 8002d34:	c2c80000 	.word	0xc2c80000
 8002d38:	43fa0000 	.word	0x43fa0000
 8002d3c:	c3fa0000 	.word	0xc3fa0000
 8002d40:	43960000 	.word	0x43960000
 8002d44:	c3960000 	.word	0xc3960000
 8002d48:	20000bb4 	.word	0x20000bb4
 8002d4c:	20000bb8 	.word	0x20000bb8
 8002d50:	20000c05 	.word	0x20000c05
 8002d54:	20000c04 	.word	0x20000c04
 8002d58:	48000800 	.word	0x48000800
 8002d5c:	20000c06 	.word	0x20000c06
 8002d60:	20000c54 	.word	0x20000c54
 8002d64:	20000bbc 	.word	0x20000bbc
 8002d68:	20000bc4 	.word	0x20000bc4
 8002d6c:	20000bc0 	.word	0x20000bc0
 8002d70:	20000bc8 	.word	0x20000bc8
 8002d74:	20000b30 	.word	0x20000b30
 8002d78:	20000bcc 	.word	0x20000bcc
 8002d7c:	20000b70 	.word	0x20000b70
 8002d80:	20000bd0 	.word	0x20000bd0
 8002d84:	20001364 	.word	0x20001364
 8002d88:	200013a8 	.word	0x200013a8
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d8c:	4b69      	ldr	r3, [pc, #420]	@ (8002f34 <main+0x112c>)
 8002d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d92:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d517      	bpl.n	8002dd0 <main+0xfc8>
 8002da0:	4b64      	ldr	r3, [pc, #400]	@ (8002f34 <main+0x112c>)
 8002da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dd0d      	ble.n	8002dd0 <main+0xfc8>
						&& Receiver[4] < 30) {
 8002db4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f34 <main+0x112c>)
 8002db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dba:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	d503      	bpl.n	8002dd0 <main+0xfc8>
					Mode = 3;
 8002dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f38 <main+0x1130>)
 8002dca:	2303      	movs	r3, #3
 8002dcc:	7013      	strb	r3, [r2, #0]
 8002dce:	e0b0      	b.n	8002f32 <main+0x112a>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002dd0:	4b58      	ldr	r3, [pc, #352]	@ (8002f34 <main+0x112c>)
 8002dd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de2:	dd27      	ble.n	8002e34 <main+0x102c>
 8002de4:	4b53      	ldr	r3, [pc, #332]	@ (8002f34 <main+0x112c>)
 8002de6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	d51d      	bpl.n	8002e34 <main+0x102c>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002df8:	4b4e      	ldr	r3, [pc, #312]	@ (8002f34 <main+0x112c>)
 8002dfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfe:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	dd13      	ble.n	8002e34 <main+0x102c>
 8002e0c:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <main+0x112c>)
 8002e0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e12:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d509      	bpl.n	8002e34 <main+0x102c>
					revolute.finished = 0;
 8002e20:	4a46      	ldr	r2, [pc, #280]	@ (8002f3c <main+0x1134>)
 8002e22:	2300      	movs	r3, #0
 8002e24:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002e26:	4a46      	ldr	r2, [pc, #280]	@ (8002f40 <main+0x1138>)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e2c:	4a42      	ldr	r2, [pc, #264]	@ (8002f38 <main+0x1130>)
 8002e2e:	2304      	movs	r3, #4
 8002e30:	7013      	strb	r3, [r2, #0]
 8002e32:	e07e      	b.n	8002f32 <main+0x112a>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002e34:	4b3f      	ldr	r3, [pc, #252]	@ (8002f34 <main+0x112c>)
 8002e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e3a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	dd17      	ble.n	8002e78 <main+0x1070>
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <main+0x112c>)
 8002e4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e4e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	dd0d      	ble.n	8002e78 <main+0x1070>
						&& Receiver[4] < 30) {
 8002e5c:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <main+0x112c>)
 8002e5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e62:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d503      	bpl.n	8002e78 <main+0x1070>
					Mode = 5;
 8002e70:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <main+0x1130>)
 8002e72:	2305      	movs	r3, #5
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	e05c      	b.n	8002f32 <main+0x112a>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e78:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <main+0x112c>)
 8002e7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e7e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	d50d      	bpl.n	8002ea8 <main+0x10a0>
 8002e8c:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <main+0x112c>)
 8002e8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e92:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	dd03      	ble.n	8002ea8 <main+0x10a0>
					Mode = 6;
 8002ea0:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <main+0x1130>)
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	7013      	strb	r3, [r2, #0]
 8002ea6:	e044      	b.n	8002f32 <main+0x112a>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002ea8:	4b22      	ldr	r3, [pc, #136]	@ (8002f34 <main+0x112c>)
 8002eaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eae:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eba:	dd17      	ble.n	8002eec <main+0x10e4>
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <main+0x112c>)
 8002ebe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ec2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	d50d      	bpl.n	8002eec <main+0x10e4>
						&& Receiver[4] > 30) {
 8002ed0:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <main+0x112c>)
 8002ed2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ed6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	dd03      	ble.n	8002eec <main+0x10e4>
					Mode = 7;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <main+0x1130>)
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	7013      	strb	r3, [r2, #0]
 8002eea:	e022      	b.n	8002f32 <main+0x112a>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <main+0x112c>)
 8002eee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ef2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	dc00      	bgt.n	8002f02 <main+0x10fa>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f00:	e02d      	b.n	8002f5e <main+0x1156>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <main+0x112c>)
 8002f04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f08:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	dc00      	bgt.n	8002f18 <main+0x1110>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f16:	e022      	b.n	8002f5e <main+0x1156>
					loop_counter = 0;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <main+0x113c>)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6013      	str	r3, [r2, #0]
					TargetR = 4.18879;
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <main+0x1140>)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <main+0x1144>)
 8002f22:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <main+0x1148>)
 8002f26:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <main+0x114c>)
 8002f28:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002f2a:	4a03      	ldr	r2, [pc, #12]	@ (8002f38 <main+0x1130>)
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f30:	e015      	b.n	8002f5e <main+0x1156>
 8002f32:	e014      	b.n	8002f5e <main+0x1156>
 8002f34:	20000ae4 	.word	0x20000ae4
 8002f38:	20000c04 	.word	0x20000c04
 8002f3c:	20001364 	.word	0x20001364
 8002f40:	200013a8 	.word	0x200013a8
 8002f44:	20000c70 	.word	0x20000c70
 8002f48:	20000bcc 	.word	0x20000bcc
 8002f4c:	40860a91 	.word	0x40860a91
 8002f50:	20000bd0 	.word	0x20000bd0
 8002f54:	42480000 	.word	0x42480000
				}
			} else {
				IsPress = 0;
 8002f58:	4ab9      	ldr	r2, [pc, #740]	@ (8003240 <main+0x1438>)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002f5e:	4bb9      	ldr	r3, [pc, #740]	@ (8003244 <main+0x143c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <main+0x1178>
				Set_Motor(0, 0);
 8002f66:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8003248 <main+0x1440>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f001 fd92 	bl	8004a94 <Set_Motor>
				Set_Motor(1, 0);
 8002f70:	ed9f 0ab5 	vldr	s0, [pc, #724]	@ 8003248 <main+0x1440>
 8002f74:	2001      	movs	r0, #1
 8002f76:	f001 fd8d 	bl	8004a94 <Set_Motor>
				Set_Servo(0);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f001 fe08 	bl	8004b90 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002f80:	4bb0      	ldr	r3, [pc, #704]	@ (8003244 <main+0x143c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 80af 	bne.w	80030e8 <main+0x12e0>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002f8a:	4bb0      	ldr	r3, [pc, #704]	@ (800324c <main+0x1444>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f94:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002f98:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 8003250 <main+0x1448>
 8002f9c:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8003254 <main+0x144c>
 8002fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa4:	f001 f99e 	bl	80042e4 <map>
 8002fa8:	eef0 7a40 	vmov.f32	s15, s0
 8002fac:	4baa      	ldr	r3, [pc, #680]	@ (8003258 <main+0x1450>)
 8002fae:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002fb2:	4ba6      	ldr	r3, [pc, #664]	@ (800324c <main+0x1444>)
 8002fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fb8:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 800325c <main+0x1454>
 8002fbc:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 8003260 <main+0x1458>
 8002fc0:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 8003250 <main+0x1448>
 8002fc4:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8003254 <main+0x144c>
 8002fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fcc:	f001 f98a 	bl	80042e4 <map>
 8002fd0:	eef0 7a40 	vmov.f32	s15, s0
 8002fd4:	4ba3      	ldr	r3, [pc, #652]	@ (8003264 <main+0x145c>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002fda:	4b9f      	ldr	r3, [pc, #636]	@ (8003258 <main+0x1450>)
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	4ba1      	ldr	r3, [pc, #644]	@ (8003268 <main+0x1460>)
 8002fe2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fea:	4ba0      	ldr	r3, [pc, #640]	@ (800326c <main+0x1464>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8003264 <main+0x145c>)
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8003270 <main+0x1468>)
 8002ff8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003000:	4b9c      	ldr	r3, [pc, #624]	@ (8003274 <main+0x146c>)
 8003002:	edc3 7a00 	vstr	s15, [r3]

				//Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8003006:	f001 fa91 	bl	800452c <micros>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				if (currentTimeState1 > timestampState1) {
 8003012:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003016:	4b98      	ldr	r3, [pc, #608]	@ (8003278 <main+0x1470>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	4282      	cmp	r2, r0
 800301e:	418b      	sbcs	r3, r1
 8003020:	d250      	bcs.n	80030c4 <main+0x12bc>
					timestampState1 = currentTimeState1 + 1000;		//us
 8003022:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003026:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 800302a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800302c:	f143 0300 	adc.w	r3, r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003036:	4b90      	ldr	r3, [pc, #576]	@ (8003278 <main+0x1470>)
 8003038:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 800303c:	4b8b      	ldr	r3, [pc, #556]	@ (800326c <main+0x1464>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	4b8e      	ldr	r3, [pc, #568]	@ (800327c <main+0x1474>)
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	4b8d      	ldr	r3, [pc, #564]	@ (8003280 <main+0x1478>)
 800304a:	edd3 6a00 	vldr	s13, [r3]
 800304e:	4b8d      	ldr	r3, [pc, #564]	@ (8003284 <main+0x147c>)
 8003050:	ed93 6a00 	vldr	s12, [r3]
 8003054:	488c      	ldr	r0, [pc, #560]	@ (8003288 <main+0x1480>)
 8003056:	ed9f 3a7e 	vldr	s6, [pc, #504]	@ 8003250 <main+0x1448>
 800305a:	eddf 2a7e 	vldr	s5, [pc, #504]	@ 8003254 <main+0x144c>
 800305e:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800328c <main+0x1484>
 8003062:	eef0 1a46 	vmov.f32	s3, s12
 8003066:	eeb0 1a66 	vmov.f32	s2, s13
 800306a:	eef0 0a47 	vmov.f32	s1, s14
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	f001 fa75 	bl	8004560 <PID_Update>
 8003076:	eef0 7a40 	vmov.f32	s15, s0
 800307a:	4b85      	ldr	r3, [pc, #532]	@ (8003290 <main+0x1488>)
 800307c:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8003080:	4b7c      	ldr	r3, [pc, #496]	@ (8003274 <main+0x146c>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	4b83      	ldr	r3, [pc, #524]	@ (8003294 <main+0x148c>)
 8003088:	ed93 7a00 	vldr	s14, [r3]
 800308c:	4b82      	ldr	r3, [pc, #520]	@ (8003298 <main+0x1490>)
 800308e:	edd3 6a00 	vldr	s13, [r3]
 8003092:	4b82      	ldr	r3, [pc, #520]	@ (800329c <main+0x1494>)
 8003094:	ed93 6a00 	vldr	s12, [r3]
 8003098:	4881      	ldr	r0, [pc, #516]	@ (80032a0 <main+0x1498>)
 800309a:	ed9f 3a6d 	vldr	s6, [pc, #436]	@ 8003250 <main+0x1448>
 800309e:	eddf 2a6d 	vldr	s5, [pc, #436]	@ 8003254 <main+0x144c>
 80030a2:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 800328c <main+0x1484>
 80030a6:	eef0 1a46 	vmov.f32	s3, s12
 80030aa:	eeb0 1a66 	vmov.f32	s2, s13
 80030ae:	eef0 0a47 	vmov.f32	s1, s14
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	f001 fa53 	bl	8004560 <PID_Update>
 80030ba:	eef0 7a40 	vmov.f32	s15, s0
 80030be:	4b79      	ldr	r3, [pc, #484]	@ (80032a4 <main+0x149c>)
 80030c0:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 80030c4:	f001 fdb0 	bl	8004c28 <Workspace_limit>

				Set_Motor(0, R_PWM);
 80030c8:	4b71      	ldr	r3, [pc, #452]	@ (8003290 <main+0x1488>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eeb0 0a67 	vmov.f32	s0, s15
 80030d2:	2000      	movs	r0, #0
 80030d4:	f001 fcde 	bl	8004a94 <Set_Motor>
				Set_Motor(1, P_PWM);
 80030d8:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <main+0x149c>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	2001      	movs	r0, #1
 80030e4:	f001 fcd6 	bl	8004a94 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 80030e8:	4b56      	ldr	r3, [pc, #344]	@ (8003244 <main+0x143c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d11f      	bne.n	8003130 <main+0x1328>
				InverseKinematics(TargetX, TargetY, &TargetR, &TargetP);
 80030f0:	4b6d      	ldr	r3, [pc, #436]	@ (80032a8 <main+0x14a0>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	4b6d      	ldr	r3, [pc, #436]	@ (80032ac <main+0x14a4>)
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	496c      	ldr	r1, [pc, #432]	@ (80032b0 <main+0x14a8>)
 80030fe:	486d      	ldr	r0, [pc, #436]	@ (80032b4 <main+0x14ac>)
 8003100:	eef0 0a47 	vmov.f32	s1, s14
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	f001 fefa 	bl	8004f00 <InverseKinematics>
				//TargetR = TargetR_Deg * M_PI / 180;
				if (CascadeControl_Step()) {
 800310c:	f002 f944 	bl	8005398 <CascadeControl_Step>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <main+0x1328>
					Set_Servo(1);
 8003116:	2001      	movs	r0, #1
 8003118:	f001 fd3a 	bl	8004b90 <Set_Servo>
					Set_Motor(0, 0);
 800311c:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8003248 <main+0x1440>
 8003120:	2000      	movs	r0, #0
 8003122:	f001 fcb7 	bl	8004a94 <Set_Motor>
					Set_Motor(1, 0);
 8003126:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8003248 <main+0x1440>
 800312a:	2001      	movs	r0, #1
 800312c:	f001 fcb2 	bl	8004a94 <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 8003130:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <main+0x143c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b05      	cmp	r3, #5
 8003136:	f040 823d 	bne.w	80035b4 <main+0x17ac>
				static uint64_t timestampState5 = 0;
				int64_t currentTimeState5 = micros();
 800313a:	f001 f9f7 	bl	800452c <micros>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				if (currentTimeState5 > timestampState5) {
 8003146:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800314a:	4b5b      	ldr	r3, [pc, #364]	@ (80032b8 <main+0x14b0>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	4282      	cmp	r2, r0
 8003152:	418b      	sbcs	r3, r1
 8003154:	f080 822e 	bcs.w	80035b4 <main+0x17ac>
					timestampState5 = currentTimeState5 + 1000; //us
 8003158:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800315c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003160:	6239      	str	r1, [r7, #32]
 8003162:	f143 0300 	adc.w	r3, r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
 8003168:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800316c:	4b52      	ldr	r3, [pc, #328]	@ (80032b8 <main+0x14b0>)
 800316e:	e9c3 0100 	strd	r0, r1, [r3]

					P_kP_vel = 1.05845642f;
 8003172:	4a48      	ldr	r2, [pc, #288]	@ (8003294 <main+0x148c>)
 8003174:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <main+0x14b4>)
 8003176:	6013      	str	r3, [r2, #0]
					P_kI_vel = 0.0496f;
 8003178:	4a47      	ldr	r2, [pc, #284]	@ (8003298 <main+0x1490>)
 800317a:	4b51      	ldr	r3, [pc, #324]	@ (80032c0 <main+0x14b8>)
 800317c:	6013      	str	r3, [r2, #0]
					P_kD_vel = 0.00f;
 800317e:	4a47      	ldr	r2, [pc, #284]	@ (800329c <main+0x1494>)
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	6013      	str	r3, [r2, #0]

					P_kP_pos = 3.0367f;
 8003186:	4a4f      	ldr	r2, [pc, #316]	@ (80032c4 <main+0x14bc>)
 8003188:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <main+0x14c0>)
 800318a:	6013      	str	r3, [r2, #0]
					P_kI_pos = 0.10198f;
 800318c:	4a4f      	ldr	r2, [pc, #316]	@ (80032cc <main+0x14c4>)
 800318e:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <main+0x14c8>)
 8003190:	6013      	str	r3, [r2, #0]
					P_kD_pos = 0.0047f;
 8003192:	4a50      	ldr	r2, [pc, #320]	@ (80032d4 <main+0x14cc>)
 8003194:	4b50      	ldr	r3, [pc, #320]	@ (80032d8 <main+0x14d0>)
 8003196:	6013      	str	r3, [r2, #0]

					bool reachedR = fabsf(
							TargetR - Revolute_QEIdata.RadPosition) < 0.068;
 8003198:	4b46      	ldr	r3, [pc, #280]	@ (80032b4 <main+0x14ac>)
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	4b32      	ldr	r3, [pc, #200]	@ (8003268 <main+0x1460>)
 80031a0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031a4:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedR = fabsf(
 80031a8:	eef0 7ae7 	vabs.f32	s15, s15
 80031ac:	ee17 0a90 	vmov	r0, s15
 80031b0:	f7fd f996 	bl	80004e0 <__aeabi_f2d>
 80031b4:	2301      	movs	r3, #1
 80031b6:	461c      	mov	r4, r3
 80031b8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003230 <main+0x1428>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd fc59 	bl	8000a74 <__aeabi_dcmplt>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <main+0x13c4>
 80031c8:	2300      	movs	r3, #0
 80031ca:	461c      	mov	r4, r3
 80031cc:	f887 4087 	strb.w	r4, [r7, #135]	@ 0x87
					bool reachedP = fabsf(
							TargetP - Prismatic_QEIdata.mmPosition) < 0.4;
 80031d0:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <main+0x14a8>)
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <main+0x1468>)
 80031d8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031dc:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedP = fabsf(
 80031e0:	eef0 7ae7 	vabs.f32	s15, s15
 80031e4:	ee17 0a90 	vmov	r0, s15
 80031e8:	f7fd f97a 	bl	80004e0 <__aeabi_f2d>
 80031ec:	2301      	movs	r3, #1
 80031ee:	461c      	mov	r4, r3
 80031f0:	a311      	add	r3, pc, #68	@ (adr r3, 8003238 <main+0x1430>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f7fd fc3d 	bl	8000a74 <__aeabi_dcmplt>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <main+0x13fc>
 8003200:	2300      	movs	r3, #0
 8003202:	461c      	mov	r4, r3
 8003204:	f887 4086 	strb.w	r4, [r7, #134]	@ 0x86
					bool all_reached = revolute.finished && prismatic.finished
 8003208:	4b34      	ldr	r3, [pc, #208]	@ (80032dc <main+0x14d4>)
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
							&& reachedR && reachedP;
 800320c:	2b00      	cmp	r3, #0
 800320e:	d069      	beq.n	80032e4 <main+0x14dc>
					bool all_reached = revolute.finished && prismatic.finished
 8003210:	4b33      	ldr	r3, [pc, #204]	@ (80032e0 <main+0x14d8>)
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d065      	beq.n	80032e4 <main+0x14dc>
							&& reachedR && reachedP;
 8003218:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800321c:	2b00      	cmp	r3, #0
 800321e:	d061      	beq.n	80032e4 <main+0x14dc>
 8003220:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05d      	beq.n	80032e4 <main+0x14dc>
 8003228:	2301      	movs	r3, #1
 800322a:	e05c      	b.n	80032e6 <main+0x14de>
 800322c:	f3af 8000 	nop.w
 8003230:	b020c49c 	.word	0xb020c49c
 8003234:	3fb16872 	.word	0x3fb16872
 8003238:	9999999a 	.word	0x9999999a
 800323c:	3fd99999 	.word	0x3fd99999
 8003240:	20000c06 	.word	0x20000c06
 8003244:	20000c04 	.word	0x20000c04
 8003248:	00000000 	.word	0x00000000
 800324c:	20000ae4 	.word	0x20000ae4
 8003250:	42c80000 	.word	0x42c80000
 8003254:	c2c80000 	.word	0xc2c80000
 8003258:	20000bdc 	.word	0x20000bdc
 800325c:	43fa0000 	.word	0x43fa0000
 8003260:	c3fa0000 	.word	0xc3fa0000
 8003264:	20000be0 	.word	0x20000be0
 8003268:	20000b30 	.word	0x20000b30
 800326c:	20000bf4 	.word	0x20000bf4
 8003270:	20000b70 	.word	0x20000b70
 8003274:	20000bf8 	.word	0x20000bf8
 8003278:	20001410 	.word	0x20001410
 800327c:	20000238 	.word	0x20000238
 8003280:	2000023c 	.word	0x2000023c
 8003284:	20000240 	.word	0x20000240
 8003288:	20000c40 	.word	0x20000c40
 800328c:	3c23d70a 	.word	0x3c23d70a
 8003290:	20000bfc 	.word	0x20000bfc
 8003294:	20000250 	.word	0x20000250
 8003298:	20000254 	.word	0x20000254
 800329c:	20000c50 	.word	0x20000c50
 80032a0:	20000c48 	.word	0x20000c48
 80032a4:	20000c00 	.word	0x20000c00
 80032a8:	20000bc4 	.word	0x20000bc4
 80032ac:	20000bc8 	.word	0x20000bc8
 80032b0:	20000bd0 	.word	0x20000bd0
 80032b4:	20000bcc 	.word	0x20000bcc
 80032b8:	20001418 	.word	0x20001418
 80032bc:	3f877b80 	.word	0x3f877b80
 80032c0:	3d4b295f 	.word	0x3d4b295f
 80032c4:	20000258 	.word	0x20000258
 80032c8:	4042594b 	.word	0x4042594b
 80032cc:	2000025c 	.word	0x2000025c
 80032d0:	3dd0dae4 	.word	0x3dd0dae4
 80032d4:	20000260 	.word	0x20000260
 80032d8:	3b9a0275 	.word	0x3b9a0275
 80032dc:	20001364 	.word	0x20001364
 80032e0:	200013a8 	.word	0x200013a8
 80032e4:	2300      	movs	r3, #0
					bool all_reached = revolute.finished && prismatic.finished
 80032e6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 80032ea:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

					// Check if we have finished all steps in the current path
					if (current_index >= path_lengths[current_path_index]) {
 80032f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003424 <main+0x161c>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003428 <main+0x1620>)
 80032fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003300:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <main+0x1624>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	dc1e      	bgt.n	8003346 <main+0x153e>
						// Check if motors finished and tolerance met before switching
						if (revolute.finished && prismatic.finished && reachedR
 8003308:	4b49      	ldr	r3, [pc, #292]	@ (8003430 <main+0x1628>)
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <main+0x153e>
 8003310:	4b48      	ldr	r3, [pc, #288]	@ (8003434 <main+0x162c>)
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d016      	beq.n	8003346 <main+0x153e>
 8003318:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <main+0x153e>
								&& reachedP) {
 8003320:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <main+0x153e>
							// Move to next path
							current_path_index++;
 8003328:	4b3e      	ldr	r3, [pc, #248]	@ (8003424 <main+0x161c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	4b3d      	ldr	r3, [pc, #244]	@ (8003424 <main+0x161c>)
 8003330:	601a      	str	r2, [r3, #0]
							if (current_path_index >= 14) {
 8003332:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <main+0x161c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b0d      	cmp	r3, #13
 8003338:	dd02      	ble.n	8003340 <main+0x1538>
								current_path_index = 0; // Loop back to first path or stop here
 800333a:	4a3a      	ldr	r2, [pc, #232]	@ (8003424 <main+0x161c>)
 800333c:	2300      	movs	r3, #0
 800333e:	6013      	str	r3, [r2, #0]
							}
							current_index = 0; // Reset step index for new path
 8003340:	4a3a      	ldr	r2, [pc, #232]	@ (800342c <main+0x1624>)
 8003342:	2300      	movs	r3, #0
 8003344:	6013      	str	r3, [r2, #0]
						}
					}

					Point target_point =
							paths[current_path_index][current_index];
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <main+0x161c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <main+0x1630>)
 800334c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <main+0x1624>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
					Point target_point =
 8003358:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800335c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003360:	e882 0003 	stmia.w	r2, {r0, r1}
					Set_Servo(1);
 8003364:	2001      	movs	r0, #1
 8003366:	f001 fc13 	bl	8004b90 <Set_Servo>
					InverseKinematics(target_point.x, target_point.y, &TargetR,
 800336a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800336e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8003372:	4932      	ldr	r1, [pc, #200]	@ (800343c <main+0x1634>)
 8003374:	4832      	ldr	r0, [pc, #200]	@ (8003440 <main+0x1638>)
 8003376:	eef0 0a47 	vmov.f32	s1, s14
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	f001 fdbf 	bl	8004f00 <InverseKinematics>
							&TargetP);

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003382:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <main+0x1638>)
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <main+0x163c>)
 800338a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800338e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003392:	4b2d      	ldr	r3, [pc, #180]	@ (8003448 <main+0x1640>)
 8003394:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003398:	4b28      	ldr	r3, [pc, #160]	@ (800343c <main+0x1634>)
 800339a:	ed93 7a00 	vldr	s14, [r3]
 800339e:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <main+0x1644>)
 80033a0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a8:	4b29      	ldr	r3, [pc, #164]	@ (8003450 <main+0x1648>)
 80033aa:	edc3 7a00 	vstr	s15, [r3]
					float R_Time = Trapezoidal_CalcTotalTime(R_Pos_Error, 1.4f,
 80033ae:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <main+0x1640>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80033b8:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8003454 <main+0x164c>
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	f001 fce4 	bl	8004d8c <Trapezoidal_CalcTotalTime>
 80033c4:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
							9.0f);
					float P_Time = Trapezoidal_CalcTotalTime(P_Pos_Error,
 80033c8:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <main+0x1648>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8003458 <main+0x1650>
 80033d2:	eddf 0a22 	vldr	s1, [pc, #136]	@ 800345c <main+0x1654>
 80033d6:	eeb0 0a67 	vmov.f32	s0, s15
 80033da:	f001 fcd7 	bl	8004d8c <Trapezoidal_CalcTotalTime>
 80033de:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
							300.0f, 1500.0f);
					float new_R_vmax = 1.4f;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <main+0x1658>)
 80033e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float new_P_vmax = 300.0f;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <main+0x165c>)
 80033ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					if (R_Time > P_Time) {
 80033ee:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80033f2:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80033f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	dd33      	ble.n	8003468 <main+0x1660>
						// Revolute is slower -> reduce Prismatic vmax
						new_P_vmax = Trapezoidal_CalcVmaxFromTime(P_Pos_Error,
 8003400:	4b13      	ldr	r3, [pc, #76]	@ (8003450 <main+0x1648>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ed97 1a20 	vldr	s2, [r7, #128]	@ 0x80
 800340a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003458 <main+0x1650>
 800340e:	eeb0 0a67 	vmov.f32	s0, s15
 8003412:	f001 fd17 	bl	8004e44 <Trapezoidal_CalcVmaxFromTime>
 8003416:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
								1500.0f, R_Time);
						P_Time = R_Time;
 800341a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800341e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003420:	e03b      	b.n	800349a <main+0x1692>
 8003422:	bf00      	nop
 8003424:	200013f0 	.word	0x200013f0
 8003428:	08019e08 	.word	0x08019e08
 800342c:	200013ec 	.word	0x200013ec
 8003430:	20001364 	.word	0x20001364
 8003434:	200013a8 	.word	0x200013a8
 8003438:	20000200 	.word	0x20000200
 800343c:	20000bd0 	.word	0x20000bd0
 8003440:	20000bcc 	.word	0x20000bcc
 8003444:	20000b30 	.word	0x20000b30
 8003448:	20000bec 	.word	0x20000bec
 800344c:	20000b70 	.word	0x20000b70
 8003450:	20000bf0 	.word	0x20000bf0
 8003454:	3fb33333 	.word	0x3fb33333
 8003458:	44bb8000 	.word	0x44bb8000
 800345c:	43960000 	.word	0x43960000
 8003460:	3fb33333 	.word	0x3fb33333
 8003464:	43960000 	.word	0x43960000
					} else if (P_Time > R_Time) {
 8003468:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800346c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003478:	dd0f      	ble.n	800349a <main+0x1692>
						// Prismatic is slower -> reduce Revolute vmax
						new_R_vmax = Trapezoidal_CalcVmaxFromTime(R_Pos_Error,
 800347a:	4ba3      	ldr	r3, [pc, #652]	@ (8003708 <main+0x1900>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ed97 1a1f 	vldr	s2, [r7, #124]	@ 0x7c
 8003484:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 8003488:	eeb0 0a67 	vmov.f32	s0, s15
 800348c:	f001 fcda 	bl	8004e44 <Trapezoidal_CalcVmaxFromTime>
 8003490:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
								9.0f, P_Time);
						R_Time = P_Time;
 8003494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003496:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					}
					if (revolute.finished
 800349a:	4b9c      	ldr	r3, [pc, #624]	@ (800370c <main+0x1904>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d020      	beq.n	80034e4 <main+0x16dc>
							&& fabsf(TargetR - last_TargetR) > 0.001f) {
 80034a2:	4b9b      	ldr	r3, [pc, #620]	@ (8003710 <main+0x1908>)
 80034a4:	ed93 7a00 	vldr	s14, [r3]
 80034a8:	4b9a      	ldr	r3, [pc, #616]	@ (8003714 <main+0x190c>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	eef0 7ae7 	vabs.f32	s15, s15
 80034b6:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8003718 <main+0x1910>
 80034ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	dd0f      	ble.n	80034e4 <main+0x16dc>
						Trapezoidal_Init(&revolute, R_Pos_Error, new_R_vmax,
 80034c4:	4b90      	ldr	r3, [pc, #576]	@ (8003708 <main+0x1900>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80034ce:	edd7 0a2f 	vldr	s1, [r7, #188]	@ 0xbc
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	488d      	ldr	r0, [pc, #564]	@ (800370c <main+0x1904>)
 80034d8:	f7fe fa8c 	bl	80019f4 <Trapezoidal_Init>
								9.0f);
						last_TargetR = TargetR;
 80034dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003710 <main+0x1908>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003714 <main+0x190c>)
 80034e2:	601a      	str	r2, [r3, #0]
					}
					if (prismatic.finished
 80034e4:	4b8d      	ldr	r3, [pc, #564]	@ (800371c <main+0x1914>)
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <main+0x1726>
							&& fabsf(TargetP - last_TargetP) > 0.01f) {
 80034ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003720 <main+0x1918>)
 80034ee:	ed93 7a00 	vldr	s14, [r3]
 80034f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003724 <main+0x191c>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003500:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8003728 <main+0x1920>
 8003504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd0f      	ble.n	800352e <main+0x1726>
						Trapezoidal_Init(&prismatic, P_Pos_Error, new_P_vmax,
 800350e:	4b87      	ldr	r3, [pc, #540]	@ (800372c <main+0x1924>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8003730 <main+0x1928>
 8003518:	edd7 0a2e 	vldr	s1, [r7, #184]	@ 0xb8
 800351c:	eeb0 0a67 	vmov.f32	s0, s15
 8003520:	487e      	ldr	r0, [pc, #504]	@ (800371c <main+0x1914>)
 8003522:	f7fe fa67 	bl	80019f4 <Trapezoidal_Init>
								1500.0f);
						last_TargetP = TargetP;
 8003526:	4b7e      	ldr	r3, [pc, #504]	@ (8003720 <main+0x1918>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b7e      	ldr	r3, [pc, #504]	@ (8003724 <main+0x191c>)
 800352c:	601a      	str	r2, [r3, #0]
					}
					Trapezoidal_Update(&revolute, 0.001f);
 800352e:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8003718 <main+0x1910>
 8003532:	4876      	ldr	r0, [pc, #472]	@ (800370c <main+0x1904>)
 8003534:	f7fe fb28 	bl	8001b88 <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 8003538:	4b74      	ldr	r3, [pc, #464]	@ (800370c <main+0x1904>)
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b7d      	ldr	r3, [pc, #500]	@ (8003734 <main+0x192c>)
 800353e:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 8003540:	4b72      	ldr	r3, [pc, #456]	@ (800370c <main+0x1904>)
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	4b7c      	ldr	r3, [pc, #496]	@ (8003738 <main+0x1930>)
 8003546:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 8003548:	4b70      	ldr	r3, [pc, #448]	@ (800370c <main+0x1904>)
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	4b7b      	ldr	r3, [pc, #492]	@ (800373c <main+0x1934>)
 800354e:	601a      	str	r2, [r3, #0]
					Trapezoidal_Update(&prismatic, 0.001f);
 8003550:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8003718 <main+0x1910>
 8003554:	4871      	ldr	r0, [pc, #452]	@ (800371c <main+0x1914>)
 8003556:	f7fe fb17 	bl	8001b88 <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 800355a:	4b70      	ldr	r3, [pc, #448]	@ (800371c <main+0x1914>)
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	4b78      	ldr	r3, [pc, #480]	@ (8003740 <main+0x1938>)
 8003560:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 8003562:	4b6e      	ldr	r3, [pc, #440]	@ (800371c <main+0x1914>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	4b77      	ldr	r3, [pc, #476]	@ (8003744 <main+0x193c>)
 8003568:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 800356a:	4b6c      	ldr	r3, [pc, #432]	@ (800371c <main+0x1914>)
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	4b76      	ldr	r3, [pc, #472]	@ (8003748 <main+0x1940>)
 8003570:	601a      	str	r2, [r3, #0]
					PIDStep();
 8003572:	f001 fda3 	bl	80050bc <PIDStep>
					Workspace_limit();
 8003576:	f001 fb57 	bl	8004c28 <Workspace_limit>
					Set_Motor(0, R_PWM);
 800357a:	4b74      	ldr	r3, [pc, #464]	@ (800374c <main+0x1944>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	eeb0 0a67 	vmov.f32	s0, s15
 8003584:	2000      	movs	r0, #0
 8003586:	f001 fa85 	bl	8004a94 <Set_Motor>
					Set_Motor(1, P_PWM);
 800358a:	4b71      	ldr	r3, [pc, #452]	@ (8003750 <main+0x1948>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	2001      	movs	r0, #1
 8003596:	f001 fa7d 	bl	8004a94 <Set_Motor>

					if (reachedR && reachedP) {
 800359a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <main+0x17ac>
 80035a2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <main+0x17ac>
						current_index++;
 80035aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <main+0x194c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	4b68      	ldr	r3, [pc, #416]	@ (8003754 <main+0x194c>)
 80035b2:	601a      	str	r2, [r3, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			static uint64_t lastPressTime = 0; // Holds the last time a press was handled
			uint64_t currentTime = micros();   // Current time in microseconds
 80035b4:	f000 ffba 	bl	800452c <micros>
 80035b8:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
			if (Mode == 6) {
 80035bc:	4b66      	ldr	r3, [pc, #408]	@ (8003758 <main+0x1950>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b06      	cmp	r3, #6
 80035c2:	d164      	bne.n	800368e <main+0x1886>
				if (currentTime - lastPressTime >= 2000000) {
 80035c4:	4b65      	ldr	r3, [pc, #404]	@ (800375c <main+0x1954>)
 80035c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035ce:	1a14      	subs	r4, r2, r0
 80035d0:	61bc      	str	r4, [r7, #24]
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	4b61      	ldr	r3, [pc, #388]	@ (8003760 <main+0x1958>)
 80035da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035de:	4602      	mov	r2, r0
 80035e0:	429a      	cmp	r2, r3
 80035e2:	460b      	mov	r3, r1
 80035e4:	f173 0300 	sbcs.w	r3, r3, #0
 80035e8:	d34e      	bcc.n	8003688 <main+0x1880>
					if (IsPress) {
 80035ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003764 <main+0x195c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04d      	beq.n	800368e <main+0x1886>
						lastPressTime = currentTime;
 80035f2:	495a      	ldr	r1, [pc, #360]	@ (800375c <main+0x1954>)
 80035f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035f8:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode == 1) {
 80035fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003768 <main+0x1960>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <main+0x1802>
							Mode = 2;
 8003604:	4a54      	ldr	r2, [pc, #336]	@ (8003758 <main+0x1950>)
 8003606:	2302      	movs	r3, #2
 8003608:	7013      	strb	r3, [r2, #0]
						}
						testArray[counter * 2] = Prismatic_QEIdata.mmPosition;
 800360a:	4b58      	ldr	r3, [pc, #352]	@ (800376c <main+0x1964>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0058      	lsls	r0, r3, #1
 8003610:	4b57      	ldr	r3, [pc, #348]	@ (8003770 <main+0x1968>)
 8003612:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003614:	4a57      	ldr	r2, [pc, #348]	@ (8003774 <main+0x196c>)
 8003616:	0083      	lsls	r3, r0, #2
 8003618:	4413      	add	r3, r2
 800361a:	6019      	str	r1, [r3, #0]
						testArray[(counter * 2) + 1] =
 800361c:	4b53      	ldr	r3, [pc, #332]	@ (800376c <main+0x1964>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	1c58      	adds	r0, r3, #1
								Revolute_QEIdata.RadPosition;
 8003624:	4b54      	ldr	r3, [pc, #336]	@ (8003778 <main+0x1970>)
 8003626:	6b99      	ldr	r1, [r3, #56]	@ 0x38
						testArray[(counter * 2) + 1] =
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <main+0x196c>)
 800362a:	0083      	lsls	r3, r0, #2
 800362c:	4413      	add	r3, r2
 800362e:	6019      	str	r1, [r3, #0]
						SET_TARGET(counter,
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <main+0x1964>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
								(int16_t) Prismatic_QEIdata.mmPosition,
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <main+0x1968>)
 8003638:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800363c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	b21b      	sxth	r3, r3
						SET_TARGET(counter,
 8003646:	4619      	mov	r1, r3
								(int16_t) Revolute_QEIdata.RadPosition);
 8003648:	4b4b      	ldr	r3, [pc, #300]	@ (8003778 <main+0x1970>)
 800364a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	b21b      	sxth	r3, r3
						SET_TARGET(counter,
 8003658:	461a      	mov	r2, r3
 800365a:	f7fd fe15 	bl	8001288 <SET_TARGET>

						if (counter == 9) {
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <main+0x1964>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b09      	cmp	r3, #9
 8003664:	d109      	bne.n	800367a <main+0x1872>
							counter = 0;
 8003666:	4a41      	ldr	r2, [pc, #260]	@ (800376c <main+0x1964>)
 8003668:	2300      	movs	r3, #0
 800366a:	7013      	strb	r3, [r2, #0]
							testArraydone = 1;
 800366c:	4a43      	ldr	r2, [pc, #268]	@ (800377c <main+0x1974>)
 800366e:	2301      	movs	r3, #1
 8003670:	7013      	strb	r3, [r2, #0]
							TenPointMode = 1;
 8003672:	4a3d      	ldr	r2, [pc, #244]	@ (8003768 <main+0x1960>)
 8003674:	2301      	movs	r3, #1
 8003676:	7013      	strb	r3, [r2, #0]
 8003678:	e009      	b.n	800368e <main+0x1886>
						} else {
							counter++;
 800367a:	4b3c      	ldr	r3, [pc, #240]	@ (800376c <main+0x1964>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4a3a      	ldr	r2, [pc, #232]	@ (800376c <main+0x1964>)
 8003684:	7013      	strb	r3, [r2, #0]
 8003686:	e002      	b.n	800368e <main+0x1886>
						}
					}
				} else {
					Mode = 1;
 8003688:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <main+0x1950>)
 800368a:	2301      	movs	r3, #1
 800368c:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			static uint64_t lastPressTime1 = 0; // Holds the last time a press was handled
			if (Mode == 7) {
 800368e:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <main+0x1950>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b07      	cmp	r3, #7
 8003694:	d126      	bne.n	80036e4 <main+0x18dc>
				if (testArraydone && IsPress
 8003696:	4b39      	ldr	r3, [pc, #228]	@ (800377c <main+0x1974>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01f      	beq.n	80036de <main+0x18d6>
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <main+0x195c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01b      	beq.n	80036de <main+0x18d6>
						&& currentTime - lastPressTime1 >= 2000000) {
 80036a6:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <main+0x1978>)
 80036a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036b0:	1a14      	subs	r4, r2, r0
 80036b2:	613c      	str	r4, [r7, #16]
 80036b4:	eb63 0301 	sbc.w	r3, r3, r1
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <main+0x1958>)
 80036bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036c0:	4602      	mov	r2, r0
 80036c2:	429a      	cmp	r2, r3
 80036c4:	460b      	mov	r3, r1
 80036c6:	f173 0300 	sbcs.w	r3, r3, #0
 80036ca:	d308      	bcc.n	80036de <main+0x18d6>
					lastPressTime1 = currentTime;
 80036cc:	492c      	ldr	r1, [pc, #176]	@ (8003780 <main+0x1978>)
 80036ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036d2:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = 1;
 80036d6:	4a24      	ldr	r2, [pc, #144]	@ (8003768 <main+0x1960>)
 80036d8:	2301      	movs	r3, #1
 80036da:	7013      	strb	r3, [r2, #0]
 80036dc:	e002      	b.n	80036e4 <main+0x18dc>
				} else {
					Mode = 2;
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <main+0x1950>)
 80036e0:	2302      	movs	r3, #2
 80036e2:	7013      	strb	r3, [r2, #0]
//				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 80036e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003758 <main+0x1950>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f47e ac16 	bne.w	8001f1a <main+0x112>
				static uint8_t goCenter = 1;
				if (goCenter) {
 80036ee:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <main+0x197c>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d04a      	beq.n	800378c <main+0x1984>
					TargetR = M_PI_2;
 80036f6:	4a06      	ldr	r2, [pc, #24]	@ (8003710 <main+0x1908>)
 80036f8:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <main+0x1980>)
 80036fa:	6013      	str	r3, [r2, #0]
					TargetP = 0;
 80036fc:	4a08      	ldr	r2, [pc, #32]	@ (8003720 <main+0x1918>)
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e048      	b.n	8003798 <main+0x1990>
 8003706:	bf00      	nop
 8003708:	20000bec 	.word	0x20000bec
 800370c:	20001364 	.word	0x20001364
 8003710:	20000bcc 	.word	0x20000bcc
 8003714:	2000134c 	.word	0x2000134c
 8003718:	3a83126f 	.word	0x3a83126f
 800371c:	200013a8 	.word	0x200013a8
 8003720:	20000bd0 	.word	0x20000bd0
 8003724:	20001350 	.word	0x20001350
 8003728:	3c23d70a 	.word	0x3c23d70a
 800372c:	20000bf0 	.word	0x20000bf0
 8003730:	44bb8000 	.word	0x44bb8000
 8003734:	20000bd4 	.word	0x20000bd4
 8003738:	20000bdc 	.word	0x20000bdc
 800373c:	20000be4 	.word	0x20000be4
 8003740:	20000bd8 	.word	0x20000bd8
 8003744:	20000be0 	.word	0x20000be0
 8003748:	20000be8 	.word	0x20000be8
 800374c:	20000bfc 	.word	0x20000bfc
 8003750:	20000c00 	.word	0x20000c00
 8003754:	200013ec 	.word	0x200013ec
 8003758:	20000c04 	.word	0x20000c04
 800375c:	20001420 	.word	0x20001420
 8003760:	001e8480 	.word	0x001e8480
 8003764:	20000c06 	.word	0x20000c06
 8003768:	20000c75 	.word	0x20000c75
 800376c:	20000c74 	.word	0x20000c74
 8003770:	20000b70 	.word	0x20000b70
 8003774:	200012f8 	.word	0x200012f8
 8003778:	20000b30 	.word	0x20000b30
 800377c:	20001348 	.word	0x20001348
 8003780:	20001428 	.word	0x20001428
 8003784:	20000264 	.word	0x20000264
 8003788:	3fc90fdb 	.word	0x3fc90fdb
				} else {
					TargetR = M_PI_4;
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <main+0x19fc>)
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <main+0x1a00>)
 8003790:	6013      	str	r3, [r2, #0]
					TargetP = 150;
 8003792:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <main+0x1a04>)
 8003794:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <main+0x1a08>)
 8003796:	6013      	str	r3, [r2, #0]
				}

				if (CascadeControl_Step()) {
 8003798:	f001 fdfe 	bl	8005398 <CascadeControl_Step>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d027      	beq.n	80037f2 <main+0x19ea>
					Set_Servo(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f001 f9f4 	bl	8004b90 <Set_Servo>
					if (micros() - pen_delay_timer >= 500000) {
 80037a8:	f000 fec0 	bl	800452c <micros>
 80037ac:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <main+0x1a0c>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	1a84      	subs	r4, r0, r2
 80037b4:	60bc      	str	r4, [r7, #8]
 80037b6:	eb61 0303 	sbc.w	r3, r1, r3
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <main+0x1a10>)
 80037be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c2:	4602      	mov	r2, r0
 80037c4:	429a      	cmp	r2, r3
 80037c6:	460b      	mov	r3, r1
 80037c8:	f173 0300 	sbcs.w	r3, r3, #0
 80037cc:	f4fe aba5 	bcc.w	8001f1a <main+0x112>
						Set_Servo(0);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f001 f9dd 	bl	8004b90 <Set_Servo>
						if (goCenter) {
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <main+0x1a14>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <main+0x19e0>
							goCenter = 0;
 80037de:	4a0f      	ldr	r2, [pc, #60]	@ (800381c <main+0x1a14>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	7013      	strb	r3, [r2, #0]
 80037e4:	f7fe bb99 	b.w	8001f1a <main+0x112>
						} else {
							goCenter = 1;
 80037e8:	4a0c      	ldr	r2, [pc, #48]	@ (800381c <main+0x1a14>)
 80037ea:	2301      	movs	r3, #1
 80037ec:	7013      	strb	r3, [r2, #0]
 80037ee:	f7fe bb94 	b.w	8001f1a <main+0x112>
						}
					}
				} else {
					pen_delay_timer = micros();
 80037f2:	f000 fe9b 	bl	800452c <micros>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4906      	ldr	r1, [pc, #24]	@ (8003814 <main+0x1a0c>)
 80037fc:	e9c1 2300 	strd	r2, r3, [r1]
	while (1) {
 8003800:	f7fe bb8b 	b.w	8001f1a <main+0x112>
 8003804:	20000bcc 	.word	0x20000bcc
 8003808:	3f490fdb 	.word	0x3f490fdb
 800380c:	20000bd0 	.word	0x20000bd0
 8003810:	43160000 	.word	0x43160000
 8003814:	20001358 	.word	0x20001358
 8003818:	0007a120 	.word	0x0007a120
 800381c:	20000264 	.word	0x20000264

08003820 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b094      	sub	sp, #80	@ 0x50
 8003824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	2238      	movs	r2, #56	@ 0x38
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f008 fd02 	bl	800c238 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003842:	2000      	movs	r0, #0
 8003844:	f003 f840 	bl	80068c8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003848:	2302      	movs	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800384c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003852:	2340      	movs	r3, #64	@ 0x40
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003856:	2302      	movs	r3, #2
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800385a:	2302      	movs	r3, #2
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800385e:	2304      	movs	r3, #4
 8003860:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003862:	2355      	movs	r3, #85	@ 0x55
 8003864:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003866:	2302      	movs	r3, #2
 8003868:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800386a:	2302      	movs	r3, #2
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800386e:	2302      	movs	r3, #2
 8003870:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003872:	f107 0318 	add.w	r3, r7, #24
 8003876:	4618      	mov	r0, r3
 8003878:	f003 f8da 	bl	8006a30 <HAL_RCC_OscConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemClock_Config+0x66>
		Error_Handler();
 8003882:	f001 fe0b 	bl	800549c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003886:	230f      	movs	r3, #15
 8003888:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388a:	2303      	movs	r3, #3
 800388c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2104      	movs	r1, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 fbd8 	bl	8007054 <HAL_RCC_ClockConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <SystemClock_Config+0x8e>
		Error_Handler();
 80038aa:	f001 fdf7 	bl	800549c <Error_Handler>
	}
}
 80038ae:	bf00      	nop
 80038b0:	3750      	adds	r7, #80	@ 0x50
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08c      	sub	sp, #48	@ 0x30
 80038bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038dc:	463b      	mov	r3, r7
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80038e6:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <MX_TIM1_Init+0x104>)
 80038e8:	4a35      	ldr	r2, [pc, #212]	@ (80039c0 <MX_TIM1_Init+0x108>)
 80038ea:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 80038ec:	4b33      	ldr	r3, [pc, #204]	@ (80039bc <MX_TIM1_Init+0x104>)
 80038ee:	22a9      	movs	r2, #169	@ 0xa9
 80038f0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b32      	ldr	r3, [pc, #200]	@ (80039bc <MX_TIM1_Init+0x104>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80038f8:	4b30      	ldr	r3, [pc, #192]	@ (80039bc <MX_TIM1_Init+0x104>)
 80038fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038fe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b2e      	ldr	r3, [pc, #184]	@ (80039bc <MX_TIM1_Init+0x104>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003906:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <MX_TIM1_Init+0x104>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390c:	4b2b      	ldr	r3, [pc, #172]	@ (80039bc <MX_TIM1_Init+0x104>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003912:	482a      	ldr	r0, [pc, #168]	@ (80039bc <MX_TIM1_Init+0x104>)
 8003914:	f004 fad4 	bl	8007ec0 <HAL_TIM_IC_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM1_Init+0x6a>
		Error_Handler();
 800391e:	f001 fdbd 	bl	800549c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003922:	2304      	movs	r3, #4
 8003924:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003926:	2360      	movs	r3, #96	@ 0x60
 8003928:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800392a:	2302      	movs	r3, #2
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800392e:	2300      	movs	r3, #0
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	4619      	mov	r1, r3
 800393c:	481f      	ldr	r0, [pc, #124]	@ (80039bc <MX_TIM1_Init+0x104>)
 800393e:	f005 fa9f 	bl	8008e80 <HAL_TIM_SlaveConfigSynchro>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM1_Init+0x94>
		Error_Handler();
 8003948:	f001 fda8 	bl	800549c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003950:	2302      	movs	r3, #2
 8003952:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	2200      	movs	r2, #0
 8003962:	4619      	mov	r1, r3
 8003964:	4815      	ldr	r0, [pc, #84]	@ (80039bc <MX_TIM1_Init+0x104>)
 8003966:	f004 ffc4 	bl	80088f2 <HAL_TIM_IC_ConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003970:	f001 fd94 	bl	800549c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003974:	2302      	movs	r3, #2
 8003976:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	2204      	movs	r2, #4
 8003982:	4619      	mov	r1, r3
 8003984:	480d      	ldr	r0, [pc, #52]	@ (80039bc <MX_TIM1_Init+0x104>)
 8003986:	f004 ffb4 	bl	80088f2 <HAL_TIM_IC_ConfigChannel>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003990:	f001 fd84 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80039a0:	463b      	mov	r3, r7
 80039a2:	4619      	mov	r1, r3
 80039a4:	4805      	ldr	r0, [pc, #20]	@ (80039bc <MX_TIM1_Init+0x104>)
 80039a6:	f006 fb87 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80039b0:	f001 fd74 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	3730      	adds	r7, #48	@ 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200002e8 	.word	0x200002e8
 80039c0:	40012c00 	.word	0x40012c00

080039c4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	@ 0x30
 80039c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039e8:	463b      	mov	r3, r7
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80039f2:	4b33      	ldr	r3, [pc, #204]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 80039f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039f8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80039fa:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 80039fc:	22a9      	movs	r2, #169	@ 0xa9
 80039fe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003a06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003a1a:	4829      	ldr	r0, [pc, #164]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a1c:	f004 fa50 	bl	8007ec0 <HAL_TIM_IC_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM2_Init+0x66>
		Error_Handler();
 8003a26:	f001 fd39 	bl	800549c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003a2e:	2350      	movs	r3, #80	@ 0x50
 8003a30:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	481e      	ldr	r0, [pc, #120]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a46:	f005 fa1b 	bl	8008e80 <HAL_TIM_SlaveConfigSynchro>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003a50:	f001 fd24 	bl	800549c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4814      	ldr	r0, [pc, #80]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a6e:	f004 ff40 	bl	80088f2 <HAL_TIM_IC_ConfigChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003a78:	f001 fd10 	bl	800549c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003a80:	2302      	movs	r3, #2
 8003a82:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480c      	ldr	r0, [pc, #48]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003a8e:	f004 ff30 	bl	80088f2 <HAL_TIM_IC_ConfigChannel>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003a98:	f001 fd00 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4805      	ldr	r0, [pc, #20]	@ (8003ac0 <MX_TIM2_Init+0xfc>)
 8003aaa:	f006 fb05 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003ab4:	f001 fcf2 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003ab8:	bf00      	nop
 8003aba:	3730      	adds	r7, #48	@ 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200003b4 	.word	0x200003b4

08003ac4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	@ 0x30
 8003ac8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	2224      	movs	r2, #36	@ 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f008 fbb0 	bl	800c238 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ad8:	463b      	mov	r3, r7
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003ae2:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003ae4:	4a21      	ldr	r2, [pc, #132]	@ (8003b6c <MX_TIM3_Init+0xa8>)
 8003ae6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003af4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003af6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003afa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b02:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b10:	2301      	movs	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003b28:	2304      	movs	r3, #4
 8003b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	4619      	mov	r1, r3
 8003b32:	480d      	ldr	r0, [pc, #52]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003b34:	f004 fc22 	bl	800837c <HAL_TIM_Encoder_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003b3e:	f001 fcad 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4806      	ldr	r0, [pc, #24]	@ (8003b68 <MX_TIM3_Init+0xa4>)
 8003b50:	f006 fab2 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003b5a:	f001 fc9f 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	3730      	adds	r7, #48	@ 0x30
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000480 	.word	0x20000480
 8003b6c:	40000400 	.word	0x40000400

08003b70 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	@ 0x30
 8003b74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	2224      	movs	r2, #36	@ 0x24
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f008 fb5a 	bl	800c238 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b84:	463b      	mov	r3, r7
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003b8e:	4b21      	ldr	r3, [pc, #132]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003b90:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <MX_TIM4_Init+0xa8>)
 8003b92:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480d      	ldr	r0, [pc, #52]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003be0:	f004 fbcc 	bl	800837c <HAL_TIM_Encoder_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003bea:	f001 fc57 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4806      	ldr	r0, [pc, #24]	@ (8003c14 <MX_TIM4_Init+0xa4>)
 8003bfc:	f006 fa5c 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003c06:	f001 fc49 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003c0a:	bf00      	nop
 8003c0c:	3730      	adds	r7, #48	@ 0x30
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2000054c 	.word	0x2000054c
 8003c18:	40000800 	.word	0x40000800

08003c1c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003c22:	f107 0310 	add.w	r3, r7, #16
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <MX_TIM5_Init+0x98>)
 8003c3e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c42:	22a9      	movs	r2, #169	@ 0xa9
 8003c44:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c46:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c54:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5a:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003c60:	4813      	ldr	r0, [pc, #76]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c62:	f003 fe61 	bl	8007928 <HAL_TIM_Base_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003c6c:	f001 fc16 	bl	800549c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c74:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003c76:	f107 0310 	add.w	r3, r7, #16
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	480c      	ldr	r0, [pc, #48]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c7e:	f004 ffe9 	bl	8008c54 <HAL_TIM_ConfigClockSource>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM5_Init+0x70>
		Error_Handler();
 8003c88:	f001 fc08 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4805      	ldr	r0, [pc, #20]	@ (8003cb0 <MX_TIM5_Init+0x94>)
 8003c9a:	f006 fa0d 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003ca4:	f001 fbfa 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000618 	.word	0x20000618
 8003cb4:	40000c00 	.word	0x40000c00

08003cb8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b09c      	sub	sp, #112	@ 0x70
 8003cbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003cbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ccc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003cd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
 8003ce8:	615a      	str	r2, [r3, #20]
 8003cea:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	2234      	movs	r2, #52	@ 0x34
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f008 faa0 	bl	800c238 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8003e2c <MX_TIM8_Init+0x174>)
 8003cfc:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d00:	22a9      	movs	r2, #169	@ 0xa9
 8003d02:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d04:	4b48      	ldr	r3, [pc, #288]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003d0a:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d0c:	2264      	movs	r2, #100	@ 0x64
 8003d0e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d10:	4b45      	ldr	r3, [pc, #276]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003d16:	4b44      	ldr	r3, [pc, #272]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d1c:	4b42      	ldr	r3, [pc, #264]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003d22:	4841      	ldr	r0, [pc, #260]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d24:	f003 fe00 	bl	8007928 <HAL_TIM_Base_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003d2e:	f001 fbb5 	bl	800549c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d36:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003d38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	483a      	ldr	r0, [pc, #232]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d40:	f004 ff88 	bl	8008c54 <HAL_TIM_ConfigClockSource>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM8_Init+0x96>
		Error_Handler();
 8003d4a:	f001 fba7 	bl	800549c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003d4e:	4836      	ldr	r0, [pc, #216]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d50:	f003 ff36 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003d5a:	f001 fb9f 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003d6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d6e:	4619      	mov	r1, r3
 8003d70:	482d      	ldr	r0, [pc, #180]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003d72:	f006 f9a1 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003d7c:	f001 fb8e 	bl	800549c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d80:	2360      	movs	r3, #96	@ 0x60
 8003d82:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003d84:	2364      	movs	r3, #100	@ 0x64
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003d9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003da0:	2208      	movs	r2, #8
 8003da2:	4619      	mov	r1, r3
 8003da4:	4820      	ldr	r0, [pc, #128]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003da6:	f004 fe41 	bl	8008a2c <HAL_TIM_PWM_ConfigChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003db0:	f001 fb74 	bl	800549c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003db4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003db8:	220c      	movs	r2, #12
 8003dba:	4619      	mov	r1, r3
 8003dbc:	481a      	ldr	r0, [pc, #104]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003dbe:	f004 fe35 	bl	8008a2c <HAL_TIM_PWM_ConfigChannel>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003dc8:	f001 fb68 	bl	800549c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4807      	ldr	r0, [pc, #28]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003e0a:	f006 f9eb 	bl	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003e14:	f001 fb42 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003e18:	4803      	ldr	r0, [pc, #12]	@ (8003e28 <MX_TIM8_Init+0x170>)
 8003e1a:	f001 fcd3 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 8003e1e:	bf00      	nop
 8003e20:	3770      	adds	r7, #112	@ 0x70
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200006e4 	.word	0x200006e4
 8003e2c:	40013400 	.word	0x40013400

08003e30 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b09c      	sub	sp, #112	@ 0x70
 8003e34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]
 8003e60:	615a      	str	r2, [r3, #20]
 8003e62:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	2234      	movs	r2, #52	@ 0x34
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f008 f9e4 	bl	800c238 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003e70:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e72:	4a40      	ldr	r2, [pc, #256]	@ (8003f74 <MX_TIM15_Init+0x144>)
 8003e74:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003e76:	4b3e      	ldr	r3, [pc, #248]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e78:	22a9      	movs	r2, #169	@ 0xa9
 8003e7a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e84:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003e88:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8a:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003e90:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003e9c:	4834      	ldr	r0, [pc, #208]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003e9e:	f003 fd43 	bl	8007928 <HAL_TIM_Base_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003ea8:	f001 faf8 	bl	800549c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eb0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003eb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	482d      	ldr	r0, [pc, #180]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003eba:	f004 fecb 	bl	8008c54 <HAL_TIM_ConfigClockSource>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM15_Init+0x98>
		Error_Handler();
 8003ec4:	f001 faea 	bl	800549c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8003ec8:	4829      	ldr	r0, [pc, #164]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003eca:	f003 fe79 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM15_Init+0xa8>
		Error_Handler();
 8003ed4:	f001 fae2 	bl	800549c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003ee0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4822      	ldr	r0, [pc, #136]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003ee8:	f006 f8e6 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003ef2:	f001 fad3 	bl	800549c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef6:	2360      	movs	r3, #96	@ 0x60
 8003ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efe:	2300      	movs	r3, #0
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f02:	2300      	movs	r3, #0
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8003f12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f16:	2200      	movs	r2, #0
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4815      	ldr	r0, [pc, #84]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003f1c:	f004 fd86 	bl	8008a2c <HAL_TIM_PWM_ConfigChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003f26:	f001 fab9 	bl	800549c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f42:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4807      	ldr	r0, [pc, #28]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003f52:	f006 f947 	bl	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8003f5c:	f001 fa9e 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003f60:	4803      	ldr	r0, [pc, #12]	@ (8003f70 <MX_TIM15_Init+0x140>)
 8003f62:	f001 fc2f 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 8003f66:	bf00      	nop
 8003f68:	3770      	adds	r7, #112	@ 0x70
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200007b0 	.word	0x200007b0
 8003f74:	40014000 	.word	0x40014000

08003f78 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8003f7c:	4b14      	ldr	r3, [pc, #80]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <MX_TIM16_Init+0x5c>)
 8003f80:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8003f82:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f84:	22a9      	movs	r2, #169	@ 0xa9
 8003f86:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f90:	f240 4279 	movw	r2, #1145	@ 0x479
 8003f94:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8003fa8:	4809      	ldr	r0, [pc, #36]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003faa:	f003 fcbd 	bl	8007928 <HAL_TIM_Base_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM16_Init+0x40>
		Error_Handler();
 8003fb4:	f001 fa72 	bl	800549c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003fb8:	2108      	movs	r1, #8
 8003fba:	4805      	ldr	r0, [pc, #20]	@ (8003fd0 <MX_TIM16_Init+0x58>)
 8003fbc:	f004 f8e8 	bl	8008190 <HAL_TIM_OnePulse_Init>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM16_Init+0x52>
		Error_Handler();
 8003fc6:	f001 fa69 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2000087c 	.word	0x2000087c
 8003fd4:	40014400 	.word	0x40014400

08003fd8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003fdc:	4b23      	ldr	r3, [pc, #140]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8003fde:	4a24      	ldr	r2, [pc, #144]	@ (8004070 <MX_USART2_UART_Init+0x98>)
 8003fe0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003fe2:	4b22      	ldr	r3, [pc, #136]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8003fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fe8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003fea:	4b20      	ldr	r3, [pc, #128]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8003fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ff0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8003ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ffe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004002:	220c      	movs	r2, #12
 8004004:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	4b19      	ldr	r3, [pc, #100]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800400c:	4b17      	ldr	r3, [pc, #92]	@ (800406c <MX_USART2_UART_Init+0x94>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004012:	4b16      	ldr	r3, [pc, #88]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004018:	4b14      	ldr	r3, [pc, #80]	@ (800406c <MX_USART2_UART_Init+0x94>)
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800401e:	4b13      	ldr	r3, [pc, #76]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004020:	2200      	movs	r2, #0
 8004022:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004024:	4811      	ldr	r0, [pc, #68]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004026:	f006 f9c1 	bl	800a3ac <HAL_UART_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8004030:	f001 fa34 	bl	800549c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8004034:	2100      	movs	r1, #0
 8004036:	480d      	ldr	r0, [pc, #52]	@ (800406c <MX_USART2_UART_Init+0x94>)
 8004038:	f007 fffd 	bl	800c036 <HAL_UARTEx_SetTxFifoThreshold>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8004042:	f001 fa2b 	bl	800549c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8004046:	2100      	movs	r1, #0
 8004048:	4808      	ldr	r0, [pc, #32]	@ (800406c <MX_USART2_UART_Init+0x94>)
 800404a:	f008 f832 	bl	800c0b2 <HAL_UARTEx_SetRxFifoThreshold>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8004054:	f001 fa22 	bl	800549c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8004058:	4804      	ldr	r0, [pc, #16]	@ (800406c <MX_USART2_UART_Init+0x94>)
 800405a:	f007 ffb3 	bl	800bfc4 <HAL_UARTEx_DisableFifoMode>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8004064:	f001 fa1a 	bl	800549c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000948 	.word	0x20000948
 8004070:	40004400 	.word	0x40004400

08004074 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800407a:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <MX_DMA_Init+0x60>)
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <MX_DMA_Init+0x60>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	6493      	str	r3, [r2, #72]	@ 0x48
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_DMA_Init+0x60>)
 8004088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <MX_DMA_Init+0x60>)
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <MX_DMA_Init+0x60>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6493      	str	r3, [r2, #72]	@ 0x48
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <MX_DMA_Init+0x60>)
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	200b      	movs	r0, #11
 80040b0:	f001 fed9 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040b4:	200b      	movs	r0, #11
 80040b6:	f001 fef0 	bl	8005e9a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2100      	movs	r1, #0
 80040be:	200c      	movs	r0, #12
 80040c0:	f001 fed1 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80040c4:	200c      	movs	r0, #12
 80040c6:	f001 fee8 	bl	8005e9a <HAL_NVIC_EnableIRQ>

}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000

080040d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	@ 0x28
 80040dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80040ee:	4b7a      	ldr	r3, [pc, #488]	@ (80042d8 <MX_GPIO_Init+0x200>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f2:	4a79      	ldr	r2, [pc, #484]	@ (80042d8 <MX_GPIO_Init+0x200>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040fa:	4b77      	ldr	r3, [pc, #476]	@ (80042d8 <MX_GPIO_Init+0x200>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004106:	4b74      	ldr	r3, [pc, #464]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410a:	4a73      	ldr	r2, [pc, #460]	@ (80042d8 <MX_GPIO_Init+0x200>)
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004112:	4b71      	ldr	r3, [pc, #452]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	4b6e      	ldr	r3, [pc, #440]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	4a6d      	ldr	r2, [pc, #436]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800412a:	4b6b      	ldr	r3, [pc, #428]	@ (80042d8 <MX_GPIO_Init+0x200>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	4b68      	ldr	r3, [pc, #416]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413a:	4a67      	ldr	r2, [pc, #412]	@ (80042d8 <MX_GPIO_Init+0x200>)
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004142:	4b65      	ldr	r3, [pc, #404]	@ (80042d8 <MX_GPIO_Init+0x200>)
 8004144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800414e:	2200      	movs	r2, #0
 8004150:	2120      	movs	r1, #32
 8004152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004156:	f002 fb87 	bl	8006868 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004160:	485e      	ldr	r0, [pc, #376]	@ (80042dc <MX_GPIO_Init+0x204>)
 8004162:	f002 fb81 	bl	8006868 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800416a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4619      	mov	r1, r3
 800417a:	4858      	ldr	r0, [pc, #352]	@ (80042dc <MX_GPIO_Init+0x204>)
 800417c:	f002 f9da 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8004180:	230d      	movs	r3, #13
 8004182:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004184:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004188:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	4619      	mov	r1, r3
 8004194:	4851      	ldr	r0, [pc, #324]	@ (80042dc <MX_GPIO_Init+0x204>)
 8004196:	f002 f9cd 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800419a:	2320      	movs	r3, #32
 800419c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419e:	2301      	movs	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041b4:	f002 f9be 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80041b8:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80041bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	4842      	ldr	r0, [pc, #264]	@ (80042dc <MX_GPIO_Init+0x204>)
 80041d2:	f002 f9af 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 80041d6:	f640 0304 	movw	r3, #2052	@ 0x804
 80041da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4619      	mov	r1, r3
 80041ea:	483d      	ldr	r0, [pc, #244]	@ (80042e0 <MX_GPIO_Init+0x208>)
 80041ec:	f002 f9a2 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80041f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80041f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80041fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041fc:	2302      	movs	r3, #2
 80041fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	4836      	ldr	r0, [pc, #216]	@ (80042e0 <MX_GPIO_Init+0x208>)
 8004208:	f002 f994 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800420c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004210:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004212:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004216:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004218:	2302      	movs	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421c:	f107 0314 	add.w	r3, r7, #20
 8004220:	4619      	mov	r1, r3
 8004222:	482f      	ldr	r0, [pc, #188]	@ (80042e0 <MX_GPIO_Init+0x208>)
 8004224:	f002 f986 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800422c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800422e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004232:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004242:	f002 f977 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800424a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800424c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004250:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004252:	2302      	movs	r3, #2
 8004254:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004256:	f107 0314 	add.w	r3, r7, #20
 800425a:	4619      	mov	r1, r3
 800425c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004260:	f002 f968 	bl	8006534 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004264:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004268:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800426a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800426e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004270:	2302      	movs	r3, #2
 8004272:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4619      	mov	r1, r3
 800427a:	4818      	ldr	r0, [pc, #96]	@ (80042dc <MX_GPIO_Init+0x204>)
 800427c:	f002 f95a 	bl	8006534 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2006      	movs	r0, #6
 8004286:	f001 fdee 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800428a:	2006      	movs	r0, #6
 800428c:	f001 fe05 	bl	8005e9a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2008      	movs	r0, #8
 8004296:	f001 fde6 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800429a:	2008      	movs	r0, #8
 800429c:	f001 fdfd 	bl	8005e9a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	2009      	movs	r0, #9
 80042a6:	f001 fdde 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80042aa:	2009      	movs	r0, #9
 80042ac:	f001 fdf5 	bl	8005e9a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80042b0:	2200      	movs	r2, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	2017      	movs	r0, #23
 80042b6:	f001 fdd6 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80042ba:	2017      	movs	r0, #23
 80042bc:	f001 fded 	bl	8005e9a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80042c0:	2200      	movs	r2, #0
 80042c2:	2100      	movs	r1, #0
 80042c4:	2028      	movs	r0, #40	@ 0x28
 80042c6:	f001 fdce 	bl	8005e66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042ca:	2028      	movs	r0, #40	@ 0x28
 80042cc:	f001 fde5 	bl	8005e9a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	@ 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	48000800 	.word	0x48000800
 80042e0:	48000400 	.word	0x48000400

080042e4 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80042ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80042f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80042f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80042fa:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80042fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004302:	edd7 7a04 	vldr	s15, [r7, #16]
 8004306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800430a:	edd7 6a01 	vldr	s13, [r7, #4]
 800430e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004312:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004316:	ee67 6a27 	vmul.f32	s13, s14, s15
 800431a:	ed97 7a03 	vldr	s14, [r7, #12]
 800431e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	edd7 7a02 	vldr	s15, [r7, #8]
 800432e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004332:	eeb0 0a67 	vmov.f32	s0, s15
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <DWT_Init>:

void DWT_Init(void) {
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004344:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <DWT_Init+0x28>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a07      	ldr	r2, [pc, #28]	@ (8004368 <DWT_Init+0x28>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004350:	4b06      	ldr	r3, [pc, #24]	@ (800436c <DWT_Init+0x2c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a05      	ldr	r2, [pc, #20]	@ (800436c <DWT_Init+0x2c>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000edf0 	.word	0xe000edf0
 800436c:	e0001000 	.word	0xe0001000

08004370 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004380:	d10e      	bne.n	80043a0 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8004382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800438a:	f002 fa55 	bl	8006838 <HAL_GPIO_ReadPin>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004394:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_GPIO_EXTI_Callback+0x154>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	4b49      	ldr	r3, [pc, #292]	@ (80044c4 <HAL_GPIO_EXTI_Callback+0x154>)
 800439e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a6:	d10d      	bne.n	80043c4 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 80043a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043ac:	4846      	ldr	r0, [pc, #280]	@ (80044c8 <HAL_GPIO_EXTI_Callback+0x158>)
 80043ae:	f002 fa43 	bl	8006838 <HAL_GPIO_ReadPin>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 80043b8:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_GPIO_EXTI_Callback+0x15c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <HAL_GPIO_EXTI_Callback+0x160>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ca:	d10e      	bne.n	80043ea <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 80043cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043d0:	4840      	ldr	r0, [pc, #256]	@ (80044d4 <HAL_GPIO_EXTI_Callback+0x164>)
 80043d2:	f002 fa31 	bl	8006838 <HAL_GPIO_ReadPin>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d103      	bne.n	80043e4 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 80043dc:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <HAL_GPIO_EXTI_Callback+0x168>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e002      	b.n	80043ea <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 80043e4:	4b3c      	ldr	r3, [pc, #240]	@ (80044d8 <HAL_GPIO_EXTI_Callback+0x168>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f0:	d10e      	bne.n	8004410 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 80043f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043f6:	4837      	ldr	r0, [pc, #220]	@ (80044d4 <HAL_GPIO_EXTI_Callback+0x164>)
 80043f8:	f002 fa1e 	bl	8006838 <HAL_GPIO_ReadPin>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d103      	bne.n	800440a <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 8004402:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <HAL_GPIO_EXTI_Callback+0x16c>)
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e002      	b.n	8004410 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 800440a:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <HAL_GPIO_EXTI_Callback+0x16c>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004416:	d102      	bne.n	800441e <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <HAL_GPIO_EXTI_Callback+0x160>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 800441e:	4b30      	ldr	r3, [pc, #192]	@ (80044e0 <HAL_GPIO_EXTI_Callback+0x170>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e00a      	b.n	8004446 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d102      	bne.n	800443c <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e004      	b.n	8004446 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	2b08      	cmp	r3, #8
 8004440:	d13b      	bne.n	80044ba <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 8004442:	2302      	movs	r3, #2
 8004444:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8004446:	4a27      	ldr	r2, [pc, #156]	@ (80044e4 <HAL_GPIO_EXTI_Callback+0x174>)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 8004452:	4925      	ldr	r1, [pc, #148]	@ (80044e8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 800445c:	4a21      	ldr	r2, [pc, #132]	@ (80044e4 <HAL_GPIO_EXTI_Callback+0x174>)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e029      	b.n	80044bc <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8004468:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <HAL_GPIO_EXTI_Callback+0x178>)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d306      	bcc.n	8004484 <HAL_GPIO_EXTI_Callback+0x114>
 8004476:	4a1c      	ldr	r2, [pc, #112]	@ (80044e8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	e006      	b.n	8004492 <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004484:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8004490:	3b01      	subs	r3, #1
		uint32_t delta =
 8004492:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004494:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_GPIO_EXTI_Callback+0x17c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <HAL_GPIO_EXTI_Callback+0x180>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0c9b      	lsrs	r3, r3, #18
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a6:	4913      	ldr	r1, [pc, #76]	@ (80044f4 <HAL_GPIO_EXTI_Callback+0x184>)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 80044ae:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <HAL_GPIO_EXTI_Callback+0x174>)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4413      	add	r3, r2
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e000      	b.n	80044bc <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80044ba:	bf00      	nop
	}
}
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000bb0 	.word	0x20000bb0
 80044c8:	48000800 	.word	0x48000800
 80044cc:	20000c04 	.word	0x20000c04
 80044d0:	20000c05 	.word	0x20000c05
 80044d4:	48000400 	.word	0x48000400
 80044d8:	20000c09 	.word	0x20000c09
 80044dc:	20000c0a 	.word	0x20000c0a
 80044e0:	e0001000 	.word	0xe0001000
 80044e4:	20001430 	.word	0x20001430
 80044e8:	20000b0c 	.word	0x20000b0c
 80044ec:	20000268 	.word	0x20000268
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	20000b18 	.word	0x20000b18

080044f8 <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80044f8:	b4b0      	push	{r4, r5, r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004508:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	1e54      	subs	r4, r2, #1
 8004510:	f143 0500 	adc.w	r5, r3, #0
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004516:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bcb0      	pop	{r4, r5, r7}
 8004522:	4770      	bx	lr
 8004524:	20000618 	.word	0x20000618
 8004528:	20000ad8 	.word	0x20000ad8

0800452c <micros>:
uint64_t micros() {
 800452c:	b4b0      	push	{r4, r5, r7}
 800452e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004530:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <micros+0x2c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	2200      	movs	r2, #0
 8004538:	4618      	mov	r0, r3
 800453a:	4611      	mov	r1, r2
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <micros+0x30>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	1884      	adds	r4, r0, r2
 8004544:	eb41 0503 	adc.w	r5, r1, r3
 8004548:	4622      	mov	r2, r4
 800454a:	462b      	mov	r3, r5
}
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	bcb0      	pop	{r4, r5, r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000618 	.word	0x20000618
 800455c:	20000ad8 	.word	0x20000ad8

08004560 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8004560:	b480      	push	{r7}
 8004562:	b08f      	sub	sp, #60	@ 0x3c
 8004564:	af00      	add	r7, sp, #0
 8004566:	ed87 0a07 	vstr	s0, [r7, #28]
 800456a:	edc7 0a06 	vstr	s1, [r7, #24]
 800456e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004572:	edc7 1a04 	vstr	s3, [r7, #16]
 8004576:	ed87 2a03 	vstr	s4, [r7, #12]
 800457a:	edc7 2a02 	vstr	s5, [r7, #8]
 800457e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004582:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004584:	ed97 7a06 	vldr	s14, [r7, #24]
 8004588:	edd7 7a07 	vldr	s15, [r7, #28]
 800458c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004590:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	ed93 7a00 	vldr	s14, [r3]
 800459a:	edd7 6a07 	vldr	s13, [r7, #28]
 800459e:	edd7 7a03 	vldr	s15, [r7, #12]
 80045a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	ed93 7a00 	vldr	s14, [r3]
 80045b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80045ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80045be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80045c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ca:	dd08      	ble.n	80045de <PID_Update+0x7e>
		state->integ = outMax / kI;
 80045cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80045d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	ed93 7a00 	vldr	s14, [r3]
 80045e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80045ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80045f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f8:	d508      	bpl.n	800460c <PID_Update+0xac>
		state->integ = outMin / kI;
 80045fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80045fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 800460c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	dd0b      	ble.n	8004632 <PID_Update+0xd2>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	d503      	bpl.n	8004632 <PID_Update+0xd2>
		state->integ = 0;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004632:	edd7 7a07 	vldr	s15, [r7, #28]
 8004636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d50b      	bpl.n	8004658 <PID_Update+0xf8>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	dd03      	ble.n	8004658 <PID_Update+0xf8>
		state->integ = 0;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004670:	ed97 7a07 	vldr	s14, [r7, #28]
 8004674:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004678:	ed97 7a03 	vldr	s14, [r7, #12]
 800467c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004680:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004684:	ed97 7a04 	vldr	s14, [r7, #16]
 8004688:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 800469a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800469e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80046a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80046aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ae:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 80046b2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80046b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	dd01      	ble.n	80046c8 <PID_Update+0x168>
		out = outMax;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 80046c8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80046cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80046d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d501      	bpl.n	80046de <PID_Update+0x17e>
		out = outMin;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 80046de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e0:	ee07 3a90 	vmov	s15, r3
}
 80046e4:	eeb0 0a67 	vmov.f32	s0, s15
 80046e8:	373c      	adds	r7, #60	@ 0x3c
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	0000      	movs	r0, r0
 80046f4:	0000      	movs	r0, r0
	...

080046f8 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004700:	f7ff ff14 	bl	800452c <micros>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	497b      	ldr	r1, [pc, #492]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800470a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 800470e:	4b7b      	ldr	r3, [pc, #492]	@ (80048fc <Revolute_PosVel_Update+0x204>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	4a78      	ldr	r2, [pc, #480]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004716:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004718:	4b77      	ldr	r3, [pc, #476]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004728:	4b73      	ldr	r3, [pc, #460]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800472a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 800472e:	4b72      	ldr	r3, [pc, #456]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004730:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8004732:	4b71      	ldr	r3, [pc, #452]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004738:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	dd04      	ble.n	800474c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e007      	b.n	800475c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004752:	da03      	bge.n	800475c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800475a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 800475c:	4b66      	ldr	r3, [pc, #408]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800475e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004762:	4b65      	ldr	r3, [pc, #404]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004768:	ebb0 0a02 	subs.w	sl, r0, r2
 800476c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004770:	4650      	mov	r0, sl
 8004772:	4659      	mov	r1, fp
 8004774:	f7fc fade 	bl	8000d34 <__aeabi_ul2f>
 8004778:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 800477c:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004900 <Revolute_PosVel_Update+0x208>
 8004780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004784:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004788:	edd7 7a02 	vldr	s15, [r7, #8]
 800478c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	f000 80a0 	beq.w	80048d8 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80047a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047aa:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 80047ae:	4b52      	ldr	r3, [pc, #328]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80047b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80047b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80047b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80047bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80047c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 80047c4:	4b4c      	ldr	r3, [pc, #304]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80047c6:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 80047ca:	4a4b      	ldr	r2, [pc, #300]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fb fe85 	bl	80004e0 <__aeabi_f2d>
 80047d6:	a344      	add	r3, pc, #272	@ (adr r3, 80048e8 <Revolute_PosVel_Update+0x1f0>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fed8 	bl	8000590 <__aeabi_dmul>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	f7fc f98c 	bl	8000b04 <__aeabi_d2f>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4a42      	ldr	r2, [pc, #264]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80047f0:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 80047f2:	4b44      	ldr	r3, [pc, #272]	@ (8004904 <Revolute_PosVel_Update+0x20c>)
 80047f4:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 80047f6:	4b40      	ldr	r3, [pc, #256]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80047f8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80047fc:	edd7 7a00 	vldr	s15, [r7]
 8004800:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004808:	edd7 7a00 	vldr	s15, [r7]
 800480c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004810:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004812:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800481a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 800481e:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004820:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004824:	4b34      	ldr	r3, [pc, #208]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fb fe59 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 800482e:	a32e      	add	r3, pc, #184	@ (adr r3, 80048e8 <Revolute_PosVel_Update+0x1f0>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f7fb feac 	bl	8000590 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	f7fc f960 	bl	8000b04 <__aeabi_d2f>
 8004844:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004846:	4a2c      	ldr	r2, [pc, #176]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004848:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 800484a:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800484c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	17c8      	asrs	r0, r1, #31
 8004854:	460c      	mov	r4, r1
 8004856:	4605      	mov	r5, r0
 8004858:	eb12 0804 	adds.w	r8, r2, r4
 800485c:	eb43 0905 	adc.w	r9, r3, r5
 8004860:	4b25      	ldr	r3, [pc, #148]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004862:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004866:	4b24      	ldr	r3, [pc, #144]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004868:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	f7fb fe60 	bl	8000534 <__aeabi_l2d>
 8004874:	a31c      	add	r3, pc, #112	@ (adr r3, 80048e8 <Revolute_PosVel_Update+0x1f0>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fe89 	bl	8000590 <__aeabi_dmul>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f7fc f93d 	bl	8000b04 <__aeabi_d2f>
 800488a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 800488c:	4a1a      	ldr	r2, [pc, #104]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 800488e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004890:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 8004892:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004896:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004908 <Revolute_PosVel_Update+0x210>
 800489a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489e:	ee17 0a90 	vmov	r0, s15
 80048a2:	f7fb fe1d 	bl	80004e0 <__aeabi_f2d>
 80048a6:	a312      	add	r3, pc, #72	@ (adr r3, 80048f0 <Revolute_PosVel_Update+0x1f8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb ff9a 	bl	80007e4 <__aeabi_ddiv>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7fc f924 	bl	8000b04 <__aeabi_d2f>
 80048bc:	4603      	mov	r3, r0
 80048be:	4a0e      	ldr	r2, [pc, #56]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80048c0:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80048c8:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80048cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048d0:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <Revolute_PosVel_Update+0x200>)
 80048d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80048d6:	e000      	b.n	80048da <Revolute_PosVel_Update+0x1e2>
		return;
 80048d8:	bf00      	nop
}
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e2:	bf00      	nop
 80048e4:	f3af 8000 	nop.w
 80048e8:	54442d18 	.word	0x54442d18
 80048ec:	3f3921fb 	.word	0x3f3921fb
 80048f0:	54442d18 	.word	0x54442d18
 80048f4:	400921fb 	.word	0x400921fb
 80048f8:	20000b30 	.word	0x20000b30
 80048fc:	2000054c 	.word	0x2000054c
 8004900:	358637bd 	.word	0x358637bd
 8004904:	3ecccccd 	.word	0x3ecccccd
 8004908:	43340000 	.word	0x43340000

0800490c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004914:	f7ff fe0a 	bl	800452c <micros>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4958      	ldr	r1, [pc, #352]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 800491e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004922:	4b58      	ldr	r3, [pc, #352]	@ (8004a84 <Prismatic_PosVel_Update+0x178>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	4a55      	ldr	r2, [pc, #340]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 800492a:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800492c:	4b54      	ldr	r3, [pc, #336]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 800492e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004930:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004936:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493e:	dd04      	ble.n	800494a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e007      	b.n	800495a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004950:	da03      	bge.n	800495a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004958:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 800495a:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 800495c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004960:	4b47      	ldr	r3, [pc, #284]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004962:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004966:	ebb0 0a02 	subs.w	sl, r0, r2
 800496a:	eb61 0b03 	sbc.w	fp, r1, r3
 800496e:	4650      	mov	r0, sl
 8004970:	4659      	mov	r1, fp
 8004972:	f7fc f9df 	bl	8000d34 <__aeabi_ul2f>
 8004976:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 800497a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004a88 <Prismatic_PosVel_Update+0x17c>
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004986:	edd7 7a02 	vldr	s15, [r7, #8]
 800498a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004992:	d070      	beq.n	8004a76 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800499e:	ed97 7a02 	vldr	s14, [r7, #8]
 80049a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a6:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 80049aa:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80049b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80049b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80049b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80049bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 80049c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049c2:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 80049cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80049d0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004a8c <Prismatic_PosVel_Update+0x180>
 80049d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d8:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049da:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 80049de:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <Prismatic_PosVel_Update+0x184>)
 80049e0:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80049e8:	edd7 7a00 	vldr	s15, [r7]
 80049ec:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 80049f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f4:	edd7 7a00 	vldr	s15, [r7]
 80049f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049fc:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 80049fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a06:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a0c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004a10:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a12:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004a16:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004a8c <Prismatic_PosVel_Update+0x180>
 8004a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004a1e:	4b18      	ldr	r3, [pc, #96]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a20:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004a24:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	17c8      	asrs	r0, r1, #31
 8004a2e:	460c      	mov	r4, r1
 8004a30:	4605      	mov	r5, r0
 8004a32:	eb12 0804 	adds.w	r8, r2, r4
 8004a36:	eb43 0905 	adc.w	r9, r3, r5
 8004a3a:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a3c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004a40:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a42:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fc f97b 	bl	8000d44 <__aeabi_l2f>
 8004a4e:	ee07 0a10 	vmov	s14, r0
 8004a52:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004a8c <Prismatic_PosVel_Update+0x180>
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004a5a:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a5c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004a60:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a06      	ldr	r2, [pc, #24]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a66:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a6e:	4904      	ldr	r1, [pc, #16]	@ (8004a80 <Prismatic_PosVel_Update+0x174>)
 8004a70:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004a74:	e000      	b.n	8004a78 <Prismatic_PosVel_Update+0x16c>
		return;
 8004a76:	bf00      	nop
}
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a80:	20000b70 	.word	0x20000b70
 8004a84:	20000480 	.word	0x20000480
 8004a88:	358637bd 	.word	0x358637bd
 8004a8c:	3aa00000 	.word	0x3aa00000
 8004a90:	3ecccccd 	.word	0x3ecccccd

08004a94 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004aa0:	edd7 7a00 	vldr	s15, [r7]
 8004aa4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004b78 <Set_Motor+0xe4>
 8004aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	dd01      	ble.n	8004ab6 <Set_Motor+0x22>
		speed = 100.0f;
 8004ab2:	4b32      	ldr	r3, [pc, #200]	@ (8004b7c <Set_Motor+0xe8>)
 8004ab4:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004ab6:	edd7 7a00 	vldr	s15, [r7]
 8004aba:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004b80 <Set_Motor+0xec>
 8004abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	d501      	bpl.n	8004acc <Set_Motor+0x38>
		speed = -100.0f;
 8004ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b84 <Set_Motor+0xf0>)
 8004aca:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004acc:	edd7 7a00 	vldr	s15, [r7]
 8004ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ad4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004b78 <Set_Motor+0xe4>
 8004ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004adc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b78 <Set_Motor+0xe4>
 8004ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae8:	ee17 3a90 	vmov	r3, s15
 8004aec:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <Set_Motor+0x9c>
		if (speed > 0) {
 8004af4:	edd7 7a00 	vldr	s15, [r7]
 8004af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	dd05      	ble.n	8004b0e <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b02:	2200      	movs	r2, #0
 8004b04:	2120      	movs	r1, #32
 8004b06:	4820      	ldr	r0, [pc, #128]	@ (8004b88 <Set_Motor+0xf4>)
 8004b08:	f001 feae 	bl	8006868 <HAL_GPIO_WritePin>
 8004b0c:	e00b      	b.n	8004b26 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004b0e:	edd7 7a00 	vldr	s15, [r7]
 8004b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	d504      	bpl.n	8004b26 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	2120      	movs	r1, #32
 8004b20:	4819      	ldr	r0, [pc, #100]	@ (8004b88 <Set_Motor+0xf4>)
 8004b22:	f001 fea1 	bl	8006868 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004b26:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <Set_Motor+0xf8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004b2e:	e01f      	b.n	8004b70 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d11c      	bne.n	8004b70 <Set_Motor+0xdc>
		if (speed > 0) {
 8004b36:	edd7 7a00 	vldr	s15, [r7]
 8004b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	dd05      	ble.n	8004b50 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004b44:	2200      	movs	r2, #0
 8004b46:	2140      	movs	r1, #64	@ 0x40
 8004b48:	480f      	ldr	r0, [pc, #60]	@ (8004b88 <Set_Motor+0xf4>)
 8004b4a:	f001 fe8d 	bl	8006868 <HAL_GPIO_WritePin>
 8004b4e:	e00b      	b.n	8004b68 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004b50:	edd7 7a00 	vldr	s15, [r7]
 8004b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	d504      	bpl.n	8004b68 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004b5e:	2201      	movs	r2, #1
 8004b60:	2140      	movs	r1, #64	@ 0x40
 8004b62:	4809      	ldr	r0, [pc, #36]	@ (8004b88 <Set_Motor+0xf4>)
 8004b64:	f001 fe80 	bl	8006868 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004b68:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <Set_Motor+0xf8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	42c80000 	.word	0x42c80000
 8004b7c:	42c80000 	.word	0x42c80000
 8004b80:	c2c80000 	.word	0xc2c80000
 8004b84:	c2c80000 	.word	0xc2c80000
 8004b88:	48000800 	.word	0x48000800
 8004b8c:	200006e4 	.word	0x200006e4

08004b90 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <Set_Servo+0x48>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004ba6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <Set_Servo+0x4c>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004bae:	f7ff fcbd 	bl	800452c <micros>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	490a      	ldr	r1, [pc, #40]	@ (8004be0 <Set_Servo+0x50>)
 8004bb8:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004bbc:	e007      	b.n	8004bce <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <Set_Servo+0x48>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bc6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004bc8:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <Set_Servo+0x4c>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200007b0 	.word	0x200007b0
 8004bdc:	20000c08 	.word	0x20000c08
 8004be0:	20000c68 	.word	0x20000c68

08004be4 <Reset_R>:

void Reset_R() {
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004be8:	4905      	ldr	r1, [pc, #20]	@ (8004c00 <Reset_R+0x1c>)
 8004bea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	20000b30 	.word	0x20000b30

08004c04 <Reset_P>:
void Reset_P() {
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004c08:	4905      	ldr	r1, [pc, #20]	@ (8004c20 <Reset_P+0x1c>)
 8004c0a:	4a06      	ldr	r2, [pc, #24]	@ (8004c24 <Reset_P+0x20>)
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000b70 	.word	0x20000b70
 8004c24:	fffff99a 	.word	0xfffff99a

08004c28 <Workspace_limit>:

void Workspace_limit() {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 8004c2c:	4b34      	ldr	r3, [pc, #208]	@ (8004d00 <Workspace_limit+0xd8>)
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fb fc55 	bl	80004e0 <__aeabi_f2d>
 8004c36:	a32e      	add	r3, pc, #184	@ (adr r3, 8004cf0 <Workspace_limit+0xc8>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb ff1a 	bl	8000a74 <__aeabi_dcmplt>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <Workspace_limit+0x36>
 8004c46:	4b2f      	ldr	r3, [pc, #188]	@ (8004d04 <Workspace_limit+0xdc>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	dd03      	ble.n	8004c5e <Workspace_limit+0x36>
		R_PWM = 0;
 8004c56:	4b2b      	ldr	r3, [pc, #172]	@ (8004d04 <Workspace_limit+0xdc>)
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <Workspace_limit+0xd8>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fc3c 	bl	80004e0 <__aeabi_f2d>
 8004c68:	a323      	add	r3, pc, #140	@ (adr r3, 8004cf8 <Workspace_limit+0xd0>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb ff1f 	bl	8000ab0 <__aeabi_dcmpgt>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <Workspace_limit+0x68>
 8004c78:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <Workspace_limit+0xdc>)
 8004c7a:	edd3 7a00 	vldr	s15, [r3]
 8004c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d503      	bpl.n	8004c90 <Workspace_limit+0x68>
		R_PWM = 0;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	@ (8004d04 <Workspace_limit+0xdc>)
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 8004c90:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <Workspace_limit+0xe0>)
 8004c92:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004c96:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d0c <Workspace_limit+0xe4>
 8004c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	dd0b      	ble.n	8004cbc <Workspace_limit+0x94>
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <Workspace_limit+0xe8>)
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	dd03      	ble.n	8004cbc <Workspace_limit+0x94>
		P_PWM = 0;
 8004cb4:	4b16      	ldr	r3, [pc, #88]	@ (8004d10 <Workspace_limit+0xe8>)
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004cbc:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <Workspace_limit+0xe0>)
 8004cbe:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004cc2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d400      	bmi.n	8004cd2 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 8004cd0:	e00c      	b.n	8004cec <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <Workspace_limit+0xe8>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d400      	bmi.n	8004ce4 <Workspace_limit+0xbc>
}
 8004ce2:	e003      	b.n	8004cec <Workspace_limit+0xc4>
		P_PWM = 0;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <Workspace_limit+0xe8>)
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	1e8e6080 	.word	0x1e8e6080
 8004cf4:	bffeb7bf 	.word	0xbffeb7bf
 8004cf8:	bfb15b57 	.word	0xbfb15b57
 8004cfc:	40143eec 	.word	0x40143eec
 8004d00:	20000b30 	.word	0x20000b30
 8004d04:	20000bfc 	.word	0x20000bfc
 8004d08:	20000b70 	.word	0x20000b70
 8004d0c:	43988000 	.word	0x43988000
 8004d10:	20000c00 	.word	0x20000c00

08004d14 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8004d28:	4b16      	ldr	r3, [pc, #88]	@ (8004d84 <Get_QRIdata+0x70>)
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8004d36:	4b13      	ldr	r3, [pc, #76]	@ (8004d84 <Get_QRIdata+0x70>)
 8004d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8004d44:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <Get_QRIdata+0x70>)
 8004d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <Get_QRIdata+0x74>)
 8004d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8004d60:	4b09      	ldr	r3, [pc, #36]	@ (8004d88 <Get_QRIdata+0x74>)
 8004d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <Get_QRIdata+0x74>)
 8004d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000b70 	.word	0x20000b70
 8004d88:	20000b30 	.word	0x20000b30

08004d8c <Trapezoidal_CalcTotalTime>:

float Trapezoidal_CalcTotalTime(float distance, float vmax, float amax) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d96:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d9a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_acc = vmax / amax;
 8004d9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004da2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004daa:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_acc = 0.5f * amax * t_acc * t_acc;
 8004dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004db2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004db6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004dba:	edd7 7a07 	vldr	s15, [r7, #28]
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a06 	vstr	s15, [r7, #24]
	if (2 * d_acc > distance) {
 8004dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004dd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d510      	bpl.n	8004e06 <Trapezoidal_CalcTotalTime+0x7a>
		t_acc = sqrtf(distance / amax);
 8004de4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004df0:	eeb0 0a66 	vmov.f32	s0, s13
 8004df4:	f007 fa62 	bl	800c2bc <sqrtf>
 8004df8:	ed87 0a07 	vstr	s0, [r7, #28]
		return 2 * t_acc;
 8004dfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e04:	e019      	b.n	8004e3a <Trapezoidal_CalcTotalTime+0xae>
	}
	float d_const = distance - 2 * d_acc;
 8004e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e16:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_const = d_const / vmax;
 8004e1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8004e1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e26:	edc7 7a04 	vstr	s15, [r7, #16]
	return 2 * t_acc + t_const;
 8004e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e2e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004e32:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e36:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <Trapezoidal_CalcVmaxFromTime>:

float Trapezoidal_CalcVmaxFromTime(float distance, float amax, float total_time) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e52:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_half = total_time / 2.0f;
 8004e56:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e5a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_half = distance / 2.0f;
 8004e66:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e6a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e72:	edc7 7a06 	vstr	s15, [r7, #24]

	float v_peak = amax * t_half;
 8004e76:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a05 	vstr	s15, [r7, #20]
	if (0.5f * v_peak * t_half >= d_half) {
 8004e86:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e92:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	d80c      	bhi.n	8004ec2 <Trapezoidal_CalcVmaxFromTime+0x7e>
		return sqrtf(distance * amax);
 8004ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb8:	f007 fa00 	bl	800c2bc <sqrtf>
 8004ebc:	eef0 6a40 	vmov.f32	s13, s0
 8004ec0:	e015      	b.n	8004eee <Trapezoidal_CalcVmaxFromTime+0xaa>
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
 8004ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ec6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004eca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ece:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ed6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ee6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004eea:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004eee:	eef0 7a66 	vmov.f32	s15, s13
 8004ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	0000      	movs	r0, r0
	...

08004f00 <InverseKinematics>:

void InverseKinematics(float x, float y, float *r, float *p) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	*r = atan2f(x * -1, y) + M_PI_2;
 8004f12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f16:	eef1 7a67 	vneg.f32	s15, s15
 8004f1a:	edd7 0a02 	vldr	s1, [r7, #8]
 8004f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f22:	f007 f9c9 	bl	800c2b8 <atan2f>
 8004f26:	ee10 3a10 	vmov	r3, s0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb fad8 	bl	80004e0 <__aeabi_f2d>
 8004f30:	a313      	add	r3, pc, #76	@ (adr r3, 8004f80 <InverseKinematics+0x80>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb f975 	bl	8000224 <__adddf3>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f7fb fddf 	bl	8000b04 <__aeabi_d2f>
 8004f46:	4602      	mov	r2, r0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	*p = sqrtf(x * x + y * y);
 8004f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f50:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f60:	eeb0 0a67 	vmov.f32	s0, s15
 8004f64:	f007 f9aa 	bl	800c2bc <sqrtf>
 8004f68:	eef0 7a40 	vmov.f32	s15, s0
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	edc3 7a00 	vstr	s15, [r3]
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w
 8004f80:	54442d18 	.word	0x54442d18
 8004f84:	3ff921fb 	.word	0x3ff921fb

08004f88 <TrapezoidStep>:

void TrapezoidStep(void) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
//	static float last_TargetR = 0.0f;
//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 8004f8e:	4b38      	ldr	r3, [pc, #224]	@ (8005070 <TrapezoidStep+0xe8>)
 8004f90:	ed93 7a00 	vldr	s14, [r3]
 8004f94:	4b37      	ldr	r3, [pc, #220]	@ (8005074 <TrapezoidStep+0xec>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f9e:	eef0 7ae7 	vabs.f32	s15, s15
 8004fa2:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 8004fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004faa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005078 <TrapezoidStep+0xf0>
 8004fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	dd0f      	ble.n	8004fd8 <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 8004fb8:	4b30      	ldr	r3, [pc, #192]	@ (800507c <TrapezoidStep+0xf4>)
 8004fba:	edd3 7a00 	vldr	s15, [r3]
 8004fbe:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8004fc2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8005080 <TrapezoidStep+0xf8>
 8004fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004fca:	482e      	ldr	r0, [pc, #184]	@ (8005084 <TrapezoidStep+0xfc>)
 8004fcc:	f7fc fd12 	bl	80019f4 <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <TrapezoidStep+0xe8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	@ (8005074 <TrapezoidStep+0xec>)
 8004fd6:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <TrapezoidStep+0x100>)
 8004fda:	ed93 7a00 	vldr	s14, [r3]
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <TrapezoidStep+0x104>)
 8004fe0:	edd3 7a00 	vldr	s15, [r3]
 8004fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fe8:	eef0 7ae7 	vabs.f32	s15, s15
 8004fec:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 8004ff0:	edd7 7a00 	vldr	s15, [r7]
 8004ff4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005090 <TrapezoidStep+0x108>
 8004ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005000:	dd0f      	ble.n	8005022 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 8005002:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <TrapezoidStep+0x10c>)
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005098 <TrapezoidStep+0x110>
 800500c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800509c <TrapezoidStep+0x114>
 8005010:	eeb0 0a67 	vmov.f32	s0, s15
 8005014:	4822      	ldr	r0, [pc, #136]	@ (80050a0 <TrapezoidStep+0x118>)
 8005016:	f7fc fced 	bl	80019f4 <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 800501a:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <TrapezoidStep+0x100>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <TrapezoidStep+0x104>)
 8005020:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 8005022:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8005078 <TrapezoidStep+0xf0>
 8005026:	4817      	ldr	r0, [pc, #92]	@ (8005084 <TrapezoidStep+0xfc>)
 8005028:	f7fc fdae 	bl	8001b88 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 800502c:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <TrapezoidStep+0xfc>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <TrapezoidStep+0x11c>)
 8005032:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 8005034:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <TrapezoidStep+0xfc>)
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <TrapezoidStep+0x120>)
 800503a:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 800503c:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <TrapezoidStep+0xfc>)
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <TrapezoidStep+0x124>)
 8005042:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 8005044:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005078 <TrapezoidStep+0xf0>
 8005048:	4815      	ldr	r0, [pc, #84]	@ (80050a0 <TrapezoidStep+0x118>)
 800504a:	f7fc fd9d 	bl	8001b88 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 800504e:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <TrapezoidStep+0x118>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <TrapezoidStep+0x128>)
 8005054:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8005056:	4b12      	ldr	r3, [pc, #72]	@ (80050a0 <TrapezoidStep+0x118>)
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4a16      	ldr	r2, [pc, #88]	@ (80050b4 <TrapezoidStep+0x12c>)
 800505c:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 800505e:	4b10      	ldr	r3, [pc, #64]	@ (80050a0 <TrapezoidStep+0x118>)
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <TrapezoidStep+0x130>)
 8005064:	6013      	str	r3, [r2, #0]
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000bcc 	.word	0x20000bcc
 8005074:	2000134c 	.word	0x2000134c
 8005078:	3a83126f 	.word	0x3a83126f
 800507c:	20000bec 	.word	0x20000bec
 8005080:	3fb33333 	.word	0x3fb33333
 8005084:	20001364 	.word	0x20001364
 8005088:	20000bd0 	.word	0x20000bd0
 800508c:	20001350 	.word	0x20001350
 8005090:	3c23d70a 	.word	0x3c23d70a
 8005094:	20000bf0 	.word	0x20000bf0
 8005098:	453b8000 	.word	0x453b8000
 800509c:	44160000 	.word	0x44160000
 80050a0:	200013a8 	.word	0x200013a8
 80050a4:	20000bd4 	.word	0x20000bd4
 80050a8:	20000bdc 	.word	0x20000bdc
 80050ac:	20000be4 	.word	0x20000be4
 80050b0:	20000bd8 	.word	0x20000bd8
 80050b4:	20000be0 	.word	0x20000be0
 80050b8:	20000be8 	.word	0x20000be8

080050bc <PIDStep>:

void PIDStep(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 80050c2:	4b65      	ldr	r3, [pc, #404]	@ (8005258 <PIDStep+0x19c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4a63      	ldr	r2, [pc, #396]	@ (8005258 <PIDStep+0x19c>)
 80050ca:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 80050cc:	4b62      	ldr	r3, [pc, #392]	@ (8005258 <PIDStep+0x19c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b09      	cmp	r3, #9
 80050d2:	dd62      	ble.n	800519a <PIDStep+0xde>
		loop_counter1 = 0;
 80050d4:	4b60      	ldr	r3, [pc, #384]	@ (8005258 <PIDStep+0x19c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 80050da:	4b60      	ldr	r3, [pc, #384]	@ (800525c <PIDStep+0x1a0>)
 80050dc:	ed93 7a00 	vldr	s14, [r3]
 80050e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005260 <PIDStep+0x1a4>)
 80050e2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80050e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ea:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 80050ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005264 <PIDStep+0x1a8>)
 80050f0:	ed93 7a00 	vldr	s14, [r3]
 80050f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005268 <PIDStep+0x1ac>)
 80050f6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80050fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050fe:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 8005102:	4b5a      	ldr	r3, [pc, #360]	@ (800526c <PIDStep+0x1b0>)
 8005104:	edd3 7a00 	vldr	s15, [r3]
 8005108:	4b59      	ldr	r3, [pc, #356]	@ (8005270 <PIDStep+0x1b4>)
 800510a:	ed93 7a00 	vldr	s14, [r3]
 800510e:	4b59      	ldr	r3, [pc, #356]	@ (8005274 <PIDStep+0x1b8>)
 8005110:	edd3 6a00 	vldr	s13, [r3]
 8005114:	4858      	ldr	r0, [pc, #352]	@ (8005278 <PIDStep+0x1bc>)
 8005116:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 800527c <PIDStep+0x1c0>
 800511a:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8005280 <PIDStep+0x1c4>
 800511e:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8005284 <PIDStep+0x1c8>
 8005122:	eef0 1a66 	vmov.f32	s3, s13
 8005126:	eeb0 1a47 	vmov.f32	s2, s14
 800512a:	eef0 0a67 	vmov.f32	s1, s15
 800512e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005132:	f7ff fa15 	bl	8004560 <PID_Update>
 8005136:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 800513a:	4b53      	ldr	r3, [pc, #332]	@ (8005288 <PIDStep+0x1cc>)
 800513c:	edd3 7a00 	vldr	s15, [r3]
 8005140:	4b52      	ldr	r3, [pc, #328]	@ (800528c <PIDStep+0x1d0>)
 8005142:	ed93 7a00 	vldr	s14, [r3]
 8005146:	4b52      	ldr	r3, [pc, #328]	@ (8005290 <PIDStep+0x1d4>)
 8005148:	edd3 6a00 	vldr	s13, [r3]
 800514c:	4851      	ldr	r0, [pc, #324]	@ (8005294 <PIDStep+0x1d8>)
 800514e:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 800527c <PIDStep+0x1c0>
 8005152:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8005280 <PIDStep+0x1c4>
 8005156:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8005284 <PIDStep+0x1c8>
 800515a:	eef0 1a66 	vmov.f32	s3, s13
 800515e:	eeb0 1a47 	vmov.f32	s2, s14
 8005162:	eef0 0a67 	vmov.f32	s1, s15
 8005166:	ed97 0a02 	vldr	s0, [r7, #8]
 800516a:	f7ff f9f9 	bl	8004560 <PID_Update>
 800516e:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8005172:	4b49      	ldr	r3, [pc, #292]	@ (8005298 <PIDStep+0x1dc>)
 8005174:	ed93 7a00 	vldr	s14, [r3]
 8005178:	edd7 7a01 	vldr	s15, [r7, #4]
 800517c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005180:	4b46      	ldr	r3, [pc, #280]	@ (800529c <PIDStep+0x1e0>)
 8005182:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8005186:	4b46      	ldr	r3, [pc, #280]	@ (80052a0 <PIDStep+0x1e4>)
 8005188:	ed93 7a00 	vldr	s14, [r3]
 800518c:	edd7 7a00 	vldr	s15, [r7]
 8005190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005194:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <PIDStep+0x1e8>)
 8005196:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 800519a:	4b40      	ldr	r3, [pc, #256]	@ (800529c <PIDStep+0x1e0>)
 800519c:	ed93 7a00 	vldr	s14, [r3]
 80051a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005260 <PIDStep+0x1a4>)
 80051a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80051a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051aa:	4b3f      	ldr	r3, [pc, #252]	@ (80052a8 <PIDStep+0x1ec>)
 80051ac:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 80051b0:	4b3d      	ldr	r3, [pc, #244]	@ (80052a8 <PIDStep+0x1ec>)
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	4b3d      	ldr	r3, [pc, #244]	@ (80052ac <PIDStep+0x1f0>)
 80051b8:	ed93 7a00 	vldr	s14, [r3]
 80051bc:	4b3c      	ldr	r3, [pc, #240]	@ (80052b0 <PIDStep+0x1f4>)
 80051be:	edd3 6a00 	vldr	s13, [r3]
 80051c2:	4b3c      	ldr	r3, [pc, #240]	@ (80052b4 <PIDStep+0x1f8>)
 80051c4:	ed93 6a00 	vldr	s12, [r3]
 80051c8:	483b      	ldr	r0, [pc, #236]	@ (80052b8 <PIDStep+0x1fc>)
 80051ca:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 800527c <PIDStep+0x1c0>
 80051ce:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8005280 <PIDStep+0x1c4>
 80051d2:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 80052bc <PIDStep+0x200>
 80051d6:	eef0 1a46 	vmov.f32	s3, s12
 80051da:	eeb0 1a66 	vmov.f32	s2, s13
 80051de:	eef0 0a47 	vmov.f32	s1, s14
 80051e2:	eeb0 0a67 	vmov.f32	s0, s15
 80051e6:	f7ff f9bb 	bl	8004560 <PID_Update>
 80051ea:	eef0 7a40 	vmov.f32	s15, s0
 80051ee:	4b34      	ldr	r3, [pc, #208]	@ (80052c0 <PIDStep+0x204>)
 80051f0:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 80051f4:	4b2b      	ldr	r3, [pc, #172]	@ (80052a4 <PIDStep+0x1e8>)
 80051f6:	ed93 7a00 	vldr	s14, [r3]
 80051fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <PIDStep+0x1ac>)
 80051fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005204:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <PIDStep+0x208>)
 8005206:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 800520a:	4b2e      	ldr	r3, [pc, #184]	@ (80052c4 <PIDStep+0x208>)
 800520c:	edd3 7a00 	vldr	s15, [r3]
 8005210:	4b2d      	ldr	r3, [pc, #180]	@ (80052c8 <PIDStep+0x20c>)
 8005212:	ed93 7a00 	vldr	s14, [r3]
 8005216:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <PIDStep+0x210>)
 8005218:	edd3 6a00 	vldr	s13, [r3]
 800521c:	4b2c      	ldr	r3, [pc, #176]	@ (80052d0 <PIDStep+0x214>)
 800521e:	ed93 6a00 	vldr	s12, [r3]
 8005222:	482c      	ldr	r0, [pc, #176]	@ (80052d4 <PIDStep+0x218>)
 8005224:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 800527c <PIDStep+0x1c0>
 8005228:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8005280 <PIDStep+0x1c4>
 800522c:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 80052bc <PIDStep+0x200>
 8005230:	eef0 1a46 	vmov.f32	s3, s12
 8005234:	eeb0 1a66 	vmov.f32	s2, s13
 8005238:	eef0 0a47 	vmov.f32	s1, s14
 800523c:	eeb0 0a67 	vmov.f32	s0, s15
 8005240:	f7ff f98e 	bl	8004560 <PID_Update>
 8005244:	eef0 7a40 	vmov.f32	s15, s0
 8005248:	4b23      	ldr	r3, [pc, #140]	@ (80052d8 <PIDStep+0x21c>)
 800524a:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20001434 	.word	0x20001434
 800525c:	20000bcc 	.word	0x20000bcc
 8005260:	20000b30 	.word	0x20000b30
 8005264:	20000bd0 	.word	0x20000bd0
 8005268:	20000b70 	.word	0x20000b70
 800526c:	20000244 	.word	0x20000244
 8005270:	20000248 	.word	0x20000248
 8005274:	2000024c 	.word	0x2000024c
 8005278:	20000c30 	.word	0x20000c30
 800527c:	42c80000 	.word	0x42c80000
 8005280:	c2c80000 	.word	0xc2c80000
 8005284:	3c23d70a 	.word	0x3c23d70a
 8005288:	20000258 	.word	0x20000258
 800528c:	2000025c 	.word	0x2000025c
 8005290:	20000260 	.word	0x20000260
 8005294:	20000c38 	.word	0x20000c38
 8005298:	20000bdc 	.word	0x20000bdc
 800529c:	20001438 	.word	0x20001438
 80052a0:	20000be0 	.word	0x20000be0
 80052a4:	2000143c 	.word	0x2000143c
 80052a8:	20000bf4 	.word	0x20000bf4
 80052ac:	20000238 	.word	0x20000238
 80052b0:	2000023c 	.word	0x2000023c
 80052b4:	20000240 	.word	0x20000240
 80052b8:	20000c40 	.word	0x20000c40
 80052bc:	3a83126f 	.word	0x3a83126f
 80052c0:	20000bfc 	.word	0x20000bfc
 80052c4:	20000bf8 	.word	0x20000bf8
 80052c8:	20000250 	.word	0x20000250
 80052cc:	20000254 	.word	0x20000254
 80052d0:	20000c50 	.word	0x20000c50
 80052d4:	20000c48 	.word	0x20000c48
 80052d8:	20000c00 	.word	0x20000c00

080052dc <ToleranceCheck>:

int ToleranceCheck(void) {
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 80052e0:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <ToleranceCheck+0x98>)
 80052e2:	ed93 7a00 	vldr	s14, [r3]
 80052e6:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <ToleranceCheck+0x9c>)
 80052e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80052ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f0:	eef0 7ae7 	vabs.f32	s15, s15
 80052f4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800537c <ToleranceCheck+0xa0>
 80052f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d52c      	bpl.n	800535c <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 8005302:	4b1f      	ldr	r3, [pc, #124]	@ (8005380 <ToleranceCheck+0xa4>)
 8005304:	ed93 7a00 	vldr	s14, [r3]
 8005308:	4b1e      	ldr	r3, [pc, #120]	@ (8005384 <ToleranceCheck+0xa8>)
 800530a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800530e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005312:	eef0 7ae7 	vabs.f32	s15, s15
 8005316:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005388 <ToleranceCheck+0xac>
 800531a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d51b      	bpl.n	800535c <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 8005324:	4b19      	ldr	r3, [pc, #100]	@ (800538c <ToleranceCheck+0xb0>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	4313      	orrs	r3, r2
 800532c:	d107      	bne.n	800533e <ToleranceCheck+0x62>
			lock_timer_us = micros();
 800532e:	f7ff f8fd 	bl	800452c <micros>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4915      	ldr	r1, [pc, #84]	@ (800538c <ToleranceCheck+0xb0>)
 8005338:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 800533c:	e016      	b.n	800536c <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800533e:	f7ff f8f5 	bl	800452c <micros>
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <ToleranceCheck+0xb0>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	1a84      	subs	r4, r0, r2
 800534a:	eb61 0503 	sbc.w	r5, r1, r3
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <ToleranceCheck+0xb4>)
 8005350:	429c      	cmp	r4, r3
 8005352:	f175 0300 	sbcs.w	r3, r5, #0
 8005356:	d309      	bcc.n	800536c <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8005358:	2301      	movs	r3, #1
 800535a:	e009      	b.n	8005370 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 800535c:	490b      	ldr	r1, [pc, #44]	@ (800538c <ToleranceCheck+0xb0>)
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9c1 2300 	strd	r2, r3, [r1]
 800536a:	e000      	b.n	800536e <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 800536c:	bf00      	nop
	}

	return 0;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	bdb0      	pop	{r4, r5, r7, pc}
 8005374:	20000bcc 	.word	0x20000bcc
 8005378:	20000b30 	.word	0x20000b30
 800537c:	3d0b4396 	.word	0x3d0b4396
 8005380:	20000bd0 	.word	0x20000bd0
 8005384:	20000b70 	.word	0x20000b70
 8005388:	3e4ccccd 	.word	0x3e4ccccd
 800538c:	20001440 	.word	0x20001440
 8005390:	000f4240 	.word	0x000f4240
 8005394:	00000000 	.word	0x00000000

08005398 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 800539e:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <CascadeControl_Step+0xd8>)
 80053a0:	ed93 7a00 	vldr	s14, [r3]
 80053a4:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <CascadeControl_Step+0xdc>)
 80053a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80053aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <CascadeControl_Step+0xe0>)
 80053b0:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80053b4:	4b31      	ldr	r3, [pc, #196]	@ (800547c <CascadeControl_Step+0xe4>)
 80053b6:	ed93 7a00 	vldr	s14, [r3]
 80053ba:	4b31      	ldr	r3, [pc, #196]	@ (8005480 <CascadeControl_Step+0xe8>)
 80053bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80053c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005484 <CascadeControl_Step+0xec>)
 80053c6:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <CascadeControl_Step+0xe0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fb f886 	bl	80004e0 <__aeabi_f2d>
 80053d4:	a324      	add	r3, pc, #144	@ (adr r3, 8005468 <CascadeControl_Step+0xd0>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f7fb f8d9 	bl	8000590 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	f7fb fb8d 	bl	8000b04 <__aeabi_d2f>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a26      	ldr	r2, [pc, #152]	@ (8005488 <CascadeControl_Step+0xf0>)
 80053ee:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 80053f0:	f7ff f89c 	bl	800452c <micros>
 80053f4:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 80053f8:	4b24      	ldr	r3, [pc, #144]	@ (800548c <CascadeControl_Step+0xf4>)
 80053fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005402:	4290      	cmp	r0, r2
 8005404:	eb71 0303 	sbcs.w	r3, r1, r3
 8005408:	d301      	bcc.n	800540e <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 800540a:	2300      	movs	r3, #0
 800540c:	e026      	b.n	800545c <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 800540e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005412:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8005416:	f143 0500 	adc.w	r5, r3, #0
 800541a:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <CascadeControl_Step+0xf4>)
 800541c:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 8005420:	f7ff fdb2 	bl	8004f88 <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 8005424:	f7ff fe4a 	bl	80050bc <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 8005428:	f7ff fbfe 	bl	8004c28 <Workspace_limit>
	Set_Motor(0, R_PWM);
 800542c:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <CascadeControl_Step+0xf8>)
 800542e:	edd3 7a00 	vldr	s15, [r3]
 8005432:	eeb0 0a67 	vmov.f32	s0, s15
 8005436:	2000      	movs	r0, #0
 8005438:	f7ff fb2c 	bl	8004a94 <Set_Motor>
	Set_Motor(1, P_PWM);
 800543c:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <CascadeControl_Step+0xfc>)
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb0 0a67 	vmov.f32	s0, s15
 8005446:	2001      	movs	r0, #1
 8005448:	f7ff fb24 	bl	8004a94 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 800544c:	f7ff ff46 	bl	80052dc <ToleranceCheck>
 8005450:	4603      	mov	r3, r0
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <CascadeControl_Step+0x100>)
 8005456:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8005458:	4b0f      	ldr	r3, [pc, #60]	@ (8005498 <CascadeControl_Step+0x100>)
 800545a:	781b      	ldrb	r3, [r3, #0]
//	return ToleranceCheck();
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bdb0      	pop	{r4, r5, r7, pc}
 8005464:	f3af 8000 	nop.w
 8005468:	1a63c1f8 	.word	0x1a63c1f8
 800546c:	404ca5dc 	.word	0x404ca5dc
 8005470:	20000bcc 	.word	0x20000bcc
 8005474:	20000b30 	.word	0x20000b30
 8005478:	20000bec 	.word	0x20000bec
 800547c:	20000bd0 	.word	0x20000bd0
 8005480:	20000b70 	.word	0x20000b70
 8005484:	20000bf0 	.word	0x20000bf0
 8005488:	20000ae0 	.word	0x20000ae0
 800548c:	20001448 	.word	0x20001448
 8005490:	20000bfc 	.word	0x20000bfc
 8005494:	20000c00 	.word	0x20000c00
 8005498:	20001360 	.word	0x20001360

0800549c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054a0:	b672      	cpsid	i
}
 80054a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <Error_Handler+0x8>

080054a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ae:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <HAL_MspInit+0x44>)
 80054b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b2:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <HAL_MspInit+0x44>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80054ba:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <HAL_MspInit+0x44>)
 80054bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <HAL_MspInit+0x44>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	4a08      	ldr	r2, [pc, #32]	@ (80054ec <HAL_MspInit+0x44>)
 80054cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <HAL_MspInit+0x44>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80054de:	f001 fa97 	bl	8006a10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000

080054f0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	@ 0x30
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f8:	f107 031c 	add.w	r3, r7, #28
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a32      	ldr	r2, [pc, #200]	@ (80055d8 <HAL_TIM_IC_MspInit+0xe8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d130      	bne.n	8005574 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005512:	4b32      	ldr	r3, [pc, #200]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005516:	4a31      	ldr	r2, [pc, #196]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800551c:	6613      	str	r3, [r2, #96]	@ 0x60
 800551e:	4b2f      	ldr	r3, [pc, #188]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005536:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005542:	2302      	movs	r3, #2
 8005544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	2302      	movs	r3, #2
 8005548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554e:	2300      	movs	r3, #0
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005552:	2302      	movs	r3, #2
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005556:	f107 031c 	add.w	r3, r7, #28
 800555a:	4619      	mov	r1, r3
 800555c:	4820      	ldr	r0, [pc, #128]	@ (80055e0 <HAL_TIM_IC_MspInit+0xf0>)
 800555e:	f000 ffe9 	bl	8006534 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	2019      	movs	r0, #25
 8005568:	f000 fc7d 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800556c:	2019      	movs	r0, #25
 800556e:	f000 fc94 	bl	8005e9a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005572:	e02d      	b.n	80055d0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557c:	d128      	bne.n	80055d0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800557e:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6593      	str	r3, [r2, #88]	@ 0x58
 800558a:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 8005598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559a:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055a2:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_TIM_IC_MspInit+0xec>)
 80055a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b2:	2302      	movs	r3, #2
 80055b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055be:	2301      	movs	r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c2:	f107 031c 	add.w	r3, r7, #28
 80055c6:	4619      	mov	r1, r3
 80055c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055cc:	f000 ffb2 	bl	8006534 <HAL_GPIO_Init>
}
 80055d0:	bf00      	nop
 80055d2:	3730      	adds	r7, #48	@ 0x30
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40021000 	.word	0x40021000
 80055e0:	48000800 	.word	0x48000800

080055e4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08c      	sub	sp, #48	@ 0x30
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 031c 	add.w	r3, r7, #28
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a37      	ldr	r2, [pc, #220]	@ (80056e0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d130      	bne.n	8005668 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005606:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	4a36      	ldr	r2, [pc, #216]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	6593      	str	r3, [r2, #88]	@ 0x58
 8005612:	4b34      	ldr	r3, [pc, #208]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800561e:	4b31      	ldr	r3, [pc, #196]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005622:	4a30      	ldr	r2, [pc, #192]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800562a:	4b2e      	ldr	r3, [pc, #184]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005636:	2330      	movs	r3, #48	@ 0x30
 8005638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	2302      	movs	r3, #2
 800563c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005642:	2300      	movs	r3, #0
 8005644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005646:	2302      	movs	r3, #2
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564a:	f107 031c 	add.w	r3, r7, #28
 800564e:	4619      	mov	r1, r3
 8005650:	4825      	ldr	r0, [pc, #148]	@ (80056e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8005652:	f000 ff6f 	bl	8006534 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	201d      	movs	r0, #29
 800565c:	f000 fc03 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005660:	201d      	movs	r0, #29
 8005662:	f000 fc1a 	bl	8005e9a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005666:	e036      	b.n	80056d6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1f      	ldr	r2, [pc, #124]	@ (80056ec <HAL_TIM_Encoder_MspInit+0x108>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d131      	bne.n	80056d6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005672:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005676:	4a1b      	ldr	r2, [pc, #108]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6593      	str	r3, [r2, #88]	@ 0x58
 800567e:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568a:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80056a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80056a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b0:	2300      	movs	r3, #0
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80056b4:	230a      	movs	r3, #10
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b8:	f107 031c 	add.w	r3, r7, #28
 80056bc:	4619      	mov	r1, r3
 80056be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056c2:	f000 ff37 	bl	8006534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	201e      	movs	r0, #30
 80056cc:	f000 fbcb 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80056d0:	201e      	movs	r0, #30
 80056d2:	f000 fbe2 	bl	8005e9a <HAL_NVIC_EnableIRQ>
}
 80056d6:	bf00      	nop
 80056d8:	3730      	adds	r7, #48	@ 0x30
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40021000 	.word	0x40021000
 80056e8:	48000400 	.word	0x48000400
 80056ec:	40000800 	.word	0x40000800

080056f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <HAL_TIM_Base_MspInit+0xc0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d114      	bne.n	800572c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005702:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005706:	4a2b      	ldr	r2, [pc, #172]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	6593      	str	r3, [r2, #88]	@ 0x58
 800570e:	4b29      	ldr	r3, [pc, #164]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800571a:	2200      	movs	r2, #0
 800571c:	2100      	movs	r1, #0
 800571e:	2032      	movs	r0, #50	@ 0x32
 8005720:	f000 fba1 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005724:	2032      	movs	r0, #50	@ 0x32
 8005726:	f000 fbb8 	bl	8005e9a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800572a:	e03c      	b.n	80057a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a21      	ldr	r2, [pc, #132]	@ (80057b8 <HAL_TIM_Base_MspInit+0xc8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005736:	4b1f      	ldr	r3, [pc, #124]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573a:	4a1e      	ldr	r2, [pc, #120]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 800573c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005740:	6613      	str	r3, [r2, #96]	@ 0x60
 8005742:	4b1c      	ldr	r3, [pc, #112]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	693b      	ldr	r3, [r7, #16]
}
 800574e:	e02a      	b.n	80057a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <HAL_TIM_Base_MspInit+0xcc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10c      	bne.n	8005774 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800575a:	4b16      	ldr	r3, [pc, #88]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 800575c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575e:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005764:	6613      	str	r3, [r2, #96]	@ 0x60
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	e018      	b.n	80057a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a11      	ldr	r2, [pc, #68]	@ (80057c0 <HAL_TIM_Base_MspInit+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d113      	bne.n	80057a6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005782:	4a0c      	ldr	r2, [pc, #48]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 8005784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005788:	6613      	str	r3, [r2, #96]	@ 0x60
 800578a:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <HAL_TIM_Base_MspInit+0xc4>)
 800578c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	2019      	movs	r0, #25
 800579c:	f000 fb63 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057a0:	2019      	movs	r0, #25
 80057a2:	f000 fb7a 	bl	8005e9a <HAL_NVIC_EnableIRQ>
}
 80057a6:	bf00      	nop
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40013400 	.word	0x40013400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400

080057c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a23      	ldr	r2, [pc, #140]	@ (8005870 <HAL_TIM_MspPostInit+0xac>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d11d      	bne.n	8005822 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e6:	4b23      	ldr	r3, [pc, #140]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 80057e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ea:	4a22      	ldr	r2, [pc, #136]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057f2:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 80057f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005804:	2302      	movs	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580c:	2300      	movs	r3, #0
 800580e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005810:	2304      	movs	r3, #4
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	4619      	mov	r1, r3
 800581a:	4817      	ldr	r0, [pc, #92]	@ (8005878 <HAL_TIM_MspPostInit+0xb4>)
 800581c:	f000 fe8a 	bl	8006534 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005820:	e021      	b.n	8005866 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a15      	ldr	r2, [pc, #84]	@ (800587c <HAL_TIM_MspPostInit+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d11c      	bne.n	8005866 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582c:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	4a10      	ldr	r2, [pc, #64]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 8005832:	f043 0302 	orr.w	r3, r3, #2
 8005836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005838:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <HAL_TIM_MspPostInit+0xb0>)
 800583a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005844:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584a:	2302      	movs	r3, #2
 800584c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005852:	2300      	movs	r3, #0
 8005854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005856:	2301      	movs	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585a:	f107 0314 	add.w	r3, r7, #20
 800585e:	4619      	mov	r1, r3
 8005860:	4807      	ldr	r0, [pc, #28]	@ (8005880 <HAL_TIM_MspPostInit+0xbc>)
 8005862:	f000 fe67 	bl	8006534 <HAL_GPIO_Init>
}
 8005866:	bf00      	nop
 8005868:	3728      	adds	r7, #40	@ 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40013400 	.word	0x40013400
 8005874:	40021000 	.word	0x40021000
 8005878:	48000800 	.word	0x48000800
 800587c:	40014000 	.word	0x40014000
 8005880:	48000400 	.word	0x48000400

08005884 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b09e      	sub	sp, #120	@ 0x78
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	2254      	movs	r2, #84	@ 0x54
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f006 fcc7 	bl	800c238 <memset>
  if(huart->Instance==USART2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4d      	ldr	r2, [pc, #308]	@ (80059e4 <HAL_UART_MspInit+0x160>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	f040 8092 	bne.w	80059da <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80058b6:	2302      	movs	r3, #2
 80058b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058be:	f107 0310 	add.w	r3, r7, #16
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fde2 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80058ce:	f7ff fde5 	bl	800549c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058d2:	4b45      	ldr	r3, [pc, #276]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	4a44      	ldr	r2, [pc, #272]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80058de:	4b42      	ldr	r3, [pc, #264]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ea:	4b3f      	ldr	r3, [pc, #252]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058f6:	4b3c      	ldr	r3, [pc, #240]	@ (80059e8 <HAL_UART_MspInit+0x164>)
 80058f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005902:	230c      	movs	r3, #12
 8005904:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005906:	2302      	movs	r3, #2
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2300      	movs	r3, #0
 800590c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800590e:	2300      	movs	r3, #0
 8005910:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005912:	2307      	movs	r3, #7
 8005914:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005916:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005920:	f000 fe08 	bl	8006534 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005924:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005926:	4a32      	ldr	r2, [pc, #200]	@ (80059f0 <HAL_UART_MspInit+0x16c>)
 8005928:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800592a:	4b30      	ldr	r3, [pc, #192]	@ (80059ec <HAL_UART_MspInit+0x168>)
 800592c:	221a      	movs	r2, #26
 800592e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005930:	4b2e      	ldr	r3, [pc, #184]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005936:	4b2d      	ldr	r3, [pc, #180]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005938:	2200      	movs	r2, #0
 800593a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800593c:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <HAL_UART_MspInit+0x168>)
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005942:	4b2a      	ldr	r3, [pc, #168]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005944:	2200      	movs	r2, #0
 8005946:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005948:	4b28      	ldr	r3, [pc, #160]	@ (80059ec <HAL_UART_MspInit+0x168>)
 800594a:	2200      	movs	r2, #0
 800594c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800594e:	4b27      	ldr	r3, [pc, #156]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005950:	2200      	movs	r2, #0
 8005952:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005954:	4b25      	ldr	r3, [pc, #148]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005956:	2200      	movs	r2, #0
 8005958:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800595a:	4824      	ldr	r0, [pc, #144]	@ (80059ec <HAL_UART_MspInit+0x168>)
 800595c:	f000 fab8 	bl	8005ed0 <HAL_DMA_Init>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005966:	f7ff fd99 	bl	800549c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1f      	ldr	r2, [pc, #124]	@ (80059ec <HAL_UART_MspInit+0x168>)
 800596e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005972:	4a1e      	ldr	r2, [pc, #120]	@ (80059ec <HAL_UART_MspInit+0x168>)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005978:	4b1e      	ldr	r3, [pc, #120]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 800597a:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <HAL_UART_MspInit+0x174>)
 800597c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 8005980:	221b      	movs	r2, #27
 8005982:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 8005986:	2210      	movs	r2, #16
 8005988:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800598a:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 800598c:	2200      	movs	r2, #0
 800598e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005990:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 8005992:	2280      	movs	r2, #128	@ 0x80
 8005994:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005996:	4b17      	ldr	r3, [pc, #92]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 8005998:	2200      	movs	r2, #0
 800599a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800599c:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 800599e:	2200      	movs	r2, #0
 80059a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059a8:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80059ae:	4811      	ldr	r0, [pc, #68]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 80059b0:	f000 fa8e 	bl	8005ed0 <HAL_DMA_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80059ba:	f7ff fd6f 	bl	800549c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a0c      	ldr	r2, [pc, #48]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 80059c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80059c4:	4a0b      	ldr	r2, [pc, #44]	@ (80059f4 <HAL_UART_MspInit+0x170>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059ca:	2200      	movs	r2, #0
 80059cc:	2100      	movs	r1, #0
 80059ce:	2026      	movs	r0, #38	@ 0x26
 80059d0:	f000 fa49 	bl	8005e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059d4:	2026      	movs	r0, #38	@ 0x26
 80059d6:	f000 fa60 	bl	8005e9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80059da:	bf00      	nop
 80059dc:	3778      	adds	r7, #120	@ 0x78
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40004400 	.word	0x40004400
 80059e8:	40021000 	.word	0x40021000
 80059ec:	20000a14 	.word	0x20000a14
 80059f0:	40020008 	.word	0x40020008
 80059f4:	20000a74 	.word	0x20000a74
 80059f8:	4002001c 	.word	0x4002001c

080059fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <NMI_Handler+0x4>

08005a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <HardFault_Handler+0x4>

08005a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a10:	bf00      	nop
 8005a12:	e7fd      	b.n	8005a10 <MemManage_Handler+0x4>

08005a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <BusFault_Handler+0x4>

08005a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <UsageFault_Handler+0x4>

08005a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a52:	f000 f90f 	bl	8005c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f000 ff1a 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a6c:	2004      	movs	r0, #4
 8005a6e:	f000 ff13 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005a7a:	2008      	movs	r0, #8
 8005a7c:	f000 ff0c 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005a88:	4802      	ldr	r0, [pc, #8]	@ (8005a94 <DMA1_Channel1_IRQHandler+0x10>)
 8005a8a:	f000 fc04 	bl	8006296 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000a14 	.word	0x20000a14

08005a98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005a9c:	4802      	ldr	r0, [pc, #8]	@ (8005aa8 <DMA1_Channel2_IRQHandler+0x10>)
 8005a9e:	f000 fbfa 	bl	8006296 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000a74 	.word	0x20000a74

08005aac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005ab0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005ab4:	f000 fef0 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005ab8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005abc:	f000 feec 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ac0:	bf00      	nop
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ac8:	4803      	ldr	r0, [pc, #12]	@ (8005ad8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005aca:	f002 fd99 	bl	8008600 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005ace:	4803      	ldr	r0, [pc, #12]	@ (8005adc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005ad0:	f002 fd96 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005ad4:	bf00      	nop
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200002e8 	.word	0x200002e8
 8005adc:	2000087c 	.word	0x2000087c

08005ae0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ae4:	4802      	ldr	r0, [pc, #8]	@ (8005af0 <TIM3_IRQHandler+0x10>)
 8005ae6:	f002 fd8b 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000480 	.word	0x20000480

08005af4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005af8:	4802      	ldr	r0, [pc, #8]	@ (8005b04 <TIM4_IRQHandler+0x10>)
 8005afa:	f002 fd81 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	2000054c 	.word	0x2000054c

08005b08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b0c:	4802      	ldr	r0, [pc, #8]	@ (8005b18 <USART2_IRQHandler+0x10>)
 8005b0e:	f004 fe33 	bl	800a778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000948 	.word	0x20000948

08005b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005b20:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005b24:	f000 feb8 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005b28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005b2c:	f000 feb4 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005b30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b34:	f000 feb0 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005b38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005b3c:	f000 feac 	bl	8006898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005b48:	4802      	ldr	r0, [pc, #8]	@ (8005b54 <TIM5_IRQHandler+0x10>)
 8005b4a:	f002 fd59 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000618 	.word	0x20000618

08005b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <SystemInit+0x20>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	4a05      	ldr	r2, [pc, #20]	@ (8005b78 <SystemInit+0x20>)
 8005b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b7c:	480d      	ldr	r0, [pc, #52]	@ (8005bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005b80:	f7ff ffea 	bl	8005b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b84:	480c      	ldr	r0, [pc, #48]	@ (8005bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b86:	490d      	ldr	r1, [pc, #52]	@ (8005bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b88:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc0 <LoopForever+0xe>)
  movs r3, #0
 8005b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005b8c:	e002      	b.n	8005b94 <LoopCopyDataInit>

08005b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b92:	3304      	adds	r3, #4

08005b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b98:	d3f9      	bcc.n	8005b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8005bc8 <LoopForever+0x16>)
  movs r3, #0
 8005b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ba0:	e001      	b.n	8005ba6 <LoopFillZerobss>

08005ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ba4:	3204      	adds	r2, #4

08005ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ba8:	d3fb      	bcc.n	8005ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005baa:	f006 fb53 	bl	800c254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bae:	f7fc f92b 	bl	8001e08 <main>

08005bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8005bb2:	e7fe      	b.n	8005bb2 <LoopForever>
  ldr   r0, =_estack
 8005bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bbc:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8005bc0:	0801a298 	.word	0x0801a298
  ldr r2, =_sbss
 8005bc4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8005bc8:	2000158c 	.word	0x2000158c

08005bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bcc:	e7fe      	b.n	8005bcc <ADC1_2_IRQHandler>

08005bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bd8:	2003      	movs	r0, #3
 8005bda:	f000 f939 	bl	8005e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bde:	2000      	movs	r0, #0
 8005be0:	f000 f80e 	bl	8005c00 <HAL_InitTick>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	71fb      	strb	r3, [r7, #7]
 8005bee:	e001      	b.n	8005bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005bf0:	f7ff fc5a 	bl	80054a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c0c:	4b16      	ldr	r3, [pc, #88]	@ (8005c68 <HAL_InitTick+0x68>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d022      	beq.n	8005c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c14:	4b15      	ldr	r3, [pc, #84]	@ (8005c6c <HAL_InitTick+0x6c>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <HAL_InitTick+0x68>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f944 	bl	8005eb6 <HAL_SYSTICK_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d809      	bhi.n	8005c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	f000 f910 	bl	8005e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c46:	4a0a      	ldr	r2, [pc, #40]	@ (8005c70 <HAL_InitTick+0x70>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e007      	b.n	8005c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e004      	b.n	8005c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e001      	b.n	8005c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000270 	.word	0x20000270
 8005c6c:	20000268 	.word	0x20000268
 8005c70:	2000026c 	.word	0x2000026c

08005c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c78:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <HAL_IncTick+0x1c>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_IncTick+0x20>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4413      	add	r3, r2
 8005c82:	4a03      	ldr	r2, [pc, #12]	@ (8005c90 <HAL_IncTick+0x1c>)
 8005c84:	6013      	str	r3, [r2, #0]
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20001450 	.word	0x20001450
 8005c94:	20000270 	.word	0x20000270

08005c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	@ (8005cac <HAL_GetTick+0x14>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20001450 	.word	0x20001450

08005cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ce2:	4a04      	ldr	r2, [pc, #16]	@ (8005cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	60d3      	str	r3, [r2, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cfc:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <__NVIC_GetPriorityGrouping+0x18>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	f003 0307 	and.w	r3, r3, #7
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	e000ed00 	.word	0xe000ed00

08005d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db0b      	blt.n	8005d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	4907      	ldr	r1, [pc, #28]	@ (8005d4c <__NVIC_EnableIRQ+0x38>)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2001      	movs	r0, #1
 8005d36:	fa00 f202 	lsl.w	r2, r0, r2
 8005d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000e100 	.word	0xe000e100

08005d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	6039      	str	r1, [r7, #0]
 8005d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	db0a      	blt.n	8005d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	490c      	ldr	r1, [pc, #48]	@ (8005d9c <__NVIC_SetPriority+0x4c>)
 8005d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6e:	0112      	lsls	r2, r2, #4
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	440b      	add	r3, r1
 8005d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d78:	e00a      	b.n	8005d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4908      	ldr	r1, [pc, #32]	@ (8005da0 <__NVIC_SetPriority+0x50>)
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	3b04      	subs	r3, #4
 8005d88:	0112      	lsls	r2, r2, #4
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	761a      	strb	r2, [r3, #24]
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	e000e100 	.word	0xe000e100
 8005da0:	e000ed00 	.word	0xe000ed00

08005da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f1c3 0307 	rsb	r3, r3, #7
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	bf28      	it	cs
 8005dc2:	2304      	movcs	r3, #4
 8005dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d902      	bls.n	8005dd4 <NVIC_EncodePriority+0x30>
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3b03      	subs	r3, #3
 8005dd2:	e000      	b.n	8005dd6 <NVIC_EncodePriority+0x32>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43da      	mvns	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	401a      	ands	r2, r3
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dec:	f04f 31ff 	mov.w	r1, #4294967295
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	43d9      	mvns	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dfc:	4313      	orrs	r3, r2
         );
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3724      	adds	r7, #36	@ 0x24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e1c:	d301      	bcc.n	8005e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e00f      	b.n	8005e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e22:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <SysTick_Config+0x40>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e2a:	210f      	movs	r1, #15
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	f7ff ff8e 	bl	8005d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <SysTick_Config+0x40>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e3a:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <SysTick_Config+0x40>)
 8005e3c:	2207      	movs	r2, #7
 8005e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	e000e010 	.word	0xe000e010

08005e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff29 	bl	8005cb0 <__NVIC_SetPriorityGrouping>
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b086      	sub	sp, #24
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e74:	f7ff ff40 	bl	8005cf8 <__NVIC_GetPriorityGrouping>
 8005e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f7ff ff90 	bl	8005da4 <NVIC_EncodePriority>
 8005e84:	4602      	mov	r2, r0
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff5f 	bl	8005d50 <__NVIC_SetPriority>
}
 8005e92:	bf00      	nop
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff33 	bl	8005d14 <__NVIC_EnableIRQ>
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ffa4 	bl	8005e0c <SysTick_Config>
 8005ec4:	4603      	mov	r3, r0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e08d      	b.n	8005ffe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b47      	ldr	r3, [pc, #284]	@ (8006008 <HAL_DMA_Init+0x138>)
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d80f      	bhi.n	8005f0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b45      	ldr	r3, [pc, #276]	@ (800600c <HAL_DMA_Init+0x13c>)
 8005ef6:	4413      	add	r3, r2
 8005ef8:	4a45      	ldr	r2, [pc, #276]	@ (8006010 <HAL_DMA_Init+0x140>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	009a      	lsls	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a42      	ldr	r2, [pc, #264]	@ (8006014 <HAL_DMA_Init+0x144>)
 8005f0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f0c:	e00e      	b.n	8005f2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b40      	ldr	r3, [pc, #256]	@ (8006018 <HAL_DMA_Init+0x148>)
 8005f16:	4413      	add	r3, r2
 8005f18:	4a3d      	ldr	r2, [pc, #244]	@ (8006010 <HAL_DMA_Init+0x140>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a3c      	ldr	r2, [pc, #240]	@ (800601c <HAL_DMA_Init+0x14c>)
 8005f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa76 	bl	8006470 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f8c:	d102      	bne.n	8005f94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fa8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_DMA_Init+0x104>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d80c      	bhi.n	8005fd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa96 	bl	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	e008      	b.n	8005fe6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40020407 	.word	0x40020407
 800600c:	bffdfff8 	.word	0xbffdfff8
 8006010:	cccccccd 	.word	0xcccccccd
 8006014:	40020000 	.word	0x40020000
 8006018:	bffdfbf8 	.word	0xbffdfbf8
 800601c:	40020400 	.word	0x40020400

08006020 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_DMA_Start_IT+0x20>
 800603c:	2302      	movs	r3, #2
 800603e:	e066      	b.n	800610e <HAL_DMA_Start_IT+0xee>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d155      	bne.n	8006100 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f9bb 	bl	80063f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 020e 	orr.w	r2, r2, #14
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e00f      	b.n	80060b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0204 	bic.w	r2, r2, #4
 80060a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 020a 	orr.w	r2, r2, #10
 80060b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e005      	b.n	800610c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006108:	2302      	movs	r3, #2
 800610a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800610c:	7dfb      	ldrb	r3, [r7, #23]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d005      	beq.n	800613a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
 8006138:	e037      	b.n	80061aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 020e 	bic.w	r2, r2, #14
 8006148:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006158:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f003 021f 	and.w	r2, r3, #31
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f202 	lsl.w	r2, r1, r2
 800617c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006186:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800619e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80061a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d00d      	beq.n	80061fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2204      	movs	r2, #4
 80061e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	e047      	b.n	800628c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020e 	bic.w	r2, r2, #14
 800620a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800622a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f202 	lsl.w	r2, r1, r2
 800623e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006248:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006260:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800626a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
    }
  }
  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2204      	movs	r2, #4
 80062b8:	409a      	lsls	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d026      	beq.n	8006310 <HAL_DMA_IRQHandler+0x7a>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d021      	beq.n	8006310 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0204 	bic.w	r2, r2, #4
 80062e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f003 021f 	and.w	r2, r3, #31
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	2104      	movs	r1, #4
 80062f8:	fa01 f202 	lsl.w	r2, r1, r2
 80062fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d071      	beq.n	80063ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800630e:	e06c      	b.n	80063ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2202      	movs	r2, #2
 800631a:	409a      	lsls	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02e      	beq.n	8006382 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d029      	beq.n	8006382 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 020a 	bic.w	r2, r2, #10
 800634a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006358:	f003 021f 	and.w	r2, r3, #31
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	2102      	movs	r1, #2
 8006362:	fa01 f202 	lsl.w	r2, r1, r2
 8006366:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d038      	beq.n	80063ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006380:	e033      	b.n	80063ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2208      	movs	r2, #8
 800638c:	409a      	lsls	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02a      	beq.n	80063ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d025      	beq.n	80063ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 020e 	bic.w	r2, r2, #14
 80063ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b4:	f003 021f 	and.w	r2, r3, #31
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f202 	lsl.w	r2, r1, r2
 80063c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
}
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800640a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006422:	f003 021f 	and.w	r2, r3, #31
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f202 	lsl.w	r2, r1, r2
 8006430:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b10      	cmp	r3, #16
 8006440:	d108      	bne.n	8006454 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006452:	e007      	b.n	8006464 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	60da      	str	r2, [r3, #12]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	4b16      	ldr	r3, [pc, #88]	@ (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006480:	429a      	cmp	r2, r3
 8006482:	d802      	bhi.n	800648a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006484:	4b15      	ldr	r3, [pc, #84]	@ (80064dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e001      	b.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800648c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3b08      	subs	r3, #8
 800649a:	4a12      	ldr	r2, [pc, #72]	@ (80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a0b      	ldr	r2, [pc, #44]	@ (80064e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80064ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2201      	movs	r2, #1
 80064c4:	409a      	lsls	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40020407 	.word	0x40020407
 80064dc:	40020800 	.word	0x40020800
 80064e0:	40020820 	.word	0x40020820
 80064e4:	cccccccd 	.word	0xcccccccd
 80064e8:	40020880 	.word	0x40020880

080064ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a08      	ldr	r2, [pc, #32]	@ (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800650e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b01      	subs	r3, #1
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	1000823f 	.word	0x1000823f
 8006530:	40020940 	.word	0x40020940

08006534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006542:	e15a      	b.n	80067fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	2101      	movs	r1, #1
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 814c 	beq.w	80067f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d005      	beq.n	8006574 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006570:	2b02      	cmp	r3, #2
 8006572:	d130      	bne.n	80065d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	2203      	movs	r2, #3
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065aa:	2201      	movs	r2, #1
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	f003 0201 	and.w	r2, r3, #1
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d017      	beq.n	8006612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	2203      	movs	r2, #3
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43db      	mvns	r3, r3
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4013      	ands	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d123      	bne.n	8006666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	08da      	lsrs	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3208      	adds	r2, #8
 8006626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	220f      	movs	r2, #15
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	08da      	lsrs	r2, r3, #3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3208      	adds	r2, #8
 8006660:	6939      	ldr	r1, [r7, #16]
 8006662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	2203      	movs	r2, #3
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4013      	ands	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f003 0203 	and.w	r2, r3, #3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80a6 	beq.w	80067f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006818 <HAL_GPIO_Init+0x2e4>)
 80066aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006818 <HAL_GPIO_Init+0x2e4>)
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80066b4:	4b58      	ldr	r3, [pc, #352]	@ (8006818 <HAL_GPIO_Init+0x2e4>)
 80066b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066c0:	4a56      	ldr	r2, [pc, #344]	@ (800681c <HAL_GPIO_Init+0x2e8>)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	3302      	adds	r3, #2
 80066c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	220f      	movs	r2, #15
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4013      	ands	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066ea:	d01f      	beq.n	800672c <HAL_GPIO_Init+0x1f8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006820 <HAL_GPIO_Init+0x2ec>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d019      	beq.n	8006728 <HAL_GPIO_Init+0x1f4>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006824 <HAL_GPIO_Init+0x2f0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_GPIO_Init+0x1f0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006828 <HAL_GPIO_Init+0x2f4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00d      	beq.n	8006720 <HAL_GPIO_Init+0x1ec>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a49      	ldr	r2, [pc, #292]	@ (800682c <HAL_GPIO_Init+0x2f8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <HAL_GPIO_Init+0x1e8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a48      	ldr	r2, [pc, #288]	@ (8006830 <HAL_GPIO_Init+0x2fc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_GPIO_Init+0x1e4>
 8006714:	2305      	movs	r3, #5
 8006716:	e00a      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 8006718:	2306      	movs	r3, #6
 800671a:	e008      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 800671c:	2304      	movs	r3, #4
 800671e:	e006      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 8006720:	2303      	movs	r3, #3
 8006722:	e004      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 8006724:	2302      	movs	r3, #2
 8006726:	e002      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_GPIO_Init+0x1fa>
 800672c:	2300      	movs	r3, #0
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	f002 0203 	and.w	r2, r2, #3
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	4093      	lsls	r3, r2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800673e:	4937      	ldr	r1, [pc, #220]	@ (800681c <HAL_GPIO_Init+0x2e8>)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800674c:	4b39      	ldr	r3, [pc, #228]	@ (8006834 <HAL_GPIO_Init+0x300>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	43db      	mvns	r3, r3
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4013      	ands	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006770:	4a30      	ldr	r2, [pc, #192]	@ (8006834 <HAL_GPIO_Init+0x300>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006776:	4b2f      	ldr	r3, [pc, #188]	@ (8006834 <HAL_GPIO_Init+0x300>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	43db      	mvns	r3, r3
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800679a:	4a26      	ldr	r2, [pc, #152]	@ (8006834 <HAL_GPIO_Init+0x300>)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80067a0:	4b24      	ldr	r3, [pc, #144]	@ (8006834 <HAL_GPIO_Init+0x300>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <HAL_GPIO_Init+0x300>)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80067ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006834 <HAL_GPIO_Init+0x300>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4013      	ands	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067ee:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <HAL_GPIO_Init+0x300>)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3301      	adds	r3, #1
 80067f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	f47f ae9d 	bne.w	8006544 <HAL_GPIO_Init+0x10>
  }
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40021000 	.word	0x40021000
 800681c:	40010000 	.word	0x40010000
 8006820:	48000400 	.word	0x48000400
 8006824:	48000800 	.word	0x48000800
 8006828:	48000c00 	.word	0x48000c00
 800682c:	48001000 	.word	0x48001000
 8006830:	48001400 	.word	0x48001400
 8006834:	40010400 	.word	0x40010400

08006838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e001      	b.n	800685a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006878:	787b      	ldrb	r3, [r7, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800687e:	887a      	ldrh	r2, [r7, #2]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006884:	e002      	b.n	800688c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006886:	887a      	ldrh	r2, [r7, #2]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068a2:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068ae:	4a05      	ldr	r2, [pc, #20]	@ (80068c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fd fd5a 	bl	8004370 <HAL_GPIO_EXTI_Callback>
  }
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40010400 	.word	0x40010400

080068c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d141      	bne.n	800695a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e2:	d131      	bne.n	8006948 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068e4:	4b47      	ldr	r3, [pc, #284]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ea:	4a46      	ldr	r2, [pc, #280]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068f4:	4b43      	ldr	r3, [pc, #268]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068fc:	4a41      	ldr	r2, [pc, #260]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006902:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006904:	4b40      	ldr	r3, [pc, #256]	@ (8006a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2232      	movs	r2, #50	@ 0x32
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	0c9b      	lsrs	r3, r3, #18
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800691a:	e002      	b.n	8006922 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3b01      	subs	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006922:	4b38      	ldr	r3, [pc, #224]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692e:	d102      	bne.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f2      	bne.n	800691c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006936:	4b33      	ldr	r3, [pc, #204]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006942:	d158      	bne.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e057      	b.n	80069f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006948:	4b2e      	ldr	r3, [pc, #184]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006958:	e04d      	b.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006960:	d141      	bne.n	80069e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006962:	4b28      	ldr	r3, [pc, #160]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800696a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800696e:	d131      	bne.n	80069d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006970:	4b24      	ldr	r3, [pc, #144]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006976:	4a23      	ldr	r2, [pc, #140]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800697c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006980:	4b20      	ldr	r3, [pc, #128]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006988:	4a1e      	ldr	r2, [pc, #120]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800698e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006990:	4b1d      	ldr	r3, [pc, #116]	@ (8006a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2232      	movs	r2, #50	@ 0x32
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	4a1c      	ldr	r2, [pc, #112]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	0c9b      	lsrs	r3, r3, #18
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069a6:	e002      	b.n	80069ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ae:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ba:	d102      	bne.n	80069c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f2      	bne.n	80069a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ce:	d112      	bne.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e011      	b.n	80069f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069da:	4a0a      	ldr	r2, [pc, #40]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069e4:	e007      	b.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069ee:	4a05      	ldr	r2, [pc, #20]	@ (8006a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40007000 	.word	0x40007000
 8006a08:	20000268 	.word	0x20000268
 8006a0c:	431bde83 	.word	0x431bde83

08006a10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006a14:	4b05      	ldr	r3, [pc, #20]	@ (8006a2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4a04      	ldr	r2, [pc, #16]	@ (8006a2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a1e:	6093      	str	r3, [r2, #8]
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40007000 	.word	0x40007000

08006a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e2fe      	b.n	8007040 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d075      	beq.n	8006b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a4e:	4b97      	ldr	r3, [pc, #604]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a58:	4b94      	ldr	r3, [pc, #592]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	d102      	bne.n	8006a6e <HAL_RCC_OscConfig+0x3e>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d002      	beq.n	8006a74 <HAL_RCC_OscConfig+0x44>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d10b      	bne.n	8006a8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	4b8d      	ldr	r3, [pc, #564]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d05b      	beq.n	8006b38 <HAL_RCC_OscConfig+0x108>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d157      	bne.n	8006b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e2d9      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x74>
 8006a96:	4b85      	ldr	r3, [pc, #532]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a84      	ldr	r2, [pc, #528]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e01d      	b.n	8006ae0 <HAL_RCC_OscConfig+0xb0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x98>
 8006aae:	4b7f      	ldr	r3, [pc, #508]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4b7c      	ldr	r3, [pc, #496]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a7b      	ldr	r2, [pc, #492]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e00b      	b.n	8006ae0 <HAL_RCC_OscConfig+0xb0>
 8006ac8:	4b78      	ldr	r3, [pc, #480]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a77      	ldr	r2, [pc, #476]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b75      	ldr	r3, [pc, #468]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a74      	ldr	r2, [pc, #464]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d013      	beq.n	8006b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7ff f8d6 	bl	8005c98 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7ff f8d2 	bl	8005c98 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e29e      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b02:	4b6a      	ldr	r3, [pc, #424]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0xc0>
 8006b0e:	e014      	b.n	8006b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7ff f8c2 	bl	8005c98 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b18:	f7ff f8be 	bl	8005c98 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	@ 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e28a      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b2a:	4b60      	ldr	r3, [pc, #384]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0xe8>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d075      	beq.n	8006c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b46:	4b59      	ldr	r3, [pc, #356]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b50:	4b56      	ldr	r3, [pc, #344]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCC_OscConfig+0x136>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d002      	beq.n	8006b6c <HAL_RCC_OscConfig+0x13c>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d11f      	bne.n	8006bac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_RCC_OscConfig+0x154>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e25d      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	4b49      	ldr	r3, [pc, #292]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	4946      	ldr	r1, [pc, #280]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b98:	4b45      	ldr	r3, [pc, #276]	@ (8006cb0 <HAL_RCC_OscConfig+0x280>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff f82f 	bl	8005c00 <HAL_InitTick>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d043      	beq.n	8006c30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e249      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d023      	beq.n	8006bfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7ff f86a 	bl	8005c98 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc8:	f7ff f866 	bl	8005c98 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e232      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bda:	4b34      	ldr	r3, [pc, #208]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be6:	4b31      	ldr	r3, [pc, #196]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	492d      	ldr	r1, [pc, #180]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	604b      	str	r3, [r1, #4]
 8006bfa:	e01a      	b.n	8006c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7ff f846 	bl	8005c98 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c10:	f7ff f842 	bl	8005c98 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e20e      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c22:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x1e0>
 8006c2e:	e000      	b.n	8006c32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d041      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01c      	beq.n	8006c80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c46:	4b19      	ldr	r3, [pc, #100]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4c:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c56:	f7ff f81f 	bl	8005c98 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5e:	f7ff f81b 	bl	8005c98 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e1e7      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c70:	4b0e      	ldr	r3, [pc, #56]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0ef      	beq.n	8006c5e <HAL_RCC_OscConfig+0x22e>
 8006c7e:	e020      	b.n	8006cc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c80:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c86:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <HAL_RCC_OscConfig+0x27c>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7ff f802 	bl	8005c98 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c96:	e00d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fe fffe 	bl	8005c98 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d906      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e1ca      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
 8006caa:	bf00      	nop
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	2000026c 	.word	0x2000026c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1ea      	bne.n	8006c98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80a6 	beq.w	8006e1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cd4:	4b84      	ldr	r3, [pc, #528]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x2b4>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCC_OscConfig+0x2b6>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	4b7f      	ldr	r3, [pc, #508]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d02:	2301      	movs	r3, #1
 8006d04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d06:	4b79      	ldr	r3, [pc, #484]	@ (8006eec <HAL_RCC_OscConfig+0x4bc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d118      	bne.n	8006d44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d12:	4b76      	ldr	r3, [pc, #472]	@ (8006eec <HAL_RCC_OscConfig+0x4bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a75      	ldr	r2, [pc, #468]	@ (8006eec <HAL_RCC_OscConfig+0x4bc>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d1e:	f7fe ffbb 	bl	8005c98 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d26:	f7fe ffb7 	bl	8005c98 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e183      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d38:	4b6c      	ldr	r3, [pc, #432]	@ (8006eec <HAL_RCC_OscConfig+0x4bc>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f0      	beq.n	8006d26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d108      	bne.n	8006d5e <HAL_RCC_OscConfig+0x32e>
 8006d4c:	4b66      	ldr	r3, [pc, #408]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d52:	4a65      	ldr	r2, [pc, #404]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d5c:	e024      	b.n	8006da8 <HAL_RCC_OscConfig+0x378>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d110      	bne.n	8006d88 <HAL_RCC_OscConfig+0x358>
 8006d66:	4b60      	ldr	r3, [pc, #384]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d6e:	f043 0304 	orr.w	r3, r3, #4
 8006d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d76:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d86:	e00f      	b.n	8006da8 <HAL_RCC_OscConfig+0x378>
 8006d88:	4b57      	ldr	r3, [pc, #348]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8e:	4a56      	ldr	r2, [pc, #344]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d98:	4b53      	ldr	r3, [pc, #332]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9e:	4a52      	ldr	r2, [pc, #328]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d016      	beq.n	8006dde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fe ff72 	bl	8005c98 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fe ff6e 	bl	8005c98 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e138      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dce:	4b46      	ldr	r3, [pc, #280]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ed      	beq.n	8006db8 <HAL_RCC_OscConfig+0x388>
 8006ddc:	e015      	b.n	8006e0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dde:	f7fe ff5b 	bl	8005c98 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fe ff57 	bl	8005c98 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e121      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ed      	bne.n	8006de6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e0a:	7ffb      	ldrb	r3, [r7, #31]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d105      	bne.n	8006e1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e10:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e14:	4a34      	ldr	r2, [pc, #208]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d03c      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01c      	beq.n	8006e6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e40:	f7fe ff2a 	bl	8005c98 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e48:	f7fe ff26 	bl	8005c98 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0f2      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0ef      	beq.n	8006e48 <HAL_RCC_OscConfig+0x418>
 8006e68:	e01b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7a:	f7fe ff0d 	bl	8005c98 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e82:	f7fe ff09 	bl	8005c98 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0d5      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e94:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ef      	bne.n	8006e82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80c9 	beq.w	800703e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eac:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b0c      	cmp	r3, #12
 8006eb6:	f000 8083 	beq.w	8006fc0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d15e      	bne.n	8006f80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec2:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <HAL_RCC_OscConfig+0x4b8>)
 8006ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ece:	f7fe fee3 	bl	8005c98 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ed4:	e00c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed6:	f7fe fedf 	bl	8005c98 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d905      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0ab      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef0:	4b55      	ldr	r3, [pc, #340]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ec      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006efc:	4b52      	ldr	r3, [pc, #328]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	4b52      	ldr	r3, [pc, #328]	@ (800704c <HAL_RCC_OscConfig+0x61c>)
 8006f02:	4013      	ands	r3, r2
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6a11      	ldr	r1, [r2, #32]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f0c:	3a01      	subs	r2, #1
 8006f0e:	0112      	lsls	r2, r2, #4
 8006f10:	4311      	orrs	r1, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f16:	0212      	lsls	r2, r2, #8
 8006f18:	4311      	orrs	r1, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f1e:	0852      	lsrs	r2, r2, #1
 8006f20:	3a01      	subs	r2, #1
 8006f22:	0552      	lsls	r2, r2, #21
 8006f24:	4311      	orrs	r1, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f2a:	0852      	lsrs	r2, r2, #1
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	0652      	lsls	r2, r2, #25
 8006f30:	4311      	orrs	r1, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f36:	06d2      	lsls	r2, r2, #27
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	4943      	ldr	r1, [pc, #268]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b41      	ldr	r3, [pc, #260]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a40      	ldr	r2, [pc, #256]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a3d      	ldr	r2, [pc, #244]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fe fe9e 	bl	8005c98 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fe fe9a 	bl	8005c98 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e066      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f72:	4b35      	ldr	r3, [pc, #212]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x530>
 8006f7e:	e05e      	b.n	800703e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f80:	4b31      	ldr	r3, [pc, #196]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a30      	ldr	r2, [pc, #192]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7fe fe84 	bl	8005c98 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f94:	f7fe fe80 	bl	8005c98 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e04c      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa6:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006fb2:	4b25      	ldr	r3, [pc, #148]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	4924      	ldr	r1, [pc, #144]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006fb8:	4b25      	ldr	r3, [pc, #148]	@ (8007050 <HAL_RCC_OscConfig+0x620>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	60cb      	str	r3, [r1, #12]
 8006fbe:	e03e      	b.n	800703e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e039      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <HAL_RCC_OscConfig+0x618>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 0203 	and.w	r2, r3, #3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d12c      	bne.n	800703a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	3b01      	subs	r3, #1
 8006fec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d123      	bne.n	800703a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d11b      	bne.n	800703a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d113      	bne.n	800703a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	3b01      	subs	r3, #1
 8007020:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007022:	429a      	cmp	r2, r3
 8007024:	d109      	bne.n	800703a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	3b01      	subs	r3, #1
 8007034:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d001      	beq.n	800703e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40021000 	.word	0x40021000
 800704c:	019f800c 	.word	0x019f800c
 8007050:	feeefffc 	.word	0xfeeefffc

08007054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e11e      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800706c:	4b91      	ldr	r3, [pc, #580]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d910      	bls.n	800709c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b8e      	ldr	r3, [pc, #568]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 020f 	bic.w	r2, r3, #15
 8007082:	498c      	ldr	r1, [pc, #560]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b8a      	ldr	r3, [pc, #552]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e106      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d073      	beq.n	8007190 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d129      	bne.n	8007104 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070b0:	4b81      	ldr	r3, [pc, #516]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e0f4      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80070c0:	f000 f99e 	bl	8007400 <RCC_GetSysClockFreqFromPLLSource>
 80070c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4a7c      	ldr	r2, [pc, #496]	@ (80072bc <HAL_RCC_ClockConfig+0x268>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d93f      	bls.n	800714e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070ce:	4b7a      	ldr	r3, [pc, #488]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d033      	beq.n	800714e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d12f      	bne.n	800714e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070ee:	4b72      	ldr	r3, [pc, #456]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070f6:	4a70      	ldr	r2, [pc, #448]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80070f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070fe:	2380      	movs	r3, #128	@ 0x80
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e024      	b.n	800714e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d107      	bne.n	800711c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800710c:	4b6a      	ldr	r3, [pc, #424]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0c6      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711c:	4b66      	ldr	r3, [pc, #408]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0be      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800712c:	f000 f8ce 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 8007130:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4a61      	ldr	r2, [pc, #388]	@ (80072bc <HAL_RCC_ClockConfig+0x268>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d909      	bls.n	800714e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800713a:	4b5f      	ldr	r3, [pc, #380]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007142:	4a5d      	ldr	r2, [pc, #372]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 8007144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007148:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800714a:	2380      	movs	r3, #128	@ 0x80
 800714c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800714e:	4b5a      	ldr	r3, [pc, #360]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f023 0203 	bic.w	r2, r3, #3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4957      	ldr	r1, [pc, #348]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800715c:	4313      	orrs	r3, r2
 800715e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007160:	f7fe fd9a 	bl	8005c98 <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007166:	e00a      	b.n	800717e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007168:	f7fe fd96 	bl	8005c98 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e095      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717e:	4b4e      	ldr	r3, [pc, #312]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 020c 	and.w	r2, r3, #12
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	429a      	cmp	r2, r3
 800718e:	d1eb      	bne.n	8007168 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d023      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071a8:	4b43      	ldr	r3, [pc, #268]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4a42      	ldr	r2, [pc, #264]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80071c0:	4b3d      	ldr	r3, [pc, #244]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071c8:	4a3b      	ldr	r2, [pc, #236]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d0:	4b39      	ldr	r3, [pc, #228]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4936      	ldr	r1, [pc, #216]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	608b      	str	r3, [r1, #8]
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b80      	cmp	r3, #128	@ 0x80
 80071e8:	d105      	bne.n	80071f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80071ea:	4b33      	ldr	r3, [pc, #204]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	4a32      	ldr	r2, [pc, #200]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 80071f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071f6:	4b2f      	ldr	r3, [pc, #188]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d21d      	bcs.n	8007240 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007204:	4b2b      	ldr	r3, [pc, #172]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f023 020f 	bic.w	r2, r3, #15
 800720c:	4929      	ldr	r1, [pc, #164]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	4313      	orrs	r3, r2
 8007212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007214:	f7fe fd40 	bl	8005c98 <HAL_GetTick>
 8007218:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	e00a      	b.n	8007232 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800721c:	f7fe fd3c 	bl	8005c98 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e03b      	b.n	80072aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007232:	4b20      	ldr	r3, [pc, #128]	@ (80072b4 <HAL_RCC_ClockConfig+0x260>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d1ed      	bne.n	800721c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800724c:	4b1a      	ldr	r3, [pc, #104]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4917      	ldr	r1, [pc, #92]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800725a:	4313      	orrs	r3, r2
 800725c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800726a:	4b13      	ldr	r3, [pc, #76]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	490f      	ldr	r1, [pc, #60]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800727e:	f000 f825 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 8007282:	4602      	mov	r2, r0
 8007284:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <HAL_RCC_ClockConfig+0x264>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	490c      	ldr	r1, [pc, #48]	@ (80072c0 <HAL_RCC_ClockConfig+0x26c>)
 8007290:	5ccb      	ldrb	r3, [r1, r3]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	fa22 f303 	lsr.w	r3, r2, r3
 800729a:	4a0a      	ldr	r2, [pc, #40]	@ (80072c4 <HAL_RCC_ClockConfig+0x270>)
 800729c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800729e:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <HAL_RCC_ClockConfig+0x274>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fcac 	bl	8005c00 <HAL_InitTick>
 80072a8:	4603      	mov	r3, r0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40022000 	.word	0x40022000
 80072b8:	40021000 	.word	0x40021000
 80072bc:	04c4b400 	.word	0x04c4b400
 80072c0:	08019e40 	.word	0x08019e40
 80072c4:	20000268 	.word	0x20000268
 80072c8:	2000026c 	.word	0x2000026c

080072cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d102      	bne.n	80072e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072de:	4b2a      	ldr	r3, [pc, #168]	@ (8007388 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	e047      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80072e4:	4b27      	ldr	r3, [pc, #156]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d102      	bne.n	80072f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072f0:	4b26      	ldr	r3, [pc, #152]	@ (800738c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	e03e      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072f6:	4b23      	ldr	r3, [pc, #140]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b0c      	cmp	r3, #12
 8007300:	d136      	bne.n	8007370 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007302:	4b20      	ldr	r3, [pc, #128]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	091b      	lsrs	r3, r3, #4
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	3301      	adds	r3, #1
 8007318:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d10c      	bne.n	800733a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007320:	4a1a      	ldr	r2, [pc, #104]	@ (800738c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	4a16      	ldr	r2, [pc, #88]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800732a:	68d2      	ldr	r2, [r2, #12]
 800732c:	0a12      	lsrs	r2, r2, #8
 800732e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	617b      	str	r3, [r7, #20]
      break;
 8007338:	e00c      	b.n	8007354 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800733a:	4a13      	ldr	r2, [pc, #76]	@ (8007388 <HAL_RCC_GetSysClockFreq+0xbc>)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	4a10      	ldr	r2, [pc, #64]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007344:	68d2      	ldr	r2, [r2, #12]
 8007346:	0a12      	lsrs	r2, r2, #8
 8007348:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
      break;
 8007352:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007354:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	0e5b      	lsrs	r3, r3, #25
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	3301      	adds	r3, #1
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	e001      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007374:	693b      	ldr	r3, [r7, #16]
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000
 8007388:	00f42400 	.word	0x00f42400
 800738c:	016e3600 	.word	0x016e3600

08007390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007396:	681b      	ldr	r3, [r3, #0]
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20000268 	.word	0x20000268

080073a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073ac:	f7ff fff0 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073b0:	4602      	mov	r2, r0
 80073b2:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	4904      	ldr	r1, [pc, #16]	@ (80073d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40021000 	.word	0x40021000
 80073d0:	08019e50 	.word	0x08019e50

080073d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073d8:	f7ff ffda 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	0adb      	lsrs	r3, r3, #11
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	4904      	ldr	r1, [pc, #16]	@ (80073fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ea:	5ccb      	ldrb	r3, [r1, r3]
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40021000 	.word	0x40021000
 80073fc:	08019e50 	.word	0x08019e50

08007400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007406:	4b1e      	ldr	r3, [pc, #120]	@ (8007480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007410:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d10c      	bne.n	800743e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007424:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	fbb2 f3f3 	udiv	r3, r2, r3
 800742c:	4a14      	ldr	r2, [pc, #80]	@ (8007480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800742e:	68d2      	ldr	r2, [r2, #12]
 8007430:	0a12      	lsrs	r2, r2, #8
 8007432:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	617b      	str	r3, [r7, #20]
    break;
 800743c:	e00c      	b.n	8007458 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800743e:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	fbb2 f3f3 	udiv	r3, r2, r3
 8007446:	4a0e      	ldr	r2, [pc, #56]	@ (8007480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007448:	68d2      	ldr	r2, [r2, #12]
 800744a:	0a12      	lsrs	r2, r2, #8
 800744c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007450:	fb02 f303 	mul.w	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
    break;
 8007456:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007458:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	0e5b      	lsrs	r3, r3, #25
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	3301      	adds	r3, #1
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007472:	687b      	ldr	r3, [r7, #4]
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40021000 	.word	0x40021000
 8007484:	016e3600 	.word	0x016e3600
 8007488:	00f42400 	.word	0x00f42400

0800748c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007494:	2300      	movs	r3, #0
 8007496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007498:	2300      	movs	r3, #0
 800749a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8098 	beq.w	80075da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074aa:	2300      	movs	r3, #0
 80074ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ae:	4b43      	ldr	r3, [pc, #268]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ba:	4b40      	ldr	r3, [pc, #256]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074be:	4a3f      	ldr	r2, [pc, #252]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074c6:	4b3d      	ldr	r3, [pc, #244]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074d2:	2301      	movs	r3, #1
 80074d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074d6:	4b3a      	ldr	r3, [pc, #232]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a39      	ldr	r2, [pc, #228]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074e2:	f7fe fbd9 	bl	8005c98 <HAL_GetTick>
 80074e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074e8:	e009      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ea:	f7fe fbd5 	bl	8005c98 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d902      	bls.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	74fb      	strb	r3, [r7, #19]
        break;
 80074fc:	e005      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074fe:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0ef      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800750a:	7cfb      	ldrb	r3, [r7, #19]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d159      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007510:	4b2a      	ldr	r3, [pc, #168]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01e      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	429a      	cmp	r2, r3
 800752a:	d019      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800752c:	4b23      	ldr	r3, [pc, #140]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007538:	4b20      	ldr	r3, [pc, #128]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753e:	4a1f      	ldr	r2, [pc, #124]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007548:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	4a1b      	ldr	r2, [pc, #108]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007558:	4a18      	ldr	r2, [pc, #96]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756a:	f7fe fb95 	bl	8005c98 <HAL_GetTick>
 800756e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007570:	e00b      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7fe fb91 	bl	8005c98 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d902      	bls.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	74fb      	strb	r3, [r7, #19]
            break;
 8007588:	e006      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800758a:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0ec      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ac:	4903      	ldr	r1, [pc, #12]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80075b4:	e008      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	74bb      	strb	r3, [r7, #18]
 80075ba:	e005      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80075bc:	40021000 	.word	0x40021000
 80075c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	7cfb      	ldrb	r3, [r7, #19]
 80075c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c8:	7c7b      	ldrb	r3, [r7, #17]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d105      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ce:	4ba7      	ldr	r3, [pc, #668]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d2:	4aa6      	ldr	r2, [pc, #664]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075e6:	4ba1      	ldr	r3, [pc, #644]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f023 0203 	bic.w	r2, r3, #3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	499d      	ldr	r1, [pc, #628]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007608:	4b98      	ldr	r3, [pc, #608]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	f023 020c 	bic.w	r2, r3, #12
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	4995      	ldr	r1, [pc, #596]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800762a:	4b90      	ldr	r3, [pc, #576]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	498c      	ldr	r1, [pc, #560]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800764c:	4b87      	ldr	r3, [pc, #540]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	4984      	ldr	r1, [pc, #528]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800766e:	4b7f      	ldr	r3, [pc, #508]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	497b      	ldr	r1, [pc, #492]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007690:	4b76      	ldr	r3, [pc, #472]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	4973      	ldr	r1, [pc, #460]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076b2:	4b6e      	ldr	r3, [pc, #440]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	496a      	ldr	r1, [pc, #424]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076d4:	4b65      	ldr	r3, [pc, #404]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	4962      	ldr	r1, [pc, #392]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076f6:	4b5d      	ldr	r3, [pc, #372]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	4959      	ldr	r1, [pc, #356]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007718:	4b54      	ldr	r3, [pc, #336]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800771e:	f023 0203 	bic.w	r2, r3, #3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007726:	4951      	ldr	r1, [pc, #324]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800773a:	4b4c      	ldr	r3, [pc, #304]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007740:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007748:	4948      	ldr	r1, [pc, #288]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800775c:	4b43      	ldr	r3, [pc, #268]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007762:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	4940      	ldr	r1, [pc, #256]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800777a:	d105      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800777c:	4b3b      	ldr	r3, [pc, #236]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a3a      	ldr	r2, [pc, #232]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007786:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007794:	4b35      	ldr	r3, [pc, #212]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a2:	4932      	ldr	r1, [pc, #200]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b4:	4b2d      	ldr	r3, [pc, #180]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a2c      	ldr	r2, [pc, #176]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077be:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077cc:	4b27      	ldr	r3, [pc, #156]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	4924      	ldr	r1, [pc, #144]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ec:	4b1f      	ldr	r3, [pc, #124]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a1e      	ldr	r2, [pc, #120]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007804:	4b19      	ldr	r3, [pc, #100]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	4916      	ldr	r1, [pc, #88]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007822:	d105      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007824:	4b11      	ldr	r3, [pc, #68]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	4a10      	ldr	r2, [pc, #64]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d019      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800783c:	4b0b      	ldr	r3, [pc, #44]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	4908      	ldr	r1, [pc, #32]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784c:	4313      	orrs	r3, r2
 800784e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785a:	d109      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800785c:	4b03      	ldr	r3, [pc, #12]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	4a02      	ldr	r2, [pc, #8]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007866:	60d3      	str	r3, [r2, #12]
 8007868:	e002      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800786a:	bf00      	nop
 800786c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d015      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800787c:	4b29      	ldr	r3, [pc, #164]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788a:	4926      	ldr	r1, [pc, #152]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800789a:	d105      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800789c:	4b21      	ldr	r3, [pc, #132]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4a20      	ldr	r2, [pc, #128]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d015      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80078b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c2:	4918      	ldr	r1, [pc, #96]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d2:	d105      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078d4:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	4a12      	ldr	r2, [pc, #72]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d015      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fa:	490a      	ldr	r1, [pc, #40]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007906:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800790a:	d105      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a04      	ldr	r2, [pc, #16]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007916:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007918:	7cbb      	ldrb	r3, [r7, #18]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	40021000 	.word	0x40021000

08007928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e054      	b.n	80079e4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d111      	bne.n	800796a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 fb3c 	bl	8009fcc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a23      	ldr	r2, [pc, #140]	@ (80079ec <HAL_TIM_Base_Init+0xc4>)
 8007960:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f001 fc7b 	bl	8009278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	080056f1 	.word	0x080056f1

080079f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d001      	beq.n	8007a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e04c      	b.n	8007aa2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <HAL_TIM_Base_Start+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a22:	d01d      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	@ (8007ab4 <HAL_TIM_Base_Start+0xc4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	@ (8007ab8 <HAL_TIM_Base_Start+0xc8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <HAL_TIM_Base_Start+0xcc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <HAL_TIM_Base_Start+0xd0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac4 <HAL_TIM_Base_Start+0xd4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_Base_Start+0x70>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <HAL_TIM_Base_Start+0xd8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d115      	bne.n	8007a8c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <HAL_TIM_Base_Start+0xdc>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d015      	beq.n	8007a9e <HAL_TIM_Base_Start+0xae>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a78:	d011      	beq.n	8007a9e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	e008      	b.n	8007a9e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e000      	b.n	8007aa0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40015000 	.word	0x40015000
 8007acc:	00010007 	.word	0x00010007

08007ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e054      	b.n	8007b92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a26      	ldr	r2, [pc, #152]	@ (8007ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b12:	d01d      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a22      	ldr	r2, [pc, #136]	@ (8007ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a21      	ldr	r2, [pc, #132]	@ (8007ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bac <HAL_TIM_Base_Start_IT+0xdc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1e      	ldr	r2, [pc, #120]	@ (8007bb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d115      	bne.n	8007b7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	4b19      	ldr	r3, [pc, #100]	@ (8007bbc <HAL_TIM_Base_Start_IT+0xec>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d015      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b68:	d011      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7a:	e008      	b.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	e000      	b.n	8007b90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	40013400 	.word	0x40013400
 8007bb4:	40014000 	.word	0x40014000
 8007bb8:	40015000 	.word	0x40015000
 8007bbc:	00010007 	.word	0x00010007

08007bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e054      	b.n	8007c7c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d111      	bne.n	8007c02 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f002 f9f0 	bl	8009fcc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a23      	ldr	r2, [pc, #140]	@ (8007c84 <HAL_TIM_PWM_Init+0xc4>)
 8007bf8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f001 fb2f 	bl	8009278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	08007c89 	.word	0x08007c89

08007c88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <HAL_TIM_PWM_Start+0x24>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	e03c      	b.n	8007d3a <HAL_TIM_PWM_Start+0x9e>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d109      	bne.n	8007cda <HAL_TIM_PWM_Start+0x3e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	bf14      	ite	ne
 8007cd2:	2301      	movne	r3, #1
 8007cd4:	2300      	moveq	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	e02f      	b.n	8007d3a <HAL_TIM_PWM_Start+0x9e>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d109      	bne.n	8007cf4 <HAL_TIM_PWM_Start+0x58>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e022      	b.n	8007d3a <HAL_TIM_PWM_Start+0x9e>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b0c      	cmp	r3, #12
 8007cf8:	d109      	bne.n	8007d0e <HAL_TIM_PWM_Start+0x72>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	e015      	b.n	8007d3a <HAL_TIM_PWM_Start+0x9e>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d109      	bne.n	8007d28 <HAL_TIM_PWM_Start+0x8c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	bf14      	ite	ne
 8007d20:	2301      	movne	r3, #1
 8007d22:	2300      	moveq	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e008      	b.n	8007d3a <HAL_TIM_PWM_Start+0x9e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	bf14      	ite	ne
 8007d34:	2301      	movne	r3, #1
 8007d36:	2300      	moveq	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e0a6      	b.n	8007e90 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <HAL_TIM_PWM_Start+0xb6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d50:	e023      	b.n	8007d9a <HAL_TIM_PWM_Start+0xfe>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d104      	bne.n	8007d62 <HAL_TIM_PWM_Start+0xc6>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d60:	e01b      	b.n	8007d9a <HAL_TIM_PWM_Start+0xfe>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_PWM_Start+0xd6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d70:	e013      	b.n	8007d9a <HAL_TIM_PWM_Start+0xfe>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b0c      	cmp	r3, #12
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_PWM_Start+0xe6>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d80:	e00b      	b.n	8007d9a <HAL_TIM_PWM_Start+0xfe>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_PWM_Start+0xf6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d90:	e003      	b.n	8007d9a <HAL_TIM_PWM_Start+0xfe>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 f8ec 	bl	8009f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a3a      	ldr	r2, [pc, #232]	@ (8007e98 <HAL_TIM_PWM_Start+0x1fc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d018      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x148>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a39      	ldr	r2, [pc, #228]	@ (8007e9c <HAL_TIM_PWM_Start+0x200>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x148>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a37      	ldr	r2, [pc, #220]	@ (8007ea0 <HAL_TIM_PWM_Start+0x204>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x148>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a36      	ldr	r2, [pc, #216]	@ (8007ea4 <HAL_TIM_PWM_Start+0x208>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x148>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a34      	ldr	r2, [pc, #208]	@ (8007ea8 <HAL_TIM_PWM_Start+0x20c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_PWM_Start+0x148>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a33      	ldr	r2, [pc, #204]	@ (8007eac <HAL_TIM_PWM_Start+0x210>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d101      	bne.n	8007de8 <HAL_TIM_PWM_Start+0x14c>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <HAL_TIM_PWM_Start+0x14e>
 8007de8:	2300      	movs	r3, #0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a25      	ldr	r2, [pc, #148]	@ (8007e98 <HAL_TIM_PWM_Start+0x1fc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d022      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e10:	d01d      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a26      	ldr	r2, [pc, #152]	@ (8007eb0 <HAL_TIM_PWM_Start+0x214>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d018      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a24      	ldr	r2, [pc, #144]	@ (8007eb4 <HAL_TIM_PWM_Start+0x218>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d013      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a23      	ldr	r2, [pc, #140]	@ (8007eb8 <HAL_TIM_PWM_Start+0x21c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a19      	ldr	r2, [pc, #100]	@ (8007e9c <HAL_TIM_PWM_Start+0x200>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ea0 <HAL_TIM_PWM_Start+0x204>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x1b2>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a18      	ldr	r2, [pc, #96]	@ (8007eac <HAL_TIM_PWM_Start+0x210>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d115      	bne.n	8007e7a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <HAL_TIM_PWM_Start+0x220>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b06      	cmp	r3, #6
 8007e5e:	d015      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x1f0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e66:	d011      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	e008      	b.n	8007e8c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e000      	b.n	8007e8e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	40012c00 	.word	0x40012c00
 8007e9c:	40013400 	.word	0x40013400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800
 8007eac:	40015000 	.word	0x40015000
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	00010007 	.word	0x00010007

08007ec0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e054      	b.n	8007f7c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d111      	bne.n	8007f02 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f002 f870 	bl	8009fcc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_TIM_IC_Init+0xc4>)
 8007ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f001 f9af 	bl	8009278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	080054f1 	.word	0x080054f1

08007f88 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_IC_Start+0x1a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	e023      	b.n	8007fea <HAL_TIM_IC_Start+0x62>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_IC_Start+0x2a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	e01b      	b.n	8007fea <HAL_TIM_IC_Start+0x62>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_IC_Start+0x3a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e013      	b.n	8007fea <HAL_TIM_IC_Start+0x62>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	d104      	bne.n	8007fd2 <HAL_TIM_IC_Start+0x4a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	e00b      	b.n	8007fea <HAL_TIM_IC_Start+0x62>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d104      	bne.n	8007fe2 <HAL_TIM_IC_Start+0x5a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	e003      	b.n	8007fea <HAL_TIM_IC_Start+0x62>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <HAL_TIM_IC_Start+0x74>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e013      	b.n	8008024 <HAL_TIM_IC_Start+0x9c>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d104      	bne.n	800800c <HAL_TIM_IC_Start+0x84>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008008:	b2db      	uxtb	r3, r3
 800800a:	e00b      	b.n	8008024 <HAL_TIM_IC_Start+0x9c>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b08      	cmp	r3, #8
 8008010:	d104      	bne.n	800801c <HAL_TIM_IC_Start+0x94>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e003      	b.n	8008024 <HAL_TIM_IC_Start+0x9c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008022:	b2db      	uxtb	r3, r3
 8008024:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d102      	bne.n	8008032 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d001      	beq.n	8008036 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e097      	b.n	8008166 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <HAL_TIM_IC_Start+0xbe>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008044:	e023      	b.n	800808e <HAL_TIM_IC_Start+0x106>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d104      	bne.n	8008056 <HAL_TIM_IC_Start+0xce>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008054:	e01b      	b.n	800808e <HAL_TIM_IC_Start+0x106>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d104      	bne.n	8008066 <HAL_TIM_IC_Start+0xde>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008064:	e013      	b.n	800808e <HAL_TIM_IC_Start+0x106>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b0c      	cmp	r3, #12
 800806a:	d104      	bne.n	8008076 <HAL_TIM_IC_Start+0xee>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008074:	e00b      	b.n	800808e <HAL_TIM_IC_Start+0x106>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b10      	cmp	r3, #16
 800807a:	d104      	bne.n	8008086 <HAL_TIM_IC_Start+0xfe>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008084:	e003      	b.n	800808e <HAL_TIM_IC_Start+0x106>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <HAL_TIM_IC_Start+0x116>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800809c:	e013      	b.n	80080c6 <HAL_TIM_IC_Start+0x13e>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d104      	bne.n	80080ae <HAL_TIM_IC_Start+0x126>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ac:	e00b      	b.n	80080c6 <HAL_TIM_IC_Start+0x13e>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d104      	bne.n	80080be <HAL_TIM_IC_Start+0x136>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080bc:	e003      	b.n	80080c6 <HAL_TIM_IC_Start+0x13e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 ff56 	bl	8009f80 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a25      	ldr	r2, [pc, #148]	@ (8008170 <HAL_TIM_IC_Start+0x1e8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d022      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e6:	d01d      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a21      	ldr	r2, [pc, #132]	@ (8008174 <HAL_TIM_IC_Start+0x1ec>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d018      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a20      	ldr	r2, [pc, #128]	@ (8008178 <HAL_TIM_IC_Start+0x1f0>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d013      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1e      	ldr	r2, [pc, #120]	@ (800817c <HAL_TIM_IC_Start+0x1f4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00e      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1d      	ldr	r2, [pc, #116]	@ (8008180 <HAL_TIM_IC_Start+0x1f8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d009      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1b      	ldr	r2, [pc, #108]	@ (8008184 <HAL_TIM_IC_Start+0x1fc>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d004      	beq.n	8008124 <HAL_TIM_IC_Start+0x19c>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a1a      	ldr	r2, [pc, #104]	@ (8008188 <HAL_TIM_IC_Start+0x200>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d115      	bne.n	8008150 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	4b18      	ldr	r3, [pc, #96]	@ (800818c <HAL_TIM_IC_Start+0x204>)
 800812c:	4013      	ands	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b06      	cmp	r3, #6
 8008134:	d015      	beq.n	8008162 <HAL_TIM_IC_Start+0x1da>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800813c:	d011      	beq.n	8008162 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814e:	e008      	b.n	8008162 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e000      	b.n	8008164 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40013400 	.word	0x40013400
 8008184:	40014000 	.word	0x40014000
 8008188:	40015000 	.word	0x40015000
 800818c:	00010007 	.word	0x00010007

08008190 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e04c      	b.n	800823e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d111      	bne.n	80081d4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 ff07 	bl	8009fcc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <HAL_TIM_OnePulse_Init+0xb8>)
 80081ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f001 f846 	bl	8009278 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0208 	bic.w	r2, r2, #8
 80081fa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	0800824d 	.word	0x0800824d

0800824c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008270:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008278:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008280:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008288:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d108      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d105      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d102      	bne.n	80082a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800829c:	7b3b      	ldrb	r3, [r7, #12]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d001      	beq.n	80082a6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e059      	b.n	800835a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0202 	orr.w	r2, r2, #2
 80082d4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0204 	orr.w	r2, r2, #4
 80082e4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fe46 	bl	8009f80 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	2104      	movs	r1, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fe3f 	bl	8009f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a17      	ldr	r2, [pc, #92]	@ (8008364 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a14      	ldr	r2, [pc, #80]	@ (800836c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a12      	ldr	r2, [pc, #72]	@ (8008370 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a0f      	ldr	r2, [pc, #60]	@ (8008378 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d101      	bne.n	8008342 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800
 8008378:	40015000 	.word	0x40015000

0800837c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e0a2      	b.n	80084d6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d111      	bne.n	80083c0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fe11 	bl	8009fcc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a4a      	ldr	r2, [pc, #296]	@ (80084e0 <HAL_TIM_Encoder_Init+0x164>)
 80083b6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f000 ff46 	bl	8009278 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008414:	f023 0303 	bic.w	r3, r3, #3
 8008418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	4313      	orrs	r3, r2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008432:	f023 030c 	bic.w	r3, r3, #12
 8008436:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800843e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	4313      	orrs	r3, r2
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	011a      	lsls	r2, r3, #4
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	4313      	orrs	r3, r2
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008470:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008478:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	4313      	orrs	r3, r2
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	080055e5 	.word	0x080055e5

080084e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008504:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800850c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d110      	bne.n	8008536 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d102      	bne.n	8008520 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800851a:	7b7b      	ldrb	r3, [r7, #13]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d001      	beq.n	8008524 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e069      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008534:	e031      	b.n	800859a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b04      	cmp	r3, #4
 800853a:	d110      	bne.n	800855e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d102      	bne.n	8008548 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008542:	7b3b      	ldrb	r3, [r7, #12]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d001      	beq.n	800854c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e055      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800855c:	e01d      	b.n	800859a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d108      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d105      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d102      	bne.n	8008576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008570:	7b3b      	ldrb	r3, [r7, #12]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d001      	beq.n	800857a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e03e      	b.n	80085f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_TIM_Encoder_Start+0xc4>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d008      	beq.n	80085b8 <HAL_TIM_Encoder_Start+0xd4>
 80085a6:	e00f      	b.n	80085c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2201      	movs	r2, #1
 80085ae:	2100      	movs	r1, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fce5 	bl	8009f80 <TIM_CCxChannelCmd>
      break;
 80085b6:	e016      	b.n	80085e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2201      	movs	r2, #1
 80085be:	2104      	movs	r1, #4
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fcdd 	bl	8009f80 <TIM_CCxChannelCmd>
      break;
 80085c6:	e00e      	b.n	80085e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fcd5 	bl	8009f80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2201      	movs	r2, #1
 80085dc:	2104      	movs	r1, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fcce 	bl	8009f80 <TIM_CCxChannelCmd>
      break;
 80085e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0201 	orr.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d026      	beq.n	8008670 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d021      	beq.n	8008670 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0202 	mvn.w	r2, #2
 8008634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	e009      	b.n	800866a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d026      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d021      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0204 	mvn.w	r2, #4
 800868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	e009      	b.n	80086c2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d026      	beq.n	8008720 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d021      	beq.n	8008720 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0208 	mvn.w	r2, #8
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2204      	movs	r2, #4
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
 8008704:	e009      	b.n	800871a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b00      	cmp	r3, #0
 8008728:	d026      	beq.n	8008778 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	d021      	beq.n	8008778 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0210 	mvn.w	r2, #16
 800873c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2208      	movs	r2, #8
 8008742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
 800875c:	e009      	b.n	8008772 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0201 	mvn.w	r2, #1
 8008794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00e      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00e      	beq.n	80087fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d009      	beq.n	8008822 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0220 	mvn.w	r2, #32
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800888e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_TIM_IC_ConfigChannel+0x1e>
 800890c:	2302      	movs	r3, #2
 800890e:	e088      	b.n	8008a22 <HAL_TIM_IC_ConfigChannel+0x130>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d11b      	bne.n	8008956 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800892e:	f001 f961 	bl	8009bf4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	699a      	ldr	r2, [r3, #24]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 020c 	bic.w	r2, r2, #12
 8008940:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6999      	ldr	r1, [r3, #24]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	619a      	str	r2, [r3, #24]
 8008954:	e060      	b.n	8008a18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b04      	cmp	r3, #4
 800895a:	d11c      	bne.n	8008996 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800896c:	f001 f9e5 	bl	8009d3a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800897e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6999      	ldr	r1, [r3, #24]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	021a      	lsls	r2, r3, #8
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	619a      	str	r2, [r3, #24]
 8008994:	e040      	b.n	8008a18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b08      	cmp	r3, #8
 800899a:	d11b      	bne.n	80089d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80089ac:	f001 fa32 	bl	8009e14 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69da      	ldr	r2, [r3, #28]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 020c 	bic.w	r2, r2, #12
 80089be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69d9      	ldr	r1, [r3, #28]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	61da      	str	r2, [r3, #28]
 80089d2:	e021      	b.n	8008a18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b0c      	cmp	r3, #12
 80089d8:	d11c      	bne.n	8008a14 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80089ea:	f001 fa4f 	bl	8009e8c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80089fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69d9      	ldr	r1, [r3, #28]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	021a      	lsls	r2, r3, #8
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	61da      	str	r2, [r3, #28]
 8008a12:	e001      	b.n	8008a18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e0ff      	b.n	8008c4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b14      	cmp	r3, #20
 8008a56:	f200 80f0 	bhi.w	8008c3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008ab5 	.word	0x08008ab5
 8008a64:	08008c3b 	.word	0x08008c3b
 8008a68:	08008c3b 	.word	0x08008c3b
 8008a6c:	08008c3b 	.word	0x08008c3b
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008c3b 	.word	0x08008c3b
 8008a78:	08008c3b 	.word	0x08008c3b
 8008a7c:	08008c3b 	.word	0x08008c3b
 8008a80:	08008b37 	.word	0x08008b37
 8008a84:	08008c3b 	.word	0x08008c3b
 8008a88:	08008c3b 	.word	0x08008c3b
 8008a8c:	08008c3b 	.word	0x08008c3b
 8008a90:	08008b77 	.word	0x08008b77
 8008a94:	08008c3b 	.word	0x08008c3b
 8008a98:	08008c3b 	.word	0x08008c3b
 8008a9c:	08008c3b 	.word	0x08008c3b
 8008aa0:	08008bb9 	.word	0x08008bb9
 8008aa4:	08008c3b 	.word	0x08008c3b
 8008aa8:	08008c3b 	.word	0x08008c3b
 8008aac:	08008c3b 	.word	0x08008c3b
 8008ab0:	08008bf9 	.word	0x08008bf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fc90 	bl	80093e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0208 	orr.w	r2, r2, #8
 8008ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0204 	bic.w	r2, r2, #4
 8008ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6999      	ldr	r1, [r3, #24]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	619a      	str	r2, [r3, #24]
      break;
 8008af2:	e0a5      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fd0a 	bl	8009514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6999      	ldr	r1, [r3, #24]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	021a      	lsls	r2, r3, #8
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	619a      	str	r2, [r3, #24]
      break;
 8008b34:	e084      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fd7d 	bl	800963c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69da      	ldr	r2, [r3, #28]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0208 	orr.w	r2, r2, #8
 8008b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0204 	bic.w	r2, r2, #4
 8008b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69d9      	ldr	r1, [r3, #28]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	61da      	str	r2, [r3, #28]
      break;
 8008b74:	e064      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fdef 	bl	8009760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69d9      	ldr	r1, [r3, #28]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	021a      	lsls	r2, r3, #8
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	61da      	str	r2, [r3, #28]
      break;
 8008bb6:	e043      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fe62 	bl	8009888 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0208 	orr.w	r2, r2, #8
 8008bd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0204 	bic.w	r2, r2, #4
 8008be2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	691a      	ldr	r2, [r3, #16]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008bf6:	e023      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 feac 	bl	800995c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	021a      	lsls	r2, r3, #8
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c38:	e002      	b.n	8008c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_TIM_ConfigClockSource+0x1c>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e0f6      	b.n	8008e5e <HAL_TIM_ConfigClockSource+0x20a>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008c8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a6f      	ldr	r2, [pc, #444]	@ (8008e68 <HAL_TIM_ConfigClockSource+0x214>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	f000 80c1 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008cb0:	4a6d      	ldr	r2, [pc, #436]	@ (8008e68 <HAL_TIM_ConfigClockSource+0x214>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	f200 80c6 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cb8:	4a6c      	ldr	r2, [pc, #432]	@ (8008e6c <HAL_TIM_ConfigClockSource+0x218>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	f000 80b9 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8008e6c <HAL_TIM_ConfigClockSource+0x218>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	f200 80be 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cc8:	4a69      	ldr	r2, [pc, #420]	@ (8008e70 <HAL_TIM_ConfigClockSource+0x21c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	f000 80b1 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008cd0:	4a67      	ldr	r2, [pc, #412]	@ (8008e70 <HAL_TIM_ConfigClockSource+0x21c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	f200 80b6 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd8:	4a66      	ldr	r2, [pc, #408]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x220>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	f000 80a9 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008ce0:	4a64      	ldr	r2, [pc, #400]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x220>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	f200 80ae 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce8:	4a63      	ldr	r2, [pc, #396]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x224>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	f000 80a1 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008cf0:	4a61      	ldr	r2, [pc, #388]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x224>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	f200 80a6 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf8:	4a60      	ldr	r2, [pc, #384]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x228>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	f000 8099 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d00:	4a5e      	ldr	r2, [pc, #376]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x228>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	f200 809e 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d0c:	f000 8091 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d14:	f200 8096 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d1c:	f000 8089 	beq.w	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d24:	f200 808e 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d2c:	d03e      	beq.n	8008dac <HAL_TIM_ConfigClockSource+0x158>
 8008d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d32:	f200 8087 	bhi.w	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d3a:	f000 8086 	beq.w	8008e4a <HAL_TIM_ConfigClockSource+0x1f6>
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d42:	d87f      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d44:	2b70      	cmp	r3, #112	@ 0x70
 8008d46:	d01a      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x12a>
 8008d48:	2b70      	cmp	r3, #112	@ 0x70
 8008d4a:	d87b      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d4c:	2b60      	cmp	r3, #96	@ 0x60
 8008d4e:	d050      	beq.n	8008df2 <HAL_TIM_ConfigClockSource+0x19e>
 8008d50:	2b60      	cmp	r3, #96	@ 0x60
 8008d52:	d877      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d54:	2b50      	cmp	r3, #80	@ 0x50
 8008d56:	d03c      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0x17e>
 8008d58:	2b50      	cmp	r3, #80	@ 0x50
 8008d5a:	d873      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d5c:	2b40      	cmp	r3, #64	@ 0x40
 8008d5e:	d058      	beq.n	8008e12 <HAL_TIM_ConfigClockSource+0x1be>
 8008d60:	2b40      	cmp	r3, #64	@ 0x40
 8008d62:	d86f      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d64:	2b30      	cmp	r3, #48	@ 0x30
 8008d66:	d064      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d68:	2b30      	cmp	r3, #48	@ 0x30
 8008d6a:	d86b      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d060      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d867      	bhi.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d05c      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	d05a      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x1de>
 8008d7c:	e062      	b.n	8008e44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d8e:	f001 f8d7 	bl	8009f40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	609a      	str	r2, [r3, #8]
      break;
 8008daa:	e04f      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dbc:	f001 f8c0 	bl	8009f40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dce:	609a      	str	r2, [r3, #8]
      break;
 8008dd0:	e03c      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dde:	461a      	mov	r2, r3
 8008de0:	f000 ff7c 	bl	8009cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2150      	movs	r1, #80	@ 0x50
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 f88b 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8008df0:	e02c      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f000 ffd8 	bl	8009db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2160      	movs	r1, #96	@ 0x60
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 f87b 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8008e10:	e01c      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f000 ff5c 	bl	8009cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2140      	movs	r1, #64	@ 0x40
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 f86b 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8008e30:	e00c      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	f001 f862 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8008e42:	e003      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
      break;
 8008e48:	e000      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	00100070 	.word	0x00100070
 8008e6c:	00100060 	.word	0x00100060
 8008e70:	00100050 	.word	0x00100050
 8008e74:	00100040 	.word	0x00100040
 8008e78:	00100030 	.word	0x00100030
 8008e7c:	00100020 	.word	0x00100020

08008e80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e031      	b.n	8008efc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fdc2 	bl	8009a34 <TIM_SlaveTimer_SetConfig>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e018      	b.n	8008efc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ed8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ee8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e14a      	b.n	800926a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f040 80dd 	bne.w	800919c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	2b1f      	cmp	r3, #31
 8008fe6:	f200 80d6 	bhi.w	8009196 <HAL_TIM_RegisterCallback+0x1de>
 8008fea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <HAL_TIM_RegisterCallback+0x38>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009071 	.word	0x08009071
 8008ff4:	08009079 	.word	0x08009079
 8008ff8:	08009081 	.word	0x08009081
 8008ffc:	08009089 	.word	0x08009089
 8009000:	08009091 	.word	0x08009091
 8009004:	08009099 	.word	0x08009099
 8009008:	080090a1 	.word	0x080090a1
 800900c:	080090a9 	.word	0x080090a9
 8009010:	080090b1 	.word	0x080090b1
 8009014:	080090b9 	.word	0x080090b9
 8009018:	080090c1 	.word	0x080090c1
 800901c:	080090c9 	.word	0x080090c9
 8009020:	080090d1 	.word	0x080090d1
 8009024:	080090d9 	.word	0x080090d9
 8009028:	080090e3 	.word	0x080090e3
 800902c:	080090ed 	.word	0x080090ed
 8009030:	080090f7 	.word	0x080090f7
 8009034:	08009101 	.word	0x08009101
 8009038:	0800910b 	.word	0x0800910b
 800903c:	08009115 	.word	0x08009115
 8009040:	0800911f 	.word	0x0800911f
 8009044:	08009129 	.word	0x08009129
 8009048:	08009133 	.word	0x08009133
 800904c:	0800913d 	.word	0x0800913d
 8009050:	08009147 	.word	0x08009147
 8009054:	08009151 	.word	0x08009151
 8009058:	0800915b 	.word	0x0800915b
 800905c:	08009165 	.word	0x08009165
 8009060:	0800916f 	.word	0x0800916f
 8009064:	08009179 	.word	0x08009179
 8009068:	08009183 	.word	0x08009183
 800906c:	0800918d 	.word	0x0800918d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009076:	e0f7      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800907e:	e0f3      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009086:	e0ef      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800908e:	e0eb      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009096:	e0e7      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800909e:	e0e3      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80090a6:	e0df      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80090ae:	e0db      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80090b6:	e0d7      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80090be:	e0d3      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80090c6:	e0cf      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80090ce:	e0cb      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80090d6:	e0c7      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80090e0:	e0c2      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80090ea:	e0bd      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80090f4:	e0b8      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80090fe:	e0b3      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009108:	e0ae      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009112:	e0a9      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800911c:	e0a4      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009126:	e09f      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009130:	e09a      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800913a:	e095      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009144:	e090      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800914e:	e08b      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009158:	e086      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009162:	e081      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800916c:	e07c      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009176:	e077      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009180:	e072      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800918a:	e06d      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009194:	e068      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
        break;
 800919a:	e065      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d15d      	bne.n	8009264 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	2b0d      	cmp	r3, #13
 80091ac:	d857      	bhi.n	800925e <HAL_TIM_RegisterCallback+0x2a6>
 80091ae:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <HAL_TIM_RegisterCallback+0x1fc>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091ed 	.word	0x080091ed
 80091b8:	080091f5 	.word	0x080091f5
 80091bc:	080091fd 	.word	0x080091fd
 80091c0:	08009205 	.word	0x08009205
 80091c4:	0800920d 	.word	0x0800920d
 80091c8:	08009215 	.word	0x08009215
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	08009225 	.word	0x08009225
 80091d4:	0800922d 	.word	0x0800922d
 80091d8:	08009235 	.word	0x08009235
 80091dc:	0800923d 	.word	0x0800923d
 80091e0:	08009245 	.word	0x08009245
 80091e4:	0800924d 	.word	0x0800924d
 80091e8:	08009255 	.word	0x08009255
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80091f2:	e039      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80091fa:	e035      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009202:	e031      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800920a:	e02d      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009212:	e029      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800921a:	e025      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009222:	e021      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800922a:	e01d      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009232:	e019      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800923a:	e015      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009242:	e011      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800924a:	e00d      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009252:	e009      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800925c:	e004      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]
        break;
 8009262:	e001      	b.n	8009268 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop

08009278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a4c      	ldr	r2, [pc, #304]	@ (80093bc <TIM_Base_SetConfig+0x144>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d017      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009296:	d013      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a49      	ldr	r2, [pc, #292]	@ (80093c0 <TIM_Base_SetConfig+0x148>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00f      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a48      	ldr	r2, [pc, #288]	@ (80093c4 <TIM_Base_SetConfig+0x14c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00b      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a47      	ldr	r2, [pc, #284]	@ (80093c8 <TIM_Base_SetConfig+0x150>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a46      	ldr	r2, [pc, #280]	@ (80093cc <TIM_Base_SetConfig+0x154>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_Base_SetConfig+0x48>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a45      	ldr	r2, [pc, #276]	@ (80093d0 <TIM_Base_SetConfig+0x158>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d108      	bne.n	80092d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a39      	ldr	r2, [pc, #228]	@ (80093bc <TIM_Base_SetConfig+0x144>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d023      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e0:	d01f      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a36      	ldr	r2, [pc, #216]	@ (80093c0 <TIM_Base_SetConfig+0x148>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d01b      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a35      	ldr	r2, [pc, #212]	@ (80093c4 <TIM_Base_SetConfig+0x14c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d017      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a34      	ldr	r2, [pc, #208]	@ (80093c8 <TIM_Base_SetConfig+0x150>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d013      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a33      	ldr	r2, [pc, #204]	@ (80093cc <TIM_Base_SetConfig+0x154>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00f      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a33      	ldr	r2, [pc, #204]	@ (80093d4 <TIM_Base_SetConfig+0x15c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d00b      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a32      	ldr	r2, [pc, #200]	@ (80093d8 <TIM_Base_SetConfig+0x160>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a31      	ldr	r2, [pc, #196]	@ (80093dc <TIM_Base_SetConfig+0x164>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_Base_SetConfig+0xaa>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a2c      	ldr	r2, [pc, #176]	@ (80093d0 <TIM_Base_SetConfig+0x158>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d108      	bne.n	8009334 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	4313      	orrs	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a18      	ldr	r2, [pc, #96]	@ (80093bc <TIM_Base_SetConfig+0x144>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d013      	beq.n	8009388 <TIM_Base_SetConfig+0x110>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1a      	ldr	r2, [pc, #104]	@ (80093cc <TIM_Base_SetConfig+0x154>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00f      	beq.n	8009388 <TIM_Base_SetConfig+0x110>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a1a      	ldr	r2, [pc, #104]	@ (80093d4 <TIM_Base_SetConfig+0x15c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00b      	beq.n	8009388 <TIM_Base_SetConfig+0x110>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a19      	ldr	r2, [pc, #100]	@ (80093d8 <TIM_Base_SetConfig+0x160>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d007      	beq.n	8009388 <TIM_Base_SetConfig+0x110>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a18      	ldr	r2, [pc, #96]	@ (80093dc <TIM_Base_SetConfig+0x164>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d003      	beq.n	8009388 <TIM_Base_SetConfig+0x110>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a13      	ldr	r2, [pc, #76]	@ (80093d0 <TIM_Base_SetConfig+0x158>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d103      	bne.n	8009390 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	691a      	ldr	r2, [r3, #16]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d105      	bne.n	80093ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f023 0201 	bic.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	611a      	str	r2, [r3, #16]
  }
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40012c00 	.word	0x40012c00
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40000c00 	.word	0x40000c00
 80093cc:	40013400 	.word	0x40013400
 80093d0:	40015000 	.word	0x40015000
 80093d4:	40014000 	.word	0x40014000
 80093d8:	40014400 	.word	0x40014400
 80093dc:	40014800 	.word	0x40014800

080093e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	f023 0201 	bic.w	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f023 0302 	bic.w	r3, r3, #2
 800942c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a30      	ldr	r2, [pc, #192]	@ (80094fc <TIM_OC1_SetConfig+0x11c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <TIM_OC1_SetConfig+0x88>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a2f      	ldr	r2, [pc, #188]	@ (8009500 <TIM_OC1_SetConfig+0x120>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00f      	beq.n	8009468 <TIM_OC1_SetConfig+0x88>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a2e      	ldr	r2, [pc, #184]	@ (8009504 <TIM_OC1_SetConfig+0x124>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00b      	beq.n	8009468 <TIM_OC1_SetConfig+0x88>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a2d      	ldr	r2, [pc, #180]	@ (8009508 <TIM_OC1_SetConfig+0x128>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_OC1_SetConfig+0x88>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a2c      	ldr	r2, [pc, #176]	@ (800950c <TIM_OC1_SetConfig+0x12c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_OC1_SetConfig+0x88>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a2b      	ldr	r2, [pc, #172]	@ (8009510 <TIM_OC1_SetConfig+0x130>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d10c      	bne.n	8009482 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f023 0308 	bic.w	r3, r3, #8
 800946e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f023 0304 	bic.w	r3, r3, #4
 8009480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a1d      	ldr	r2, [pc, #116]	@ (80094fc <TIM_OC1_SetConfig+0x11c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <TIM_OC1_SetConfig+0xd2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1c      	ldr	r2, [pc, #112]	@ (8009500 <TIM_OC1_SetConfig+0x120>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00f      	beq.n	80094b2 <TIM_OC1_SetConfig+0xd2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1b      	ldr	r2, [pc, #108]	@ (8009504 <TIM_OC1_SetConfig+0x124>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_OC1_SetConfig+0xd2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1a      	ldr	r2, [pc, #104]	@ (8009508 <TIM_OC1_SetConfig+0x128>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_OC1_SetConfig+0xd2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a19      	ldr	r2, [pc, #100]	@ (800950c <TIM_OC1_SetConfig+0x12c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC1_SetConfig+0xd2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a18      	ldr	r2, [pc, #96]	@ (8009510 <TIM_OC1_SetConfig+0x130>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d111      	bne.n	80094d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	621a      	str	r2, [r3, #32]
}
 80094f0:	bf00      	nop
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	40012c00 	.word	0x40012c00
 8009500:	40013400 	.word	0x40013400
 8009504:	40014000 	.word	0x40014000
 8009508:	40014400 	.word	0x40014400
 800950c:	40014800 	.word	0x40014800
 8009510:	40015000 	.word	0x40015000

08009514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	f023 0210 	bic.w	r2, r3, #16
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800954e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0320 	bic.w	r3, r3, #32
 8009562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a2c      	ldr	r2, [pc, #176]	@ (8009624 <TIM_OC2_SetConfig+0x110>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d007      	beq.n	8009588 <TIM_OC2_SetConfig+0x74>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a2b      	ldr	r2, [pc, #172]	@ (8009628 <TIM_OC2_SetConfig+0x114>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d003      	beq.n	8009588 <TIM_OC2_SetConfig+0x74>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a2a      	ldr	r2, [pc, #168]	@ (800962c <TIM_OC2_SetConfig+0x118>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d10d      	bne.n	80095a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800958e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009624 <TIM_OC2_SetConfig+0x110>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d013      	beq.n	80095d4 <TIM_OC2_SetConfig+0xc0>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009628 <TIM_OC2_SetConfig+0x114>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00f      	beq.n	80095d4 <TIM_OC2_SetConfig+0xc0>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009630 <TIM_OC2_SetConfig+0x11c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00b      	beq.n	80095d4 <TIM_OC2_SetConfig+0xc0>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a1d      	ldr	r2, [pc, #116]	@ (8009634 <TIM_OC2_SetConfig+0x120>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d007      	beq.n	80095d4 <TIM_OC2_SetConfig+0xc0>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009638 <TIM_OC2_SetConfig+0x124>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d003      	beq.n	80095d4 <TIM_OC2_SetConfig+0xc0>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a17      	ldr	r2, [pc, #92]	@ (800962c <TIM_OC2_SetConfig+0x118>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d113      	bne.n	80095fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	621a      	str	r2, [r3, #32]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40012c00 	.word	0x40012c00
 8009628:	40013400 	.word	0x40013400
 800962c:	40015000 	.word	0x40015000
 8009630:	40014000 	.word	0x40014000
 8009634:	40014400 	.word	0x40014400
 8009638:	40014800 	.word	0x40014800

0800963c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800966a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 0303 	bic.w	r3, r3, #3
 8009676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	021b      	lsls	r3, r3, #8
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a2b      	ldr	r2, [pc, #172]	@ (8009748 <TIM_OC3_SetConfig+0x10c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <TIM_OC3_SetConfig+0x72>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a2a      	ldr	r2, [pc, #168]	@ (800974c <TIM_OC3_SetConfig+0x110>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <TIM_OC3_SetConfig+0x72>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a29      	ldr	r2, [pc, #164]	@ (8009750 <TIM_OC3_SetConfig+0x114>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d10d      	bne.n	80096ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	021b      	lsls	r3, r3, #8
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009748 <TIM_OC3_SetConfig+0x10c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d013      	beq.n	80096fa <TIM_OC3_SetConfig+0xbe>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a1d      	ldr	r2, [pc, #116]	@ (800974c <TIM_OC3_SetConfig+0x110>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00f      	beq.n	80096fa <TIM_OC3_SetConfig+0xbe>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009754 <TIM_OC3_SetConfig+0x118>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00b      	beq.n	80096fa <TIM_OC3_SetConfig+0xbe>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009758 <TIM_OC3_SetConfig+0x11c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d007      	beq.n	80096fa <TIM_OC3_SetConfig+0xbe>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1b      	ldr	r2, [pc, #108]	@ (800975c <TIM_OC3_SetConfig+0x120>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d003      	beq.n	80096fa <TIM_OC3_SetConfig+0xbe>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <TIM_OC3_SetConfig+0x114>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d113      	bne.n	8009722 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	621a      	str	r2, [r3, #32]
}
 800973c:	bf00      	nop
 800973e:	371c      	adds	r7, #28
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	40012c00 	.word	0x40012c00
 800974c:	40013400 	.word	0x40013400
 8009750:	40015000 	.word	0x40015000
 8009754:	40014000 	.word	0x40014000
 8009758:	40014400 	.word	0x40014400
 800975c:	40014800 	.word	0x40014800

08009760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800979a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	031b      	lsls	r3, r3, #12
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a2c      	ldr	r2, [pc, #176]	@ (8009870 <TIM_OC4_SetConfig+0x110>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d007      	beq.n	80097d4 <TIM_OC4_SetConfig+0x74>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009874 <TIM_OC4_SetConfig+0x114>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d003      	beq.n	80097d4 <TIM_OC4_SetConfig+0x74>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009878 <TIM_OC4_SetConfig+0x118>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d10d      	bne.n	80097f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	031b      	lsls	r3, r3, #12
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009870 <TIM_OC4_SetConfig+0x110>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d013      	beq.n	8009820 <TIM_OC4_SetConfig+0xc0>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009874 <TIM_OC4_SetConfig+0x114>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_OC4_SetConfig+0xc0>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a1e      	ldr	r2, [pc, #120]	@ (800987c <TIM_OC4_SetConfig+0x11c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_OC4_SetConfig+0xc0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a1d      	ldr	r2, [pc, #116]	@ (8009880 <TIM_OC4_SetConfig+0x120>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_OC4_SetConfig+0xc0>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a1c      	ldr	r2, [pc, #112]	@ (8009884 <TIM_OC4_SetConfig+0x124>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC4_SetConfig+0xc0>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a17      	ldr	r2, [pc, #92]	@ (8009878 <TIM_OC4_SetConfig+0x118>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d113      	bne.n	8009848 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009826:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800982e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	019b      	lsls	r3, r3, #6
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	019b      	lsls	r3, r3, #6
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	621a      	str	r2, [r3, #32]
}
 8009862:	bf00      	nop
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	40012c00 	.word	0x40012c00
 8009874:	40013400 	.word	0x40013400
 8009878:	40015000 	.word	0x40015000
 800987c:	40014000 	.word	0x40014000
 8009880:	40014400 	.word	0x40014400
 8009884:	40014800 	.word	0x40014800

08009888 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <TIM_OC5_SetConfig+0xbc>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d013      	beq.n	800990a <TIM_OC5_SetConfig+0x82>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a18      	ldr	r2, [pc, #96]	@ (8009948 <TIM_OC5_SetConfig+0xc0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00f      	beq.n	800990a <TIM_OC5_SetConfig+0x82>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a17      	ldr	r2, [pc, #92]	@ (800994c <TIM_OC5_SetConfig+0xc4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00b      	beq.n	800990a <TIM_OC5_SetConfig+0x82>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a16      	ldr	r2, [pc, #88]	@ (8009950 <TIM_OC5_SetConfig+0xc8>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d007      	beq.n	800990a <TIM_OC5_SetConfig+0x82>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a15      	ldr	r2, [pc, #84]	@ (8009954 <TIM_OC5_SetConfig+0xcc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d003      	beq.n	800990a <TIM_OC5_SetConfig+0x82>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a14      	ldr	r2, [pc, #80]	@ (8009958 <TIM_OC5_SetConfig+0xd0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d109      	bne.n	800991e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	621a      	str	r2, [r3, #32]
}
 8009938:	bf00      	nop
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	40012c00 	.word	0x40012c00
 8009948:	40013400 	.word	0x40013400
 800994c:	40014000 	.word	0x40014000
 8009950:	40014400 	.word	0x40014400
 8009954:	40014800 	.word	0x40014800
 8009958:	40015000 	.word	0x40015000

0800995c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800998a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800998e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	051b      	lsls	r3, r3, #20
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a1a      	ldr	r2, [pc, #104]	@ (8009a1c <TIM_OC6_SetConfig+0xc0>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d013      	beq.n	80099e0 <TIM_OC6_SetConfig+0x84>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a19      	ldr	r2, [pc, #100]	@ (8009a20 <TIM_OC6_SetConfig+0xc4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00f      	beq.n	80099e0 <TIM_OC6_SetConfig+0x84>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a18      	ldr	r2, [pc, #96]	@ (8009a24 <TIM_OC6_SetConfig+0xc8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00b      	beq.n	80099e0 <TIM_OC6_SetConfig+0x84>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a17      	ldr	r2, [pc, #92]	@ (8009a28 <TIM_OC6_SetConfig+0xcc>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <TIM_OC6_SetConfig+0x84>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a16      	ldr	r2, [pc, #88]	@ (8009a2c <TIM_OC6_SetConfig+0xd0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_OC6_SetConfig+0x84>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a15      	ldr	r2, [pc, #84]	@ (8009a30 <TIM_OC6_SetConfig+0xd4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d109      	bne.n	80099f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	029b      	lsls	r3, r3, #10
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	621a      	str	r2, [r3, #32]
}
 8009a0e:	bf00      	nop
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	40012c00 	.word	0x40012c00
 8009a20:	40013400 	.word	0x40013400
 8009a24:	40014000 	.word	0x40014000
 8009a28:	40014400 	.word	0x40014400
 8009a2c:	40014800 	.word	0x40014800
 8009a30:	40015000 	.word	0x40015000

08009a34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a66:	f023 0307 	bic.w	r3, r3, #7
 8009a6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4a56      	ldr	r2, [pc, #344]	@ (8009bdc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	f000 80a2 	beq.w	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009a8a:	4a54      	ldr	r2, [pc, #336]	@ (8009bdc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	f200 809b 	bhi.w	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009a92:	4a53      	ldr	r2, [pc, #332]	@ (8009be0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	f000 809a 	beq.w	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009a9a:	4a51      	ldr	r2, [pc, #324]	@ (8009be0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	f200 8093 	bhi.w	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009aa2:	4a50      	ldr	r2, [pc, #320]	@ (8009be4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	f000 8092 	beq.w	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8009be4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	f200 808b 	bhi.w	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8009be8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	f000 808a 	beq.w	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009aba:	4a4b      	ldr	r2, [pc, #300]	@ (8009be8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	f200 8083 	bhi.w	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8009bec <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	f000 8082 	beq.w	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009aca:	4a48      	ldr	r2, [pc, #288]	@ (8009bec <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d87b      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ad0:	4a47      	ldr	r2, [pc, #284]	@ (8009bf0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d07b      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009ad6:	4a46      	ldr	r2, [pc, #280]	@ (8009bf0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d875      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009adc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ae0:	d075      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009ae2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ae6:	d86f      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aec:	d06f      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009af2:	d869      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009af4:	2b70      	cmp	r3, #112	@ 0x70
 8009af6:	d01a      	beq.n	8009b2e <TIM_SlaveTimer_SetConfig+0xfa>
 8009af8:	2b70      	cmp	r3, #112	@ 0x70
 8009afa:	d865      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009afc:	2b60      	cmp	r3, #96	@ 0x60
 8009afe:	d059      	beq.n	8009bb4 <TIM_SlaveTimer_SetConfig+0x180>
 8009b00:	2b60      	cmp	r3, #96	@ 0x60
 8009b02:	d861      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009b04:	2b50      	cmp	r3, #80	@ 0x50
 8009b06:	d04b      	beq.n	8009ba0 <TIM_SlaveTimer_SetConfig+0x16c>
 8009b08:	2b50      	cmp	r3, #80	@ 0x50
 8009b0a:	d85d      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009b0c:	2b40      	cmp	r3, #64	@ 0x40
 8009b0e:	d019      	beq.n	8009b44 <TIM_SlaveTimer_SetConfig+0x110>
 8009b10:	2b40      	cmp	r3, #64	@ 0x40
 8009b12:	d859      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009b14:	2b30      	cmp	r3, #48	@ 0x30
 8009b16:	d05a      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009b18:	2b30      	cmp	r3, #48	@ 0x30
 8009b1a:	d855      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d056      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d851      	bhi.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d052      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d050      	beq.n	8009bce <TIM_SlaveTimer_SetConfig+0x19a>
 8009b2c:	e04c      	b.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009b3e:	f000 f9ff 	bl	8009f40 <TIM_ETR_SetConfig>
      break;
 8009b42:	e045      	b.n	8009bd0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d004      	beq.n	8009b56 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009b50:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009b54:	d101      	bne.n	8009b5a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e03b      	b.n	8009bd2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a1a      	ldr	r2, [r3, #32]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b80:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	621a      	str	r2, [r3, #32]
      break;
 8009b9e:	e017      	b.n	8009bd0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bac:	461a      	mov	r2, r3
 8009bae:	f000 f895 	bl	8009cdc <TIM_TI1_ConfigInputStage>
      break;
 8009bb2:	e00d      	b.n	8009bd0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f000 f8f7 	bl	8009db4 <TIM_TI2_ConfigInputStage>
      break;
 8009bc6:	e003      	b.n	8009bd0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
      break;
 8009bcc:	e000      	b.n	8009bd0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009bce:	bf00      	nop
  }

  return status;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	00100070 	.word	0x00100070
 8009be0:	00100060 	.word	0x00100060
 8009be4:	00100050 	.word	0x00100050
 8009be8:	00100040 	.word	0x00100040
 8009bec:	00100030 	.word	0x00100030
 8009bf0:	00100020 	.word	0x00100020

08009bf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	f023 0201 	bic.w	r2, r3, #1
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4a28      	ldr	r2, [pc, #160]	@ (8009cc0 <TIM_TI1_SetConfig+0xcc>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01b      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c28:	d017      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4a25      	ldr	r2, [pc, #148]	@ (8009cc4 <TIM_TI1_SetConfig+0xd0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4a24      	ldr	r2, [pc, #144]	@ (8009cc8 <TIM_TI1_SetConfig+0xd4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d00f      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a23      	ldr	r2, [pc, #140]	@ (8009ccc <TIM_TI1_SetConfig+0xd8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00b      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a22      	ldr	r2, [pc, #136]	@ (8009cd0 <TIM_TI1_SetConfig+0xdc>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d007      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a21      	ldr	r2, [pc, #132]	@ (8009cd4 <TIM_TI1_SetConfig+0xe0>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <TIM_TI1_SetConfig+0x66>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4a20      	ldr	r2, [pc, #128]	@ (8009cd8 <TIM_TI1_SetConfig+0xe4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d101      	bne.n	8009c5e <TIM_TI1_SetConfig+0x6a>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <TIM_TI1_SetConfig+0x6c>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d008      	beq.n	8009c76 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f023 0303 	bic.w	r3, r3, #3
 8009c6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e003      	b.n	8009c7e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f043 0301 	orr.w	r3, r3, #1
 8009c7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f023 030a 	bic.w	r3, r3, #10
 8009c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f003 030a 	and.w	r3, r3, #10
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40012c00 	.word	0x40012c00
 8009cc4:	40000400 	.word	0x40000400
 8009cc8:	40000800 	.word	0x40000800
 8009ccc:	40000c00 	.word	0x40000c00
 8009cd0:	40013400 	.word	0x40013400
 8009cd4:	40014000 	.word	0x40014000
 8009cd8:	40015000 	.word	0x40015000

08009cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f023 0201 	bic.w	r2, r3, #1
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f023 030a 	bic.w	r3, r3, #10
 8009d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	621a      	str	r2, [r3, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b087      	sub	sp, #28
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	f023 0210 	bic.w	r2, r3, #16
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	031b      	lsls	r3, r3, #12
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	621a      	str	r2, [r3, #32]
}
 8009da8:	bf00      	nop
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0210 	bic.w	r2, r3, #16
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	031b      	lsls	r3, r3, #12
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009df0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	621a      	str	r2, [r3, #32]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009e64:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	621a      	str	r2, [r3, #32]
}
 8009e80:	bf00      	nop
 8009e82:	371c      	adds	r7, #28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009eca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	031b      	lsls	r3, r3, #12
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009ede:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	031b      	lsls	r3, r3, #12
 8009ee4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	f043 0307 	orr.w	r3, r3, #7
 8009f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	609a      	str	r2, [r3, #8]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	021a      	lsls	r2, r3, #8
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	609a      	str	r2, [r3, #8]
}
 8009f74:	bf00      	nop
 8009f76:	371c      	adds	r7, #28
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f003 031f 	and.w	r3, r3, #31
 8009f92:	2201      	movs	r2, #1
 8009f94:	fa02 f303 	lsl.w	r3, r2, r3
 8009f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a1a      	ldr	r2, [r3, #32]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	401a      	ands	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6a1a      	ldr	r2, [r3, #32]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 031f 	and.w	r3, r3, #31
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	621a      	str	r2, [r3, #32]
}
 8009fbe:	bf00      	nop
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
	...

08009fcc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a26      	ldr	r2, [pc, #152]	@ (800a070 <TIM_ResetCallback+0xa4>)
 8009fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a25      	ldr	r2, [pc, #148]	@ (800a074 <TIM_ResetCallback+0xa8>)
 8009fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a24      	ldr	r2, [pc, #144]	@ (800a078 <TIM_ResetCallback+0xac>)
 8009fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a23      	ldr	r2, [pc, #140]	@ (800a07c <TIM_ResetCallback+0xb0>)
 8009ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a22      	ldr	r2, [pc, #136]	@ (800a080 <TIM_ResetCallback+0xb4>)
 8009ff8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a21      	ldr	r2, [pc, #132]	@ (800a084 <TIM_ResetCallback+0xb8>)
 800a000:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a20      	ldr	r2, [pc, #128]	@ (800a088 <TIM_ResetCallback+0xbc>)
 800a008:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a1f      	ldr	r2, [pc, #124]	@ (800a08c <TIM_ResetCallback+0xc0>)
 800a010:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a1e      	ldr	r2, [pc, #120]	@ (800a090 <TIM_ResetCallback+0xc4>)
 800a018:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a1d      	ldr	r2, [pc, #116]	@ (800a094 <TIM_ResetCallback+0xc8>)
 800a020:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1c      	ldr	r2, [pc, #112]	@ (800a098 <TIM_ResetCallback+0xcc>)
 800a028:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a1b      	ldr	r2, [pc, #108]	@ (800a09c <TIM_ResetCallback+0xd0>)
 800a030:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a0 <TIM_ResetCallback+0xd4>)
 800a038:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a19      	ldr	r2, [pc, #100]	@ (800a0a4 <TIM_ResetCallback+0xd8>)
 800a040:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a18      	ldr	r2, [pc, #96]	@ (800a0a8 <TIM_ResetCallback+0xdc>)
 800a048:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a17      	ldr	r2, [pc, #92]	@ (800a0ac <TIM_ResetCallback+0xe0>)
 800a050:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a16      	ldr	r2, [pc, #88]	@ (800a0b0 <TIM_ResetCallback+0xe4>)
 800a058:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a15      	ldr	r2, [pc, #84]	@ (800a0b4 <TIM_ResetCallback+0xe8>)
 800a060:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	080044f9 	.word	0x080044f9
 800a074:	08008f05 	.word	0x08008f05
 800a078:	08008f7d 	.word	0x08008f7d
 800a07c:	08008f91 	.word	0x08008f91
 800a080:	08008f2d 	.word	0x08008f2d
 800a084:	08008f41 	.word	0x08008f41
 800a088:	08008f19 	.word	0x08008f19
 800a08c:	08008f55 	.word	0x08008f55
 800a090:	08008f69 	.word	0x08008f69
 800a094:	08008fa5 	.word	0x08008fa5
 800a098:	0800a30d 	.word	0x0800a30d
 800a09c:	0800a321 	.word	0x0800a321
 800a0a0:	0800a335 	.word	0x0800a335
 800a0a4:	0800a349 	.word	0x0800a349
 800a0a8:	0800a35d 	.word	0x0800a35d
 800a0ac:	0800a371 	.word	0x0800a371
 800a0b0:	0800a385 	.word	0x0800a385
 800a0b4:	0800a399 	.word	0x0800a399

0800a0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e074      	b.n	800a1ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a34      	ldr	r2, [pc, #208]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d009      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a33      	ldr	r2, [pc, #204]	@ (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d004      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a31      	ldr	r2, [pc, #196]	@ (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d108      	bne.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a12a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a21      	ldr	r2, [pc, #132]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d022      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a150:	d01d      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d018      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d013      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a1c      	ldr	r2, [pc, #112]	@ (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00e      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a15      	ldr	r2, [pc, #84]	@ (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d009      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a18      	ldr	r2, [pc, #96]	@ (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d004      	beq.n	800a18e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a11      	ldr	r2, [pc, #68]	@ (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d10c      	bne.n	800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40012c00 	.word	0x40012c00
 800a1cc:	40013400 	.word	0x40013400
 800a1d0:	40015000 	.word	0x40015000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40014000 	.word	0x40014000

0800a1e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e078      	b.n	800a2f2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a266:	4313      	orrs	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	041b      	lsls	r3, r3, #16
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1c      	ldr	r2, [pc, #112]	@ (800a300 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d009      	beq.n	800a2a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d004      	beq.n	800a2a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a19      	ldr	r2, [pc, #100]	@ (800a308 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d11c      	bne.n	800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b0:	051b      	lsls	r3, r3, #20
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40012c00 	.word	0x40012c00
 800a304:	40013400 	.word	0x40013400
 800a308:	40015000 	.word	0x40015000

0800a30c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e050      	b.n	800a460 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d114      	bne.n	800a3f2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fde5 	bl	800afa0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a21      	ldr	r2, [pc, #132]	@ (800a468 <HAL_UART_Init+0xbc>)
 800a3e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2224      	movs	r2, #36	@ 0x24
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0201 	bic.w	r2, r2, #1
 800a408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 f912 	bl	800b63c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fe13 	bl	800b044 <UART_SetConfig>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b01      	cmp	r3, #1
 800a422:	d101      	bne.n	800a428 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e01b      	b.n	800a460 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0201 	orr.w	r2, r2, #1
 800a456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f991 	bl	800b780 <UART_CheckIdleState>
 800a45e:	4603      	mov	r3, r0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	08005885 	.word	0x08005885

0800a46c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	460b      	mov	r3, r1
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d109      	bne.n	800a498 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a48a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e09c      	b.n	800a5d2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	d16c      	bne.n	800a57c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a4a2:	7afb      	ldrb	r3, [r7, #11]
 800a4a4:	2b0c      	cmp	r3, #12
 800a4a6:	d85e      	bhi.n	800a566 <HAL_UART_RegisterCallback+0xfa>
 800a4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b0 <HAL_UART_RegisterCallback+0x44>)
 800a4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ae:	bf00      	nop
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a4ef 	.word	0x0800a4ef
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a503 	.word	0x0800a503
 800a4c0:	0800a50d 	.word	0x0800a50d
 800a4c4:	0800a517 	.word	0x0800a517
 800a4c8:	0800a521 	.word	0x0800a521
 800a4cc:	0800a52b 	.word	0x0800a52b
 800a4d0:	0800a535 	.word	0x0800a535
 800a4d4:	0800a53f 	.word	0x0800a53f
 800a4d8:	0800a549 	.word	0x0800a549
 800a4dc:	0800a553 	.word	0x0800a553
 800a4e0:	0800a55d 	.word	0x0800a55d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a4ec:	e070      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a4f6:	e06b      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a500:	e066      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a50a:	e061      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a514:	e05c      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a51e:	e057      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a528:	e052      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a532:	e04d      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a53c:	e048      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a546:	e043      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a550:	e03e      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a55a:	e039      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a564:	e034      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a56c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
        break;
 800a57a:	e029      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a582:	2b00      	cmp	r3, #0
 800a584:	d11a      	bne.n	800a5bc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	2b0b      	cmp	r3, #11
 800a58a:	d002      	beq.n	800a592 <HAL_UART_RegisterCallback+0x126>
 800a58c:	2b0c      	cmp	r3, #12
 800a58e:	d005      	beq.n	800a59c <HAL_UART_RegisterCallback+0x130>
 800a590:	e009      	b.n	800a5a6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a59a:	e019      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a5a4:	e014      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
        break;
 800a5ba:	e009      	b.n	800a5d0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop

0800a5e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	@ 0x28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d167      	bne.n	800a6c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <HAL_UART_Transmit_DMA+0x24>
 800a5fe:	88fb      	ldrh	r3, [r7, #6]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e060      	b.n	800a6ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	88fa      	ldrh	r2, [r7, #6]
 800a612:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	88fa      	ldrh	r2, [r7, #6]
 800a61a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2221      	movs	r2, #33	@ 0x21
 800a62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d028      	beq.n	800a688 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a63a:	4a26      	ldr	r2, [pc, #152]	@ (800a6d4 <HAL_UART_Transmit_DMA+0xf4>)
 800a63c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a642:	4a25      	ldr	r2, [pc, #148]	@ (800a6d8 <HAL_UART_Transmit_DMA+0xf8>)
 800a644:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a64a:	4a24      	ldr	r2, [pc, #144]	@ (800a6dc <HAL_UART_Transmit_DMA+0xfc>)
 800a64c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a652:	2200      	movs	r2, #0
 800a654:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a65e:	4619      	mov	r1, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3328      	adds	r3, #40	@ 0x28
 800a666:	461a      	mov	r2, r3
 800a668:	88fb      	ldrh	r3, [r7, #6]
 800a66a:	f7fb fcd9 	bl	8006020 <HAL_DMA_Start_IT>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d009      	beq.n	800a688 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2210      	movs	r2, #16
 800a678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e020      	b.n	800a6ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2240      	movs	r2, #64	@ 0x40
 800a68e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3308      	adds	r3, #8
 800a696:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b0:	623a      	str	r2, [r7, #32]
 800a6b2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	69f9      	ldr	r1, [r7, #28]
 800a6b6:	6a3a      	ldr	r2, [r7, #32]
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e5      	bne.n	800a690 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e000      	b.n	800a6ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a6c8:	2302      	movs	r3, #2
  }
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	@ 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800bc4b 	.word	0x0800bc4b
 800a6d8:	0800bce9 	.word	0x0800bce9
 800a6dc:	0800be83 	.word	0x0800be83

0800a6e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08a      	sub	sp, #40	@ 0x28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d137      	bne.n	800a768 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <HAL_UART_Receive_DMA+0x24>
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e030      	b.n	800a76a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a18      	ldr	r2, [pc, #96]	@ (800a774 <HAL_UART_Receive_DMA+0x94>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d01f      	beq.n	800a758 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d018      	beq.n	800a758 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	613b      	str	r3, [r7, #16]
   return(result);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a744:	623b      	str	r3, [r7, #32]
 800a746:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	69f9      	ldr	r1, [r7, #28]
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	61bb      	str	r3, [r7, #24]
   return(result);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	461a      	mov	r2, r3
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f001 f926 	bl	800b9b0 <UART_Start_Receive_DMA>
 800a764:	4603      	mov	r3, r0
 800a766:	e000      	b.n	800a76a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a768:	2302      	movs	r3, #2
  }
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3728      	adds	r7, #40	@ 0x28
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	40008000 	.word	0x40008000

0800a778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b0ba      	sub	sp, #232	@ 0xe8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a79e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a7a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11b      	bne.n	800a7ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d015      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d009      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8312 	beq.w	800ae06 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
      }
      return;
 800a7ea:	e30c      	b.n	800ae06 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 8129 	beq.w	800aa48 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7fa:	4b90      	ldr	r3, [pc, #576]	@ (800aa3c <HAL_UART_IRQHandler+0x2c4>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a806:	4b8e      	ldr	r3, [pc, #568]	@ (800aa40 <HAL_UART_IRQHandler+0x2c8>)
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 811c 	beq.w	800aa48 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
 800a81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a836:	f043 0201 	orr.w	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d011      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
 800a84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2202      	movs	r2, #2
 800a85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a866:	f043 0204 	orr.w	r2, r3, #4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d011      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
 800a87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00b      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2204      	movs	r2, #4
 800a88e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a896:	f043 0202 	orr.w	r2, r3, #2
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d017      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b0:	f003 0320 	and.w	r3, r3, #32
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d105      	bne.n	800a8c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8bc:	4b5f      	ldr	r3, [pc, #380]	@ (800aa3c <HAL_UART_IRQHandler+0x2c4>)
 800a8be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d2:	f043 0208 	orr.w	r2, r3, #8
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a904:	f043 0220 	orr.w	r2, r3, #32
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8278 	beq.w	800ae0a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d105      	bne.n	800a93e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a962:	2b40      	cmp	r3, #64	@ 0x40
 800a964:	d005      	beq.n	800a972 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a96a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d058      	beq.n	800aa24 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 f903 	bl	800bb7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d148      	bne.n	800aa18 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3308      	adds	r3, #8
 800a98c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a9b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1d9      	bne.n	800a986 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d017      	beq.n	800aa0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e2:	4a18      	ldr	r2, [pc, #96]	@ (800aa44 <HAL_UART_IRQHandler+0x2cc>)
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fb fbeb 	bl	80061c8 <HAL_DMA_Abort_IT>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01f      	beq.n	800aa38 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa06:	4610      	mov	r0, r2
 800aa08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0a:	e015      	b.n	800aa38 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa16:	e00f      	b.n	800aa38 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa22:	e009      	b.n	800aa38 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa36:	e1e8      	b.n	800ae0a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa38:	bf00      	nop
    return;
 800aa3a:	e1e6      	b.n	800ae0a <HAL_UART_IRQHandler+0x692>
 800aa3c:	10000001 	.word	0x10000001
 800aa40:	04000120 	.word	0x04000120
 800aa44:	0800bf07 	.word	0x0800bf07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	f040 8176 	bne.w	800ad3e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa56:	f003 0310 	and.w	r3, r3, #16
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 816f 	beq.w	800ad3e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8168 	beq.w	800ad3e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2210      	movs	r2, #16
 800aa74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa80:	2b40      	cmp	r3, #64	@ 0x40
 800aa82:	f040 80dc 	bne.w	800ac3e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 80b1 	beq.w	800ac00 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aaa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	f080 80a9 	bcs.w	800ac00 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aab4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0320 	and.w	r3, r3, #32
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 8087 	bne.w	800abda <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aafa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ab02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab06:	e841 2300 	strex	r3, r2, [r1]
 800ab0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1da      	bne.n	800aacc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab28:	f023 0301 	bic.w	r3, r3, #1
 800ab2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e1      	bne.n	800ab16 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e3      	bne.n	800ab52 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba8:	f023 0310 	bic.w	r3, r3, #16
 800abac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e4      	bne.n	800ab98 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fb fa9e 	bl	8006116 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2202      	movs	r2, #2
 800abde:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800abf2:	b292      	uxth	r2, r2
 800abf4:	1a8a      	subs	r2, r1, r2
 800abf6:	b292      	uxth	r2, r2
 800abf8:	4611      	mov	r1, r2
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800abfe:	e106      	b.n	800ae0e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	f040 80ff 	bne.w	800ae0e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	f040 80f5 	bne.w	800ae0e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ac36:	4611      	mov	r1, r2
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4798      	blx	r3
      return;
 800ac3c:	e0e7      	b.n	800ae0e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 80d9 	beq.w	800ae12 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800ac60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80d4 	beq.w	800ae12 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e4      	bne.n	800ac6a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3308      	adds	r3, #8
 800aca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	623b      	str	r3, [r7, #32]
   return(result);
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acb6:	f023 0301 	bic.w	r3, r3, #1
 800acba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800acc8:	633a      	str	r2, [r7, #48]	@ 0x30
 800acca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e1      	bne.n	800aca0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2220      	movs	r2, #32
 800ace0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f023 0310 	bic.w	r3, r3, #16
 800ad04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	69b9      	ldr	r1, [r7, #24]
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e4      	bne.n	800acf0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2202      	movs	r2, #2
 800ad2a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad32:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ad36:	4611      	mov	r1, r2
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad3c:	e069      	b.n	800ae12 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d010      	beq.n	800ad6c <HAL_UART_IRQHandler+0x5f4>
 800ad4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad5e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad6a:	e055      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d014      	beq.n	800ada2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d105      	bne.n	800ad90 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d008      	beq.n	800ada2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d03e      	beq.n	800ae16 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	4798      	blx	r3
    }
    return;
 800ada0:	e039      	b.n	800ae16 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <HAL_UART_IRQHandler+0x64a>
 800adae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f001 f8b7 	bl	800bf2e <UART_EndTransmit_IT>
    return;
 800adc0:	e02a      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00b      	beq.n	800ade6 <HAL_UART_IRQHandler+0x66e>
 800adce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ade4:	e018      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ade6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d012      	beq.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
 800adf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da0e      	bge.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae04:	e008      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ae06:	bf00      	nop
 800ae08:	e006      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ae0a:	bf00      	nop
 800ae0c:	e004      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ae0e:	bf00      	nop
 800ae10:	e002      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ae12:	bf00      	nop
 800ae14:	e000      	b.n	800ae18 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ae16:	bf00      	nop
  }
}
 800ae18:	37e8      	adds	r7, #232	@ 0xe8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop

0800ae20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a09      	ldr	r2, [pc, #36]	@ (800af0c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d009      	beq.n	800af00 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	615a      	str	r2, [r3, #20]
  }
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	40008000 	.word	0x40008000

0800af10 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a18      	ldr	r2, [pc, #96]	@ (800af80 <HAL_UART_EnableReceiverTimeout+0x70>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d027      	beq.n	800af72 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af28:	2b20      	cmp	r3, #32
 800af2a:	d120      	bne.n	800af6e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UART_EnableReceiverTimeout+0x2a>
 800af36:	2302      	movs	r3, #2
 800af38:	e01c      	b.n	800af74 <HAL_UART_EnableReceiverTimeout+0x64>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2224      	movs	r2, #36	@ 0x24
 800af46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800af58:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e002      	b.n	800af74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800af6e:	2302      	movs	r3, #2
 800af70:	e000      	b.n	800af74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
  }
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	40008000 	.word	0x40008000

0800af84 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a1a      	ldr	r2, [pc, #104]	@ (800b014 <UART_InitCallbacksToDefault+0x74>)
 800afac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a19      	ldr	r2, [pc, #100]	@ (800b018 <UART_InitCallbacksToDefault+0x78>)
 800afb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a18      	ldr	r2, [pc, #96]	@ (800b01c <UART_InitCallbacksToDefault+0x7c>)
 800afbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a17      	ldr	r2, [pc, #92]	@ (800b020 <UART_InitCallbacksToDefault+0x80>)
 800afc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a16      	ldr	r2, [pc, #88]	@ (800b024 <UART_InitCallbacksToDefault+0x84>)
 800afcc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a15      	ldr	r2, [pc, #84]	@ (800b028 <UART_InitCallbacksToDefault+0x88>)
 800afd4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a14      	ldr	r2, [pc, #80]	@ (800b02c <UART_InitCallbacksToDefault+0x8c>)
 800afdc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a13      	ldr	r2, [pc, #76]	@ (800b030 <UART_InitCallbacksToDefault+0x90>)
 800afe4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a12      	ldr	r2, [pc, #72]	@ (800b034 <UART_InitCallbacksToDefault+0x94>)
 800afec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a11      	ldr	r2, [pc, #68]	@ (800b038 <UART_InitCallbacksToDefault+0x98>)
 800aff4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a10      	ldr	r2, [pc, #64]	@ (800b03c <UART_InitCallbacksToDefault+0x9c>)
 800affc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a0f      	ldr	r2, [pc, #60]	@ (800b040 <UART_InitCallbacksToDefault+0xa0>)
 800b004:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	0800ae35 	.word	0x0800ae35
 800b018:	0800ae21 	.word	0x0800ae21
 800b01c:	0800ae5d 	.word	0x0800ae5d
 800b020:	0800ae49 	.word	0x0800ae49
 800b024:	0800ae71 	.word	0x0800ae71
 800b028:	0800ae85 	.word	0x0800ae85
 800b02c:	0800ae99 	.word	0x0800ae99
 800b030:	0800aead 	.word	0x0800aead
 800b034:	0800bf89 	.word	0x0800bf89
 800b038:	0800bf9d 	.word	0x0800bf9d
 800b03c:	0800bfb1 	.word	0x0800bfb1
 800b040:	0800aec1 	.word	0x0800aec1

0800b044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b048:	b08c      	sub	sp, #48	@ 0x30
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	431a      	orrs	r2, r3
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	431a      	orrs	r2, r3
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	4313      	orrs	r3, r2
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4baa      	ldr	r3, [pc, #680]	@ (800b31c <UART_SetConfig+0x2d8>)
 800b074:	4013      	ands	r3, r2
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	6812      	ldr	r2, [r2, #0]
 800b07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a9f      	ldr	r2, [pc, #636]	@ (800b320 <UART_SetConfig+0x2dc>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	6812      	ldr	r2, [r2, #0]
 800b0c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ce:	f023 010f 	bic.w	r1, r3, #15
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a90      	ldr	r2, [pc, #576]	@ (800b324 <UART_SetConfig+0x2e0>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d125      	bne.n	800b134 <UART_SetConfig+0xf0>
 800b0e8:	4b8f      	ldr	r3, [pc, #572]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d81a      	bhi.n	800b12c <UART_SetConfig+0xe8>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <UART_SetConfig+0xb8>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b112:	e116      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b114:	2302      	movs	r3, #2
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11a:	e112      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b122:	e10e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b12a:	e10a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b132:	e106      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a7c      	ldr	r2, [pc, #496]	@ (800b32c <UART_SetConfig+0x2e8>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d138      	bne.n	800b1b0 <UART_SetConfig+0x16c>
 800b13e:	4b7a      	ldr	r3, [pc, #488]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b144:	f003 030c 	and.w	r3, r3, #12
 800b148:	2b0c      	cmp	r3, #12
 800b14a:	d82d      	bhi.n	800b1a8 <UART_SetConfig+0x164>
 800b14c:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <UART_SetConfig+0x110>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b189 	.word	0x0800b189
 800b158:	0800b1a9 	.word	0x0800b1a9
 800b15c:	0800b1a9 	.word	0x0800b1a9
 800b160:	0800b1a9 	.word	0x0800b1a9
 800b164:	0800b199 	.word	0x0800b199
 800b168:	0800b1a9 	.word	0x0800b1a9
 800b16c:	0800b1a9 	.word	0x0800b1a9
 800b170:	0800b1a9 	.word	0x0800b1a9
 800b174:	0800b191 	.word	0x0800b191
 800b178:	0800b1a9 	.word	0x0800b1a9
 800b17c:	0800b1a9 	.word	0x0800b1a9
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1a1 	.word	0x0800b1a1
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b18e:	e0d8      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b190:	2302      	movs	r3, #2
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e0d4      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b198:	2304      	movs	r3, #4
 800b19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	e0d0      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a6:	e0cc      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ae:	e0c8      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a5e      	ldr	r2, [pc, #376]	@ (800b330 <UART_SetConfig+0x2ec>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d125      	bne.n	800b206 <UART_SetConfig+0x1c2>
 800b1ba:	4b5b      	ldr	r3, [pc, #364]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1c4:	2b30      	cmp	r3, #48	@ 0x30
 800b1c6:	d016      	beq.n	800b1f6 <UART_SetConfig+0x1b2>
 800b1c8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ca:	d818      	bhi.n	800b1fe <UART_SetConfig+0x1ba>
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d00a      	beq.n	800b1e6 <UART_SetConfig+0x1a2>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d814      	bhi.n	800b1fe <UART_SetConfig+0x1ba>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <UART_SetConfig+0x19a>
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d008      	beq.n	800b1ee <UART_SetConfig+0x1aa>
 800b1dc:	e00f      	b.n	800b1fe <UART_SetConfig+0x1ba>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1e4:	e0ad      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ec:	e0a9      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1f4:	e0a5      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1fc:	e0a1      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1fe:	2310      	movs	r3, #16
 800b200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b204:	e09d      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a4a      	ldr	r2, [pc, #296]	@ (800b334 <UART_SetConfig+0x2f0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d125      	bne.n	800b25c <UART_SetConfig+0x218>
 800b210:	4b45      	ldr	r3, [pc, #276]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b216:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b21a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b21c:	d016      	beq.n	800b24c <UART_SetConfig+0x208>
 800b21e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b220:	d818      	bhi.n	800b254 <UART_SetConfig+0x210>
 800b222:	2b80      	cmp	r3, #128	@ 0x80
 800b224:	d00a      	beq.n	800b23c <UART_SetConfig+0x1f8>
 800b226:	2b80      	cmp	r3, #128	@ 0x80
 800b228:	d814      	bhi.n	800b254 <UART_SetConfig+0x210>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <UART_SetConfig+0x1f0>
 800b22e:	2b40      	cmp	r3, #64	@ 0x40
 800b230:	d008      	beq.n	800b244 <UART_SetConfig+0x200>
 800b232:	e00f      	b.n	800b254 <UART_SetConfig+0x210>
 800b234:	2300      	movs	r3, #0
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	e082      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b23c:	2302      	movs	r3, #2
 800b23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b242:	e07e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b244:	2304      	movs	r3, #4
 800b246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b24a:	e07a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b24c:	2308      	movs	r3, #8
 800b24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b252:	e076      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b254:	2310      	movs	r3, #16
 800b256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b25a:	e072      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a35      	ldr	r2, [pc, #212]	@ (800b338 <UART_SetConfig+0x2f4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d12a      	bne.n	800b2bc <UART_SetConfig+0x278>
 800b266:	4b30      	ldr	r3, [pc, #192]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b26c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b274:	d01a      	beq.n	800b2ac <UART_SetConfig+0x268>
 800b276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27a:	d81b      	bhi.n	800b2b4 <UART_SetConfig+0x270>
 800b27c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b280:	d00c      	beq.n	800b29c <UART_SetConfig+0x258>
 800b282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b286:	d815      	bhi.n	800b2b4 <UART_SetConfig+0x270>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <UART_SetConfig+0x250>
 800b28c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b290:	d008      	beq.n	800b2a4 <UART_SetConfig+0x260>
 800b292:	e00f      	b.n	800b2b4 <UART_SetConfig+0x270>
 800b294:	2300      	movs	r3, #0
 800b296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b29a:	e052      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b29c:	2302      	movs	r3, #2
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e04e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2aa:	e04a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b2:	e046      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2b4:	2310      	movs	r3, #16
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	e042      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a17      	ldr	r2, [pc, #92]	@ (800b320 <UART_SetConfig+0x2dc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d13a      	bne.n	800b33c <UART_SetConfig+0x2f8>
 800b2c6:	4b18      	ldr	r3, [pc, #96]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b2d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2d4:	d01a      	beq.n	800b30c <UART_SetConfig+0x2c8>
 800b2d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2da:	d81b      	bhi.n	800b314 <UART_SetConfig+0x2d0>
 800b2dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e0:	d00c      	beq.n	800b2fc <UART_SetConfig+0x2b8>
 800b2e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e6:	d815      	bhi.n	800b314 <UART_SetConfig+0x2d0>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <UART_SetConfig+0x2b0>
 800b2ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2f0:	d008      	beq.n	800b304 <UART_SetConfig+0x2c0>
 800b2f2:	e00f      	b.n	800b314 <UART_SetConfig+0x2d0>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2fa:	e022      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b302:	e01e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b304:	2304      	movs	r3, #4
 800b306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b30a:	e01a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b30c:	2308      	movs	r3, #8
 800b30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b312:	e016      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b314:	2310      	movs	r3, #16
 800b316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	e012      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b31c:	cfff69f3 	.word	0xcfff69f3
 800b320:	40008000 	.word	0x40008000
 800b324:	40013800 	.word	0x40013800
 800b328:	40021000 	.word	0x40021000
 800b32c:	40004400 	.word	0x40004400
 800b330:	40004800 	.word	0x40004800
 800b334:	40004c00 	.word	0x40004c00
 800b338:	40005000 	.word	0x40005000
 800b33c:	2310      	movs	r3, #16
 800b33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4aae      	ldr	r2, [pc, #696]	@ (800b600 <UART_SetConfig+0x5bc>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	f040 8097 	bne.w	800b47c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b34e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b352:	2b08      	cmp	r3, #8
 800b354:	d823      	bhi.n	800b39e <UART_SetConfig+0x35a>
 800b356:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <UART_SetConfig+0x318>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b381 	.word	0x0800b381
 800b360:	0800b39f 	.word	0x0800b39f
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b39f 	.word	0x0800b39f
 800b36c:	0800b38f 	.word	0x0800b38f
 800b370:	0800b39f 	.word	0x0800b39f
 800b374:	0800b39f 	.word	0x0800b39f
 800b378:	0800b39f 	.word	0x0800b39f
 800b37c:	0800b397 	.word	0x0800b397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b380:	f7fc f812 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800b384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b386:	e010      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b388:	4b9e      	ldr	r3, [pc, #632]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b38a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b38c:	e00d      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b38e:	f7fb ff9d 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 800b392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b394:	e009      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b39a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b39c:	e005      	b.n	800b3aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8130 	beq.w	800b612 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	4a94      	ldr	r2, [pc, #592]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	4413      	add	r3, r2
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d305      	bcc.n	800b3e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d903      	bls.n	800b3ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3e8:	e113      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	60bb      	str	r3, [r7, #8]
 800b3f0:	60fa      	str	r2, [r7, #12]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f6:	4a84      	ldr	r2, [pc, #528]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2200      	movs	r2, #0
 800b400:	603b      	str	r3, [r7, #0]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b40c:	f7f5 fcd8 	bl	8000dc0 <__aeabi_uldivmod>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4610      	mov	r0, r2
 800b416:	4619      	mov	r1, r3
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	020b      	lsls	r3, r1, #8
 800b422:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b426:	0202      	lsls	r2, r0, #8
 800b428:	6979      	ldr	r1, [r7, #20]
 800b42a:	6849      	ldr	r1, [r1, #4]
 800b42c:	0849      	lsrs	r1, r1, #1
 800b42e:	2000      	movs	r0, #0
 800b430:	460c      	mov	r4, r1
 800b432:	4605      	mov	r5, r0
 800b434:	eb12 0804 	adds.w	r8, r2, r4
 800b438:	eb43 0905 	adc.w	r9, r3, r5
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	469a      	mov	sl, r3
 800b444:	4693      	mov	fp, r2
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	f7f5 fcb7 	bl	8000dc0 <__aeabi_uldivmod>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4613      	mov	r3, r2
 800b458:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b460:	d308      	bcc.n	800b474 <UART_SetConfig+0x430>
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b468:	d204      	bcs.n	800b474 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6a3a      	ldr	r2, [r7, #32]
 800b470:	60da      	str	r2, [r3, #12]
 800b472:	e0ce      	b.n	800b612 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b47a:	e0ca      	b.n	800b612 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b484:	d166      	bne.n	800b554 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d827      	bhi.n	800b4de <UART_SetConfig+0x49a>
 800b48e:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <UART_SetConfig+0x450>)
 800b490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b494:	0800b4b9 	.word	0x0800b4b9
 800b498:	0800b4c1 	.word	0x0800b4c1
 800b49c:	0800b4c9 	.word	0x0800b4c9
 800b4a0:	0800b4df 	.word	0x0800b4df
 800b4a4:	0800b4cf 	.word	0x0800b4cf
 800b4a8:	0800b4df 	.word	0x0800b4df
 800b4ac:	0800b4df 	.word	0x0800b4df
 800b4b0:	0800b4df 	.word	0x0800b4df
 800b4b4:	0800b4d7 	.word	0x0800b4d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4b8:	f7fb ff76 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800b4bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4be:	e014      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c0:	f7fb ff88 	bl	80073d4 <HAL_RCC_GetPCLK2Freq>
 800b4c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4c6:	e010      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4c8:	4b4e      	ldr	r3, [pc, #312]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b4ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4cc:	e00d      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ce:	f7fb fefd 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 800b4d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4d4:	e009      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4dc:	e005      	b.n	800b4ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8090 	beq.w	800b612 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f6:	4a44      	ldr	r2, [pc, #272]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	fbb3 f3f2 	udiv	r3, r3, r2
 800b504:	005a      	lsls	r2, r3, #1
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	441a      	add	r2, r3
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	fbb2 f3f3 	udiv	r3, r2, r3
 800b516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	2b0f      	cmp	r3, #15
 800b51c:	d916      	bls.n	800b54c <UART_SetConfig+0x508>
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b524:	d212      	bcs.n	800b54c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	f023 030f 	bic.w	r3, r3, #15
 800b52e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	085b      	lsrs	r3, r3, #1
 800b534:	b29b      	uxth	r3, r3
 800b536:	f003 0307 	and.w	r3, r3, #7
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	8bfb      	ldrh	r3, [r7, #30]
 800b53e:	4313      	orrs	r3, r2
 800b540:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	8bfa      	ldrh	r2, [r7, #30]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	e062      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b552:	e05e      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d828      	bhi.n	800b5ae <UART_SetConfig+0x56a>
 800b55c:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <UART_SetConfig+0x520>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	0800b5af 	.word	0x0800b5af
 800b574:	0800b59f 	.word	0x0800b59f
 800b578:	0800b5af 	.word	0x0800b5af
 800b57c:	0800b5af 	.word	0x0800b5af
 800b580:	0800b5af 	.word	0x0800b5af
 800b584:	0800b5a7 	.word	0x0800b5a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b588:	f7fb ff0e 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800b58c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b58e:	e014      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b590:	f7fb ff20 	bl	80073d4 <HAL_RCC_GetPCLK2Freq>
 800b594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b596:	e010      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b598:	4b1a      	ldr	r3, [pc, #104]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b59a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b59c:	e00d      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b59e:	f7fb fe95 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 800b5a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5a4:	e009      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5ac:	e005      	b.n	800b5ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5b8:	bf00      	nop
    }

    if (pclk != 0U)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d028      	beq.n	800b612 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	4a10      	ldr	r2, [pc, #64]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	441a      	add	r2, r3
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d910      	bls.n	800b60c <UART_SetConfig+0x5c8>
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5f0:	d20c      	bcs.n	800b60c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60da      	str	r2, [r3, #12]
 800b5fc:	e009      	b.n	800b612 <UART_SetConfig+0x5ce>
 800b5fe:	bf00      	nop
 800b600:	40008000 	.word	0x40008000
 800b604:	00f42400 	.word	0x00f42400
 800b608:	08019e58 	.word	0x08019e58
      }
      else
      {
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2201      	movs	r2, #1
 800b616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2200      	movs	r2, #0
 800b62c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b62e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b632:	4618      	mov	r0, r3
 800b634:	3730      	adds	r7, #48	@ 0x30
 800b636:	46bd      	mov	sp, r7
 800b638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b63c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f003 0308 	and.w	r3, r3, #8
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00a      	beq.n	800b666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	430a      	orrs	r2, r1
 800b664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d0:	f003 0310 	and.w	r3, r3, #16
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	430a      	orrs	r2, r1
 800b70e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01a      	beq.n	800b752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b73a:	d10a      	bne.n	800b752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	430a      	orrs	r2, r1
 800b750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	605a      	str	r2, [r3, #4]
  }
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b098      	sub	sp, #96	@ 0x60
 800b784:	af02      	add	r7, sp, #8
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b790:	f7fa fa82 	bl	8005c98 <HAL_GetTick>
 800b794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0308 	and.w	r3, r3, #8
 800b7a0:	2b08      	cmp	r3, #8
 800b7a2:	d12f      	bne.n	800b804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f88e 	bl	800b8d4 <UART_WaitOnFlagUntilTimeout>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d022      	beq.n	800b804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e6      	bne.n	800b7be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e063      	b.n	800b8cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b04      	cmp	r3, #4
 800b810:	d149      	bne.n	800b8a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b81a:	2200      	movs	r2, #0
 800b81c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f857 	bl	800b8d4 <UART_WaitOnFlagUntilTimeout>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d03c      	beq.n	800b8a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	623b      	str	r3, [r7, #32]
   return(result);
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b84a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b84c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e6      	bne.n	800b82c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3308      	adds	r3, #8
 800b864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 0301 	bic.w	r3, r3, #1
 800b874:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b87e:	61fa      	str	r2, [r7, #28]
 800b880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	69b9      	ldr	r1, [r7, #24]
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	617b      	str	r3, [r7, #20]
   return(result);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e012      	b.n	800b8cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3758      	adds	r7, #88	@ 0x58
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8e4:	e04f      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d04b      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ee:	f7fa f9d3 	bl	8005c98 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d302      	bcc.n	800b904 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e04e      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d037      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b80      	cmp	r3, #128	@ 0x80
 800b91a:	d034      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b40      	cmp	r3, #64	@ 0x40
 800b920:	d031      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	f003 0308 	and.w	r3, r3, #8
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d110      	bne.n	800b952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2208      	movs	r2, #8
 800b936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f920 	bl	800bb7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2208      	movs	r2, #8
 800b942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e029      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b95c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b960:	d111      	bne.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b96a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f906 	bl	800bb7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2220      	movs	r2, #32
 800b976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e00f      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69da      	ldr	r2, [r3, #28]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4013      	ands	r3, r2
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	429a      	cmp	r2, r3
 800b994:	bf0c      	ite	eq
 800b996:	2301      	moveq	r3, #1
 800b998:	2300      	movne	r3, #0
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	461a      	mov	r2, r3
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d0a0      	beq.n	800b8e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b096      	sub	sp, #88	@ 0x58
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	88fa      	ldrh	r2, [r7, #6]
 800b9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2222      	movs	r2, #34	@ 0x22
 800b9d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d02d      	beq.n	800ba42 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ec:	4a40      	ldr	r2, [pc, #256]	@ (800baf0 <UART_Start_Receive_DMA+0x140>)
 800b9ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9f6:	4a3f      	ldr	r2, [pc, #252]	@ (800baf4 <UART_Start_Receive_DMA+0x144>)
 800b9f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba00:	4a3d      	ldr	r2, [pc, #244]	@ (800baf8 <UART_Start_Receive_DMA+0x148>)
 800ba02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3324      	adds	r3, #36	@ 0x24
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba20:	461a      	mov	r2, r3
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	f7fa fafc 	bl	8006020 <HAL_DMA_Start_IT>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2210      	movs	r2, #16
 800ba32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e051      	b.n	800bae6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d018      	beq.n	800ba7c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba6a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba70:	e841 2300 	strex	r3, r2, [r1]
 800ba74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ba76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e6      	bne.n	800ba4a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3308      	adds	r3, #8
 800ba82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	e853 3f00 	ldrex	r3, [r3]
 800ba8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	f043 0301 	orr.w	r3, r3, #1
 800ba92:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3308      	adds	r3, #8
 800ba9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba9c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ba9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800baa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800baaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e5      	bne.n	800ba7c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	e853 3f00 	ldrex	r3, [r3]
 800babe:	613b      	str	r3, [r7, #16]
   return(result);
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3308      	adds	r3, #8
 800bace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bad0:	623a      	str	r2, [r7, #32]
 800bad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad4:	69f9      	ldr	r1, [r7, #28]
 800bad6:	6a3a      	ldr	r2, [r7, #32]
 800bad8:	e841 2300 	strex	r3, r2, [r1]
 800badc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e5      	bne.n	800bab0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3758      	adds	r7, #88	@ 0x58
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	0800bd09 	.word	0x0800bd09
 800baf4:	0800be3d 	.word	0x0800be3d
 800baf8:	0800be83 	.word	0x0800be83

0800bafc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b08f      	sub	sp, #60	@ 0x3c
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb24:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e6      	bne.n	800bb04 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bb4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3308      	adds	r3, #8
 800bb54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb56:	61ba      	str	r2, [r7, #24]
 800bb58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5a:	6979      	ldr	r1, [r7, #20]
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	e841 2300 	strex	r3, r2, [r1]
 800bb62:	613b      	str	r3, [r7, #16]
   return(result);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1e5      	bne.n	800bb36 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bb72:	bf00      	nop
 800bb74:	373c      	adds	r7, #60	@ 0x3c
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b095      	sub	sp, #84	@ 0x54
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8e:	e853 3f00 	ldrex	r3, [r3]
 800bb92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	461a      	mov	r2, r3
 800bba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bba4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bba6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbac:	e841 2300 	strex	r3, r2, [r1]
 800bbb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e6      	bne.n	800bb86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	e853 3f00 	ldrex	r3, [r3]
 800bbc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbce:	f023 0301 	bic.w	r3, r3, #1
 800bbd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3308      	adds	r3, #8
 800bbda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e3      	bne.n	800bbb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d118      	bne.n	800bc2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f023 0310 	bic.w	r3, r3, #16
 800bc0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc16:	61bb      	str	r3, [r7, #24]
 800bc18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6979      	ldr	r1, [r7, #20]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	613b      	str	r3, [r7, #16]
   return(result);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e6      	bne.n	800bbf8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc3e:	bf00      	nop
 800bc40:	3754      	adds	r7, #84	@ 0x54
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b090      	sub	sp, #64	@ 0x40
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0320 	and.w	r3, r3, #32
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d137      	bne.n	800bcd6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3308      	adds	r3, #8
 800bc74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc78:	e853 3f00 	ldrex	r3, [r3]
 800bc7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc84:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc8e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e5      	bne.n	800bc6e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	e853 3f00 	ldrex	r3, [r3]
 800bcae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc0:	61fb      	str	r3, [r7, #28]
 800bcc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	69b9      	ldr	r1, [r7, #24]
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	617b      	str	r3, [r7, #20]
   return(result);
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e6      	bne.n	800bca2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcd4:	e004      	b.n	800bce0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bcd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bcdc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bcde:	4798      	blx	r3
}
 800bce0:	bf00      	nop
 800bce2:	3740      	adds	r7, #64	@ 0x40
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd00:	bf00      	nop
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b09c      	sub	sp, #112	@ 0x70
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d171      	bne.n	800be08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bd24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd34:	e853 3f00 	ldrex	r3, [r3]
 800bd38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd52:	e841 2300 	strex	r3, r2, [r1]
 800bd56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e6      	bne.n	800bd2c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3308      	adds	r3, #8
 800bd64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd70:	f023 0301 	bic.w	r3, r3, #1
 800bd74:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd7e:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e5      	bne.n	800bd5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3308      	adds	r3, #8
 800bd98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	623b      	str	r3, [r7, #32]
   return(result);
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bda8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3308      	adds	r3, #8
 800bdb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bdb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e5      	bne.n	800bd92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bdc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d118      	bne.n	800be08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 0310 	bic.w	r3, r3, #16
 800bdea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdf4:	61fb      	str	r3, [r7, #28]
 800bdf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf8:	69b9      	ldr	r1, [r7, #24]
 800bdfa:	69fa      	ldr	r2, [r7, #28]
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	617b      	str	r3, [r7, #20]
   return(result);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e6      	bne.n	800bdd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be0a:	2200      	movs	r2, #0
 800be0c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be12:	2b01      	cmp	r3, #1
 800be14:	d109      	bne.n	800be2a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800be16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800be1e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800be22:	4611      	mov	r1, r2
 800be24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be26:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be28:	e004      	b.n	800be34 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800be2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be32:	4798      	blx	r3
}
 800be34:	bf00      	nop
 800be36:	3770      	adds	r7, #112	@ 0x70
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2201      	movs	r2, #1
 800be4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d10b      	bne.n	800be70 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800be64:	0852      	lsrs	r2, r2, #1
 800be66:	b292      	uxth	r2, r2
 800be68:	4611      	mov	r1, r2
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be6e:	e004      	b.n	800be7a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	4798      	blx	r3
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b086      	sub	sp, #24
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beaa:	2b80      	cmp	r3, #128	@ 0x80
 800beac:	d109      	bne.n	800bec2 <UART_DMAError+0x40>
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2b21      	cmp	r3, #33	@ 0x21
 800beb2:	d106      	bne.n	800bec2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bebc:	6978      	ldr	r0, [r7, #20]
 800bebe:	f7ff fe1d 	bl	800bafc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800becc:	2b40      	cmp	r3, #64	@ 0x40
 800bece:	d109      	bne.n	800bee4 <UART_DMAError+0x62>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b22      	cmp	r3, #34	@ 0x22
 800bed4:	d106      	bne.n	800bee4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bede:	6978      	ldr	r0, [r7, #20]
 800bee0:	f7ff fe4d 	bl	800bb7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beea:	f043 0210 	orr.w	r2, r3, #16
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800befa:	6978      	ldr	r0, [r7, #20]
 800befc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800befe:	bf00      	nop
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf26:	bf00      	nop
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b088      	sub	sp, #32
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	e853 3f00 	ldrex	r3, [r3]
 800bf42:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	61bb      	str	r3, [r7, #24]
 800bf56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6979      	ldr	r1, [r7, #20]
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	613b      	str	r3, [r7, #16]
   return(result);
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e6      	bne.n	800bf36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf80:	bf00      	nop
 800bf82:	3720      	adds	r7, #32
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d101      	bne.n	800bfda <HAL_UARTEx_DisableFifoMode+0x16>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e027      	b.n	800c02a <HAL_UARTEx_DisableFifoMode+0x66>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2224      	movs	r2, #36	@ 0x24
 800bfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 0201 	bic.w	r2, r2, #1
 800c000:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c046:	2b01      	cmp	r3, #1
 800c048:	d101      	bne.n	800c04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c04a:	2302      	movs	r3, #2
 800c04c:	e02d      	b.n	800c0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2201      	movs	r2, #1
 800c052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2224      	movs	r2, #36	@ 0x24
 800c05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 0201 	bic.w	r2, r2, #1
 800c074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f850 	bl	800c130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2220      	movs	r2, #32
 800c09c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d101      	bne.n	800c0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e02d      	b.n	800c126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2224      	movs	r2, #36	@ 0x24
 800c0d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f022 0201 	bic.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	430a      	orrs	r2, r1
 800c104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f812 	bl	800c130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2220      	movs	r2, #32
 800c118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d108      	bne.n	800c152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c150:	e031      	b.n	800c1b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c152:	2308      	movs	r3, #8
 800c154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c156:	2308      	movs	r3, #8
 800c158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	0e5b      	lsrs	r3, r3, #25
 800c162:	b2db      	uxtb	r3, r3
 800c164:	f003 0307 	and.w	r3, r3, #7
 800c168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	0f5b      	lsrs	r3, r3, #29
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 0307 	and.w	r3, r3, #7
 800c178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	7b3a      	ldrb	r2, [r7, #12]
 800c17e:	4911      	ldr	r1, [pc, #68]	@ (800c1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c180:	5c8a      	ldrb	r2, [r1, r2]
 800c182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c186:	7b3a      	ldrb	r2, [r7, #12]
 800c188:	490f      	ldr	r1, [pc, #60]	@ (800c1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c18a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c190:	b29a      	uxth	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	7b7a      	ldrb	r2, [r7, #13]
 800c19c:	4909      	ldr	r1, [pc, #36]	@ (800c1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c19e:	5c8a      	ldrb	r2, [r1, r2]
 800c1a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1a4:	7b7a      	ldrb	r2, [r7, #13]
 800c1a6:	4908      	ldr	r1, [pc, #32]	@ (800c1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c1a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	08019e70 	.word	0x08019e70
 800c1c8:	08019e78 	.word	0x08019e78

0800c1cc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	edd3 7a07 	vldr	s15, [r3, #28]
 800c1e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1fc:	eeb1 7a67 	vneg.f32	s14, s15
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	edd3 7a08 	vldr	s15, [r3, #32]
 800c206:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a1a      	ldr	r2, [r3, #32]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d006      	beq.n	800c230 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	330c      	adds	r3, #12
 800c226:	220c      	movs	r2, #12
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f804 	bl	800c238 <memset>
  }

}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <memset>:
 800c238:	4402      	add	r2, r0
 800c23a:	4603      	mov	r3, r0
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d100      	bne.n	800c242 <memset+0xa>
 800c240:	4770      	bx	lr
 800c242:	f803 1b01 	strb.w	r1, [r3], #1
 800c246:	e7f9      	b.n	800c23c <memset+0x4>

0800c248 <__errno>:
 800c248:	4b01      	ldr	r3, [pc, #4]	@ (800c250 <__errno+0x8>)
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20000274 	.word	0x20000274

0800c254 <__libc_init_array>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	4d0d      	ldr	r5, [pc, #52]	@ (800c28c <__libc_init_array+0x38>)
 800c258:	4c0d      	ldr	r4, [pc, #52]	@ (800c290 <__libc_init_array+0x3c>)
 800c25a:	1b64      	subs	r4, r4, r5
 800c25c:	10a4      	asrs	r4, r4, #2
 800c25e:	2600      	movs	r6, #0
 800c260:	42a6      	cmp	r6, r4
 800c262:	d109      	bne.n	800c278 <__libc_init_array+0x24>
 800c264:	4d0b      	ldr	r5, [pc, #44]	@ (800c294 <__libc_init_array+0x40>)
 800c266:	4c0c      	ldr	r4, [pc, #48]	@ (800c298 <__libc_init_array+0x44>)
 800c268:	f000 ff32 	bl	800d0d0 <_init>
 800c26c:	1b64      	subs	r4, r4, r5
 800c26e:	10a4      	asrs	r4, r4, #2
 800c270:	2600      	movs	r6, #0
 800c272:	42a6      	cmp	r6, r4
 800c274:	d105      	bne.n	800c282 <__libc_init_array+0x2e>
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	f855 3b04 	ldr.w	r3, [r5], #4
 800c27c:	4798      	blx	r3
 800c27e:	3601      	adds	r6, #1
 800c280:	e7ee      	b.n	800c260 <__libc_init_array+0xc>
 800c282:	f855 3b04 	ldr.w	r3, [r5], #4
 800c286:	4798      	blx	r3
 800c288:	3601      	adds	r6, #1
 800c28a:	e7f2      	b.n	800c272 <__libc_init_array+0x1e>
 800c28c:	0801a290 	.word	0x0801a290
 800c290:	0801a290 	.word	0x0801a290
 800c294:	0801a290 	.word	0x0801a290
 800c298:	0801a294 	.word	0x0801a294

0800c29c <memcpy>:
 800c29c:	440a      	add	r2, r1
 800c29e:	4291      	cmp	r1, r2
 800c2a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2a4:	d100      	bne.n	800c2a8 <memcpy+0xc>
 800c2a6:	4770      	bx	lr
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2b2:	4291      	cmp	r1, r2
 800c2b4:	d1f9      	bne.n	800c2aa <memcpy+0xe>
 800c2b6:	bd10      	pop	{r4, pc}

0800c2b8 <atan2f>:
 800c2b8:	f000 b94c 	b.w	800c554 <__ieee754_atan2f>

0800c2bc <sqrtf>:
 800c2bc:	b508      	push	{r3, lr}
 800c2be:	ed2d 8b02 	vpush	{d8}
 800c2c2:	eeb0 8a40 	vmov.f32	s16, s0
 800c2c6:	f000 f8a1 	bl	800c40c <__ieee754_sqrtf>
 800c2ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800c2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d2:	d60c      	bvs.n	800c2ee <sqrtf+0x32>
 800c2d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c2f4 <sqrtf+0x38>
 800c2d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e0:	d505      	bpl.n	800c2ee <sqrtf+0x32>
 800c2e2:	f7ff ffb1 	bl	800c248 <__errno>
 800c2e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c2ea:	2321      	movs	r3, #33	@ 0x21
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	ecbd 8b02 	vpop	{d8}
 800c2f2:	bd08      	pop	{r3, pc}
 800c2f4:	00000000 	.word	0x00000000

0800c2f8 <cosf>:
 800c2f8:	ee10 3a10 	vmov	r3, s0
 800c2fc:	b507      	push	{r0, r1, r2, lr}
 800c2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c378 <cosf+0x80>)
 800c300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c304:	4293      	cmp	r3, r2
 800c306:	d806      	bhi.n	800c316 <cosf+0x1e>
 800c308:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c37c <cosf+0x84>
 800c30c:	b003      	add	sp, #12
 800c30e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c312:	f000 b87f 	b.w	800c414 <__kernel_cosf>
 800c316:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c31a:	d304      	bcc.n	800c326 <cosf+0x2e>
 800c31c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c320:	b003      	add	sp, #12
 800c322:	f85d fb04 	ldr.w	pc, [sp], #4
 800c326:	4668      	mov	r0, sp
 800c328:	f000 f9b4 	bl	800c694 <__ieee754_rem_pio2f>
 800c32c:	f000 0003 	and.w	r0, r0, #3
 800c330:	2801      	cmp	r0, #1
 800c332:	d009      	beq.n	800c348 <cosf+0x50>
 800c334:	2802      	cmp	r0, #2
 800c336:	d010      	beq.n	800c35a <cosf+0x62>
 800c338:	b9b0      	cbnz	r0, 800c368 <cosf+0x70>
 800c33a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c33e:	ed9d 0a00 	vldr	s0, [sp]
 800c342:	f000 f867 	bl	800c414 <__kernel_cosf>
 800c346:	e7eb      	b.n	800c320 <cosf+0x28>
 800c348:	eddd 0a01 	vldr	s1, [sp, #4]
 800c34c:	ed9d 0a00 	vldr	s0, [sp]
 800c350:	f000 f8b8 	bl	800c4c4 <__kernel_sinf>
 800c354:	eeb1 0a40 	vneg.f32	s0, s0
 800c358:	e7e2      	b.n	800c320 <cosf+0x28>
 800c35a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c35e:	ed9d 0a00 	vldr	s0, [sp]
 800c362:	f000 f857 	bl	800c414 <__kernel_cosf>
 800c366:	e7f5      	b.n	800c354 <cosf+0x5c>
 800c368:	eddd 0a01 	vldr	s1, [sp, #4]
 800c36c:	ed9d 0a00 	vldr	s0, [sp]
 800c370:	2001      	movs	r0, #1
 800c372:	f000 f8a7 	bl	800c4c4 <__kernel_sinf>
 800c376:	e7d3      	b.n	800c320 <cosf+0x28>
 800c378:	3f490fd8 	.word	0x3f490fd8
 800c37c:	00000000 	.word	0x00000000

0800c380 <sinf>:
 800c380:	ee10 3a10 	vmov	r3, s0
 800c384:	b507      	push	{r0, r1, r2, lr}
 800c386:	4a1f      	ldr	r2, [pc, #124]	@ (800c404 <sinf+0x84>)
 800c388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d807      	bhi.n	800c3a0 <sinf+0x20>
 800c390:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c408 <sinf+0x88>
 800c394:	2000      	movs	r0, #0
 800c396:	b003      	add	sp, #12
 800c398:	f85d eb04 	ldr.w	lr, [sp], #4
 800c39c:	f000 b892 	b.w	800c4c4 <__kernel_sinf>
 800c3a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c3a4:	d304      	bcc.n	800c3b0 <sinf+0x30>
 800c3a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c3aa:	b003      	add	sp, #12
 800c3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3b0:	4668      	mov	r0, sp
 800c3b2:	f000 f96f 	bl	800c694 <__ieee754_rem_pio2f>
 800c3b6:	f000 0003 	and.w	r0, r0, #3
 800c3ba:	2801      	cmp	r0, #1
 800c3bc:	d00a      	beq.n	800c3d4 <sinf+0x54>
 800c3be:	2802      	cmp	r0, #2
 800c3c0:	d00f      	beq.n	800c3e2 <sinf+0x62>
 800c3c2:	b9c0      	cbnz	r0, 800c3f6 <sinf+0x76>
 800c3c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3c8:	ed9d 0a00 	vldr	s0, [sp]
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	f000 f879 	bl	800c4c4 <__kernel_sinf>
 800c3d2:	e7ea      	b.n	800c3aa <sinf+0x2a>
 800c3d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3d8:	ed9d 0a00 	vldr	s0, [sp]
 800c3dc:	f000 f81a 	bl	800c414 <__kernel_cosf>
 800c3e0:	e7e3      	b.n	800c3aa <sinf+0x2a>
 800c3e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3e6:	ed9d 0a00 	vldr	s0, [sp]
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	f000 f86a 	bl	800c4c4 <__kernel_sinf>
 800c3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800c3f4:	e7d9      	b.n	800c3aa <sinf+0x2a>
 800c3f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3fa:	ed9d 0a00 	vldr	s0, [sp]
 800c3fe:	f000 f809 	bl	800c414 <__kernel_cosf>
 800c402:	e7f5      	b.n	800c3f0 <sinf+0x70>
 800c404:	3f490fd8 	.word	0x3f490fd8
 800c408:	00000000 	.word	0x00000000

0800c40c <__ieee754_sqrtf>:
 800c40c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c410:	4770      	bx	lr
	...

0800c414 <__kernel_cosf>:
 800c414:	ee10 3a10 	vmov	r3, s0
 800c418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c41c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c420:	eef0 6a40 	vmov.f32	s13, s0
 800c424:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c428:	d204      	bcs.n	800c434 <__kernel_cosf+0x20>
 800c42a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c42e:	ee17 2a90 	vmov	r2, s15
 800c432:	b342      	cbz	r2, 800c486 <__kernel_cosf+0x72>
 800c434:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c438:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c4a4 <__kernel_cosf+0x90>
 800c43c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c4a8 <__kernel_cosf+0x94>
 800c440:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ac <__kernel_cosf+0x98>)
 800c442:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c446:	4293      	cmp	r3, r2
 800c448:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c4b0 <__kernel_cosf+0x9c>
 800c44c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c450:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c4b4 <__kernel_cosf+0xa0>
 800c454:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c458:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c4b8 <__kernel_cosf+0xa4>
 800c45c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c460:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c4bc <__kernel_cosf+0xa8>
 800c464:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c468:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c46c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c470:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c474:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47c:	d804      	bhi.n	800c488 <__kernel_cosf+0x74>
 800c47e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c482:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c486:	4770      	bx	lr
 800c488:	4a0d      	ldr	r2, [pc, #52]	@ (800c4c0 <__kernel_cosf+0xac>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	bf9a      	itte	ls
 800c48e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c492:	ee07 3a10 	vmovls	s14, r3
 800c496:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c49a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4a2:	e7ec      	b.n	800c47e <__kernel_cosf+0x6a>
 800c4a4:	ad47d74e 	.word	0xad47d74e
 800c4a8:	310f74f6 	.word	0x310f74f6
 800c4ac:	3e999999 	.word	0x3e999999
 800c4b0:	b493f27c 	.word	0xb493f27c
 800c4b4:	37d00d01 	.word	0x37d00d01
 800c4b8:	bab60b61 	.word	0xbab60b61
 800c4bc:	3d2aaaab 	.word	0x3d2aaaab
 800c4c0:	3f480000 	.word	0x3f480000

0800c4c4 <__kernel_sinf>:
 800c4c4:	ee10 3a10 	vmov	r3, s0
 800c4c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c4d0:	d204      	bcs.n	800c4dc <__kernel_sinf+0x18>
 800c4d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c4d6:	ee17 3a90 	vmov	r3, s15
 800c4da:	b35b      	cbz	r3, 800c534 <__kernel_sinf+0x70>
 800c4dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c4e0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c538 <__kernel_sinf+0x74>
 800c4e4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c53c <__kernel_sinf+0x78>
 800c4e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c4ec:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c540 <__kernel_sinf+0x7c>
 800c4f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4f4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c544 <__kernel_sinf+0x80>
 800c4f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c4fc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c548 <__kernel_sinf+0x84>
 800c500:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c504:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c508:	b930      	cbnz	r0, 800c518 <__kernel_sinf+0x54>
 800c50a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c54c <__kernel_sinf+0x88>
 800c50e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c512:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c516:	4770      	bx	lr
 800c518:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c51c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c520:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c524:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c528:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c550 <__kernel_sinf+0x8c>
 800c52c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c530:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	2f2ec9d3 	.word	0x2f2ec9d3
 800c53c:	b2d72f34 	.word	0xb2d72f34
 800c540:	3638ef1b 	.word	0x3638ef1b
 800c544:	b9500d01 	.word	0xb9500d01
 800c548:	3c088889 	.word	0x3c088889
 800c54c:	be2aaaab 	.word	0xbe2aaaab
 800c550:	3e2aaaab 	.word	0x3e2aaaab

0800c554 <__ieee754_atan2f>:
 800c554:	ee10 2a90 	vmov	r2, s1
 800c558:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c55c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c560:	b510      	push	{r4, lr}
 800c562:	eef0 7a40 	vmov.f32	s15, s0
 800c566:	d806      	bhi.n	800c576 <__ieee754_atan2f+0x22>
 800c568:	ee10 0a10 	vmov	r0, s0
 800c56c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c570:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c574:	d904      	bls.n	800c580 <__ieee754_atan2f+0x2c>
 800c576:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c57a:	eeb0 0a67 	vmov.f32	s0, s15
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c584:	d103      	bne.n	800c58e <__ieee754_atan2f+0x3a>
 800c586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c58a:	f000 b9b3 	b.w	800c8f4 <atanf>
 800c58e:	1794      	asrs	r4, r2, #30
 800c590:	f004 0402 	and.w	r4, r4, #2
 800c594:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c598:	b943      	cbnz	r3, 800c5ac <__ieee754_atan2f+0x58>
 800c59a:	2c02      	cmp	r4, #2
 800c59c:	d05e      	beq.n	800c65c <__ieee754_atan2f+0x108>
 800c59e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c670 <__ieee754_atan2f+0x11c>
 800c5a2:	2c03      	cmp	r4, #3
 800c5a4:	bf08      	it	eq
 800c5a6:	eef0 7a47 	vmoveq.f32	s15, s14
 800c5aa:	e7e6      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5ac:	b941      	cbnz	r1, 800c5c0 <__ieee754_atan2f+0x6c>
 800c5ae:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c674 <__ieee754_atan2f+0x120>
 800c5b2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c678 <__ieee754_atan2f+0x124>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	bfa8      	it	ge
 800c5ba:	eef0 7a47 	vmovge.f32	s15, s14
 800c5be:	e7dc      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5c0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5c4:	d110      	bne.n	800c5e8 <__ieee754_atan2f+0x94>
 800c5c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5ce:	d107      	bne.n	800c5e0 <__ieee754_atan2f+0x8c>
 800c5d0:	2c02      	cmp	r4, #2
 800c5d2:	d846      	bhi.n	800c662 <__ieee754_atan2f+0x10e>
 800c5d4:	4b29      	ldr	r3, [pc, #164]	@ (800c67c <__ieee754_atan2f+0x128>)
 800c5d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5da:	edd3 7a00 	vldr	s15, [r3]
 800c5de:	e7cc      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5e0:	2c02      	cmp	r4, #2
 800c5e2:	d841      	bhi.n	800c668 <__ieee754_atan2f+0x114>
 800c5e4:	4b26      	ldr	r3, [pc, #152]	@ (800c680 <__ieee754_atan2f+0x12c>)
 800c5e6:	e7f6      	b.n	800c5d6 <__ieee754_atan2f+0x82>
 800c5e8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5ec:	d0df      	beq.n	800c5ae <__ieee754_atan2f+0x5a>
 800c5ee:	1a5b      	subs	r3, r3, r1
 800c5f0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c5f4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c5f8:	da1a      	bge.n	800c630 <__ieee754_atan2f+0xdc>
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	da01      	bge.n	800c602 <__ieee754_atan2f+0xae>
 800c5fe:	313c      	adds	r1, #60	@ 0x3c
 800c600:	db19      	blt.n	800c636 <__ieee754_atan2f+0xe2>
 800c602:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c606:	f000 fa49 	bl	800ca9c <fabsf>
 800c60a:	f000 f973 	bl	800c8f4 <atanf>
 800c60e:	eef0 7a40 	vmov.f32	s15, s0
 800c612:	2c01      	cmp	r4, #1
 800c614:	d012      	beq.n	800c63c <__ieee754_atan2f+0xe8>
 800c616:	2c02      	cmp	r4, #2
 800c618:	d017      	beq.n	800c64a <__ieee754_atan2f+0xf6>
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	d0ad      	beq.n	800c57a <__ieee754_atan2f+0x26>
 800c61e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c684 <__ieee754_atan2f+0x130>
 800c622:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c626:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c688 <__ieee754_atan2f+0x134>
 800c62a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c62e:	e7a4      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c630:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c678 <__ieee754_atan2f+0x124>
 800c634:	e7ed      	b.n	800c612 <__ieee754_atan2f+0xbe>
 800c636:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c68c <__ieee754_atan2f+0x138>
 800c63a:	e7ea      	b.n	800c612 <__ieee754_atan2f+0xbe>
 800c63c:	ee17 3a90 	vmov	r3, s15
 800c640:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c644:	ee07 3a90 	vmov	s15, r3
 800c648:	e797      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c64a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c684 <__ieee754_atan2f+0x130>
 800c64e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c652:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c688 <__ieee754_atan2f+0x134>
 800c656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c65a:	e78e      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c65c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c688 <__ieee754_atan2f+0x134>
 800c660:	e78b      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c662:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c690 <__ieee754_atan2f+0x13c>
 800c666:	e788      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c668:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c68c <__ieee754_atan2f+0x138>
 800c66c:	e785      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c66e:	bf00      	nop
 800c670:	c0490fdb 	.word	0xc0490fdb
 800c674:	bfc90fdb 	.word	0xbfc90fdb
 800c678:	3fc90fdb 	.word	0x3fc90fdb
 800c67c:	08019e8c 	.word	0x08019e8c
 800c680:	08019e80 	.word	0x08019e80
 800c684:	33bbbd2e 	.word	0x33bbbd2e
 800c688:	40490fdb 	.word	0x40490fdb
 800c68c:	00000000 	.word	0x00000000
 800c690:	3f490fdb 	.word	0x3f490fdb

0800c694 <__ieee754_rem_pio2f>:
 800c694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c696:	ee10 6a10 	vmov	r6, s0
 800c69a:	4b88      	ldr	r3, [pc, #544]	@ (800c8bc <__ieee754_rem_pio2f+0x228>)
 800c69c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c6a0:	429d      	cmp	r5, r3
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	d805      	bhi.n	800c6b4 <__ieee754_rem_pio2f+0x20>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	ed80 0a00 	vstr	s0, [r0]
 800c6ae:	6043      	str	r3, [r0, #4]
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e022      	b.n	800c6fa <__ieee754_rem_pio2f+0x66>
 800c6b4:	4b82      	ldr	r3, [pc, #520]	@ (800c8c0 <__ieee754_rem_pio2f+0x22c>)
 800c6b6:	429d      	cmp	r5, r3
 800c6b8:	d83a      	bhi.n	800c730 <__ieee754_rem_pio2f+0x9c>
 800c6ba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c6be:	2e00      	cmp	r6, #0
 800c6c0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c8c4 <__ieee754_rem_pio2f+0x230>
 800c6c4:	4a80      	ldr	r2, [pc, #512]	@ (800c8c8 <__ieee754_rem_pio2f+0x234>)
 800c6c6:	f023 030f 	bic.w	r3, r3, #15
 800c6ca:	dd18      	ble.n	800c6fe <__ieee754_rem_pio2f+0x6a>
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c6d2:	bf09      	itett	eq
 800c6d4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c8cc <__ieee754_rem_pio2f+0x238>
 800c6d8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c8d0 <__ieee754_rem_pio2f+0x23c>
 800c6dc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c8d4 <__ieee754_rem_pio2f+0x240>
 800c6e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c6e4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c6e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ec:	ed80 7a00 	vstr	s14, [r0]
 800c6f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6f4:	edc0 7a01 	vstr	s15, [r0, #4]
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	b007      	add	sp, #28
 800c6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fe:	4293      	cmp	r3, r2
 800c700:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c704:	bf09      	itett	eq
 800c706:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c8cc <__ieee754_rem_pio2f+0x238>
 800c70a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c8d0 <__ieee754_rem_pio2f+0x23c>
 800c70e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c8d4 <__ieee754_rem_pio2f+0x240>
 800c712:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c716:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c71a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c71e:	ed80 7a00 	vstr	s14, [r0]
 800c722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c726:	edc0 7a01 	vstr	s15, [r0, #4]
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	e7e4      	b.n	800c6fa <__ieee754_rem_pio2f+0x66>
 800c730:	4b69      	ldr	r3, [pc, #420]	@ (800c8d8 <__ieee754_rem_pio2f+0x244>)
 800c732:	429d      	cmp	r5, r3
 800c734:	d873      	bhi.n	800c81e <__ieee754_rem_pio2f+0x18a>
 800c736:	f000 f9b1 	bl	800ca9c <fabsf>
 800c73a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c8dc <__ieee754_rem_pio2f+0x248>
 800c73e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c742:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c74a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c74e:	ee17 0a90 	vmov	r0, s15
 800c752:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c8c4 <__ieee754_rem_pio2f+0x230>
 800c756:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c75a:	281f      	cmp	r0, #31
 800c75c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c8d0 <__ieee754_rem_pio2f+0x23c>
 800c760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c764:	eeb1 6a47 	vneg.f32	s12, s14
 800c768:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c76c:	ee16 1a90 	vmov	r1, s13
 800c770:	dc09      	bgt.n	800c786 <__ieee754_rem_pio2f+0xf2>
 800c772:	4a5b      	ldr	r2, [pc, #364]	@ (800c8e0 <__ieee754_rem_pio2f+0x24c>)
 800c774:	1e47      	subs	r7, r0, #1
 800c776:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c77a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c77e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c782:	4293      	cmp	r3, r2
 800c784:	d107      	bne.n	800c796 <__ieee754_rem_pio2f+0x102>
 800c786:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c78a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c78e:	2a08      	cmp	r2, #8
 800c790:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c794:	dc14      	bgt.n	800c7c0 <__ieee754_rem_pio2f+0x12c>
 800c796:	6021      	str	r1, [r4, #0]
 800c798:	ed94 7a00 	vldr	s14, [r4]
 800c79c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c7a0:	2e00      	cmp	r6, #0
 800c7a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7a6:	ed84 0a01 	vstr	s0, [r4, #4]
 800c7aa:	daa6      	bge.n	800c6fa <__ieee754_rem_pio2f+0x66>
 800c7ac:	eeb1 7a47 	vneg.f32	s14, s14
 800c7b0:	eeb1 0a40 	vneg.f32	s0, s0
 800c7b4:	ed84 7a00 	vstr	s14, [r4]
 800c7b8:	ed84 0a01 	vstr	s0, [r4, #4]
 800c7bc:	4240      	negs	r0, r0
 800c7be:	e79c      	b.n	800c6fa <__ieee754_rem_pio2f+0x66>
 800c7c0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c8cc <__ieee754_rem_pio2f+0x238>
 800c7c4:	eef0 6a40 	vmov.f32	s13, s0
 800c7c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c7cc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c7d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c7d4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c8d4 <__ieee754_rem_pio2f+0x240>
 800c7d8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c7dc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c7e0:	ee15 2a90 	vmov	r2, s11
 800c7e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c7e8:	1a5b      	subs	r3, r3, r1
 800c7ea:	2b19      	cmp	r3, #25
 800c7ec:	dc04      	bgt.n	800c7f8 <__ieee754_rem_pio2f+0x164>
 800c7ee:	edc4 5a00 	vstr	s11, [r4]
 800c7f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c7f6:	e7cf      	b.n	800c798 <__ieee754_rem_pio2f+0x104>
 800c7f8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c8e4 <__ieee754_rem_pio2f+0x250>
 800c7fc:	eeb0 0a66 	vmov.f32	s0, s13
 800c800:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c804:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c808:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c8e8 <__ieee754_rem_pio2f+0x254>
 800c80c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c810:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c814:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c818:	ed84 7a00 	vstr	s14, [r4]
 800c81c:	e7bc      	b.n	800c798 <__ieee754_rem_pio2f+0x104>
 800c81e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c822:	d306      	bcc.n	800c832 <__ieee754_rem_pio2f+0x19e>
 800c824:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c828:	edc0 7a01 	vstr	s15, [r0, #4]
 800c82c:	edc0 7a00 	vstr	s15, [r0]
 800c830:	e73e      	b.n	800c6b0 <__ieee754_rem_pio2f+0x1c>
 800c832:	15ea      	asrs	r2, r5, #23
 800c834:	3a86      	subs	r2, #134	@ 0x86
 800c836:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c842:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c8ec <__ieee754_rem_pio2f+0x258>
 800c846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c84a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c84e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c856:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c85e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c862:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c86a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c872:	edcd 7a05 	vstr	s15, [sp, #20]
 800c876:	d11e      	bne.n	800c8b6 <__ieee754_rem_pio2f+0x222>
 800c878:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c880:	bf0c      	ite	eq
 800c882:	2301      	moveq	r3, #1
 800c884:	2302      	movne	r3, #2
 800c886:	491a      	ldr	r1, [pc, #104]	@ (800c8f0 <__ieee754_rem_pio2f+0x25c>)
 800c888:	9101      	str	r1, [sp, #4]
 800c88a:	2102      	movs	r1, #2
 800c88c:	9100      	str	r1, [sp, #0]
 800c88e:	a803      	add	r0, sp, #12
 800c890:	4621      	mov	r1, r4
 800c892:	f000 f971 	bl	800cb78 <__kernel_rem_pio2f>
 800c896:	2e00      	cmp	r6, #0
 800c898:	f6bf af2f 	bge.w	800c6fa <__ieee754_rem_pio2f+0x66>
 800c89c:	edd4 7a00 	vldr	s15, [r4]
 800c8a0:	eef1 7a67 	vneg.f32	s15, s15
 800c8a4:	edc4 7a00 	vstr	s15, [r4]
 800c8a8:	edd4 7a01 	vldr	s15, [r4, #4]
 800c8ac:	eef1 7a67 	vneg.f32	s15, s15
 800c8b0:	edc4 7a01 	vstr	s15, [r4, #4]
 800c8b4:	e782      	b.n	800c7bc <__ieee754_rem_pio2f+0x128>
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e7e5      	b.n	800c886 <__ieee754_rem_pio2f+0x1f2>
 800c8ba:	bf00      	nop
 800c8bc:	3f490fd8 	.word	0x3f490fd8
 800c8c0:	4016cbe3 	.word	0x4016cbe3
 800c8c4:	3fc90f80 	.word	0x3fc90f80
 800c8c8:	3fc90fd0 	.word	0x3fc90fd0
 800c8cc:	37354400 	.word	0x37354400
 800c8d0:	37354443 	.word	0x37354443
 800c8d4:	2e85a308 	.word	0x2e85a308
 800c8d8:	43490f80 	.word	0x43490f80
 800c8dc:	3f22f984 	.word	0x3f22f984
 800c8e0:	08019e98 	.word	0x08019e98
 800c8e4:	2e85a300 	.word	0x2e85a300
 800c8e8:	248d3132 	.word	0x248d3132
 800c8ec:	43800000 	.word	0x43800000
 800c8f0:	08019f18 	.word	0x08019f18

0800c8f4 <atanf>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	ee10 5a10 	vmov	r5, s0
 800c8fa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c8fe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c902:	eef0 7a40 	vmov.f32	s15, s0
 800c906:	d310      	bcc.n	800c92a <atanf+0x36>
 800c908:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c90c:	d904      	bls.n	800c918 <atanf+0x24>
 800c90e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c912:	eeb0 0a67 	vmov.f32	s0, s15
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ca50 <atanf+0x15c>
 800c91c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ca54 <atanf+0x160>
 800c920:	2d00      	cmp	r5, #0
 800c922:	bfc8      	it	gt
 800c924:	eef0 7a47 	vmovgt.f32	s15, s14
 800c928:	e7f3      	b.n	800c912 <atanf+0x1e>
 800c92a:	4b4b      	ldr	r3, [pc, #300]	@ (800ca58 <atanf+0x164>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	d810      	bhi.n	800c952 <atanf+0x5e>
 800c930:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c934:	d20a      	bcs.n	800c94c <atanf+0x58>
 800c936:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ca5c <atanf+0x168>
 800c93a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c942:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c94a:	dce2      	bgt.n	800c912 <atanf+0x1e>
 800c94c:	f04f 33ff 	mov.w	r3, #4294967295
 800c950:	e013      	b.n	800c97a <atanf+0x86>
 800c952:	f000 f8a3 	bl	800ca9c <fabsf>
 800c956:	4b42      	ldr	r3, [pc, #264]	@ (800ca60 <atanf+0x16c>)
 800c958:	429c      	cmp	r4, r3
 800c95a:	d84f      	bhi.n	800c9fc <atanf+0x108>
 800c95c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c960:	429c      	cmp	r4, r3
 800c962:	d841      	bhi.n	800c9e8 <atanf+0xf4>
 800c964:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c968:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c96c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c970:	2300      	movs	r3, #0
 800c972:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c976:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c980:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ca64 <atanf+0x170>
 800c984:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ca68 <atanf+0x174>
 800c988:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ca6c <atanf+0x178>
 800c98c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c990:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c994:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ca70 <atanf+0x17c>
 800c998:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c99c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ca74 <atanf+0x180>
 800c9a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c9a4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ca78 <atanf+0x184>
 800c9a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c9ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ca7c <atanf+0x188>
 800c9b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c9b4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ca80 <atanf+0x18c>
 800c9b8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c9bc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ca84 <atanf+0x190>
 800c9c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c9c4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ca88 <atanf+0x194>
 800c9c8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c9cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ca8c <atanf+0x198>
 800c9d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c9d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c9d8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c9dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c9e0:	d121      	bne.n	800ca26 <atanf+0x132>
 800c9e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9e6:	e794      	b.n	800c912 <atanf+0x1e>
 800c9e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c9ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c9f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c9fa:	e7be      	b.n	800c97a <atanf+0x86>
 800c9fc:	4b24      	ldr	r3, [pc, #144]	@ (800ca90 <atanf+0x19c>)
 800c9fe:	429c      	cmp	r4, r3
 800ca00:	d80b      	bhi.n	800ca1a <atanf+0x126>
 800ca02:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ca06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca0a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ca0e:	2302      	movs	r3, #2
 800ca10:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ca14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca18:	e7af      	b.n	800c97a <atanf+0x86>
 800ca1a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ca1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ca22:	2303      	movs	r3, #3
 800ca24:	e7a9      	b.n	800c97a <atanf+0x86>
 800ca26:	4a1b      	ldr	r2, [pc, #108]	@ (800ca94 <atanf+0x1a0>)
 800ca28:	491b      	ldr	r1, [pc, #108]	@ (800ca98 <atanf+0x1a4>)
 800ca2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ca2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ca32:	edd3 6a00 	vldr	s13, [r3]
 800ca36:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ca3a:	2d00      	cmp	r5, #0
 800ca3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca40:	edd2 7a00 	vldr	s15, [r2]
 800ca44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca48:	bfb8      	it	lt
 800ca4a:	eef1 7a67 	vneglt.f32	s15, s15
 800ca4e:	e760      	b.n	800c912 <atanf+0x1e>
 800ca50:	bfc90fdb 	.word	0xbfc90fdb
 800ca54:	3fc90fdb 	.word	0x3fc90fdb
 800ca58:	3edfffff 	.word	0x3edfffff
 800ca5c:	7149f2ca 	.word	0x7149f2ca
 800ca60:	3f97ffff 	.word	0x3f97ffff
 800ca64:	3c8569d7 	.word	0x3c8569d7
 800ca68:	3d4bda59 	.word	0x3d4bda59
 800ca6c:	bd6ef16b 	.word	0xbd6ef16b
 800ca70:	3d886b35 	.word	0x3d886b35
 800ca74:	3dba2e6e 	.word	0x3dba2e6e
 800ca78:	3e124925 	.word	0x3e124925
 800ca7c:	3eaaaaab 	.word	0x3eaaaaab
 800ca80:	bd15a221 	.word	0xbd15a221
 800ca84:	bd9d8795 	.word	0xbd9d8795
 800ca88:	bde38e38 	.word	0xbde38e38
 800ca8c:	be4ccccd 	.word	0xbe4ccccd
 800ca90:	401bffff 	.word	0x401bffff
 800ca94:	0801a240 	.word	0x0801a240
 800ca98:	0801a230 	.word	0x0801a230

0800ca9c <fabsf>:
 800ca9c:	ee10 3a10 	vmov	r3, s0
 800caa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800caa4:	ee00 3a10 	vmov	s0, r3
 800caa8:	4770      	bx	lr
	...

0800caac <scalbnf>:
 800caac:	ee10 3a10 	vmov	r3, s0
 800cab0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cab4:	d02b      	beq.n	800cb0e <scalbnf+0x62>
 800cab6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800caba:	d302      	bcc.n	800cac2 <scalbnf+0x16>
 800cabc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cac0:	4770      	bx	lr
 800cac2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cac6:	d123      	bne.n	800cb10 <scalbnf+0x64>
 800cac8:	4b24      	ldr	r3, [pc, #144]	@ (800cb5c <scalbnf+0xb0>)
 800caca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800cb60 <scalbnf+0xb4>
 800cace:	4298      	cmp	r0, r3
 800cad0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cad4:	db17      	blt.n	800cb06 <scalbnf+0x5a>
 800cad6:	ee10 3a10 	vmov	r3, s0
 800cada:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cade:	3a19      	subs	r2, #25
 800cae0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cae4:	4288      	cmp	r0, r1
 800cae6:	dd15      	ble.n	800cb14 <scalbnf+0x68>
 800cae8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800cb64 <scalbnf+0xb8>
 800caec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800cb68 <scalbnf+0xbc>
 800caf0:	ee10 3a10 	vmov	r3, s0
 800caf4:	eeb0 7a67 	vmov.f32	s14, s15
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bfb8      	it	lt
 800cafc:	eef0 7a66 	vmovlt.f32	s15, s13
 800cb00:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cb04:	4770      	bx	lr
 800cb06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cb6c <scalbnf+0xc0>
 800cb0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb0e:	4770      	bx	lr
 800cb10:	0dd2      	lsrs	r2, r2, #23
 800cb12:	e7e5      	b.n	800cae0 <scalbnf+0x34>
 800cb14:	4410      	add	r0, r2
 800cb16:	28fe      	cmp	r0, #254	@ 0xfe
 800cb18:	dce6      	bgt.n	800cae8 <scalbnf+0x3c>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	dd06      	ble.n	800cb2c <scalbnf+0x80>
 800cb1e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb22:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cb26:	ee00 3a10 	vmov	s0, r3
 800cb2a:	4770      	bx	lr
 800cb2c:	f110 0f16 	cmn.w	r0, #22
 800cb30:	da09      	bge.n	800cb46 <scalbnf+0x9a>
 800cb32:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800cb6c <scalbnf+0xc0>
 800cb36:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800cb70 <scalbnf+0xc4>
 800cb3a:	ee10 3a10 	vmov	r3, s0
 800cb3e:	eeb0 7a67 	vmov.f32	s14, s15
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	e7d9      	b.n	800cafa <scalbnf+0x4e>
 800cb46:	3019      	adds	r0, #25
 800cb48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb4c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cb50:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cb74 <scalbnf+0xc8>
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	e7d7      	b.n	800cb0a <scalbnf+0x5e>
 800cb5a:	bf00      	nop
 800cb5c:	ffff3cb0 	.word	0xffff3cb0
 800cb60:	4c000000 	.word	0x4c000000
 800cb64:	7149f2ca 	.word	0x7149f2ca
 800cb68:	f149f2ca 	.word	0xf149f2ca
 800cb6c:	0da24260 	.word	0x0da24260
 800cb70:	8da24260 	.word	0x8da24260
 800cb74:	33000000 	.word	0x33000000

0800cb78 <__kernel_rem_pio2f>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	ed2d 8b04 	vpush	{d8-d9}
 800cb80:	b0d9      	sub	sp, #356	@ 0x164
 800cb82:	4690      	mov	r8, r2
 800cb84:	9001      	str	r0, [sp, #4]
 800cb86:	4ab6      	ldr	r2, [pc, #728]	@ (800ce60 <__kernel_rem_pio2f+0x2e8>)
 800cb88:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800cb8a:	f118 0f04 	cmn.w	r8, #4
 800cb8e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800cb92:	460f      	mov	r7, r1
 800cb94:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb98:	db26      	blt.n	800cbe8 <__kernel_rem_pio2f+0x70>
 800cb9a:	f1b8 0203 	subs.w	r2, r8, #3
 800cb9e:	bf48      	it	mi
 800cba0:	f108 0204 	addmi.w	r2, r8, #4
 800cba4:	10d2      	asrs	r2, r2, #3
 800cba6:	1c55      	adds	r5, r2, #1
 800cba8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800cbaa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cbae:	00e8      	lsls	r0, r5, #3
 800cbb0:	eba2 060b 	sub.w	r6, r2, fp
 800cbb4:	9002      	str	r0, [sp, #8]
 800cbb6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800cbba:	eb0a 0c0b 	add.w	ip, sl, fp
 800cbbe:	ac1c      	add	r4, sp, #112	@ 0x70
 800cbc0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	4560      	cmp	r0, ip
 800cbc8:	dd10      	ble.n	800cbec <__kernel_rem_pio2f+0x74>
 800cbca:	a91c      	add	r1, sp, #112	@ 0x70
 800cbcc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800cbd0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800cbd4:	2600      	movs	r6, #0
 800cbd6:	4556      	cmp	r6, sl
 800cbd8:	dc24      	bgt.n	800cc24 <__kernel_rem_pio2f+0xac>
 800cbda:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cbde:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cbe2:	4684      	mov	ip, r0
 800cbe4:	2400      	movs	r4, #0
 800cbe6:	e016      	b.n	800cc16 <__kernel_rem_pio2f+0x9e>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	e7dc      	b.n	800cba6 <__kernel_rem_pio2f+0x2e>
 800cbec:	42c6      	cmn	r6, r0
 800cbee:	bf5d      	ittte	pl
 800cbf0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800cbf4:	ee07 1a90 	vmovpl	s15, r1
 800cbf8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cbfc:	eef0 7a47 	vmovmi.f32	s15, s14
 800cc00:	ece4 7a01 	vstmia	r4!, {s15}
 800cc04:	3001      	adds	r0, #1
 800cc06:	e7de      	b.n	800cbc6 <__kernel_rem_pio2f+0x4e>
 800cc08:	ecfe 6a01 	vldmia	lr!, {s13}
 800cc0c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800cc10:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cc14:	3401      	adds	r4, #1
 800cc16:	455c      	cmp	r4, fp
 800cc18:	ddf6      	ble.n	800cc08 <__kernel_rem_pio2f+0x90>
 800cc1a:	ece9 7a01 	vstmia	r9!, {s15}
 800cc1e:	3601      	adds	r6, #1
 800cc20:	3004      	adds	r0, #4
 800cc22:	e7d8      	b.n	800cbd6 <__kernel_rem_pio2f+0x5e>
 800cc24:	a908      	add	r1, sp, #32
 800cc26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc2a:	9104      	str	r1, [sp, #16]
 800cc2c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800cc2e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ce6c <__kernel_rem_pio2f+0x2f4>
 800cc32:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ce68 <__kernel_rem_pio2f+0x2f0>
 800cc36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cc3a:	9203      	str	r2, [sp, #12]
 800cc3c:	4654      	mov	r4, sl
 800cc3e:	00a2      	lsls	r2, r4, #2
 800cc40:	9205      	str	r2, [sp, #20]
 800cc42:	aa58      	add	r2, sp, #352	@ 0x160
 800cc44:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cc48:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800cc4c:	a944      	add	r1, sp, #272	@ 0x110
 800cc4e:	aa08      	add	r2, sp, #32
 800cc50:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800cc54:	4694      	mov	ip, r2
 800cc56:	4626      	mov	r6, r4
 800cc58:	2e00      	cmp	r6, #0
 800cc5a:	dc4c      	bgt.n	800ccf6 <__kernel_rem_pio2f+0x17e>
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc62:	f7ff ff23 	bl	800caac <scalbnf>
 800cc66:	eeb0 8a40 	vmov.f32	s16, s0
 800cc6a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800cc6e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cc72:	f000 f9e9 	bl	800d048 <floorf>
 800cc76:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800cc7a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cc7e:	2d00      	cmp	r5, #0
 800cc80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc84:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cc88:	ee17 9a90 	vmov	r9, s15
 800cc8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc90:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cc94:	dd41      	ble.n	800cd1a <__kernel_rem_pio2f+0x1a2>
 800cc96:	f104 3cff 	add.w	ip, r4, #4294967295
 800cc9a:	a908      	add	r1, sp, #32
 800cc9c:	f1c5 0e08 	rsb	lr, r5, #8
 800cca0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800cca4:	fa46 f00e 	asr.w	r0, r6, lr
 800cca8:	4481      	add	r9, r0
 800ccaa:	fa00 f00e 	lsl.w	r0, r0, lr
 800ccae:	1a36      	subs	r6, r6, r0
 800ccb0:	f1c5 0007 	rsb	r0, r5, #7
 800ccb4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ccb8:	4106      	asrs	r6, r0
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	dd3c      	ble.n	800cd38 <__kernel_rem_pio2f+0x1c0>
 800ccbe:	f04f 0e00 	mov.w	lr, #0
 800ccc2:	f109 0901 	add.w	r9, r9, #1
 800ccc6:	4670      	mov	r0, lr
 800ccc8:	4574      	cmp	r4, lr
 800ccca:	dc68      	bgt.n	800cd9e <__kernel_rem_pio2f+0x226>
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	dd03      	ble.n	800ccd8 <__kernel_rem_pio2f+0x160>
 800ccd0:	2d01      	cmp	r5, #1
 800ccd2:	d074      	beq.n	800cdbe <__kernel_rem_pio2f+0x246>
 800ccd4:	2d02      	cmp	r5, #2
 800ccd6:	d07d      	beq.n	800cdd4 <__kernel_rem_pio2f+0x25c>
 800ccd8:	2e02      	cmp	r6, #2
 800ccda:	d12d      	bne.n	800cd38 <__kernel_rem_pio2f+0x1c0>
 800ccdc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cce0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cce4:	b340      	cbz	r0, 800cd38 <__kernel_rem_pio2f+0x1c0>
 800cce6:	4628      	mov	r0, r5
 800cce8:	9306      	str	r3, [sp, #24]
 800ccea:	f7ff fedf 	bl	800caac <scalbnf>
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ccf4:	e020      	b.n	800cd38 <__kernel_rem_pio2f+0x1c0>
 800ccf6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ccfa:	3e01      	subs	r6, #1
 800ccfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd04:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cd08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cd0c:	ecac 0a01 	vstmia	ip!, {s0}
 800cd10:	ed30 0a01 	vldmdb	r0!, {s0}
 800cd14:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cd18:	e79e      	b.n	800cc58 <__kernel_rem_pio2f+0xe0>
 800cd1a:	d105      	bne.n	800cd28 <__kernel_rem_pio2f+0x1b0>
 800cd1c:	1e60      	subs	r0, r4, #1
 800cd1e:	a908      	add	r1, sp, #32
 800cd20:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800cd24:	11f6      	asrs	r6, r6, #7
 800cd26:	e7c8      	b.n	800ccba <__kernel_rem_pio2f+0x142>
 800cd28:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cd2c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd34:	da31      	bge.n	800cd9a <__kernel_rem_pio2f+0x222>
 800cd36:	2600      	movs	r6, #0
 800cd38:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd40:	f040 8098 	bne.w	800ce74 <__kernel_rem_pio2f+0x2fc>
 800cd44:	1e60      	subs	r0, r4, #1
 800cd46:	2200      	movs	r2, #0
 800cd48:	4550      	cmp	r0, sl
 800cd4a:	da4b      	bge.n	800cde4 <__kernel_rem_pio2f+0x26c>
 800cd4c:	2a00      	cmp	r2, #0
 800cd4e:	d065      	beq.n	800ce1c <__kernel_rem_pio2f+0x2a4>
 800cd50:	3c01      	subs	r4, #1
 800cd52:	ab08      	add	r3, sp, #32
 800cd54:	3d08      	subs	r5, #8
 800cd56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0f8      	beq.n	800cd50 <__kernel_rem_pio2f+0x1d8>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cd64:	f7ff fea2 	bl	800caac <scalbnf>
 800cd68:	1c63      	adds	r3, r4, #1
 800cd6a:	aa44      	add	r2, sp, #272	@ 0x110
 800cd6c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ce6c <__kernel_rem_pio2f+0x2f4>
 800cd70:	0099      	lsls	r1, r3, #2
 800cd72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd76:	4623      	mov	r3, r4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f280 80a9 	bge.w	800ced0 <__kernel_rem_pio2f+0x358>
 800cd7e:	4623      	mov	r3, r4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f2c0 80c7 	blt.w	800cf14 <__kernel_rem_pio2f+0x39c>
 800cd86:	aa44      	add	r2, sp, #272	@ 0x110
 800cd88:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800cd8c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ce64 <__kernel_rem_pio2f+0x2ec>
 800cd90:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cd94:	2000      	movs	r0, #0
 800cd96:	1ae2      	subs	r2, r4, r3
 800cd98:	e0b1      	b.n	800cefe <__kernel_rem_pio2f+0x386>
 800cd9a:	2602      	movs	r6, #2
 800cd9c:	e78f      	b.n	800ccbe <__kernel_rem_pio2f+0x146>
 800cd9e:	f852 1b04 	ldr.w	r1, [r2], #4
 800cda2:	b948      	cbnz	r0, 800cdb8 <__kernel_rem_pio2f+0x240>
 800cda4:	b121      	cbz	r1, 800cdb0 <__kernel_rem_pio2f+0x238>
 800cda6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800cdaa:	f842 1c04 	str.w	r1, [r2, #-4]
 800cdae:	2101      	movs	r1, #1
 800cdb0:	f10e 0e01 	add.w	lr, lr, #1
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	e787      	b.n	800ccc8 <__kernel_rem_pio2f+0x150>
 800cdb8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800cdbc:	e7f5      	b.n	800cdaa <__kernel_rem_pio2f+0x232>
 800cdbe:	f104 3cff 	add.w	ip, r4, #4294967295
 800cdc2:	aa08      	add	r2, sp, #32
 800cdc4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cdc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cdcc:	a908      	add	r1, sp, #32
 800cdce:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800cdd2:	e781      	b.n	800ccd8 <__kernel_rem_pio2f+0x160>
 800cdd4:	f104 3cff 	add.w	ip, r4, #4294967295
 800cdd8:	aa08      	add	r2, sp, #32
 800cdda:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cdde:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800cde2:	e7f3      	b.n	800cdcc <__kernel_rem_pio2f+0x254>
 800cde4:	a908      	add	r1, sp, #32
 800cde6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cdea:	3801      	subs	r0, #1
 800cdec:	430a      	orrs	r2, r1
 800cdee:	e7ab      	b.n	800cd48 <__kernel_rem_pio2f+0x1d0>
 800cdf0:	3201      	adds	r2, #1
 800cdf2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800cdf6:	2e00      	cmp	r6, #0
 800cdf8:	d0fa      	beq.n	800cdf0 <__kernel_rem_pio2f+0x278>
 800cdfa:	9905      	ldr	r1, [sp, #20]
 800cdfc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ce00:	eb0d 0001 	add.w	r0, sp, r1
 800ce04:	18e6      	adds	r6, r4, r3
 800ce06:	a91c      	add	r1, sp, #112	@ 0x70
 800ce08:	f104 0c01 	add.w	ip, r4, #1
 800ce0c:	384c      	subs	r0, #76	@ 0x4c
 800ce0e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ce12:	4422      	add	r2, r4
 800ce14:	4562      	cmp	r2, ip
 800ce16:	da04      	bge.n	800ce22 <__kernel_rem_pio2f+0x2aa>
 800ce18:	4614      	mov	r4, r2
 800ce1a:	e710      	b.n	800cc3e <__kernel_rem_pio2f+0xc6>
 800ce1c:	9804      	ldr	r0, [sp, #16]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	e7e7      	b.n	800cdf2 <__kernel_rem_pio2f+0x27a>
 800ce22:	9903      	ldr	r1, [sp, #12]
 800ce24:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ce28:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ce2c:	9105      	str	r1, [sp, #20]
 800ce2e:	ee07 1a90 	vmov	s15, r1
 800ce32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce36:	2400      	movs	r4, #0
 800ce38:	ece6 7a01 	vstmia	r6!, {s15}
 800ce3c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800ce40:	46b1      	mov	r9, r6
 800ce42:	455c      	cmp	r4, fp
 800ce44:	dd04      	ble.n	800ce50 <__kernel_rem_pio2f+0x2d8>
 800ce46:	ece0 7a01 	vstmia	r0!, {s15}
 800ce4a:	f10c 0c01 	add.w	ip, ip, #1
 800ce4e:	e7e1      	b.n	800ce14 <__kernel_rem_pio2f+0x29c>
 800ce50:	ecfe 6a01 	vldmia	lr!, {s13}
 800ce54:	ed39 7a01 	vldmdb	r9!, {s14}
 800ce58:	3401      	adds	r4, #1
 800ce5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce5e:	e7f0      	b.n	800ce42 <__kernel_rem_pio2f+0x2ca>
 800ce60:	0801a27c 	.word	0x0801a27c
 800ce64:	0801a250 	.word	0x0801a250
 800ce68:	43800000 	.word	0x43800000
 800ce6c:	3b800000 	.word	0x3b800000
 800ce70:	00000000 	.word	0x00000000
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	eeb0 0a48 	vmov.f32	s0, s16
 800ce7a:	eba3 0008 	sub.w	r0, r3, r8
 800ce7e:	f7ff fe15 	bl	800caac <scalbnf>
 800ce82:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ce68 <__kernel_rem_pio2f+0x2f0>
 800ce86:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ce8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8e:	db19      	blt.n	800cec4 <__kernel_rem_pio2f+0x34c>
 800ce90:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ce6c <__kernel_rem_pio2f+0x2f4>
 800ce94:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ce98:	aa08      	add	r2, sp, #32
 800ce9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce9e:	3508      	adds	r5, #8
 800cea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cea4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ceb0:	ee10 3a10 	vmov	r3, s0
 800ceb4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ceb8:	ee17 3a90 	vmov	r3, s15
 800cebc:	3401      	adds	r4, #1
 800cebe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cec2:	e74c      	b.n	800cd5e <__kernel_rem_pio2f+0x1e6>
 800cec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cec8:	aa08      	add	r2, sp, #32
 800ceca:	ee10 3a10 	vmov	r3, s0
 800cece:	e7f6      	b.n	800cebe <__kernel_rem_pio2f+0x346>
 800ced0:	a808      	add	r0, sp, #32
 800ced2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ced6:	9001      	str	r0, [sp, #4]
 800ced8:	ee07 0a90 	vmov	s15, r0
 800cedc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cee0:	3b01      	subs	r3, #1
 800cee2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cee6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ceea:	ed62 7a01 	vstmdb	r2!, {s15}
 800ceee:	e743      	b.n	800cd78 <__kernel_rem_pio2f+0x200>
 800cef0:	ecfc 6a01 	vldmia	ip!, {s13}
 800cef4:	ecb5 7a01 	vldmia	r5!, {s14}
 800cef8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cefc:	3001      	adds	r0, #1
 800cefe:	4550      	cmp	r0, sl
 800cf00:	dc01      	bgt.n	800cf06 <__kernel_rem_pio2f+0x38e>
 800cf02:	4290      	cmp	r0, r2
 800cf04:	ddf4      	ble.n	800cef0 <__kernel_rem_pio2f+0x378>
 800cf06:	a858      	add	r0, sp, #352	@ 0x160
 800cf08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cf0c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800cf10:	3b01      	subs	r3, #1
 800cf12:	e735      	b.n	800cd80 <__kernel_rem_pio2f+0x208>
 800cf14:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	dc09      	bgt.n	800cf2e <__kernel_rem_pio2f+0x3b6>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dc27      	bgt.n	800cf6e <__kernel_rem_pio2f+0x3f6>
 800cf1e:	d040      	beq.n	800cfa2 <__kernel_rem_pio2f+0x42a>
 800cf20:	f009 0007 	and.w	r0, r9, #7
 800cf24:	b059      	add	sp, #356	@ 0x164
 800cf26:	ecbd 8b04 	vpop	{d8-d9}
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d1f5      	bne.n	800cf20 <__kernel_rem_pio2f+0x3a8>
 800cf34:	aa30      	add	r2, sp, #192	@ 0xc0
 800cf36:	1f0b      	subs	r3, r1, #4
 800cf38:	4413      	add	r3, r2
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	dc50      	bgt.n	800cfe4 <__kernel_rem_pio2f+0x46c>
 800cf42:	4622      	mov	r2, r4
 800cf44:	2a01      	cmp	r2, #1
 800cf46:	dc5d      	bgt.n	800d004 <__kernel_rem_pio2f+0x48c>
 800cf48:	ab30      	add	r3, sp, #192	@ 0xc0
 800cf4a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cf4e:	440b      	add	r3, r1
 800cf50:	2c01      	cmp	r4, #1
 800cf52:	dc67      	bgt.n	800d024 <__kernel_rem_pio2f+0x4ac>
 800cf54:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800cf58:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800cf5c:	2e00      	cmp	r6, #0
 800cf5e:	d167      	bne.n	800d030 <__kernel_rem_pio2f+0x4b8>
 800cf60:	edc7 6a00 	vstr	s13, [r7]
 800cf64:	ed87 7a01 	vstr	s14, [r7, #4]
 800cf68:	edc7 7a02 	vstr	s15, [r7, #8]
 800cf6c:	e7d8      	b.n	800cf20 <__kernel_rem_pio2f+0x3a8>
 800cf6e:	ab30      	add	r3, sp, #192	@ 0xc0
 800cf70:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cf74:	440b      	add	r3, r1
 800cf76:	4622      	mov	r2, r4
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	da24      	bge.n	800cfc6 <__kernel_rem_pio2f+0x44e>
 800cf7c:	b34e      	cbz	r6, 800cfd2 <__kernel_rem_pio2f+0x45a>
 800cf7e:	eef1 7a47 	vneg.f32	s15, s14
 800cf82:	edc7 7a00 	vstr	s15, [r7]
 800cf86:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800cf8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf8e:	aa31      	add	r2, sp, #196	@ 0xc4
 800cf90:	2301      	movs	r3, #1
 800cf92:	429c      	cmp	r4, r3
 800cf94:	da20      	bge.n	800cfd8 <__kernel_rem_pio2f+0x460>
 800cf96:	b10e      	cbz	r6, 800cf9c <__kernel_rem_pio2f+0x424>
 800cf98:	eef1 7a67 	vneg.f32	s15, s15
 800cf9c:	edc7 7a01 	vstr	s15, [r7, #4]
 800cfa0:	e7be      	b.n	800cf20 <__kernel_rem_pio2f+0x3a8>
 800cfa2:	ab30      	add	r3, sp, #192	@ 0xc0
 800cfa4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ce70 <__kernel_rem_pio2f+0x2f8>
 800cfa8:	440b      	add	r3, r1
 800cfaa:	2c00      	cmp	r4, #0
 800cfac:	da05      	bge.n	800cfba <__kernel_rem_pio2f+0x442>
 800cfae:	b10e      	cbz	r6, 800cfb4 <__kernel_rem_pio2f+0x43c>
 800cfb0:	eef1 7a67 	vneg.f32	s15, s15
 800cfb4:	edc7 7a00 	vstr	s15, [r7]
 800cfb8:	e7b2      	b.n	800cf20 <__kernel_rem_pio2f+0x3a8>
 800cfba:	ed33 7a01 	vldmdb	r3!, {s14}
 800cfbe:	3c01      	subs	r4, #1
 800cfc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfc4:	e7f1      	b.n	800cfaa <__kernel_rem_pio2f+0x432>
 800cfc6:	ed73 7a01 	vldmdb	r3!, {s15}
 800cfca:	3a01      	subs	r2, #1
 800cfcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cfd0:	e7d2      	b.n	800cf78 <__kernel_rem_pio2f+0x400>
 800cfd2:	eef0 7a47 	vmov.f32	s15, s14
 800cfd6:	e7d4      	b.n	800cf82 <__kernel_rem_pio2f+0x40a>
 800cfd8:	ecb2 7a01 	vldmia	r2!, {s14}
 800cfdc:	3301      	adds	r3, #1
 800cfde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfe2:	e7d6      	b.n	800cf92 <__kernel_rem_pio2f+0x41a>
 800cfe4:	ed72 7a01 	vldmdb	r2!, {s15}
 800cfe8:	edd2 6a01 	vldr	s13, [r2, #4]
 800cfec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cff0:	3801      	subs	r0, #1
 800cff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cff6:	ed82 7a00 	vstr	s14, [r2]
 800cffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffe:	edc2 7a01 	vstr	s15, [r2, #4]
 800d002:	e79c      	b.n	800cf3e <__kernel_rem_pio2f+0x3c6>
 800d004:	ed73 7a01 	vldmdb	r3!, {s15}
 800d008:	edd3 6a01 	vldr	s13, [r3, #4]
 800d00c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d010:	3a01      	subs	r2, #1
 800d012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d016:	ed83 7a00 	vstr	s14, [r3]
 800d01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d022:	e78f      	b.n	800cf44 <__kernel_rem_pio2f+0x3cc>
 800d024:	ed33 7a01 	vldmdb	r3!, {s14}
 800d028:	3c01      	subs	r4, #1
 800d02a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d02e:	e78f      	b.n	800cf50 <__kernel_rem_pio2f+0x3d8>
 800d030:	eef1 6a66 	vneg.f32	s13, s13
 800d034:	eeb1 7a47 	vneg.f32	s14, s14
 800d038:	edc7 6a00 	vstr	s13, [r7]
 800d03c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d040:	eef1 7a67 	vneg.f32	s15, s15
 800d044:	e790      	b.n	800cf68 <__kernel_rem_pio2f+0x3f0>
 800d046:	bf00      	nop

0800d048 <floorf>:
 800d048:	ee10 3a10 	vmov	r3, s0
 800d04c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d050:	3a7f      	subs	r2, #127	@ 0x7f
 800d052:	2a16      	cmp	r2, #22
 800d054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d058:	dc2b      	bgt.n	800d0b2 <floorf+0x6a>
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	da12      	bge.n	800d084 <floorf+0x3c>
 800d05e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d0c4 <floorf+0x7c>
 800d062:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d066:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06e:	dd06      	ble.n	800d07e <floorf+0x36>
 800d070:	2b00      	cmp	r3, #0
 800d072:	da24      	bge.n	800d0be <floorf+0x76>
 800d074:	2900      	cmp	r1, #0
 800d076:	4b14      	ldr	r3, [pc, #80]	@ (800d0c8 <floorf+0x80>)
 800d078:	bf08      	it	eq
 800d07a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d07e:	ee00 3a10 	vmov	s0, r3
 800d082:	4770      	bx	lr
 800d084:	4911      	ldr	r1, [pc, #68]	@ (800d0cc <floorf+0x84>)
 800d086:	4111      	asrs	r1, r2
 800d088:	420b      	tst	r3, r1
 800d08a:	d0fa      	beq.n	800d082 <floorf+0x3a>
 800d08c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d0c4 <floorf+0x7c>
 800d090:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d094:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09c:	ddef      	ble.n	800d07e <floorf+0x36>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbe      	ittt	lt
 800d0a2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d0a6:	fa40 f202 	asrlt.w	r2, r0, r2
 800d0aa:	189b      	addlt	r3, r3, r2
 800d0ac:	ea23 0301 	bic.w	r3, r3, r1
 800d0b0:	e7e5      	b.n	800d07e <floorf+0x36>
 800d0b2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d0b6:	d3e4      	bcc.n	800d082 <floorf+0x3a>
 800d0b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0bc:	4770      	bx	lr
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e7dd      	b.n	800d07e <floorf+0x36>
 800d0c2:	bf00      	nop
 800d0c4:	7149f2ca 	.word	0x7149f2ca
 800d0c8:	bf800000 	.word	0xbf800000
 800d0cc:	007fffff 	.word	0x007fffff

0800d0d0 <_init>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	bf00      	nop
 800d0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d6:	bc08      	pop	{r3}
 800d0d8:	469e      	mov	lr, r3
 800d0da:	4770      	bx	lr

0800d0dc <_fini>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	bf00      	nop
 800d0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e2:	bc08      	pop	{r3}
 800d0e4:	469e      	mov	lr, r3
 800d0e6:	4770      	bx	lr
