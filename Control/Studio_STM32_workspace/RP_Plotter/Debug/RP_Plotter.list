
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c784  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800c95c  0800c95c  0000d95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda4  0800cda4  0000e25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cda4  0800cda4  0000dda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdac  0800cdac  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdac  0800cdac  0000ddac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800cdb4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000260  0800d010  0000e260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  0800d010  0000e3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177f8  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce1  00000000  00000000  00025a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00028768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9c  00000000  00000000  000299f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002743b  00000000  00000000  0002a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168db  00000000  00000000  00051ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd1d  00000000  00000000  000685aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001682c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  0016830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0016d82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c944 	.word	0x0800c944

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800c944 	.word	0x0800c944

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000027c 	.word	0x2000027c

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000027c 	.word	0x2000027c

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fb4f 	bl	800a7f8 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fb4d 	bl	800882c <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fad7 	bl	800a74c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 faee 	bl	800a784 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fd95 	bl	8009ce0 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 febd 	bl	8009f54 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f8a7 	bl	8007344 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fc68 	bl	8007ad4 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000027c 	.word	0x2000027c
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <ResetAllTargets>:

void ResetAllTargets(void) {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	e020      	b.n	80012d6 <ResetAllTargets+0x4e>
		SET_TARGET(i, 0, 0);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b04      	cmp	r3, #4
 8001298:	dc03      	bgt.n	80012a2 <ResetAllTargets+0x1a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3310      	adds	r3, #16
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	e002      	b.n	80012a8 <ResetAllTargets+0x20>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3313      	adds	r3, #19
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <ResetAllTargets+0x64>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	dc04      	bgt.n	80012c0 <ResetAllTargets+0x38>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3310      	adds	r3, #16
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3301      	adds	r3, #1
 80012be:	e003      	b.n	80012c8 <ResetAllTargets+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3313      	adds	r3, #19
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <ResetAllTargets+0x64>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 10; i++) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	dddb      	ble.n	8001294 <ResetAllTargets+0xc>
	}
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200010d8 	.word	0x200010d8

080012f0 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b08d      	sub	sp, #52	@ 0x34
 80012f4:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 80012f6:	4bb4      	ldr	r3, [pc, #720]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80012f8:	f645 1261 	movw	r2, #22881	@ 0x5961
 80012fc:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 80012fe:	4bb3      	ldr	r3, [pc, #716]	@ (80015cc <Modbus_Protocal_Worker+0x2dc>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <Modbus_Protocal_Worker+0x1a>
 8001306:	2202      	movs	r2, #2
 8001308:	e000      	b.n	800130c <Modbus_Protocal_Worker+0x1c>
 800130a:	2201      	movs	r2, #1
 800130c:	4bae      	ldr	r3, [pc, #696]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 800130e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001310:	4bad      	ldr	r3, [pc, #692]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001312:	895b      	ldrh	r3, [r3, #10]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4bab      	ldr	r3, [pc, #684]	@ (80015d0 <Modbus_Protocal_Worker+0x2e0>)
 8001322:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001324:	4ba8      	ldr	r3, [pc, #672]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001326:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 80015d4 <Modbus_Protocal_Worker+0x2e4>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	4ba7      	ldr	r3, [pc, #668]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 800133c:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_THETA) * 0.1f;
 8001340:	4ba1      	ldr	r3, [pc, #644]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001342:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80015d4 <Modbus_Protocal_Worker+0x2e4>
 8001352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001356:	4ba1      	ldr	r3, [pc, #644]	@ (80015dc <Modbus_Protocal_Worker+0x2ec>)
 8001358:	edc3 7a00 	vstr	s15, [r3]

	uint16_t base_status = REG16(REG_BASE_STATUS);
 800135c:	4b9a      	ldr	r3, [pc, #616]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	84fb      	strh	r3, [r7, #38]	@ 0x26
	REG16(REG_MOTION_STATUS) = base_status;
 8001362:	4a99      	ldr	r2, [pc, #612]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001364:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001366:	8413      	strh	r3, [r2, #32]

	static int currentSlot = 0;
	switch (base_status) {
 8001368:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800136a:	2b08      	cmp	r3, #8
 800136c:	d01d      	beq.n	80013aa <Modbus_Protocal_Worker+0xba>
 800136e:	2b08      	cmp	r3, #8
 8001370:	dc55      	bgt.n	800141e <Modbus_Protocal_Worker+0x12e>
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <Modbus_Protocal_Worker+0x8c>
 8001376:	2b02      	cmp	r3, #2
 8001378:	d013      	beq.n	80013a2 <Modbus_Protocal_Worker+0xb2>
 800137a:	e050      	b.n	800141e <Modbus_Protocal_Worker+0x12e>
	case 1:  // Home
		State_BaseSystem = 3;
 800137c:	4b98      	ldr	r3, [pc, #608]	@ (80015e0 <Modbus_Protocal_Worker+0x2f0>)
 800137e:	2203      	movs	r2, #3
 8001380:	701a      	strb	r2, [r3, #0]
		// if either of the first two target registers is non-zero
		if (REG16(REG_TARGET_BASE_ADDR) || REG16(REG_TARGET_BASE_ADDR + 1)) {
 8001382:	4b91      	ldr	r3, [pc, #580]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <Modbus_Protocal_Worker+0xa6>
 800138c:	4b8e      	ldr	r3, [pc, #568]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 800138e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001392:	2b00      	cmp	r3, #0
 8001394:	d047      	beq.n	8001426 <Modbus_Protocal_Worker+0x136>
			ResetAllTargets();
 8001396:	f7ff ff77 	bl	8001288 <ResetAllTargets>
			currentSlot = 0;
 800139a:	4b92      	ldr	r3, [pc, #584]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
		}
		break;
 80013a0:	e041      	b.n	8001426 <Modbus_Protocal_Worker+0x136>

	case 2:  // Run Jog Mode
		State_BaseSystem = 1;
 80013a2:	4b8f      	ldr	r3, [pc, #572]	@ (80015e0 <Modbus_Protocal_Worker+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
		break;
 80013a8:	e040      	b.n	800142c <Modbus_Protocal_Worker+0x13c>

	case 8:  // Go To Target
		State_BaseSystem = 2;
 80013aa:	4b8d      	ldr	r3, [pc, #564]	@ (80015e0 <Modbus_Protocal_Worker+0x2f0>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
		// enqueue the next target
		SET_TARGET(currentSlot, REG16(REG_TARGET_GOAL_R),
 80013b0:	4b8c      	ldr	r3, [pc, #560]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	dc04      	bgt.n	80013c2 <Modbus_Protocal_Worker+0xd2>
 80013b8:	4b8a      	ldr	r3, [pc, #552]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3310      	adds	r3, #16
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	e003      	b.n	80013ca <Modbus_Protocal_Worker+0xda>
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3313      	adds	r3, #19
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4a7f      	ldr	r2, [pc, #508]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80013cc:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80013d0:	4a7d      	ldr	r2, [pc, #500]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80013d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013d6:	4b83      	ldr	r3, [pc, #524]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	dc05      	bgt.n	80013ea <Modbus_Protocal_Worker+0xfa>
 80013de:	4b81      	ldr	r3, [pc, #516]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3310      	adds	r3, #16
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	3301      	adds	r3, #1
 80013e8:	e004      	b.n	80013f4 <Modbus_Protocal_Worker+0x104>
 80013ea:	4b7e      	ldr	r3, [pc, #504]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3313      	adds	r3, #19
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a74      	ldr	r2, [pc, #464]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80013f6:	f8b2 1082 	ldrh.w	r1, [r2, #130]	@ 0x82
 80013fa:	4a73      	ldr	r2, [pc, #460]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80013fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				REG16(REG_TARGET_GOAL_THETA));

		// increment _and_ wrap+reset in one go
		if (++currentSlot >= 10) {
 8001400:	4b78      	ldr	r3, [pc, #480]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a77      	ldr	r2, [pc, #476]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b09      	cmp	r3, #9
 8001410:	dd0b      	ble.n	800142a <Modbus_Protocal_Worker+0x13a>
			currentSlot = 0;
 8001412:	4b74      	ldr	r3, [pc, #464]	@ (80015e4 <Modbus_Protocal_Worker+0x2f4>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
			ResetAllTargets();
 8001418:	f7ff ff36 	bl	8001288 <ResetAllTargets>
		}
		break;
 800141c:	e005      	b.n	800142a <Modbus_Protocal_Worker+0x13a>

	default: // Run Point Mode
		State_BaseSystem = 0;
 800141e:	4b70      	ldr	r3, [pc, #448]	@ (80015e0 <Modbus_Protocal_Worker+0x2f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		break;
 8001424:	e002      	b.n	800142c <Modbus_Protocal_Worker+0x13c>
		break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <Modbus_Protocal_Worker+0x13c>
		break;
 800142a:	bf00      	nop
	}

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 800142c:	f107 0410 	add.w	r4, r7, #16
 8001430:	f107 0214 	add.w	r2, r7, #20
 8001434:	f107 0118 	add.w	r1, r7, #24
 8001438:	f107 001c 	add.w	r0, r7, #28
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4623      	mov	r3, r4
 800144a:	f003 fc25 	bl	8004c98 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f845 	bl	80004e0 <__aeabi_f2d>
 8001456:	a358      	add	r3, pc, #352	@ (adr r3, 80015b8 <Modbus_Protocal_Worker+0x2c8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe fee2 	bl	8000224 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a355      	add	r3, pc, #340	@ (adr r3, 80015c0 <Modbus_Protocal_Worker+0x2d0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f88f 	bl	8000590 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb43 	bl	8000b04 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	623b      	str	r3, [r7, #32]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001482:	edd7 7a08 	vldr	s15, [r7, #32]
 8001486:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001492:	ee17 3a90 	vmov	r3, s15
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 800149c:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t)(fabsf(RAD_TO_DEG(AngularVelocity_rad)) * 10.0f);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f81d 	bl	80004e0 <__aeabi_f2d>
 80014a6:	a346      	add	r3, pc, #280	@ (adr r3, 80015c0 <Modbus_Protocal_Worker+0x2d0>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f870 	bl	8000590 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb24 	bl	8000b04 <__aeabi_d2f>
 80014bc:	ee07 0a90 	vmov	s15, r0
 80014c0:	eef0 7ae7 	vabs.f32	s15, s15
 80014c4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d0:	ee17 3a90 	vmov	r3, s15
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 80014da:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t)(fabsf(RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fffe 	bl	80004e0 <__aeabi_f2d>
 80014e4:	a336      	add	r3, pc, #216	@ (adr r3, 80015c0 <Modbus_Protocal_Worker+0x2d0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f851 	bl	8000590 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb05 	bl	8000b04 <__aeabi_d2f>
 80014fa:	ee07 0a90 	vmov	s15, r0
 80014fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001502:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	b21b      	sxth	r3, r3
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001518:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t)(fabsf(Velocity_mm) * 10.0f);
 800151a:	edd7 7a07 	vldr	s15, [r7, #28]
 800151e:	eef0 7ae7 	vabs.f32	s15, s15
 8001522:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152e:	ee17 3a90 	vmov	r3, s15
 8001532:	b21b      	sxth	r3, r3
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001538:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t)(fabsf(Acceleration_mm) * 10.0f);
 800153a:	edd7 7a06 	vldr	s15, [r7, #24]
 800153e:	eef0 7ae7 	vabs.f32	s15, s15
 8001542:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154e:	ee17 3a90 	vmov	r3, s15
 8001552:	b21b      	sxth	r3, r3
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001558:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) mmPosition * 10.0f;
 800155a:	edd7 7a05 	vldr	s15, [r7, #20]
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 3a90 	vmov	r3, s15
 8001566:	b21b      	sxth	r3, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	ee17 3a90 	vmov	r3, s15
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <Modbus_Protocal_Worker+0x2d8>)
 8001584:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <Modbus_Protocal_Worker+0x2f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	7ddb      	ldrb	r3, [r3, #23]
 800158c:	3b01      	subs	r3, #1
 800158e:	2b03      	cmp	r3, #3
 8001590:	d80a      	bhi.n	80015a8 <Modbus_Protocal_Worker+0x2b8>
 8001592:	a201      	add	r2, pc, #4	@ (adr r2, 8001598 <Modbus_Protocal_Worker+0x2a8>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015ed 	.word	0x080015ed
 800159c:	08001781 	.word	0x08001781
 80015a0:	08001679 	.word	0x08001679
 80015a4:	080016bd 	.word	0x080016bd
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <Modbus_Protocal_Worker+0x2f8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	75da      	strb	r2, [r3, #23]
		break;
 80015b0:	e0fe      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	54442d18 	.word	0x54442d18
 80015bc:	3ff921fb 	.word	0x3ff921fb
 80015c0:	1a63c1f8 	.word	0x1a63c1f8
 80015c4:	404ca5dc 	.word	0x404ca5dc
 80015c8:	200010d8 	.word	0x200010d8
 80015cc:	20000b7f 	.word	0x20000b7f
 80015d0:	20000bfd 	.word	0x20000bfd
 80015d4:	3dcccccd 	.word	0x3dcccccd
 80015d8:	20000bf4 	.word	0x20000bf4
 80015dc:	20000bf8 	.word	0x20000bf8
 80015e0:	20000bfc 	.word	0x20000bfc
 80015e4:	20000280 	.word	0x20000280
 80015e8:	2000027c 	.word	0x2000027c
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80015ec:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <Modbus_Protocal_Worker+0x316>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 80015f8:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001600:	f000 f9cc 	bl	800199c <Modbus_Emission>
 8001604:	e018      	b.n	8001638 <Modbus_Protocal_Worker+0x348>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001606:	4b6c      	ldr	r3, [pc, #432]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001610:	4b69      	ldr	r3, [pc, #420]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800161a:	b29b      	uxth	r3, r3
 800161c:	429a      	cmp	r2, r3
 800161e:	d00b      	beq.n	8001638 <Modbus_Protocal_Worker+0x348>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001620:	4b65      	ldr	r3, [pc, #404]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001628:	4b63      	ldr	r3, [pc, #396]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001630:	4b61      	ldr	r3, [pc, #388]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2203      	movs	r2, #3
 8001636:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001638:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001642:	2b20      	cmp	r3, #32
 8001644:	f040 80ad 	bne.w	80017a2 <Modbus_Protocal_Worker+0x4b2>
			hModbus->modbusUartStructure.RxTail = 0;
 8001648:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001652:	4b59      	ldr	r3, [pc, #356]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001658:	4b57      	ldr	r3, [pc, #348]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b56      	ldr	r3, [pc, #344]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001664:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001668:	4413      	add	r3, r2
 800166a:	3302      	adds	r3, #2
 800166c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001670:	4619      	mov	r1, r3
 8001672:	f008 fc6f 	bl	8009f54 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 8001676:	e094      	b.n	80017a2 <Modbus_Protocal_Worker+0x4b2>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001678:	4b4f      	ldr	r3, [pc, #316]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	7d1b      	ldrb	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8091 	beq.w	80017a6 <Modbus_Protocal_Worker+0x4b6>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001684:	4b4c      	ldr	r3, [pc, #304]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	22fe      	movs	r2, #254	@ 0xfe
 800168a:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800168c:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001696:	4b48      	ldr	r3, [pc, #288]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016a6:	4b44      	ldr	r3, [pc, #272]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80016aa:	1a8a      	subs	r2, r1, r2
 80016ac:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016ae:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2204      	movs	r2, #4
 80016b8:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016ba:	e074      	b.n	80017a6 <Modbus_Protocal_Worker+0x4b6>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80016bc:	4b3e      	ldr	r3, [pc, #248]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016c4:	f113 0f02 	cmn.w	r3, #2
 80016c8:	d150      	bne.n	800176c <Modbus_Protocal_Worker+0x47c>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 80016d2:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 80016da:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 80016e2:	3b02      	subs	r3, #2
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff fd96 	bl	8001218 <CRC16>
 80016ec:	4603      	mov	r3, r0
 80016ee:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 80016f0:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016f2:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016f4:	6819      	ldr	r1, [r3, #0]
 80016f6:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 80016fe:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001700:	440b      	add	r3, r1
 8001702:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d10c      	bne.n	8001724 <Modbus_Protocal_Worker+0x434>
					&& CalculateCRC.U8[1]
 800170a:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001718:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800171a:	440b      	add	r3, r1
 800171c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d004      	beq.n	800172e <Modbus_Protocal_Worker+0x43e>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001724:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	22ff      	movs	r2, #255	@ 0xff
 800172a:	759a      	strb	r2, [r3, #22]
				break;
 800172c:	e040      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 8001736:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d113      	bne.n	8001768 <Modbus_Protocal_Worker+0x478>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001750:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800175a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800175c:	461a      	mov	r2, r3
 800175e:	f00a f9d7 	bl	800bb10 <memcpy>

			//execute command
			Modbus_frame_response();
 8001762:	f000 f903 	bl	800196c <Modbus_frame_response>
 8001766:	e001      	b.n	800176c <Modbus_Protocal_Worker+0x47c>
				break;
 8001768:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 800176a:	e021      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
		if (hModbus->Flag_T35TimeOut) {
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	7d5b      	ldrb	r3, [r3, #21]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <Modbus_Protocal_Worker+0x4ba>
			hModbus->Mstatus = Modbus_state_Idle;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	75da      	strb	r2, [r3, #23]
		break;
 800177e:	e014      	b.n	80017aa <Modbus_Protocal_Worker+0x4ba>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001780:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178a:	2b20      	cmp	r3, #32
 800178c:	d10f      	bne.n	80017ae <Modbus_Protocal_Worker+0x4be>
			hModbus->TxCount = 0;
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <Modbus_Protocal_Worker+0x4c8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	75da      	strb	r2, [r3, #23]
		break;
 80017a0:	e005      	b.n	80017ae <Modbus_Protocal_Worker+0x4be>
		break;
 80017a2:	bf00      	nop
 80017a4:	e004      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
		break;
 80017a6:	bf00      	nop
 80017a8:	e002      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
		break;
 80017aa:	bf00      	nop
 80017ac:	e000      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
		break;
 80017ae:	bf00      	nop
}
 80017b0:	bf00      	nop
 80017b2:	372c      	adds	r7, #44	@ 0x2c
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	2000027c 	.word	0x2000027c

080017bc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <modbusWrite1Register+0x7c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	7e5b      	ldrb	r3, [r3, #25]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001838 <modbusWrite1Register+0x7c>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	7e92      	ldrb	r2, [r2, #26]
 80017d2:	4413      	add	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <modbusWrite1Register+0x7c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d903      	bls.n	80017ea <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017e2:	2002      	movs	r0, #2
 80017e4:	f000 f8a0 	bl	8001928 <ModbusErrorReply>
		return;
 80017e8:	e023      	b.n	8001832 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <modbusWrite1Register+0x7c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <modbusWrite1Register+0x7c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	440b      	add	r3, r1
 80017fa:	7ed2      	ldrb	r2, [r2, #27]
 80017fc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <modbusWrite1Register+0x7c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <modbusWrite1Register+0x7c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	7f12      	ldrb	r2, [r2, #28]
 8001810:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <modbusWrite1Register+0x7c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <modbusWrite1Register+0x7c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3318      	adds	r3, #24
 8001820:	2208      	movs	r2, #8
 8001822:	4619      	mov	r1, r3
 8001824:	f00a f974 	bl	800bb10 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <modbusWrite1Register+0x7c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2205      	movs	r2, #5
 800182e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000027c 	.word	0x2000027c

0800183c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001842:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <modbusRead1Register+0xe8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	7edb      	ldrb	r3, [r3, #27]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 800184c:	4a35      	ldr	r2, [pc, #212]	@ (8001924 <modbusRead1Register+0xe8>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001852:	4413      	add	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001856:	4b33      	ldr	r3, [pc, #204]	@ (8001924 <modbusRead1Register+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	7e5b      	ldrb	r3, [r3, #25]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	4a30      	ldr	r2, [pc, #192]	@ (8001924 <modbusRead1Register+0xe8>)
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	7e92      	ldrb	r2, [r2, #26]
 8001866:	4413      	add	r3, r2
 8001868:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <modbusRead1Register+0x3a>
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	2b7d      	cmp	r3, #125	@ 0x7d
 8001874:	d903      	bls.n	800187e <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001876:	2003      	movs	r0, #3
 8001878:	f000 f856 	bl	8001928 <ModbusErrorReply>
		return;
 800187c:	e04e      	b.n	800191c <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 800187e:	88ba      	ldrh	r2, [r7, #4]
 8001880:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <modbusRead1Register+0xe8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d808      	bhi.n	800189c <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 800188a:	88ba      	ldrh	r2, [r7, #4]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4413      	add	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <modbusRead1Register+0xe8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	d903      	bls.n	80018a4 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800189c:	2002      	movs	r0, #2
 800189e:	f000 f843 	bl	8001928 <ModbusErrorReply>
		return;
 80018a2:	e03b      	b.n	800191c <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <modbusRead1Register+0xe8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <modbusRead1Register+0xe8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0052      	lsls	r2, r2, #1
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80018be:	2400      	movs	r4, #0
 80018c0:	e020      	b.n	8001904 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <modbusRead1Register+0xe8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	4423      	add	r3, r4
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <modbusRead1Register+0xe8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	1c63      	adds	r3, r4, #1
 80018d6:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018d8:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 80018da:	4413      	add	r3, r2
 80018dc:	460a      	mov	r2, r1
 80018de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <modbusRead1Register+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4423      	add	r3, r4
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <modbusRead1Register+0xe8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	0063      	lsls	r3, r4, #1
 80018f6:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018f8:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 80018fa:	4413      	add	r3, r2
 80018fc:	460a      	mov	r2, r1
 80018fe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001902:	3401      	adds	r4, #1
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	429c      	cmp	r4, r3
 8001908:	dbdb      	blt.n	80018c2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <modbusRead1Register+0xe8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	bf00      	nop
 8001924:	2000027c 	.word	0x2000027c

08001928 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <ModbusErrorReply+0x40>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	7e1a      	ldrb	r2, [r3, #24]
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <ModbusErrorReply+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <ModbusErrorReply+0x40>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <ModbusErrorReply+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000027c 	.word	0x2000027c

0800196c <Modbus_frame_response>:

void Modbus_frame_response() {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <Modbus_frame_response+0x2c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	7e1b      	ldrb	r3, [r3, #24]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d004      	beq.n	8001984 <Modbus_frame_response+0x18>
 800197a:	2b06      	cmp	r3, #6
 800197c:	d105      	bne.n	800198a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800197e:	f7ff ff1d 	bl	80017bc <modbusWrite1Register>
		break;
 8001982:	e006      	b.n	8001992 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001984:	f7ff ff5a 	bl	800183c <modbusRead1Register>
		break;
 8001988:	e003      	b.n	8001992 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ffcc 	bl	8001928 <ModbusErrorReply>
		break;
 8001990:	bf00      	nop

	}
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000027c 	.word	0x2000027c

0800199c <Modbus_Emission>:

void Modbus_Emission() {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d15d      	bne.n	8001a6c <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80019c6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 80019c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019d8:	461a      	mov	r2, r3
 80019da:	f00a f899 	bl	800bb10 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3203      	adds	r2, #3
 80019ee:	b292      	uxth	r2, r2
 80019f0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <Modbus_Emission+0xe8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a04:	3b02      	subs	r3, #2
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff fc05 	bl	8001218 <CRC16>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001a1e:	3b02      	subs	r3, #2
 8001a20:	7939      	ldrb	r1, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	460a      	mov	r2, r1
 8001a26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 8001a36:	3b01      	subs	r3, #1
 8001a38:	7979      	ldrb	r1, [r7, #5]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d10d      	bne.n	8001a6c <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a66:	461a      	mov	r2, r3
 8001a68:	f008 f9f4 	bl	8009e54 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <Modbus_Emission+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	755a      	strb	r2, [r3, #21]

}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000027c 	.word	0x2000027c

08001a88 <Trapezoidal_Init>:

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max,
		float a_max) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a94:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a98:	ed87 1a00 	vstr	s2, [r7]
	profile->distance_total = fabsf(distance_total);
 8001a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	profile->v_max = fabsf(v_max);
 8001aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aae:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	edc3 7a01 	vstr	s15, [r3, #4]
	profile->a_max = fabsf(a_max);
 8001ab8:	edd7 7a00 	vldr	s15, [r7]
 8001abc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	edc3 7a03 	vstr	s15, [r3, #12]
	profile->current_position = 0.0f;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
	profile->current_velocity = 0.0f;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
	profile->target_position = distance_total;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	619a      	str	r2, [r3, #24]
	profile->direction = (distance_total >= 0) ? 1.0f : -1.0f;
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	db02      	blt.n	8001af0 <Trapezoidal_Init+0x68>
 8001aea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aee:	e000      	b.n	8001af2 <Trapezoidal_Init+0x6a>
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <Trapezoidal_Init+0xe8>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	61da      	str	r2, [r3, #28]
	profile->finished = 0;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]

	// Check if triangular or trapezoidal
	float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b16:	edc7 7a05 	vstr	s15, [r7, #20]
	if (profile->distance_total < d_total_min) {
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	dd14      	ble.n	8001b58 <Trapezoidal_Init+0xd0>
		// Triangular profile
		profile->is_triangular = 1;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	f009 fff2 	bl	800bb30 <sqrtf>
 8001b4c:	eef0 7a40 	vmov.f32	s15, s0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// Full trapezoidal profile
		profile->is_triangular = 0;
		profile->v_peak = profile->v_max;
	}
}
 8001b56:	e006      	b.n	8001b66 <Trapezoidal_Init+0xde>
		profile->is_triangular = 0;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = profile->v_max;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	bf800000 	.word	0xbf800000

08001b74 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	ed87 0a00 	vstr	s0, [r7]
	profile->direction = (profile->target_position - profile->current_position >= 0) ? 1.0f : -1.0f;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	db02      	blt.n	8001ba0 <Trapezoidal_Update+0x2c>
 8001b9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b9e:	e000      	b.n	8001ba2 <Trapezoidal_Update+0x2e>
 8001ba0:	4a6d      	ldr	r2, [pc, #436]	@ (8001d58 <Trapezoidal_Update+0x1e4>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	61da      	str	r2, [r3, #28]
    if (profile->finished) return;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80ce 	bne.w	8001d4c <Trapezoidal_Update+0x1d8>

    float remaining_distance = profile->target_position - profile->current_position;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]
    float stopping_distance = (profile->current_velocity * profile->current_velocity) / (2.0f * profile->a_max);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bd0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bda:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (fabsf(remaining_distance) <= stopping_distance) {
 8001be6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bea:	eef0 7ae7 	vabs.f32	s15, s15
 8001bee:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	db3c      	blt.n	8001c76 <Trapezoidal_Update+0x102>
        // Decelerate
        profile->current_velocity -= profile->a_max * dt * profile->direction;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c08:	edd7 7a00 	vldr	s15, [r7]
 8001c0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	edc3 7a05 	vstr	s15, [r3, #20]
        if (profile->direction > 0 && profile->current_velocity < 0.0f) profile->current_velocity = 0.0f;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd0b      	ble.n	8001c4c <Trapezoidal_Update+0xd8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d503      	bpl.n	8001c4c <Trapezoidal_Update+0xd8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
        if (profile->direction < 0 && profile->current_velocity > 0.0f) profile->current_velocity = 0.0f;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d545      	bpl.n	8001ce8 <Trapezoidal_Update+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd3d      	ble.n	8001ce8 <Trapezoidal_Update+0x174>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	e038      	b.n	8001ce8 <Trapezoidal_Update+0x174>
    } else {
        // Accelerate
        if (fabsf(profile->current_velocity) < profile->v_peak) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c7c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	d52b      	bpl.n	8001ce8 <Trapezoidal_Update+0x174>
            profile->current_velocity += profile->a_max * dt * profile->direction;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c9c:	edd7 7a00 	vldr	s15, [r7]
 8001ca0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	edc3 7a05 	vstr	s15, [r3, #20]
            if (fabsf(profile->current_velocity) > profile->v_peak) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cbe:	eeb0 7ae7 	vabs.f32	s14, s15
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	dd0a      	ble.n	8001ce8 <Trapezoidal_Update+0x174>
                profile->current_velocity = profile->v_peak * profile->direction;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	edc3 7a05 	vstr	s15, [r3, #20]

    // Update position
    // profile->current_position += profile->current_velocity * dt;

    // Check if finished
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	dd0a      	ble.n	8001d0e <Trapezoidal_Update+0x19a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	da12      	bge.n	8001d34 <Trapezoidal_Update+0x1c0>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	edd3 7a07 	vldr	s15, [r3, #28]
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d517      	bpl.n	8001d4e <Trapezoidal_Update+0x1da>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d80c      	bhi.n	8001d4e <Trapezoidal_Update+0x1da>
        profile->current_position = profile->target_position;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	611a      	str	r2, [r3, #16]
        profile->current_velocity = 0.0f;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
        profile->finished = 1;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	621a      	str	r2, [r3, #32]
 8001d4a:	e000      	b.n	8001d4e <Trapezoidal_Update+0x1da>
    if (profile->finished) return;
 8001d4c:	bf00      	nop
    }
}
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	bf800000 	.word	0xbf800000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	ed2d 8b02 	vpush	{d8}
 8001d68:	b0c5      	sub	sp, #276	@ 0x114
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6c:	f003 fb69 	bl	8005442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d70:	f001 fdd8 	bl	8003924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d74:	f002 fa32 	bl	80041dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001d78:	f002 f9fe 	bl	8004178 <MX_DMA_Init>
  MX_TIM4_Init();
 8001d7c:	f001 ff7a 	bl	8003c74 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d80:	f001 ffce 	bl	8003d20 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001d84:	f001 ff20 	bl	8003bc8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001d88:	f002 f818 	bl	8003dbc <MX_TIM8_Init>
  MX_TIM15_Init();
 8001d8c:	f002 f8d2 	bl	8003f34 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001d90:	f001 fe14 	bl	80039bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d94:	f001 fe98 	bl	8003ac8 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001d98:	f002 f970 	bl	800407c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001d9c:	f002 f99e 	bl	80040dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001da0:	48bf      	ldr	r0, [pc, #764]	@ (80020a0 <main+0x340>)
 8001da2:	f005 fa5f 	bl	8007264 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001da6:	2100      	movs	r1, #0
 8001da8:	48bd      	ldr	r0, [pc, #756]	@ (80020a0 <main+0x340>)
 8001daa:	f005 fd27 	bl	80077fc <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001dae:	2104      	movs	r1, #4
 8001db0:	48bb      	ldr	r0, [pc, #748]	@ (80020a0 <main+0x340>)
 8001db2:	f005 fd23 	bl	80077fc <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001db6:	48bb      	ldr	r0, [pc, #748]	@ (80020a4 <main+0x344>)
 8001db8:	f005 fa54 	bl	8007264 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	48b9      	ldr	r0, [pc, #740]	@ (80020a4 <main+0x344>)
 8001dc0:	f005 fd1c 	bl	80077fc <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	48b7      	ldr	r0, [pc, #732]	@ (80020a4 <main+0x344>)
 8001dc8:	f005 fd18 	bl	80077fc <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001dcc:	213c      	movs	r1, #60	@ 0x3c
 8001dce:	48b6      	ldr	r0, [pc, #728]	@ (80020a8 <main+0x348>)
 8001dd0:	f005 ffc2 	bl	8007d58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001dd4:	213c      	movs	r1, #60	@ 0x3c
 8001dd6:	48b5      	ldr	r0, [pc, #724]	@ (80020ac <main+0x34c>)
 8001dd8:	f005 ffbe 	bl	8007d58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001ddc:	48b4      	ldr	r0, [pc, #720]	@ (80020b0 <main+0x350>)
 8001dde:	f005 fab1 	bl	8007344 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001de2:	48b4      	ldr	r0, [pc, #720]	@ (80020b4 <main+0x354>)
 8001de4:	f005 fa3e 	bl	8007264 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001de8:	2108      	movs	r1, #8
 8001dea:	48b2      	ldr	r0, [pc, #712]	@ (80020b4 <main+0x354>)
 8001dec:	f005 fb90 	bl	8007510 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001df0:	210c      	movs	r1, #12
 8001df2:	48b0      	ldr	r0, [pc, #704]	@ (80020b4 <main+0x354>)
 8001df4:	f005 fb8c 	bl	8007510 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001df8:	48af      	ldr	r0, [pc, #700]	@ (80020b8 <main+0x358>)
 8001dfa:	f005 fa33 	bl	8007264 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	48ad      	ldr	r0, [pc, #692]	@ (80020b8 <main+0x358>)
 8001e02:	f005 fb85 	bl	8007510 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001e06:	f002 fb11 	bl	800442c <DWT_Init>

	PID.Kp = 0.1;
 8001e0a:	4aac      	ldr	r2, [pc, #688]	@ (80020bc <main+0x35c>)
 8001e0c:	4bac      	ldr	r3, [pc, #688]	@ (80020c0 <main+0x360>)
 8001e0e:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001e10:	4aaa      	ldr	r2, [pc, #680]	@ (80020bc <main+0x35c>)
 8001e12:	4bac      	ldr	r3, [pc, #688]	@ (80020c4 <main+0x364>)
 8001e14:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001e16:	4aa9      	ldr	r2, [pc, #676]	@ (80020bc <main+0x35c>)
 8001e18:	4ba9      	ldr	r3, [pc, #676]	@ (80020c0 <main+0x360>)
 8001e1a:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	48a7      	ldr	r0, [pc, #668]	@ (80020bc <main+0x35c>)
 8001e20:	f009 fe0e 	bl	800ba40 <arm_pid_init_f32>

	Reset_R();
 8001e24:	f002 ff16 	bl	8004c54 <Reset_R>
	Reset_P();
 8001e28:	f002 ff24 	bl	8004c74 <Reset_P>
	calibState = CALIB_IDLE;
 8001e2c:	4aa6      	ldr	r2, [pc, #664]	@ (80020c8 <main+0x368>)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f002 fee4 	bl	8004c00 <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001e38:	4aa4      	ldr	r2, [pc, #656]	@ (80020cc <main+0x36c>)
 8001e3a:	4ba5      	ldr	r3, [pc, #660]	@ (80020d0 <main+0x370>)
 8001e3c:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001e3e:	4aa3      	ldr	r2, [pc, #652]	@ (80020cc <main+0x36c>)
 8001e40:	4ba4      	ldr	r3, [pc, #656]	@ (80020d4 <main+0x374>)
 8001e42:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001e44:	4aa1      	ldr	r2, [pc, #644]	@ (80020cc <main+0x36c>)
 8001e46:	2315      	movs	r3, #21
 8001e48:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001e4a:	4aa0      	ldr	r2, [pc, #640]	@ (80020cc <main+0x36c>)
 8001e4c:	23c8      	movs	r3, #200	@ 0xc8
 8001e4e:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001e50:	49a1      	ldr	r1, [pc, #644]	@ (80020d8 <main+0x378>)
 8001e52:	489e      	ldr	r0, [pc, #632]	@ (80020cc <main+0x36c>)
 8001e54:	f7ff f98a 	bl	800116c <Modbus_init>
	//////////////////////

	//////////////////////
	VELO_PROFILE revolute;
	VELO_PROFILE prismatic;
	Trapezoidal_Init(&revolute, M_PI * 2.00f, 1.40f, 4.00f);
 8001e58:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001e5c:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 8001e60:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 80020dc <main+0x37c>
 8001e64:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80020e0 <main+0x380>
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fe0d 	bl	8001a88 <Trapezoidal_Init>
	Trapezoidal_Init(&prismatic, 300.00f, 600.00f, 3200.00f);
 8001e6e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001e72:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80020e4 <main+0x384>
 8001e76:	eddf 0a9c 	vldr	s1, [pc, #624]	@ 80020e8 <main+0x388>
 8001e7a:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 80020ec <main+0x38c>
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe02 	bl	8001a88 <Trapezoidal_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//BaseSystem//////////
		Modbus_Protocal_Worker();
 8001e84:	f7ff fa34 	bl	80012f0 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001e88:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <main+0x34c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e8e:	4b98      	ldr	r3, [pc, #608]	@ (80020f0 <main+0x390>)
 8001e90:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001e92:	4b85      	ldr	r3, [pc, #532]	@ (80020a8 <main+0x348>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e98:	4b96      	ldr	r3, [pc, #600]	@ (80020f4 <main+0x394>)
 8001e9a:	601a      	str	r2, [r3, #0]
		//Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001e9c:	f002 fbbc 	bl	8004618 <micros>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		if (currentTime > timestamp) {
 8001ea8:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001eac:	4b92      	ldr	r3, [pc, #584]	@ (80020f8 <main+0x398>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	4282      	cmp	r2, r0
 8001eb4:	418b      	sbcs	r3, r1
 8001eb6:	d210      	bcs.n	8001eda <main+0x17a>
			timestamp = currentTime + 1000;  //us
 8001eb8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001ebc:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8001ec0:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001ec2:	f143 0300 	adc.w	r3, r3, #0
 8001ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ec8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80020f8 <main+0x398>)
 8001ece:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8001ed2:	f002 fc85 	bl	80047e0 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 8001ed6:	f002 fd6b 	bl	80049b0 <Prismatic_PosVel_Update>
		}
		//Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001eda:	f002 fb9d 	bl	8004618 <micros>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
		if (currentTime1 > timestamp1) {
 8001ee6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001eea:	4b84      	ldr	r3, [pc, #528]	@ (80020fc <main+0x39c>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	4282      	cmp	r2, r0
 8001ef2:	418b      	sbcs	r3, r1
 8001ef4:	d20d      	bcs.n	8001f12 <main+0x1b2>
			timestamp1 = currentTime1 + 10000;  //us
 8001ef6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8001efa:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001efe:	1851      	adds	r1, r2, r1
 8001f00:	6739      	str	r1, [r7, #112]	@ 0x70
 8001f02:	f143 0300 	adc.w	r3, r3, #0
 8001f06:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80020fc <main+0x39c>)
 8001f0e:	e9c3 0100 	strd	r0, r1, [r3]

		}
		//Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 8001f12:	f002 fb81 	bl	8004618 <micros>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
		if (currentTime2 > timestamp2) {
 8001f1e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001f22:	4b77      	ldr	r3, [pc, #476]	@ (8002100 <main+0x3a0>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	4282      	cmp	r2, r0
 8001f2a:	418b      	sbcs	r3, r1
 8001f2c:	d20c      	bcs.n	8001f48 <main+0x1e8>
			timestamp2 = currentTime2 + 100000;  //us
 8001f2e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 8001f32:	4974      	ldr	r1, [pc, #464]	@ (8002104 <main+0x3a4>)
 8001f34:	1851      	adds	r1, r2, r1
 8001f36:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001f38:	f143 0300 	adc.w	r3, r3, #0
 8001f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <main+0x3a0>)
 8001f44:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001f48:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <main+0x3a8>)
 8001f4a:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001f4e:	4b6f      	ldr	r3, [pc, #444]	@ (800210c <main+0x3ac>)
 8001f50:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f54:	eef1 7a67 	vneg.f32	s15, s15
 8001f58:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5c:	f009 fe06 	bl	800bb6c <cosf>
 8001f60:	eef0 7a40 	vmov.f32	s15, s0
 8001f64:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001f68:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <main+0x3b0>)
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001f6e:	4b66      	ldr	r3, [pc, #408]	@ (8002108 <main+0x3a8>)
 8001f70:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001f74:	4b65      	ldr	r3, [pc, #404]	@ (800210c <main+0x3ac>)
 8001f76:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f009 fe39 	bl	800bbf4 <sinf>
 8001f82:	eef0 7a40 	vmov.f32	s15, s0
 8001f86:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001f8a:	4b62      	ldr	r3, [pc, #392]	@ (8002114 <main+0x3b4>)
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001f90:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <main+0x344>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b5f      	ldr	r3, [pc, #380]	@ (8002118 <main+0x3b8>)
 8001f9a:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001f9c:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <main+0x340>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002118 <main+0x3b8>)
 8001fa6:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <main+0x344>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa74 	bl	800049c <__aeabi_ui2d>
 8001fb4:	a336      	add	r3, pc, #216	@ (adr r3, 8002090 <main+0x330>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe f931 	bl	8000220 <__aeabi_dsub>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
		float RX_temp = map(
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd9d 	bl	8000b04 <__aeabi_d2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	ed9f 2a53 	vldr	s4, [pc, #332]	@ 800211c <main+0x3bc>
 8001fd0:	eddf 1a53 	vldr	s3, [pc, #332]	@ 8002120 <main+0x3c0>
 8001fd4:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002124 <main+0x3c4>
 8001fd8:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8002128 <main+0x3c8>
 8001fdc:	ee00 3a10 	vmov	s0, r3
 8001fe0:	f002 f9f6 	bl	80043d0 <map>
 8001fe4:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <main+0x340>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa54 	bl	800049c <__aeabi_ui2d>
 8001ff4:	a328      	add	r3, pc, #160	@ (adr r3, 8002098 <main+0x338>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f911 	bl	8000220 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
		float RY_temp = map(
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd7d 	bl	8000b04 <__aeabi_d2f>
 800200a:	4603      	mov	r3, r0
 800200c:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 800211c <main+0x3bc>
 8002010:	eddf 1a43 	vldr	s3, [pc, #268]	@ 8002120 <main+0x3c0>
 8002014:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8002124 <main+0x3c4>
 8002018:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002128 <main+0x3c8>
 800201c:	ee00 3a10 	vmov	s0, r3
 8002020:	f002 f9d6 	bl	80043d0 <map>
 8002024:	ed87 0a3c 	vstr	s0, [r7, #240]	@ 0xf0
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 8002028:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800202c:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	db0d      	blt.n	8002056 <main+0x2f6>
 800203a:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800203e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	d804      	bhi.n	8002056 <main+0x2f6>
			Receiver[0] = 0.00;
 800204c:	4a37      	ldr	r2, [pc, #220]	@ (800212c <main+0x3cc>)
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e074      	b.n	8002140 <main+0x3e0>
		else if (RX_temp > 100)
 8002056:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800205a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800211c <main+0x3bc>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd03      	ble.n	8002070 <main+0x310>
			Receiver[0] = 100.00;
 8002068:	4a30      	ldr	r2, [pc, #192]	@ (800212c <main+0x3cc>)
 800206a:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <main+0x3d0>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e067      	b.n	8002140 <main+0x3e0>
		else if (RX_temp < -100)
 8002070:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8002074:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002120 <main+0x3c0>
 8002078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	d55a      	bpl.n	8002138 <main+0x3d8>
			Receiver[0] = -100.00;
 8002082:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <main+0x3cc>)
 8002084:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <main+0x3d4>)
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e05a      	b.n	8002140 <main+0x3e0>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	40977000 	.word	0x40977000
 8002098:	00000000 	.word	0x00000000
 800209c:	40d21880 	.word	0x40d21880
 80020a0:	20000284 	.word	0x20000284
 80020a4:	20000350 	.word	0x20000350
 80020a8:	2000041c 	.word	0x2000041c
 80020ac:	200004e8 	.word	0x200004e8
 80020b0:	200005b4 	.word	0x200005b4
 80020b4:	20000680 	.word	0x20000680
 80020b8:	2000074c 	.word	0x2000074c
 80020bc:	20000b90 	.word	0x20000b90
 80020c0:	3dcccccd 	.word	0x3dcccccd
 80020c4:	3727c5ac 	.word	0x3727c5ac
 80020c8:	20000bd4 	.word	0x20000bd4
 80020cc:	20000c00 	.word	0x20000c00
 80020d0:	200008e4 	.word	0x200008e4
 80020d4:	20000818 	.word	0x20000818
 80020d8:	200010d8 	.word	0x200010d8
 80020dc:	3fb33333 	.word	0x3fb33333
 80020e0:	40c90fdb 	.word	0x40c90fdb
 80020e4:	45480000 	.word	0x45480000
 80020e8:	44160000 	.word	0x44160000
 80020ec:	43960000 	.word	0x43960000
 80020f0:	20000ab8 	.word	0x20000ab8
 80020f4:	20000abc 	.word	0x20000abc
 80020f8:	20001268 	.word	0x20001268
 80020fc:	20001270 	.word	0x20001270
 8002100:	20001278 	.word	0x20001278
 8002104:	000186a0 	.word	0x000186a0
 8002108:	20000b00 	.word	0x20000b00
 800210c:	20000ac0 	.word	0x20000ac0
 8002110:	20000b44 	.word	0x20000b44
 8002114:	20000b48 	.word	0x20000b48
 8002118:	20000a8c 	.word	0x20000a8c
 800211c:	42c80000 	.word	0x42c80000
 8002120:	c2c80000 	.word	0xc2c80000
 8002124:	43fa0000 	.word	0x43fa0000
 8002128:	c3fa0000 	.word	0xc3fa0000
 800212c:	20000a78 	.word	0x20000a78
 8002130:	42c80000 	.word	0x42c80000
 8002134:	c2c80000 	.word	0xc2c80000
		else
			Receiver[0] = RX_temp;
 8002138:	4ac1      	ldr	r2, [pc, #772]	@ (8002440 <main+0x6e0>)
 800213a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213e:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8002140:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8002144:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	db0d      	blt.n	800216e <main+0x40e>
 8002152:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8002156:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800215a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	d804      	bhi.n	800216e <main+0x40e>
			Receiver[1] = 0.00;
 8002164:	4ab6      	ldr	r2, [pc, #728]	@ (8002440 <main+0x6e0>)
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	6053      	str	r3, [r2, #4]
 800216c:	e01d      	b.n	80021aa <main+0x44a>
		else if (RY_temp > 100)
 800216e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8002172:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8002444 <main+0x6e4>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd03      	ble.n	8002188 <main+0x428>
			Receiver[1] = 100.00;
 8002180:	4aaf      	ldr	r2, [pc, #700]	@ (8002440 <main+0x6e0>)
 8002182:	4bb1      	ldr	r3, [pc, #708]	@ (8002448 <main+0x6e8>)
 8002184:	6053      	str	r3, [r2, #4]
 8002186:	e010      	b.n	80021aa <main+0x44a>
		else if (RY_temp < -100)
 8002188:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 800218c:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800244c <main+0x6ec>
 8002190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	d503      	bpl.n	80021a2 <main+0x442>
			Receiver[1] = -100.00;
 800219a:	4aa9      	ldr	r2, [pc, #676]	@ (8002440 <main+0x6e0>)
 800219c:	4bac      	ldr	r3, [pc, #688]	@ (8002450 <main+0x6f0>)
 800219e:	6053      	str	r3, [r2, #4]
 80021a0:	e003      	b.n	80021aa <main+0x44a>
		else
			Receiver[1] = RY_temp;
 80021a2:	4aa7      	ldr	r2, [pc, #668]	@ (8002440 <main+0x6e0>)
 80021a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80021a8:	6053      	str	r3, [r2, #4]

		if (pulse_width_us[0] > 4000.00) pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 80021aa:	4baa      	ldr	r3, [pc, #680]	@ (8002454 <main+0x6f4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021b2:	d912      	bls.n	80021da <main+0x47a>
 80021b4:	4ba7      	ldr	r3, [pc, #668]	@ (8002454 <main+0x6f4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f96f 	bl	800049c <__aeabi_ui2d>
 80021be:	a39c      	add	r3, pc, #624	@ (adr r3, 8002430 <main+0x6d0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f82c 	bl	8000220 <__aeabi_dsub>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fc78 	bl	8000ac4 <__aeabi_d2uiz>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002454 <main+0x6f4>)
 80021d8:	601a      	str	r2, [r3, #0]
		if (pulse_width_us[1] > 4000.00) pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 80021da:	4b9e      	ldr	r3, [pc, #632]	@ (8002454 <main+0x6f4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021e2:	d912      	bls.n	800220a <main+0x4aa>
 80021e4:	4b9b      	ldr	r3, [pc, #620]	@ (8002454 <main+0x6f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f957 	bl	800049c <__aeabi_ui2d>
 80021ee:	a390      	add	r3, pc, #576	@ (adr r3, 8002430 <main+0x6d0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe f814 	bl	8000220 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc60 	bl	8000ac4 <__aeabi_d2uiz>
 8002204:	4602      	mov	r2, r0
 8002206:	4b93      	ldr	r3, [pc, #588]	@ (8002454 <main+0x6f4>)
 8002208:	605a      	str	r2, [r3, #4]
		if (pulse_width_us[2] > 4000.00) pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 800220a:	4b92      	ldr	r3, [pc, #584]	@ (8002454 <main+0x6f4>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002212:	d912      	bls.n	800223a <main+0x4da>
 8002214:	4b8f      	ldr	r3, [pc, #572]	@ (8002454 <main+0x6f4>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f93f 	bl	800049c <__aeabi_ui2d>
 800221e:	a384      	add	r3, pc, #528	@ (adr r3, 8002430 <main+0x6d0>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fd fffc 	bl	8000220 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fc48 	bl	8000ac4 <__aeabi_d2uiz>
 8002234:	4602      	mov	r2, r0
 8002236:	4b87      	ldr	r3, [pc, #540]	@ (8002454 <main+0x6f4>)
 8002238:	609a      	str	r2, [r3, #8]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 800223a:	4b86      	ldr	r3, [pc, #536]	@ (8002454 <main+0x6f4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	ee17 0a90 	vmov	r0, s15
 800224a:	f7fe f949 	bl	80004e0 <__aeabi_f2d>
 800224e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002438 <main+0x6d8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fd ffe4 	bl	8000220 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc50 	bl	8000b04 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 8002444 <main+0x6e4>
 800226a:	eddf 1a78 	vldr	s3, [pc, #480]	@ 800244c <main+0x6ec>
 800226e:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8002458 <main+0x6f8>
 8002272:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 800245c <main+0x6fc>
 8002276:	ee00 3a10 	vmov	s0, r3
 800227a:	f002 f8a9 	bl	80043d0 <map>
 800227e:	eef0 7a40 	vmov.f32	s15, s0
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <main+0x6e0>)
 8002284:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8002288:	4b72      	ldr	r3, [pc, #456]	@ (8002454 <main+0x6f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002294:	ee17 0a90 	vmov	r0, s15
 8002298:	f7fe f922 	bl	80004e0 <__aeabi_f2d>
 800229c:	a366      	add	r3, pc, #408	@ (adr r3, 8002438 <main+0x6d8>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fd ffbd 	bl	8000220 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc29 	bl	8000b04 <__aeabi_d2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8002444 <main+0x6e4>
 80022b8:	eddf 1a64 	vldr	s3, [pc, #400]	@ 800244c <main+0x6ec>
 80022bc:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 8002458 <main+0x6f8>
 80022c0:	eddf 0a66 	vldr	s1, [pc, #408]	@ 800245c <main+0x6fc>
 80022c4:	ee00 3a10 	vmov	s0, r3
 80022c8:	f002 f882 	bl	80043d0 <map>
 80022cc:	eef0 7a40 	vmov.f32	s15, s0
 80022d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002440 <main+0x6e0>)
 80022d2:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 80022d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <main+0x6f4>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f8fb 	bl	80004e0 <__aeabi_f2d>
 80022ea:	a353      	add	r3, pc, #332	@ (adr r3, 8002438 <main+0x6d8>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fd ff96 	bl	8000220 <__aeabi_dsub>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7fe fc02 	bl	8000b04 <__aeabi_d2f>
 8002300:	4603      	mov	r3, r0
 8002302:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8002444 <main+0x6e4>
 8002306:	eddf 1a51 	vldr	s3, [pc, #324]	@ 800244c <main+0x6ec>
 800230a:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002458 <main+0x6f8>
 800230e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 800245c <main+0x6fc>
 8002312:	ee00 3a10 	vmov	s0, r3
 8002316:	f002 f85b 	bl	80043d0 <map>
 800231a:	eef0 7a40 	vmov.f32	s15, s0
 800231e:	4b48      	ldr	r3, [pc, #288]	@ (8002440 <main+0x6e0>)
 8002320:	edc3 7a04 	vstr	s15, [r3, #16]
//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002324:	4b46      	ldr	r3, [pc, #280]	@ (8002440 <main+0x6e0>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 8002460 <main+0x700>
 800232e:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8002464 <main+0x704>
 8002332:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 8002444 <main+0x6e4>
 8002336:	eddf 0a45 	vldr	s1, [pc, #276]	@ 800244c <main+0x6ec>
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	f002 f847 	bl	80043d0 <map>
 8002342:	eef0 7a40 	vmov.f32	s15, s0
 8002346:	4b48      	ldr	r3, [pc, #288]	@ (8002468 <main+0x708>)
 8002348:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 800234c:	4b3c      	ldr	r3, [pc, #240]	@ (8002440 <main+0x6e0>)
 800234e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002352:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 8002460 <main+0x700>
 8002356:	eddf 1a43 	vldr	s3, [pc, #268]	@ 8002464 <main+0x704>
 800235a:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8002444 <main+0x6e4>
 800235e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800244c <main+0x6ec>
 8002362:	eeb0 0a67 	vmov.f32	s0, s15
 8002366:	f002 f833 	bl	80043d0 <map>
 800236a:	eef0 7a40 	vmov.f32	s15, s0
 800236e:	4b3f      	ldr	r3, [pc, #252]	@ (800246c <main+0x70c>)
 8002370:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002374:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002378:	483d      	ldr	r0, [pc, #244]	@ (8002470 <main+0x710>)
 800237a:	f003 fe97 	bl	80060ac <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d10e      	bne.n	80023a2 <main+0x642>
			Mode = 0;
 8002384:	4a3b      	ldr	r2, [pc, #236]	@ (8002474 <main+0x714>)
 8002386:	2300      	movs	r3, #0
 8002388:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 800238a:	4a3b      	ldr	r2, [pc, #236]	@ (8002478 <main+0x718>)
 800238c:	2301      	movs	r3, #1
 800238e:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8002390:	2000      	movs	r0, #0
 8002392:	f002 fc35 	bl	8004c00 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800239c:	4834      	ldr	r0, [pc, #208]	@ (8002470 <main+0x710>)
 800239e:	f003 fe9d 	bl	80060dc <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 80023a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023a6:	4835      	ldr	r0, [pc, #212]	@ (800247c <main+0x71c>)
 80023a8:	f003 fe80 	bl	80060ac <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <main+0x664>
			EmergencyState = 0;
 80023b2:	4a31      	ldr	r2, [pc, #196]	@ (8002478 <main+0x718>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023be:	482c      	ldr	r0, [pc, #176]	@ (8002470 <main+0x710>)
 80023c0:	f003 fe8c 	bl	80060dc <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 80023c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023c8:	482c      	ldr	r0, [pc, #176]	@ (800247c <main+0x71c>)
 80023ca:	f003 fe6f 	bl	80060ac <HAL_GPIO_ReadPin>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <main+0x67a>
			Pen_Status = 0;
 80023d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002480 <main+0x720>)
 80023d6:	2300      	movs	r3, #0
 80023d8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 80023da:	2104      	movs	r1, #4
 80023dc:	4827      	ldr	r0, [pc, #156]	@ (800247c <main+0x71c>)
 80023de:	f003 fe65 	bl	80060ac <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <main+0x68e>
			Pen_Status = 1;
 80023e8:	4a25      	ldr	r2, [pc, #148]	@ (8002480 <main+0x720>)
 80023ea:	2301      	movs	r3, #1
 80023ec:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80023ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f6:	f003 fe59 	bl	80060ac <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d103      	bne.n	8002408 <main+0x6a8>
			z_temp = 1;
 8002400:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <main+0x724>)
 8002402:	2301      	movs	r3, #1
 8002404:	7013      	strb	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <main+0x6c0>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){
 8002408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002410:	f003 fe4c 	bl	80060ac <HAL_GPIO_ReadPin>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <main+0x6c0>
			z_temp = 0;
 800241a:	4a1a      	ldr	r2, [pc, #104]	@ (8002484 <main+0x724>)
 800241c:	2300      	movs	r3, #0
 800241e:	7013      	strb	r3, [r2, #0]
		}


		if (EmergencyState == 1) {
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <main+0x718>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d12f      	bne.n	8002488 <main+0x728>
			Mode = 0;
 8002428:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <main+0x714>)
 800242a:	2300      	movs	r3, #0
 800242c:	7013      	strb	r3, [r2, #0]
 800242e:	e1aa      	b.n	8002786 <main+0xa26>
 8002430:	00000000 	.word	0x00000000
 8002434:	40b32400 	.word	0x40b32400
 8002438:	00000000 	.word	0x00000000
 800243c:	40977000 	.word	0x40977000
 8002440:	20000a78 	.word	0x20000a78
 8002444:	42c80000 	.word	0x42c80000
 8002448:	42c80000 	.word	0x42c80000
 800244c:	c2c80000 	.word	0xc2c80000
 8002450:	c2c80000 	.word	0xc2c80000
 8002454:	20000aac 	.word	0x20000aac
 8002458:	43fa0000 	.word	0x43fa0000
 800245c:	c3fa0000 	.word	0xc3fa0000
 8002460:	43960000 	.word	0x43960000
 8002464:	c3960000 	.word	0xc3960000
 8002468:	20000b3c 	.word	0x20000b3c
 800246c:	20000b40 	.word	0x20000b40
 8002470:	48000800 	.word	0x48000800
 8002474:	20000b7c 	.word	0x20000b7c
 8002478:	20000b7d 	.word	0x20000b7d
 800247c:	48000400 	.word	0x48000400
 8002480:	20000b7f 	.word	0x20000b7f
 8002484:	20000b39 	.word	0x20000b39
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002488:	4bad      	ldr	r3, [pc, #692]	@ (8002740 <main+0x9e0>)
 800248a:	edd3 7a02 	vldr	s15, [r3, #8]
 800248e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d513      	bpl.n	80024c4 <main+0x764>
 800249c:	4ba8      	ldr	r3, [pc, #672]	@ (8002740 <main+0x9e0>)
 800249e:	edd3 7a04 	vldr	s15, [r3, #16]
 80024a2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80024a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d509      	bpl.n	80024c4 <main+0x764>
			Mode = 0;
 80024b0:	4aa4      	ldr	r2, [pc, #656]	@ (8002744 <main+0x9e4>)
 80024b2:	2300      	movs	r3, #0
 80024b4:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024bc:	48a2      	ldr	r0, [pc, #648]	@ (8002748 <main+0x9e8>)
 80024be:	f003 fe0d 	bl	80060dc <HAL_GPIO_WritePin>
 80024c2:	e160      	b.n	8002786 <main+0xa26>
		} else if (Receiver[3] > 0 && IsPress == 0) {
 80024c4:	4b9e      	ldr	r3, [pc, #632]	@ (8002740 <main+0x9e0>)
 80024c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80024ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	f340 8155 	ble.w	8002780 <main+0xa20>
 80024d6:	4b9d      	ldr	r3, [pc, #628]	@ (800274c <main+0x9ec>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8150 	bne.w	8002780 <main+0xa20>
			IsPress = 1;
 80024e0:	4a9a      	ldr	r2, [pc, #616]	@ (800274c <main+0x9ec>)
 80024e2:	2301      	movs	r3, #1
 80024e4:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 80024e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002750 <main+0x9f0>)
 80024e8:	2300      	movs	r3, #0
 80024ea:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80024ec:	4b94      	ldr	r3, [pc, #592]	@ (8002740 <main+0x9e0>)
 80024ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80024f2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80024f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	dd2c      	ble.n	800255a <main+0x7fa>
 8002500:	4b8f      	ldr	r3, [pc, #572]	@ (8002740 <main+0x9e0>)
 8002502:	edd3 7a02 	vldr	s15, [r3, #8]
 8002506:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d522      	bpl.n	800255a <main+0x7fa>
 8002514:	4b8a      	ldr	r3, [pc, #552]	@ (8002740 <main+0x9e0>)
 8002516:	edd3 7a04 	vldr	s15, [r3, #16]
 800251a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800251e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	d518      	bpl.n	800255a <main+0x7fa>
				if (Mode != 1) {
 8002528:	4b86      	ldr	r3, [pc, #536]	@ (8002744 <main+0x9e4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d003      	beq.n	8002538 <main+0x7d8>
					Mode = 1;
 8002530:	4a84      	ldr	r2, [pc, #528]	@ (8002744 <main+0x9e4>)
 8002532:	2301      	movs	r3, #1
 8002534:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 8002536:	e101      	b.n	800273c <main+0x9dc>
				} else {
					TargetX = End_x;
 8002538:	4b86      	ldr	r3, [pc, #536]	@ (8002754 <main+0x9f4>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b86      	ldr	r3, [pc, #536]	@ (8002758 <main+0x9f8>)
 800253e:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 8002540:	4b86      	ldr	r3, [pc, #536]	@ (800275c <main+0x9fc>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b86      	ldr	r3, [pc, #536]	@ (8002760 <main+0xa00>)
 8002546:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8002548:	4b86      	ldr	r3, [pc, #536]	@ (8002764 <main+0xa04>)
 800254a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800254c:	4b86      	ldr	r3, [pc, #536]	@ (8002768 <main+0xa08>)
 800254e:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8002550:	4b86      	ldr	r3, [pc, #536]	@ (800276c <main+0xa0c>)
 8002552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002554:	4b86      	ldr	r3, [pc, #536]	@ (8002770 <main+0xa10>)
 8002556:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 8002558:	e0f0      	b.n	800273c <main+0x9dc>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 800255a:	4b79      	ldr	r3, [pc, #484]	@ (8002740 <main+0x9e0>)
 800255c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002560:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd13      	ble.n	8002596 <main+0x836>
 800256e:	4b74      	ldr	r3, [pc, #464]	@ (8002740 <main+0x9e0>)
 8002570:	edd3 7a04 	vldr	s15, [r3, #16]
 8002574:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d509      	bpl.n	8002596 <main+0x836>
				revolute.finished = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				prismatic.finished = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				Mode = 2;
 800258e:	4a6d      	ldr	r2, [pc, #436]	@ (8002744 <main+0x9e4>)
 8002590:	2302      	movs	r3, #2
 8002592:	7013      	strb	r3, [r2, #0]
 8002594:	e0d2      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002596:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <main+0x9e0>)
 8002598:	edd3 7a02 	vldr	s15, [r3, #8]
 800259c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	d517      	bpl.n	80025da <main+0x87a>
 80025aa:	4b65      	ldr	r3, [pc, #404]	@ (8002740 <main+0x9e0>)
 80025ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80025b0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	dd0d      	ble.n	80025da <main+0x87a>
					&& Receiver[4] < 30) {
 80025be:	4b60      	ldr	r3, [pc, #384]	@ (8002740 <main+0x9e0>)
 80025c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80025c4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80025c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d503      	bpl.n	80025da <main+0x87a>
				Mode = 3;
 80025d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002744 <main+0x9e4>)
 80025d4:	2303      	movs	r3, #3
 80025d6:	7013      	strb	r3, [r2, #0]
 80025d8:	e0b0      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80025da:	4b59      	ldr	r3, [pc, #356]	@ (8002740 <main+0x9e0>)
 80025dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80025e0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd27      	ble.n	800263e <main+0x8de>
 80025ee:	4b54      	ldr	r3, [pc, #336]	@ (8002740 <main+0x9e0>)
 80025f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025f4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80025f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d51d      	bpl.n	800263e <main+0x8de>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002602:	4b4f      	ldr	r3, [pc, #316]	@ (8002740 <main+0x9e0>)
 8002604:	edd3 7a04 	vldr	s15, [r3, #16]
 8002608:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800260c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002614:	dd13      	ble.n	800263e <main+0x8de>
 8002616:	4b4a      	ldr	r3, [pc, #296]	@ (8002740 <main+0x9e0>)
 8002618:	edd3 7a04 	vldr	s15, [r3, #16]
 800261c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d509      	bpl.n	800263e <main+0x8de>
				revolute.finished = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				prismatic.finished = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				Mode = 4;
 8002636:	4a43      	ldr	r2, [pc, #268]	@ (8002744 <main+0x9e4>)
 8002638:	2304      	movs	r3, #4
 800263a:	7013      	strb	r3, [r2, #0]
 800263c:	e07e      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <main+0x9e0>)
 8002640:	edd3 7a02 	vldr	s15, [r3, #8]
 8002644:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	dd17      	ble.n	8002682 <main+0x922>
 8002652:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <main+0x9e0>)
 8002654:	edd3 7a04 	vldr	s15, [r3, #16]
 8002658:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800265c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	dd0d      	ble.n	8002682 <main+0x922>
					&& Receiver[4] < 30) {
 8002666:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <main+0x9e0>)
 8002668:	edd3 7a04 	vldr	s15, [r3, #16]
 800266c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d503      	bpl.n	8002682 <main+0x922>
				Mode = 5;
 800267a:	4a32      	ldr	r2, [pc, #200]	@ (8002744 <main+0x9e4>)
 800267c:	2305      	movs	r3, #5
 800267e:	7013      	strb	r3, [r2, #0]
 8002680:	e05c      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <main+0x9e0>)
 8002684:	edd3 7a02 	vldr	s15, [r3, #8]
 8002688:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d50d      	bpl.n	80026b2 <main+0x952>
 8002696:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <main+0x9e0>)
 8002698:	edd3 7a04 	vldr	s15, [r3, #16]
 800269c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd03      	ble.n	80026b2 <main+0x952>
				Mode = 6;
 80026aa:	4a26      	ldr	r2, [pc, #152]	@ (8002744 <main+0x9e4>)
 80026ac:	2306      	movs	r3, #6
 80026ae:	7013      	strb	r3, [r2, #0]
 80026b0:	e044      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80026b2:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <main+0x9e0>)
 80026b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026b8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80026bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	dd17      	ble.n	80026f6 <main+0x996>
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <main+0x9e0>)
 80026c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026cc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	d50d      	bpl.n	80026f6 <main+0x996>
					&& Receiver[4] > 30) {
 80026da:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <main+0x9e0>)
 80026dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80026e0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd03      	ble.n	80026f6 <main+0x996>
				Mode = 7;
 80026ee:	4a15      	ldr	r2, [pc, #84]	@ (8002744 <main+0x9e4>)
 80026f0:	2307      	movs	r3, #7
 80026f2:	7013      	strb	r3, [r2, #0]
 80026f4:	e022      	b.n	800273c <main+0x9dc>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80026f6:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <main+0x9e0>)
 80026f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026fc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	dc00      	bgt.n	800270c <main+0x9ac>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800270a:	e03c      	b.n	8002786 <main+0xa26>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <main+0x9e0>)
 800270e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002712:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	dc00      	bgt.n	8002722 <main+0x9c2>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002720:	e031      	b.n	8002786 <main+0xa26>
				loop_counter = 0;
 8002722:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <main+0xa14>)
 8002724:	2300      	movs	r3, #0
 8002726:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <main+0xa08>)
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <main+0xa18>)
 800272c:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <main+0xa10>)
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <main+0xa1c>)
 8002732:	6013      	str	r3, [r2, #0]
				Mode = 8;
 8002734:	4a03      	ldr	r2, [pc, #12]	@ (8002744 <main+0x9e4>)
 8002736:	2308      	movs	r3, #8
 8002738:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800273a:	e024      	b.n	8002786 <main+0xa26>
 800273c:	e023      	b.n	8002786 <main+0xa26>
 800273e:	bf00      	nop
 8002740:	20000a78 	.word	0x20000a78
 8002744:	20000b7c 	.word	0x20000b7c
 8002748:	48000800 	.word	0x48000800
 800274c:	20000b7e 	.word	0x20000b7e
 8002750:	20000bd4 	.word	0x20000bd4
 8002754:	20000b44 	.word	0x20000b44
 8002758:	20000b4c 	.word	0x20000b4c
 800275c:	20000b48 	.word	0x20000b48
 8002760:	20000b50 	.word	0x20000b50
 8002764:	20000ac0 	.word	0x20000ac0
 8002768:	20000b54 	.word	0x20000b54
 800276c:	20000b00 	.word	0x20000b00
 8002770:	20000b58 	.word	0x20000b58
 8002774:	20000bf0 	.word	0x20000bf0
 8002778:	40860a91 	.word	0x40860a91
 800277c:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002780:	4ac7      	ldr	r2, [pc, #796]	@ (8002aa0 <main+0xd40>)
 8002782:	2300      	movs	r3, #0
 8002784:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 8002786:	4bc7      	ldr	r3, [pc, #796]	@ (8002aa4 <main+0xd44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <main+0xa48>
			Set_Motor(0, 0);
 800278e:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8002aa8 <main+0xd48>
 8002792:	2000      	movs	r0, #0
 8002794:	f002 f9b6 	bl	8004b04 <Set_Motor>
			Set_Motor(1, 0);
 8002798:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8002aa8 <main+0xd48>
 800279c:	2001      	movs	r0, #1
 800279e:	f002 f9b1 	bl	8004b04 <Set_Motor>
			Set_Servo(0);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f002 fa2c 	bl	8004c00 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 80027a8:	4bbe      	ldr	r3, [pc, #760]	@ (8002aa4 <main+0xd44>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 80fa 	bne.w	80029a6 <main+0xc46>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00));
 80027b2:	4bbe      	ldr	r3, [pc, #760]	@ (8002aac <main+0xd4c>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80027bc:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80027c0:	ed9f 1abb 	vldr	s2, [pc, #748]	@ 8002ab0 <main+0xd50>
 80027c4:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8002ab4 <main+0xd54>
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f001 fe00 	bl	80043d0 <map>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab8 <main+0xd58>)
 80027d6:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00, 500.00);
 80027da:	4bb4      	ldr	r3, [pc, #720]	@ (8002aac <main+0xd4c>)
 80027dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e0:	ed9f 2ab6 	vldr	s4, [pc, #728]	@ 8002abc <main+0xd5c>
 80027e4:	eddf 1ab6 	vldr	s3, [pc, #728]	@ 8002ac0 <main+0xd60>
 80027e8:	ed9f 1ab1 	vldr	s2, [pc, #708]	@ 8002ab0 <main+0xd50>
 80027ec:	eddf 0ab1 	vldr	s1, [pc, #708]	@ 8002ab4 <main+0xd54>
 80027f0:	eeb0 0a67 	vmov.f32	s0, s15
 80027f4:	f001 fdec 	bl	80043d0 <map>
 80027f8:	eef0 7a40 	vmov.f32	s15, s0
 80027fc:	4bb1      	ldr	r3, [pc, #708]	@ (8002ac4 <main+0xd64>)
 80027fe:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002802:	4bad      	ldr	r3, [pc, #692]	@ (8002ab8 <main+0xd58>)
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	4baf      	ldr	r3, [pc, #700]	@ (8002ac8 <main+0xd68>)
 800280a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800280e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002812:	4bae      	ldr	r3, [pc, #696]	@ (8002acc <main+0xd6c>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002818:	4baa      	ldr	r3, [pc, #680]	@ (8002ac4 <main+0xd64>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	4bac      	ldr	r3, [pc, #688]	@ (8002ad0 <main+0xd70>)
 8002820:	edd3 7a08 	vldr	s15, [r3, #32]
 8002824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002828:	4baa      	ldr	r3, [pc, #680]	@ (8002ad4 <main+0xd74>)
 800282a:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 800282e:	f001 fef3 	bl	8004618 <micros>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			if (currentTimeState1 > timestampState1) {
 800283a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800283e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ad8 <main+0xd78>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	4282      	cmp	r2, r0
 8002846:	418b      	sbcs	r3, r1
 8002848:	d23f      	bcs.n	80028ca <main+0xb6a>
				timestampState1 = currentTimeState1 + 10000;		//us
 800284a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800284e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002852:	1851      	adds	r1, r2, r1
 8002854:	6639      	str	r1, [r7, #96]	@ 0x60
 8002856:	f143 0300 	adc.w	r3, r3, #0
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
 800285c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002860:	4b9d      	ldr	r3, [pc, #628]	@ (8002ad8 <main+0xd78>)
 8002862:	e9c3 0100 	strd	r0, r1, [r3]
				R_PWM = PID_Update(R_Velo_Error, 100.00f, 150.00f, 0.00f, 0.01f,
 8002866:	4b99      	ldr	r3, [pc, #612]	@ (8002acc <main+0xd6c>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	489b      	ldr	r0, [pc, #620]	@ (8002adc <main+0xd7c>)
 800286e:	ed9f 3a90 	vldr	s6, [pc, #576]	@ 8002ab0 <main+0xd50>
 8002872:	eddf 2a90 	vldr	s5, [pc, #576]	@ 8002ab4 <main+0xd54>
 8002876:	ed9f 2a9a 	vldr	s4, [pc, #616]	@ 8002ae0 <main+0xd80>
 800287a:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8002aa8 <main+0xd48>
 800287e:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8002ae4 <main+0xd84>
 8002882:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8002ab0 <main+0xd50>
 8002886:	eeb0 0a67 	vmov.f32	s0, s15
 800288a:	f001 fedf 	bl	800464c <PID_Update>
 800288e:	eef0 7a40 	vmov.f32	s15, s0
 8002892:	4b95      	ldr	r3, [pc, #596]	@ (8002ae8 <main+0xd88>)
 8002894:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002898:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad4 <main+0xd74>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	4893      	ldr	r0, [pc, #588]	@ (8002aec <main+0xd8c>)
 80028a0:	ed9f 3a83 	vldr	s6, [pc, #524]	@ 8002ab0 <main+0xd50>
 80028a4:	eddf 2a83 	vldr	s5, [pc, #524]	@ 8002ab4 <main+0xd54>
 80028a8:	ed9f 2a8d 	vldr	s4, [pc, #564]	@ 8002ae0 <main+0xd80>
 80028ac:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002aa8 <main+0xd48>
 80028b0:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 80028b4:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8002af0 <main+0xd90>
 80028b8:	eeb0 0a67 	vmov.f32	s0, s15
 80028bc:	f001 fec6 	bl	800464c <PID_Update>
 80028c0:	eef0 7a40 	vmov.f32	s15, s0
 80028c4:	4b8b      	ldr	r3, [pc, #556]	@ (8002af4 <main+0xd94>)
 80028c6:	edc3 7a00 	vstr	s15, [r3]
			}

//			R_PWM = Receiver[0];
//			P_PWM = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 80028ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac8 <main+0xd68>)
 80028cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe06 	bl	80004e0 <__aeabi_f2d>
 80028d4:	a36e      	add	r3, pc, #440	@ (adr r3, 8002a90 <main+0xd30>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fe f8cb 	bl	8000a74 <__aeabi_dcmplt>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <main+0xb9c>
 80028e4:	4b80      	ldr	r3, [pc, #512]	@ (8002ae8 <main+0xd88>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	dd03      	ble.n	80028fc <main+0xb9c>
				R_PWM = 0;
 80028f4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <main+0xd88>)
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 80028fc:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <main+0xd68>)
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fded 	bl	80004e0 <__aeabi_f2d>
 8002906:	a364      	add	r3, pc, #400	@ (adr r3, 8002a98 <main+0xd38>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fe f8d0 	bl	8000ab0 <__aeabi_dcmpgt>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <main+0xbce>
 8002916:	4b74      	ldr	r3, [pc, #464]	@ (8002ae8 <main+0xd88>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d503      	bpl.n	800292e <main+0xbce>
				R_PWM = 0;
 8002926:	4a70      	ldr	r2, [pc, #448]	@ (8002ae8 <main+0xd88>)
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 800292e:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <main+0xd70>)
 8002930:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002934:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002af8 <main+0xd98>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	dd0b      	ble.n	800295a <main+0xbfa>
 8002942:	4b6c      	ldr	r3, [pc, #432]	@ (8002af4 <main+0xd94>)
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	dd03      	ble.n	800295a <main+0xbfa>
				P_PWM = 0;
 8002952:	4a68      	ldr	r2, [pc, #416]	@ (8002af4 <main+0xd94>)
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <main+0xd70>)
 800295c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002960:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d50b      	bpl.n	8002986 <main+0xc26>
 800296e:	4b61      	ldr	r3, [pc, #388]	@ (8002af4 <main+0xd94>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	d503      	bpl.n	8002986 <main+0xc26>
				P_PWM = 0;
 800297e:	4a5d      	ldr	r2, [pc, #372]	@ (8002af4 <main+0xd94>)
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_PWM);
 8002986:	4b58      	ldr	r3, [pc, #352]	@ (8002ae8 <main+0xd88>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	eeb0 0a67 	vmov.f32	s0, s15
 8002990:	2000      	movs	r0, #0
 8002992:	f002 f8b7 	bl	8004b04 <Set_Motor>
			Set_Motor(1, P_PWM);
 8002996:	4b57      	ldr	r3, [pc, #348]	@ (8002af4 <main+0xd94>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	eeb0 0a67 	vmov.f32	s0, s15
 80029a0:	2001      	movs	r0, #1
 80029a2:	f002 f8af 	bl	8004b04 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 80029a6:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <main+0xd44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	f040 816d 	bne.w	8002c8a <main+0xf2a>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 80029b0:	4b52      	ldr	r3, [pc, #328]	@ (8002afc <main+0xd9c>)
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	4b44      	ldr	r3, [pc, #272]	@ (8002ac8 <main+0xd68>)
 80029b8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b00 <main+0xda0>)
 80029c2:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 80029c6:	4b4d      	ldr	r3, [pc, #308]	@ (8002afc <main+0xd9c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_PWM = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80029ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <main+0xda4>)
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <main+0xd70>)
 80029d6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80029da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029de:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <main+0xda8>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 80029e4:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <main+0xda4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Pos_Error);

			//Call every 0.01 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80029ec:	f001 fe14 	bl	8004618 <micros>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			if (currentTimeState2 > timestampState2) {
 80029f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029fc:	4b43      	ldr	r3, [pc, #268]	@ (8002b0c <main+0xdac>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	4282      	cmp	r2, r0
 8002a04:	418b      	sbcs	r3, r1
 8002a06:	f080 80ee 	bcs.w	8002be6 <main+0xe86>
				timestampState2 = currentTimeState2 + 10000;		//us
 8002a0a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8002a0e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002a12:	1851      	adds	r1, r2, r1
 8002a14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a16:	f143 0300 	adc.w	r3, r3, #0
 8002a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002a20:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <main+0xdac>)
 8002a22:	e9c3 0100 	strd	r0, r1, [r3]

//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0) {
 8002a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d174      	bne.n	8002b18 <main+0xdb8>
					revolute.current_position = Revolute_QEIdata.RadPosition;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <main+0xd68>)
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					Trapezoidal_Update(&revolute, 0.01);
 8002a36:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a3a:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8002ae0 <main+0xd80>
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f898 	bl	8001b74 <Trapezoidal_Update>
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 8002a44:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <main+0xd68>)
 8002a46:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
							- revolute.current_velocity) * -1;
 8002a4a:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8002a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a52:	eef1 7a67 	vneg.f32	s15, s15
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <main+0xd6c>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]
					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f, 0.01f, -100.0f, 100.0f, &pid_r_v);
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <main+0xd6c>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	481e      	ldr	r0, [pc, #120]	@ (8002adc <main+0xd7c>)
 8002a64:	ed9f 3a12 	vldr	s6, [pc, #72]	@ 8002ab0 <main+0xd50>
 8002a68:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8002ab4 <main+0xd54>
 8002a6c:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8002ae0 <main+0xd80>
 8002a70:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8002aa8 <main+0xd48>
 8002a74:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8002b10 <main+0xdb0>
 8002a78:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002b14 <main+0xdb4>
 8002a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a80:	f001 fde4 	bl	800464c <PID_Update>
 8002a84:	eef0 7a40 	vmov.f32	s15, s0
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <main+0xd88>)
 8002a8a:	edc3 7a00 	vstr	s15, [r3]
 8002a8e:	e05c      	b.n	8002b4a <main+0xdea>
 8002a90:	1e8e6080 	.word	0x1e8e6080
 8002a94:	bffeb7bf 	.word	0xbffeb7bf
 8002a98:	bfb15b57 	.word	0xbfb15b57
 8002a9c:	40143eec 	.word	0x40143eec
 8002aa0:	20000b7e 	.word	0x20000b7e
 8002aa4:	20000b7c 	.word	0x20000b7c
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	20000a78 	.word	0x20000a78
 8002ab0:	42c80000 	.word	0x42c80000
 8002ab4:	c2c80000 	.word	0xc2c80000
 8002ab8:	20000b5c 	.word	0x20000b5c
 8002abc:	43fa0000 	.word	0x43fa0000
 8002ac0:	c3fa0000 	.word	0xc3fa0000
 8002ac4:	20000b60 	.word	0x20000b60
 8002ac8:	20000ac0 	.word	0x20000ac0
 8002acc:	20000b6c 	.word	0x20000b6c
 8002ad0:	20000b00 	.word	0x20000b00
 8002ad4:	20000b70 	.word	0x20000b70
 8002ad8:	20001280 	.word	0x20001280
 8002adc:	20000bc4 	.word	0x20000bc4
 8002ae0:	3c23d70a 	.word	0x3c23d70a
 8002ae4:	43160000 	.word	0x43160000
 8002ae8:	20000b74 	.word	0x20000b74
 8002aec:	20000bcc 	.word	0x20000bcc
 8002af0:	3e4ccccd 	.word	0x3e4ccccd
 8002af4:	20000b78 	.word	0x20000b78
 8002af8:	43988000 	.word	0x43988000
 8002afc:	20000b54 	.word	0x20000b54
 8002b00:	20000b64 	.word	0x20000b64
 8002b04:	20000b58 	.word	0x20000b58
 8002b08:	20000b68 	.word	0x20000b68
 8002b0c:	20001288 	.word	0x20001288
 8002b10:	3dcccccd 	.word	0x3dcccccd
 8002b14:	428ed70a 	.word	0x428ed70a
				}
				else{
					R_PWM = PID_Update(R_Pos_Error, 16.00f, 32.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
 8002b18:	4bc7      	ldr	r3, [pc, #796]	@ (8002e38 <main+0x10d8>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	48c7      	ldr	r0, [pc, #796]	@ (8002e3c <main+0x10dc>)
 8002b20:	ed9f 3ac7 	vldr	s6, [pc, #796]	@ 8002e40 <main+0x10e0>
 8002b24:	eddf 2ac7 	vldr	s5, [pc, #796]	@ 8002e44 <main+0x10e4>
 8002b28:	ed9f 2ac7 	vldr	s4, [pc, #796]	@ 8002e48 <main+0x10e8>
 8002b2c:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002b30:	ed9f 1ac6 	vldr	s2, [pc, #792]	@ 8002e4c <main+0x10ec>
 8002b34:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	f001 fd86 	bl	800464c <PID_Update>
 8002b40:	eef0 7a40 	vmov.f32	s15, s0
 8002b44:	4bc2      	ldr	r3, [pc, #776]	@ (8002e50 <main+0x10f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
				}

				if (prismatic.finished == 0) {
 8002b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d130      	bne.n	8002bb4 <main+0xe54>
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 8002b52:	4bc0      	ldr	r3, [pc, #768]	@ (8002e54 <main+0x10f4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					Trapezoidal_Update(&prismatic, 0.01);
 8002b5a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002b5e:	ed9f 0aba 	vldr	s0, [pc, #744]	@ 8002e48 <main+0x10e8>
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f806 	bl	8001b74 <Trapezoidal_Update>
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 8002b68:	4bba      	ldr	r3, [pc, #744]	@ (8002e54 <main+0x10f4>)
 8002b6a:	ed93 7a08 	vldr	s14, [r3, #32]
							- prismatic.current_velocity) * -1;
 8002b6e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	eef1 7a67 	vneg.f32	s15, s15
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 8002b7a:	4bb7      	ldr	r3, [pc, #732]	@ (8002e58 <main+0x10f8>)
 8002b7c:	edc3 7a00 	vstr	s15, [r3]
					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f, -100.0f, 100.0f, &pid_p_v);
 8002b80:	4bb5      	ldr	r3, [pc, #724]	@ (8002e58 <main+0x10f8>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	48b5      	ldr	r0, [pc, #724]	@ (8002e5c <main+0x10fc>)
 8002b88:	ed9f 3aad 	vldr	s6, [pc, #692]	@ 8002e40 <main+0x10e0>
 8002b8c:	eddf 2aad 	vldr	s5, [pc, #692]	@ 8002e44 <main+0x10e4>
 8002b90:	ed9f 2aad 	vldr	s4, [pc, #692]	@ 8002e48 <main+0x10e8>
 8002b94:	eddf 1ac7 	vldr	s3, [pc, #796]	@ 8002eb4 <main+0x1154>
 8002b98:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 8002b9c:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8002e60 <main+0x1100>
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	f001 fd52 	bl	800464c <PID_Update>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	4bad      	ldr	r3, [pc, #692]	@ (8002e64 <main+0x1104>)
 8002bae:	edc3 7a00 	vstr	s15, [r3]
 8002bb2:	e018      	b.n	8002be6 <main+0xe86>
				}
				else{
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);
 8002bb4:	4bac      	ldr	r3, [pc, #688]	@ (8002e68 <main+0x1108>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	48ac      	ldr	r0, [pc, #688]	@ (8002e6c <main+0x110c>)
 8002bbc:	ed9f 3aa0 	vldr	s6, [pc, #640]	@ 8002e40 <main+0x10e0>
 8002bc0:	eddf 2aa0 	vldr	s5, [pc, #640]	@ 8002e44 <main+0x10e4>
 8002bc4:	ed9f 2aa0 	vldr	s4, [pc, #640]	@ 8002e48 <main+0x10e8>
 8002bc8:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8002e70 <main+0x1110>
 8002bcc:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8002e74 <main+0x1114>
 8002bd0:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8002e78 <main+0x1118>
 8002bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd8:	f001 fd38 	bl	800464c <PID_Update>
 8002bdc:	eef0 7a40 	vmov.f32	s15, s0
 8002be0:	4ba0      	ldr	r3, [pc, #640]	@ (8002e64 <main+0x1104>)
 8002be2:	edc3 7a00 	vstr	s15, [r3]
				}
			}

			Set_Motor(0, R_PWM);
 8002be6:	4b9a      	ldr	r3, [pc, #616]	@ (8002e50 <main+0x10f0>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f001 ff87 	bl	8004b04 <Set_Motor>
			Set_Motor(1, P_PWM);
 8002bf6:	4b9b      	ldr	r3, [pc, #620]	@ (8002e64 <main+0x1104>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002c00:	2001      	movs	r0, #1
 8002c02:	f001 ff7f 	bl	8004b04 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002c06:	4b8c      	ldr	r3, [pc, #560]	@ (8002e38 <main+0x10d8>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef0 7ae7 	vabs.f32	s15, s15
 8002c10:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002e7c <main+0x111c>
 8002c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	d52c      	bpl.n	8002c78 <main+0xf18>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002c1e:	4b92      	ldr	r3, [pc, #584]	@ (8002e68 <main+0x1108>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	eef0 7ae7 	vabs.f32	s15, s15
 8002c28:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002e60 <main+0x1100>
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d520      	bpl.n	8002c78 <main+0xf18>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8002c36:	4b92      	ldr	r3, [pc, #584]	@ (8002e80 <main+0x1120>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	d107      	bne.n	8002c50 <main+0xef0>
					lock_timer_us = micros(); /* start timing */
 8002c40:	f001 fcea 	bl	8004618 <micros>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	498d      	ldr	r1, [pc, #564]	@ (8002e80 <main+0x1120>)
 8002c4a:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8002c4e:	e01b      	b.n	8002c88 <main+0xf28>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002c50:	f001 fce2 	bl	8004618 <micros>
 8002c54:	4b8a      	ldr	r3, [pc, #552]	@ (8002e80 <main+0x1120>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	1a84      	subs	r4, r0, r2
 8002c5c:	eb61 0503 	sbc.w	r5, r1, r3
 8002c60:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <main+0x1124>)
 8002c62:	429c      	cmp	r4, r3
 8002c64:	f175 0300 	sbcs.w	r3, r5, #0
 8002c68:	d30e      	bcc.n	8002c88 <main+0xf28>
					Set_Servo(1);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f001 ffc8 	bl	8004c00 <Set_Servo>
					Mode = 1;
 8002c70:	4a85      	ldr	r2, [pc, #532]	@ (8002e88 <main+0x1128>)
 8002c72:	2301      	movs	r3, #1
 8002c74:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 8002c76:	e007      	b.n	8002c88 <main+0xf28>
				}
			} else {
				lock_timer_us = 0;
 8002c78:	4981      	ldr	r1, [pc, #516]	@ (8002e80 <main+0x1120>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9c1 2300 	strd	r2, r3, [r1]
 8002c86:	e000      	b.n	8002c8a <main+0xf2a>
				if (lock_timer_us == 0)
 8002c88:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e88 <main+0x1128>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	f040 8289 	bne.w	80031a6 <main+0x1446>
			switch (calibState) {
 8002c94:	4b7d      	ldr	r3, [pc, #500]	@ (8002e8c <main+0x112c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	f200 8284 	bhi.w	80031a6 <main+0x1446>
 8002c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <main+0xf44>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002d0f 	.word	0x08002d0f
 8002cac:	08002d55 	.word	0x08002d55
 8002cb0:	08002d9f 	.word	0x08002d9f
 8002cb4:	08002de9 	.word	0x08002de9
 8002cb8:	08002eb9 	.word	0x08002eb9
 8002cbc:	08002f11 	.word	0x08002f11
 8002cc0:	08002f51 	.word	0x08002f51
 8002cc4:	08002faf 	.word	0x08002faf
 8002cc8:	0800301b 	.word	0x0800301b
 8002ccc:	08003087 	.word	0x08003087
 8002cd0:	080030f7 	.word	0x080030f7
 8002cd4:	08003139 	.word	0x08003139
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002cd8:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8002eb4 <main+0x1154>
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f001 ff11 	bl	8004b04 <Set_Motor>
				Set_Motor(1, 0);
 8002ce2:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002eb4 <main+0x1154>
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f001 ff0c 	bl	8004b04 <Set_Motor>
				P_Limit = 0;
 8002cec:	4a68      	ldr	r2, [pc, #416]	@ (8002e90 <main+0x1130>)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002cf2:	4a68      	ldr	r2, [pc, #416]	@ (8002e94 <main+0x1134>)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002cf8:	4a64      	ldr	r2, [pc, #400]	@ (8002e8c <main+0x112c>)
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002cfe:	f001 fc8b 	bl	8004618 <micros>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4964      	ldr	r1, [pc, #400]	@ (8002e98 <main+0x1138>)
 8002d08:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002d0c:	e24b      	b.n	80031a6 <main+0x1446>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8002d0e:	4b63      	ldr	r3, [pc, #396]	@ (8002e9c <main+0x113c>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8002ea0 <main+0x1140>
 8002d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d20:	dd06      	ble.n	8002d30 <main+0xfd0>
					Cal_Side = 1;
 8002d22:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <main+0x1144>)
 8002d24:	2301      	movs	r3, #1
 8002d26:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002d28:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <main+0x112c>)
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002d2e:	e23a      	b.n	80031a6 <main+0x1446>
				} else if (Receiver[0] < -80) {
 8002d30:	4b5a      	ldr	r3, [pc, #360]	@ (8002e9c <main+0x113c>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002ea8 <main+0x1148>
 8002d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	d400      	bmi.n	8002d46 <main+0xfe6>
				break;
 8002d44:	e22f      	b.n	80031a6 <main+0x1446>
					Cal_Side = 2;
 8002d46:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <main+0x1144>)
 8002d48:	2302      	movs	r3, #2
 8002d4a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e8c <main+0x112c>)
 8002d4e:	2302      	movs	r3, #2
 8002d50:	7013      	strb	r3, [r2, #0]
				break;
 8002d52:	e228      	b.n	80031a6 <main+0x1446>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002d54:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f001 fed3 	bl	8004b04 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d62:	4852      	ldr	r0, [pc, #328]	@ (8002eac <main+0x114c>)
 8002d64:	f003 f9a2 	bl	80060ac <HAL_GPIO_ReadPin>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d004      	beq.n	8002d78 <main+0x1018>
 8002d6e:	4b48      	ldr	r3, [pc, #288]	@ (8002e90 <main+0x1130>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 81f0 	beq.w	8003158 <main+0x13f8>
					Set_Motor(1, 0);
 8002d78:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002eb4 <main+0x1154>
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f001 fec1 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002d82:	f001 fc49 	bl	8004618 <micros>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4943      	ldr	r1, [pc, #268]	@ (8002e98 <main+0x1138>)
 8002d8c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002d90:	4a3f      	ldr	r2, [pc, #252]	@ (8002e90 <main+0x1130>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8002d96:	4a3d      	ldr	r2, [pc, #244]	@ (8002e8c <main+0x112c>)
 8002d98:	2303      	movs	r3, #3
 8002d9a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002d9c:	e1dc      	b.n	8003158 <main+0x13f8>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002d9e:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002eb4 <main+0x1154>
 8002da2:	2001      	movs	r0, #1
 8002da4:	f001 feae 	bl	8004b04 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002da8:	f001 fc36 	bl	8004618 <micros>
 8002dac:	4b3a      	ldr	r3, [pc, #232]	@ (8002e98 <main+0x1138>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	ebb0 0802 	subs.w	r8, r0, r2
 8002db6:	eb61 0903 	sbc.w	r9, r1, r3
 8002dba:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb0 <main+0x1150>)
 8002dbc:	4598      	cmp	r8, r3
 8002dbe:	f179 0300 	sbcs.w	r3, r9, #0
 8002dc2:	d311      	bcc.n	8002de8 <main+0x1088>
					Set_Motor(1, 15);
 8002dc4:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f001 fe9b 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002dce:	f001 fc23 	bl	8004618 <micros>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4930      	ldr	r1, [pc, #192]	@ (8002e98 <main+0x1138>)
 8002dd8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <main+0x1130>)
 8002dde:	2300      	movs	r3, #0
 8002de0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002de2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e8c <main+0x112c>)
 8002de4:	2304      	movs	r3, #4
 8002de6:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 8002de8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002dec:	2001      	movs	r0, #1
 8002dee:	f001 fe89 	bl	8004b04 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002df2:	f001 fc11 	bl	8004618 <micros>
 8002df6:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <main+0x1138>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	ebb0 0a02 	subs.w	sl, r0, r2
 8002e00:	eb61 0b03 	sbc.w	fp, r1, r3
 8002e04:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb0 <main+0x1150>)
 8002e06:	459a      	cmp	sl, r3
 8002e08:	f17b 0300 	sbcs.w	r3, fp, #0
 8002e0c:	f0c0 81a6 	bcc.w	800315c <main+0x13fc>
					Set_Motor(1, 0);
 8002e10:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002eb4 <main+0x1154>
 8002e14:	2001      	movs	r0, #1
 8002e16:	f001 fe75 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002e1a:	f001 fbfd 	bl	8004618 <micros>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	491d      	ldr	r1, [pc, #116]	@ (8002e98 <main+0x1138>)
 8002e24:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <main+0x1130>)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <main+0x112c>)
 8002e30:	2305      	movs	r3, #5
 8002e32:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002e34:	e192      	b.n	800315c <main+0x13fc>
 8002e36:	bf00      	nop
 8002e38:	20000b64 	.word	0x20000b64
 8002e3c:	20000bb4 	.word	0x20000bb4
 8002e40:	42c80000 	.word	0x42c80000
 8002e44:	c2c80000 	.word	0xc2c80000
 8002e48:	3c23d70a 	.word	0x3c23d70a
 8002e4c:	42000000 	.word	0x42000000
 8002e50:	20000b74 	.word	0x20000b74
 8002e54:	20000b00 	.word	0x20000b00
 8002e58:	20000b70 	.word	0x20000b70
 8002e5c:	20000bcc 	.word	0x20000bcc
 8002e60:	3e4ccccd 	.word	0x3e4ccccd
 8002e64:	20000b78 	.word	0x20000b78
 8002e68:	20000b68 	.word	0x20000b68
 8002e6c:	20000bbc 	.word	0x20000bbc
 8002e70:	3e19999a 	.word	0x3e19999a
 8002e74:	3f99999a 	.word	0x3f99999a
 8002e78:	3eaa7efa 	.word	0x3eaa7efa
 8002e7c:	3d0b4396 	.word	0x3d0b4396
 8002e80:	20000b88 	.word	0x20000b88
 8002e84:	000f4240 	.word	0x000f4240
 8002e88:	20000b7c 	.word	0x20000b7c
 8002e8c:	20000bd4 	.word	0x20000bd4
 8002e90:	20000b81 	.word	0x20000b81
 8002e94:	20000b82 	.word	0x20000b82
 8002e98:	20000bd8 	.word	0x20000bd8
 8002e9c:	20000a78 	.word	0x20000a78
 8002ea0:	42a00000 	.word	0x42a00000
 8002ea4:	20000be0 	.word	0x20000be0
 8002ea8:	c2a00000 	.word	0xc2a00000
 8002eac:	48000400 	.word	0x48000400
 8002eb0:	000186a1 	.word	0x000186a1
 8002eb4:	00000000 	.word	0x00000000

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002eb8:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002eb4 <main+0x1154>
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f001 fe21 	bl	8004b04 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002ec2:	f001 fba9 	bl	8004618 <micros>
 8002ec6:	4bac      	ldr	r3, [pc, #688]	@ (8003178 <main+0x1418>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	1a86      	subs	r6, r0, r2
 8002ece:	653e      	str	r6, [r7, #80]	@ 0x50
 8002ed0:	eb61 0303 	sbc.w	r3, r1, r3
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed6:	4ba9      	ldr	r3, [pc, #676]	@ (800317c <main+0x141c>)
 8002ed8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002edc:	4602      	mov	r2, r0
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ee6:	f0c0 813b 	bcc.w	8003160 <main+0x1400>
					Set_Motor(1, -5);
 8002eea:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f001 fe08 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002ef4:	f001 fb90 	bl	8004618 <micros>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	499e      	ldr	r1, [pc, #632]	@ (8003178 <main+0x1418>)
 8002efe:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002f02:	4a9f      	ldr	r2, [pc, #636]	@ (8003180 <main+0x1420>)
 8002f04:	2300      	movs	r3, #0
 8002f06:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8002f08:	4a9e      	ldr	r2, [pc, #632]	@ (8003184 <main+0x1424>)
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002f0e:	e127      	b.n	8003160 <main+0x1400>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002f10:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002f14:	2001      	movs	r0, #1
 8002f16:	f001 fdf5 	bl	8004b04 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002f1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f1e:	489a      	ldr	r0, [pc, #616]	@ (8003188 <main+0x1428>)
 8002f20:	f003 f8c4 	bl	80060ac <HAL_GPIO_ReadPin>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d004      	beq.n	8002f34 <main+0x11d4>
 8002f2a:	4b95      	ldr	r3, [pc, #596]	@ (8003180 <main+0x1420>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8118 	beq.w	8003164 <main+0x1404>
					Set_Motor(1, 0);
 8002f34:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 800318c <main+0x142c>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f001 fde3 	bl	8004b04 <Set_Motor>
					Reset_P();
 8002f3e:	f001 fe99 	bl	8004c74 <Reset_P>
					P_Limit = 0;
 8002f42:	4a8f      	ldr	r2, [pc, #572]	@ (8003180 <main+0x1420>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8002f48:	4a8e      	ldr	r2, [pc, #568]	@ (8003184 <main+0x1424>)
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002f4e:	e109      	b.n	8003164 <main+0x1404>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002f50:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <main+0x1430>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <main+0x1204>
					Set_Motor(0, -30);
 8002f58:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f001 fdd1 	bl	8004b04 <Set_Motor>
 8002f62:	e004      	b.n	8002f6e <main+0x120e>
				else
					Set_Motor(0, 30);
 8002f64:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f001 fdcb 	bl	8004b04 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002f6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f72:	4885      	ldr	r0, [pc, #532]	@ (8003188 <main+0x1428>)
 8002f74:	f003 f89a 	bl	80060ac <HAL_GPIO_ReadPin>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d004      	beq.n	8002f88 <main+0x1228>
 8002f7e:	4b85      	ldr	r3, [pc, #532]	@ (8003194 <main+0x1434>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80f0 	beq.w	8003168 <main+0x1408>
					Set_Motor(0, 0);
 8002f88:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 800318c <main+0x142c>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f001 fdb9 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002f92:	f001 fb41 	bl	8004618 <micros>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4977      	ldr	r1, [pc, #476]	@ (8003178 <main+0x1418>)
 8002f9c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8003194 <main+0x1434>)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002fa6:	4a77      	ldr	r2, [pc, #476]	@ (8003184 <main+0x1424>)
 8002fa8:	2308      	movs	r3, #8
 8002faa:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002fac:	e0dc      	b.n	8003168 <main+0x1408>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002fae:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800318c <main+0x142c>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f001 fda6 	bl	8004b04 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002fb8:	f001 fb2e 	bl	8004618 <micros>
 8002fbc:	4b6e      	ldr	r3, [pc, #440]	@ (8003178 <main+0x1418>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	1a86      	subs	r6, r0, r2
 8002fc4:	64be      	str	r6, [r7, #72]	@ 0x48
 8002fc6:	eb61 0303 	sbc.w	r3, r1, r3
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800317c <main+0x141c>)
 8002fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	f173 0300 	sbcs.w	r3, r3, #0
 8002fdc:	f0c0 80c6 	bcc.w	800316c <main+0x140c>
					if (Cal_Side == 1)
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8003190 <main+0x1430>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <main+0x1294>
						Set_Motor(0, 30);
 8002fe8:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002fec:	2000      	movs	r0, #0
 8002fee:	f001 fd89 	bl	8004b04 <Set_Motor>
 8002ff2:	e004      	b.n	8002ffe <main+0x129e>
					else
						Set_Motor(0, -30);
 8002ff4:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f001 fd83 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 8002ffe:	f001 fb0b 	bl	8004618 <micros>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	495c      	ldr	r1, [pc, #368]	@ (8003178 <main+0x1418>)
 8003008:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800300c:	4a61      	ldr	r2, [pc, #388]	@ (8003194 <main+0x1434>)
 800300e:	2300      	movs	r3, #0
 8003010:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8003012:	4a5c      	ldr	r2, [pc, #368]	@ (8003184 <main+0x1424>)
 8003014:	2309      	movs	r3, #9
 8003016:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003018:	e0a8      	b.n	800316c <main+0x140c>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800301a:	4b5d      	ldr	r3, [pc, #372]	@ (8003190 <main+0x1430>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <main+0x12ce>
					Set_Motor(0, 30);
 8003022:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003026:	2000      	movs	r0, #0
 8003028:	f001 fd6c 	bl	8004b04 <Set_Motor>
 800302c:	e004      	b.n	8003038 <main+0x12d8>
				else
					Set_Motor(0, -30);
 800302e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8003032:	2000      	movs	r0, #0
 8003034:	f001 fd66 	bl	8004b04 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8003038:	f001 faee 	bl	8004618 <micros>
 800303c:	4b4e      	ldr	r3, [pc, #312]	@ (8003178 <main+0x1418>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	1a86      	subs	r6, r0, r2
 8003044:	643e      	str	r6, [r7, #64]	@ 0x40
 8003046:	eb61 0303 	sbc.w	r3, r1, r3
 800304a:	647b      	str	r3, [r7, #68]	@ 0x44
 800304c:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <main+0x1438>)
 800304e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003052:	4602      	mov	r2, r0
 8003054:	429a      	cmp	r2, r3
 8003056:	460b      	mov	r3, r1
 8003058:	f173 0300 	sbcs.w	r3, r3, #0
 800305c:	f0c0 8088 	bcc.w	8003170 <main+0x1410>
					Set_Motor(0, 0);
 8003060:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 800318c <main+0x142c>
 8003064:	2000      	movs	r0, #0
 8003066:	f001 fd4d 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 800306a:	f001 fad5 	bl	8004618 <micros>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4941      	ldr	r1, [pc, #260]	@ (8003178 <main+0x1418>)
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8003078:	4a46      	ldr	r2, [pc, #280]	@ (8003194 <main+0x1434>)
 800307a:	2300      	movs	r3, #0
 800307c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 800307e:	4a41      	ldr	r2, [pc, #260]	@ (8003184 <main+0x1424>)
 8003080:	230a      	movs	r3, #10
 8003082:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003084:	e074      	b.n	8003170 <main+0x1410>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8003086:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800318c <main+0x142c>
 800308a:	2000      	movs	r0, #0
 800308c:	f001 fd3a 	bl	8004b04 <Set_Motor>
				Z_index_R = 0;
 8003090:	4a42      	ldr	r2, [pc, #264]	@ (800319c <main+0x143c>)
 8003092:	2300      	movs	r3, #0
 8003094:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 8003096:	f001 fabf 	bl	8004618 <micros>
 800309a:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <main+0x1418>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	1a86      	subs	r6, r0, r2
 80030a2:	63be      	str	r6, [r7, #56]	@ 0x38
 80030a4:	eb61 0303 	sbc.w	r3, r1, r3
 80030a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030aa:	4b34      	ldr	r3, [pc, #208]	@ (800317c <main+0x141c>)
 80030ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80030b0:	4602      	mov	r2, r0
 80030b2:	429a      	cmp	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	f173 0300 	sbcs.w	r3, r3, #0
 80030ba:	d35b      	bcc.n	8003174 <main+0x1414>
					if (Cal_Side == 1)
 80030bc:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <main+0x1430>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <main+0x1370>
						Set_Motor(0, -25);
 80030c4:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 80030c8:	2000      	movs	r0, #0
 80030ca:	f001 fd1b 	bl	8004b04 <Set_Motor>
 80030ce:	e004      	b.n	80030da <main+0x137a>
					else
						Set_Motor(0, 25);
 80030d0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80030d4:	2000      	movs	r0, #0
 80030d6:	f001 fd15 	bl	8004b04 <Set_Motor>
					calib_timer = micros();
 80030da:	f001 fa9d 	bl	8004618 <micros>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4925      	ldr	r1, [pc, #148]	@ (8003178 <main+0x1418>)
 80030e4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80030e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003194 <main+0x1434>)
 80030ea:	2300      	movs	r3, #0
 80030ec:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 80030ee:	4a25      	ldr	r2, [pc, #148]	@ (8003184 <main+0x1424>)
 80030f0:	230b      	movs	r3, #11
 80030f2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80030f4:	e03e      	b.n	8003174 <main+0x1414>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 80030f6:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <main+0x1430>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <main+0x13aa>
					Set_Motor(0, -25);
 80030fe:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8003102:	2000      	movs	r0, #0
 8003104:	f001 fcfe 	bl	8004b04 <Set_Motor>
 8003108:	e004      	b.n	8003114 <main+0x13b4>
				else
					Set_Motor(0, 25);
 800310a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800310e:	2000      	movs	r0, #0
 8003110:	f001 fcf8 	bl	8004b04 <Set_Motor>

//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <main+0x143c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d043      	beq.n	80031a4 <main+0x1444>
					Set_Motor(0, 0);
 800311c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800318c <main+0x142c>
 8003120:	2000      	movs	r0, #0
 8003122:	f001 fcef 	bl	8004b04 <Set_Motor>
					Reset_R();
 8003126:	f001 fd95 	bl	8004c54 <Reset_R>
					R_Limit = 0;
 800312a:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <main+0x1434>)
 800312c:	2300      	movs	r3, #0
 800312e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <main+0x1424>)
 8003132:	230c      	movs	r3, #12
 8003134:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003136:	e035      	b.n	80031a4 <main+0x1444>

			case CALIB_DONE:
				Cal_Side = 0;
 8003138:	4a15      	ldr	r2, [pc, #84]	@ (8003190 <main+0x1430>)
 800313a:	2300      	movs	r3, #0
 800313c:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <main+0x1440>)
 8003140:	2300      	movs	r3, #0
 8003142:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8003144:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <main+0x1420>)
 8003146:	2300      	movs	r3, #0
 8003148:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <main+0x1434>)
 800314c:	2300      	movs	r3, #0
 800314e:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8003150:	4a0c      	ldr	r2, [pc, #48]	@ (8003184 <main+0x1424>)
 8003152:	2300      	movs	r3, #0
 8003154:	7013      	strb	r3, [r2, #0]
				break;
 8003156:	e026      	b.n	80031a6 <main+0x1446>
				break;
 8003158:	bf00      	nop
 800315a:	e024      	b.n	80031a6 <main+0x1446>
				break;
 800315c:	bf00      	nop
 800315e:	e022      	b.n	80031a6 <main+0x1446>
				break;
 8003160:	bf00      	nop
 8003162:	e020      	b.n	80031a6 <main+0x1446>
				break;
 8003164:	bf00      	nop
 8003166:	e01e      	b.n	80031a6 <main+0x1446>
				break;
 8003168:	bf00      	nop
 800316a:	e01c      	b.n	80031a6 <main+0x1446>
				break;
 800316c:	bf00      	nop
 800316e:	e01a      	b.n	80031a6 <main+0x1446>
				break;
 8003170:	bf00      	nop
 8003172:	e018      	b.n	80031a6 <main+0x1446>
				break;
 8003174:	bf00      	nop
 8003176:	e016      	b.n	80031a6 <main+0x1446>
 8003178:	20000bd8 	.word	0x20000bd8
 800317c:	000186a1 	.word	0x000186a1
 8003180:	20000b81 	.word	0x20000b81
 8003184:	20000bd4 	.word	0x20000bd4
 8003188:	48000400 	.word	0x48000400
 800318c:	00000000 	.word	0x00000000
 8003190:	20000be0 	.word	0x20000be0
 8003194:	20000b82 	.word	0x20000b82
 8003198:	00030d41 	.word	0x00030d41
 800319c:	20000b38 	.word	0x20000b38
 80031a0:	20000b7c 	.word	0x20000b7c
				break;
 80031a4:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 4) {
 80031a6:	4bce      	ldr	r3, [pc, #824]	@ (80034e0 <main+0x1780>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	f040 8178 	bne.w	80034a0 <main+0x1740>
			TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
 80031b0:	4bcc      	ldr	r3, [pc, #816]	@ (80034e4 <main+0x1784>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	eef1 7a67 	vneg.f32	s15, s15
 80031ba:	4bcb      	ldr	r3, [pc, #812]	@ (80034e8 <main+0x1788>)
 80031bc:	ed93 7a00 	vldr	s14, [r3]
 80031c0:	eef0 0a47 	vmov.f32	s1, s14
 80031c4:	eeb0 0a67 	vmov.f32	s0, s15
 80031c8:	f008 fcb0 	bl	800bb2c <atan2f>
 80031cc:	ee10 3a10 	vmov	r3, s0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f985 	bl	80004e0 <__aeabi_f2d>
 80031d6:	a3c0      	add	r3, pc, #768	@ (adr r3, 80034d8 <main+0x1778>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd f822 	bl	8000224 <__adddf3>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fc8c 	bl	8000b04 <__aeabi_d2f>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4bbf      	ldr	r3, [pc, #764]	@ (80034ec <main+0x178c>)
 80031f0:	601a      	str	r2, [r3, #0]
			TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);
 80031f2:	4bbc      	ldr	r3, [pc, #752]	@ (80034e4 <main+0x1784>)
 80031f4:	ed93 7a00 	vldr	s14, [r3]
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <main+0x1784>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003202:	4bb9      	ldr	r3, [pc, #740]	@ (80034e8 <main+0x1788>)
 8003204:	edd3 6a00 	vldr	s13, [r3]
 8003208:	4bb7      	ldr	r3, [pc, #732]	@ (80034e8 <main+0x1788>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	eeb0 0a67 	vmov.f32	s0, s15
 800321a:	f008 fc89 	bl	800bb30 <sqrtf>
 800321e:	eef0 7a40 	vmov.f32	s15, s0
 8003222:	4bb3      	ldr	r3, [pc, #716]	@ (80034f0 <main+0x1790>)
 8003224:	edc3 7a00 	vstr	s15, [r3]

			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 8003228:	4bb0      	ldr	r3, [pc, #704]	@ (80034ec <main+0x178c>)
 800322a:	ed93 7a00 	vldr	s14, [r3]
 800322e:	4bb1      	ldr	r3, [pc, #708]	@ (80034f4 <main+0x1794>)
 8003230:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	4baf      	ldr	r3, [pc, #700]	@ (80034f8 <main+0x1798>)
 800323a:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 800323e:	4bab      	ldr	r3, [pc, #684]	@ (80034ec <main+0x178c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003246:	4baa      	ldr	r3, [pc, #680]	@ (80034f0 <main+0x1790>)
 8003248:	ed93 7a00 	vldr	s14, [r3]
 800324c:	4bab      	ldr	r3, [pc, #684]	@ (80034fc <main+0x179c>)
 800324e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003256:	4baa      	ldr	r3, [pc, #680]	@ (8003500 <main+0x17a0>)
 8003258:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 800325c:	4ba4      	ldr	r3, [pc, #656]	@ (80034f0 <main+0x1790>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

			//Call every 0.01 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 8003264:	f001 f9d8 	bl	8004618 <micros>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
			if (currentTimeState2 > timestampState2) {
 8003270:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003274:	4ba3      	ldr	r3, [pc, #652]	@ (8003504 <main+0x17a4>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	4282      	cmp	r2, r0
 800327c:	418b      	sbcs	r3, r1
 800327e:	f080 80aa 	bcs.w	80033d6 <main+0x1676>
				timestampState2 = currentTimeState2 + 10000;		//us
 8003282:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003286:	f242 7110 	movw	r1, #10000	@ 0x2710
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6339      	str	r1, [r7, #48]	@ 0x30
 800328e:	f143 0300 	adc.w	r3, r3, #0
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
 8003294:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003298:	4b9a      	ldr	r3, [pc, #616]	@ (8003504 <main+0x17a4>)
 800329a:	e9c3 0100 	strd	r0, r1, [r3]

//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0) {
 800329e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d130      	bne.n	8003308 <main+0x15a8>
					revolute.current_position = Revolute_QEIdata.RadPosition;
 80032a6:	4b93      	ldr	r3, [pc, #588]	@ (80034f4 <main+0x1794>)
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					Trapezoidal_Update(&revolute, 0.01);
 80032ae:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80032b2:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8003508 <main+0x17a8>
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fc5c 	bl	8001b74 <Trapezoidal_Update>
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 80032bc:	4b8d      	ldr	r3, [pc, #564]	@ (80034f4 <main+0x1794>)
 80032be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
							- revolute.current_velocity) * -1;
 80032c2:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80032c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ca:	eef1 7a67 	vneg.f32	s15, s15
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 80032ce:	4b8f      	ldr	r3, [pc, #572]	@ (800350c <main+0x17ac>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f,
 80032d4:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <main+0x17ac>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	488d      	ldr	r0, [pc, #564]	@ (8003510 <main+0x17b0>)
 80032dc:	ed9f 3a8d 	vldr	s6, [pc, #564]	@ 8003514 <main+0x17b4>
 80032e0:	eddf 2a8d 	vldr	s5, [pc, #564]	@ 8003518 <main+0x17b8>
 80032e4:	ed9f 2a88 	vldr	s4, [pc, #544]	@ 8003508 <main+0x17a8>
 80032e8:	eddf 1a8c 	vldr	s3, [pc, #560]	@ 800351c <main+0x17bc>
 80032ec:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 8003520 <main+0x17c0>
 80032f0:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8003524 <main+0x17c4>
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f001 f9a8 	bl	800464c <PID_Update>
 80032fc:	eef0 7a40 	vmov.f32	s15, s0
 8003300:	4b89      	ldr	r3, [pc, #548]	@ (8003528 <main+0x17c8>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
 8003306:	e018      	b.n	800333a <main+0x15da>
							0.01f, -100.0f, 100.0f, &pid_r_v);
				} else {
					R_PWM = PID_Update(R_Pos_Error, 16.00f, 32.00f, 8.00f,
 8003308:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <main+0x1798>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	4887      	ldr	r0, [pc, #540]	@ (800352c <main+0x17cc>)
 8003310:	ed9f 3a80 	vldr	s6, [pc, #512]	@ 8003514 <main+0x17b4>
 8003314:	eddf 2a80 	vldr	s5, [pc, #512]	@ 8003518 <main+0x17b8>
 8003318:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 8003508 <main+0x17a8>
 800331c:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8003320:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8003530 <main+0x17d0>
 8003324:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8003328:	eeb0 0a67 	vmov.f32	s0, s15
 800332c:	f001 f98e 	bl	800464c <PID_Update>
 8003330:	eef0 7a40 	vmov.f32	s15, s0
 8003334:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <main+0x17c8>)
 8003336:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_r);
				}

				if (prismatic.finished == 0) {
 800333a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d130      	bne.n	80033a4 <main+0x1644>
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 8003342:	4b6e      	ldr	r3, [pc, #440]	@ (80034fc <main+0x179c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					Trapezoidal_Update(&prismatic, 0.01);
 800334a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800334e:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8003508 <main+0x17a8>
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fc0e 	bl	8001b74 <Trapezoidal_Update>
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <main+0x179c>)
 800335a:	ed93 7a08 	vldr	s14, [r3, #32]
							- prismatic.current_velocity) * -1;
 800335e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	eef1 7a67 	vneg.f32	s15, s15
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 800336a:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <main+0x17d4>)
 800336c:	edc3 7a00 	vstr	s15, [r3]
					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8003370:	4b70      	ldr	r3, [pc, #448]	@ (8003534 <main+0x17d4>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	4870      	ldr	r0, [pc, #448]	@ (8003538 <main+0x17d8>)
 8003378:	ed9f 3a66 	vldr	s6, [pc, #408]	@ 8003514 <main+0x17b4>
 800337c:	eddf 2a66 	vldr	s5, [pc, #408]	@ 8003518 <main+0x17b8>
 8003380:	ed9f 2a61 	vldr	s4, [pc, #388]	@ 8003508 <main+0x17a8>
 8003384:	eddf 1a65 	vldr	s3, [pc, #404]	@ 800351c <main+0x17bc>
 8003388:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 800338c:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 800353c <main+0x17dc>
 8003390:	eeb0 0a67 	vmov.f32	s0, s15
 8003394:	f001 f95a 	bl	800464c <PID_Update>
 8003398:	eef0 7a40 	vmov.f32	s15, s0
 800339c:	4b68      	ldr	r3, [pc, #416]	@ (8003540 <main+0x17e0>)
 800339e:	edc3 7a00 	vstr	s15, [r3]
 80033a2:	e018      	b.n	80033d6 <main+0x1676>
							-100.0f, 100.0f, &pid_p_v);
				} else {
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 80033a4:	4b56      	ldr	r3, [pc, #344]	@ (8003500 <main+0x17a0>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	4866      	ldr	r0, [pc, #408]	@ (8003544 <main+0x17e4>)
 80033ac:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 8003514 <main+0x17b4>
 80033b0:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8003518 <main+0x17b8>
 80033b4:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 8003508 <main+0x17a8>
 80033b8:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8003548 <main+0x17e8>
 80033bc:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 800354c <main+0x17ec>
 80033c0:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8003550 <main+0x17f0>
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	f001 f940 	bl	800464c <PID_Update>
 80033cc:	eef0 7a40 	vmov.f32	s15, s0
 80033d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <main+0x17e0>)
 80033d2:	edc3 7a00 	vstr	s15, [r3]
							-100.0f, 100.0f, &pid_p);
				}
			}

			Set_Motor(0, R_PWM);
 80033d6:	4b54      	ldr	r3, [pc, #336]	@ (8003528 <main+0x17c8>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	2000      	movs	r0, #0
 80033e2:	f001 fb8f 	bl	8004b04 <Set_Motor>
			Set_Motor(1, P_PWM);
 80033e6:	4b56      	ldr	r3, [pc, #344]	@ (8003540 <main+0x17e0>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	eeb0 0a67 	vmov.f32	s0, s15
 80033f0:	2001      	movs	r0, #1
 80033f2:	f001 fb87 	bl	8004b04 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 80033f6:	4b40      	ldr	r3, [pc, #256]	@ (80034f8 <main+0x1798>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003400:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003554 <main+0x17f4>
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d53f      	bpl.n	800348e <main+0x172e>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 800340e:	4b3c      	ldr	r3, [pc, #240]	@ (8003500 <main+0x17a0>)
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eef0 7ae7 	vabs.f32	s15, s15
 8003418:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800353c <main+0x17dc>
 800341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	d533      	bpl.n	800348e <main+0x172e>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8003426:	4b4c      	ldr	r3, [pc, #304]	@ (8003558 <main+0x17f8>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	4313      	orrs	r3, r2
 800342e:	d107      	bne.n	8003440 <main+0x16e0>
					lock_timer_us = micros(); /* start timing */
 8003430:	f001 f8f2 	bl	8004618 <micros>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4947      	ldr	r1, [pc, #284]	@ (8003558 <main+0x17f8>)
 800343a:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 800343e:	e02e      	b.n	800349e <main+0x173e>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8003440:	f001 f8ea 	bl	8004618 <micros>
 8003444:	4b44      	ldr	r3, [pc, #272]	@ (8003558 <main+0x17f8>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	1a86      	subs	r6, r0, r2
 800344c:	62be      	str	r6, [r7, #40]	@ 0x28
 800344e:	eb61 0303 	sbc.w	r3, r1, r3
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003454:	4b41      	ldr	r3, [pc, #260]	@ (800355c <main+0x17fc>)
 8003456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800345a:	4602      	mov	r2, r0
 800345c:	429a      	cmp	r2, r3
 800345e:	460b      	mov	r3, r1
 8003460:	f173 0300 	sbcs.w	r3, r3, #0
 8003464:	d31b      	bcc.n	800349e <main+0x173e>
					Set_Servo(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f001 fbca 	bl	8004c00 <Set_Servo>
					Set_Motor(0, 0);
 800346c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800351c <main+0x17bc>
 8003470:	2000      	movs	r0, #0
 8003472:	f001 fb47 	bl	8004b04 <Set_Motor>
					Set_Motor(1, 0);
 8003476:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800351c <main+0x17bc>
 800347a:	2001      	movs	r0, #1
 800347c:	f001 fb42 	bl	8004b04 <Set_Motor>
					revolute.finished = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					prismatic.finished = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				if (lock_timer_us == 0)
 800348c:	e007      	b.n	800349e <main+0x173e>
				}
			} else {
				lock_timer_us = 0;
 800348e:	4932      	ldr	r1, [pc, #200]	@ (8003558 <main+0x17f8>)
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9c1 2300 	strd	r2, r3, [r1]
 800349c:	e000      	b.n	80034a0 <main+0x1740>
				if (lock_timer_us == 0)
 800349e:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 5) {
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <main+0x1780>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d162      	bne.n	800356e <main+0x180e>
			Set_Motor(0, 5);
 80034a8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80034ac:	2000      	movs	r0, #0
 80034ae:	f001 fb29 	bl	8004b04 <Set_Motor>
			if (Z_index_R > 0) {
 80034b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <main+0x1800>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d054      	beq.n	8003564 <main+0x1804>
				Set_Motor(0, 0);
 80034ba:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800351c <main+0x17bc>
 80034be:	2000      	movs	r0, #0
 80034c0:	f001 fb20 	bl	8004b04 <Set_Motor>
				Reset_R();
 80034c4:	f001 fbc6 	bl	8004c54 <Reset_R>
				TargetR = Revolute_QEIdata.RadPosition;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <main+0x1794>)
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <main+0x178c>)
 80034ce:	601a      	str	r2, [r3, #0]
				Mode = 0;
 80034d0:	4a03      	ldr	r2, [pc, #12]	@ (80034e0 <main+0x1780>)
 80034d2:	2300      	movs	r3, #0
 80034d4:	7013      	strb	r3, [r2, #0]
 80034d6:	e04a      	b.n	800356e <main+0x180e>
 80034d8:	54442d18 	.word	0x54442d18
 80034dc:	3ff921fb 	.word	0x3ff921fb
 80034e0:	20000b7c 	.word	0x20000b7c
 80034e4:	20000b4c 	.word	0x20000b4c
 80034e8:	20000b50 	.word	0x20000b50
 80034ec:	20000b54 	.word	0x20000b54
 80034f0:	20000b58 	.word	0x20000b58
 80034f4:	20000ac0 	.word	0x20000ac0
 80034f8:	20000b64 	.word	0x20000b64
 80034fc:	20000b00 	.word	0x20000b00
 8003500:	20000b68 	.word	0x20000b68
 8003504:	20001290 	.word	0x20001290
 8003508:	3c23d70a 	.word	0x3c23d70a
 800350c:	20000b6c 	.word	0x20000b6c
 8003510:	20000bc4 	.word	0x20000bc4
 8003514:	42c80000 	.word	0x42c80000
 8003518:	c2c80000 	.word	0xc2c80000
 800351c:	00000000 	.word	0x00000000
 8003520:	3dcccccd 	.word	0x3dcccccd
 8003524:	428ed70a 	.word	0x428ed70a
 8003528:	20000b74 	.word	0x20000b74
 800352c:	20000bb4 	.word	0x20000bb4
 8003530:	42000000 	.word	0x42000000
 8003534:	20000b70 	.word	0x20000b70
 8003538:	20000bcc 	.word	0x20000bcc
 800353c:	3e4ccccd 	.word	0x3e4ccccd
 8003540:	20000b78 	.word	0x20000b78
 8003544:	20000bbc 	.word	0x20000bbc
 8003548:	3e19999a 	.word	0x3e19999a
 800354c:	3f99999a 	.word	0x3f99999a
 8003550:	3eaa7efa 	.word	0x3eaa7efa
 8003554:	3d0b4396 	.word	0x3d0b4396
 8003558:	20000b88 	.word	0x20000b88
 800355c:	000f4240 	.word	0x000f4240
 8003560:	20000b38 	.word	0x20000b38
			}
			else{
				Set_Motor(0, 25);
 8003564:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003568:	2000      	movs	r0, #0
 800356a:	f001 facb 	bl	8004b04 <Set_Motor>
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 800356e:	4bb2      	ldr	r3, [pc, #712]	@ (8003838 <main+0x1ad8>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d102      	bne.n	800357c <main+0x181c>
			Set_Servo(0);
 8003576:	2000      	movs	r0, #0
 8003578:	f001 fb42 	bl	8004c00 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 800357c:	4bae      	ldr	r3, [pc, #696]	@ (8003838 <main+0x1ad8>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b07      	cmp	r3, #7
 8003582:	d102      	bne.n	800358a <main+0x182a>
			Set_Servo(1);
 8003584:	2001      	movs	r0, #1
 8003586:	f001 fb3b 	bl	8004c00 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 800358a:	4bab      	ldr	r3, [pc, #684]	@ (8003838 <main+0x1ad8>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	f47e ac78 	bne.w	8001e84 <main+0x124>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8003594:	4ba9      	ldr	r3, [pc, #676]	@ (800383c <main+0x1adc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d120      	bne.n	80035de <main+0x187e>
 800359c:	f001 f83c 	bl	8004618 <micros>
 80035a0:	4ba7      	ldr	r3, [pc, #668]	@ (8003840 <main+0x1ae0>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	1a86      	subs	r6, r0, r2
 80035a8:	623e      	str	r6, [r7, #32]
 80035aa:	eb61 0303 	sbc.w	r3, r1, r3
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003844 <main+0x1ae4>)
 80035b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035b6:	4602      	mov	r2, r0
 80035b8:	429a      	cmp	r2, r3
 80035ba:	460b      	mov	r3, r1
 80035bc:	f173 0300 	sbcs.w	r3, r3, #0
 80035c0:	d20d      	bcs.n	80035de <main+0x187e>
				Set_Motor(0, 0);
 80035c2:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8003848 <main+0x1ae8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	f001 fa9c 	bl	8004b04 <Set_Motor>
				Set_Motor(1, 0);
 80035cc:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8003848 <main+0x1ae8>
 80035d0:	2001      	movs	r0, #1
 80035d2:	f001 fa97 	bl	8004b04 <Set_Motor>
				Set_Servo(1);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f001 fb12 	bl	8004c00 <Set_Servo>
 80035dc:	e197      	b.n	800390e <main+0x1bae>
			} else if (loop_counter == 1
 80035de:	4b97      	ldr	r3, [pc, #604]	@ (800383c <main+0x1adc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d116      	bne.n	8003614 <main+0x18b4>
					&& micros() - pen_delay_timer < 500000) {
 80035e6:	f001 f817 	bl	8004618 <micros>
 80035ea:	4b95      	ldr	r3, [pc, #596]	@ (8003840 <main+0x1ae0>)
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	1a86      	subs	r6, r0, r2
 80035f2:	61be      	str	r6, [r7, #24]
 80035f4:	eb61 0303 	sbc.w	r3, r1, r3
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	4b94      	ldr	r3, [pc, #592]	@ (800384c <main+0x1aec>)
 80035fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003600:	4602      	mov	r2, r0
 8003602:	429a      	cmp	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	f173 0300 	sbcs.w	r3, r3, #0
 800360a:	d203      	bcs.n	8003614 <main+0x18b4>
				Set_Servo(0);
 800360c:	2000      	movs	r0, #0
 800360e:	f001 faf7 	bl	8004c00 <Set_Servo>
 8003612:	e17c      	b.n	800390e <main+0x1bae>
			} else if (loop_counter < 100) {
 8003614:	4b89      	ldr	r3, [pc, #548]	@ (800383c <main+0x1adc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b63      	cmp	r3, #99	@ 0x63
 800361a:	f300 814d 	bgt.w	80038b8 <main+0x1b58>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 800361e:	2000      	movs	r0, #0
 8003620:	f001 faee 	bl	8004c00 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003624:	4b8a      	ldr	r3, [pc, #552]	@ (8003850 <main+0x1af0>)
 8003626:	ed93 7a00 	vldr	s14, [r3]
 800362a:	4b8a      	ldr	r3, [pc, #552]	@ (8003854 <main+0x1af4>)
 800362c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003634:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <main+0x1af8>)
 8003636:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <main+0x1afc>)
 800363c:	ed93 7a00 	vldr	s14, [r3]
 8003640:	4b87      	ldr	r3, [pc, #540]	@ (8003860 <main+0x1b00>)
 8003642:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364a:	4b86      	ldr	r3, [pc, #536]	@ (8003864 <main+0x1b04>)
 800364c:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8003650:	f000 ffe2 	bl	8004618 <micros>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
				if (currentTimeState8 > timestampState8) {
 800365c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003660:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <main+0x1b08>)
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	4282      	cmp	r2, r0
 8003668:	418b      	sbcs	r3, r1
 800366a:	d23f      	bcs.n	80036ec <main+0x198c>
					timestampState8 = currentTimeState8 + 10000;		//us
 800366c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003670:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003674:	1851      	adds	r1, r2, r1
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	f143 0300 	adc.w	r3, r3, #0
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003682:	4b79      	ldr	r3, [pc, #484]	@ (8003868 <main+0x1b08>)
 8003684:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 8003688:	4b73      	ldr	r3, [pc, #460]	@ (8003858 <main+0x1af8>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	4877      	ldr	r0, [pc, #476]	@ (800386c <main+0x1b0c>)
 8003690:	ed9f 3a77 	vldr	s6, [pc, #476]	@ 8003870 <main+0x1b10>
 8003694:	eddf 2a77 	vldr	s5, [pc, #476]	@ 8003874 <main+0x1b14>
 8003698:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 8003878 <main+0x1b18>
 800369c:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 80036a0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80036a4:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 80036a8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ac:	f000 ffce 	bl	800464c <PID_Update>
 80036b0:	eef0 7a40 	vmov.f32	s15, s0
 80036b4:	4b71      	ldr	r3, [pc, #452]	@ (800387c <main+0x1b1c>)
 80036b6:	edc3 7a00 	vstr	s15, [r3]
									0.01f, -100.0f, 100.0f, &pid_r));
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f,
 80036ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003864 <main+0x1b04>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	486f      	ldr	r0, [pc, #444]	@ (8003880 <main+0x1b20>)
 80036c2:	ed9f 3a6b 	vldr	s6, [pc, #428]	@ 8003870 <main+0x1b10>
 80036c6:	eddf 2a6b 	vldr	s5, [pc, #428]	@ 8003874 <main+0x1b14>
 80036ca:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 8003878 <main+0x1b18>
 80036ce:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 8003884 <main+0x1b24>
 80036d2:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8003888 <main+0x1b28>
 80036d6:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 800388c <main+0x1b2c>
 80036da:	eeb0 0a67 	vmov.f32	s0, s15
 80036de:	f000 ffb5 	bl	800464c <PID_Update>
 80036e2:	eef0 7a40 	vmov.f32	s15, s0
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <main+0x1b30>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_PWM);
 80036ec:	4b63      	ldr	r3, [pc, #396]	@ (800387c <main+0x1b1c>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	2000      	movs	r0, #0
 80036f8:	f001 fa04 	bl	8004b04 <Set_Motor>
				Set_Motor(1, P_PWM);
 80036fc:	4b64      	ldr	r3, [pc, #400]	@ (8003890 <main+0x1b30>)
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	eeb0 0a67 	vmov.f32	s0, s15
 8003706:	2001      	movs	r0, #1
 8003708:	f001 f9fc 	bl	8004b04 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 800370c:	4b52      	ldr	r3, [pc, #328]	@ (8003858 <main+0x1af8>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	eef0 7ae7 	vabs.f32	s15, s15
 8003716:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003894 <main+0x1b34>
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d57f      	bpl.n	8003824 <main+0x1ac4>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8003724:	4b4f      	ldr	r3, [pc, #316]	@ (8003864 <main+0x1b04>)
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	eef0 7ae7 	vabs.f32	s15, s15
 800372e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003898 <main+0x1b38>
 8003732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	d573      	bpl.n	8003824 <main+0x1ac4>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 800373c:	4b57      	ldr	r3, [pc, #348]	@ (800389c <main+0x1b3c>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	4313      	orrs	r3, r2
 8003744:	d107      	bne.n	8003756 <main+0x19f6>
						lock_timer_us = micros(); /* start timing */
 8003746:	f000 ff67 	bl	8004618 <micros>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4953      	ldr	r1, [pc, #332]	@ (800389c <main+0x1b3c>)
 8003750:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8003754:	e0da      	b.n	800390c <main+0x1bac>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8003756:	f000 ff5f 	bl	8004618 <micros>
 800375a:	4b50      	ldr	r3, [pc, #320]	@ (800389c <main+0x1b3c>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	1a86      	subs	r6, r0, r2
 8003762:	60be      	str	r6, [r7, #8]
 8003764:	eb61 0303 	sbc.w	r3, r1, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b4d      	ldr	r3, [pc, #308]	@ (80038a0 <main+0x1b40>)
 800376c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003770:	4602      	mov	r2, r0
 8003772:	429a      	cmp	r2, r3
 8003774:	460b      	mov	r3, r1
 8003776:	f173 0300 	sbcs.w	r3, r3, #0
 800377a:	f0c0 80c7 	bcc.w	800390c <main+0x1bac>
						if (loop_temp == 0) {
 800377e:	4b49      	ldr	r3, [pc, #292]	@ (80038a4 <main+0x1b44>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d119      	bne.n	80037ba <main+0x1a5a>
							pid_r.integ = 0;
 8003786:	4a39      	ldr	r2, [pc, #228]	@ (800386c <main+0x1b0c>)
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 800378e:	4a37      	ldr	r2, [pc, #220]	@ (800386c <main+0x1b0c>)
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8003796:	4a3a      	ldr	r2, [pc, #232]	@ (8003880 <main+0x1b20>)
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 800379e:	4a38      	ldr	r2, [pc, #224]	@ (8003880 <main+0x1b20>)
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 80037a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <main+0x1af0>)
 80037a8:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <main+0x1b48>)
 80037aa:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 80037ac:	4a2b      	ldr	r2, [pc, #172]	@ (800385c <main+0x1afc>)
 80037ae:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <main+0x1b4c>)
 80037b0:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 80037b2:	4a3c      	ldr	r2, [pc, #240]	@ (80038a4 <main+0x1b44>)
 80037b4:	2301      	movs	r3, #1
 80037b6:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 80037b8:	e0a8      	b.n	800390c <main+0x1bac>
						} else {
							pid_r.integ = 0;
 80037ba:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <main+0x1b0c>)
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 80037c2:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <main+0x1b0c>)
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 80037ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003880 <main+0x1b20>)
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 80037d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <main+0x1b20>)
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 80037da:	4a1d      	ldr	r2, [pc, #116]	@ (8003850 <main+0x1af0>)
 80037dc:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <main+0x1b50>)
 80037de:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 80037e0:	4a1e      	ldr	r2, [pc, #120]	@ (800385c <main+0x1afc>)
 80037e2:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <main+0x1b54>)
 80037e4:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 80037e6:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <main+0x1b44>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 80037ec:	4b13      	ldr	r3, [pc, #76]	@ (800383c <main+0x1adc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <main+0x1adc>)
 80037f4:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 80037f6:	4b11      	ldr	r3, [pc, #68]	@ (800383c <main+0x1adc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <main+0x1aac>
								pen_delay_timer = micros();
 80037fe:	f000 ff0b 	bl	8004618 <micros>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	490e      	ldr	r1, [pc, #56]	@ (8003840 <main+0x1ae0>)
 8003808:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <main+0x1adc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d17b      	bne.n	800390c <main+0x1bac>
								pen_delay_timer = micros();
 8003814:	f000 ff00 	bl	8004618 <micros>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4908      	ldr	r1, [pc, #32]	@ (8003840 <main+0x1ae0>)
 800381e:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8003822:	e073      	b.n	800390c <main+0x1bac>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8003824:	491d      	ldr	r1, [pc, #116]	@ (800389c <main+0x1b3c>)
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
 8003832:	f7fe bb27 	b.w	8001e84 <main+0x124>
 8003836:	bf00      	nop
 8003838:	20000b7c 	.word	0x20000b7c
 800383c:	20000bf0 	.word	0x20000bf0
 8003840:	20001298 	.word	0x20001298
 8003844:	000493e0 	.word	0x000493e0
 8003848:	00000000 	.word	0x00000000
 800384c:	0007a120 	.word	0x0007a120
 8003850:	20000b54 	.word	0x20000b54
 8003854:	20000ac0 	.word	0x20000ac0
 8003858:	20000b64 	.word	0x20000b64
 800385c:	20000b58 	.word	0x20000b58
 8003860:	20000b00 	.word	0x20000b00
 8003864:	20000b68 	.word	0x20000b68
 8003868:	200012a0 	.word	0x200012a0
 800386c:	20000bb4 	.word	0x20000bb4
 8003870:	42c80000 	.word	0x42c80000
 8003874:	c2c80000 	.word	0xc2c80000
 8003878:	3c23d70a 	.word	0x3c23d70a
 800387c:	20000b74 	.word	0x20000b74
 8003880:	20000bbc 	.word	0x20000bbc
 8003884:	3e19999a 	.word	0x3e19999a
 8003888:	3f99999a 	.word	0x3f99999a
 800388c:	3eaa7efa 	.word	0x3eaa7efa
 8003890:	20000b78 	.word	0x20000b78
 8003894:	3d0b4396 	.word	0x3d0b4396
 8003898:	3e4ccccd 	.word	0x3e4ccccd
 800389c:	20000b88 	.word	0x20000b88
 80038a0:	000f4240 	.word	0x000f4240
 80038a4:	200012a8 	.word	0x200012a8
 80038a8:	bf860aa6 	.word	0xbf860aa6
 80038ac:	437a0000 	.word	0x437a0000
 80038b0:	40860a91 	.word	0x40860a91
 80038b4:	42480000 	.word	0x42480000
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 80038b8:	f000 feae 	bl	8004618 <micros>
 80038bc:	4b15      	ldr	r3, [pc, #84]	@ (8003914 <main+0x1bb4>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	1a86      	subs	r6, r0, r2
 80038c4:	603e      	str	r6, [r7, #0]
 80038c6:	eb61 0303 	sbc.w	r3, r1, r3
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <main+0x1bb8>)
 80038ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038d2:	4602      	mov	r2, r0
 80038d4:	429a      	cmp	r2, r3
 80038d6:	460b      	mov	r3, r1
 80038d8:	f173 0300 	sbcs.w	r3, r3, #0
 80038dc:	d20e      	bcs.n	80038fc <main+0x1b9c>
					Set_Motor(0, 0);
 80038de:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800391c <main+0x1bbc>
 80038e2:	2000      	movs	r0, #0
 80038e4:	f001 f90e 	bl	8004b04 <Set_Motor>
					Set_Motor(1, 0);
 80038e8:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800391c <main+0x1bbc>
 80038ec:	2001      	movs	r0, #1
 80038ee:	f001 f909 	bl	8004b04 <Set_Motor>
					Set_Servo(1);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f001 f984 	bl	8004c00 <Set_Servo>
 80038f8:	f7fe bac4 	b.w	8001e84 <main+0x124>
				} else {
					Set_Servo(0);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f001 f97f 	bl	8004c00 <Set_Servo>
					Mode = 0;
 8003902:	4a07      	ldr	r2, [pc, #28]	@ (8003920 <main+0x1bc0>)
 8003904:	2300      	movs	r3, #0
 8003906:	7013      	strb	r3, [r2, #0]
 8003908:	f7fe babc 	b.w	8001e84 <main+0x124>
					if (lock_timer_us == 0)
 800390c:	bf00      	nop
	while (1) {
 800390e:	f7fe bab9 	b.w	8001e84 <main+0x124>
 8003912:	bf00      	nop
 8003914:	20001298 	.word	0x20001298
 8003918:	0007a120 	.word	0x0007a120
 800391c:	00000000 	.word	0x00000000
 8003920:	20000b7c 	.word	0x20000b7c

08003924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b094      	sub	sp, #80	@ 0x50
 8003928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800392a:	f107 0318 	add.w	r3, r7, #24
 800392e:	2238      	movs	r2, #56	@ 0x38
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f008 f8ba 	bl	800baac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003946:	2000      	movs	r0, #0
 8003948:	f002 fbf8 	bl	800613c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800394c:	2302      	movs	r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003956:	2340      	movs	r3, #64	@ 0x40
 8003958:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800395a:	2302      	movs	r3, #2
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800395e:	2302      	movs	r3, #2
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003962:	2304      	movs	r3, #4
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003966:	2355      	movs	r3, #85	@ 0x55
 8003968:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800396a:	2302      	movs	r3, #2
 800396c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800396e:	2302      	movs	r3, #2
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003972:	2302      	movs	r3, #2
 8003974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fc92 	bl	80062a4 <HAL_RCC_OscConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003986:	f001 f9c3 	bl	8004d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800398a:	230f      	movs	r3, #15
 800398c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800398e:	2303      	movs	r3, #3
 8003990:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 ff90 	bl	80068c8 <HAL_RCC_ClockConfig>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80039ae:	f001 f9af 	bl	8004d10 <Error_Handler>
  }
}
 80039b2:	bf00      	nop
 80039b4:	3750      	adds	r7, #80	@ 0x50
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	@ 0x30
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80039c2:	f107 031c 	add.w	r3, r7, #28
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e0:	463b      	mov	r3, r7
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039ea:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 80039ec:	4a35      	ldr	r2, [pc, #212]	@ (8003ac4 <MX_TIM1_Init+0x108>)
 80039ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80039f0:	4b33      	ldr	r3, [pc, #204]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 80039f2:	22a9      	movs	r2, #169	@ 0xa9
 80039f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f6:	4b32      	ldr	r3, [pc, #200]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80039fc:	4b30      	ldr	r3, [pc, #192]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 80039fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003a16:	482a      	ldr	r0, [pc, #168]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a18:	f003 fe8c 	bl	8007734 <HAL_TIM_IC_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8003a22:	f001 f975 	bl	8004d10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003a26:	2304      	movs	r3, #4
 8003a28:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003a2a:	2360      	movs	r3, #96	@ 0x60
 8003a2c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	4619      	mov	r1, r3
 8003a40:	481f      	ldr	r0, [pc, #124]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a42:	f004 fe57 	bl	80086f4 <HAL_TIM_SlaveConfigSynchro>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003a4c:	f001 f960 	bl	8004d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003a54:	2302      	movs	r3, #2
 8003a56:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	2200      	movs	r2, #0
 8003a66:	4619      	mov	r1, r3
 8003a68:	4815      	ldr	r0, [pc, #84]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a6a:	f004 fb7c 	bl	8008166 <HAL_TIM_IC_ConfigChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003a74:	f001 f94c 	bl	8004d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	2204      	movs	r2, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	480d      	ldr	r0, [pc, #52]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003a8a:	f004 fb6c 	bl	8008166 <HAL_TIM_IC_ConfigChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003a94:	f001 f93c 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4805      	ldr	r0, [pc, #20]	@ (8003ac0 <MX_TIM1_Init+0x104>)
 8003aaa:	f005 ff3f 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003ab4:	f001 f92c 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ab8:	bf00      	nop
 8003aba:	3730      	adds	r7, #48	@ 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000284 	.word	0x20000284
 8003ac4:	40012c00 	.word	0x40012c00

08003ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	@ 0x30
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aec:	463b      	mov	r3, r7
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003af6:	4b33      	ldr	r3, [pc, #204]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003af8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003afe:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b00:	22a9      	movs	r2, #169	@ 0xa9
 8003b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b12:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b18:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003b1e:	4829      	ldr	r0, [pc, #164]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b20:	f003 fe08 	bl	8007734 <HAL_TIM_IC_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003b2a:	f001 f8f1 	bl	8004d10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003b2e:	2304      	movs	r3, #4
 8003b30:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003b32:	2350      	movs	r3, #80	@ 0x50
 8003b34:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	4619      	mov	r1, r3
 8003b48:	481e      	ldr	r0, [pc, #120]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b4a:	f004 fdd3 	bl	80086f4 <HAL_TIM_SlaveConfigSynchro>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003b54:	f001 f8dc 	bl	8004d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4814      	ldr	r0, [pc, #80]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b72:	f004 faf8 	bl	8008166 <HAL_TIM_IC_ConfigChannel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003b7c:	f001 f8c8 	bl	8004d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b80:	2302      	movs	r3, #2
 8003b82:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003b84:	2302      	movs	r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	480c      	ldr	r0, [pc, #48]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b92:	f004 fae8 	bl	8008166 <HAL_TIM_IC_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003b9c:	f001 f8b8 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ba8:	463b      	mov	r3, r7
 8003baa:	4619      	mov	r1, r3
 8003bac:	4805      	ldr	r0, [pc, #20]	@ (8003bc4 <MX_TIM2_Init+0xfc>)
 8003bae:	f005 febd 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8003bb8:	f001 f8aa 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bbc:	bf00      	nop
 8003bbe:	3730      	adds	r7, #48	@ 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000350 	.word	0x20000350

08003bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	@ 0x30
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f007 ff68 	bl	800baac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bdc:	463b      	mov	r3, r7
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003be6:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003be8:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <MX_TIM3_Init+0xa8>)
 8003bea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bec:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	4619      	mov	r1, r3
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003c38:	f003 ffda 	bl	8007bf0 <HAL_TIM_Encoder_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003c42:	f001 f865 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4619      	mov	r1, r3
 8003c52:	4806      	ldr	r0, [pc, #24]	@ (8003c6c <MX_TIM3_Init+0xa4>)
 8003c54:	f005 fe6a 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003c5e:	f001 f857 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c62:	bf00      	nop
 8003c64:	3730      	adds	r7, #48	@ 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000041c 	.word	0x2000041c
 8003c70:	40000400 	.word	0x40000400

08003c74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f007 ff12 	bl	800baac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c88:	463b      	mov	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c92:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003c94:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <MX_TIM4_Init+0xa8>)
 8003c96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003caa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	480d      	ldr	r0, [pc, #52]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003ce4:	f003 ff84 	bl	8007bf0 <HAL_TIM_Encoder_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003cee:	f001 f80f 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	@ (8003d18 <MX_TIM4_Init+0xa4>)
 8003d00:	f005 fe14 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003d0a:	f001 f801 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d0e:	bf00      	nop
 8003d10:	3730      	adds	r7, #48	@ 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200004e8 	.word	0x200004e8
 8003d1c:	40000800 	.word	0x40000800

08003d20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0310 	add.w	r3, r7, #16
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d40:	4a1d      	ldr	r2, [pc, #116]	@ (8003db8 <MX_TIM5_Init+0x98>)
 8003d42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d46:	22a9      	movs	r2, #169	@ 0xa9
 8003d48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003d50:	4b18      	ldr	r3, [pc, #96]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d64:	4813      	ldr	r0, [pc, #76]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d66:	f003 fa19 	bl	800719c <HAL_TIM_Base_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003d70:	f000 ffce 	bl	8004d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003d7a:	f107 0310 	add.w	r3, r7, #16
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d82:	f004 fba1 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003d8c:	f000 ffc0 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4805      	ldr	r0, [pc, #20]	@ (8003db4 <MX_TIM5_Init+0x94>)
 8003d9e:	f005 fdc5 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003da8:	f000 ffb2 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003dac:	bf00      	nop
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200005b4 	.word	0x200005b4
 8003db8:	40000c00 	.word	0x40000c00

08003dbc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09c      	sub	sp, #112	@ 0x70
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ddc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2234      	movs	r2, #52	@ 0x34
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f007 fe58 	bl	800baac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003f30 <MX_TIM8_Init+0x174>)
 8003e00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8003e02:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e04:	22a9      	movs	r2, #169	@ 0xa9
 8003e06:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e08:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003e0e:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e10:	2264      	movs	r2, #100	@ 0x64
 8003e12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e14:	4b45      	ldr	r3, [pc, #276]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e1a:	4b44      	ldr	r3, [pc, #272]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e20:	4b42      	ldr	r3, [pc, #264]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e26:	4841      	ldr	r0, [pc, #260]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e28:	f003 f9b8 	bl	800719c <HAL_TIM_Base_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003e32:	f000 ff6d 	bl	8004d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e3a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e40:	4619      	mov	r1, r3
 8003e42:	483a      	ldr	r0, [pc, #232]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e44:	f004 fb40 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003e4e:	f000 ff5f 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e52:	4836      	ldr	r0, [pc, #216]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e54:	f003 faee 	bl	8007434 <HAL_TIM_PWM_Init>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003e5e:	f000 ff57 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e72:	4619      	mov	r1, r3
 8003e74:	482d      	ldr	r0, [pc, #180]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003e76:	f005 fd59 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8003e80:	f000 ff46 	bl	8004d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e84:	2360      	movs	r3, #96	@ 0x60
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 100;
 8003e88:	2364      	movs	r3, #100	@ 0x64
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e90:	2300      	movs	r3, #0
 8003e92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ea0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4820      	ldr	r0, [pc, #128]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003eaa:	f004 f9f9 	bl	80082a0 <HAL_TIM_PWM_ConfigChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8003eb4:	f000 ff2c 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ebc:	220c      	movs	r2, #12
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	481a      	ldr	r0, [pc, #104]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003ec2:	f004 f9ed 	bl	80082a0 <HAL_TIM_PWM_ConfigChannel>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8003ecc:	f000 ff20 	bl	8004d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ee8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f00:	2300      	movs	r3, #0
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4807      	ldr	r0, [pc, #28]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003f0e:	f005 fda3 	bl	8009a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 8003f18:	f000 fefa 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003f1c:	4803      	ldr	r0, [pc, #12]	@ (8003f2c <MX_TIM8_Init+0x170>)
 8003f1e:	f001 f88b 	bl	8005038 <HAL_TIM_MspPostInit>

}
 8003f22:	bf00      	nop
 8003f24:	3770      	adds	r7, #112	@ 0x70
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000680 	.word	0x20000680
 8003f30:	40013400 	.word	0x40013400

08003f34 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b09c      	sub	sp, #112	@ 0x70
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	615a      	str	r2, [r3, #20]
 8003f66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	2234      	movs	r2, #52	@ 0x34
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f007 fd9c 	bl	800baac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003f74:	4b3f      	ldr	r3, [pc, #252]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f76:	4a40      	ldr	r2, [pc, #256]	@ (8004078 <MX_TIM15_Init+0x144>)
 8003f78:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f7c:	22a9      	movs	r2, #169	@ 0xa9
 8003f7e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f80:	4b3c      	ldr	r3, [pc, #240]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f88:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003f8c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8e:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003f94:	4b37      	ldr	r3, [pc, #220]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f9a:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003fa0:	4834      	ldr	r0, [pc, #208]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003fa2:	f003 f8fb 	bl	800719c <HAL_TIM_Base_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003fac:	f000 feb0 	bl	8004d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003fb6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003fba:	4619      	mov	r1, r3
 8003fbc:	482d      	ldr	r0, [pc, #180]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003fbe:	f004 fa83 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003fc8:	f000 fea2 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003fcc:	4829      	ldr	r0, [pc, #164]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003fce:	f003 fa31 	bl	8007434 <HAL_TIM_PWM_Init>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003fd8:	f000 fe9a 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4822      	ldr	r0, [pc, #136]	@ (8004074 <MX_TIM15_Init+0x140>)
 8003fec:	f005 fc9e 	bl	800992c <HAL_TIMEx_MasterConfigSynchronization>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003ff6:	f000 fe8b 	bl	8004d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffa:	2360      	movs	r3, #96	@ 0x60
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004002:	2300      	movs	r3, #0
 8004004:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004006:	2300      	movs	r3, #0
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004016:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800401a:	2200      	movs	r2, #0
 800401c:	4619      	mov	r1, r3
 800401e:	4815      	ldr	r0, [pc, #84]	@ (8004074 <MX_TIM15_Init+0x140>)
 8004020:	f004 f93e 	bl	80082a0 <HAL_TIM_PWM_ConfigChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800402a:	f000 fe71 	bl	8004d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800404c:	2300      	movs	r3, #0
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4807      	ldr	r0, [pc, #28]	@ (8004074 <MX_TIM15_Init+0x140>)
 8004056:	f005 fcff 	bl	8009a58 <HAL_TIMEx_ConfigBreakDeadTime>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8004060:	f000 fe56 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004064:	4803      	ldr	r0, [pc, #12]	@ (8004074 <MX_TIM15_Init+0x140>)
 8004066:	f000 ffe7 	bl	8005038 <HAL_TIM_MspPostInit>

}
 800406a:	bf00      	nop
 800406c:	3770      	adds	r7, #112	@ 0x70
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	2000074c 	.word	0x2000074c
 8004078:	40014000 	.word	0x40014000

0800407c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_TIM16_Init+0x58>)
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <MX_TIM16_Init+0x5c>)
 8004084:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_TIM16_Init+0x58>)
 8004088:	22a9      	movs	r2, #169	@ 0xa9
 800408a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <MX_TIM16_Init+0x58>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <MX_TIM16_Init+0x58>)
 8004094:	f240 4279 	movw	r2, #1145	@ 0x479
 8004098:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <MX_TIM16_Init+0x58>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <MX_TIM16_Init+0x58>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <MX_TIM16_Init+0x58>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80040ac:	4809      	ldr	r0, [pc, #36]	@ (80040d4 <MX_TIM16_Init+0x58>)
 80040ae:	f003 f875 	bl	800719c <HAL_TIM_Base_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80040b8:	f000 fe2a 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80040bc:	2108      	movs	r1, #8
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <MX_TIM16_Init+0x58>)
 80040c0:	f003 fca0 	bl	8007a04 <HAL_TIM_OnePulse_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80040ca:	f000 fe21 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000818 	.word	0x20000818
 80040d8:	40014400 	.word	0x40014400

080040dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040e0:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 80040e2:	4a24      	ldr	r2, [pc, #144]	@ (8004174 <MX_USART2_UART_Init+0x98>)
 80040e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80040e6:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 80040e8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80040ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 80040f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80040fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 80040fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 8004106:	220c      	movs	r2, #12
 8004108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800410a:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 8004118:	2200      	movs	r2, #0
 800411a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800411c:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800411e:	2200      	movs	r2, #0
 8004120:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004122:	4b13      	ldr	r3, [pc, #76]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 8004124:	2200      	movs	r2, #0
 8004126:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004128:	4811      	ldr	r0, [pc, #68]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800412a:	f005 fd79 	bl	8009c20 <HAL_UART_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004134:	f000 fdec 	bl	8004d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004138:	2100      	movs	r1, #0
 800413a:	480d      	ldr	r0, [pc, #52]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800413c:	f007 fbb5 	bl	800b8aa <HAL_UARTEx_SetTxFifoThreshold>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004146:	f000 fde3 	bl	8004d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800414a:	2100      	movs	r1, #0
 800414c:	4808      	ldr	r0, [pc, #32]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800414e:	f007 fbea 	bl	800b926 <HAL_UARTEx_SetRxFifoThreshold>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004158:	f000 fdda 	bl	8004d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800415c:	4804      	ldr	r0, [pc, #16]	@ (8004170 <MX_USART2_UART_Init+0x94>)
 800415e:	f007 fb6b 	bl	800b838 <HAL_UARTEx_DisableFifoMode>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004168:	f000 fdd2 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200008e4 	.word	0x200008e4
 8004174:	40004400 	.word	0x40004400

08004178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800417e:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <MX_DMA_Init+0x60>)
 8004180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004182:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <MX_DMA_Init+0x60>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6493      	str	r3, [r2, #72]	@ 0x48
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <MX_DMA_Init+0x60>)
 800418c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <MX_DMA_Init+0x60>)
 8004198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419a:	4a0f      	ldr	r2, [pc, #60]	@ (80041d8 <MX_DMA_Init+0x60>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <MX_DMA_Init+0x60>)
 80041a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	200b      	movs	r0, #11
 80041b4:	f001 fa91 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80041b8:	200b      	movs	r0, #11
 80041ba:	f001 faa8 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	200c      	movs	r0, #12
 80041c4:	f001 fa89 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80041c8:	200c      	movs	r0, #12
 80041ca:	f001 faa0 	bl	800570e <HAL_NVIC_EnableIRQ>

}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f2:	4b74      	ldr	r3, [pc, #464]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	4a73      	ldr	r2, [pc, #460]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fe:	4b71      	ldr	r3, [pc, #452]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800420a:	4b6e      	ldr	r3, [pc, #440]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	4a6d      	ldr	r2, [pc, #436]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004216:	4b6b      	ldr	r3, [pc, #428]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004222:	4b68      	ldr	r3, [pc, #416]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004226:	4a67      	ldr	r2, [pc, #412]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800422e:	4b65      	ldr	r3, [pc, #404]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004246:	4b5f      	ldr	r3, [pc, #380]	@ (80043c4 <MX_GPIO_Init+0x1e8>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	2120      	movs	r1, #32
 8004256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800425a:	f001 ff3f 	bl	80060dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004264:	4858      	ldr	r0, [pc, #352]	@ (80043c8 <MX_GPIO_Init+0x1ec>)
 8004266:	f001 ff39 	bl	80060dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800426a:	230d      	movs	r3, #13
 800426c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800426e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	4619      	mov	r1, r3
 800427e:	4852      	ldr	r0, [pc, #328]	@ (80043c8 <MX_GPIO_Init+0x1ec>)
 8004280:	f001 fd92 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004284:	2320      	movs	r3, #32
 8004286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004288:	2301      	movs	r3, #1
 800428a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004290:	2300      	movs	r3, #0
 8004292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4619      	mov	r1, r3
 800429a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800429e:	f001 fd83 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80042a2:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80042a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a8:	2301      	movs	r3, #1
 80042aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b0:	2300      	movs	r3, #0
 80042b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4619      	mov	r1, r3
 80042ba:	4843      	ldr	r0, [pc, #268]	@ (80043c8 <MX_GPIO_Init+0x1ec>)
 80042bc:	f001 fd74 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 80042c0:	f640 0304 	movw	r3, #2052	@ 0x804
 80042c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ce:	f107 0314 	add.w	r3, r7, #20
 80042d2:	4619      	mov	r1, r3
 80042d4:	483d      	ldr	r0, [pc, #244]	@ (80043cc <MX_GPIO_Init+0x1f0>)
 80042d6:	f001 fd67 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80042da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80042de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80042e0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80042e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042e6:	2302      	movs	r3, #2
 80042e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4619      	mov	r1, r3
 80042f0:	4836      	ldr	r0, [pc, #216]	@ (80043cc <MX_GPIO_Init+0x1f0>)
 80042f2:	f001 fd59 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004302:	2302      	movs	r3, #2
 8004304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	482f      	ldr	r0, [pc, #188]	@ (80043cc <MX_GPIO_Init+0x1f0>)
 800430e:	f001 fd4b 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004318:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800431c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	4619      	mov	r1, r3
 8004328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800432c:	f001 fd3c 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004330:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004336:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800433a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800433c:	2302      	movs	r3, #2
 800433e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4619      	mov	r1, r3
 8004346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800434a:	f001 fd2d 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800434e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004354:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800435a:	2302      	movs	r3, #2
 800435c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	4619      	mov	r1, r3
 8004364:	4818      	ldr	r0, [pc, #96]	@ (80043c8 <MX_GPIO_Init+0x1ec>)
 8004366:	f001 fd1f 	bl	8005da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2006      	movs	r0, #6
 8004370:	f001 f9b3 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004374:	2006      	movs	r0, #6
 8004376:	f001 f9ca 	bl	800570e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	2008      	movs	r0, #8
 8004380:	f001 f9ab 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004384:	2008      	movs	r0, #8
 8004386:	f001 f9c2 	bl	800570e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2009      	movs	r0, #9
 8004390:	f001 f9a3 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004394:	2009      	movs	r0, #9
 8004396:	f001 f9ba 	bl	800570e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	2017      	movs	r0, #23
 80043a0:	f001 f99b 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043a4:	2017      	movs	r0, #23
 80043a6:	f001 f9b2 	bl	800570e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2100      	movs	r1, #0
 80043ae:	2028      	movs	r0, #40	@ 0x28
 80043b0:	f001 f993 	bl	80056da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043b4:	2028      	movs	r0, #40	@ 0x28
 80043b6:	f001 f9aa 	bl	800570e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80043ba:	bf00      	nop
 80043bc:	3728      	adds	r7, #40	@ 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	48000800 	.word	0x48000800
 80043cc:	48000400 	.word	0x48000400

080043d0 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80043da:	edc7 0a04 	vstr	s1, [r7, #16]
 80043de:	ed87 1a03 	vstr	s2, [r7, #12]
 80043e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80043e6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80043ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80043ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043f6:	edd7 6a01 	vldr	s13, [r7, #4]
 80043fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80043fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004402:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004406:	ed97 7a03 	vldr	s14, [r7, #12]
 800440a:	edd7 7a04 	vldr	s15, [r7, #16]
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	edd7 7a02 	vldr	s15, [r7, #8]
 800441a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800441e:	eeb0 0a67 	vmov.f32	s0, s15
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <DWT_Init>:

void DWT_Init(void) {
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004430:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <DWT_Init+0x28>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <DWT_Init+0x28>)
 8004436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800443a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <DWT_Init+0x2c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a05      	ldr	r2, [pc, #20]	@ (8004458 <DWT_Init+0x2c>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000edf0 	.word	0xe000edf0
 8004458:	e0001000 	.word	0xe0001000

0800445c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446c:	d10e      	bne.n	800448c <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 800446e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004476:	f001 fe19 	bl	80060ac <HAL_GPIO_ReadPin>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004480:	4b4b      	ldr	r3, [pc, #300]	@ (80045b0 <HAL_GPIO_EXTI_Callback+0x154>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <HAL_GPIO_EXTI_Callback+0x154>)
 800448a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004492:	d10d      	bne.n	80044b0 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8004494:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004498:	4846      	ldr	r0, [pc, #280]	@ (80045b4 <HAL_GPIO_EXTI_Callback+0x158>)
 800449a:	f001 fe07 	bl	80060ac <HAL_GPIO_ReadPin>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 80044a4:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 80044aa:	4b44      	ldr	r3, [pc, #272]	@ (80045bc <HAL_GPIO_EXTI_Callback+0x160>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044b6:	d10e      	bne.n	80044d6 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 80044b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044bc:	4840      	ldr	r0, [pc, #256]	@ (80045c0 <HAL_GPIO_EXTI_Callback+0x164>)
 80044be:	f001 fdf5 	bl	80060ac <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d103      	bne.n	80044d0 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 80044c8:	4b3e      	ldr	r3, [pc, #248]	@ (80045c4 <HAL_GPIO_EXTI_Callback+0x168>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 80044d0:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <HAL_GPIO_EXTI_Callback+0x168>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044dc:	d10e      	bne.n	80044fc <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 80044de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044e2:	4837      	ldr	r0, [pc, #220]	@ (80045c0 <HAL_GPIO_EXTI_Callback+0x164>)
 80044e4:	f001 fde2 	bl	80060ac <HAL_GPIO_ReadPin>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d103      	bne.n	80044f6 <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 80044ee:	4b36      	ldr	r3, [pc, #216]	@ (80045c8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 80044f6:	4b34      	ldr	r3, [pc, #208]	@ (80045c8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004502:	d102      	bne.n	800450a <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 8004504:	4b2d      	ldr	r3, [pc, #180]	@ (80045bc <HAL_GPIO_EXTI_Callback+0x160>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <HAL_GPIO_EXTI_Callback+0x170>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0;      // PC0
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e00a      	b.n	8004532 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d102      	bne.n	8004528 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e004      	b.n	8004532 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d13b      	bne.n	80045a6 <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 800452e:	2302      	movs	r3, #2
 8004530:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8004532:	4a27      	ldr	r2, [pc, #156]	@ (80045d0 <HAL_GPIO_EXTI_Callback+0x174>)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 800453e:	4925      	ldr	r1, [pc, #148]	@ (80045d4 <HAL_GPIO_EXTI_Callback+0x178>)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8004548:	4a21      	ldr	r2, [pc, #132]	@ (80045d0 <HAL_GPIO_EXTI_Callback+0x174>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e029      	b.n	80045a8 <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8004554:	4a1f      	ldr	r2, [pc, #124]	@ (80045d4 <HAL_GPIO_EXTI_Callback+0x178>)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d306      	bcc.n	8004570 <HAL_GPIO_EXTI_Callback+0x114>
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <HAL_GPIO_EXTI_Callback+0x178>)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	e006      	b.n	800457e <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004570:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <HAL_GPIO_EXTI_Callback+0x178>)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 800457c:	3b01      	subs	r3, #1
		uint32_t delta =
 800457e:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004580:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a15      	ldr	r2, [pc, #84]	@ (80045dc <HAL_GPIO_EXTI_Callback+0x180>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004592:	4913      	ldr	r1, [pc, #76]	@ (80045e0 <HAL_GPIO_EXTI_Callback+0x184>)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 800459a:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_GPIO_EXTI_Callback+0x174>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e000      	b.n	80045a8 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80045a6:	bf00      	nop
	}
}
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000b38 	.word	0x20000b38
 80045b4:	48000800 	.word	0x48000800
 80045b8:	20000b7c 	.word	0x20000b7c
 80045bc:	20000b7d 	.word	0x20000b7d
 80045c0:	48000400 	.word	0x48000400
 80045c4:	20000b81 	.word	0x20000b81
 80045c8:	20000b82 	.word	0x20000b82
 80045cc:	e0001000 	.word	0xe0001000
 80045d0:	200012ac 	.word	0x200012ac
 80045d4:	20000aa0 	.word	0x20000aa0
 80045d8:	20000200 	.word	0x20000200
 80045dc:	431bde83 	.word	0x431bde83
 80045e0:	20000aac 	.word	0x20000aac

080045e4 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80045e4:	b4b0      	push	{r4, r5, r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a08      	ldr	r2, [pc, #32]	@ (8004610 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80045f4:	4b07      	ldr	r3, [pc, #28]	@ (8004614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	1e54      	subs	r4, r2, #1
 80045fc:	f143 0500 	adc.w	r5, r3, #0
 8004600:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004602:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bcb0      	pop	{r4, r5, r7}
 800460e:	4770      	bx	lr
 8004610:	200005b4 	.word	0x200005b4
 8004614:	20000a70 	.word	0x20000a70

08004618 <micros>:
uint64_t micros() {
 8004618:	b4b0      	push	{r4, r5, r7}
 800461a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 800461c:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <micros+0x2c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	2200      	movs	r2, #0
 8004624:	4618      	mov	r0, r3
 8004626:	4611      	mov	r1, r2
 8004628:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <micros+0x30>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	1884      	adds	r4, r0, r2
 8004630:	eb41 0503 	adc.w	r5, r1, r3
 8004634:	4622      	mov	r2, r4
 8004636:	462b      	mov	r3, r5
}
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	bcb0      	pop	{r4, r5, r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200005b4 	.word	0x200005b4
 8004648:	20000a70 	.word	0x20000a70

0800464c <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 800464c:	b480      	push	{r7}
 800464e:	b08f      	sub	sp, #60	@ 0x3c
 8004650:	af00      	add	r7, sp, #0
 8004652:	ed87 0a07 	vstr	s0, [r7, #28]
 8004656:	edc7 0a06 	vstr	s1, [r7, #24]
 800465a:	ed87 1a05 	vstr	s2, [r7, #20]
 800465e:	edc7 1a04 	vstr	s3, [r7, #16]
 8004662:	ed87 2a03 	vstr	s4, [r7, #12]
 8004666:	edc7 2a02 	vstr	s5, [r7, #8]
 800466a:	ed87 3a01 	vstr	s6, [r7, #4]
 800466e:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004670:	ed97 7a06 	vldr	s14, [r7, #24]
 8004674:	edd7 7a07 	vldr	s15, [r7, #28]
 8004678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	ed93 7a00 	vldr	s14, [r3]
 8004686:	edd7 6a07 	vldr	s13, [r7, #28]
 800468a:	edd7 7a03 	vldr	s15, [r7, #12]
 800468e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	ed93 7a00 	vldr	s14, [r3]
 80046a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80046a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80046aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80046ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b6:	dd08      	ble.n	80046ca <PID_Update+0x7e>
		state->integ = outMax / kI;
 80046b8:	edd7 6a01 	vldr	s13, [r7, #4]
 80046bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80046c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	ed93 7a00 	vldr	s14, [r3]
 80046d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80046d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80046dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d508      	bpl.n	80046f8 <PID_Update+0xac>
		state->integ = outMin / kI;
 80046e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80046ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 80046f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	dd0b      	ble.n	800471e <PID_Update+0xd2>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	edd3 7a00 	vldr	s15, [r3]
 800470c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d503      	bpl.n	800471e <PID_Update+0xd2>
		state->integ = 0;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 800471e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	d50b      	bpl.n	8004744 <PID_Update+0xf8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473a:	dd03      	ble.n	8004744 <PID_Update+0xf8>
		state->integ = 0;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	ed97 7a05 	vldr	s14, [r7, #20]
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	edd3 7a01 	vldr	s15, [r3, #4]
 800475c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004760:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004764:	ed97 7a03 	vldr	s14, [r7, #12]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004770:	ed97 7a04 	vldr	s14, [r7, #16]
 8004774:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8004786:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800478a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800478e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004792:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800479a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 800479e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80047a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	dd01      	ble.n	80047b4 <PID_Update+0x168>
		out = outMax;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 80047b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80047b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80047bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d501      	bpl.n	80047ca <PID_Update+0x17e>
		out = outMin;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	ee07 3a90 	vmov	s15, r3
}
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	373c      	adds	r7, #60	@ 0x3c
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 80047e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 80047e8:	f7ff ff16 	bl	8004618 <micros>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	496b      	ldr	r1, [pc, #428]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80047f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 80047f6:	4b6b      	ldr	r3, [pc, #428]	@ (80049a4 <Revolute_PosVel_Update+0x1c4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	4a68      	ldr	r2, [pc, #416]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80047fe:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004800:	4b67      	ldr	r3, [pc, #412]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004810:	4b63      	ldr	r3, [pc, #396]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004812:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004816:	4b62      	ldr	r3, [pc, #392]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004818:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 800481a:	4b61      	ldr	r3, [pc, #388]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004820:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004828:	dd04      	ble.n	8004834 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e007      	b.n	8004844 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800483a:	da03      	bge.n	8004844 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004842:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004844:	4b56      	ldr	r3, [pc, #344]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004846:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 800484a:	4b55      	ldr	r3, [pc, #340]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800484c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004850:	ebb0 0a02 	subs.w	sl, r0, r2
 8004854:	eb61 0b03 	sbc.w	fp, r1, r3
 8004858:	4650      	mov	r0, sl
 800485a:	4659      	mov	r1, fp
 800485c:	f7fc fa6a 	bl	8000d34 <__aeabi_ul2f>
 8004860:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004864:	eddf 7a50 	vldr	s15, [pc, #320]	@ 80049a8 <Revolute_PosVel_Update+0x1c8>
 8004868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486c:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004870:	edd7 7a02 	vldr	s15, [r7, #8]
 8004874:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	f000 8087 	beq.w	800498e <Revolute_PosVel_Update+0x1ae>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800488a:	ed97 7a02 	vldr	s14, [r7, #8]
 800488e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004892:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004896:	4b42      	ldr	r3, [pc, #264]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004898:	edd3 7a07 	vldr	s15, [r3, #28]
 800489c:	ed97 7a01 	vldr	s14, [r7, #4]
 80048a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80048a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 80048ac:	4b3c      	ldr	r3, [pc, #240]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80048ae:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 80048b2:	4a3b      	ldr	r2, [pc, #236]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r
			* (2.0f * M_PI / 16384.0f);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fb fe11 	bl	80004e0 <__aeabi_f2d>
 80048be:	a336      	add	r3, pc, #216	@ (adr r3, 8004998 <Revolute_PosVel_Update+0x1b8>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fe64 	bl	8000590 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fc f918 	bl	8000b04 <__aeabi_d2f>
 80048d4:	4603      	mov	r3, r0
	Revolute_QEIdata.Velocity = Vel_counts_r
 80048d6:	4a32      	ldr	r2, [pc, #200]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80048d8:	6253      	str	r3, [r2, #36]	@ 0x24
	float alpha = 0.4f;
 80048da:	4b34      	ldr	r3, [pc, #208]	@ (80049ac <Revolute_PosVel_Update+0x1cc>)
 80048dc:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = alpha * Revolute_QEIdata.Velocity + (1 - alpha) * Revolute_QEIdata.Velocity_f;
 80048de:	4b30      	ldr	r3, [pc, #192]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80048e0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80048e4:	edd7 7a00 	vldr	s15, [r7]
 80048e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048f0:	edd7 7a00 	vldr	s15, [r7]
 80048f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048f8:	4b29      	ldr	r3, [pc, #164]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 80048fa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80048fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004906:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004908:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration =
			Revolute_QEIdata.QEIAcceleration * (2.0f * M_PI / 16384.0f);
 800490c:	4b24      	ldr	r3, [pc, #144]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fde5 	bl	80004e0 <__aeabi_f2d>
 8004916:	a320      	add	r3, pc, #128	@ (adr r3, 8004998 <Revolute_PosVel_Update+0x1b8>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb fe38 	bl	8000590 <__aeabi_dmul>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7fc f8ec 	bl	8000b04 <__aeabi_d2f>
 800492c:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration =
 800492e:	4a1c      	ldr	r2, [pc, #112]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004930:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004932:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004934:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004938:	68f9      	ldr	r1, [r7, #12]
 800493a:	17c8      	asrs	r0, r1, #31
 800493c:	460c      	mov	r4, r1
 800493e:	4605      	mov	r5, r0
 8004940:	eb12 0804 	adds.w	r8, r2, r4
 8004944:	eb43 0905 	adc.w	r9, r3, r5
 8004948:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800494a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004950:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	f7fb fdec 	bl	8000534 <__aeabi_l2d>
 800495c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004998 <Revolute_PosVel_Update+0x1b8>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fe15 	bl	8000590 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f7fc f8c9 	bl	8000b04 <__aeabi_d2f>
 8004972:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004974:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004976:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004978:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a08      	ldr	r2, [pc, #32]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 800497e:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004986:	4906      	ldr	r1, [pc, #24]	@ (80049a0 <Revolute_PosVel_Update+0x1c0>)
 8004988:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800498c:	e000      	b.n	8004990 <Revolute_PosVel_Update+0x1b0>
		return;
 800498e:	bf00      	nop
}
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004998:	54442d18 	.word	0x54442d18
 800499c:	3f3921fb 	.word	0x3f3921fb
 80049a0:	20000ac0 	.word	0x20000ac0
 80049a4:	200004e8 	.word	0x200004e8
 80049a8:	358637bd 	.word	0x358637bd
 80049ac:	3ecccccd 	.word	0x3ecccccd

080049b0 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 80049b8:	f7ff fe2e 	bl	8004618 <micros>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	494c      	ldr	r1, [pc, #304]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 80049c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80049c6:	4b4c      	ldr	r3, [pc, #304]	@ (8004af8 <Prismatic_PosVel_Update+0x148>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	4a49      	ldr	r2, [pc, #292]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 80049ce:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 80049d0:	4b48      	ldr	r3, [pc, #288]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 80049d2:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 80049d4:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 80049da:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e2:	dd04      	ble.n	80049ee <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e007      	b.n	80049fe <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80049f4:	da03      	bge.n	80049fe <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80049fc:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80049fe:	4b3d      	ldr	r3, [pc, #244]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004a04:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a0a:	ebb0 0a02 	subs.w	sl, r0, r2
 8004a0e:	eb61 0b03 	sbc.w	fp, r1, r3
 8004a12:	4650      	mov	r0, sl
 8004a14:	4659      	mov	r1, fp
 8004a16:	f7fc f98d 	bl	8000d34 <__aeabi_ul2f>
 8004a1a:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004a1e:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004afc <Prismatic_PosVel_Update+0x14c>
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	d057      	beq.n	8004ae8 <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a42:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004a4e:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a50:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a54:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004a64:	4b23      	ldr	r3, [pc, #140]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a66:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004a6a:	4a22      	ldr	r2, [pc, #136]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a74:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004b00 <Prismatic_PosVel_Update+0x150>
 8004a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a7e:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004a82:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a84:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004a88:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004b00 <Prismatic_PosVel_Update+0x150>
 8004a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004a90:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a92:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004a96:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004a98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	17c8      	asrs	r0, r1, #31
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	eb12 0804 	adds.w	r8, r2, r4
 8004aa8:	eb43 0905 	adc.w	r9, r3, r5
 8004aac:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004aae:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004ab4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7fc f942 	bl	8000d44 <__aeabi_l2f>
 8004ac0:	ee07 0a10 	vmov	s14, r0
 8004ac4:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004b00 <Prismatic_PosVel_Update+0x150>
 8004ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004acc:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004ace:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004ad2:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a07      	ldr	r2, [pc, #28]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004ad8:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004adc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ae0:	4904      	ldr	r1, [pc, #16]	@ (8004af4 <Prismatic_PosVel_Update+0x144>)
 8004ae2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004ae6:	e000      	b.n	8004aea <Prismatic_PosVel_Update+0x13a>
		return;
 8004ae8:	bf00      	nop
}
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af2:	bf00      	nop
 8004af4:	20000b00 	.word	0x20000b00
 8004af8:	2000041c 	.word	0x2000041c
 8004afc:	358637bd 	.word	0x358637bd
 8004b00:	3aa00000 	.word	0x3aa00000

08004b04 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004b10:	edd7 7a00 	vldr	s15, [r7]
 8004b14:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004be8 <Set_Motor+0xe4>
 8004b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b20:	dd01      	ble.n	8004b26 <Set_Motor+0x22>
		speed = 100.0f;
 8004b22:	4b32      	ldr	r3, [pc, #200]	@ (8004bec <Set_Motor+0xe8>)
 8004b24:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004b26:	edd7 7a00 	vldr	s15, [r7]
 8004b2a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004bf0 <Set_Motor+0xec>
 8004b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	d501      	bpl.n	8004b3c <Set_Motor+0x38>
		speed = -100.0f;
 8004b38:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf4 <Set_Motor+0xf0>)
 8004b3a:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004b3c:	edd7 7a00 	vldr	s15, [r7]
 8004b40:	eef0 7ae7 	vabs.f32	s15, s15
 8004b44:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004be8 <Set_Motor+0xe4>
 8004b48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b4c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004be8 <Set_Motor+0xe4>
 8004b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b58:	ee17 3a90 	vmov	r3, s15
 8004b5c:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11d      	bne.n	8004ba0 <Set_Motor+0x9c>
		if (speed > 0) {
 8004b64:	edd7 7a00 	vldr	s15, [r7]
 8004b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	dd05      	ble.n	8004b7e <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2120      	movs	r1, #32
 8004b76:	4820      	ldr	r0, [pc, #128]	@ (8004bf8 <Set_Motor+0xf4>)
 8004b78:	f001 fab0 	bl	80060dc <HAL_GPIO_WritePin>
 8004b7c:	e00b      	b.n	8004b96 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004b7e:	edd7 7a00 	vldr	s15, [r7]
 8004b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d504      	bpl.n	8004b96 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	2120      	movs	r1, #32
 8004b90:	4819      	ldr	r0, [pc, #100]	@ (8004bf8 <Set_Motor+0xf4>)
 8004b92:	f001 faa3 	bl	80060dc <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004b96:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <Set_Motor+0xf8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004b9e:	e01f      	b.n	8004be0 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d11c      	bne.n	8004be0 <Set_Motor+0xdc>
		if (speed > 0) {
 8004ba6:	edd7 7a00 	vldr	s15, [r7]
 8004baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	dd05      	ble.n	8004bc0 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2140      	movs	r1, #64	@ 0x40
 8004bb8:	480f      	ldr	r0, [pc, #60]	@ (8004bf8 <Set_Motor+0xf4>)
 8004bba:	f001 fa8f 	bl	80060dc <HAL_GPIO_WritePin>
 8004bbe:	e00b      	b.n	8004bd8 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004bc0:	edd7 7a00 	vldr	s15, [r7]
 8004bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bcc:	d504      	bpl.n	8004bd8 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	2140      	movs	r1, #64	@ 0x40
 8004bd2:	4809      	ldr	r0, [pc, #36]	@ (8004bf8 <Set_Motor+0xf4>)
 8004bd4:	f001 fa82 	bl	80060dc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004bd8:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <Set_Motor+0xf8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	42c80000 	.word	0x42c80000
 8004bec:	42c80000 	.word	0x42c80000
 8004bf0:	c2c80000 	.word	0xc2c80000
 8004bf4:	c2c80000 	.word	0xc2c80000
 8004bf8:	48000800 	.word	0x48000800
 8004bfc:	20000680 	.word	0x20000680

08004c00 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <Set_Servo+0x48>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <Set_Servo+0x4c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004c1e:	f7ff fcfb 	bl	8004618 <micros>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <Set_Servo+0x50>)
 8004c28:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004c2c:	e007      	b.n	8004c3e <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004c2e:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <Set_Servo+0x48>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c36:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004c38:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <Set_Servo+0x4c>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	2000074c 	.word	0x2000074c
 8004c4c:	20000b80 	.word	0x20000b80
 8004c50:	20000be8 	.word	0x20000be8

08004c54 <Reset_R>:

void Reset_R() {
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004c58:	4905      	ldr	r1, [pc, #20]	@ (8004c70 <Reset_R+0x1c>)
 8004c5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000ac0 	.word	0x20000ac0

08004c74 <Reset_P>:
void Reset_P() {
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004c78:	4905      	ldr	r1, [pc, #20]	@ (8004c90 <Reset_P+0x1c>)
 8004c7a:	4a06      	ldr	r2, [pc, #24]	@ (8004c94 <Reset_P+0x20>)
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000b00 	.word	0x20000b00
 8004c94:	fffff99a 	.word	0xfffff99a

08004c98 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8004cac:	4b16      	ldr	r3, [pc, #88]	@ (8004d08 <Get_QRIdata+0x70>)
 8004cae:	6a1a      	ldr	r2, [r3, #32]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8004cba:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <Get_QRIdata+0x70>)
 8004cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <Get_QRIdata+0x70>)
 8004cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <Get_QRIdata+0x74>)
 8004cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8004ce4:	4b09      	ldr	r3, [pc, #36]	@ (8004d0c <Get_QRIdata+0x74>)
 8004ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <Get_QRIdata+0x74>)
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000b00 	.word	0x20000b00
 8004d0c:	20000ac0 	.word	0x20000ac0

08004d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d14:	b672      	cpsid	i
}
 8004d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <Error_Handler+0x8>

08004d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d22:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d26:	4a0e      	ldr	r2, [pc, #56]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_MspInit+0x44>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004d52:	f001 fa97 	bl	8006284 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000

08004d64 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	@ 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a32      	ldr	r2, [pc, #200]	@ (8004e4c <HAL_TIM_IC_MspInit+0xe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d130      	bne.n	8004de8 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d86:	4b32      	ldr	r3, [pc, #200]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8a:	4a31      	ldr	r2, [pc, #196]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d92:	4b2f      	ldr	r3, [pc, #188]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004daa:	4b29      	ldr	r3, [pc, #164]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004db6:	2302      	movs	r3, #2
 8004db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dca:	f107 031c 	add.w	r3, r7, #28
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4820      	ldr	r0, [pc, #128]	@ (8004e54 <HAL_TIM_IC_MspInit+0xf0>)
 8004dd2:	f000 ffe9 	bl	8005da8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	2019      	movs	r0, #25
 8004ddc:	f000 fc7d 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004de0:	2019      	movs	r0, #25
 8004de2:	f000 fc94 	bl	800570e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004de6:	e02d      	b.n	8004e44 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d128      	bne.n	8004e44 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004df2:	4b17      	ldr	r3, [pc, #92]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df6:	4a16      	ldr	r2, [pc, #88]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dfe:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0a:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0e:	4a10      	ldr	r2, [pc, #64]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e16:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <HAL_TIM_IC_MspInit+0xec>)
 8004e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2302      	movs	r3, #2
 8004e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e32:	2301      	movs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e36:	f107 031c 	add.w	r3, r7, #28
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e40:	f000 ffb2 	bl	8005da8 <HAL_GPIO_Init>
}
 8004e44:	bf00      	nop
 8004e46:	3730      	adds	r7, #48	@ 0x30
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40021000 	.word	0x40021000
 8004e54:	48000800 	.word	0x48000800

08004e58 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	@ 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 031c 	add.w	r3, r7, #28
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a37      	ldr	r2, [pc, #220]	@ (8004f54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d130      	bne.n	8004edc <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e7a:	4b37      	ldr	r3, [pc, #220]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	4a36      	ldr	r2, [pc, #216]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e86:	4b34      	ldr	r3, [pc, #208]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e92:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e96:	4a30      	ldr	r2, [pc, #192]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004eaa:	2330      	movs	r3, #48	@ 0x30
 8004eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	f107 031c 	add.w	r3, r7, #28
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4825      	ldr	r0, [pc, #148]	@ (8004f5c <HAL_TIM_Encoder_MspInit+0x104>)
 8004ec6:	f000 ff6f 	bl	8005da8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2100      	movs	r1, #0
 8004ece:	201d      	movs	r0, #29
 8004ed0:	f000 fc03 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ed4:	201d      	movs	r0, #29
 8004ed6:	f000 fc1a 	bl	800570e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004eda:	e036      	b.n	8004f4a <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <HAL_TIM_Encoder_MspInit+0x108>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d131      	bne.n	8004f4a <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef2:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efe:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f02:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f0a:	4b13      	ldr	r3, [pc, #76]	@ (8004f58 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f24:	2300      	movs	r3, #0
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004f28:	230a      	movs	r3, #10
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	4619      	mov	r1, r3
 8004f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f36:	f000 ff37 	bl	8005da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	201e      	movs	r0, #30
 8004f40:	f000 fbcb 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f44:	201e      	movs	r0, #30
 8004f46:	f000 fbe2 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 8004f4a:	bf00      	nop
 8004f4c:	3730      	adds	r7, #48	@ 0x30
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	40000800 	.word	0x40000800

08004f64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <HAL_TIM_Base_MspInit+0xc0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d114      	bne.n	8004fa0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f76:	4b2c      	ldr	r3, [pc, #176]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f82:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	2032      	movs	r0, #50	@ 0x32
 8004f94:	f000 fba1 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f98:	2032      	movs	r0, #50	@ 0x32
 8004f9a:	f000 fbb8 	bl	800570e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004f9e:	e03c      	b.n	800501a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	@ (800502c <HAL_TIM_Base_MspInit+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004faa:	4b1f      	ldr	r3, [pc, #124]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fae:	4a1e      	ldr	r2, [pc, #120]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
}
 8004fc2:	e02a      	b.n	800501a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a19      	ldr	r2, [pc, #100]	@ (8005030 <HAL_TIM_Base_MspInit+0xcc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004fce:	4b16      	ldr	r3, [pc, #88]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd2:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fda:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
}
 8004fe6:	e018      	b.n	800501a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <HAL_TIM_Base_MspInit+0xd0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d113      	bne.n	800501a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8004ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <HAL_TIM_Base_MspInit+0xc4>)
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	2019      	movs	r0, #25
 8005010:	f000 fb63 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005014:	2019      	movs	r0, #25
 8005016:	f000 fb7a 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40021000 	.word	0x40021000
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400

08005038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	@ 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a23      	ldr	r2, [pc, #140]	@ (80050e4 <HAL_TIM_MspPostInit+0xac>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d11d      	bne.n	8005096 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800505a:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	4a22      	ldr	r2, [pc, #136]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005080:	2300      	movs	r3, #0
 8005082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005084:	2304      	movs	r3, #4
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4619      	mov	r1, r3
 800508e:	4817      	ldr	r0, [pc, #92]	@ (80050ec <HAL_TIM_MspPostInit+0xb4>)
 8005090:	f000 fe8a 	bl	8005da8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005094:	e021      	b.n	80050da <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <HAL_TIM_MspPostInit+0xb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d11c      	bne.n	80050da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a0:	4b11      	ldr	r3, [pc, #68]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 80050a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a4:	4a10      	ldr	r2, [pc, #64]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050ac:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <HAL_TIM_MspPostInit+0xb0>)
 80050ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80050b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	4619      	mov	r1, r3
 80050d4:	4807      	ldr	r0, [pc, #28]	@ (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 80050d6:	f000 fe67 	bl	8005da8 <HAL_GPIO_Init>
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	@ 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40021000 	.word	0x40021000
 80050ec:	48000800 	.word	0x48000800
 80050f0:	40014000 	.word	0x40014000
 80050f4:	48000400 	.word	0x48000400

080050f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b09e      	sub	sp, #120	@ 0x78
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	2254      	movs	r2, #84	@ 0x54
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f006 fcc7 	bl	800baac <memset>
  if(huart->Instance==USART2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4d      	ldr	r2, [pc, #308]	@ (8005258 <HAL_UART_MspInit+0x160>)
 8005124:	4293      	cmp	r3, r2
 8005126:	f040 8092 	bne.w	800524e <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800512a:	2302      	movs	r3, #2
 800512c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fde2 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005142:	f7ff fde5 	bl	8004d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005146:	4b45      	ldr	r3, [pc, #276]	@ (800525c <HAL_UART_MspInit+0x164>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	4a44      	ldr	r2, [pc, #272]	@ (800525c <HAL_UART_MspInit+0x164>)
 800514c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005150:	6593      	str	r3, [r2, #88]	@ 0x58
 8005152:	4b42      	ldr	r3, [pc, #264]	@ (800525c <HAL_UART_MspInit+0x164>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515e:	4b3f      	ldr	r3, [pc, #252]	@ (800525c <HAL_UART_MspInit+0x164>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005162:	4a3e      	ldr	r2, [pc, #248]	@ (800525c <HAL_UART_MspInit+0x164>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800516a:	4b3c      	ldr	r3, [pc, #240]	@ (800525c <HAL_UART_MspInit+0x164>)
 800516c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005176:	230c      	movs	r3, #12
 8005178:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517a:	2302      	movs	r3, #2
 800517c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	2300      	movs	r3, #0
 8005180:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005182:	2300      	movs	r3, #0
 8005184:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005186:	2307      	movs	r3, #7
 8005188:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800518e:	4619      	mov	r1, r3
 8005190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005194:	f000 fe08 	bl	8005da8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005198:	4b31      	ldr	r3, [pc, #196]	@ (8005260 <HAL_UART_MspInit+0x168>)
 800519a:	4a32      	ldr	r2, [pc, #200]	@ (8005264 <HAL_UART_MspInit+0x16c>)
 800519c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800519e:	4b30      	ldr	r3, [pc, #192]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051a0:	221a      	movs	r2, #26
 80051a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051b2:	2280      	movs	r2, #128	@ 0x80
 80051b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051bc:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051be:	2200      	movs	r2, #0
 80051c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80051c2:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051c8:	4b25      	ldr	r3, [pc, #148]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80051ce:	4824      	ldr	r0, [pc, #144]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051d0:	f000 fab8 	bl	8005744 <HAL_DMA_Init>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80051da:	f7ff fd99 	bl	8004d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80051e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_UART_MspInit+0x168>)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80051ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <HAL_UART_MspInit+0x170>)
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_UART_MspInit+0x174>)
 80051f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80051f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <HAL_UART_MspInit+0x170>)
 80051f4:	221b      	movs	r2, #27
 80051f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <HAL_UART_MspInit+0x170>)
 80051fa:	2210      	movs	r2, #16
 80051fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005200:	2200      	movs	r2, #0
 8005202:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005204:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005206:	2280      	movs	r2, #128	@ 0x80
 8005208:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800520a:	4b17      	ldr	r3, [pc, #92]	@ (8005268 <HAL_UART_MspInit+0x170>)
 800520c:	2200      	movs	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005210:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005212:	2200      	movs	r2, #0
 8005214:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005216:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005218:	2200      	movs	r2, #0
 800521a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800521c:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_UART_MspInit+0x170>)
 800521e:	2200      	movs	r2, #0
 8005220:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005222:	4811      	ldr	r0, [pc, #68]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005224:	f000 fa8e 	bl	8005744 <HAL_DMA_Init>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800522e:	f7ff fd6f 	bl	8004d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <HAL_UART_MspInit+0x170>)
 8005236:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005238:	4a0b      	ldr	r2, [pc, #44]	@ (8005268 <HAL_UART_MspInit+0x170>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	2026      	movs	r0, #38	@ 0x26
 8005244:	f000 fa49 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005248:	2026      	movs	r0, #38	@ 0x26
 800524a:	f000 fa60 	bl	800570e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800524e:	bf00      	nop
 8005250:	3778      	adds	r7, #120	@ 0x78
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40004400 	.word	0x40004400
 800525c:	40021000 	.word	0x40021000
 8005260:	200009b0 	.word	0x200009b0
 8005264:	40020008 	.word	0x40020008
 8005268:	20000a10 	.word	0x20000a10
 800526c:	4002001c 	.word	0x4002001c

08005270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <NMI_Handler+0x4>

08005278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <HardFault_Handler+0x4>

08005280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <MemManage_Handler+0x4>

08005288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <BusFault_Handler+0x4>

08005290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <UsageFault_Handler+0x4>

08005298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052c6:	f000 f90f 	bl	80054e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}

080052ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80052d2:	2001      	movs	r0, #1
 80052d4:	f000 ff1a 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}

080052dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80052e0:	2004      	movs	r0, #4
 80052e2:	f000 ff13 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}

080052ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80052ee:	2008      	movs	r0, #8
 80052f0:	f000 ff0c 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80052fc:	4802      	ldr	r0, [pc, #8]	@ (8005308 <DMA1_Channel1_IRQHandler+0x10>)
 80052fe:	f000 fc04 	bl	8005b0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200009b0 	.word	0x200009b0

0800530c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005310:	4802      	ldr	r0, [pc, #8]	@ (800531c <DMA1_Channel2_IRQHandler+0x10>)
 8005312:	f000 fbfa 	bl	8005b0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000a10 	.word	0x20000a10

08005320 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005324:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005328:	f000 fef0 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800532c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005330:	f000 feec 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}

08005338 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800533c:	4803      	ldr	r0, [pc, #12]	@ (800534c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800533e:	f002 fd99 	bl	8007e74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005342:	4803      	ldr	r0, [pc, #12]	@ (8005350 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005344:	f002 fd96 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005348:	bf00      	nop
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20000284 	.word	0x20000284
 8005350:	20000818 	.word	0x20000818

08005354 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005358:	4802      	ldr	r0, [pc, #8]	@ (8005364 <TIM3_IRQHandler+0x10>)
 800535a:	f002 fd8b 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2000041c 	.word	0x2000041c

08005368 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800536c:	4802      	ldr	r0, [pc, #8]	@ (8005378 <TIM4_IRQHandler+0x10>)
 800536e:	f002 fd81 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200004e8 	.word	0x200004e8

0800537c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005380:	4802      	ldr	r0, [pc, #8]	@ (800538c <USART2_IRQHandler+0x10>)
 8005382:	f004 fe33 	bl	8009fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200008e4 	.word	0x200008e4

08005390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005394:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005398:	f000 feb8 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800539c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80053a0:	f000 feb4 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80053a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80053a8:	f000 feb0 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80053ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80053b0:	f000 feac 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <TIM5_IRQHandler+0x10>)
 80053be:	f002 fd59 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200005b4 	.word	0x200005b4

080053cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <SystemInit+0x20>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	4a05      	ldr	r2, [pc, #20]	@ (80053ec <SystemInit+0x20>)
 80053d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053f0:	480d      	ldr	r0, [pc, #52]	@ (8005428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80053f4:	f7ff ffea 	bl	80053cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053f8:	480c      	ldr	r0, [pc, #48]	@ (800542c <LoopForever+0x6>)
  ldr r1, =_edata
 80053fa:	490d      	ldr	r1, [pc, #52]	@ (8005430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005434 <LoopForever+0xe>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005400:	e002      	b.n	8005408 <LoopCopyDataInit>

08005402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005406:	3304      	adds	r3, #4

08005408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800540a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800540c:	d3f9      	bcc.n	8005402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005410:	4c0a      	ldr	r4, [pc, #40]	@ (800543c <LoopForever+0x16>)
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005414:	e001      	b.n	800541a <LoopFillZerobss>

08005416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005418:	3204      	adds	r2, #4

0800541a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800541a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800541c:	d3fb      	bcc.n	8005416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800541e:	f006 fb53 	bl	800bac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005422:	f7fc fc9d 	bl	8001d60 <main>

08005426 <LoopForever>:

LoopForever:
    b LoopForever
 8005426:	e7fe      	b.n	8005426 <LoopForever>
  ldr   r0, =_estack
 8005428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800542c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005430:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8005434:	0800cdb4 	.word	0x0800cdb4
  ldr r2, =_sbss
 8005438:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 800543c:	200013ec 	.word	0x200013ec

08005440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005440:	e7fe      	b.n	8005440 <ADC1_2_IRQHandler>

08005442 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800544c:	2003      	movs	r0, #3
 800544e:	f000 f939 	bl	80056c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005452:	2000      	movs	r0, #0
 8005454:	f000 f80e 	bl	8005474 <HAL_InitTick>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	71fb      	strb	r3, [r7, #7]
 8005462:	e001      	b.n	8005468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005464:	f7ff fc5a 	bl	8004d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005468:	79fb      	ldrb	r3, [r7, #7]

}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005480:	4b16      	ldr	r3, [pc, #88]	@ (80054dc <HAL_InitTick+0x68>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d022      	beq.n	80054ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <HAL_InitTick+0x6c>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <HAL_InitTick+0x68>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005494:	fbb1 f3f3 	udiv	r3, r1, r3
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f944 	bl	800572a <HAL_SYSTICK_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10f      	bne.n	80054c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d809      	bhi.n	80054c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ae:	2200      	movs	r2, #0
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
 80054b6:	f000 f910 	bl	80056da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054ba:	4a0a      	ldr	r2, [pc, #40]	@ (80054e4 <HAL_InitTick+0x70>)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e007      	b.n	80054d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	e004      	b.n	80054d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	e001      	b.n	80054d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000208 	.word	0x20000208
 80054e0:	20000200 	.word	0x20000200
 80054e4:	20000204 	.word	0x20000204

080054e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_IncTick+0x1c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <HAL_IncTick+0x20>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a03      	ldr	r2, [pc, #12]	@ (8005504 <HAL_IncTick+0x1c>)
 80054f8:	6013      	str	r3, [r2, #0]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	200012b0 	.word	0x200012b0
 8005508:	20000208 	.word	0x20000208

0800550c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return uwTick;
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <HAL_GetTick+0x14>)
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	200012b0 	.word	0x200012b0

08005524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800554c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005556:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	60d3      	str	r3, [r2, #12]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000ed00 	.word	0xe000ed00

0800556c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005570:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <__NVIC_GetPriorityGrouping+0x18>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 0307 	and.w	r3, r3, #7
}
 800557a:	4618      	mov	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	db0b      	blt.n	80055b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	f003 021f 	and.w	r2, r3, #31
 80055a0:	4907      	ldr	r1, [pc, #28]	@ (80055c0 <__NVIC_EnableIRQ+0x38>)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	2001      	movs	r0, #1
 80055aa:	fa00 f202 	lsl.w	r2, r0, r2
 80055ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000e100 	.word	0xe000e100

080055c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	db0a      	blt.n	80055ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	490c      	ldr	r1, [pc, #48]	@ (8005610 <__NVIC_SetPriority+0x4c>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	0112      	lsls	r2, r2, #4
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	440b      	add	r3, r1
 80055e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055ec:	e00a      	b.n	8005604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	4908      	ldr	r1, [pc, #32]	@ (8005614 <__NVIC_SetPriority+0x50>)
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	3b04      	subs	r3, #4
 80055fc:	0112      	lsls	r2, r2, #4
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	440b      	add	r3, r1
 8005602:	761a      	strb	r2, [r3, #24]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	e000e100 	.word	0xe000e100
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	@ 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f1c3 0307 	rsb	r3, r3, #7
 8005632:	2b04      	cmp	r3, #4
 8005634:	bf28      	it	cs
 8005636:	2304      	movcs	r3, #4
 8005638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3304      	adds	r3, #4
 800563e:	2b06      	cmp	r3, #6
 8005640:	d902      	bls.n	8005648 <NVIC_EncodePriority+0x30>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3b03      	subs	r3, #3
 8005646:	e000      	b.n	800564a <NVIC_EncodePriority+0x32>
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800564c:	f04f 32ff 	mov.w	r2, #4294967295
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43da      	mvns	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	401a      	ands	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005660:	f04f 31ff 	mov.w	r1, #4294967295
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	43d9      	mvns	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005670:	4313      	orrs	r3, r2
         );
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	@ 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3b01      	subs	r3, #1
 800568c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005690:	d301      	bcc.n	8005696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005692:	2301      	movs	r3, #1
 8005694:	e00f      	b.n	80056b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005696:	4a0a      	ldr	r2, [pc, #40]	@ (80056c0 <SysTick_Config+0x40>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3b01      	subs	r3, #1
 800569c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800569e:	210f      	movs	r1, #15
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	f7ff ff8e 	bl	80055c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <SysTick_Config+0x40>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ae:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <SysTick_Config+0x40>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	e000e010 	.word	0xe000e010

080056c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff29 	bl	8005524 <__NVIC_SetPriorityGrouping>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	4603      	mov	r3, r0
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056e8:	f7ff ff40 	bl	800556c <__NVIC_GetPriorityGrouping>
 80056ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f7ff ff90 	bl	8005618 <NVIC_EncodePriority>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff5f 	bl	80055c4 <__NVIC_SetPriority>
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff33 	bl	8005588 <__NVIC_EnableIRQ>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffa4 	bl	8005680 <SysTick_Config>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e08d      	b.n	8005872 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	4b47      	ldr	r3, [pc, #284]	@ (800587c <HAL_DMA_Init+0x138>)
 800575e:	429a      	cmp	r2, r3
 8005760:	d80f      	bhi.n	8005782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	4b45      	ldr	r3, [pc, #276]	@ (8005880 <HAL_DMA_Init+0x13c>)
 800576a:	4413      	add	r3, r2
 800576c:	4a45      	ldr	r2, [pc, #276]	@ (8005884 <HAL_DMA_Init+0x140>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	009a      	lsls	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a42      	ldr	r2, [pc, #264]	@ (8005888 <HAL_DMA_Init+0x144>)
 800577e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005780:	e00e      	b.n	80057a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	4b40      	ldr	r3, [pc, #256]	@ (800588c <HAL_DMA_Init+0x148>)
 800578a:	4413      	add	r3, r2
 800578c:	4a3d      	ldr	r2, [pc, #244]	@ (8005884 <HAL_DMA_Init+0x140>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	009a      	lsls	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a3c      	ldr	r2, [pc, #240]	@ (8005890 <HAL_DMA_Init+0x14c>)
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa76 	bl	8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005800:	d102      	bne.n	8005808 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800581c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_DMA_Init+0x104>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d80c      	bhi.n	8005848 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa96 	bl	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	e008      	b.n	800585a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40020407 	.word	0x40020407
 8005880:	bffdfff8 	.word	0xbffdfff8
 8005884:	cccccccd 	.word	0xcccccccd
 8005888:	40020000 	.word	0x40020000
 800588c:	bffdfbf8 	.word	0xbffdfbf8
 8005890:	40020400 	.word	0x40020400

08005894 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Start_IT+0x20>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e066      	b.n	8005982 <HAL_DMA_Start_IT+0xee>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d155      	bne.n	8005974 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f9bb 	bl	8005c68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 020e 	orr.w	r2, r2, #14
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e00f      	b.n	800592c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 020a 	orr.w	r2, r2, #10
 800592a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005948:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005960:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e005      	b.n	8005980 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800597c:	2302      	movs	r3, #2
 800597e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d005      	beq.n	80059ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	e037      	b.n	8005a1e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 020e 	bic.w	r2, r2, #14
 80059bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f003 021f 	and.w	r2, r3, #31
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	2101      	movs	r1, #1
 80059ec:	fa01 f202 	lsl.w	r2, r1, r2
 80059f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a12:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a1c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d00d      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	e047      	b.n	8005b00 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 020e 	bic.w	r2, r2, #14
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	f003 021f 	and.w	r2, r3, #31
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	2101      	movs	r1, #1
 8005aae:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005abc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ade:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    }
  }
  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d026      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x7a>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d021      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f003 021f 	and.w	r2, r3, #31
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d071      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b82:	e06c      	b.n	8005c5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02e      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d029      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 020a 	bic.w	r2, r2, #10
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bcc:	f003 021f 	and.w	r2, r3, #31
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d038      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005bf4:	e033      	b.n	8005c5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2208      	movs	r2, #8
 8005c00:	409a      	lsls	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02a      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d025      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 020e 	bic.w	r2, r2, #14
 8005c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c28:	f003 021f 	and.w	r2, r3, #31
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f202 	lsl.w	r2, r1, r2
 8005c36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
}
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	f003 021f 	and.w	r2, r3, #31
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d108      	bne.n	8005cc8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cc6:	e007      	b.n	8005cd8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d802      	bhi.n	8005cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005cf8:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e001      	b.n	8005d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005cfe:	4b15      	ldr	r3, [pc, #84]	@ (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005d00:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	3b08      	subs	r3, #8
 8005d0e:	4a12      	ldr	r2, [pc, #72]	@ (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	009a      	lsls	r2, r3, #2
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2201      	movs	r2, #1
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40020407 	.word	0x40020407
 8005d50:	40020800 	.word	0x40020800
 8005d54:	40020820 	.word	0x40020820
 8005d58:	cccccccd 	.word	0xcccccccd
 8005d5c:	40020880 	.word	0x40020880

08005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a08      	ldr	r2, [pc, #32]	@ (8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d82:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	1000823f 	.word	0x1000823f
 8005da4:	40020940 	.word	0x40020940

08005da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005db6:	e15a      	b.n	800606e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 814c 	beq.w	8006068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d005      	beq.n	8005de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d130      	bne.n	8005e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e1e:	2201      	movs	r2, #1
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43db      	mvns	r3, r3
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	f003 0201 	and.w	r2, r3, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d017      	beq.n	8005e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	2203      	movs	r2, #3
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d123      	bne.n	8005eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	08da      	lsrs	r2, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3208      	adds	r2, #8
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	08da      	lsrs	r2, r3, #3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3208      	adds	r2, #8
 8005ed4:	6939      	ldr	r1, [r7, #16]
 8005ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 0203 	and.w	r2, r3, #3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80a6 	beq.w	8006068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800608c <HAL_GPIO_Init+0x2e4>)
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f20:	4a5a      	ldr	r2, [pc, #360]	@ (800608c <HAL_GPIO_Init+0x2e4>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f28:	4b58      	ldr	r3, [pc, #352]	@ (800608c <HAL_GPIO_Init+0x2e4>)
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f34:	4a56      	ldr	r2, [pc, #344]	@ (8006090 <HAL_GPIO_Init+0x2e8>)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	220f      	movs	r2, #15
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43db      	mvns	r3, r3
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f5e:	d01f      	beq.n	8005fa0 <HAL_GPIO_Init+0x1f8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a4c      	ldr	r2, [pc, #304]	@ (8006094 <HAL_GPIO_Init+0x2ec>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d019      	beq.n	8005f9c <HAL_GPIO_Init+0x1f4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a4b      	ldr	r2, [pc, #300]	@ (8006098 <HAL_GPIO_Init+0x2f0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <HAL_GPIO_Init+0x1f0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a4a      	ldr	r2, [pc, #296]	@ (800609c <HAL_GPIO_Init+0x2f4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00d      	beq.n	8005f94 <HAL_GPIO_Init+0x1ec>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a49      	ldr	r2, [pc, #292]	@ (80060a0 <HAL_GPIO_Init+0x2f8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <HAL_GPIO_Init+0x1e8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a48      	ldr	r2, [pc, #288]	@ (80060a4 <HAL_GPIO_Init+0x2fc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d101      	bne.n	8005f8c <HAL_GPIO_Init+0x1e4>
 8005f88:	2305      	movs	r3, #5
 8005f8a:	e00a      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	e008      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005f90:	2304      	movs	r3, #4
 8005f92:	e006      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005f94:	2303      	movs	r3, #3
 8005f96:	e004      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e002      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <HAL_GPIO_Init+0x1fa>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	f002 0203 	and.w	r2, r2, #3
 8005fa8:	0092      	lsls	r2, r2, #2
 8005faa:	4093      	lsls	r3, r2
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fb2:	4937      	ldr	r1, [pc, #220]	@ (8006090 <HAL_GPIO_Init+0x2e8>)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	089b      	lsrs	r3, r3, #2
 8005fb8:	3302      	adds	r3, #2
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fc0:	4b39      	ldr	r3, [pc, #228]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fea:	4b2f      	ldr	r3, [pc, #188]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800600e:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006014:	4b24      	ldr	r3, [pc, #144]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	43db      	mvns	r3, r3
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006038:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800603e:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	43db      	mvns	r3, r3
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006062:	4a11      	ldr	r2, [pc, #68]	@ (80060a8 <HAL_GPIO_Init+0x300>)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	f47f ae9d 	bne.w	8005db8 <HAL_GPIO_Init+0x10>
  }
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40021000 	.word	0x40021000
 8006090:	40010000 	.word	0x40010000
 8006094:	48000400 	.word	0x48000400
 8006098:	48000800 	.word	0x48000800
 800609c:	48000c00 	.word	0x48000c00
 80060a0:	48001000 	.word	0x48001000
 80060a4:	48001400 	.word	0x48001400
 80060a8:	40010400 	.word	0x40010400

080060ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	887b      	ldrh	r3, [r7, #2]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e001      	b.n	80060ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
 80060e8:	4613      	mov	r3, r2
 80060ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060ec:	787b      	ldrb	r3, [r7, #1]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f8:	e002      	b.n	8006100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006116:	4b08      	ldr	r3, [pc, #32]	@ (8006138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	4013      	ands	r3, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006122:	4a05      	ldr	r2, [pc, #20]	@ (8006138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006128:	88fb      	ldrh	r3, [r7, #6]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe f996 	bl	800445c <HAL_GPIO_EXTI_Callback>
  }
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40010400 	.word	0x40010400

0800613c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d141      	bne.n	80061ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800614a:	4b4b      	ldr	r3, [pc, #300]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006156:	d131      	bne.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006158:	4b47      	ldr	r3, [pc, #284]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615e:	4a46      	ldr	r2, [pc, #280]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006168:	4b43      	ldr	r3, [pc, #268]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006170:	4a41      	ldr	r2, [pc, #260]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006176:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006178:	4b40      	ldr	r3, [pc, #256]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2232      	movs	r2, #50	@ 0x32
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	4a3f      	ldr	r2, [pc, #252]	@ (8006280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006184:	fba2 2303 	umull	r2, r3, r2, r3
 8006188:	0c9b      	lsrs	r3, r3, #18
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800618e:	e002      	b.n	8006196 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006196:	4b38      	ldr	r3, [pc, #224]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a2:	d102      	bne.n	80061aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f2      	bne.n	8006190 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061aa:	4b33      	ldr	r3, [pc, #204]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d158      	bne.n	800626a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e057      	b.n	800626c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061cc:	e04d      	b.n	800626a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d4:	d141      	bne.n	800625a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061d6:	4b28      	ldr	r3, [pc, #160]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e2:	d131      	bne.n	8006248 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061e4:	4b24      	ldr	r3, [pc, #144]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061ea:	4a23      	ldr	r2, [pc, #140]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f4:	4b20      	ldr	r3, [pc, #128]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006204:	4b1d      	ldr	r3, [pc, #116]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2232      	movs	r2, #50	@ 0x32
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	0c9b      	lsrs	r3, r3, #18
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800621a:	e002      	b.n	8006222 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006222:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622e:	d102      	bne.n	8006236 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f2      	bne.n	800621c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006236:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006242:	d112      	bne.n	800626a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e011      	b.n	800626c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624e:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006258:	e007      	b.n	800626a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800625a:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006262:	4a05      	ldr	r2, [pc, #20]	@ (8006278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006268:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40007000 	.word	0x40007000
 800627c:	20000200 	.word	0x20000200
 8006280:	431bde83 	.word	0x431bde83

08006284 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006288:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a04      	ldr	r2, [pc, #16]	@ (80062a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800628e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006292:	6093      	str	r3, [r2, #8]
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40007000 	.word	0x40007000

080062a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e2fe      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d075      	beq.n	80063ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c2:	4b97      	ldr	r3, [pc, #604]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062cc:	4b94      	ldr	r3, [pc, #592]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b0c      	cmp	r3, #12
 80062da:	d102      	bne.n	80062e2 <HAL_RCC_OscConfig+0x3e>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d002      	beq.n	80062e8 <HAL_RCC_OscConfig+0x44>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d10b      	bne.n	8006300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e8:	4b8d      	ldr	r3, [pc, #564]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d05b      	beq.n	80063ac <HAL_RCC_OscConfig+0x108>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d157      	bne.n	80063ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e2d9      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d106      	bne.n	8006318 <HAL_RCC_OscConfig+0x74>
 800630a:	4b85      	ldr	r3, [pc, #532]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a84      	ldr	r2, [pc, #528]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e01d      	b.n	8006354 <HAL_RCC_OscConfig+0xb0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0x98>
 8006322:	4b7f      	ldr	r3, [pc, #508]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a7e      	ldr	r2, [pc, #504]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b7c      	ldr	r3, [pc, #496]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a7b      	ldr	r2, [pc, #492]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e00b      	b.n	8006354 <HAL_RCC_OscConfig+0xb0>
 800633c:	4b78      	ldr	r3, [pc, #480]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a77      	ldr	r2, [pc, #476]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4b75      	ldr	r3, [pc, #468]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a74      	ldr	r2, [pc, #464]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800634e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d013      	beq.n	8006384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7ff f8d6 	bl	800550c <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006364:	f7ff f8d2 	bl	800550c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e29e      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006376:	4b6a      	ldr	r3, [pc, #424]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0xc0>
 8006382:	e014      	b.n	80063ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7ff f8c2 	bl	800550c <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800638c:	f7ff f8be 	bl	800550c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e28a      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800639e:	4b60      	ldr	r3, [pc, #384]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0xe8>
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d075      	beq.n	80064a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ba:	4b59      	ldr	r3, [pc, #356]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c4:	4b56      	ldr	r3, [pc, #344]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d102      	bne.n	80063da <HAL_RCC_OscConfig+0x136>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_OscConfig+0x13c>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d11f      	bne.n	8006420 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e0:	4b4f      	ldr	r3, [pc, #316]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_OscConfig+0x154>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e25d      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f8:	4b49      	ldr	r3, [pc, #292]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	061b      	lsls	r3, r3, #24
 8006406:	4946      	ldr	r1, [pc, #280]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800640c:	4b45      	ldr	r3, [pc, #276]	@ (8006524 <HAL_RCC_OscConfig+0x280>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f82f 	bl	8005474 <HAL_InitTick>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d043      	beq.n	80064a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e249      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d023      	beq.n	8006470 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b3d      	ldr	r3, [pc, #244]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3c      	ldr	r2, [pc, #240]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800642e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7ff f86a 	bl	800550c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800643c:	f7ff f866 	bl	800550c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e232      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800644e:	4b34      	ldr	r3, [pc, #208]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645a:	4b31      	ldr	r3, [pc, #196]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	492d      	ldr	r1, [pc, #180]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	604b      	str	r3, [r1, #4]
 800646e:	e01a      	b.n	80064a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006470:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2a      	ldr	r2, [pc, #168]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800647a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7ff f846 	bl	800550c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006484:	f7ff f842 	bl	800550c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e20e      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006496:	4b22      	ldr	r3, [pc, #136]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x1e0>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d041      	beq.n	8006536 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ba:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80064bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ca:	f7ff f81f 	bl	800550c <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d2:	f7ff f81b 	bl	800550c <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e1e7      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80064e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0ef      	beq.n	80064d2 <HAL_RCC_OscConfig+0x22e>
 80064f2:	e020      	b.n	8006536 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064fa:	4a09      	ldr	r2, [pc, #36]	@ (8006520 <HAL_RCC_OscConfig+0x27c>)
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7ff f802 	bl	800550c <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800650a:	e00d      	b.n	8006528 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650c:	f7fe fffe 	bl	800550c <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d906      	bls.n	8006528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e1ca      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
 800651e:	bf00      	nop
 8006520:	40021000 	.word	0x40021000
 8006524:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006528:	4b8c      	ldr	r3, [pc, #560]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800652a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1ea      	bne.n	800650c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80a6 	beq.w	8006690 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006544:	2300      	movs	r3, #0
 8006546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006548:	4b84      	ldr	r3, [pc, #528]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800654a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_OscConfig+0x2b4>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_RCC_OscConfig+0x2b6>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	4b7f      	ldr	r3, [pc, #508]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	4a7e      	ldr	r2, [pc, #504]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006568:	6593      	str	r3, [r2, #88]	@ 0x58
 800656a:	4b7c      	ldr	r3, [pc, #496]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006576:	2301      	movs	r3, #1
 8006578:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657a:	4b79      	ldr	r3, [pc, #484]	@ (8006760 <HAL_RCC_OscConfig+0x4bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d118      	bne.n	80065b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006586:	4b76      	ldr	r3, [pc, #472]	@ (8006760 <HAL_RCC_OscConfig+0x4bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a75      	ldr	r2, [pc, #468]	@ (8006760 <HAL_RCC_OscConfig+0x4bc>)
 800658c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006592:	f7fe ffbb 	bl	800550c <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659a:	f7fe ffb7 	bl	800550c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e183      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006760 <HAL_RCC_OscConfig+0x4bc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d108      	bne.n	80065d2 <HAL_RCC_OscConfig+0x32e>
 80065c0:	4b66      	ldr	r3, [pc, #408]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	4a65      	ldr	r2, [pc, #404]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065d0:	e024      	b.n	800661c <HAL_RCC_OscConfig+0x378>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d110      	bne.n	80065fc <HAL_RCC_OscConfig+0x358>
 80065da:	4b60      	ldr	r3, [pc, #384]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e0:	4a5e      	ldr	r2, [pc, #376]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ea:	4b5c      	ldr	r3, [pc, #368]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f0:	4a5a      	ldr	r2, [pc, #360]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065fa:	e00f      	b.n	800661c <HAL_RCC_OscConfig+0x378>
 80065fc:	4b57      	ldr	r3, [pc, #348]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006602:	4a56      	ldr	r2, [pc, #344]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800660c:	4b53      	ldr	r3, [pc, #332]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006612:	4a52      	ldr	r2, [pc, #328]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006614:	f023 0304 	bic.w	r3, r3, #4
 8006618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d016      	beq.n	8006652 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006624:	f7fe ff72 	bl	800550c <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662a:	e00a      	b.n	8006642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662c:	f7fe ff6e 	bl	800550c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e138      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006642:	4b46      	ldr	r3, [pc, #280]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ed      	beq.n	800662c <HAL_RCC_OscConfig+0x388>
 8006650:	e015      	b.n	800667e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006652:	f7fe ff5b 	bl	800550c <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fe ff57 	bl	800550c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e121      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006670:	4b3a      	ldr	r3, [pc, #232]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ed      	bne.n	800665a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800667e:	7ffb      	ldrb	r3, [r7, #31]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d105      	bne.n	8006690 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006684:	4b35      	ldr	r3, [pc, #212]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	4a34      	ldr	r2, [pc, #208]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800668a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800668e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d03c      	beq.n	8006716 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01c      	beq.n	80066de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066a4:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80066a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066aa:	4a2c      	ldr	r2, [pc, #176]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fe ff2a 	bl	800550c <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066bc:	f7fe ff26 	bl	800550c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0f2      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ce:	4b23      	ldr	r3, [pc, #140]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80066d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ef      	beq.n	80066bc <HAL_RCC_OscConfig+0x418>
 80066dc:	e01b      	b.n	8006716 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066de:	4b1f      	ldr	r3, [pc, #124]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80066e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066e4:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ee:	f7fe ff0d 	bl	800550c <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f6:	f7fe ff09 	bl	800550c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0d5      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006708:	4b14      	ldr	r3, [pc, #80]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800670a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1ef      	bne.n	80066f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80c9 	beq.w	80068b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b0c      	cmp	r3, #12
 800672a:	f000 8083 	beq.w	8006834 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d15e      	bne.n	80067f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006736:	4b09      	ldr	r3, [pc, #36]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a08      	ldr	r2, [pc, #32]	@ (800675c <HAL_RCC_OscConfig+0x4b8>)
 800673c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fe fee3 	bl	800550c <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006748:	e00c      	b.n	8006764 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fe fedf 	bl	800550c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d905      	bls.n	8006764 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e0ab      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
 800675c:	40021000 	.word	0x40021000
 8006760:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006764:	4b55      	ldr	r3, [pc, #340]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ec      	bne.n	800674a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006770:	4b52      	ldr	r3, [pc, #328]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	4b52      	ldr	r3, [pc, #328]	@ (80068c0 <HAL_RCC_OscConfig+0x61c>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6a11      	ldr	r1, [r2, #32]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006780:	3a01      	subs	r2, #1
 8006782:	0112      	lsls	r2, r2, #4
 8006784:	4311      	orrs	r1, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800678a:	0212      	lsls	r2, r2, #8
 800678c:	4311      	orrs	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006792:	0852      	lsrs	r2, r2, #1
 8006794:	3a01      	subs	r2, #1
 8006796:	0552      	lsls	r2, r2, #21
 8006798:	4311      	orrs	r1, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800679e:	0852      	lsrs	r2, r2, #1
 80067a0:	3a01      	subs	r2, #1
 80067a2:	0652      	lsls	r2, r2, #25
 80067a4:	4311      	orrs	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067aa:	06d2      	lsls	r2, r2, #27
 80067ac:	430a      	orrs	r2, r1
 80067ae:	4943      	ldr	r1, [pc, #268]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b4:	4b41      	ldr	r3, [pc, #260]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a40      	ldr	r2, [pc, #256]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067c0:	4b3e      	ldr	r3, [pc, #248]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a3d      	ldr	r2, [pc, #244]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fe fe9e 	bl	800550c <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fe fe9a 	bl	800550c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e066      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e6:	4b35      	ldr	r3, [pc, #212]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x530>
 80067f2:	e05e      	b.n	80068b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a30      	ldr	r2, [pc, #192]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 80067fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006800:	f7fe fe84 	bl	800550c <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006808:	f7fe fe80 	bl	800550c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e04c      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681a:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006826:	4b25      	ldr	r3, [pc, #148]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	4924      	ldr	r1, [pc, #144]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 800682c:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <HAL_RCC_OscConfig+0x620>)
 800682e:	4013      	ands	r3, r2
 8006830:	60cb      	str	r3, [r1, #12]
 8006832:	e03e      	b.n	80068b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e039      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006840:	4b1e      	ldr	r3, [pc, #120]	@ (80068bc <HAL_RCC_OscConfig+0x618>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f003 0203 	and.w	r2, r3, #3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	429a      	cmp	r2, r3
 8006852:	d12c      	bne.n	80068ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	3b01      	subs	r3, #1
 8006860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d123      	bne.n	80068ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006872:	429a      	cmp	r2, r3
 8006874:	d11b      	bne.n	80068ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d113      	bne.n	80068ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d109      	bne.n	80068ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	3b01      	subs	r3, #1
 80068a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40021000 	.word	0x40021000
 80068c0:	019f800c 	.word	0x019f800c
 80068c4:	feeefffc 	.word	0xfeeefffc

080068c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e11e      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068e0:	4b91      	ldr	r3, [pc, #580]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d910      	bls.n	8006910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f023 020f 	bic.w	r2, r3, #15
 80068f6:	498c      	ldr	r1, [pc, #560]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b8a      	ldr	r3, [pc, #552]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e106      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d073      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d129      	bne.n	8006978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006924:	4b81      	ldr	r3, [pc, #516]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0f4      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006934:	f000 f99e 	bl	8006c74 <RCC_GetSysClockFreqFromPLLSource>
 8006938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b30 <HAL_RCC_ClockConfig+0x268>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d93f      	bls.n	80069c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006942:	4b7a      	ldr	r3, [pc, #488]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006956:	2b00      	cmp	r3, #0
 8006958:	d033      	beq.n	80069c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800695e:	2b00      	cmp	r3, #0
 8006960:	d12f      	bne.n	80069c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006962:	4b72      	ldr	r3, [pc, #456]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800696a:	4a70      	ldr	r2, [pc, #448]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 800696c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006972:	2380      	movs	r3, #128	@ 0x80
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e024      	b.n	80069c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d107      	bne.n	8006990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006980:	4b6a      	ldr	r3, [pc, #424]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0c6      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006990:	4b66      	ldr	r3, [pc, #408]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0be      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80069a0:	f000 f8ce 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4a61      	ldr	r2, [pc, #388]	@ (8006b30 <HAL_RCC_ClockConfig+0x268>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d909      	bls.n	80069c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069ae:	4b5f      	ldr	r3, [pc, #380]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b6:	4a5d      	ldr	r2, [pc, #372]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 80069b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069be:	2380      	movs	r3, #128	@ 0x80
 80069c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c2:	4b5a      	ldr	r3, [pc, #360]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 0203 	bic.w	r2, r3, #3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4957      	ldr	r1, [pc, #348]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d4:	f7fe fd9a 	bl	800550c <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069dc:	f7fe fd96 	bl	800550c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e095      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	4b4e      	ldr	r3, [pc, #312]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 020c 	and.w	r2, r3, #12
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d1eb      	bne.n	80069dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d023      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a1c:	4b43      	ldr	r3, [pc, #268]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4a42      	ldr	r2, [pc, #264]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a34:	4b3d      	ldr	r3, [pc, #244]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a44:	4b39      	ldr	r3, [pc, #228]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4936      	ldr	r1, [pc, #216]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b80      	cmp	r3, #128	@ 0x80
 8006a5c:	d105      	bne.n	8006a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a5e:	4b33      	ldr	r3, [pc, #204]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	4a32      	ldr	r2, [pc, #200]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006a64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d21d      	bcs.n	8006ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a78:	4b2b      	ldr	r3, [pc, #172]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 020f 	bic.w	r2, r3, #15
 8006a80:	4929      	ldr	r1, [pc, #164]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a88:	f7fe fd40 	bl	800550c <HAL_GetTick>
 8006a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8e:	e00a      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a90:	f7fe fd3c 	bl	800550c <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e03b      	b.n	8006b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b20      	ldr	r3, [pc, #128]	@ (8006b28 <HAL_RCC_ClockConfig+0x260>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d1ed      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4917      	ldr	r1, [pc, #92]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ade:	4b13      	ldr	r3, [pc, #76]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	490f      	ldr	r1, [pc, #60]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006af2:	f000 f825 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <HAL_RCC_ClockConfig+0x264>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	490c      	ldr	r1, [pc, #48]	@ (8006b34 <HAL_RCC_ClockConfig+0x26c>)
 8006b04:	5ccb      	ldrb	r3, [r1, r3]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b38 <HAL_RCC_ClockConfig+0x270>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b12:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <HAL_RCC_ClockConfig+0x274>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fcac 	bl	8005474 <HAL_InitTick>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40022000 	.word	0x40022000
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	04c4b400 	.word	0x04c4b400
 8006b34:	0800c95c 	.word	0x0800c95c
 8006b38:	20000200 	.word	0x20000200
 8006b3c:	20000204 	.word	0x20000204

08006b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b46:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d102      	bne.n	8006b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b52:	4b2a      	ldr	r3, [pc, #168]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	e047      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b58:	4b27      	ldr	r3, [pc, #156]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d102      	bne.n	8006b6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b64:	4b26      	ldr	r3, [pc, #152]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e03e      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b6a:	4b23      	ldr	r3, [pc, #140]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d136      	bne.n	8006be4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b76:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d10c      	bne.n	8006bae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b94:	4a1a      	ldr	r2, [pc, #104]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	4a16      	ldr	r2, [pc, #88]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9e:	68d2      	ldr	r2, [r2, #12]
 8006ba0:	0a12      	lsrs	r2, r2, #8
 8006ba2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	617b      	str	r3, [r7, #20]
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bae:	4a13      	ldr	r2, [pc, #76]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	4a10      	ldr	r2, [pc, #64]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bb8:	68d2      	ldr	r2, [r2, #12]
 8006bba:	0a12      	lsrs	r2, r2, #8
 8006bbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
      break;
 8006bc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	0e5b      	lsrs	r3, r3, #25
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	e001      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006be8:	693b      	ldr	r3, [r7, #16]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	00f42400 	.word	0x00f42400
 8006c00:	016e3600 	.word	0x016e3600

08006c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c08:	4b03      	ldr	r3, [pc, #12]	@ (8006c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20000200 	.word	0x20000200

08006c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c20:	f7ff fff0 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	0a1b      	lsrs	r3, r3, #8
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	4904      	ldr	r1, [pc, #16]	@ (8006c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000
 8006c44:	0800c96c 	.word	0x0800c96c

08006c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c4c:	f7ff ffda 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	0adb      	lsrs	r3, r3, #11
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	4904      	ldr	r1, [pc, #16]	@ (8006c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	0800c96c 	.word	0x0800c96c

08006c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d10c      	bne.n	8006cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c98:	4a17      	ldr	r2, [pc, #92]	@ (8006cf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	4a14      	ldr	r2, [pc, #80]	@ (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ca2:	68d2      	ldr	r2, [r2, #12]
 8006ca4:	0a12      	lsrs	r2, r2, #8
 8006ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	617b      	str	r3, [r7, #20]
    break;
 8006cb0:	e00c      	b.n	8006ccc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cb2:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	4a0e      	ldr	r2, [pc, #56]	@ (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	0a12      	lsrs	r2, r2, #8
 8006cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]
    break;
 8006cca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ccc:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	0e5b      	lsrs	r3, r3, #25
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ce6:	687b      	ldr	r3, [r7, #4]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	016e3600 	.word	0x016e3600
 8006cfc:	00f42400 	.word	0x00f42400

08006d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d08:	2300      	movs	r3, #0
 8006d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8098 	beq.w	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d22:	4b43      	ldr	r3, [pc, #268]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10d      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d2e:	4b40      	ldr	r3, [pc, #256]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d32:	4a3f      	ldr	r2, [pc, #252]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	60bb      	str	r3, [r7, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d46:	2301      	movs	r3, #1
 8006d48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a39      	ldr	r2, [pc, #228]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d56:	f7fe fbd9 	bl	800550c <HAL_GetTick>
 8006d5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d5c:	e009      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7fe fbd5 	bl	800550c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d902      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	74fb      	strb	r3, [r7, #19]
        break;
 8006d70:	e005      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d72:	4b30      	ldr	r3, [pc, #192]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0ef      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d7e:	7cfb      	ldrb	r3, [r7, #19]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d159      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d84:	4b2a      	ldr	r3, [pc, #168]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01e      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d019      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006da0:	4b23      	ldr	r3, [pc, #140]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dac:	4b20      	ldr	r3, [pc, #128]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dcc:	4a18      	ldr	r2, [pc, #96]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d016      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dde:	f7fe fb95 	bl	800550c <HAL_GetTick>
 8006de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de4:	e00b      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fe fb91 	bl	800550c <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d902      	bls.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8006dfc:	e006      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0ec      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	4903      	ldr	r1, [pc, #12]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e2a:	7cfb      	ldrb	r3, [r7, #19]
 8006e2c:	74bb      	strb	r3, [r7, #18]
 8006e2e:	e005      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	7cfb      	ldrb	r3, [r7, #19]
 8006e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e3c:	7c7b      	ldrb	r3, [r7, #17]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d105      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e42:	4ba7      	ldr	r3, [pc, #668]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e46:	4aa6      	ldr	r2, [pc, #664]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e5a:	4ba1      	ldr	r3, [pc, #644]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f023 0203 	bic.w	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	499d      	ldr	r1, [pc, #628]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e7c:	4b98      	ldr	r3, [pc, #608]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e82:	f023 020c 	bic.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	4995      	ldr	r1, [pc, #596]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e9e:	4b90      	ldr	r3, [pc, #576]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	498c      	ldr	r1, [pc, #560]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ec0:	4b87      	ldr	r3, [pc, #540]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4984      	ldr	r1, [pc, #528]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	497b      	ldr	r1, [pc, #492]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f04:	4b76      	ldr	r3, [pc, #472]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	4973      	ldr	r1, [pc, #460]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f26:	4b6e      	ldr	r3, [pc, #440]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	496a      	ldr	r1, [pc, #424]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f48:	4b65      	ldr	r3, [pc, #404]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4962      	ldr	r1, [pc, #392]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	4959      	ldr	r1, [pc, #356]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f8c:	4b54      	ldr	r3, [pc, #336]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f92:	f023 0203 	bic.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	4951      	ldr	r1, [pc, #324]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fae:	4b4c      	ldr	r3, [pc, #304]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	4948      	ldr	r1, [pc, #288]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d015      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd0:	4b43      	ldr	r3, [pc, #268]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	4940      	ldr	r1, [pc, #256]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fee:	d105      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007008:	4b35      	ldr	r3, [pc, #212]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007016:	4932      	ldr	r1, [pc, #200]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007026:	d105      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007028:	4b2d      	ldr	r3, [pc, #180]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a2c      	ldr	r2, [pc, #176]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007032:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007040:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	4924      	ldr	r1, [pc, #144]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800705e:	d105      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007060:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007078:	4b19      	ldr	r3, [pc, #100]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	4916      	ldr	r1, [pc, #88]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007098:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a10      	ldr	r2, [pc, #64]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d019      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	4908      	ldr	r1, [pc, #32]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ce:	d109      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a02      	ldr	r2, [pc, #8]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070da:	60d3      	str	r3, [r2, #12]
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070de:	bf00      	nop
 80070e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070f0:	4b29      	ldr	r3, [pc, #164]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	4926      	ldr	r1, [pc, #152]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007110:	4b21      	ldr	r3, [pc, #132]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a20      	ldr	r2, [pc, #128]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007128:	4b1b      	ldr	r3, [pc, #108]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007136:	4918      	ldr	r1, [pc, #96]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007148:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800714e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007152:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d015      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007160:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716e:	490a      	ldr	r1, [pc, #40]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800717e:	d105      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800718a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800718c:	7cbb      	ldrb	r3, [r7, #18]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40021000 	.word	0x40021000

0800719c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e054      	b.n	8007258 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d111      	bne.n	80071de <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f002 fb3c 	bl	8009840 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a23      	ldr	r2, [pc, #140]	@ (8007260 <HAL_TIM_Base_Init+0xc4>)
 80071d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f001 fc7b 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	08004f65 	.word	0x08004f65

08007264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	d001      	beq.n	800727c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e04c      	b.n	8007316 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a26      	ldr	r2, [pc, #152]	@ (8007324 <HAL_TIM_Base_Start+0xc0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d022      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007296:	d01d      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a22      	ldr	r2, [pc, #136]	@ (8007328 <HAL_TIM_Base_Start+0xc4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d018      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a21      	ldr	r2, [pc, #132]	@ (800732c <HAL_TIM_Base_Start+0xc8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007330 <HAL_TIM_Base_Start+0xcc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007334 <HAL_TIM_Base_Start+0xd0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <HAL_TIM_Base_Start+0xd4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_TIM_Base_Start+0x70>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1b      	ldr	r2, [pc, #108]	@ (800733c <HAL_TIM_Base_Start+0xd8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d115      	bne.n	8007300 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	4b19      	ldr	r3, [pc, #100]	@ (8007340 <HAL_TIM_Base_Start+0xdc>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b06      	cmp	r3, #6
 80072e4:	d015      	beq.n	8007312 <HAL_TIM_Base_Start+0xae>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d011      	beq.n	8007312 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fe:	e008      	b.n	8007312 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e000      	b.n	8007314 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40014000 	.word	0x40014000
 800733c:	40015000 	.word	0x40015000
 8007340:	00010007 	.word	0x00010007

08007344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d001      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e054      	b.n	8007406 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a26      	ldr	r2, [pc, #152]	@ (8007414 <HAL_TIM_Base_Start_IT+0xd0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007386:	d01d      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a22      	ldr	r2, [pc, #136]	@ (8007418 <HAL_TIM_Base_Start_IT+0xd4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a21      	ldr	r2, [pc, #132]	@ (800741c <HAL_TIM_Base_Start_IT+0xd8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007420 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007424 <HAL_TIM_Base_Start_IT+0xe0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007428 <HAL_TIM_Base_Start_IT+0xe4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <HAL_TIM_Base_Start_IT+0xe8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d115      	bne.n	80073f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	4b19      	ldr	r3, [pc, #100]	@ (8007430 <HAL_TIM_Base_Start_IT+0xec>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b06      	cmp	r3, #6
 80073d4:	d015      	beq.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073dc:	d011      	beq.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ee:	e008      	b.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e000      	b.n	8007404 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40013400 	.word	0x40013400
 8007428:	40014000 	.word	0x40014000
 800742c:	40015000 	.word	0x40015000
 8007430:	00010007 	.word	0x00010007

08007434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e054      	b.n	80074f0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d111      	bne.n	8007476 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f002 f9f0 	bl	8009840 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a23      	ldr	r2, [pc, #140]	@ (80074f8 <HAL_TIM_PWM_Init+0xc4>)
 800746c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f001 fb2f 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	080074fd 	.word	0x080074fd

080074fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <HAL_TIM_PWM_Start+0x24>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e03c      	b.n	80075ae <HAL_TIM_PWM_Start+0x9e>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b04      	cmp	r3, #4
 8007538:	d109      	bne.n	800754e <HAL_TIM_PWM_Start+0x3e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e02f      	b.n	80075ae <HAL_TIM_PWM_Start+0x9e>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d109      	bne.n	8007568 <HAL_TIM_PWM_Start+0x58>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e022      	b.n	80075ae <HAL_TIM_PWM_Start+0x9e>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b0c      	cmp	r3, #12
 800756c:	d109      	bne.n	8007582 <HAL_TIM_PWM_Start+0x72>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b01      	cmp	r3, #1
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
 8007580:	e015      	b.n	80075ae <HAL_TIM_PWM_Start+0x9e>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b10      	cmp	r3, #16
 8007586:	d109      	bne.n	800759c <HAL_TIM_PWM_Start+0x8c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e008      	b.n	80075ae <HAL_TIM_PWM_Start+0x9e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e0a6      	b.n	8007704 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_PWM_Start+0xb6>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075c4:	e023      	b.n	800760e <HAL_TIM_PWM_Start+0xfe>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_PWM_Start+0xc6>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d4:	e01b      	b.n	800760e <HAL_TIM_PWM_Start+0xfe>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_PWM_Start+0xd6>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e4:	e013      	b.n	800760e <HAL_TIM_PWM_Start+0xfe>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b0c      	cmp	r3, #12
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_PWM_Start+0xe6>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075f4:	e00b      	b.n	800760e <HAL_TIM_PWM_Start+0xfe>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0xf6>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007604:	e003      	b.n	800760e <HAL_TIM_PWM_Start+0xfe>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f002 f8ec 	bl	80097f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a3a      	ldr	r2, [pc, #232]	@ (800770c <HAL_TIM_PWM_Start+0x1fc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d018      	beq.n	8007658 <HAL_TIM_PWM_Start+0x148>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a39      	ldr	r2, [pc, #228]	@ (8007710 <HAL_TIM_PWM_Start+0x200>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <HAL_TIM_PWM_Start+0x148>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a37      	ldr	r2, [pc, #220]	@ (8007714 <HAL_TIM_PWM_Start+0x204>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_PWM_Start+0x148>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a36      	ldr	r2, [pc, #216]	@ (8007718 <HAL_TIM_PWM_Start+0x208>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_TIM_PWM_Start+0x148>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a34      	ldr	r2, [pc, #208]	@ (800771c <HAL_TIM_PWM_Start+0x20c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_TIM_PWM_Start+0x148>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a33      	ldr	r2, [pc, #204]	@ (8007720 <HAL_TIM_PWM_Start+0x210>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d101      	bne.n	800765c <HAL_TIM_PWM_Start+0x14c>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <HAL_TIM_PWM_Start+0x14e>
 800765c:	2300      	movs	r3, #0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007670:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a25      	ldr	r2, [pc, #148]	@ (800770c <HAL_TIM_PWM_Start+0x1fc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d022      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007684:	d01d      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a26      	ldr	r2, [pc, #152]	@ (8007724 <HAL_TIM_PWM_Start+0x214>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d018      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a24      	ldr	r2, [pc, #144]	@ (8007728 <HAL_TIM_PWM_Start+0x218>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a23      	ldr	r2, [pc, #140]	@ (800772c <HAL_TIM_PWM_Start+0x21c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a19      	ldr	r2, [pc, #100]	@ (8007710 <HAL_TIM_PWM_Start+0x200>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a18      	ldr	r2, [pc, #96]	@ (8007714 <HAL_TIM_PWM_Start+0x204>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x1b2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a18      	ldr	r2, [pc, #96]	@ (8007720 <HAL_TIM_PWM_Start+0x210>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d115      	bne.n	80076ee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	4b19      	ldr	r3, [pc, #100]	@ (8007730 <HAL_TIM_PWM_Start+0x220>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b06      	cmp	r3, #6
 80076d2:	d015      	beq.n	8007700 <HAL_TIM_PWM_Start+0x1f0>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076da:	d011      	beq.n	8007700 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ec:	e008      	b.n	8007700 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e000      	b.n	8007702 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40012c00 	.word	0x40012c00
 8007710:	40013400 	.word	0x40013400
 8007714:	40014000 	.word	0x40014000
 8007718:	40014400 	.word	0x40014400
 800771c:	40014800 	.word	0x40014800
 8007720:	40015000 	.word	0x40015000
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	00010007 	.word	0x00010007

08007734 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e054      	b.n	80077f0 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d111      	bne.n	8007776 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f002 f870 	bl	8009840 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007764:	2b00      	cmp	r3, #0
 8007766:	d102      	bne.n	800776e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a23      	ldr	r2, [pc, #140]	@ (80077f8 <HAL_TIM_IC_Init+0xc4>)
 800776c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2202      	movs	r2, #2
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f001 f9af 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	08004d65 	.word	0x08004d65

080077fc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start+0x1a>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e023      	b.n	800785e <HAL_TIM_IC_Start+0x62>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b04      	cmp	r3, #4
 800781a:	d104      	bne.n	8007826 <HAL_TIM_IC_Start+0x2a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e01b      	b.n	800785e <HAL_TIM_IC_Start+0x62>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d104      	bne.n	8007836 <HAL_TIM_IC_Start+0x3a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007832:	b2db      	uxtb	r3, r3
 8007834:	e013      	b.n	800785e <HAL_TIM_IC_Start+0x62>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d104      	bne.n	8007846 <HAL_TIM_IC_Start+0x4a>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007842:	b2db      	uxtb	r3, r3
 8007844:	e00b      	b.n	800785e <HAL_TIM_IC_Start+0x62>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b10      	cmp	r3, #16
 800784a:	d104      	bne.n	8007856 <HAL_TIM_IC_Start+0x5a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007852:	b2db      	uxtb	r3, r3
 8007854:	e003      	b.n	800785e <HAL_TIM_IC_Start+0x62>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800785c:	b2db      	uxtb	r3, r3
 800785e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <HAL_TIM_IC_Start+0x74>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e013      	b.n	8007898 <HAL_TIM_IC_Start+0x9c>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b04      	cmp	r3, #4
 8007874:	d104      	bne.n	8007880 <HAL_TIM_IC_Start+0x84>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e00b      	b.n	8007898 <HAL_TIM_IC_Start+0x9c>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b08      	cmp	r3, #8
 8007884:	d104      	bne.n	8007890 <HAL_TIM_IC_Start+0x94>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e003      	b.n	8007898 <HAL_TIM_IC_Start+0x9c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007896:	b2db      	uxtb	r3, r3
 8007898:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d102      	bne.n	80078a6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d001      	beq.n	80078aa <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e097      	b.n	80079da <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_IC_Start+0xbe>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078b8:	e023      	b.n	8007902 <HAL_TIM_IC_Start+0x106>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start+0xce>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078c8:	e01b      	b.n	8007902 <HAL_TIM_IC_Start+0x106>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start+0xde>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078d8:	e013      	b.n	8007902 <HAL_TIM_IC_Start+0x106>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d104      	bne.n	80078ea <HAL_TIM_IC_Start+0xee>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078e8:	e00b      	b.n	8007902 <HAL_TIM_IC_Start+0x106>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_IC_Start+0xfe>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078f8:	e003      	b.n	8007902 <HAL_TIM_IC_Start+0x106>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <HAL_TIM_IC_Start+0x116>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007910:	e013      	b.n	800793a <HAL_TIM_IC_Start+0x13e>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start+0x126>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007920:	e00b      	b.n	800793a <HAL_TIM_IC_Start+0x13e>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d104      	bne.n	8007932 <HAL_TIM_IC_Start+0x136>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007930:	e003      	b.n	800793a <HAL_TIM_IC_Start+0x13e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2201      	movs	r2, #1
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f001 ff56 	bl	80097f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a25      	ldr	r2, [pc, #148]	@ (80079e4 <HAL_TIM_IC_Start+0x1e8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d022      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795a:	d01d      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a21      	ldr	r2, [pc, #132]	@ (80079e8 <HAL_TIM_IC_Start+0x1ec>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d018      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a20      	ldr	r2, [pc, #128]	@ (80079ec <HAL_TIM_IC_Start+0x1f0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1e      	ldr	r2, [pc, #120]	@ (80079f0 <HAL_TIM_IC_Start+0x1f4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00e      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1d      	ldr	r2, [pc, #116]	@ (80079f4 <HAL_TIM_IC_Start+0x1f8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d009      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a1b      	ldr	r2, [pc, #108]	@ (80079f8 <HAL_TIM_IC_Start+0x1fc>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_TIM_IC_Start+0x19c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1a      	ldr	r2, [pc, #104]	@ (80079fc <HAL_TIM_IC_Start+0x200>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d115      	bne.n	80079c4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	4b18      	ldr	r3, [pc, #96]	@ (8007a00 <HAL_TIM_IC_Start+0x204>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b06      	cmp	r3, #6
 80079a8:	d015      	beq.n	80079d6 <HAL_TIM_IC_Start+0x1da>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b0:	d011      	beq.n	80079d6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c2:	e008      	b.n	80079d6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0201 	orr.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e000      	b.n	80079d8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40013400 	.word	0x40013400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40015000 	.word	0x40015000
 8007a00:	00010007 	.word	0x00010007

08007a04 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e04c      	b.n	8007ab2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 ff07 	bl	8009840 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <HAL_TIM_OnePulse_Init+0xb8>)
 8007a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f001 f846 	bl	8008aec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0208 	bic.w	r2, r2, #8
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	08007ac1 	.word	0x08007ac1

08007ac0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ae4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007aec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007af4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007afc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d108      	bne.n	8007b16 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d105      	bne.n	8007b16 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b0a:	7b7b      	ldrb	r3, [r7, #13]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d102      	bne.n	8007b16 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b10:	7b3b      	ldrb	r3, [r7, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d001      	beq.n	8007b1a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e059      	b.n	8007bce <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0202 	orr.w	r2, r2, #2
 8007b48:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0204 	orr.w	r2, r2, #4
 8007b58:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fe46 	bl	80097f4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	2104      	movs	r1, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fe3f 	bl	80097f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a17      	ldr	r2, [pc, #92]	@ (8007bd8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a15      	ldr	r2, [pc, #84]	@ (8007bdc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a14      	ldr	r2, [pc, #80]	@ (8007be0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a12      	ldr	r2, [pc, #72]	@ (8007be4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a11      	ldr	r2, [pc, #68]	@ (8007be8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a0f      	ldr	r2, [pc, #60]	@ (8007bec <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40013400 	.word	0x40013400
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400
 8007be8:	40014800 	.word	0x40014800
 8007bec:	40015000 	.word	0x40015000

08007bf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e0a2      	b.n	8007d4a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d111      	bne.n	8007c34 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fe11 	bl	8009840 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d102      	bne.n	8007c2c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a4a      	ldr	r2, [pc, #296]	@ (8007d54 <HAL_TIM_Encoder_Init+0x164>)
 8007c2a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f000 ff46 	bl	8008aec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007ca6:	f023 030c 	bic.w	r3, r3, #12
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	011a      	lsls	r2, r3, #4
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	031b      	lsls	r3, r3, #12
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007ce4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007cec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	08004e59 	.word	0x08004e59

08007d58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d110      	bne.n	8007daa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d102      	bne.n	8007d94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d001      	beq.n	8007d98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e069      	b.n	8007e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da8:	e031      	b.n	8007e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d110      	bne.n	8007dd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007db6:	7b3b      	ldrb	r3, [r7, #12]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d001      	beq.n	8007dc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e055      	b.n	8007e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd0:	e01d      	b.n	8007e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d108      	bne.n	8007dea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d105      	bne.n	8007dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007de4:	7b3b      	ldrb	r3, [r7, #12]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e03e      	b.n	8007e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_TIM_Encoder_Start+0xc4>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d008      	beq.n	8007e2c <HAL_TIM_Encoder_Start+0xd4>
 8007e1a:	e00f      	b.n	8007e3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fce5 	bl	80097f4 <TIM_CCxChannelCmd>
      break;
 8007e2a:	e016      	b.n	8007e5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	2104      	movs	r1, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 fcdd 	bl	80097f4 <TIM_CCxChannelCmd>
      break;
 8007e3a:	e00e      	b.n	8007e5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2201      	movs	r2, #1
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fcd5 	bl	80097f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	2104      	movs	r1, #4
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 fcce 	bl	80097f4 <TIM_CCxChannelCmd>
      break;
 8007e58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0201 	orr.w	r2, r2, #1
 8007e68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d026      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d021      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0202 	mvn.w	r2, #2
 8007ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
 8007ec8:	e009      	b.n	8007ede <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d026      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d021      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0204 	mvn.w	r2, #4
 8007f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
 8007f20:	e009      	b.n	8007f36 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d026      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d021      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0208 	mvn.w	r2, #8
 8007f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	e009      	b.n	8007f8e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d026      	beq.n	8007fec <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d021      	beq.n	8007fec <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0210 	mvn.w	r2, #16
 8007fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
 8007fd0:	e009      	b.n	8007fe6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00e      	beq.n	8008014 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d009      	beq.n	8008014 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0201 	mvn.w	r2, #1
 8008008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00e      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800803a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b00      	cmp	r3, #0
 8008058:	d009      	beq.n	800806e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800808a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f06f 0220 	mvn.w	r2, #32
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00e      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800812a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008180:	2302      	movs	r3, #2
 8008182:	e088      	b.n	8008296 <HAL_TIM_IC_ConfigChannel+0x130>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11b      	bne.n	80081ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80081a2:	f001 f961 	bl	8009468 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699a      	ldr	r2, [r3, #24]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 020c 	bic.w	r2, r2, #12
 80081b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6999      	ldr	r1, [r3, #24]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	619a      	str	r2, [r3, #24]
 80081c8:	e060      	b.n	800828c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d11c      	bne.n	800820a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80081e0:	f001 f9e5 	bl	80095ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80081f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6999      	ldr	r1, [r3, #24]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	619a      	str	r2, [r3, #24]
 8008208:	e040      	b.n	800828c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d11b      	bne.n	8008248 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008220:	f001 fa32 	bl	8009688 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69da      	ldr	r2, [r3, #28]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 020c 	bic.w	r2, r2, #12
 8008232:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69d9      	ldr	r1, [r3, #28]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	61da      	str	r2, [r3, #28]
 8008246:	e021      	b.n	800828c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b0c      	cmp	r3, #12
 800824c:	d11c      	bne.n	8008288 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800825e:	f001 fa4f 	bl	8009700 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008270:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	021a      	lsls	r2, r3, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	61da      	str	r2, [r3, #28]
 8008286:	e001      	b.n	800828c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e0ff      	b.n	80084be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b14      	cmp	r3, #20
 80082ca:	f200 80f0 	bhi.w	80084ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082ce:	a201      	add	r2, pc, #4	@ (adr r2, 80082d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	08008329 	.word	0x08008329
 80082d8:	080084af 	.word	0x080084af
 80082dc:	080084af 	.word	0x080084af
 80082e0:	080084af 	.word	0x080084af
 80082e4:	08008369 	.word	0x08008369
 80082e8:	080084af 	.word	0x080084af
 80082ec:	080084af 	.word	0x080084af
 80082f0:	080084af 	.word	0x080084af
 80082f4:	080083ab 	.word	0x080083ab
 80082f8:	080084af 	.word	0x080084af
 80082fc:	080084af 	.word	0x080084af
 8008300:	080084af 	.word	0x080084af
 8008304:	080083eb 	.word	0x080083eb
 8008308:	080084af 	.word	0x080084af
 800830c:	080084af 	.word	0x080084af
 8008310:	080084af 	.word	0x080084af
 8008314:	0800842d 	.word	0x0800842d
 8008318:	080084af 	.word	0x080084af
 800831c:	080084af 	.word	0x080084af
 8008320:	080084af 	.word	0x080084af
 8008324:	0800846d 	.word	0x0800846d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fc90 	bl	8008c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0208 	orr.w	r2, r2, #8
 8008342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0204 	bic.w	r2, r2, #4
 8008352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6999      	ldr	r1, [r3, #24]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691a      	ldr	r2, [r3, #16]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	619a      	str	r2, [r3, #24]
      break;
 8008366:	e0a5      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fd0a 	bl	8008d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6999      	ldr	r1, [r3, #24]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	021a      	lsls	r2, r3, #8
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	619a      	str	r2, [r3, #24]
      break;
 80083a8:	e084      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fd7d 	bl	8008eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0208 	orr.w	r2, r2, #8
 80083c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0204 	bic.w	r2, r2, #4
 80083d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69d9      	ldr	r1, [r3, #28]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	61da      	str	r2, [r3, #28]
      break;
 80083e8:	e064      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fdef 	bl	8008fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69da      	ldr	r2, [r3, #28]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69d9      	ldr	r1, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	021a      	lsls	r2, r3, #8
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	61da      	str	r2, [r3, #28]
      break;
 800842a:	e043      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fe62 	bl	80090fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0208 	orr.w	r2, r2, #8
 8008446:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0204 	bic.w	r2, r2, #4
 8008456:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800846a:	e023      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 feac 	bl	80091d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008486:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008496:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	021a      	lsls	r2, r3, #8
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084ac:	e002      	b.n	80084b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
      break;
 80084b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop

080084c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_TIM_ConfigClockSource+0x1c>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e0f6      	b.n	80086d2 <HAL_TIM_ConfigClockSource+0x20a>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008502:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800850e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a6f      	ldr	r2, [pc, #444]	@ (80086dc <HAL_TIM_ConfigClockSource+0x214>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f000 80c1 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008524:	4a6d      	ldr	r2, [pc, #436]	@ (80086dc <HAL_TIM_ConfigClockSource+0x214>)
 8008526:	4293      	cmp	r3, r2
 8008528:	f200 80c6 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800852c:	4a6c      	ldr	r2, [pc, #432]	@ (80086e0 <HAL_TIM_ConfigClockSource+0x218>)
 800852e:	4293      	cmp	r3, r2
 8008530:	f000 80b9 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008534:	4a6a      	ldr	r2, [pc, #424]	@ (80086e0 <HAL_TIM_ConfigClockSource+0x218>)
 8008536:	4293      	cmp	r3, r2
 8008538:	f200 80be 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800853c:	4a69      	ldr	r2, [pc, #420]	@ (80086e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	f000 80b1 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008544:	4a67      	ldr	r2, [pc, #412]	@ (80086e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	f200 80b6 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800854c:	4a66      	ldr	r2, [pc, #408]	@ (80086e8 <HAL_TIM_ConfigClockSource+0x220>)
 800854e:	4293      	cmp	r3, r2
 8008550:	f000 80a9 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008554:	4a64      	ldr	r2, [pc, #400]	@ (80086e8 <HAL_TIM_ConfigClockSource+0x220>)
 8008556:	4293      	cmp	r3, r2
 8008558:	f200 80ae 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800855c:	4a63      	ldr	r2, [pc, #396]	@ (80086ec <HAL_TIM_ConfigClockSource+0x224>)
 800855e:	4293      	cmp	r3, r2
 8008560:	f000 80a1 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008564:	4a61      	ldr	r2, [pc, #388]	@ (80086ec <HAL_TIM_ConfigClockSource+0x224>)
 8008566:	4293      	cmp	r3, r2
 8008568:	f200 80a6 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800856c:	4a60      	ldr	r2, [pc, #384]	@ (80086f0 <HAL_TIM_ConfigClockSource+0x228>)
 800856e:	4293      	cmp	r3, r2
 8008570:	f000 8099 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008574:	4a5e      	ldr	r2, [pc, #376]	@ (80086f0 <HAL_TIM_ConfigClockSource+0x228>)
 8008576:	4293      	cmp	r3, r2
 8008578:	f200 809e 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800857c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008580:	f000 8091 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008584:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008588:	f200 8096 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800858c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008590:	f000 8089 	beq.w	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 8008594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008598:	f200 808e 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800859c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a0:	d03e      	beq.n	8008620 <HAL_TIM_ConfigClockSource+0x158>
 80085a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a6:	f200 8087 	bhi.w	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ae:	f000 8086 	beq.w	80086be <HAL_TIM_ConfigClockSource+0x1f6>
 80085b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b6:	d87f      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085b8:	2b70      	cmp	r3, #112	@ 0x70
 80085ba:	d01a      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x12a>
 80085bc:	2b70      	cmp	r3, #112	@ 0x70
 80085be:	d87b      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085c0:	2b60      	cmp	r3, #96	@ 0x60
 80085c2:	d050      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x19e>
 80085c4:	2b60      	cmp	r3, #96	@ 0x60
 80085c6:	d877      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085c8:	2b50      	cmp	r3, #80	@ 0x50
 80085ca:	d03c      	beq.n	8008646 <HAL_TIM_ConfigClockSource+0x17e>
 80085cc:	2b50      	cmp	r3, #80	@ 0x50
 80085ce:	d873      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085d0:	2b40      	cmp	r3, #64	@ 0x40
 80085d2:	d058      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x1be>
 80085d4:	2b40      	cmp	r3, #64	@ 0x40
 80085d6:	d86f      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085d8:	2b30      	cmp	r3, #48	@ 0x30
 80085da:	d064      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 80085dc:	2b30      	cmp	r3, #48	@ 0x30
 80085de:	d86b      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d060      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d867      	bhi.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d05c      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	d05a      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x1de>
 80085f0:	e062      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008602:	f001 f8d7 	bl	80097b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	609a      	str	r2, [r3, #8]
      break;
 800861e:	e04f      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008630:	f001 f8c0 	bl	80097b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008642:	609a      	str	r2, [r3, #8]
      break;
 8008644:	e03c      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008652:	461a      	mov	r2, r3
 8008654:	f000 ff7c 	bl	8009550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2150      	movs	r1, #80	@ 0x50
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f88b 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 8008664:	e02c      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008672:	461a      	mov	r2, r3
 8008674:	f000 ffd8 	bl	8009628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2160      	movs	r1, #96	@ 0x60
 800867e:	4618      	mov	r0, r3
 8008680:	f001 f87b 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 8008684:	e01c      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	461a      	mov	r2, r3
 8008694:	f000 ff5c 	bl	8009550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2140      	movs	r1, #64	@ 0x40
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 f86b 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 80086a4:	e00c      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f001 f862 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 80086b6:	e003      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
      break;
 80086bc:	e000      	b.n	80086c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80086be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	00100070 	.word	0x00100070
 80086e0:	00100060 	.word	0x00100060
 80086e4:	00100050 	.word	0x00100050
 80086e8:	00100040 	.word	0x00100040
 80086ec:	00100030 	.word	0x00100030
 80086f0:	00100020 	.word	0x00100020

080086f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008708:	2302      	movs	r3, #2
 800870a:	e031      	b.n	8008770 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fdc2 	bl	80092a8 <TIM_SlaveTimer_SetConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e018      	b.n	8008770 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800874c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800875c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	460b      	mov	r3, r1
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e14a      	b.n	8008ade <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	f040 80dd 	bne.w	8008a10 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	2b1f      	cmp	r3, #31
 800885a:	f200 80d6 	bhi.w	8008a0a <HAL_TIM_RegisterCallback+0x1de>
 800885e:	a201      	add	r2, pc, #4	@ (adr r2, 8008864 <HAL_TIM_RegisterCallback+0x38>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	080088e5 	.word	0x080088e5
 8008868:	080088ed 	.word	0x080088ed
 800886c:	080088f5 	.word	0x080088f5
 8008870:	080088fd 	.word	0x080088fd
 8008874:	08008905 	.word	0x08008905
 8008878:	0800890d 	.word	0x0800890d
 800887c:	08008915 	.word	0x08008915
 8008880:	0800891d 	.word	0x0800891d
 8008884:	08008925 	.word	0x08008925
 8008888:	0800892d 	.word	0x0800892d
 800888c:	08008935 	.word	0x08008935
 8008890:	0800893d 	.word	0x0800893d
 8008894:	08008945 	.word	0x08008945
 8008898:	0800894d 	.word	0x0800894d
 800889c:	08008957 	.word	0x08008957
 80088a0:	08008961 	.word	0x08008961
 80088a4:	0800896b 	.word	0x0800896b
 80088a8:	08008975 	.word	0x08008975
 80088ac:	0800897f 	.word	0x0800897f
 80088b0:	08008989 	.word	0x08008989
 80088b4:	08008993 	.word	0x08008993
 80088b8:	0800899d 	.word	0x0800899d
 80088bc:	080089a7 	.word	0x080089a7
 80088c0:	080089b1 	.word	0x080089b1
 80088c4:	080089bb 	.word	0x080089bb
 80088c8:	080089c5 	.word	0x080089c5
 80088cc:	080089cf 	.word	0x080089cf
 80088d0:	080089d9 	.word	0x080089d9
 80088d4:	080089e3 	.word	0x080089e3
 80088d8:	080089ed 	.word	0x080089ed
 80088dc:	080089f7 	.word	0x080089f7
 80088e0:	08008a01 	.word	0x08008a01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80088ea:	e0f7      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80088f2:	e0f3      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80088fa:	e0ef      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008902:	e0eb      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800890a:	e0e7      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008912:	e0e3      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800891a:	e0df      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008922:	e0db      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800892a:	e0d7      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008932:	e0d3      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800893a:	e0cf      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008942:	e0cb      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800894a:	e0c7      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008954:	e0c2      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800895e:	e0bd      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008968:	e0b8      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008972:	e0b3      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800897c:	e0ae      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008986:	e0a9      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008990:	e0a4      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800899a:	e09f      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80089a4:	e09a      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80089ae:	e095      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80089b8:	e090      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80089c2:	e08b      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80089cc:	e086      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80089d6:	e081      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80089e0:	e07c      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80089ea:	e077      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80089f4:	e072      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80089fe:	e06d      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a08:	e068      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
        break;
 8008a0e:	e065      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d15d      	bne.n	8008ad8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	2b0d      	cmp	r3, #13
 8008a20:	d857      	bhi.n	8008ad2 <HAL_TIM_RegisterCallback+0x2a6>
 8008a22:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <HAL_TIM_RegisterCallback+0x1fc>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a61 	.word	0x08008a61
 8008a2c:	08008a69 	.word	0x08008a69
 8008a30:	08008a71 	.word	0x08008a71
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a81 	.word	0x08008a81
 8008a3c:	08008a89 	.word	0x08008a89
 8008a40:	08008a91 	.word	0x08008a91
 8008a44:	08008a99 	.word	0x08008a99
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008aa9 	.word	0x08008aa9
 8008a50:	08008ab1 	.word	0x08008ab1
 8008a54:	08008ab9 	.word	0x08008ab9
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008ac9 	.word	0x08008ac9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008a66:	e039      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008a6e:	e035      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a76:	e031      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008a7e:	e02d      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008a86:	e029      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008a8e:	e025      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008a96:	e021      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008a9e:	e01d      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008aa6:	e019      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008aae:	e015      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008ab6:	e011      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008abe:	e00d      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008ac6:	e009      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008ad0:	e004      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	75fb      	strb	r3, [r7, #23]
        break;
 8008ad6:	e001      	b.n	8008adc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a4c      	ldr	r2, [pc, #304]	@ (8008c30 <TIM_Base_SetConfig+0x144>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d017      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0a:	d013      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a49      	ldr	r2, [pc, #292]	@ (8008c34 <TIM_Base_SetConfig+0x148>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00f      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a48      	ldr	r2, [pc, #288]	@ (8008c38 <TIM_Base_SetConfig+0x14c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d00b      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a47      	ldr	r2, [pc, #284]	@ (8008c3c <TIM_Base_SetConfig+0x150>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d007      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a46      	ldr	r2, [pc, #280]	@ (8008c40 <TIM_Base_SetConfig+0x154>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d003      	beq.n	8008b34 <TIM_Base_SetConfig+0x48>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a45      	ldr	r2, [pc, #276]	@ (8008c44 <TIM_Base_SetConfig+0x158>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d108      	bne.n	8008b46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a39      	ldr	r2, [pc, #228]	@ (8008c30 <TIM_Base_SetConfig+0x144>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d023      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b54:	d01f      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a36      	ldr	r2, [pc, #216]	@ (8008c34 <TIM_Base_SetConfig+0x148>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d01b      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a35      	ldr	r2, [pc, #212]	@ (8008c38 <TIM_Base_SetConfig+0x14c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d017      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a34      	ldr	r2, [pc, #208]	@ (8008c3c <TIM_Base_SetConfig+0x150>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a33      	ldr	r2, [pc, #204]	@ (8008c40 <TIM_Base_SetConfig+0x154>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00f      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a33      	ldr	r2, [pc, #204]	@ (8008c48 <TIM_Base_SetConfig+0x15c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00b      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a32      	ldr	r2, [pc, #200]	@ (8008c4c <TIM_Base_SetConfig+0x160>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a31      	ldr	r2, [pc, #196]	@ (8008c50 <TIM_Base_SetConfig+0x164>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_Base_SetConfig+0xaa>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2c      	ldr	r2, [pc, #176]	@ (8008c44 <TIM_Base_SetConfig+0x158>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d108      	bne.n	8008ba8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a18      	ldr	r2, [pc, #96]	@ (8008c30 <TIM_Base_SetConfig+0x144>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d013      	beq.n	8008bfc <TIM_Base_SetConfig+0x110>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8008c40 <TIM_Base_SetConfig+0x154>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00f      	beq.n	8008bfc <TIM_Base_SetConfig+0x110>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <TIM_Base_SetConfig+0x15c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00b      	beq.n	8008bfc <TIM_Base_SetConfig+0x110>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <TIM_Base_SetConfig+0x160>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d007      	beq.n	8008bfc <TIM_Base_SetConfig+0x110>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <TIM_Base_SetConfig+0x164>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_Base_SetConfig+0x110>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a13      	ldr	r2, [pc, #76]	@ (8008c44 <TIM_Base_SetConfig+0x158>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d103      	bne.n	8008c04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d105      	bne.n	8008c22 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	611a      	str	r2, [r3, #16]
  }
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40015000 	.word	0x40015000
 8008c48:	40014000 	.word	0x40014000
 8008c4c:	40014400 	.word	0x40014400
 8008c50:	40014800 	.word	0x40014800

08008c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f023 0201 	bic.w	r2, r3, #1
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f023 0302 	bic.w	r3, r3, #2
 8008ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a30      	ldr	r2, [pc, #192]	@ (8008d70 <TIM_OC1_SetConfig+0x11c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <TIM_OC1_SetConfig+0x88>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8008d74 <TIM_OC1_SetConfig+0x120>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00f      	beq.n	8008cdc <TIM_OC1_SetConfig+0x88>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8008d78 <TIM_OC1_SetConfig+0x124>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <TIM_OC1_SetConfig+0x88>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8008d7c <TIM_OC1_SetConfig+0x128>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d007      	beq.n	8008cdc <TIM_OC1_SetConfig+0x88>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a2c      	ldr	r2, [pc, #176]	@ (8008d80 <TIM_OC1_SetConfig+0x12c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d003      	beq.n	8008cdc <TIM_OC1_SetConfig+0x88>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d84 <TIM_OC1_SetConfig+0x130>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d10c      	bne.n	8008cf6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f023 0308 	bic.w	r3, r3, #8
 8008ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f023 0304 	bic.w	r3, r3, #4
 8008cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d70 <TIM_OC1_SetConfig+0x11c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <TIM_OC1_SetConfig+0xd2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1c      	ldr	r2, [pc, #112]	@ (8008d74 <TIM_OC1_SetConfig+0x120>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00f      	beq.n	8008d26 <TIM_OC1_SetConfig+0xd2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1b      	ldr	r2, [pc, #108]	@ (8008d78 <TIM_OC1_SetConfig+0x124>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00b      	beq.n	8008d26 <TIM_OC1_SetConfig+0xd2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1a      	ldr	r2, [pc, #104]	@ (8008d7c <TIM_OC1_SetConfig+0x128>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d007      	beq.n	8008d26 <TIM_OC1_SetConfig+0xd2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a19      	ldr	r2, [pc, #100]	@ (8008d80 <TIM_OC1_SetConfig+0x12c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d003      	beq.n	8008d26 <TIM_OC1_SetConfig+0xd2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a18      	ldr	r2, [pc, #96]	@ (8008d84 <TIM_OC1_SetConfig+0x130>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d111      	bne.n	8008d4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	621a      	str	r2, [r3, #32]
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400
 8008d80:	40014800 	.word	0x40014800
 8008d84:	40015000 	.word	0x40015000

08008d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f023 0210 	bic.w	r2, r3, #16
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f023 0320 	bic.w	r3, r3, #32
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e98 <TIM_OC2_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_OC2_SetConfig+0x74>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2b      	ldr	r2, [pc, #172]	@ (8008e9c <TIM_OC2_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC2_SetConfig+0x74>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea0 <TIM_OC2_SetConfig+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10d      	bne.n	8008e18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e98 <TIM_OC2_SetConfig+0x110>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d013      	beq.n	8008e48 <TIM_OC2_SetConfig+0xc0>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1e      	ldr	r2, [pc, #120]	@ (8008e9c <TIM_OC2_SetConfig+0x114>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00f      	beq.n	8008e48 <TIM_OC2_SetConfig+0xc0>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea4 <TIM_OC2_SetConfig+0x11c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00b      	beq.n	8008e48 <TIM_OC2_SetConfig+0xc0>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <TIM_OC2_SetConfig+0x120>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d007      	beq.n	8008e48 <TIM_OC2_SetConfig+0xc0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008eac <TIM_OC2_SetConfig+0x124>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <TIM_OC2_SetConfig+0xc0>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a17      	ldr	r2, [pc, #92]	@ (8008ea0 <TIM_OC2_SetConfig+0x118>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d113      	bne.n	8008e70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	621a      	str	r2, [r3, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40013400 	.word	0x40013400
 8008ea0:	40015000 	.word	0x40015000
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40014400 	.word	0x40014400
 8008eac:	40014800 	.word	0x40014800

08008eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8008fbc <TIM_OC3_SetConfig+0x10c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d007      	beq.n	8008f22 <TIM_OC3_SetConfig+0x72>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2a      	ldr	r2, [pc, #168]	@ (8008fc0 <TIM_OC3_SetConfig+0x110>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_OC3_SetConfig+0x72>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a29      	ldr	r2, [pc, #164]	@ (8008fc4 <TIM_OC3_SetConfig+0x114>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d10d      	bne.n	8008f3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	021b      	lsls	r3, r3, #8
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a1e      	ldr	r2, [pc, #120]	@ (8008fbc <TIM_OC3_SetConfig+0x10c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <TIM_OC3_SetConfig+0xbe>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <TIM_OC3_SetConfig+0x110>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00f      	beq.n	8008f6e <TIM_OC3_SetConfig+0xbe>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc8 <TIM_OC3_SetConfig+0x118>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <TIM_OC3_SetConfig+0xbe>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1c      	ldr	r2, [pc, #112]	@ (8008fcc <TIM_OC3_SetConfig+0x11c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <TIM_OC3_SetConfig+0xbe>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd0 <TIM_OC3_SetConfig+0x120>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_OC3_SetConfig+0xbe>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a16      	ldr	r2, [pc, #88]	@ (8008fc4 <TIM_OC3_SetConfig+0x114>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d113      	bne.n	8008f96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	621a      	str	r2, [r3, #32]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	40012c00 	.word	0x40012c00
 8008fc0:	40013400 	.word	0x40013400
 8008fc4:	40015000 	.word	0x40015000
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400
 8008fd0:	40014800 	.word	0x40014800

08008fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800900e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	031b      	lsls	r3, r3, #12
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a2c      	ldr	r2, [pc, #176]	@ (80090e4 <TIM_OC4_SetConfig+0x110>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d007      	beq.n	8009048 <TIM_OC4_SetConfig+0x74>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a2b      	ldr	r2, [pc, #172]	@ (80090e8 <TIM_OC4_SetConfig+0x114>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_OC4_SetConfig+0x74>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a2a      	ldr	r2, [pc, #168]	@ (80090ec <TIM_OC4_SetConfig+0x118>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d10d      	bne.n	8009064 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800904e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	031b      	lsls	r3, r3, #12
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009062:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1f      	ldr	r2, [pc, #124]	@ (80090e4 <TIM_OC4_SetConfig+0x110>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d013      	beq.n	8009094 <TIM_OC4_SetConfig+0xc0>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1e      	ldr	r2, [pc, #120]	@ (80090e8 <TIM_OC4_SetConfig+0x114>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00f      	beq.n	8009094 <TIM_OC4_SetConfig+0xc0>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a1e      	ldr	r2, [pc, #120]	@ (80090f0 <TIM_OC4_SetConfig+0x11c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00b      	beq.n	8009094 <TIM_OC4_SetConfig+0xc0>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a1d      	ldr	r2, [pc, #116]	@ (80090f4 <TIM_OC4_SetConfig+0x120>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <TIM_OC4_SetConfig+0xc0>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a1c      	ldr	r2, [pc, #112]	@ (80090f8 <TIM_OC4_SetConfig+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_OC4_SetConfig+0xc0>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a17      	ldr	r2, [pc, #92]	@ (80090ec <TIM_OC4_SetConfig+0x118>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d113      	bne.n	80090bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800909a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	019b      	lsls	r3, r3, #6
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	019b      	lsls	r3, r3, #6
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	621a      	str	r2, [r3, #32]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40013400 	.word	0x40013400
 80090ec:	40015000 	.word	0x40015000
 80090f0:	40014000 	.word	0x40014000
 80090f4:	40014400 	.word	0x40014400
 80090f8:	40014800 	.word	0x40014800

080090fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	041b      	lsls	r3, r3, #16
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	4313      	orrs	r3, r2
 800914c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a19      	ldr	r2, [pc, #100]	@ (80091b8 <TIM_OC5_SetConfig+0xbc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <TIM_OC5_SetConfig+0x82>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a18      	ldr	r2, [pc, #96]	@ (80091bc <TIM_OC5_SetConfig+0xc0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00f      	beq.n	800917e <TIM_OC5_SetConfig+0x82>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a17      	ldr	r2, [pc, #92]	@ (80091c0 <TIM_OC5_SetConfig+0xc4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d00b      	beq.n	800917e <TIM_OC5_SetConfig+0x82>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a16      	ldr	r2, [pc, #88]	@ (80091c4 <TIM_OC5_SetConfig+0xc8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d007      	beq.n	800917e <TIM_OC5_SetConfig+0x82>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a15      	ldr	r2, [pc, #84]	@ (80091c8 <TIM_OC5_SetConfig+0xcc>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d003      	beq.n	800917e <TIM_OC5_SetConfig+0x82>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a14      	ldr	r2, [pc, #80]	@ (80091cc <TIM_OC5_SetConfig+0xd0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d109      	bne.n	8009192 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	4313      	orrs	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	621a      	str	r2, [r3, #32]
}
 80091ac:	bf00      	nop
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	40012c00 	.word	0x40012c00
 80091bc:	40013400 	.word	0x40013400
 80091c0:	40014000 	.word	0x40014000
 80091c4:	40014400 	.word	0x40014400
 80091c8:	40014800 	.word	0x40014800
 80091cc:	40015000 	.word	0x40015000

080091d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	051b      	lsls	r3, r3, #20
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <TIM_OC6_SetConfig+0xc0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d013      	beq.n	8009254 <TIM_OC6_SetConfig+0x84>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a19      	ldr	r2, [pc, #100]	@ (8009294 <TIM_OC6_SetConfig+0xc4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00f      	beq.n	8009254 <TIM_OC6_SetConfig+0x84>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a18      	ldr	r2, [pc, #96]	@ (8009298 <TIM_OC6_SetConfig+0xc8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_OC6_SetConfig+0x84>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a17      	ldr	r2, [pc, #92]	@ (800929c <TIM_OC6_SetConfig+0xcc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC6_SetConfig+0x84>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <TIM_OC6_SetConfig+0xd0>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC6_SetConfig+0x84>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a15      	ldr	r2, [pc, #84]	@ (80092a4 <TIM_OC6_SetConfig+0xd4>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d109      	bne.n	8009268 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	029b      	lsls	r3, r3, #10
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	621a      	str	r2, [r3, #32]
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40013400 	.word	0x40013400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800
 80092a4:	40015000 	.word	0x40015000

080092a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	4a56      	ldr	r2, [pc, #344]	@ (8009450 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	f000 80a2 	beq.w	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 80092fe:	4a54      	ldr	r2, [pc, #336]	@ (8009450 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009300:	4293      	cmp	r3, r2
 8009302:	f200 809b 	bhi.w	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009306:	4a53      	ldr	r2, [pc, #332]	@ (8009454 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009308:	4293      	cmp	r3, r2
 800930a:	f000 809a 	beq.w	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800930e:	4a51      	ldr	r2, [pc, #324]	@ (8009454 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009310:	4293      	cmp	r3, r2
 8009312:	f200 8093 	bhi.w	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009316:	4a50      	ldr	r2, [pc, #320]	@ (8009458 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009318:	4293      	cmp	r3, r2
 800931a:	f000 8092 	beq.w	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800931e:	4a4e      	ldr	r2, [pc, #312]	@ (8009458 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009320:	4293      	cmp	r3, r2
 8009322:	f200 808b 	bhi.w	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009326:	4a4d      	ldr	r2, [pc, #308]	@ (800945c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	f000 808a 	beq.w	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800932e:	4a4b      	ldr	r2, [pc, #300]	@ (800945c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	f200 8083 	bhi.w	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009336:	4a4a      	ldr	r2, [pc, #296]	@ (8009460 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	f000 8082 	beq.w	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800933e:	4a48      	ldr	r2, [pc, #288]	@ (8009460 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d87b      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009344:	4a47      	ldr	r2, [pc, #284]	@ (8009464 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d07b      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800934a:	4a46      	ldr	r2, [pc, #280]	@ (8009464 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d875      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009350:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009354:	d075      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 8009356:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800935a:	d86f      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 800935c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009360:	d06f      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 8009362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009366:	d869      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009368:	2b70      	cmp	r3, #112	@ 0x70
 800936a:	d01a      	beq.n	80093a2 <TIM_SlaveTimer_SetConfig+0xfa>
 800936c:	2b70      	cmp	r3, #112	@ 0x70
 800936e:	d865      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009370:	2b60      	cmp	r3, #96	@ 0x60
 8009372:	d059      	beq.n	8009428 <TIM_SlaveTimer_SetConfig+0x180>
 8009374:	2b60      	cmp	r3, #96	@ 0x60
 8009376:	d861      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009378:	2b50      	cmp	r3, #80	@ 0x50
 800937a:	d04b      	beq.n	8009414 <TIM_SlaveTimer_SetConfig+0x16c>
 800937c:	2b50      	cmp	r3, #80	@ 0x50
 800937e:	d85d      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009380:	2b40      	cmp	r3, #64	@ 0x40
 8009382:	d019      	beq.n	80093b8 <TIM_SlaveTimer_SetConfig+0x110>
 8009384:	2b40      	cmp	r3, #64	@ 0x40
 8009386:	d859      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009388:	2b30      	cmp	r3, #48	@ 0x30
 800938a:	d05a      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800938c:	2b30      	cmp	r3, #48	@ 0x30
 800938e:	d855      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009390:	2b20      	cmp	r3, #32
 8009392:	d056      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 8009394:	2b20      	cmp	r3, #32
 8009396:	d851      	bhi.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d052      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 800939c:	2b10      	cmp	r3, #16
 800939e:	d050      	beq.n	8009442 <TIM_SlaveTimer_SetConfig+0x19a>
 80093a0:	e04c      	b.n	800943c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80093b2:	f000 f9ff 	bl	80097b4 <TIM_ETR_SetConfig>
      break;
 80093b6:	e045      	b.n	8009444 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b05      	cmp	r3, #5
 80093be:	d004      	beq.n	80093ca <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80093c4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80093c8:	d101      	bne.n	80093ce <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e03b      	b.n	8009446 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6a1a      	ldr	r2, [r3, #32]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	621a      	str	r2, [r3, #32]
      break;
 8009412:	e017      	b.n	8009444 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009420:	461a      	mov	r2, r3
 8009422:	f000 f895 	bl	8009550 <TIM_TI1_ConfigInputStage>
      break;
 8009426:	e00d      	b.n	8009444 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009434:	461a      	mov	r2, r3
 8009436:	f000 f8f7 	bl	8009628 <TIM_TI2_ConfigInputStage>
      break;
 800943a:	e003      	b.n	8009444 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	75fb      	strb	r3, [r7, #23]
      break;
 8009440:	e000      	b.n	8009444 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009442:	bf00      	nop
  }

  return status;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	00100070 	.word	0x00100070
 8009454:	00100060 	.word	0x00100060
 8009458:	00100050 	.word	0x00100050
 800945c:	00100040 	.word	0x00100040
 8009460:	00100030 	.word	0x00100030
 8009464:	00100020 	.word	0x00100020

08009468 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f023 0201 	bic.w	r2, r3, #1
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4a28      	ldr	r2, [pc, #160]	@ (8009534 <TIM_TI1_SetConfig+0xcc>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01b      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800949c:	d017      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4a25      	ldr	r2, [pc, #148]	@ (8009538 <TIM_TI1_SetConfig+0xd0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d013      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4a24      	ldr	r2, [pc, #144]	@ (800953c <TIM_TI1_SetConfig+0xd4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00f      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a23      	ldr	r2, [pc, #140]	@ (8009540 <TIM_TI1_SetConfig+0xd8>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00b      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4a22      	ldr	r2, [pc, #136]	@ (8009544 <TIM_TI1_SetConfig+0xdc>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d007      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a21      	ldr	r2, [pc, #132]	@ (8009548 <TIM_TI1_SetConfig+0xe0>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d003      	beq.n	80094ce <TIM_TI1_SetConfig+0x66>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a20      	ldr	r2, [pc, #128]	@ (800954c <TIM_TI1_SetConfig+0xe4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d101      	bne.n	80094d2 <TIM_TI1_SetConfig+0x6a>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <TIM_TI1_SetConfig+0x6c>
 80094d2:	2300      	movs	r3, #0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d008      	beq.n	80094ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e003      	b.n	80094f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f023 030a 	bic.w	r3, r3, #10
 800950c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f003 030a 	and.w	r3, r3, #10
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	621a      	str	r2, [r3, #32]
}
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	40012c00 	.word	0x40012c00
 8009538:	40000400 	.word	0x40000400
 800953c:	40000800 	.word	0x40000800
 8009540:	40000c00 	.word	0x40000c00
 8009544:	40013400 	.word	0x40013400
 8009548:	40014000 	.word	0x40014000
 800954c:	40015000 	.word	0x40015000

08009550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	f023 0201 	bic.w	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800957a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	4313      	orrs	r3, r2
 8009584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f023 030a 	bic.w	r3, r3, #10
 800958c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	621a      	str	r2, [r3, #32]
}
 80095a2:	bf00      	nop
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b087      	sub	sp, #28
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
 80095ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f023 0210 	bic.w	r2, r3, #16
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	031b      	lsls	r3, r3, #12
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009600:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	621a      	str	r2, [r3, #32]
}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0210 	bic.w	r2, r3, #16
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	031b      	lsls	r3, r3, #12
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	011b      	lsls	r3, r3, #4
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	621a      	str	r2, [r3, #32]
}
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f023 0303 	bic.w	r3, r3, #3
 80096b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80096d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	621a      	str	r2, [r3, #32]
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800972c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	4313      	orrs	r3, r2
 8009736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800973e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	031b      	lsls	r3, r3, #12
 8009744:	b29b      	uxth	r3, r3
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009752:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	031b      	lsls	r3, r3, #12
 8009758:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	f043 0307 	orr.w	r3, r3, #7
 80097a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	609a      	str	r2, [r3, #8]
}
 80097a8:	bf00      	nop
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	021a      	lsls	r2, r3, #8
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4313      	orrs	r3, r2
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f003 031f 	and.w	r3, r3, #31
 8009806:	2201      	movs	r2, #1
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1a      	ldr	r2, [r3, #32]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	43db      	mvns	r3, r3
 8009816:	401a      	ands	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1a      	ldr	r2, [r3, #32]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	fa01 f303 	lsl.w	r3, r1, r3
 800982c:	431a      	orrs	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
	...

08009840 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a26      	ldr	r2, [pc, #152]	@ (80098e4 <TIM_ResetCallback+0xa4>)
 800984c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a25      	ldr	r2, [pc, #148]	@ (80098e8 <TIM_ResetCallback+0xa8>)
 8009854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a24      	ldr	r2, [pc, #144]	@ (80098ec <TIM_ResetCallback+0xac>)
 800985c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a23      	ldr	r2, [pc, #140]	@ (80098f0 <TIM_ResetCallback+0xb0>)
 8009864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a22      	ldr	r2, [pc, #136]	@ (80098f4 <TIM_ResetCallback+0xb4>)
 800986c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a21      	ldr	r2, [pc, #132]	@ (80098f8 <TIM_ResetCallback+0xb8>)
 8009874:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a20      	ldr	r2, [pc, #128]	@ (80098fc <TIM_ResetCallback+0xbc>)
 800987c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a1f      	ldr	r2, [pc, #124]	@ (8009900 <TIM_ResetCallback+0xc0>)
 8009884:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a1e      	ldr	r2, [pc, #120]	@ (8009904 <TIM_ResetCallback+0xc4>)
 800988c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a1d      	ldr	r2, [pc, #116]	@ (8009908 <TIM_ResetCallback+0xc8>)
 8009894:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a1c      	ldr	r2, [pc, #112]	@ (800990c <TIM_ResetCallback+0xcc>)
 800989c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009910 <TIM_ResetCallback+0xd0>)
 80098a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009914 <TIM_ResetCallback+0xd4>)
 80098ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a19      	ldr	r2, [pc, #100]	@ (8009918 <TIM_ResetCallback+0xd8>)
 80098b4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a18      	ldr	r2, [pc, #96]	@ (800991c <TIM_ResetCallback+0xdc>)
 80098bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a17      	ldr	r2, [pc, #92]	@ (8009920 <TIM_ResetCallback+0xe0>)
 80098c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a16      	ldr	r2, [pc, #88]	@ (8009924 <TIM_ResetCallback+0xe4>)
 80098cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a15      	ldr	r2, [pc, #84]	@ (8009928 <TIM_ResetCallback+0xe8>)
 80098d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	080045e5 	.word	0x080045e5
 80098e8:	08008779 	.word	0x08008779
 80098ec:	080087f1 	.word	0x080087f1
 80098f0:	08008805 	.word	0x08008805
 80098f4:	080087a1 	.word	0x080087a1
 80098f8:	080087b5 	.word	0x080087b5
 80098fc:	0800878d 	.word	0x0800878d
 8009900:	080087c9 	.word	0x080087c9
 8009904:	080087dd 	.word	0x080087dd
 8009908:	08008819 	.word	0x08008819
 800990c:	08009b81 	.word	0x08009b81
 8009910:	08009b95 	.word	0x08009b95
 8009914:	08009ba9 	.word	0x08009ba9
 8009918:	08009bbd 	.word	0x08009bbd
 800991c:	08009bd1 	.word	0x08009bd1
 8009920:	08009be5 	.word	0x08009be5
 8009924:	08009bf9 	.word	0x08009bf9
 8009928:	08009c0d 	.word	0x08009c0d

0800992c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009940:	2302      	movs	r3, #2
 8009942:	e074      	b.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a34      	ldr	r2, [pc, #208]	@ (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d009      	beq.n	8009982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a33      	ldr	r2, [pc, #204]	@ (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d004      	beq.n	8009982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a31      	ldr	r2, [pc, #196]	@ (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d108      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800999a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a21      	ldr	r2, [pc, #132]	@ (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d022      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c4:	d01d      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d018      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d013      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1c      	ldr	r2, [pc, #112]	@ (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a15      	ldr	r2, [pc, #84]	@ (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a18      	ldr	r2, [pc, #96]	@ (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a11      	ldr	r2, [pc, #68]	@ (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10c      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40013400 	.word	0x40013400
 8009a44:	40015000 	.word	0x40015000
 8009a48:	40000400 	.word	0x40000400
 8009a4c:	40000800 	.word	0x40000800
 8009a50:	40000c00 	.word	0x40000c00
 8009a54:	40014000 	.word	0x40014000

08009a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e078      	b.n	8009b66 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1c      	ldr	r2, [pc, #112]	@ (8009b74 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d009      	beq.n	8009b1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d004      	beq.n	8009b1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a19      	ldr	r2, [pc, #100]	@ (8009b7c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d11c      	bne.n	8009b54 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b24:	051b      	lsls	r3, r3, #20
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40012c00 	.word	0x40012c00
 8009b78:	40013400 	.word	0x40013400
 8009b7c:	40015000 	.word	0x40015000

08009b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e050      	b.n	8009cd4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d114      	bne.n	8009c66 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fde5 	bl	800a814 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a21      	ldr	r2, [pc, #132]	@ (8009cdc <HAL_UART_Init+0xbc>)
 8009c58:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2224      	movs	r2, #36	@ 0x24
 8009c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d002      	beq.n	8009c8c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 f912 	bl	800aeb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fe13 	bl	800a8b8 <UART_SetConfig>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e01b      	b.n	8009cd4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f991 	bl	800aff4 <UART_CheckIdleState>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	080050f9 	.word	0x080050f9

08009ce0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e09c      	b.n	8009e46 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d16c      	bne.n	8009df0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	2b0c      	cmp	r3, #12
 8009d1a:	d85e      	bhi.n	8009dda <HAL_UART_RegisterCallback+0xfa>
 8009d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <HAL_UART_RegisterCallback+0x44>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009d59 	.word	0x08009d59
 8009d28:	08009d63 	.word	0x08009d63
 8009d2c:	08009d6d 	.word	0x08009d6d
 8009d30:	08009d77 	.word	0x08009d77
 8009d34:	08009d81 	.word	0x08009d81
 8009d38:	08009d8b 	.word	0x08009d8b
 8009d3c:	08009d95 	.word	0x08009d95
 8009d40:	08009d9f 	.word	0x08009d9f
 8009d44:	08009da9 	.word	0x08009da9
 8009d48:	08009db3 	.word	0x08009db3
 8009d4c:	08009dbd 	.word	0x08009dbd
 8009d50:	08009dc7 	.word	0x08009dc7
 8009d54:	08009dd1 	.word	0x08009dd1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d60:	e070      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d6a:	e06b      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d74:	e066      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d7e:	e061      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d88:	e05c      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d92:	e057      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d9c:	e052      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009da6:	e04d      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009db0:	e048      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009dba:	e043      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009dc4:	e03e      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009dce:	e039      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009dd8:	e034      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
        break;
 8009dee:	e029      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d11a      	bne.n	8009e30 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	2b0b      	cmp	r3, #11
 8009dfe:	d002      	beq.n	8009e06 <HAL_UART_RegisterCallback+0x126>
 8009e00:	2b0c      	cmp	r3, #12
 8009e02:	d005      	beq.n	8009e10 <HAL_UART_RegisterCallback+0x130>
 8009e04:	e009      	b.n	8009e1a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009e0e:	e019      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009e18:	e014      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	75fb      	strb	r3, [r7, #23]
        break;
 8009e2e:	e009      	b.n	8009e44 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08a      	sub	sp, #40	@ 0x28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	d167      	bne.n	8009f3c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <HAL_UART_Transmit_DMA+0x24>
 8009e72:	88fb      	ldrh	r3, [r7, #6]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e060      	b.n	8009f3e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	88fa      	ldrh	r2, [r7, #6]
 8009e86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	88fa      	ldrh	r2, [r7, #6]
 8009e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2221      	movs	r2, #33	@ 0x21
 8009e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d028      	beq.n	8009efc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eae:	4a26      	ldr	r2, [pc, #152]	@ (8009f48 <HAL_UART_Transmit_DMA+0xf4>)
 8009eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eb6:	4a25      	ldr	r2, [pc, #148]	@ (8009f4c <HAL_UART_Transmit_DMA+0xf8>)
 8009eb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ebe:	4a24      	ldr	r2, [pc, #144]	@ (8009f50 <HAL_UART_Transmit_DMA+0xfc>)
 8009ec0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3328      	adds	r3, #40	@ 0x28
 8009eda:	461a      	mov	r2, r3
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	f7fb fcd9 	bl	8005894 <HAL_DMA_Start_IT>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d009      	beq.n	8009efc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2210      	movs	r2, #16
 8009eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e020      	b.n	8009f3e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2240      	movs	r2, #64	@ 0x40
 8009f02:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	613b      	str	r3, [r7, #16]
   return(result);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3308      	adds	r3, #8
 8009f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f24:	623a      	str	r2, [r7, #32]
 8009f26:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	69f9      	ldr	r1, [r7, #28]
 8009f2a:	6a3a      	ldr	r2, [r7, #32]
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e5      	bne.n	8009f04 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e000      	b.n	8009f3e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3728      	adds	r7, #40	@ 0x28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0800b4bf 	.word	0x0800b4bf
 8009f4c:	0800b55d 	.word	0x0800b55d
 8009f50:	0800b6f7 	.word	0x0800b6f7

08009f54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	@ 0x28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d137      	bne.n	8009fdc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <HAL_UART_Receive_DMA+0x24>
 8009f72:	88fb      	ldrh	r3, [r7, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e030      	b.n	8009fde <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a18      	ldr	r2, [pc, #96]	@ (8009fe8 <HAL_UART_Receive_DMA+0x94>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d01f      	beq.n	8009fcc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d018      	beq.n	8009fcc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69f9      	ldr	r1, [r7, #28]
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f001 f926 	bl	800b224 <UART_Start_Receive_DMA>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	e000      	b.n	8009fde <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fdc:	2302      	movs	r3, #2
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3728      	adds	r7, #40	@ 0x28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	40008000 	.word	0x40008000

08009fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b0ba      	sub	sp, #232	@ 0xe8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a01a:	4013      	ands	r3, r2
 800a01c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a024:	2b00      	cmp	r3, #0
 800a026:	d11b      	bne.n	800a060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d015      	beq.n	800a060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d105      	bne.n	800a04c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 8312 	beq.w	800a67a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
      }
      return;
 800a05e:	e30c      	b.n	800a67a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8129 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a06a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a06e:	4b90      	ldr	r3, [pc, #576]	@ (800a2b0 <HAL_UART_IRQHandler+0x2c4>)
 800a070:	4013      	ands	r3, r2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a07a:	4b8e      	ldr	r3, [pc, #568]	@ (800a2b4 <HAL_UART_IRQHandler+0x2c8>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 811c 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d011      	beq.n	800a0b4 <HAL_UART_IRQHandler+0xc8>
 800a090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0aa:	f043 0201 	orr.w	r2, r3, #1
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b8:	f003 0302 	and.w	r3, r3, #2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d011      	beq.n	800a0e4 <HAL_UART_IRQHandler+0xf8>
 800a0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0da:	f043 0204 	orr.w	r2, r3, #4
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d011      	beq.n	800a114 <HAL_UART_IRQHandler+0x128>
 800a0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2204      	movs	r2, #4
 800a102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a10a:	f043 0202 	orr.w	r2, r3, #2
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d105      	bne.n	800a138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a12c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a130:	4b5f      	ldr	r3, [pc, #380]	@ (800a2b0 <HAL_UART_IRQHandler+0x2c4>)
 800a132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2208      	movs	r2, #8
 800a13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a146:	f043 0208 	orr.w	r2, r3, #8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d012      	beq.n	800a182 <HAL_UART_IRQHandler+0x196>
 800a15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00c      	beq.n	800a182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a178:	f043 0220 	orr.w	r2, r3, #32
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8278 	beq.w	800a67e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d013      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d6:	2b40      	cmp	r3, #64	@ 0x40
 800a1d8:	d005      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d058      	beq.n	800a298 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 f903 	bl	800b3f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f6:	2b40      	cmp	r3, #64	@ 0x40
 800a1f8:	d148      	bne.n	800a28c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3308      	adds	r3, #8
 800a222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a23e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1d9      	bne.n	800a1fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d017      	beq.n	800a280 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a256:	4a18      	ldr	r2, [pc, #96]	@ (800a2b8 <HAL_UART_IRQHandler+0x2cc>)
 800a258:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a260:	4618      	mov	r0, r3
 800a262:	f7fb fbeb 	bl	8005a3c <HAL_DMA_Abort_IT>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01f      	beq.n	800a2ac <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a27a:	4610      	mov	r0, r2
 800a27c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a27e:	e015      	b.n	800a2ac <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28a:	e00f      	b.n	800a2ac <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a296:	e009      	b.n	800a2ac <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a2aa:	e1e8      	b.n	800a67e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ac:	bf00      	nop
    return;
 800a2ae:	e1e6      	b.n	800a67e <HAL_UART_IRQHandler+0x692>
 800a2b0:	10000001 	.word	0x10000001
 800a2b4:	04000120 	.word	0x04000120
 800a2b8:	0800b77b 	.word	0x0800b77b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 8176 	bne.w	800a5b2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 816f 	beq.w	800a5b2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 8168 	beq.w	800a5b2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2210      	movs	r2, #16
 800a2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f4:	2b40      	cmp	r3, #64	@ 0x40
 800a2f6:	f040 80dc 	bne.w	800a4b2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 80b1 	beq.w	800a474 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a31c:	429a      	cmp	r2, r3
 800a31e:	f080 80a9 	bcs.w	800a474 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 8087 	bne.w	800a44e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a35c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a36e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1da      	bne.n	800a340 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a3b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e1      	bne.n	800a38a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e3      	bne.n	800a3c6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a41c:	f023 0310 	bic.w	r3, r3, #16
 800a420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e4      	bne.n	800a40c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fb fa9e 	bl	800598a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2202      	movs	r2, #2
 800a452:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a466:	b292      	uxth	r2, r2
 800a468:	1a8a      	subs	r2, r1, r2
 800a46a:	b292      	uxth	r2, r2
 800a46c:	4611      	mov	r1, r2
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a472:	e106      	b.n	800a682 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a47a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a47e:	429a      	cmp	r2, r3
 800a480:	f040 80ff 	bne.w	800a682 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b20      	cmp	r3, #32
 800a494:	f040 80f5 	bne.w	800a682 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2202      	movs	r2, #2
 800a49c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	4798      	blx	r3
      return;
 800a4b0:	e0e7      	b.n	800a682 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80d9 	beq.w	800a686 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 80d4 	beq.w	800a686 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a500:	647b      	str	r3, [r7, #68]	@ 0x44
 800a502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e4      	bne.n	800a4de <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3308      	adds	r3, #8
 800a51a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	623b      	str	r3, [r7, #32]
   return(result);
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a52a:	f023 0301 	bic.w	r3, r3, #1
 800a52e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a53c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a544:	e841 2300 	strex	r3, r2, [r1]
 800a548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1e1      	bne.n	800a514 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	60fb      	str	r3, [r7, #12]
   return(result);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f023 0310 	bic.w	r3, r3, #16
 800a578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	69b9      	ldr	r1, [r7, #24]
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	617b      	str	r3, [r7, #20]
   return(result);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e4      	bne.n	800a564 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2202      	movs	r2, #2
 800a59e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5a6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5b0:	e069      	b.n	800a686 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d010      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x5f4>
 800a5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a5d2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5de:	e055      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d014      	beq.n	800a616 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d105      	bne.n	800a604 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d008      	beq.n	800a616 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d03e      	beq.n	800a68a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
    }
    return;
 800a614:	e039      	b.n	800a68a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <HAL_UART_IRQHandler+0x64a>
 800a622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 f8b7 	bl	800b7a2 <UART_EndTransmit_IT>
    return;
 800a634:	e02a      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a63a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_UART_IRQHandler+0x66e>
 800a642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a646:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a658:	e018      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d012      	beq.n	800a68c <HAL_UART_IRQHandler+0x6a0>
 800a666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da0e      	bge.n	800a68c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a678:	e008      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a67a:	bf00      	nop
 800a67c:	e006      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
    return;
 800a67e:	bf00      	nop
 800a680:	e004      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a682:	bf00      	nop
 800a684:	e002      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a686:	bf00      	nop
 800a688:	e000      	b.n	800a68c <HAL_UART_IRQHandler+0x6a0>
    return;
 800a68a:	bf00      	nop
  }
}
 800a68c:	37e8      	adds	r7, #232	@ 0xe8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop

0800a694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a09      	ldr	r2, [pc, #36]	@ (800a780 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d009      	beq.n	800a774 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	615a      	str	r2, [r3, #20]
  }
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	40008000 	.word	0x40008000

0800a784 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a18      	ldr	r2, [pc, #96]	@ (800a7f4 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d027      	beq.n	800a7e6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d120      	bne.n	800a7e2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d101      	bne.n	800a7ae <HAL_UART_EnableReceiverTimeout+0x2a>
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	e01c      	b.n	800a7e8 <HAL_UART_EnableReceiverTimeout+0x64>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2224      	movs	r2, #36	@ 0x24
 800a7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a7cc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e002      	b.n	800a7e8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e000      	b.n	800a7e8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
  }
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	40008000 	.word	0x40008000

0800a7f8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a1a      	ldr	r2, [pc, #104]	@ (800a888 <UART_InitCallbacksToDefault+0x74>)
 800a820:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a19      	ldr	r2, [pc, #100]	@ (800a88c <UART_InitCallbacksToDefault+0x78>)
 800a828:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a18      	ldr	r2, [pc, #96]	@ (800a890 <UART_InitCallbacksToDefault+0x7c>)
 800a830:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a17      	ldr	r2, [pc, #92]	@ (800a894 <UART_InitCallbacksToDefault+0x80>)
 800a838:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a16      	ldr	r2, [pc, #88]	@ (800a898 <UART_InitCallbacksToDefault+0x84>)
 800a840:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a15      	ldr	r2, [pc, #84]	@ (800a89c <UART_InitCallbacksToDefault+0x88>)
 800a848:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a14      	ldr	r2, [pc, #80]	@ (800a8a0 <UART_InitCallbacksToDefault+0x8c>)
 800a850:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a13      	ldr	r2, [pc, #76]	@ (800a8a4 <UART_InitCallbacksToDefault+0x90>)
 800a858:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a12      	ldr	r2, [pc, #72]	@ (800a8a8 <UART_InitCallbacksToDefault+0x94>)
 800a860:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a11      	ldr	r2, [pc, #68]	@ (800a8ac <UART_InitCallbacksToDefault+0x98>)
 800a868:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a10      	ldr	r2, [pc, #64]	@ (800a8b0 <UART_InitCallbacksToDefault+0x9c>)
 800a870:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a0f      	ldr	r2, [pc, #60]	@ (800a8b4 <UART_InitCallbacksToDefault+0xa0>)
 800a878:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	0800a6a9 	.word	0x0800a6a9
 800a88c:	0800a695 	.word	0x0800a695
 800a890:	0800a6d1 	.word	0x0800a6d1
 800a894:	0800a6bd 	.word	0x0800a6bd
 800a898:	0800a6e5 	.word	0x0800a6e5
 800a89c:	0800a6f9 	.word	0x0800a6f9
 800a8a0:	0800a70d 	.word	0x0800a70d
 800a8a4:	0800a721 	.word	0x0800a721
 800a8a8:	0800b7fd 	.word	0x0800b7fd
 800a8ac:	0800b811 	.word	0x0800b811
 800a8b0:	0800b825 	.word	0x0800b825
 800a8b4:	0800a735 	.word	0x0800a735

0800a8b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8bc:	b08c      	sub	sp, #48	@ 0x30
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4baa      	ldr	r3, [pc, #680]	@ (800ab90 <UART_SetConfig+0x2d8>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a9f      	ldr	r2, [pc, #636]	@ (800ab94 <UART_SetConfig+0x2dc>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d004      	beq.n	800a924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a920:	4313      	orrs	r3, r2
 800a922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a92e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a938:	430b      	orrs	r3, r1
 800a93a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a942:	f023 010f 	bic.w	r1, r3, #15
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a90      	ldr	r2, [pc, #576]	@ (800ab98 <UART_SetConfig+0x2e0>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d125      	bne.n	800a9a8 <UART_SetConfig+0xf0>
 800a95c:	4b8f      	ldr	r3, [pc, #572]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800a95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a962:	f003 0303 	and.w	r3, r3, #3
 800a966:	2b03      	cmp	r3, #3
 800a968:	d81a      	bhi.n	800a9a0 <UART_SetConfig+0xe8>
 800a96a:	a201      	add	r2, pc, #4	@ (adr r2, 800a970 <UART_SetConfig+0xb8>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a981 	.word	0x0800a981
 800a974:	0800a991 	.word	0x0800a991
 800a978:	0800a989 	.word	0x0800a989
 800a97c:	0800a999 	.word	0x0800a999
 800a980:	2301      	movs	r3, #1
 800a982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a986:	e116      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800a988:	2302      	movs	r3, #2
 800a98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a98e:	e112      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800a990:	2304      	movs	r3, #4
 800a992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a996:	e10e      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800a998:	2308      	movs	r3, #8
 800a99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99e:	e10a      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a6:	e106      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a7c      	ldr	r2, [pc, #496]	@ (800aba0 <UART_SetConfig+0x2e8>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d138      	bne.n	800aa24 <UART_SetConfig+0x16c>
 800a9b2:	4b7a      	ldr	r3, [pc, #488]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b8:	f003 030c 	and.w	r3, r3, #12
 800a9bc:	2b0c      	cmp	r3, #12
 800a9be:	d82d      	bhi.n	800aa1c <UART_SetConfig+0x164>
 800a9c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c8 <UART_SetConfig+0x110>)
 800a9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c6:	bf00      	nop
 800a9c8:	0800a9fd 	.word	0x0800a9fd
 800a9cc:	0800aa1d 	.word	0x0800aa1d
 800a9d0:	0800aa1d 	.word	0x0800aa1d
 800a9d4:	0800aa1d 	.word	0x0800aa1d
 800a9d8:	0800aa0d 	.word	0x0800aa0d
 800a9dc:	0800aa1d 	.word	0x0800aa1d
 800a9e0:	0800aa1d 	.word	0x0800aa1d
 800a9e4:	0800aa1d 	.word	0x0800aa1d
 800a9e8:	0800aa05 	.word	0x0800aa05
 800a9ec:	0800aa1d 	.word	0x0800aa1d
 800a9f0:	0800aa1d 	.word	0x0800aa1d
 800a9f4:	0800aa1d 	.word	0x0800aa1d
 800a9f8:	0800aa15 	.word	0x0800aa15
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa02:	e0d8      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa04:	2302      	movs	r3, #2
 800aa06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa0a:	e0d4      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa0c:	2304      	movs	r3, #4
 800aa0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa12:	e0d0      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa14:	2308      	movs	r3, #8
 800aa16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa1a:	e0cc      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa1c:	2310      	movs	r3, #16
 800aa1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa22:	e0c8      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a5e      	ldr	r2, [pc, #376]	@ (800aba4 <UART_SetConfig+0x2ec>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d125      	bne.n	800aa7a <UART_SetConfig+0x1c2>
 800aa2e:	4b5b      	ldr	r3, [pc, #364]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa38:	2b30      	cmp	r3, #48	@ 0x30
 800aa3a:	d016      	beq.n	800aa6a <UART_SetConfig+0x1b2>
 800aa3c:	2b30      	cmp	r3, #48	@ 0x30
 800aa3e:	d818      	bhi.n	800aa72 <UART_SetConfig+0x1ba>
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	d00a      	beq.n	800aa5a <UART_SetConfig+0x1a2>
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	d814      	bhi.n	800aa72 <UART_SetConfig+0x1ba>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <UART_SetConfig+0x19a>
 800aa4c:	2b10      	cmp	r3, #16
 800aa4e:	d008      	beq.n	800aa62 <UART_SetConfig+0x1aa>
 800aa50:	e00f      	b.n	800aa72 <UART_SetConfig+0x1ba>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa58:	e0ad      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa60:	e0a9      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa62:	2304      	movs	r3, #4
 800aa64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa68:	e0a5      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa6a:	2308      	movs	r3, #8
 800aa6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa70:	e0a1      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa72:	2310      	movs	r3, #16
 800aa74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa78:	e09d      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a4a      	ldr	r2, [pc, #296]	@ (800aba8 <UART_SetConfig+0x2f0>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d125      	bne.n	800aad0 <UART_SetConfig+0x218>
 800aa84:	4b45      	ldr	r3, [pc, #276]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800aa86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa90:	d016      	beq.n	800aac0 <UART_SetConfig+0x208>
 800aa92:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa94:	d818      	bhi.n	800aac8 <UART_SetConfig+0x210>
 800aa96:	2b80      	cmp	r3, #128	@ 0x80
 800aa98:	d00a      	beq.n	800aab0 <UART_SetConfig+0x1f8>
 800aa9a:	2b80      	cmp	r3, #128	@ 0x80
 800aa9c:	d814      	bhi.n	800aac8 <UART_SetConfig+0x210>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <UART_SetConfig+0x1f0>
 800aaa2:	2b40      	cmp	r3, #64	@ 0x40
 800aaa4:	d008      	beq.n	800aab8 <UART_SetConfig+0x200>
 800aaa6:	e00f      	b.n	800aac8 <UART_SetConfig+0x210>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaae:	e082      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aab0:	2302      	movs	r3, #2
 800aab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab6:	e07e      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aab8:	2304      	movs	r3, #4
 800aaba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aabe:	e07a      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aac0:	2308      	movs	r3, #8
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac6:	e076      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aac8:	2310      	movs	r3, #16
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aace:	e072      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a35      	ldr	r2, [pc, #212]	@ (800abac <UART_SetConfig+0x2f4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d12a      	bne.n	800ab30 <UART_SetConfig+0x278>
 800aada:	4b30      	ldr	r3, [pc, #192]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800aadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aae8:	d01a      	beq.n	800ab20 <UART_SetConfig+0x268>
 800aaea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaee:	d81b      	bhi.n	800ab28 <UART_SetConfig+0x270>
 800aaf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf4:	d00c      	beq.n	800ab10 <UART_SetConfig+0x258>
 800aaf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aafa:	d815      	bhi.n	800ab28 <UART_SetConfig+0x270>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <UART_SetConfig+0x250>
 800ab00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab04:	d008      	beq.n	800ab18 <UART_SetConfig+0x260>
 800ab06:	e00f      	b.n	800ab28 <UART_SetConfig+0x270>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0e:	e052      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab10:	2302      	movs	r3, #2
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	e04e      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e04a      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab20:	2308      	movs	r3, #8
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab26:	e046      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2e:	e042      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a17      	ldr	r2, [pc, #92]	@ (800ab94 <UART_SetConfig+0x2dc>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d13a      	bne.n	800abb0 <UART_SetConfig+0x2f8>
 800ab3a:	4b18      	ldr	r3, [pc, #96]	@ (800ab9c <UART_SetConfig+0x2e4>)
 800ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab48:	d01a      	beq.n	800ab80 <UART_SetConfig+0x2c8>
 800ab4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab4e:	d81b      	bhi.n	800ab88 <UART_SetConfig+0x2d0>
 800ab50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab54:	d00c      	beq.n	800ab70 <UART_SetConfig+0x2b8>
 800ab56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab5a:	d815      	bhi.n	800ab88 <UART_SetConfig+0x2d0>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <UART_SetConfig+0x2b0>
 800ab60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab64:	d008      	beq.n	800ab78 <UART_SetConfig+0x2c0>
 800ab66:	e00f      	b.n	800ab88 <UART_SetConfig+0x2d0>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6e:	e022      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab70:	2302      	movs	r3, #2
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab76:	e01e      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab78:	2304      	movs	r3, #4
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e01a      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab80:	2308      	movs	r3, #8
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab86:	e016      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab88:	2310      	movs	r3, #16
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8e:	e012      	b.n	800abb6 <UART_SetConfig+0x2fe>
 800ab90:	cfff69f3 	.word	0xcfff69f3
 800ab94:	40008000 	.word	0x40008000
 800ab98:	40013800 	.word	0x40013800
 800ab9c:	40021000 	.word	0x40021000
 800aba0:	40004400 	.word	0x40004400
 800aba4:	40004800 	.word	0x40004800
 800aba8:	40004c00 	.word	0x40004c00
 800abac:	40005000 	.word	0x40005000
 800abb0:	2310      	movs	r3, #16
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4aae      	ldr	r2, [pc, #696]	@ (800ae74 <UART_SetConfig+0x5bc>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	f040 8097 	bne.w	800acf0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d823      	bhi.n	800ac12 <UART_SetConfig+0x35a>
 800abca:	a201      	add	r2, pc, #4	@ (adr r2, 800abd0 <UART_SetConfig+0x318>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800abf5 	.word	0x0800abf5
 800abd4:	0800ac13 	.word	0x0800ac13
 800abd8:	0800abfd 	.word	0x0800abfd
 800abdc:	0800ac13 	.word	0x0800ac13
 800abe0:	0800ac03 	.word	0x0800ac03
 800abe4:	0800ac13 	.word	0x0800ac13
 800abe8:	0800ac13 	.word	0x0800ac13
 800abec:	0800ac13 	.word	0x0800ac13
 800abf0:	0800ac0b 	.word	0x0800ac0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf4:	f7fc f812 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 800abf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abfa:	e010      	b.n	800ac1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abfc:	4b9e      	ldr	r3, [pc, #632]	@ (800ae78 <UART_SetConfig+0x5c0>)
 800abfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac00:	e00d      	b.n	800ac1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac02:	f7fb ff9d 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 800ac06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac08:	e009      	b.n	800ac1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac10:	e005      	b.n	800ac1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 8130 	beq.w	800ae86 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2a:	4a94      	ldr	r2, [pc, #592]	@ (800ae7c <UART_SetConfig+0x5c4>)
 800ac2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4413      	add	r3, r2
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d305      	bcc.n	800ac56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d903      	bls.n	800ac5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac5c:	e113      	b.n	800ae86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	2200      	movs	r2, #0
 800ac62:	60bb      	str	r3, [r7, #8]
 800ac64:	60fa      	str	r2, [r7, #12]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	4a84      	ldr	r2, [pc, #528]	@ (800ae7c <UART_SetConfig+0x5c4>)
 800ac6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	2200      	movs	r2, #0
 800ac74:	603b      	str	r3, [r7, #0]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac80:	f7f6 f89e 	bl	8000dc0 <__aeabi_uldivmod>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	f04f 0300 	mov.w	r3, #0
 800ac94:	020b      	lsls	r3, r1, #8
 800ac96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac9a:	0202      	lsls	r2, r0, #8
 800ac9c:	6979      	ldr	r1, [r7, #20]
 800ac9e:	6849      	ldr	r1, [r1, #4]
 800aca0:	0849      	lsrs	r1, r1, #1
 800aca2:	2000      	movs	r0, #0
 800aca4:	460c      	mov	r4, r1
 800aca6:	4605      	mov	r5, r0
 800aca8:	eb12 0804 	adds.w	r8, r2, r4
 800acac:	eb43 0905 	adc.w	r9, r3, r5
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	469a      	mov	sl, r3
 800acb8:	4693      	mov	fp, r2
 800acba:	4652      	mov	r2, sl
 800acbc:	465b      	mov	r3, fp
 800acbe:	4640      	mov	r0, r8
 800acc0:	4649      	mov	r1, r9
 800acc2:	f7f6 f87d 	bl	8000dc0 <__aeabi_uldivmod>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4613      	mov	r3, r2
 800accc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd4:	d308      	bcc.n	800ace8 <UART_SetConfig+0x430>
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acdc:	d204      	bcs.n	800ace8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6a3a      	ldr	r2, [r7, #32]
 800ace4:	60da      	str	r2, [r3, #12]
 800ace6:	e0ce      	b.n	800ae86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acee:	e0ca      	b.n	800ae86 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acf8:	d166      	bne.n	800adc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800acfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acfe:	2b08      	cmp	r3, #8
 800ad00:	d827      	bhi.n	800ad52 <UART_SetConfig+0x49a>
 800ad02:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <UART_SetConfig+0x450>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	0800ad53 	.word	0x0800ad53
 800ad18:	0800ad43 	.word	0x0800ad43
 800ad1c:	0800ad53 	.word	0x0800ad53
 800ad20:	0800ad53 	.word	0x0800ad53
 800ad24:	0800ad53 	.word	0x0800ad53
 800ad28:	0800ad4b 	.word	0x0800ad4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad2c:	f7fb ff76 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 800ad30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad32:	e014      	b.n	800ad5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad34:	f7fb ff88 	bl	8006c48 <HAL_RCC_GetPCLK2Freq>
 800ad38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad3a:	e010      	b.n	800ad5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad3c:	4b4e      	ldr	r3, [pc, #312]	@ (800ae78 <UART_SetConfig+0x5c0>)
 800ad3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad40:	e00d      	b.n	800ad5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad42:	f7fb fefd 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 800ad46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad48:	e009      	b.n	800ad5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad50:	e005      	b.n	800ad5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8090 	beq.w	800ae86 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6a:	4a44      	ldr	r2, [pc, #272]	@ (800ae7c <UART_SetConfig+0x5c4>)
 800ad6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad70:	461a      	mov	r2, r3
 800ad72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad78:	005a      	lsls	r2, r3, #1
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	441a      	add	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	2b0f      	cmp	r3, #15
 800ad90:	d916      	bls.n	800adc0 <UART_SetConfig+0x508>
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad98:	d212      	bcs.n	800adc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	f023 030f 	bic.w	r3, r3, #15
 800ada2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	085b      	lsrs	r3, r3, #1
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	b29a      	uxth	r2, r3
 800adb0:	8bfb      	ldrh	r3, [r7, #30]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	8bfa      	ldrh	r2, [r7, #30]
 800adbc:	60da      	str	r2, [r3, #12]
 800adbe:	e062      	b.n	800ae86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adc6:	e05e      	b.n	800ae86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800adc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d828      	bhi.n	800ae22 <UART_SetConfig+0x56a>
 800add0:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <UART_SetConfig+0x520>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800adfd 	.word	0x0800adfd
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	0800ae23 	.word	0x0800ae23
 800ade8:	0800ae13 	.word	0x0800ae13
 800adec:	0800ae23 	.word	0x0800ae23
 800adf0:	0800ae23 	.word	0x0800ae23
 800adf4:	0800ae23 	.word	0x0800ae23
 800adf8:	0800ae1b 	.word	0x0800ae1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adfc:	f7fb ff0e 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 800ae00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae02:	e014      	b.n	800ae2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae04:	f7fb ff20 	bl	8006c48 <HAL_RCC_GetPCLK2Freq>
 800ae08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae0a:	e010      	b.n	800ae2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <UART_SetConfig+0x5c0>)
 800ae0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae10:	e00d      	b.n	800ae2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae12:	f7fb fe95 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 800ae16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae18:	e009      	b.n	800ae2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae20:	e005      	b.n	800ae2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae2c:	bf00      	nop
    }

    if (pclk != 0U)
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d028      	beq.n	800ae86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae38:	4a10      	ldr	r2, [pc, #64]	@ (800ae7c <UART_SetConfig+0x5c4>)
 800ae3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	441a      	add	r2, r3
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2b0f      	cmp	r3, #15
 800ae5c:	d910      	bls.n	800ae80 <UART_SetConfig+0x5c8>
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae64:	d20c      	bcs.n	800ae80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60da      	str	r2, [r3, #12]
 800ae70:	e009      	b.n	800ae86 <UART_SetConfig+0x5ce>
 800ae72:	bf00      	nop
 800ae74:	40008000 	.word	0x40008000
 800ae78:	00f42400 	.word	0x00f42400
 800ae7c:	0800c974 	.word	0x0800c974
      }
      else
      {
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aea2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3730      	adds	r7, #48	@ 0x30
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aeb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebc:	f003 0308 	and.w	r3, r3, #8
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af00:	f003 0302 	and.w	r3, r3, #2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	f003 0304 	and.w	r3, r3, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af44:	f003 0310 	and.w	r3, r3, #16
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01a      	beq.n	800afc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afae:	d10a      	bne.n	800afc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	430a      	orrs	r2, r1
 800afc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	605a      	str	r2, [r3, #4]
  }
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b098      	sub	sp, #96	@ 0x60
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b004:	f7fa fa82 	bl	800550c <HAL_GetTick>
 800b008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0308 	and.w	r3, r3, #8
 800b014:	2b08      	cmp	r3, #8
 800b016:	d12f      	bne.n	800b078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b020:	2200      	movs	r2, #0
 800b022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f88e 	bl	800b148 <UART_WaitOnFlagUntilTimeout>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d022      	beq.n	800b078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b046:	653b      	str	r3, [r7, #80]	@ 0x50
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b050:	647b      	str	r3, [r7, #68]	@ 0x44
 800b052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e6      	bne.n	800b032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2220      	movs	r2, #32
 800b068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e063      	b.n	800b140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0304 	and.w	r3, r3, #4
 800b082:	2b04      	cmp	r3, #4
 800b084:	d149      	bne.n	800b11a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b08e:	2200      	movs	r2, #0
 800b090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f857 	bl	800b148 <UART_WaitOnFlagUntilTimeout>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d03c      	beq.n	800b11a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f023 0301 	bic.w	r3, r3, #1
 800b0e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0f2:	61fa      	str	r2, [r7, #28]
 800b0f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	69b9      	ldr	r1, [r7, #24]
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e5      	bne.n	800b0d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e012      	b.n	800b140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3758      	adds	r7, #88	@ 0x58
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b158:	e04f      	b.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d04b      	beq.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b162:	f7fa f9d3 	bl	800550c <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d302      	bcc.n	800b178 <UART_WaitOnFlagUntilTimeout+0x30>
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e04e      	b.n	800b21a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d037      	beq.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2b80      	cmp	r3, #128	@ 0x80
 800b18e:	d034      	beq.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b40      	cmp	r3, #64	@ 0x40
 800b194:	d031      	beq.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	69db      	ldr	r3, [r3, #28]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d110      	bne.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f920 	bl	800b3f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2208      	movs	r2, #8
 800b1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e029      	b.n	800b21a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1d4:	d111      	bne.n	800b1fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 f906 	bl	800b3f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e00f      	b.n	800b21a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69da      	ldr	r2, [r3, #28]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	4013      	ands	r3, r2
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	429a      	cmp	r2, r3
 800b208:	bf0c      	ite	eq
 800b20a:	2301      	moveq	r3, #1
 800b20c:	2300      	movne	r3, #0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	461a      	mov	r2, r3
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	429a      	cmp	r2, r3
 800b216:	d0a0      	beq.n	800b15a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b096      	sub	sp, #88	@ 0x58
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	4613      	mov	r3, r2
 800b230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	88fa      	ldrh	r2, [r7, #6]
 800b23c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2222      	movs	r2, #34	@ 0x22
 800b24c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b256:	2b00      	cmp	r3, #0
 800b258:	d02d      	beq.n	800b2b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b260:	4a40      	ldr	r2, [pc, #256]	@ (800b364 <UART_Start_Receive_DMA+0x140>)
 800b262:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b26a:	4a3f      	ldr	r2, [pc, #252]	@ (800b368 <UART_Start_Receive_DMA+0x144>)
 800b26c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b274:	4a3d      	ldr	r2, [pc, #244]	@ (800b36c <UART_Start_Receive_DMA+0x148>)
 800b276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b27e:	2200      	movs	r2, #0
 800b280:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3324      	adds	r3, #36	@ 0x24
 800b28e:	4619      	mov	r1, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b294:	461a      	mov	r2, r3
 800b296:	88fb      	ldrh	r3, [r7, #6]
 800b298:	f7fa fafc 	bl	8005894 <HAL_DMA_Start_IT>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d009      	beq.n	800b2b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2210      	movs	r2, #16
 800b2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e051      	b.n	800b35a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d018      	beq.n	800b2f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c6:	e853 3f00 	ldrex	r3, [r3]
 800b2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2e4:	e841 2300 	strex	r3, r2, [r1]
 800b2e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1e6      	bne.n	800b2be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	f043 0301 	orr.w	r3, r3, #1
 800b306:	653b      	str	r3, [r7, #80]	@ 0x50
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3308      	adds	r3, #8
 800b30e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b310:	637a      	str	r2, [r7, #52]	@ 0x34
 800b312:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e5      	bne.n	800b2f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	613b      	str	r3, [r7, #16]
   return(result);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b33a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b344:	623a      	str	r2, [r7, #32]
 800b346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	69f9      	ldr	r1, [r7, #28]
 800b34a:	6a3a      	ldr	r2, [r7, #32]
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	61bb      	str	r3, [r7, #24]
   return(result);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e5      	bne.n	800b324 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3758      	adds	r7, #88	@ 0x58
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	0800b57d 	.word	0x0800b57d
 800b368:	0800b6b1 	.word	0x0800b6b1
 800b36c:	0800b6f7 	.word	0x0800b6f7

0800b370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b08f      	sub	sp, #60	@ 0x3c
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	61fb      	str	r3, [r7, #28]
   return(result);
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b398:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b39c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e6      	bne.n	800b378 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b3c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ca:	61ba      	str	r2, [r7, #24]
 800b3cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6979      	ldr	r1, [r7, #20]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b3e6:	bf00      	nop
 800b3e8:	373c      	adds	r7, #60	@ 0x3c
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b095      	sub	sp, #84	@ 0x54
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b402:	e853 3f00 	ldrex	r3, [r3]
 800b406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b418:	643b      	str	r3, [r7, #64]	@ 0x40
 800b41a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b41e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b420:	e841 2300 	strex	r3, r2, [r1]
 800b424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e6      	bne.n	800b3fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b442:	f023 0301 	bic.w	r3, r3, #1
 800b446:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e3      	bne.n	800b42c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d118      	bne.n	800b49e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	60bb      	str	r3, [r7, #8]
   return(result);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	647b      	str	r3, [r7, #68]	@ 0x44
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	6979      	ldr	r1, [r7, #20]
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	613b      	str	r3, [r7, #16]
   return(result);
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e6      	bne.n	800b46c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b4b2:	bf00      	nop
 800b4b4:	3754      	adds	r7, #84	@ 0x54
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b090      	sub	sp, #64	@ 0x40
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0320 	and.w	r3, r3, #32
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d137      	bne.n	800b54a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	e853 3f00 	ldrex	r3, [r3]
 800b4f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b502:	633a      	str	r2, [r7, #48]	@ 0x30
 800b504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e5      	bne.n	800b4e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	60fb      	str	r3, [r7, #12]
   return(result);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	61fb      	str	r3, [r7, #28]
 800b536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b538:	69b9      	ldr	r1, [r7, #24]
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	e841 2300 	strex	r3, r2, [r1]
 800b540:	617b      	str	r3, [r7, #20]
   return(result);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e6      	bne.n	800b516 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b548:	e004      	b.n	800b554 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b550:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b552:	4798      	blx	r3
}
 800b554:	bf00      	nop
 800b556:	3740      	adds	r7, #64	@ 0x40
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b568:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b09c      	sub	sp, #112	@ 0x70
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b588:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d171      	bne.n	800b67c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e6      	bne.n	800b5a0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e4:	f023 0301 	bic.w	r3, r3, #1
 800b5e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e5      	bne.n	800b5d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3308      	adds	r3, #8
 800b60c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	623b      	str	r3, [r7, #32]
   return(result);
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b61c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3308      	adds	r3, #8
 800b624:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b626:	633a      	str	r2, [r7, #48]	@ 0x30
 800b628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b62c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e5      	bne.n	800b606 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b63c:	2220      	movs	r2, #32
 800b63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b646:	2b01      	cmp	r3, #1
 800b648:	d118      	bne.n	800b67c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	60fb      	str	r3, [r7, #12]
   return(result);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 0310 	bic.w	r3, r3, #16
 800b65e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	461a      	mov	r2, r3
 800b666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	69b9      	ldr	r1, [r7, #24]
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	617b      	str	r3, [r7, #20]
   return(result);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e6      	bne.n	800b64a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67e:	2200      	movs	r2, #0
 800b680:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d109      	bne.n	800b69e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b68c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b690:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b692:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b696:	4611      	mov	r1, r2
 800b698:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b69a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b69c:	e004      	b.n	800b6a8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6a6:	4798      	blx	r3
}
 800b6a8:	bf00      	nop
 800b6aa:	3770      	adds	r7, #112	@ 0x70
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d10b      	bne.n	800b6e4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6d8:	0852      	lsrs	r2, r2, #1
 800b6da:	b292      	uxth	r2, r2
 800b6dc:	4611      	mov	r1, r2
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6e2:	e004      	b.n	800b6ee <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	4798      	blx	r3
}
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b702:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b70a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b712:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b71e:	2b80      	cmp	r3, #128	@ 0x80
 800b720:	d109      	bne.n	800b736 <UART_DMAError+0x40>
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	2b21      	cmp	r3, #33	@ 0x21
 800b726:	d106      	bne.n	800b736 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b730:	6978      	ldr	r0, [r7, #20]
 800b732:	f7ff fe1d 	bl	800b370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b740:	2b40      	cmp	r3, #64	@ 0x40
 800b742:	d109      	bne.n	800b758 <UART_DMAError+0x62>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b22      	cmp	r3, #34	@ 0x22
 800b748:	d106      	bne.n	800b758 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b752:	6978      	ldr	r0, [r7, #20]
 800b754:	f7ff fe4d 	bl	800b3f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b75e:	f043 0210 	orr.w	r2, r3, #16
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b772:	bf00      	nop
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	e853 3f00 	ldrex	r3, [r3]
 800b7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	6979      	ldr	r1, [r7, #20]
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e6      	bne.n	800b7aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2220      	movs	r2, #32
 800b7e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f4:	bf00      	nop
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b846:	2b01      	cmp	r3, #1
 800b848:	d101      	bne.n	800b84e <HAL_UARTEx_DisableFifoMode+0x16>
 800b84a:	2302      	movs	r3, #2
 800b84c:	e027      	b.n	800b89e <HAL_UARTEx_DisableFifoMode+0x66>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2224      	movs	r2, #36	@ 0x24
 800b85a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 0201 	bic.w	r2, r2, #1
 800b874:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b87c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2220      	movs	r2, #32
 800b890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d101      	bne.n	800b8c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8be:	2302      	movs	r3, #2
 800b8c0:	e02d      	b.n	800b91e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2224      	movs	r2, #36	@ 0x24
 800b8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f850 	bl	800b9a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b936:	2b01      	cmp	r3, #1
 800b938:	d101      	bne.n	800b93e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b93a:	2302      	movs	r3, #2
 800b93c:	e02d      	b.n	800b99a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2224      	movs	r2, #36	@ 0x24
 800b94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f812 	bl	800b9a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d108      	bne.n	800b9c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9c4:	e031      	b.n	800ba2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9c6:	2308      	movs	r3, #8
 800b9c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9ca:	2308      	movs	r3, #8
 800b9cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	0e5b      	lsrs	r3, r3, #25
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	0f5b      	lsrs	r3, r3, #29
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	7b3a      	ldrb	r2, [r7, #12]
 800b9f2:	4911      	ldr	r1, [pc, #68]	@ (800ba38 <UARTEx_SetNbDataToProcess+0x94>)
 800b9f4:	5c8a      	ldrb	r2, [r1, r2]
 800b9f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9fa:	7b3a      	ldrb	r2, [r7, #12]
 800b9fc:	490f      	ldr	r1, [pc, #60]	@ (800ba3c <UARTEx_SetNbDataToProcess+0x98>)
 800b9fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	7b7a      	ldrb	r2, [r7, #13]
 800ba10:	4909      	ldr	r1, [pc, #36]	@ (800ba38 <UARTEx_SetNbDataToProcess+0x94>)
 800ba12:	5c8a      	ldrb	r2, [r1, r2]
 800ba14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba18:	7b7a      	ldrb	r2, [r7, #13]
 800ba1a:	4908      	ldr	r1, [pc, #32]	@ (800ba3c <UARTEx_SetNbDataToProcess+0x98>)
 800ba1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba2a:	bf00      	nop
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	0800c98c 	.word	0x0800c98c
 800ba3c:	0800c994 	.word	0x0800c994

0800ba40 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	edd3 7a07 	vldr	s15, [r3, #28]
 800ba56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	edd3 7a08 	vldr	s15, [r3, #32]
 800ba60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ba70:	eeb1 7a67 	vneg.f32	s14, s15
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	edd3 7a08 	vldr	s15, [r3, #32]
 800ba7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a1a      	ldr	r2, [r3, #32]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d006      	beq.n	800baa4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	330c      	adds	r3, #12
 800ba9a:	220c      	movs	r2, #12
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f804 	bl	800baac <memset>
  }

}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <memset>:
 800baac:	4402      	add	r2, r0
 800baae:	4603      	mov	r3, r0
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d100      	bne.n	800bab6 <memset+0xa>
 800bab4:	4770      	bx	lr
 800bab6:	f803 1b01 	strb.w	r1, [r3], #1
 800baba:	e7f9      	b.n	800bab0 <memset+0x4>

0800babc <__errno>:
 800babc:	4b01      	ldr	r3, [pc, #4]	@ (800bac4 <__errno+0x8>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	2000020c 	.word	0x2000020c

0800bac8 <__libc_init_array>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	4d0d      	ldr	r5, [pc, #52]	@ (800bb00 <__libc_init_array+0x38>)
 800bacc:	4c0d      	ldr	r4, [pc, #52]	@ (800bb04 <__libc_init_array+0x3c>)
 800bace:	1b64      	subs	r4, r4, r5
 800bad0:	10a4      	asrs	r4, r4, #2
 800bad2:	2600      	movs	r6, #0
 800bad4:	42a6      	cmp	r6, r4
 800bad6:	d109      	bne.n	800baec <__libc_init_array+0x24>
 800bad8:	4d0b      	ldr	r5, [pc, #44]	@ (800bb08 <__libc_init_array+0x40>)
 800bada:	4c0c      	ldr	r4, [pc, #48]	@ (800bb0c <__libc_init_array+0x44>)
 800badc:	f000 ff32 	bl	800c944 <_init>
 800bae0:	1b64      	subs	r4, r4, r5
 800bae2:	10a4      	asrs	r4, r4, #2
 800bae4:	2600      	movs	r6, #0
 800bae6:	42a6      	cmp	r6, r4
 800bae8:	d105      	bne.n	800baf6 <__libc_init_array+0x2e>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf0:	4798      	blx	r3
 800baf2:	3601      	adds	r6, #1
 800baf4:	e7ee      	b.n	800bad4 <__libc_init_array+0xc>
 800baf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bafa:	4798      	blx	r3
 800bafc:	3601      	adds	r6, #1
 800bafe:	e7f2      	b.n	800bae6 <__libc_init_array+0x1e>
 800bb00:	0800cdac 	.word	0x0800cdac
 800bb04:	0800cdac 	.word	0x0800cdac
 800bb08:	0800cdac 	.word	0x0800cdac
 800bb0c:	0800cdb0 	.word	0x0800cdb0

0800bb10 <memcpy>:
 800bb10:	440a      	add	r2, r1
 800bb12:	4291      	cmp	r1, r2
 800bb14:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb18:	d100      	bne.n	800bb1c <memcpy+0xc>
 800bb1a:	4770      	bx	lr
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb26:	4291      	cmp	r1, r2
 800bb28:	d1f9      	bne.n	800bb1e <memcpy+0xe>
 800bb2a:	bd10      	pop	{r4, pc}

0800bb2c <atan2f>:
 800bb2c:	f000 b94c 	b.w	800bdc8 <__ieee754_atan2f>

0800bb30 <sqrtf>:
 800bb30:	b508      	push	{r3, lr}
 800bb32:	ed2d 8b02 	vpush	{d8}
 800bb36:	eeb0 8a40 	vmov.f32	s16, s0
 800bb3a:	f000 f8a1 	bl	800bc80 <__ieee754_sqrtf>
 800bb3e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	d60c      	bvs.n	800bb62 <sqrtf+0x32>
 800bb48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bb68 <sqrtf+0x38>
 800bb4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	d505      	bpl.n	800bb62 <sqrtf+0x32>
 800bb56:	f7ff ffb1 	bl	800babc <__errno>
 800bb5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb5e:	2321      	movs	r3, #33	@ 0x21
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	ecbd 8b02 	vpop	{d8}
 800bb66:	bd08      	pop	{r3, pc}
 800bb68:	00000000 	.word	0x00000000

0800bb6c <cosf>:
 800bb6c:	ee10 3a10 	vmov	r3, s0
 800bb70:	b507      	push	{r0, r1, r2, lr}
 800bb72:	4a1e      	ldr	r2, [pc, #120]	@ (800bbec <cosf+0x80>)
 800bb74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d806      	bhi.n	800bb8a <cosf+0x1e>
 800bb7c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bbf0 <cosf+0x84>
 800bb80:	b003      	add	sp, #12
 800bb82:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb86:	f000 b87f 	b.w	800bc88 <__kernel_cosf>
 800bb8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb8e:	d304      	bcc.n	800bb9a <cosf+0x2e>
 800bb90:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb94:	b003      	add	sp, #12
 800bb96:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb9a:	4668      	mov	r0, sp
 800bb9c:	f000 f9b4 	bl	800bf08 <__ieee754_rem_pio2f>
 800bba0:	f000 0003 	and.w	r0, r0, #3
 800bba4:	2801      	cmp	r0, #1
 800bba6:	d009      	beq.n	800bbbc <cosf+0x50>
 800bba8:	2802      	cmp	r0, #2
 800bbaa:	d010      	beq.n	800bbce <cosf+0x62>
 800bbac:	b9b0      	cbnz	r0, 800bbdc <cosf+0x70>
 800bbae:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbb2:	ed9d 0a00 	vldr	s0, [sp]
 800bbb6:	f000 f867 	bl	800bc88 <__kernel_cosf>
 800bbba:	e7eb      	b.n	800bb94 <cosf+0x28>
 800bbbc:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbc0:	ed9d 0a00 	vldr	s0, [sp]
 800bbc4:	f000 f8b8 	bl	800bd38 <__kernel_sinf>
 800bbc8:	eeb1 0a40 	vneg.f32	s0, s0
 800bbcc:	e7e2      	b.n	800bb94 <cosf+0x28>
 800bbce:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbd2:	ed9d 0a00 	vldr	s0, [sp]
 800bbd6:	f000 f857 	bl	800bc88 <__kernel_cosf>
 800bbda:	e7f5      	b.n	800bbc8 <cosf+0x5c>
 800bbdc:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbe0:	ed9d 0a00 	vldr	s0, [sp]
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f000 f8a7 	bl	800bd38 <__kernel_sinf>
 800bbea:	e7d3      	b.n	800bb94 <cosf+0x28>
 800bbec:	3f490fd8 	.word	0x3f490fd8
 800bbf0:	00000000 	.word	0x00000000

0800bbf4 <sinf>:
 800bbf4:	ee10 3a10 	vmov	r3, s0
 800bbf8:	b507      	push	{r0, r1, r2, lr}
 800bbfa:	4a1f      	ldr	r2, [pc, #124]	@ (800bc78 <sinf+0x84>)
 800bbfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d807      	bhi.n	800bc14 <sinf+0x20>
 800bc04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bc7c <sinf+0x88>
 800bc08:	2000      	movs	r0, #0
 800bc0a:	b003      	add	sp, #12
 800bc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc10:	f000 b892 	b.w	800bd38 <__kernel_sinf>
 800bc14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc18:	d304      	bcc.n	800bc24 <sinf+0x30>
 800bc1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bc1e:	b003      	add	sp, #12
 800bc20:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc24:	4668      	mov	r0, sp
 800bc26:	f000 f96f 	bl	800bf08 <__ieee754_rem_pio2f>
 800bc2a:	f000 0003 	and.w	r0, r0, #3
 800bc2e:	2801      	cmp	r0, #1
 800bc30:	d00a      	beq.n	800bc48 <sinf+0x54>
 800bc32:	2802      	cmp	r0, #2
 800bc34:	d00f      	beq.n	800bc56 <sinf+0x62>
 800bc36:	b9c0      	cbnz	r0, 800bc6a <sinf+0x76>
 800bc38:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc3c:	ed9d 0a00 	vldr	s0, [sp]
 800bc40:	2001      	movs	r0, #1
 800bc42:	f000 f879 	bl	800bd38 <__kernel_sinf>
 800bc46:	e7ea      	b.n	800bc1e <sinf+0x2a>
 800bc48:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc4c:	ed9d 0a00 	vldr	s0, [sp]
 800bc50:	f000 f81a 	bl	800bc88 <__kernel_cosf>
 800bc54:	e7e3      	b.n	800bc1e <sinf+0x2a>
 800bc56:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc5a:	ed9d 0a00 	vldr	s0, [sp]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	f000 f86a 	bl	800bd38 <__kernel_sinf>
 800bc64:	eeb1 0a40 	vneg.f32	s0, s0
 800bc68:	e7d9      	b.n	800bc1e <sinf+0x2a>
 800bc6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc6e:	ed9d 0a00 	vldr	s0, [sp]
 800bc72:	f000 f809 	bl	800bc88 <__kernel_cosf>
 800bc76:	e7f5      	b.n	800bc64 <sinf+0x70>
 800bc78:	3f490fd8 	.word	0x3f490fd8
 800bc7c:	00000000 	.word	0x00000000

0800bc80 <__ieee754_sqrtf>:
 800bc80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc84:	4770      	bx	lr
	...

0800bc88 <__kernel_cosf>:
 800bc88:	ee10 3a10 	vmov	r3, s0
 800bc8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bc94:	eef0 6a40 	vmov.f32	s13, s0
 800bc98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc9c:	d204      	bcs.n	800bca8 <__kernel_cosf+0x20>
 800bc9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bca2:	ee17 2a90 	vmov	r2, s15
 800bca6:	b342      	cbz	r2, 800bcfa <__kernel_cosf+0x72>
 800bca8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bcac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bd18 <__kernel_cosf+0x90>
 800bcb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bd1c <__kernel_cosf+0x94>
 800bcb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bd20 <__kernel_cosf+0x98>)
 800bcb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bd24 <__kernel_cosf+0x9c>
 800bcc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bcc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bd28 <__kernel_cosf+0xa0>
 800bcc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bccc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bd2c <__kernel_cosf+0xa4>
 800bcd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bcd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bd30 <__kernel_cosf+0xa8>
 800bcd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bcdc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bce0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bce4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bce8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bcec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf0:	d804      	bhi.n	800bcfc <__kernel_cosf+0x74>
 800bcf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bcf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bcfa:	4770      	bx	lr
 800bcfc:	4a0d      	ldr	r2, [pc, #52]	@ (800bd34 <__kernel_cosf+0xac>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bf9a      	itte	ls
 800bd02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bd06:	ee07 3a10 	vmovls	s14, r3
 800bd0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bd0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd16:	e7ec      	b.n	800bcf2 <__kernel_cosf+0x6a>
 800bd18:	ad47d74e 	.word	0xad47d74e
 800bd1c:	310f74f6 	.word	0x310f74f6
 800bd20:	3e999999 	.word	0x3e999999
 800bd24:	b493f27c 	.word	0xb493f27c
 800bd28:	37d00d01 	.word	0x37d00d01
 800bd2c:	bab60b61 	.word	0xbab60b61
 800bd30:	3d2aaaab 	.word	0x3d2aaaab
 800bd34:	3f480000 	.word	0x3f480000

0800bd38 <__kernel_sinf>:
 800bd38:	ee10 3a10 	vmov	r3, s0
 800bd3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd44:	d204      	bcs.n	800bd50 <__kernel_sinf+0x18>
 800bd46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd4a:	ee17 3a90 	vmov	r3, s15
 800bd4e:	b35b      	cbz	r3, 800bda8 <__kernel_sinf+0x70>
 800bd50:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bdac <__kernel_sinf+0x74>
 800bd58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bdb0 <__kernel_sinf+0x78>
 800bd5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bdb4 <__kernel_sinf+0x7c>
 800bd64:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bdb8 <__kernel_sinf+0x80>
 800bd6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bdbc <__kernel_sinf+0x84>
 800bd74:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bd78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd7c:	b930      	cbnz	r0, 800bd8c <__kernel_sinf+0x54>
 800bd7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bdc0 <__kernel_sinf+0x88>
 800bd82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd86:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bd8a:	4770      	bx	lr
 800bd8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bd94:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bd98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bd9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bdc4 <__kernel_sinf+0x8c>
 800bda0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bda4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	2f2ec9d3 	.word	0x2f2ec9d3
 800bdb0:	b2d72f34 	.word	0xb2d72f34
 800bdb4:	3638ef1b 	.word	0x3638ef1b
 800bdb8:	b9500d01 	.word	0xb9500d01
 800bdbc:	3c088889 	.word	0x3c088889
 800bdc0:	be2aaaab 	.word	0xbe2aaaab
 800bdc4:	3e2aaaab 	.word	0x3e2aaaab

0800bdc8 <__ieee754_atan2f>:
 800bdc8:	ee10 2a90 	vmov	r2, s1
 800bdcc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bdd0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	eef0 7a40 	vmov.f32	s15, s0
 800bdda:	d806      	bhi.n	800bdea <__ieee754_atan2f+0x22>
 800bddc:	ee10 0a10 	vmov	r0, s0
 800bde0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bde4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bde8:	d904      	bls.n	800bdf4 <__ieee754_atan2f+0x2c>
 800bdea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bdee:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf2:	bd10      	pop	{r4, pc}
 800bdf4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bdf8:	d103      	bne.n	800be02 <__ieee754_atan2f+0x3a>
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfe:	f000 b9b3 	b.w	800c168 <atanf>
 800be02:	1794      	asrs	r4, r2, #30
 800be04:	f004 0402 	and.w	r4, r4, #2
 800be08:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800be0c:	b943      	cbnz	r3, 800be20 <__ieee754_atan2f+0x58>
 800be0e:	2c02      	cmp	r4, #2
 800be10:	d05e      	beq.n	800bed0 <__ieee754_atan2f+0x108>
 800be12:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bee4 <__ieee754_atan2f+0x11c>
 800be16:	2c03      	cmp	r4, #3
 800be18:	bf08      	it	eq
 800be1a:	eef0 7a47 	vmoveq.f32	s15, s14
 800be1e:	e7e6      	b.n	800bdee <__ieee754_atan2f+0x26>
 800be20:	b941      	cbnz	r1, 800be34 <__ieee754_atan2f+0x6c>
 800be22:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bee8 <__ieee754_atan2f+0x120>
 800be26:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800beec <__ieee754_atan2f+0x124>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	bfa8      	it	ge
 800be2e:	eef0 7a47 	vmovge.f32	s15, s14
 800be32:	e7dc      	b.n	800bdee <__ieee754_atan2f+0x26>
 800be34:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800be38:	d110      	bne.n	800be5c <__ieee754_atan2f+0x94>
 800be3a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800be42:	d107      	bne.n	800be54 <__ieee754_atan2f+0x8c>
 800be44:	2c02      	cmp	r4, #2
 800be46:	d846      	bhi.n	800bed6 <__ieee754_atan2f+0x10e>
 800be48:	4b29      	ldr	r3, [pc, #164]	@ (800bef0 <__ieee754_atan2f+0x128>)
 800be4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be4e:	edd3 7a00 	vldr	s15, [r3]
 800be52:	e7cc      	b.n	800bdee <__ieee754_atan2f+0x26>
 800be54:	2c02      	cmp	r4, #2
 800be56:	d841      	bhi.n	800bedc <__ieee754_atan2f+0x114>
 800be58:	4b26      	ldr	r3, [pc, #152]	@ (800bef4 <__ieee754_atan2f+0x12c>)
 800be5a:	e7f6      	b.n	800be4a <__ieee754_atan2f+0x82>
 800be5c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be60:	d0df      	beq.n	800be22 <__ieee754_atan2f+0x5a>
 800be62:	1a5b      	subs	r3, r3, r1
 800be64:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800be68:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800be6c:	da1a      	bge.n	800bea4 <__ieee754_atan2f+0xdc>
 800be6e:	2a00      	cmp	r2, #0
 800be70:	da01      	bge.n	800be76 <__ieee754_atan2f+0xae>
 800be72:	313c      	adds	r1, #60	@ 0x3c
 800be74:	db19      	blt.n	800beaa <__ieee754_atan2f+0xe2>
 800be76:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800be7a:	f000 fa49 	bl	800c310 <fabsf>
 800be7e:	f000 f973 	bl	800c168 <atanf>
 800be82:	eef0 7a40 	vmov.f32	s15, s0
 800be86:	2c01      	cmp	r4, #1
 800be88:	d012      	beq.n	800beb0 <__ieee754_atan2f+0xe8>
 800be8a:	2c02      	cmp	r4, #2
 800be8c:	d017      	beq.n	800bebe <__ieee754_atan2f+0xf6>
 800be8e:	2c00      	cmp	r4, #0
 800be90:	d0ad      	beq.n	800bdee <__ieee754_atan2f+0x26>
 800be92:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bef8 <__ieee754_atan2f+0x130>
 800be96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be9a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800befc <__ieee754_atan2f+0x134>
 800be9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bea2:	e7a4      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bea4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800beec <__ieee754_atan2f+0x124>
 800bea8:	e7ed      	b.n	800be86 <__ieee754_atan2f+0xbe>
 800beaa:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bf00 <__ieee754_atan2f+0x138>
 800beae:	e7ea      	b.n	800be86 <__ieee754_atan2f+0xbe>
 800beb0:	ee17 3a90 	vmov	r3, s15
 800beb4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	e797      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bebe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bef8 <__ieee754_atan2f+0x130>
 800bec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bec6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800befc <__ieee754_atan2f+0x134>
 800beca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bece:	e78e      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bed0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800befc <__ieee754_atan2f+0x134>
 800bed4:	e78b      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bed6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bf04 <__ieee754_atan2f+0x13c>
 800beda:	e788      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bedc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bf00 <__ieee754_atan2f+0x138>
 800bee0:	e785      	b.n	800bdee <__ieee754_atan2f+0x26>
 800bee2:	bf00      	nop
 800bee4:	c0490fdb 	.word	0xc0490fdb
 800bee8:	bfc90fdb 	.word	0xbfc90fdb
 800beec:	3fc90fdb 	.word	0x3fc90fdb
 800bef0:	0800c9a8 	.word	0x0800c9a8
 800bef4:	0800c99c 	.word	0x0800c99c
 800bef8:	33bbbd2e 	.word	0x33bbbd2e
 800befc:	40490fdb 	.word	0x40490fdb
 800bf00:	00000000 	.word	0x00000000
 800bf04:	3f490fdb 	.word	0x3f490fdb

0800bf08 <__ieee754_rem_pio2f>:
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	ee10 6a10 	vmov	r6, s0
 800bf0e:	4b88      	ldr	r3, [pc, #544]	@ (800c130 <__ieee754_rem_pio2f+0x228>)
 800bf10:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bf14:	429d      	cmp	r5, r3
 800bf16:	b087      	sub	sp, #28
 800bf18:	4604      	mov	r4, r0
 800bf1a:	d805      	bhi.n	800bf28 <__ieee754_rem_pio2f+0x20>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	ed80 0a00 	vstr	s0, [r0]
 800bf22:	6043      	str	r3, [r0, #4]
 800bf24:	2000      	movs	r0, #0
 800bf26:	e022      	b.n	800bf6e <__ieee754_rem_pio2f+0x66>
 800bf28:	4b82      	ldr	r3, [pc, #520]	@ (800c134 <__ieee754_rem_pio2f+0x22c>)
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	d83a      	bhi.n	800bfa4 <__ieee754_rem_pio2f+0x9c>
 800bf2e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c138 <__ieee754_rem_pio2f+0x230>
 800bf38:	4a80      	ldr	r2, [pc, #512]	@ (800c13c <__ieee754_rem_pio2f+0x234>)
 800bf3a:	f023 030f 	bic.w	r3, r3, #15
 800bf3e:	dd18      	ble.n	800bf72 <__ieee754_rem_pio2f+0x6a>
 800bf40:	4293      	cmp	r3, r2
 800bf42:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bf46:	bf09      	itett	eq
 800bf48:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c140 <__ieee754_rem_pio2f+0x238>
 800bf4c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c144 <__ieee754_rem_pio2f+0x23c>
 800bf50:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c148 <__ieee754_rem_pio2f+0x240>
 800bf54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bf58:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bf5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf60:	ed80 7a00 	vstr	s14, [r0]
 800bf64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf68:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	b007      	add	sp, #28
 800bf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf72:	4293      	cmp	r3, r2
 800bf74:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bf78:	bf09      	itett	eq
 800bf7a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c140 <__ieee754_rem_pio2f+0x238>
 800bf7e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c144 <__ieee754_rem_pio2f+0x23c>
 800bf82:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c148 <__ieee754_rem_pio2f+0x240>
 800bf86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bf8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf92:	ed80 7a00 	vstr	s14, [r0]
 800bf96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9a:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa2:	e7e4      	b.n	800bf6e <__ieee754_rem_pio2f+0x66>
 800bfa4:	4b69      	ldr	r3, [pc, #420]	@ (800c14c <__ieee754_rem_pio2f+0x244>)
 800bfa6:	429d      	cmp	r5, r3
 800bfa8:	d873      	bhi.n	800c092 <__ieee754_rem_pio2f+0x18a>
 800bfaa:	f000 f9b1 	bl	800c310 <fabsf>
 800bfae:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c150 <__ieee754_rem_pio2f+0x248>
 800bfb2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bfb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bfba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bfc2:	ee17 0a90 	vmov	r0, s15
 800bfc6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c138 <__ieee754_rem_pio2f+0x230>
 800bfca:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bfce:	281f      	cmp	r0, #31
 800bfd0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c144 <__ieee754_rem_pio2f+0x23c>
 800bfd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd8:	eeb1 6a47 	vneg.f32	s12, s14
 800bfdc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bfe0:	ee16 1a90 	vmov	r1, s13
 800bfe4:	dc09      	bgt.n	800bffa <__ieee754_rem_pio2f+0xf2>
 800bfe6:	4a5b      	ldr	r2, [pc, #364]	@ (800c154 <__ieee754_rem_pio2f+0x24c>)
 800bfe8:	1e47      	subs	r7, r0, #1
 800bfea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bfee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d107      	bne.n	800c00a <__ieee754_rem_pio2f+0x102>
 800bffa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bffe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c002:	2a08      	cmp	r2, #8
 800c004:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c008:	dc14      	bgt.n	800c034 <__ieee754_rem_pio2f+0x12c>
 800c00a:	6021      	str	r1, [r4, #0]
 800c00c:	ed94 7a00 	vldr	s14, [r4]
 800c010:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c014:	2e00      	cmp	r6, #0
 800c016:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c01a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c01e:	daa6      	bge.n	800bf6e <__ieee754_rem_pio2f+0x66>
 800c020:	eeb1 7a47 	vneg.f32	s14, s14
 800c024:	eeb1 0a40 	vneg.f32	s0, s0
 800c028:	ed84 7a00 	vstr	s14, [r4]
 800c02c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c030:	4240      	negs	r0, r0
 800c032:	e79c      	b.n	800bf6e <__ieee754_rem_pio2f+0x66>
 800c034:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c140 <__ieee754_rem_pio2f+0x238>
 800c038:	eef0 6a40 	vmov.f32	s13, s0
 800c03c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c040:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c044:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c048:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c148 <__ieee754_rem_pio2f+0x240>
 800c04c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c050:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c054:	ee15 2a90 	vmov	r2, s11
 800c058:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c05c:	1a5b      	subs	r3, r3, r1
 800c05e:	2b19      	cmp	r3, #25
 800c060:	dc04      	bgt.n	800c06c <__ieee754_rem_pio2f+0x164>
 800c062:	edc4 5a00 	vstr	s11, [r4]
 800c066:	eeb0 0a66 	vmov.f32	s0, s13
 800c06a:	e7cf      	b.n	800c00c <__ieee754_rem_pio2f+0x104>
 800c06c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c158 <__ieee754_rem_pio2f+0x250>
 800c070:	eeb0 0a66 	vmov.f32	s0, s13
 800c074:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c078:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c07c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c15c <__ieee754_rem_pio2f+0x254>
 800c080:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c084:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c088:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c08c:	ed84 7a00 	vstr	s14, [r4]
 800c090:	e7bc      	b.n	800c00c <__ieee754_rem_pio2f+0x104>
 800c092:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c096:	d306      	bcc.n	800c0a6 <__ieee754_rem_pio2f+0x19e>
 800c098:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c09c:	edc0 7a01 	vstr	s15, [r0, #4]
 800c0a0:	edc0 7a00 	vstr	s15, [r0]
 800c0a4:	e73e      	b.n	800bf24 <__ieee754_rem_pio2f+0x1c>
 800c0a6:	15ea      	asrs	r2, r5, #23
 800c0a8:	3a86      	subs	r2, #134	@ 0x86
 800c0aa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c0b6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c160 <__ieee754_rem_pio2f+0x258>
 800c0ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c0be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0c2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c0c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c0ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c0ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c0d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0d6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c0da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c0de:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e6:	edcd 7a05 	vstr	s15, [sp, #20]
 800c0ea:	d11e      	bne.n	800c12a <__ieee754_rem_pio2f+0x222>
 800c0ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f4:	bf0c      	ite	eq
 800c0f6:	2301      	moveq	r3, #1
 800c0f8:	2302      	movne	r3, #2
 800c0fa:	491a      	ldr	r1, [pc, #104]	@ (800c164 <__ieee754_rem_pio2f+0x25c>)
 800c0fc:	9101      	str	r1, [sp, #4]
 800c0fe:	2102      	movs	r1, #2
 800c100:	9100      	str	r1, [sp, #0]
 800c102:	a803      	add	r0, sp, #12
 800c104:	4621      	mov	r1, r4
 800c106:	f000 f971 	bl	800c3ec <__kernel_rem_pio2f>
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	f6bf af2f 	bge.w	800bf6e <__ieee754_rem_pio2f+0x66>
 800c110:	edd4 7a00 	vldr	s15, [r4]
 800c114:	eef1 7a67 	vneg.f32	s15, s15
 800c118:	edc4 7a00 	vstr	s15, [r4]
 800c11c:	edd4 7a01 	vldr	s15, [r4, #4]
 800c120:	eef1 7a67 	vneg.f32	s15, s15
 800c124:	edc4 7a01 	vstr	s15, [r4, #4]
 800c128:	e782      	b.n	800c030 <__ieee754_rem_pio2f+0x128>
 800c12a:	2303      	movs	r3, #3
 800c12c:	e7e5      	b.n	800c0fa <__ieee754_rem_pio2f+0x1f2>
 800c12e:	bf00      	nop
 800c130:	3f490fd8 	.word	0x3f490fd8
 800c134:	4016cbe3 	.word	0x4016cbe3
 800c138:	3fc90f80 	.word	0x3fc90f80
 800c13c:	3fc90fd0 	.word	0x3fc90fd0
 800c140:	37354400 	.word	0x37354400
 800c144:	37354443 	.word	0x37354443
 800c148:	2e85a308 	.word	0x2e85a308
 800c14c:	43490f80 	.word	0x43490f80
 800c150:	3f22f984 	.word	0x3f22f984
 800c154:	0800c9b4 	.word	0x0800c9b4
 800c158:	2e85a300 	.word	0x2e85a300
 800c15c:	248d3132 	.word	0x248d3132
 800c160:	43800000 	.word	0x43800000
 800c164:	0800ca34 	.word	0x0800ca34

0800c168 <atanf>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	ee10 5a10 	vmov	r5, s0
 800c16e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c172:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c176:	eef0 7a40 	vmov.f32	s15, s0
 800c17a:	d310      	bcc.n	800c19e <atanf+0x36>
 800c17c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c180:	d904      	bls.n	800c18c <atanf+0x24>
 800c182:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c186:	eeb0 0a67 	vmov.f32	s0, s15
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c2c4 <atanf+0x15c>
 800c190:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c2c8 <atanf+0x160>
 800c194:	2d00      	cmp	r5, #0
 800c196:	bfc8      	it	gt
 800c198:	eef0 7a47 	vmovgt.f32	s15, s14
 800c19c:	e7f3      	b.n	800c186 <atanf+0x1e>
 800c19e:	4b4b      	ldr	r3, [pc, #300]	@ (800c2cc <atanf+0x164>)
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	d810      	bhi.n	800c1c6 <atanf+0x5e>
 800c1a4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c1a8:	d20a      	bcs.n	800c1c0 <atanf+0x58>
 800c1aa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c2d0 <atanf+0x168>
 800c1ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c1b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	dce2      	bgt.n	800c186 <atanf+0x1e>
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c4:	e013      	b.n	800c1ee <atanf+0x86>
 800c1c6:	f000 f8a3 	bl	800c310 <fabsf>
 800c1ca:	4b42      	ldr	r3, [pc, #264]	@ (800c2d4 <atanf+0x16c>)
 800c1cc:	429c      	cmp	r4, r3
 800c1ce:	d84f      	bhi.n	800c270 <atanf+0x108>
 800c1d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	d841      	bhi.n	800c25c <atanf+0xf4>
 800c1d8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c1dc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c1e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c1ee:	1c5a      	adds	r2, r3, #1
 800c1f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c1f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c2d8 <atanf+0x170>
 800c1f8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c2dc <atanf+0x174>
 800c1fc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c2e0 <atanf+0x178>
 800c200:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c204:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c208:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c2e4 <atanf+0x17c>
 800c20c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c210:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c2e8 <atanf+0x180>
 800c214:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c218:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c2ec <atanf+0x184>
 800c21c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c220:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c2f0 <atanf+0x188>
 800c224:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c228:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c2f4 <atanf+0x18c>
 800c22c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c230:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c2f8 <atanf+0x190>
 800c234:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c238:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c2fc <atanf+0x194>
 800c23c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c240:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c300 <atanf+0x198>
 800c244:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c248:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c24c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c250:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c254:	d121      	bne.n	800c29a <atanf+0x132>
 800c256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c25a:	e794      	b.n	800c186 <atanf+0x1e>
 800c25c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c260:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c264:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c268:	2301      	movs	r3, #1
 800c26a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c26e:	e7be      	b.n	800c1ee <atanf+0x86>
 800c270:	4b24      	ldr	r3, [pc, #144]	@ (800c304 <atanf+0x19c>)
 800c272:	429c      	cmp	r4, r3
 800c274:	d80b      	bhi.n	800c28e <atanf+0x126>
 800c276:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c27a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c27e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c282:	2302      	movs	r3, #2
 800c284:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c28c:	e7af      	b.n	800c1ee <atanf+0x86>
 800c28e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c292:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c296:	2303      	movs	r3, #3
 800c298:	e7a9      	b.n	800c1ee <atanf+0x86>
 800c29a:	4a1b      	ldr	r2, [pc, #108]	@ (800c308 <atanf+0x1a0>)
 800c29c:	491b      	ldr	r1, [pc, #108]	@ (800c30c <atanf+0x1a4>)
 800c29e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c2a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c2a6:	edd3 6a00 	vldr	s13, [r3]
 800c2aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2b4:	edd2 7a00 	vldr	s15, [r2]
 800c2b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2bc:	bfb8      	it	lt
 800c2be:	eef1 7a67 	vneglt.f32	s15, s15
 800c2c2:	e760      	b.n	800c186 <atanf+0x1e>
 800c2c4:	bfc90fdb 	.word	0xbfc90fdb
 800c2c8:	3fc90fdb 	.word	0x3fc90fdb
 800c2cc:	3edfffff 	.word	0x3edfffff
 800c2d0:	7149f2ca 	.word	0x7149f2ca
 800c2d4:	3f97ffff 	.word	0x3f97ffff
 800c2d8:	3c8569d7 	.word	0x3c8569d7
 800c2dc:	3d4bda59 	.word	0x3d4bda59
 800c2e0:	bd6ef16b 	.word	0xbd6ef16b
 800c2e4:	3d886b35 	.word	0x3d886b35
 800c2e8:	3dba2e6e 	.word	0x3dba2e6e
 800c2ec:	3e124925 	.word	0x3e124925
 800c2f0:	3eaaaaab 	.word	0x3eaaaaab
 800c2f4:	bd15a221 	.word	0xbd15a221
 800c2f8:	bd9d8795 	.word	0xbd9d8795
 800c2fc:	bde38e38 	.word	0xbde38e38
 800c300:	be4ccccd 	.word	0xbe4ccccd
 800c304:	401bffff 	.word	0x401bffff
 800c308:	0800cd5c 	.word	0x0800cd5c
 800c30c:	0800cd4c 	.word	0x0800cd4c

0800c310 <fabsf>:
 800c310:	ee10 3a10 	vmov	r3, s0
 800c314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c318:	ee00 3a10 	vmov	s0, r3
 800c31c:	4770      	bx	lr
	...

0800c320 <scalbnf>:
 800c320:	ee10 3a10 	vmov	r3, s0
 800c324:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c328:	d02b      	beq.n	800c382 <scalbnf+0x62>
 800c32a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c32e:	d302      	bcc.n	800c336 <scalbnf+0x16>
 800c330:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c334:	4770      	bx	lr
 800c336:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c33a:	d123      	bne.n	800c384 <scalbnf+0x64>
 800c33c:	4b24      	ldr	r3, [pc, #144]	@ (800c3d0 <scalbnf+0xb0>)
 800c33e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c3d4 <scalbnf+0xb4>
 800c342:	4298      	cmp	r0, r3
 800c344:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c348:	db17      	blt.n	800c37a <scalbnf+0x5a>
 800c34a:	ee10 3a10 	vmov	r3, s0
 800c34e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c352:	3a19      	subs	r2, #25
 800c354:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c358:	4288      	cmp	r0, r1
 800c35a:	dd15      	ble.n	800c388 <scalbnf+0x68>
 800c35c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c3d8 <scalbnf+0xb8>
 800c360:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c3dc <scalbnf+0xbc>
 800c364:	ee10 3a10 	vmov	r3, s0
 800c368:	eeb0 7a67 	vmov.f32	s14, s15
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bfb8      	it	lt
 800c370:	eef0 7a66 	vmovlt.f32	s15, s13
 800c374:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c378:	4770      	bx	lr
 800c37a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c3e0 <scalbnf+0xc0>
 800c37e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c382:	4770      	bx	lr
 800c384:	0dd2      	lsrs	r2, r2, #23
 800c386:	e7e5      	b.n	800c354 <scalbnf+0x34>
 800c388:	4410      	add	r0, r2
 800c38a:	28fe      	cmp	r0, #254	@ 0xfe
 800c38c:	dce6      	bgt.n	800c35c <scalbnf+0x3c>
 800c38e:	2800      	cmp	r0, #0
 800c390:	dd06      	ble.n	800c3a0 <scalbnf+0x80>
 800c392:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c396:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c39a:	ee00 3a10 	vmov	s0, r3
 800c39e:	4770      	bx	lr
 800c3a0:	f110 0f16 	cmn.w	r0, #22
 800c3a4:	da09      	bge.n	800c3ba <scalbnf+0x9a>
 800c3a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c3e0 <scalbnf+0xc0>
 800c3aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c3e4 <scalbnf+0xc4>
 800c3ae:	ee10 3a10 	vmov	r3, s0
 800c3b2:	eeb0 7a67 	vmov.f32	s14, s15
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	e7d9      	b.n	800c36e <scalbnf+0x4e>
 800c3ba:	3019      	adds	r0, #25
 800c3bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c3c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c3c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c3e8 <scalbnf+0xc8>
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	e7d7      	b.n	800c37e <scalbnf+0x5e>
 800c3ce:	bf00      	nop
 800c3d0:	ffff3cb0 	.word	0xffff3cb0
 800c3d4:	4c000000 	.word	0x4c000000
 800c3d8:	7149f2ca 	.word	0x7149f2ca
 800c3dc:	f149f2ca 	.word	0xf149f2ca
 800c3e0:	0da24260 	.word	0x0da24260
 800c3e4:	8da24260 	.word	0x8da24260
 800c3e8:	33000000 	.word	0x33000000

0800c3ec <__kernel_rem_pio2f>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	ed2d 8b04 	vpush	{d8-d9}
 800c3f4:	b0d9      	sub	sp, #356	@ 0x164
 800c3f6:	4690      	mov	r8, r2
 800c3f8:	9001      	str	r0, [sp, #4]
 800c3fa:	4ab6      	ldr	r2, [pc, #728]	@ (800c6d4 <__kernel_rem_pio2f+0x2e8>)
 800c3fc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c3fe:	f118 0f04 	cmn.w	r8, #4
 800c402:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c406:	460f      	mov	r7, r1
 800c408:	f103 3bff 	add.w	fp, r3, #4294967295
 800c40c:	db26      	blt.n	800c45c <__kernel_rem_pio2f+0x70>
 800c40e:	f1b8 0203 	subs.w	r2, r8, #3
 800c412:	bf48      	it	mi
 800c414:	f108 0204 	addmi.w	r2, r8, #4
 800c418:	10d2      	asrs	r2, r2, #3
 800c41a:	1c55      	adds	r5, r2, #1
 800c41c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c41e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c422:	00e8      	lsls	r0, r5, #3
 800c424:	eba2 060b 	sub.w	r6, r2, fp
 800c428:	9002      	str	r0, [sp, #8]
 800c42a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c42e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c432:	ac1c      	add	r4, sp, #112	@ 0x70
 800c434:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c438:	2000      	movs	r0, #0
 800c43a:	4560      	cmp	r0, ip
 800c43c:	dd10      	ble.n	800c460 <__kernel_rem_pio2f+0x74>
 800c43e:	a91c      	add	r1, sp, #112	@ 0x70
 800c440:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c444:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c448:	2600      	movs	r6, #0
 800c44a:	4556      	cmp	r6, sl
 800c44c:	dc24      	bgt.n	800c498 <__kernel_rem_pio2f+0xac>
 800c44e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c452:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c456:	4684      	mov	ip, r0
 800c458:	2400      	movs	r4, #0
 800c45a:	e016      	b.n	800c48a <__kernel_rem_pio2f+0x9e>
 800c45c:	2200      	movs	r2, #0
 800c45e:	e7dc      	b.n	800c41a <__kernel_rem_pio2f+0x2e>
 800c460:	42c6      	cmn	r6, r0
 800c462:	bf5d      	ittte	pl
 800c464:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c468:	ee07 1a90 	vmovpl	s15, r1
 800c46c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c470:	eef0 7a47 	vmovmi.f32	s15, s14
 800c474:	ece4 7a01 	vstmia	r4!, {s15}
 800c478:	3001      	adds	r0, #1
 800c47a:	e7de      	b.n	800c43a <__kernel_rem_pio2f+0x4e>
 800c47c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c480:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c484:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c488:	3401      	adds	r4, #1
 800c48a:	455c      	cmp	r4, fp
 800c48c:	ddf6      	ble.n	800c47c <__kernel_rem_pio2f+0x90>
 800c48e:	ece9 7a01 	vstmia	r9!, {s15}
 800c492:	3601      	adds	r6, #1
 800c494:	3004      	adds	r0, #4
 800c496:	e7d8      	b.n	800c44a <__kernel_rem_pio2f+0x5e>
 800c498:	a908      	add	r1, sp, #32
 800c49a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c49e:	9104      	str	r1, [sp, #16]
 800c4a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c4a2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c6e0 <__kernel_rem_pio2f+0x2f4>
 800c4a6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c6dc <__kernel_rem_pio2f+0x2f0>
 800c4aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c4ae:	9203      	str	r2, [sp, #12]
 800c4b0:	4654      	mov	r4, sl
 800c4b2:	00a2      	lsls	r2, r4, #2
 800c4b4:	9205      	str	r2, [sp, #20]
 800c4b6:	aa58      	add	r2, sp, #352	@ 0x160
 800c4b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c4bc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c4c0:	a944      	add	r1, sp, #272	@ 0x110
 800c4c2:	aa08      	add	r2, sp, #32
 800c4c4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c4c8:	4694      	mov	ip, r2
 800c4ca:	4626      	mov	r6, r4
 800c4cc:	2e00      	cmp	r6, #0
 800c4ce:	dc4c      	bgt.n	800c56a <__kernel_rem_pio2f+0x17e>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4d6:	f7ff ff23 	bl	800c320 <scalbnf>
 800c4da:	eeb0 8a40 	vmov.f32	s16, s0
 800c4de:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c4e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c4e6:	f000 f9e9 	bl	800c8bc <floorf>
 800c4ea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c4ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c4fc:	ee17 9a90 	vmov	r9, s15
 800c500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c504:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c508:	dd41      	ble.n	800c58e <__kernel_rem_pio2f+0x1a2>
 800c50a:	f104 3cff 	add.w	ip, r4, #4294967295
 800c50e:	a908      	add	r1, sp, #32
 800c510:	f1c5 0e08 	rsb	lr, r5, #8
 800c514:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c518:	fa46 f00e 	asr.w	r0, r6, lr
 800c51c:	4481      	add	r9, r0
 800c51e:	fa00 f00e 	lsl.w	r0, r0, lr
 800c522:	1a36      	subs	r6, r6, r0
 800c524:	f1c5 0007 	rsb	r0, r5, #7
 800c528:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c52c:	4106      	asrs	r6, r0
 800c52e:	2e00      	cmp	r6, #0
 800c530:	dd3c      	ble.n	800c5ac <__kernel_rem_pio2f+0x1c0>
 800c532:	f04f 0e00 	mov.w	lr, #0
 800c536:	f109 0901 	add.w	r9, r9, #1
 800c53a:	4670      	mov	r0, lr
 800c53c:	4574      	cmp	r4, lr
 800c53e:	dc68      	bgt.n	800c612 <__kernel_rem_pio2f+0x226>
 800c540:	2d00      	cmp	r5, #0
 800c542:	dd03      	ble.n	800c54c <__kernel_rem_pio2f+0x160>
 800c544:	2d01      	cmp	r5, #1
 800c546:	d074      	beq.n	800c632 <__kernel_rem_pio2f+0x246>
 800c548:	2d02      	cmp	r5, #2
 800c54a:	d07d      	beq.n	800c648 <__kernel_rem_pio2f+0x25c>
 800c54c:	2e02      	cmp	r6, #2
 800c54e:	d12d      	bne.n	800c5ac <__kernel_rem_pio2f+0x1c0>
 800c550:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c554:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c558:	b340      	cbz	r0, 800c5ac <__kernel_rem_pio2f+0x1c0>
 800c55a:	4628      	mov	r0, r5
 800c55c:	9306      	str	r3, [sp, #24]
 800c55e:	f7ff fedf 	bl	800c320 <scalbnf>
 800c562:	9b06      	ldr	r3, [sp, #24]
 800c564:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c568:	e020      	b.n	800c5ac <__kernel_rem_pio2f+0x1c0>
 800c56a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c56e:	3e01      	subs	r6, #1
 800c570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c578:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c57c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c580:	ecac 0a01 	vstmia	ip!, {s0}
 800c584:	ed30 0a01 	vldmdb	r0!, {s0}
 800c588:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c58c:	e79e      	b.n	800c4cc <__kernel_rem_pio2f+0xe0>
 800c58e:	d105      	bne.n	800c59c <__kernel_rem_pio2f+0x1b0>
 800c590:	1e60      	subs	r0, r4, #1
 800c592:	a908      	add	r1, sp, #32
 800c594:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c598:	11f6      	asrs	r6, r6, #7
 800c59a:	e7c8      	b.n	800c52e <__kernel_rem_pio2f+0x142>
 800c59c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c5a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	da31      	bge.n	800c60e <__kernel_rem_pio2f+0x222>
 800c5aa:	2600      	movs	r6, #0
 800c5ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b4:	f040 8098 	bne.w	800c6e8 <__kernel_rem_pio2f+0x2fc>
 800c5b8:	1e60      	subs	r0, r4, #1
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4550      	cmp	r0, sl
 800c5be:	da4b      	bge.n	800c658 <__kernel_rem_pio2f+0x26c>
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	d065      	beq.n	800c690 <__kernel_rem_pio2f+0x2a4>
 800c5c4:	3c01      	subs	r4, #1
 800c5c6:	ab08      	add	r3, sp, #32
 800c5c8:	3d08      	subs	r5, #8
 800c5ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f8      	beq.n	800c5c4 <__kernel_rem_pio2f+0x1d8>
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c5d8:	f7ff fea2 	bl	800c320 <scalbnf>
 800c5dc:	1c63      	adds	r3, r4, #1
 800c5de:	aa44      	add	r2, sp, #272	@ 0x110
 800c5e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c6e0 <__kernel_rem_pio2f+0x2f4>
 800c5e4:	0099      	lsls	r1, r3, #2
 800c5e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c5ea:	4623      	mov	r3, r4
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f280 80a9 	bge.w	800c744 <__kernel_rem_pio2f+0x358>
 800c5f2:	4623      	mov	r3, r4
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f2c0 80c7 	blt.w	800c788 <__kernel_rem_pio2f+0x39c>
 800c5fa:	aa44      	add	r2, sp, #272	@ 0x110
 800c5fc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c600:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c6d8 <__kernel_rem_pio2f+0x2ec>
 800c604:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c608:	2000      	movs	r0, #0
 800c60a:	1ae2      	subs	r2, r4, r3
 800c60c:	e0b1      	b.n	800c772 <__kernel_rem_pio2f+0x386>
 800c60e:	2602      	movs	r6, #2
 800c610:	e78f      	b.n	800c532 <__kernel_rem_pio2f+0x146>
 800c612:	f852 1b04 	ldr.w	r1, [r2], #4
 800c616:	b948      	cbnz	r0, 800c62c <__kernel_rem_pio2f+0x240>
 800c618:	b121      	cbz	r1, 800c624 <__kernel_rem_pio2f+0x238>
 800c61a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c61e:	f842 1c04 	str.w	r1, [r2, #-4]
 800c622:	2101      	movs	r1, #1
 800c624:	f10e 0e01 	add.w	lr, lr, #1
 800c628:	4608      	mov	r0, r1
 800c62a:	e787      	b.n	800c53c <__kernel_rem_pio2f+0x150>
 800c62c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c630:	e7f5      	b.n	800c61e <__kernel_rem_pio2f+0x232>
 800c632:	f104 3cff 	add.w	ip, r4, #4294967295
 800c636:	aa08      	add	r2, sp, #32
 800c638:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c63c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c640:	a908      	add	r1, sp, #32
 800c642:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c646:	e781      	b.n	800c54c <__kernel_rem_pio2f+0x160>
 800c648:	f104 3cff 	add.w	ip, r4, #4294967295
 800c64c:	aa08      	add	r2, sp, #32
 800c64e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c652:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c656:	e7f3      	b.n	800c640 <__kernel_rem_pio2f+0x254>
 800c658:	a908      	add	r1, sp, #32
 800c65a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c65e:	3801      	subs	r0, #1
 800c660:	430a      	orrs	r2, r1
 800c662:	e7ab      	b.n	800c5bc <__kernel_rem_pio2f+0x1d0>
 800c664:	3201      	adds	r2, #1
 800c666:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d0fa      	beq.n	800c664 <__kernel_rem_pio2f+0x278>
 800c66e:	9905      	ldr	r1, [sp, #20]
 800c670:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c674:	eb0d 0001 	add.w	r0, sp, r1
 800c678:	18e6      	adds	r6, r4, r3
 800c67a:	a91c      	add	r1, sp, #112	@ 0x70
 800c67c:	f104 0c01 	add.w	ip, r4, #1
 800c680:	384c      	subs	r0, #76	@ 0x4c
 800c682:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c686:	4422      	add	r2, r4
 800c688:	4562      	cmp	r2, ip
 800c68a:	da04      	bge.n	800c696 <__kernel_rem_pio2f+0x2aa>
 800c68c:	4614      	mov	r4, r2
 800c68e:	e710      	b.n	800c4b2 <__kernel_rem_pio2f+0xc6>
 800c690:	9804      	ldr	r0, [sp, #16]
 800c692:	2201      	movs	r2, #1
 800c694:	e7e7      	b.n	800c666 <__kernel_rem_pio2f+0x27a>
 800c696:	9903      	ldr	r1, [sp, #12]
 800c698:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c69c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c6a0:	9105      	str	r1, [sp, #20]
 800c6a2:	ee07 1a90 	vmov	s15, r1
 800c6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	ece6 7a01 	vstmia	r6!, {s15}
 800c6b0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c6b4:	46b1      	mov	r9, r6
 800c6b6:	455c      	cmp	r4, fp
 800c6b8:	dd04      	ble.n	800c6c4 <__kernel_rem_pio2f+0x2d8>
 800c6ba:	ece0 7a01 	vstmia	r0!, {s15}
 800c6be:	f10c 0c01 	add.w	ip, ip, #1
 800c6c2:	e7e1      	b.n	800c688 <__kernel_rem_pio2f+0x29c>
 800c6c4:	ecfe 6a01 	vldmia	lr!, {s13}
 800c6c8:	ed39 7a01 	vldmdb	r9!, {s14}
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c6d2:	e7f0      	b.n	800c6b6 <__kernel_rem_pio2f+0x2ca>
 800c6d4:	0800cd98 	.word	0x0800cd98
 800c6d8:	0800cd6c 	.word	0x0800cd6c
 800c6dc:	43800000 	.word	0x43800000
 800c6e0:	3b800000 	.word	0x3b800000
 800c6e4:	00000000 	.word	0x00000000
 800c6e8:	9b02      	ldr	r3, [sp, #8]
 800c6ea:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ee:	eba3 0008 	sub.w	r0, r3, r8
 800c6f2:	f7ff fe15 	bl	800c320 <scalbnf>
 800c6f6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c6dc <__kernel_rem_pio2f+0x2f0>
 800c6fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	db19      	blt.n	800c738 <__kernel_rem_pio2f+0x34c>
 800c704:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c6e0 <__kernel_rem_pio2f+0x2f4>
 800c708:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c70c:	aa08      	add	r2, sp, #32
 800c70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c712:	3508      	adds	r5, #8
 800c714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c718:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c71c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c720:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c724:	ee10 3a10 	vmov	r3, s0
 800c728:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c72c:	ee17 3a90 	vmov	r3, s15
 800c730:	3401      	adds	r4, #1
 800c732:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c736:	e74c      	b.n	800c5d2 <__kernel_rem_pio2f+0x1e6>
 800c738:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c73c:	aa08      	add	r2, sp, #32
 800c73e:	ee10 3a10 	vmov	r3, s0
 800c742:	e7f6      	b.n	800c732 <__kernel_rem_pio2f+0x346>
 800c744:	a808      	add	r0, sp, #32
 800c746:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c74a:	9001      	str	r0, [sp, #4]
 800c74c:	ee07 0a90 	vmov	s15, r0
 800c750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c754:	3b01      	subs	r3, #1
 800c756:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c75a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c75e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c762:	e743      	b.n	800c5ec <__kernel_rem_pio2f+0x200>
 800c764:	ecfc 6a01 	vldmia	ip!, {s13}
 800c768:	ecb5 7a01 	vldmia	r5!, {s14}
 800c76c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c770:	3001      	adds	r0, #1
 800c772:	4550      	cmp	r0, sl
 800c774:	dc01      	bgt.n	800c77a <__kernel_rem_pio2f+0x38e>
 800c776:	4290      	cmp	r0, r2
 800c778:	ddf4      	ble.n	800c764 <__kernel_rem_pio2f+0x378>
 800c77a:	a858      	add	r0, sp, #352	@ 0x160
 800c77c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c780:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c784:	3b01      	subs	r3, #1
 800c786:	e735      	b.n	800c5f4 <__kernel_rem_pio2f+0x208>
 800c788:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	dc09      	bgt.n	800c7a2 <__kernel_rem_pio2f+0x3b6>
 800c78e:	2b00      	cmp	r3, #0
 800c790:	dc27      	bgt.n	800c7e2 <__kernel_rem_pio2f+0x3f6>
 800c792:	d040      	beq.n	800c816 <__kernel_rem_pio2f+0x42a>
 800c794:	f009 0007 	and.w	r0, r9, #7
 800c798:	b059      	add	sp, #356	@ 0x164
 800c79a:	ecbd 8b04 	vpop	{d8-d9}
 800c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d1f5      	bne.n	800c794 <__kernel_rem_pio2f+0x3a8>
 800c7a8:	aa30      	add	r2, sp, #192	@ 0xc0
 800c7aa:	1f0b      	subs	r3, r1, #4
 800c7ac:	4413      	add	r3, r2
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	dc50      	bgt.n	800c858 <__kernel_rem_pio2f+0x46c>
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	2a01      	cmp	r2, #1
 800c7ba:	dc5d      	bgt.n	800c878 <__kernel_rem_pio2f+0x48c>
 800c7bc:	ab30      	add	r3, sp, #192	@ 0xc0
 800c7be:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c7c2:	440b      	add	r3, r1
 800c7c4:	2c01      	cmp	r4, #1
 800c7c6:	dc67      	bgt.n	800c898 <__kernel_rem_pio2f+0x4ac>
 800c7c8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c7cc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c7d0:	2e00      	cmp	r6, #0
 800c7d2:	d167      	bne.n	800c8a4 <__kernel_rem_pio2f+0x4b8>
 800c7d4:	edc7 6a00 	vstr	s13, [r7]
 800c7d8:	ed87 7a01 	vstr	s14, [r7, #4]
 800c7dc:	edc7 7a02 	vstr	s15, [r7, #8]
 800c7e0:	e7d8      	b.n	800c794 <__kernel_rem_pio2f+0x3a8>
 800c7e2:	ab30      	add	r3, sp, #192	@ 0xc0
 800c7e4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c7e8:	440b      	add	r3, r1
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	2a00      	cmp	r2, #0
 800c7ee:	da24      	bge.n	800c83a <__kernel_rem_pio2f+0x44e>
 800c7f0:	b34e      	cbz	r6, 800c846 <__kernel_rem_pio2f+0x45a>
 800c7f2:	eef1 7a47 	vneg.f32	s15, s14
 800c7f6:	edc7 7a00 	vstr	s15, [r7]
 800c7fa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c7fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c802:	aa31      	add	r2, sp, #196	@ 0xc4
 800c804:	2301      	movs	r3, #1
 800c806:	429c      	cmp	r4, r3
 800c808:	da20      	bge.n	800c84c <__kernel_rem_pio2f+0x460>
 800c80a:	b10e      	cbz	r6, 800c810 <__kernel_rem_pio2f+0x424>
 800c80c:	eef1 7a67 	vneg.f32	s15, s15
 800c810:	edc7 7a01 	vstr	s15, [r7, #4]
 800c814:	e7be      	b.n	800c794 <__kernel_rem_pio2f+0x3a8>
 800c816:	ab30      	add	r3, sp, #192	@ 0xc0
 800c818:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c6e4 <__kernel_rem_pio2f+0x2f8>
 800c81c:	440b      	add	r3, r1
 800c81e:	2c00      	cmp	r4, #0
 800c820:	da05      	bge.n	800c82e <__kernel_rem_pio2f+0x442>
 800c822:	b10e      	cbz	r6, 800c828 <__kernel_rem_pio2f+0x43c>
 800c824:	eef1 7a67 	vneg.f32	s15, s15
 800c828:	edc7 7a00 	vstr	s15, [r7]
 800c82c:	e7b2      	b.n	800c794 <__kernel_rem_pio2f+0x3a8>
 800c82e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c832:	3c01      	subs	r4, #1
 800c834:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c838:	e7f1      	b.n	800c81e <__kernel_rem_pio2f+0x432>
 800c83a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c83e:	3a01      	subs	r2, #1
 800c840:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c844:	e7d2      	b.n	800c7ec <__kernel_rem_pio2f+0x400>
 800c846:	eef0 7a47 	vmov.f32	s15, s14
 800c84a:	e7d4      	b.n	800c7f6 <__kernel_rem_pio2f+0x40a>
 800c84c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c850:	3301      	adds	r3, #1
 800c852:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c856:	e7d6      	b.n	800c806 <__kernel_rem_pio2f+0x41a>
 800c858:	ed72 7a01 	vldmdb	r2!, {s15}
 800c85c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c860:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c864:	3801      	subs	r0, #1
 800c866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c86a:	ed82 7a00 	vstr	s14, [r2]
 800c86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c872:	edc2 7a01 	vstr	s15, [r2, #4]
 800c876:	e79c      	b.n	800c7b2 <__kernel_rem_pio2f+0x3c6>
 800c878:	ed73 7a01 	vldmdb	r3!, {s15}
 800c87c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c880:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c884:	3a01      	subs	r2, #1
 800c886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c88a:	ed83 7a00 	vstr	s14, [r3]
 800c88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c892:	edc3 7a01 	vstr	s15, [r3, #4]
 800c896:	e78f      	b.n	800c7b8 <__kernel_rem_pio2f+0x3cc>
 800c898:	ed33 7a01 	vldmdb	r3!, {s14}
 800c89c:	3c01      	subs	r4, #1
 800c89e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8a2:	e78f      	b.n	800c7c4 <__kernel_rem_pio2f+0x3d8>
 800c8a4:	eef1 6a66 	vneg.f32	s13, s13
 800c8a8:	eeb1 7a47 	vneg.f32	s14, s14
 800c8ac:	edc7 6a00 	vstr	s13, [r7]
 800c8b0:	ed87 7a01 	vstr	s14, [r7, #4]
 800c8b4:	eef1 7a67 	vneg.f32	s15, s15
 800c8b8:	e790      	b.n	800c7dc <__kernel_rem_pio2f+0x3f0>
 800c8ba:	bf00      	nop

0800c8bc <floorf>:
 800c8bc:	ee10 3a10 	vmov	r3, s0
 800c8c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c8c4:	3a7f      	subs	r2, #127	@ 0x7f
 800c8c6:	2a16      	cmp	r2, #22
 800c8c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c8cc:	dc2b      	bgt.n	800c926 <floorf+0x6a>
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	da12      	bge.n	800c8f8 <floorf+0x3c>
 800c8d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c938 <floorf+0x7c>
 800c8d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e2:	dd06      	ble.n	800c8f2 <floorf+0x36>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	da24      	bge.n	800c932 <floorf+0x76>
 800c8e8:	2900      	cmp	r1, #0
 800c8ea:	4b14      	ldr	r3, [pc, #80]	@ (800c93c <floorf+0x80>)
 800c8ec:	bf08      	it	eq
 800c8ee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c8f2:	ee00 3a10 	vmov	s0, r3
 800c8f6:	4770      	bx	lr
 800c8f8:	4911      	ldr	r1, [pc, #68]	@ (800c940 <floorf+0x84>)
 800c8fa:	4111      	asrs	r1, r2
 800c8fc:	420b      	tst	r3, r1
 800c8fe:	d0fa      	beq.n	800c8f6 <floorf+0x3a>
 800c900:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c938 <floorf+0x7c>
 800c904:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c908:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c910:	ddef      	ble.n	800c8f2 <floorf+0x36>
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfbe      	ittt	lt
 800c916:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c91a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c91e:	189b      	addlt	r3, r3, r2
 800c920:	ea23 0301 	bic.w	r3, r3, r1
 800c924:	e7e5      	b.n	800c8f2 <floorf+0x36>
 800c926:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c92a:	d3e4      	bcc.n	800c8f6 <floorf+0x3a>
 800c92c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c930:	4770      	bx	lr
 800c932:	2300      	movs	r3, #0
 800c934:	e7dd      	b.n	800c8f2 <floorf+0x36>
 800c936:	bf00      	nop
 800c938:	7149f2ca 	.word	0x7149f2ca
 800c93c:	bf800000 	.word	0xbf800000
 800c940:	007fffff 	.word	0x007fffff

0800c944 <_init>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr

0800c950 <_fini>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr
