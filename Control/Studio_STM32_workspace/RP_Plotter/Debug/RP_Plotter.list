
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d300  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016658  0800d4d8  0800d4d8  0000e4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023b30  08023b30  0002528c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023b30  08023b30  00024b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023b38  08023b38  0002528c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023b38  08023b38  00024b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023b3c  08023b3c  00024b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  08023b40  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f4  20000290  08023dcc  00025290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001584  08023dcc  00025584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002528c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001849c  00000000  00000000  000252bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de9  00000000  00000000  0003d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00040548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eda  00000000  00000000  00041848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002746f  00000000  00000000  00042722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cdc  00000000  00000000  00069b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100227  00000000  00000000  0008086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b4  00000000  00000000  00180ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0018618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d4c0 	.word	0x0800d4c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800d4c0 	.word	0x0800d4c0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002ac 	.word	0x200002ac

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002ac 	.word	0x200002ac

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a f90d 	bl	800b374 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f90b 	bl	80093a8 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f00a f895 	bl	800b2c8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a f8ac 	bl	800b300 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fb53 	bl	800a85c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 fc7b 	bl	800aad0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fe65 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 fa26 	bl	8008650 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002ac 	.word	0x200002ac
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET(int8_t slot, float dist, float ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dc04      	bgt.n	80012c2 <SET_TARGET+0x3a>
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	3310      	adds	r3, #16
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <SET_TARGET+0x42>
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	3313      	adds	r3, #19
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SET_TARGET+0x94>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dc05      	bgt.n	80012fc <SET_TARGET+0x74>
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	3310      	adds	r3, #16
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3301      	adds	r3, #1
 80012fa:	e004      	b.n	8001306 <SET_TARGET+0x7e>
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	3313      	adds	r3, #19
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3301      	adds	r3, #1
 8001306:	b291      	uxth	r1, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SET_TARGET+0x94>)
 800130a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20001138 	.word	0x20001138

08001320 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08d      	sub	sp, #52	@ 0x34
 8001324:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001326:	4bb2      	ldr	r3, [pc, #712]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001328:	f645 1261 	movw	r2, #22881	@ 0x5961
 800132c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800132e:	4bb1      	ldr	r3, [pc, #708]	@ (80015f4 <Modbus_Protocal_Worker+0x2d4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <Modbus_Protocal_Worker+0x1a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <Modbus_Protocal_Worker+0x1c>
 800133a:	2201      	movs	r2, #1
 800133c:	4bac      	ldr	r3, [pc, #688]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 800133e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001340:	4bab      	ldr	r3, [pc, #684]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4ba9      	ldr	r3, [pc, #676]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001352:	701a      	strb	r2, [r3, #0]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001354:	4ba6      	ldr	r3, [pc, #664]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001356:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80015fc <Modbus_Protocal_Worker+0x2dc>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4ba5      	ldr	r3, [pc, #660]	@ (8001600 <Modbus_Protocal_Worker+0x2e0>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	float TargetR = ((float)REG16(REG_TARGET_GOAL_THETA)) / 10.0f;
 8001370:	4b9f      	ldr	r3, [pc, #636]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001372:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800137e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	if (TargetR > 270) TargetR -= 360;
 800138a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800138e:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001604 <Modbus_Protocal_Worker+0x2e4>
 8001392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	dd07      	ble.n	80013ac <Modbus_Protocal_Worker+0x8c>
 800139c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001608 <Modbus_Protocal_Worker+0x2e8>
 80013a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	TargetR_BaseSystem = DEG_TO_RED01(TargetR);
 80013ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013ae:	f7ff f897 	bl	80004e0 <__aeabi_f2d>
 80013b2:	a38b      	add	r3, pc, #556	@ (adr r3, 80015e0 <Modbus_Protocal_Worker+0x2c0>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f8ea 	bl	8000590 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fb9e 	bl	8000b04 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a90      	ldr	r2, [pc, #576]	@ (800160c <Modbus_Protocal_Worker+0x2ec>)
 80013cc:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013ce:	f107 0410 	add.w	r4, r7, #16
 80013d2:	f107 0214 	add.w	r2, r7, #20
 80013d6:	f107 0118 	add.w	r1, r7, #24
 80013da:	f107 001c 	add.w	r0, r7, #28
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4623      	mov	r3, r4
 80013ec:	f003 fe8a 	bl	8005104 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f874 	bl	80004e0 <__aeabi_f2d>
 80013f8:	a37b      	add	r3, pc, #492	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8c7 	bl	8000590 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb7b 	bl	8000b04 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	623b      	str	r3, [r7, #32]
    if (mappedDeg < 0) mappedDeg += 360;
 8001412:	edd7 7a08 	vldr	s15, [r7, #32]
 8001416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d507      	bpl.n	8001430 <Modbus_Protocal_Worker+0x110>
 8001420:	edd7 7a08 	vldr	s15, [r7, #32]
 8001424:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001608 <Modbus_Protocal_Worker+0x2e8>
 8001428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142c:	edc7 7a08 	vstr	s15, [r7, #32]

	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001430:	edd7 7a08 	vldr	s15, [r7, #32]
 8001434:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001440:	ee17 3a90 	vmov	r3, s15
 8001444:	b21b      	sxth	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 800144a:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f846 	bl	80004e0 <__aeabi_f2d>
 8001454:	a364      	add	r3, pc, #400	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f899 	bl	8000590 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fb4d 	bl	8000b04 <__aeabi_d2f>
 800146a:	ee07 0a90 	vmov	s15, r0
 800146e:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 8001472:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001476:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b5a      	ldr	r3, [pc, #360]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f827 	bl	80004e0 <__aeabi_f2d>
 8001492:	a355      	add	r3, pc, #340	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f87a 	bl	8000590 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb2e 	bl	8000b04 <__aeabi_d2f>
 80014a8:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80014ac:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80014b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80014b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 80014c6:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 80014c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014cc:	eef0 7ae7 	vabs.f32	s15, s15
 80014d0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 80014e6:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ec:	eef0 7ae7 	vabs.f32	s15, s15
 80014f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001506:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001518:	ee17 3a90 	vmov	r3, s15
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001522:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	7ddb      	ldrb	r3, [r3, #23]
 800152a:	3b01      	subs	r3, #1
 800152c:	2b03      	cmp	r3, #3
 800152e:	d80b      	bhi.n	8001548 <Modbus_Protocal_Worker+0x228>
 8001530:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <Modbus_Protocal_Worker+0x218>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001553 	.word	0x08001553
 800153c:	0800171d 	.word	0x0800171d
 8001540:	08001615 	.word	0x08001615
 8001544:	08001659 	.word	0x08001659
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001548:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	75da      	strb	r2, [r3, #23]
		break;
 8001550:	e0fc      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <Modbus_Protocal_Worker+0x24c>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001566:	f000 f9e7 	bl	8001938 <Modbus_Emission>
 800156a:	e018      	b.n	800159e <Modbus_Protocal_Worker+0x27e>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001580:	b29b      	uxth	r3, r3
 8001582:	429a      	cmp	r2, r3
 8001584:	d00b      	beq.n	800159e <Modbus_Protocal_Worker+0x27e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2203      	movs	r2, #3
 800159c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 80c8 	bne.w	800173e <Modbus_Protocal_Worker+0x41e>
			hModbus->modbusUartStructure.RxTail = 0;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015ca:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015ce:	4413      	add	r3, r2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015d6:	4619      	mov	r1, r3
 80015d8:	f009 fa7a 	bl	800aad0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015dc:	e0af      	b.n	800173e <Modbus_Protocal_Worker+0x41e>
 80015de:	bf00      	nop
 80015e0:	a2529d39 	.word	0xa2529d39
 80015e4:	3f91df46 	.word	0x3f91df46
 80015e8:	1a63c1f8 	.word	0x1a63c1f8
 80015ec:	404ca5dc 	.word	0x404ca5dc
 80015f0:	20001138 	.word	0x20001138
 80015f4:	20000bd0 	.word	0x20000bd0
 80015f8:	20000c5c 	.word	0x20000c5c
 80015fc:	3dcccccd 	.word	0x3dcccccd
 8001600:	20000c58 	.word	0x20000c58
 8001604:	43870000 	.word	0x43870000
 8001608:	43b40000 	.word	0x43b40000
 800160c:	20000c54 	.word	0x20000c54
 8001610:	200002ac 	.word	0x200002ac
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001614:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	7d1b      	ldrb	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8091 	beq.w	8001742 <Modbus_Protocal_Worker+0x422>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001620:	4b4c      	ldr	r3, [pc, #304]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22fe      	movs	r2, #254	@ 0xfe
 8001626:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001628:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001632:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001642:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001644:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001646:	1a8a      	subs	r2, r1, r2
 8001648:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800164a:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800164e:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2204      	movs	r2, #4
 8001654:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001656:	e074      	b.n	8001742 <Modbus_Protocal_Worker+0x422>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001660:	f113 0f02 	cmn.w	r3, #2
 8001664:	d150      	bne.n	8001708 <Modbus_Protocal_Worker+0x3e8>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 800166e:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 8001676:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 800167e:	3b02      	subs	r3, #2
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fdc8 	bl	8001218 <CRC16>
 8001688:	4603      	mov	r3, r0
 800168a:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 800168c:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 800169a:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800169c:	440b      	add	r3, r1
 800169e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d10c      	bne.n	80016c0 <Modbus_Protocal_Worker+0x3a0>
					&& CalculateCRC.U8[1]
 80016a6:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 80016b4:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016b6:	440b      	add	r3, r1
 80016b8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d004      	beq.n	80016ca <Modbus_Protocal_Worker+0x3aa>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	22ff      	movs	r2, #255	@ 0xff
 80016c6:	759a      	strb	r2, [r3, #22]
				break;
 80016c8:	e040      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016ca:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d113      	bne.n	8001704 <Modbus_Protocal_Worker+0x3e4>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016ec:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016f6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016f8:	461a      	mov	r2, r3
 80016fa:	f00a ffc7 	bl	800c68c <memcpy>

			//execute command
			Modbus_frame_response();
 80016fe:	f000 f903 	bl	8001908 <Modbus_frame_response>
 8001702:	e001      	b.n	8001708 <Modbus_Protocal_Worker+0x3e8>
				break;
 8001704:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001706:	e021      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		if (hModbus->Flag_T35TimeOut) {
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	7d5b      	ldrb	r3, [r3, #21]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <Modbus_Protocal_Worker+0x426>
			hModbus->Mstatus = Modbus_state_Idle;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	75da      	strb	r2, [r3, #23]
		break;
 800171a:	e014      	b.n	8001746 <Modbus_Protocal_Worker+0x426>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001726:	2b20      	cmp	r3, #32
 8001728:	d10f      	bne.n	800174a <Modbus_Protocal_Worker+0x42a>
			hModbus->TxCount = 0;
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	75da      	strb	r2, [r3, #23]
		break;
 800173c:	e005      	b.n	800174a <Modbus_Protocal_Worker+0x42a>
		break;
 800173e:	bf00      	nop
 8001740:	e004      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 8001742:	bf00      	nop
 8001744:	e002      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 800174a:	bf00      	nop
}
 800174c:	bf00      	nop
 800174e:	372c      	adds	r7, #44	@ 0x2c
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	200002ac 	.word	0x200002ac

08001758 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	7e5b      	ldrb	r3, [r3, #25]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	7e92      	ldrb	r2, [r2, #26]
 800176e:	4413      	add	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001772:	88fa      	ldrh	r2, [r7, #6]
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	429a      	cmp	r2, r3
 800177c:	d903      	bls.n	8001786 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 f8a0 	bl	80018c4 <ModbusErrorReply>
		return;
 8001784:	e023      	b.n	80017ce <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	7ed2      	ldrb	r2, [r2, #27]
 8001798:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	440b      	add	r3, r1
 80017aa:	7f12      	ldrb	r2, [r2, #28]
 80017ac:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3318      	adds	r3, #24
 80017bc:	2208      	movs	r2, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	f00a ff64 	bl	800c68c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200002ac 	.word	0x200002ac

080017d8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	7edb      	ldrb	r3, [r3, #27]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017e8:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017ee:	4413      	add	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017f2:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	7e5b      	ldrb	r3, [r3, #25]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4a30      	ldr	r2, [pc, #192]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	7e92      	ldrb	r2, [r2, #26]
 8001802:	4413      	add	r3, r2
 8001804:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <modbusRead1Register+0x3a>
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001810:	d903      	bls.n	800181a <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001812:	2003      	movs	r0, #3
 8001814:	f000 f856 	bl	80018c4 <ModbusErrorReply>
		return;
 8001818:	e04e      	b.n	80018b8 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 800181a:	88ba      	ldrh	r2, [r7, #4]
 800181c:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <modbusRead1Register+0xe8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d808      	bhi.n	8001838 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001826:	88ba      	ldrh	r2, [r7, #4]
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d903      	bls.n	8001840 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001838:	2002      	movs	r0, #2
 800183a:	f000 f843 	bl	80018c4 <ModbusErrorReply>
		return;
 800183e:	e03b      	b.n	80018b8 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 800185a:	2400      	movs	r4, #0
 800185c:	e020      	b.n	80018a0 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	4423      	add	r3, r4
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <modbusRead1Register+0xe8>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	1c63      	adds	r3, r4, #1
 8001872:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001874:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	4423      	add	r3, r4
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <modbusRead1Register+0xe8>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	0063      	lsls	r3, r4, #1
 8001892:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001894:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 8001896:	4413      	add	r3, r2
 8001898:	460a      	mov	r2, r1
 800189a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 800189e:	3401      	adds	r4, #1
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	429c      	cmp	r4, r3
 80018a4:	dbdb      	blt.n	800185e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <modbusRead1Register+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002ac 	.word	0x200002ac

080018c4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <ModbusErrorReply+0x40>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7e1a      	ldrb	r2, [r3, #24]
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <ModbusErrorReply+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <ModbusErrorReply+0x40>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <ModbusErrorReply+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200002ac 	.word	0x200002ac

08001908 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <Modbus_frame_response+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	7e1b      	ldrb	r3, [r3, #24]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d004      	beq.n	8001920 <Modbus_frame_response+0x18>
 8001916:	2b06      	cmp	r3, #6
 8001918:	d105      	bne.n	8001926 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800191a:	f7ff ff1d 	bl	8001758 <modbusWrite1Register>
		break;
 800191e:	e006      	b.n	800192e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001920:	f7ff ff5a 	bl	80017d8 <modbusRead1Register>
		break;
 8001924:	e003      	b.n	800192e <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff ffcc 	bl	80018c4 <ModbusErrorReply>
		break;
 800192c:	bf00      	nop

	}
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002ac 	.word	0x200002ac

08001938 <Modbus_Emission>:

void Modbus_Emission() {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001948:	2b20      	cmp	r3, #32
 800194a:	d15d      	bne.n	8001a08 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <Modbus_Emission+0xe8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <Modbus_Emission+0xe8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001962:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <Modbus_Emission+0xe8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001974:	461a      	mov	r2, r3
 8001976:	f00a fe89 	bl	800c68c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800197a:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <Modbus_Emission+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001982:	461a      	mov	r2, r3
 8001984:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3203      	adds	r2, #3
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <Modbus_Emission+0xe8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019a0:	3b02      	subs	r3, #2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f7ff fc37 	bl	8001218 <CRC16>
 80019aa:	4603      	mov	r3, r0
 80019ac:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 80019ba:	3b02      	subs	r3, #2
 80019bc:	7939      	ldrb	r1, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	460a      	mov	r2, r1
 80019c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019c6:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019d2:	3b01      	subs	r3, #1
 80019d4:	7979      	ldrb	r1, [r7, #5]
 80019d6:	4413      	add	r3, r2
 80019d8:	460a      	mov	r2, r1
 80019da:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d10d      	bne.n	8001a08 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019fe:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a02:	461a      	mov	r2, r3
 8001a04:	f008 ffe4 	bl	800a9d0 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	755a      	strb	r2, [r3, #21]

}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002ac 	.word	0x200002ac

08001a24 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a30:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a34:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a54:	edd7 7a00 	vldr	s15, [r7]
 8001a58:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	db02      	blt.n	8001a8c <Trapezoidal_Init+0x68>
 8001a86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a8a:	e000      	b.n	8001a8e <Trapezoidal_Init+0x6a>
 8001a8c:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <Trapezoidal_Init+0x190>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aac:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aba:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dd14      	ble.n	8001afc <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f00a fdde 	bl	800c6ac <sqrtf>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001afa:	e006      	b.n	8001b0a <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b60:	e017      	b.n	8001b92 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	bf800000 	.word	0xbf800000

08001bb8 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b095      	sub	sp, #84	@ 0x54
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 812c 	bne.w	8001e26 <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001bd4:	edd7 7a00 	vldr	s15, [r7]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bfa:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bfe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001c0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c16:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d111      	bne.n	8001c62 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c46:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c52:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c56:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c66:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c6a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c76:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001ca0:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <Trapezoidal_Update+0x27c>)
 8001ca2:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	d51a      	bpl.n	8001cf4 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001cbe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cde:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ce2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cf2:	e079      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001cf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d519      	bpl.n	8001d42 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001d0e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1a:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001d1e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d38:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d40:	e052      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d42:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	d53a      	bpl.n	8001dd2 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d5c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d6c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d70:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d78:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d8c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001dac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001db0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001dc4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001dd0:	e00a      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd4:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e02:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e16:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edc3 7a06 	vstr	s15, [r3, #24]
 8001e24:	e000      	b.n	8001e28 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001e26:	bf00      	nop
}
 8001e28:	3754      	adds	r7, #84	@ 0x54
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	358637bd 	.word	0x358637bd

08001e38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3c:	ed2d 8b02 	vpush	{d8}
 8001e40:	b0b1      	sub	sp, #196	@ 0xc4
 8001e42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e44:	f004 f8bb 	bl	8005fbe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e48:	f001 fde6 	bl	8003a18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e4c:	f002 fa40 	bl	80042d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e50:	f002 fa0c 	bl	800426c <MX_DMA_Init>
	MX_TIM4_Init();
 8001e54:	f001 ff88 	bl	8003d68 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e58:	f001 ffdc 	bl	8003e14 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e5c:	f001 ff2e 	bl	8003cbc <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e60:	f002 f826 	bl	8003eb0 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e64:	f002 f8e0 	bl	8004028 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e68:	f001 fe22 	bl	8003ab0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e6c:	f001 fea6 	bl	8003bbc <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e70:	f002 f97e 	bl	8004170 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e74:	f002 f9ac 	bl	80041d0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e78:	484c      	ldr	r0, [pc, #304]	@ (8001fac <main+0x174>)
 8001e7a:	f005 ffb1 	bl	8007de0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	484a      	ldr	r0, [pc, #296]	@ (8001fac <main+0x174>)
 8001e82:	f006 fa79 	bl	8008378 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e86:	2104      	movs	r1, #4
 8001e88:	4848      	ldr	r0, [pc, #288]	@ (8001fac <main+0x174>)
 8001e8a:	f006 fa75 	bl	8008378 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e8e:	4848      	ldr	r0, [pc, #288]	@ (8001fb0 <main+0x178>)
 8001e90:	f005 ffa6 	bl	8007de0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4846      	ldr	r0, [pc, #280]	@ (8001fb0 <main+0x178>)
 8001e98:	f006 fa6e 	bl	8008378 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4844      	ldr	r0, [pc, #272]	@ (8001fb0 <main+0x178>)
 8001ea0:	f006 fa6a 	bl	8008378 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ea4:	213c      	movs	r1, #60	@ 0x3c
 8001ea6:	4843      	ldr	r0, [pc, #268]	@ (8001fb4 <main+0x17c>)
 8001ea8:	f006 fd14 	bl	80088d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001eac:	213c      	movs	r1, #60	@ 0x3c
 8001eae:	4842      	ldr	r0, [pc, #264]	@ (8001fb8 <main+0x180>)
 8001eb0:	f006 fd10 	bl	80088d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001eb4:	4841      	ldr	r0, [pc, #260]	@ (8001fbc <main+0x184>)
 8001eb6:	f006 f803 	bl	8007ec0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001eba:	4841      	ldr	r0, [pc, #260]	@ (8001fc0 <main+0x188>)
 8001ebc:	f005 ff90 	bl	8007de0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	483f      	ldr	r0, [pc, #252]	@ (8001fc0 <main+0x188>)
 8001ec4:	f006 f8e2 	bl	800808c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ec8:	210c      	movs	r1, #12
 8001eca:	483d      	ldr	r0, [pc, #244]	@ (8001fc0 <main+0x188>)
 8001ecc:	f006 f8de 	bl	800808c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ed0:	483c      	ldr	r0, [pc, #240]	@ (8001fc4 <main+0x18c>)
 8001ed2:	f005 ff85 	bl	8007de0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	483a      	ldr	r0, [pc, #232]	@ (8001fc4 <main+0x18c>)
 8001eda:	f006 f8d7 	bl	800808c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001ede:	f002 fc27 	bl	8004730 <DWT_Init>

	PID.Kp = 0.1;
 8001ee2:	4a39      	ldr	r2, [pc, #228]	@ (8001fc8 <main+0x190>)
 8001ee4:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <main+0x194>)
 8001ee6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001ee8:	4a37      	ldr	r2, [pc, #220]	@ (8001fc8 <main+0x190>)
 8001eea:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <main+0x198>)
 8001eec:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001eee:	4a36      	ldr	r2, [pc, #216]	@ (8001fc8 <main+0x190>)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <main+0x194>)
 8001ef2:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4834      	ldr	r0, [pc, #208]	@ (8001fc8 <main+0x190>)
 8001ef8:	f00a fb60 	bl	800c5bc <arm_pid_init_f32>

	Reset_R();
 8001efc:	f003 f86a 	bl	8004fd4 <Reset_R>
	Reset_P();
 8001f00:	f003 f878 	bl	8004ff4 <Reset_P>
	calibState = CALIB_IDLE;
 8001f04:	4a33      	ldr	r2, [pc, #204]	@ (8001fd4 <main+0x19c>)
 8001f06:	2300      	movs	r3, #0
 8001f08:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f003 f838 	bl	8004f80 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001f10:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <main+0x1a0>)
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <main+0x1a4>)
 8001f14:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001f16:	4a30      	ldr	r2, [pc, #192]	@ (8001fd8 <main+0x1a0>)
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <main+0x1a8>)
 8001f1a:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <main+0x1a0>)
 8001f1e:	2315      	movs	r3, #21
 8001f20:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <main+0x1a0>)
 8001f24:	23c8      	movs	r3, #200	@ 0xc8
 8001f26:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001f28:	492e      	ldr	r1, [pc, #184]	@ (8001fe4 <main+0x1ac>)
 8001f2a:	482b      	ldr	r0, [pc, #172]	@ (8001fd8 <main+0x1a0>)
 8001f2c:	f7ff f91e 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f30:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe4 <main+0x1ac>)
 8001f32:	2300      	movs	r3, #0
 8001f34:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f36:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001fe8 <main+0x1b0>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f002 ffa2 	bl	8004e84 <Set_Motor>
	Set_Motor(1, 0);
 8001f40:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001fe8 <main+0x1b0>
 8001f44:	2001      	movs	r0, #1
 8001f46:	f002 ff9d 	bl	8004e84 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (!Test_no_BaseSystem && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <main+0x1b4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <main+0x136>
 8001f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f5c:	4824      	ldr	r0, [pc, #144]	@ (8001ff0 <main+0x1b8>)
 8001f5e:	f004 fe63 	bl	8006c28 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <main+0x136>
			Test_no_BaseSystem = true;
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <main+0x1b4>)
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <main+0x1ac>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <main+0x1bc>)
 8001f74:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <main+0x1c0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d14e      	bne.n	800201c <main+0x1e4>
			switch (base_status) {
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <main+0x1bc>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00e      	beq.n	8001fa4 <main+0x16c>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	dc38      	bgt.n	8001ffc <main+0x1c4>
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <main+0x15c>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d004      	beq.n	8001f9c <main+0x164>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f92:	e033      	b.n	8001ffc <main+0x1c4>
				REG16(REG_MOTION_STATUS) = 1;
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <main+0x1ac>)
 8001f96:	2301      	movs	r3, #1
 8001f98:	8413      	strh	r3, [r2, #32]
				break;
 8001f9a:	e030      	b.n	8001ffe <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 2;
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <main+0x1ac>)
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	8413      	strh	r3, [r2, #32]
				break;
 8001fa2:	e02c      	b.n	8001ffe <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 4;
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <main+0x1ac>)
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	8413      	strh	r3, [r2, #32]
				break;
 8001faa:	e028      	b.n	8001ffe <main+0x1c6>
 8001fac:	200002b0 	.word	0x200002b0
 8001fb0:	2000037c 	.word	0x2000037c
 8001fb4:	20000448 	.word	0x20000448
 8001fb8:	20000514 	.word	0x20000514
 8001fbc:	200005e0 	.word	0x200005e0
 8001fc0:	200006ac 	.word	0x200006ac
 8001fc4:	20000778 	.word	0x20000778
 8001fc8:	20000bd4 	.word	0x20000bd4
 8001fcc:	3dcccccd 	.word	0x3dcccccd
 8001fd0:	3727c5ac 	.word	0x3727c5ac
 8001fd4:	20000c34 	.word	0x20000c34
 8001fd8:	20000c60 	.word	0x20000c60
 8001fdc:	20000910 	.word	0x20000910
 8001fe0:	20000844 	.word	0x20000844
 8001fe4:	20001138 	.word	0x20001138
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	20000c53 	.word	0x20000c53
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	200012c8 	.word	0x200012c8
 8001ff8:	20000bce 	.word	0x20000bce
				break;
 8001ffc:	bf00      	nop
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 8001ffe:	4bb2      	ldr	r3, [pc, #712]	@ (80022c8 <main+0x490>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4bb2      	ldr	r3, [pc, #712]	@ (80022cc <main+0x494>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d008      	beq.n	800201c <main+0x1e4>
				Set_Servo(Pen_BaseSystem);
 800200a:	4baf      	ldr	r3, [pc, #700]	@ (80022c8 <main+0x490>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 ffb6 	bl	8004f80 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 8002014:	4bac      	ldr	r3, [pc, #688]	@ (80022c8 <main+0x490>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4aac      	ldr	r2, [pc, #688]	@ (80022cc <main+0x494>)
 800201a:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 800201c:	f7ff f980 	bl	8001320 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8002020:	4bab      	ldr	r3, [pc, #684]	@ (80022d0 <main+0x498>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002026:	4bab      	ldr	r3, [pc, #684]	@ (80022d4 <main+0x49c>)
 8002028:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 800202a:	4bab      	ldr	r3, [pc, #684]	@ (80022d8 <main+0x4a0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002030:	4baa      	ldr	r3, [pc, #680]	@ (80022dc <main+0x4a4>)
 8002032:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8002034:	f002 fc72 	bl	800491c <micros>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (currentTime > timestamp) {
 8002040:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002044:	4ba6      	ldr	r3, [pc, #664]	@ (80022e0 <main+0x4a8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	4282      	cmp	r2, r0
 800204c:	418b      	sbcs	r3, r1
 800204e:	d210      	bcs.n	8002072 <main+0x23a>
			timestamp = currentTime + 1000; // us
 8002050:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002054:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002058:	64b9      	str	r1, [r7, #72]	@ 0x48
 800205a:	f143 0300 	adc.w	r3, r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002060:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002064:	4b9e      	ldr	r3, [pc, #632]	@ (80022e0 <main+0x4a8>)
 8002066:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 800206a:	f002 fd3d 	bl	8004ae8 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 800206e:	f002 fe45 	bl	8004cfc <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8002072:	f002 fc53 	bl	800491c <micros>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		if (currentTime1 > timestamp1) {
 800207e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8002082:	4b98      	ldr	r3, [pc, #608]	@ (80022e4 <main+0x4ac>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	4282      	cmp	r2, r0
 800208a:	418b      	sbcs	r3, r1
 800208c:	d20d      	bcs.n	80020aa <main+0x272>
			timestamp1 = currentTime1 + 10000; // us
 800208e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002092:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002096:	1851      	adds	r1, r2, r1
 8002098:	6439      	str	r1, [r7, #64]	@ 0x40
 800209a:	f143 0300 	adc.w	r3, r3, #0
 800209e:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020a4:	4b8f      	ldr	r3, [pc, #572]	@ (80022e4 <main+0x4ac>)
 80020a6:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020aa:	f002 fc37 	bl	800491c <micros>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if (currentTime2 > timestamp2) {
 80020b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020ba:	4b8b      	ldr	r3, [pc, #556]	@ (80022e8 <main+0x4b0>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4282      	cmp	r2, r0
 80020c2:	418b      	sbcs	r3, r1
 80020c4:	d20c      	bcs.n	80020e0 <main+0x2a8>
			timestamp2 = currentTime2 + 100000; // us
 80020c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80020ca:	4988      	ldr	r1, [pc, #544]	@ (80022ec <main+0x4b4>)
 80020cc:	1851      	adds	r1, r2, r1
 80020ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020d0:	f143 0300 	adc.w	r3, r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020da:	4b83      	ldr	r3, [pc, #524]	@ (80022e8 <main+0x4b0>)
 80020dc:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 80020e0:	4b83      	ldr	r3, [pc, #524]	@ (80022f0 <main+0x4b8>)
 80020e2:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 80020e6:	4b83      	ldr	r3, [pc, #524]	@ (80022f4 <main+0x4bc>)
 80020e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020ec:	eef1 7a67 	vneg.f32	s15, s15
 80020f0:	eeb0 0a67 	vmov.f32	s0, s15
 80020f4:	f00a faf8 	bl	800c6e8 <cosf>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8002100:	4b7d      	ldr	r3, [pc, #500]	@ (80022f8 <main+0x4c0>)
 8002102:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8002106:	4b7a      	ldr	r3, [pc, #488]	@ (80022f0 <main+0x4b8>)
 8002108:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 800210c:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <main+0x4bc>)
 800210e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	f00a fb2b 	bl	800c770 <sinf>
 800211a:	eef0 7a40 	vmov.f32	s15, s0
 800211e:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8002122:	4b76      	ldr	r3, [pc, #472]	@ (80022fc <main+0x4c4>)
 8002124:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002128:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800212c:	4874      	ldr	r0, [pc, #464]	@ (8002300 <main+0x4c8>)
 800212e:	f004 fd7b 	bl	8006c28 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10e      	bne.n	8002156 <main+0x31e>
			Mode = 0;
 8002138:	4a72      	ldr	r2, [pc, #456]	@ (8002304 <main+0x4cc>)
 800213a:	2300      	movs	r3, #0
 800213c:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 800213e:	4a72      	ldr	r2, [pc, #456]	@ (8002308 <main+0x4d0>)
 8002140:	2301      	movs	r3, #1
 8002142:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f002 ff1b 	bl	8004f80 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002150:	486b      	ldr	r0, [pc, #428]	@ (8002300 <main+0x4c8>)
 8002152:	f004 fd81 	bl	8006c58 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8002156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800215a:	486c      	ldr	r0, [pc, #432]	@ (800230c <main+0x4d4>)
 800215c:	f004 fd64 	bl	8006c28 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <main+0x340>
			EmergencyState = 0;
 8002166:	4a68      	ldr	r2, [pc, #416]	@ (8002308 <main+0x4d0>)
 8002168:	2300      	movs	r3, #0
 800216a:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002172:	4863      	ldr	r0, [pc, #396]	@ (8002300 <main+0x4c8>)
 8002174:	f004 fd70 	bl	8006c58 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8002178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800217c:	4863      	ldr	r0, [pc, #396]	@ (800230c <main+0x4d4>)
 800217e:	f004 fd53 	bl	8006c28 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b01      	cmp	r3, #1
 8002186:	d102      	bne.n	800218e <main+0x356>
			Pen_Status = 0;
 8002188:	4a61      	ldr	r2, [pc, #388]	@ (8002310 <main+0x4d8>)
 800218a:	2300      	movs	r3, #0
 800218c:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 800218e:	2104      	movs	r1, #4
 8002190:	485e      	ldr	r0, [pc, #376]	@ (800230c <main+0x4d4>)
 8002192:	f004 fd49 	bl	8006c28 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <main+0x36a>
			Pen_Status = 1;
 800219c:	4a5c      	ldr	r2, [pc, #368]	@ (8002310 <main+0x4d8>)
 800219e:	2301      	movs	r3, #1
 80021a0:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80021a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021aa:	f004 fd3d 	bl	8006c28 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d103      	bne.n	80021bc <main+0x384>
			z_temp = 1;
 80021b4:	4a57      	ldr	r2, [pc, #348]	@ (8002314 <main+0x4dc>)
 80021b6:	2301      	movs	r3, #1
 80021b8:	7013      	strb	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <main+0x39c>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 80021bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f004 fd30 	bl	8006c28 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <main+0x39c>
			z_temp = 0;
 80021ce:	4a51      	ldr	r2, [pc, #324]	@ (8002314 <main+0x4dc>)
 80021d0:	2300      	movs	r3, #0
 80021d2:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 80021d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <main+0x4d0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <main+0x3aa>
			REG16(REG_MOTION_STATUS) = 0;
 80021dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <main+0x4e0>)
 80021de:	2300      	movs	r3, #0
 80021e0:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem))
 80021e2:	4b48      	ldr	r3, [pc, #288]	@ (8002304 <main+0x4cc>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <main+0x3c2>
 80021ea:	4b4c      	ldr	r3, [pc, #304]	@ (800231c <main+0x4e4>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d008      	beq.n	8002204 <main+0x3cc>
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <main+0x4e8>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <main+0x3cc>
				|| base_status == 8) {
 80021fa:	4b48      	ldr	r3, [pc, #288]	@ (800231c <main+0x4e4>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	2b08      	cmp	r3, #8
 8002200:	f040 80c7 	bne.w	8002392 <main+0x55a>

			P_overshoot = updateAndGetOvershoot(TargetP, &prev_TargetP,
 8002204:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <main+0x4ec>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <main+0x4b8>)
 800220c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002210:	eef0 0a47 	vmov.f32	s1, s14
 8002214:	4944      	ldr	r1, [pc, #272]	@ (8002328 <main+0x4f0>)
 8002216:	4845      	ldr	r0, [pc, #276]	@ (800232c <main+0x4f4>)
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	f002 f95e 	bl	80044dc <updateAndGetOvershoot>
 8002220:	eef0 7a40 	vmov.f32	s15, s0
 8002224:	4b42      	ldr	r3, [pc, #264]	@ (8002330 <main+0x4f8>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
					&max_P_position, Prismatic_QEIdata.mmPosition);
			R_overshoot = updateAndGetOvershoot(TargetR, &prev_TargetR,
 800222a:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <main+0x4fc>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <main+0x4bc>)
 8002232:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002236:	eef0 0a47 	vmov.f32	s1, s14
 800223a:	493f      	ldr	r1, [pc, #252]	@ (8002338 <main+0x500>)
 800223c:	483f      	ldr	r0, [pc, #252]	@ (800233c <main+0x504>)
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	f002 f94b 	bl	80044dc <updateAndGetOvershoot>
 8002246:	eef0 7a40 	vmov.f32	s15, s0
 800224a:	4b3d      	ldr	r3, [pc, #244]	@ (8002340 <main+0x508>)
 800224c:	edc3 7a00 	vstr	s15, [r3]
					&max_R_position, Revolute_QEIdata.RadPosition);

			if (base_status == 8) {
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <main+0x4e4>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d102      	bne.n	800225e <main+0x426>
				REG16(REG_MOTION_STATUS) = 8;
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <main+0x4e0>)
 800225a:	2308      	movs	r3, #8
 800225c:	8413      	strh	r3, [r2, #32]
			}

			if (base_status == 8) {
 800225e:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <main+0x4e4>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d108      	bne.n	8002278 <main+0x440>
				TargetR = TargetR_BaseSystem;
 8002266:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <main+0x50c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <main+0x4fc>)
 800226c:	601a      	str	r2, [r3, #0]
				TargetP = TargetP_BaseSystem;
 800226e:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <main+0x510>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <main+0x4ec>)
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e016      	b.n	80022a6 <main+0x46e>
			} else if (TenPointMode) {
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <main+0x514>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <main+0x46e>
				TargetR = TenPointArray[(counter * 2) + 1];
 8002280:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <main+0x518>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	3301      	adds	r3, #1
 8002288:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <main+0x51c>)
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <main+0x4fc>)
 8002292:	601a      	str	r2, [r3, #0]
				TargetP = TenPointArray[counter * 2];
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <main+0x518>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4a2e      	ldr	r2, [pc, #184]	@ (8002354 <main+0x51c>)
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <main+0x4ec>)
 80022a4:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 80022a6:	f003 fa6f 	bl	8005788 <CascadeControl_Step>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d070      	beq.n	8002392 <main+0x55a>
				if (base_status == 8) {
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <main+0x4e4>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d14f      	bne.n	8002358 <main+0x520>
					REG16(REG_MOTION_STATUS) = 0;
 80022b8:	4a17      	ldr	r2, [pc, #92]	@ (8002318 <main+0x4e0>)
 80022ba:	2300      	movs	r3, #0
 80022bc:	8413      	strh	r3, [r2, #32]
					REG16(REG_BASE_STATUS) = 0;
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <main+0x4e0>)
 80022c0:	2300      	movs	r3, #0
 80022c2:	8053      	strh	r3, [r2, #2]
 80022c4:	e065      	b.n	8002392 <main+0x55a>
 80022c6:	bf00      	nop
 80022c8:	20000c5c 	.word	0x20000c5c
 80022cc:	20000c5d 	.word	0x20000c5d
 80022d0:	20000514 	.word	0x20000514
 80022d4:	20000af0 	.word	0x20000af0
 80022d8:	20000448 	.word	0x20000448
 80022dc:	20000af4 	.word	0x20000af4
 80022e0:	200013c8 	.word	0x200013c8
 80022e4:	200013d0 	.word	0x200013d0
 80022e8:	200013d8 	.word	0x200013d8
 80022ec:	000186a0 	.word	0x000186a0
 80022f0:	20000b38 	.word	0x20000b38
 80022f4:	20000af8 	.word	0x20000af8
 80022f8:	20000b84 	.word	0x20000b84
 80022fc:	20000b88 	.word	0x20000b88
 8002300:	48000800 	.word	0x48000800
 8002304:	20000bcc 	.word	0x20000bcc
 8002308:	20000bce 	.word	0x20000bce
 800230c:	48000400 	.word	0x48000400
 8002310:	20000bd0 	.word	0x20000bd0
 8002314:	20000b79 	.word	0x20000b79
 8002318:	20001138 	.word	0x20001138
 800231c:	200012c8 	.word	0x200012c8
 8002320:	20000c53 	.word	0x20000c53
 8002324:	20000b98 	.word	0x20000b98
 8002328:	20000c20 	.word	0x20000c20
 800232c:	20000c1c 	.word	0x20000c1c
 8002330:	20000c2c 	.word	0x20000c2c
 8002334:	20000b94 	.word	0x20000b94
 8002338:	20000c28 	.word	0x20000c28
 800233c:	20000c24 	.word	0x20000c24
 8002340:	20000c30 	.word	0x20000c30
 8002344:	20000c54 	.word	0x20000c54
 8002348:	20000c58 	.word	0x20000c58
 800234c:	20000c52 	.word	0x20000c52
 8002350:	20000c51 	.word	0x20000c51
 8002354:	200012cc 	.word	0x200012cc
				} else {
					if (PenDelay()) {
 8002358:	f002 f91e 	bl	8004598 <PenDelay>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d017      	beq.n	8002392 <main+0x55a>
						if (TenPointMode) {
 8002362:	4bb7      	ldr	r3, [pc, #732]	@ (8002640 <main+0x808>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d013      	beq.n	8002392 <main+0x55a>
							if (counter == 9) {
 800236a:	4bb6      	ldr	r3, [pc, #728]	@ (8002644 <main+0x80c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d109      	bne.n	8002386 <main+0x54e>
								TenPointMode = false;
 8002372:	4ab3      	ldr	r2, [pc, #716]	@ (8002640 <main+0x808>)
 8002374:	2300      	movs	r3, #0
 8002376:	7013      	strb	r3, [r2, #0]
								counter = 0;
 8002378:	4ab2      	ldr	r2, [pc, #712]	@ (8002644 <main+0x80c>)
 800237a:	2300      	movs	r3, #0
 800237c:	7013      	strb	r3, [r2, #0]
								Mode = 1;
 800237e:	4ab2      	ldr	r2, [pc, #712]	@ (8002648 <main+0x810>)
 8002380:	2301      	movs	r3, #1
 8002382:	7013      	strb	r3, [r2, #0]
 8002384:	e005      	b.n	8002392 <main+0x55a>
							} else {
								counter++;
 8002386:	4baf      	ldr	r3, [pc, #700]	@ (8002644 <main+0x80c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4aad      	ldr	r2, [pc, #692]	@ (8002644 <main+0x80c>)
 8002390:	7013      	strb	r3, [r2, #0]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem))
 8002392:	4bad      	ldr	r3, [pc, #692]	@ (8002648 <main+0x810>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d107      	bne.n	80023aa <main+0x572>
 800239a:	4bac      	ldr	r3, [pc, #688]	@ (800264c <main+0x814>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d008      	beq.n	80023b4 <main+0x57c>
 80023a2:	4bab      	ldr	r3, [pc, #684]	@ (8002650 <main+0x818>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <main+0x57c>
				|| base_status == 1) {
 80023aa:	4ba8      	ldr	r3, [pc, #672]	@ (800264c <main+0x814>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	f040 8259 	bne.w	8002866 <main+0xa2e>
			switch (calibState) {
 80023b4:	4ba7      	ldr	r3, [pc, #668]	@ (8002654 <main+0x81c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	f200 8254 	bhi.w	8002866 <main+0xa2e>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <main+0x58c>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023f9 	.word	0x080023f9
 80023c8:	0800242f 	.word	0x0800242f
 80023cc:	08002475 	.word	0x08002475
 80023d0:	080024bf 	.word	0x080024bf
 80023d4:	08002509 	.word	0x08002509
 80023d8:	08002557 	.word	0x08002557
 80023dc:	080025a3 	.word	0x080025a3
 80023e0:	080025e3 	.word	0x080025e3
 80023e4:	08002689 	.word	0x08002689
 80023e8:	080026f5 	.word	0x080026f5
 80023ec:	08002761 	.word	0x08002761
 80023f0:	080027d1 	.word	0x080027d1
 80023f4:	08002813 	.word	0x08002813
			case CALIB_IDLE:
				Set_Motor(0, 0);
 80023f8:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8002684 <main+0x84c>
 80023fc:	2000      	movs	r0, #0
 80023fe:	f002 fd41 	bl	8004e84 <Set_Motor>
				Set_Motor(1, 0);
 8002402:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8002684 <main+0x84c>
 8002406:	2001      	movs	r0, #1
 8002408:	f002 fd3c 	bl	8004e84 <Set_Motor>
				P_Limit = 0;
 800240c:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <main+0x820>)
 800240e:	2300      	movs	r3, #0
 8002410:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002412:	4a92      	ldr	r2, [pc, #584]	@ (800265c <main+0x824>)
 8002414:	2300      	movs	r3, #0
 8002416:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002418:	4a8e      	ldr	r2, [pc, #568]	@ (8002654 <main+0x81c>)
 800241a:	2301      	movs	r3, #1
 800241c:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 800241e:	f002 fa7d 	bl	800491c <micros>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	498e      	ldr	r1, [pc, #568]	@ (8002660 <main+0x828>)
 8002428:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 800242c:	e21b      	b.n	8002866 <main+0xa2e>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 800242e:	4b8d      	ldr	r3, [pc, #564]	@ (8002664 <main+0x82c>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8002668 <main+0x830>
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd06      	ble.n	8002450 <main+0x618>
					Cal_Side = 1;
 8002442:	4a8a      	ldr	r2, [pc, #552]	@ (800266c <main+0x834>)
 8002444:	2301      	movs	r3, #1
 8002446:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002448:	4a82      	ldr	r2, [pc, #520]	@ (8002654 <main+0x81c>)
 800244a:	2302      	movs	r3, #2
 800244c:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 800244e:	e20a      	b.n	8002866 <main+0xa2e>
				} else if (Receiver[0] < -80) {
 8002450:	4b84      	ldr	r3, [pc, #528]	@ (8002664 <main+0x82c>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002670 <main+0x838>
 800245a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d400      	bmi.n	8002466 <main+0x62e>
				break;
 8002464:	e1ff      	b.n	8002866 <main+0xa2e>
					Cal_Side = 2;
 8002466:	4a81      	ldr	r2, [pc, #516]	@ (800266c <main+0x834>)
 8002468:	2302      	movs	r3, #2
 800246a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 800246c:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <main+0x81c>)
 800246e:	2302      	movs	r3, #2
 8002470:	7013      	strb	r3, [r2, #0]
				break;
 8002472:	e1f8      	b.n	8002866 <main+0xa2e>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -30);
 8002474:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002478:	2001      	movs	r0, #1
 800247a:	f002 fd03 	bl	8004e84 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800247e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002482:	487c      	ldr	r0, [pc, #496]	@ (8002674 <main+0x83c>)
 8002484:	f004 fbd0 	bl	8006c28 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d004      	beq.n	8002498 <main+0x660>
 800248e:	4b72      	ldr	r3, [pc, #456]	@ (8002658 <main+0x820>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 81d4 	beq.w	8002840 <main+0xa08>
					Set_Motor(1, 0);
 8002498:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002684 <main+0x84c>
 800249c:	2001      	movs	r0, #1
 800249e:	f002 fcf1 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 80024a2:	f002 fa3b 	bl	800491c <micros>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	496d      	ldr	r1, [pc, #436]	@ (8002660 <main+0x828>)
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024b0:	4a69      	ldr	r2, [pc, #420]	@ (8002658 <main+0x820>)
 80024b2:	2300      	movs	r3, #0
 80024b4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 80024b6:	4a67      	ldr	r2, [pc, #412]	@ (8002654 <main+0x81c>)
 80024b8:	2303      	movs	r3, #3
 80024ba:	7013      	strb	r3, [r2, #0]
				}
				break;
 80024bc:	e1c0      	b.n	8002840 <main+0xa08>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 80024be:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8002684 <main+0x84c>
 80024c2:	2001      	movs	r0, #1
 80024c4:	f002 fcde 	bl	8004e84 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024c8:	f002 fa28 	bl	800491c <micros>
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <main+0x828>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	ebb0 0802 	subs.w	r8, r0, r2
 80024d6:	eb61 0903 	sbc.w	r9, r1, r3
 80024da:	4b67      	ldr	r3, [pc, #412]	@ (8002678 <main+0x840>)
 80024dc:	4598      	cmp	r8, r3
 80024de:	f179 0300 	sbcs.w	r3, r9, #0
 80024e2:	d311      	bcc.n	8002508 <main+0x6d0>
					Set_Motor(1, 30);
 80024e4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80024e8:	2001      	movs	r0, #1
 80024ea:	f002 fccb 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 80024ee:	f002 fa15 	bl	800491c <micros>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	495a      	ldr	r1, [pc, #360]	@ (8002660 <main+0x828>)
 80024f8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024fc:	4a56      	ldr	r2, [pc, #344]	@ (8002658 <main+0x820>)
 80024fe:	2300      	movs	r3, #0
 8002500:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002502:	4a54      	ldr	r2, [pc, #336]	@ (8002654 <main+0x81c>)
 8002504:	2304      	movs	r3, #4
 8002506:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 30);
 8002508:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800250c:	2001      	movs	r0, #1
 800250e:	f002 fcb9 	bl	8004e84 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002512:	f002 fa03 	bl	800491c <micros>
 8002516:	4b52      	ldr	r3, [pc, #328]	@ (8002660 <main+0x828>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	ebb0 0a02 	subs.w	sl, r0, r2
 8002520:	eb61 0b03 	sbc.w	fp, r1, r3
 8002524:	4b54      	ldr	r3, [pc, #336]	@ (8002678 <main+0x840>)
 8002526:	459a      	cmp	sl, r3
 8002528:	f17b 0300 	sbcs.w	r3, fp, #0
 800252c:	f0c0 818a 	bcc.w	8002844 <main+0xa0c>
					Set_Motor(1, 0);
 8002530:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002684 <main+0x84c>
 8002534:	2001      	movs	r0, #1
 8002536:	f002 fca5 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 800253a:	f002 f9ef 	bl	800491c <micros>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4947      	ldr	r1, [pc, #284]	@ (8002660 <main+0x828>)
 8002544:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002548:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <main+0x820>)
 800254a:	2300      	movs	r3, #0
 800254c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 800254e:	4a41      	ldr	r2, [pc, #260]	@ (8002654 <main+0x81c>)
 8002550:	2305      	movs	r3, #5
 8002552:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002554:	e176      	b.n	8002844 <main+0xa0c>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002556:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8002684 <main+0x84c>
 800255a:	2001      	movs	r0, #1
 800255c:	f002 fc92 	bl	8004e84 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002560:	f002 f9dc 	bl	800491c <micros>
 8002564:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <main+0x828>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	1a85      	subs	r5, r0, r2
 800256c:	eb61 0603 	sbc.w	r6, r1, r3
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <main+0x840>)
 8002572:	429d      	cmp	r5, r3
 8002574:	f176 0300 	sbcs.w	r3, r6, #0
 8002578:	f0c0 8166 	bcc.w	8002848 <main+0xa10>
					Set_Motor(1, -20);
 800257c:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8002580:	2001      	movs	r0, #1
 8002582:	f002 fc7f 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 8002586:	f002 f9c9 	bl	800491c <micros>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4934      	ldr	r1, [pc, #208]	@ (8002660 <main+0x828>)
 8002590:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002594:	4a30      	ldr	r2, [pc, #192]	@ (8002658 <main+0x820>)
 8002596:	2300      	movs	r3, #0
 8002598:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800259a:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <main+0x81c>)
 800259c:	2306      	movs	r3, #6
 800259e:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025a0:	e152      	b.n	8002848 <main+0xa10>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -20);
 80025a2:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 80025a6:	2001      	movs	r0, #1
 80025a8:	f002 fc6c 	bl	8004e84 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80025ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025b0:	4830      	ldr	r0, [pc, #192]	@ (8002674 <main+0x83c>)
 80025b2:	f004 fb39 	bl	8006c28 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d004      	beq.n	80025c6 <main+0x78e>
 80025bc:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <main+0x820>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8143 	beq.w	800284c <main+0xa14>
					Set_Motor(1, 0);
 80025c6:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002684 <main+0x84c>
 80025ca:	2001      	movs	r0, #1
 80025cc:	f002 fc5a 	bl	8004e84 <Set_Motor>
					Reset_P();
 80025d0:	f002 fd10 	bl	8004ff4 <Reset_P>
					P_Limit = 0;
 80025d4:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <main+0x820>)
 80025d6:	2300      	movs	r3, #0
 80025d8:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80025da:	4a1e      	ldr	r2, [pc, #120]	@ (8002654 <main+0x81c>)
 80025dc:	2307      	movs	r3, #7
 80025de:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025e0:	e134      	b.n	800284c <main+0xa14>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <main+0x834>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <main+0x7be>
					Set_Motor(0, -50);
 80025ea:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800267c <main+0x844>
 80025ee:	2000      	movs	r0, #0
 80025f0:	f002 fc48 	bl	8004e84 <Set_Motor>
 80025f4:	e004      	b.n	8002600 <main+0x7c8>
				else
					Set_Motor(0, 50);
 80025f6:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002680 <main+0x848>
 80025fa:	2000      	movs	r0, #0
 80025fc:	f002 fc42 	bl	8004e84 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002600:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002604:	481b      	ldr	r0, [pc, #108]	@ (8002674 <main+0x83c>)
 8002606:	f004 fb0f 	bl	8006c28 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d004      	beq.n	800261a <main+0x7e2>
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <main+0x824>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 811b 	beq.w	8002850 <main+0xa18>
					Set_Motor(0, 0);
 800261a:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002684 <main+0x84c>
 800261e:	2000      	movs	r0, #0
 8002620:	f002 fc30 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 8002624:	f002 f97a 	bl	800491c <micros>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <main+0x828>)
 800262e:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002632:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <main+0x824>)
 8002634:	2300      	movs	r3, #0
 8002636:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002638:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <main+0x81c>)
 800263a:	2308      	movs	r3, #8
 800263c:	7013      	strb	r3, [r2, #0]
				}
				break;
 800263e:	e107      	b.n	8002850 <main+0xa18>
 8002640:	20000c52 	.word	0x20000c52
 8002644:	20000c51 	.word	0x20000c51
 8002648:	20000bcc 	.word	0x20000bcc
 800264c:	200012c8 	.word	0x200012c8
 8002650:	20000c53 	.word	0x20000c53
 8002654:	20000c34 	.word	0x20000c34
 8002658:	20000bd2 	.word	0x20000bd2
 800265c:	20000bd3 	.word	0x20000bd3
 8002660:	20000c38 	.word	0x20000c38
 8002664:	20000ab0 	.word	0x20000ab0
 8002668:	42a00000 	.word	0x42a00000
 800266c:	20000c40 	.word	0x20000c40
 8002670:	c2a00000 	.word	0xc2a00000
 8002674:	48000400 	.word	0x48000400
 8002678:	000186a1 	.word	0x000186a1
 800267c:	c2480000 	.word	0xc2480000
 8002680:	42480000 	.word	0x42480000
 8002684:	00000000 	.word	0x00000000

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002688:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002684 <main+0x84c>
 800268c:	2000      	movs	r0, #0
 800268e:	f002 fbf9 	bl	8004e84 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002692:	f002 f943 	bl	800491c <micros>
 8002696:	4bb8      	ldr	r3, [pc, #736]	@ (8002978 <main+0xb40>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	1a84      	subs	r4, r0, r2
 800269e:	633c      	str	r4, [r7, #48]	@ 0x30
 80026a0:	eb61 0303 	sbc.w	r3, r1, r3
 80026a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a6:	4bb5      	ldr	r3, [pc, #724]	@ (800297c <main+0xb44>)
 80026a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80026ac:	4602      	mov	r2, r0
 80026ae:	429a      	cmp	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	f173 0300 	sbcs.w	r3, r3, #0
 80026b6:	f0c0 80cd 	bcc.w	8002854 <main+0xa1c>
					if (Cal_Side == 1)
 80026ba:	4bb1      	ldr	r3, [pc, #708]	@ (8002980 <main+0xb48>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <main+0x896>
						Set_Motor(0, 50);
 80026c2:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8002984 <main+0xb4c>
 80026c6:	2000      	movs	r0, #0
 80026c8:	f002 fbdc 	bl	8004e84 <Set_Motor>
 80026cc:	e004      	b.n	80026d8 <main+0x8a0>
					else
						Set_Motor(0, -50);
 80026ce:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8002988 <main+0xb50>
 80026d2:	2000      	movs	r0, #0
 80026d4:	f002 fbd6 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 80026d8:	f002 f920 	bl	800491c <micros>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	49a5      	ldr	r1, [pc, #660]	@ (8002978 <main+0xb40>)
 80026e2:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026e6:	4aa9      	ldr	r2, [pc, #676]	@ (800298c <main+0xb54>)
 80026e8:	2300      	movs	r3, #0
 80026ea:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 80026ec:	4aa8      	ldr	r2, [pc, #672]	@ (8002990 <main+0xb58>)
 80026ee:	2309      	movs	r3, #9
 80026f0:	7013      	strb	r3, [r2, #0]
				}
				break;
 80026f2:	e0af      	b.n	8002854 <main+0xa1c>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 80026f4:	4ba2      	ldr	r3, [pc, #648]	@ (8002980 <main+0xb48>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <main+0x8d0>
					Set_Motor(0, 50);
 80026fc:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8002984 <main+0xb4c>
 8002700:	2000      	movs	r0, #0
 8002702:	f002 fbbf 	bl	8004e84 <Set_Motor>
 8002706:	e004      	b.n	8002712 <main+0x8da>
				else
					Set_Motor(0, -50);
 8002708:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8002988 <main+0xb50>
 800270c:	2000      	movs	r0, #0
 800270e:	f002 fbb9 	bl	8004e84 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002712:	f002 f903 	bl	800491c <micros>
 8002716:	4b98      	ldr	r3, [pc, #608]	@ (8002978 <main+0xb40>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	1a84      	subs	r4, r0, r2
 800271e:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002720:	eb61 0303 	sbc.w	r3, r1, r3
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002726:	4b9b      	ldr	r3, [pc, #620]	@ (8002994 <main+0xb5c>)
 8002728:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800272c:	4602      	mov	r2, r0
 800272e:	429a      	cmp	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	f173 0300 	sbcs.w	r3, r3, #0
 8002736:	f0c0 808f 	bcc.w	8002858 <main+0xa20>
					Set_Motor(0, 0);
 800273a:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8002998 <main+0xb60>
 800273e:	2000      	movs	r0, #0
 8002740:	f002 fba0 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 8002744:	f002 f8ea 	bl	800491c <micros>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	498a      	ldr	r1, [pc, #552]	@ (8002978 <main+0xb40>)
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002752:	4a8e      	ldr	r2, [pc, #568]	@ (800298c <main+0xb54>)
 8002754:	2300      	movs	r3, #0
 8002756:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002758:	4a8d      	ldr	r2, [pc, #564]	@ (8002990 <main+0xb58>)
 800275a:	230a      	movs	r3, #10
 800275c:	7013      	strb	r3, [r2, #0]
				}
				break;
 800275e:	e07b      	b.n	8002858 <main+0xa20>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002760:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8002998 <main+0xb60>
 8002764:	2000      	movs	r0, #0
 8002766:	f002 fb8d 	bl	8004e84 <Set_Motor>
				Z_index_R = 0;
 800276a:	4a8c      	ldr	r2, [pc, #560]	@ (800299c <main+0xb64>)
 800276c:	2300      	movs	r3, #0
 800276e:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 8002770:	f002 f8d4 	bl	800491c <micros>
 8002774:	4b80      	ldr	r3, [pc, #512]	@ (8002978 <main+0xb40>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	1a84      	subs	r4, r0, r2
 800277c:	623c      	str	r4, [r7, #32]
 800277e:	eb61 0303 	sbc.w	r3, r1, r3
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
 8002784:	4b7d      	ldr	r3, [pc, #500]	@ (800297c <main+0xb44>)
 8002786:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800278a:	4602      	mov	r2, r0
 800278c:	429a      	cmp	r2, r3
 800278e:	460b      	mov	r3, r1
 8002790:	f173 0300 	sbcs.w	r3, r3, #0
 8002794:	d362      	bcc.n	800285c <main+0xa24>
					if (Cal_Side == 1)
 8002796:	4b7a      	ldr	r3, [pc, #488]	@ (8002980 <main+0xb48>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <main+0x972>
						Set_Motor(0, -35);
 800279e:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80029a0 <main+0xb68>
 80027a2:	2000      	movs	r0, #0
 80027a4:	f002 fb6e 	bl	8004e84 <Set_Motor>
 80027a8:	e004      	b.n	80027b4 <main+0x97c>
					else
						Set_Motor(0, 35);
 80027aa:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 80029a4 <main+0xb6c>
 80027ae:	2000      	movs	r0, #0
 80027b0:	f002 fb68 	bl	8004e84 <Set_Motor>
					calib_timer = micros();
 80027b4:	f002 f8b2 	bl	800491c <micros>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	496e      	ldr	r1, [pc, #440]	@ (8002978 <main+0xb40>)
 80027be:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80027c2:	4a72      	ldr	r2, [pc, #456]	@ (800298c <main+0xb54>)
 80027c4:	2300      	movs	r3, #0
 80027c6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 80027c8:	4a71      	ldr	r2, [pc, #452]	@ (8002990 <main+0xb58>)
 80027ca:	230b      	movs	r3, #11
 80027cc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027ce:	e045      	b.n	800285c <main+0xa24>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 80027d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002980 <main+0xb48>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <main+0x9ac>
					Set_Motor(0, -35);
 80027d8:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80029a0 <main+0xb68>
 80027dc:	2000      	movs	r0, #0
 80027de:	f002 fb51 	bl	8004e84 <Set_Motor>
 80027e2:	e004      	b.n	80027ee <main+0x9b6>
				else
					Set_Motor(0, 35);
 80027e4:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80029a4 <main+0xb6c>
 80027e8:	2000      	movs	r0, #0
 80027ea:	f002 fb4b 	bl	8004e84 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 80027ee:	4b6b      	ldr	r3, [pc, #428]	@ (800299c <main+0xb64>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d034      	beq.n	8002860 <main+0xa28>
					Set_Motor(0, 0);
 80027f6:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8002998 <main+0xb60>
 80027fa:	2000      	movs	r0, #0
 80027fc:	f002 fb42 	bl	8004e84 <Set_Motor>
					Reset_R();
 8002800:	f002 fbe8 	bl	8004fd4 <Reset_R>
					R_Limit = 0;
 8002804:	4a61      	ldr	r2, [pc, #388]	@ (800298c <main+0xb54>)
 8002806:	2300      	movs	r3, #0
 8002808:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 800280a:	4a61      	ldr	r2, [pc, #388]	@ (8002990 <main+0xb58>)
 800280c:	230c      	movs	r3, #12
 800280e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002810:	e026      	b.n	8002860 <main+0xa28>

			case CALIB_DONE:
				Cal_Side = 0;
 8002812:	4a5b      	ldr	r2, [pc, #364]	@ (8002980 <main+0xb48>)
 8002814:	2300      	movs	r3, #0
 8002816:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002818:	4a63      	ldr	r2, [pc, #396]	@ (80029a8 <main+0xb70>)
 800281a:	2300      	movs	r3, #0
 800281c:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 800281e:	4a63      	ldr	r2, [pc, #396]	@ (80029ac <main+0xb74>)
 8002820:	2300      	movs	r3, #0
 8002822:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002824:	4a59      	ldr	r2, [pc, #356]	@ (800298c <main+0xb54>)
 8002826:	2300      	movs	r3, #0
 8002828:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 800282a:	4a59      	ldr	r2, [pc, #356]	@ (8002990 <main+0xb58>)
 800282c:	2300      	movs	r3, #0
 800282e:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 8002830:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <main+0xb78>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d115      	bne.n	8002864 <main+0xa2c>
					REG16(REG_MOTION_STATUS) = 0;
 8002838:	4a5e      	ldr	r2, [pc, #376]	@ (80029b4 <main+0xb7c>)
 800283a:	2300      	movs	r3, #0
 800283c:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 800283e:	e011      	b.n	8002864 <main+0xa2c>
				break;
 8002840:	bf00      	nop
 8002842:	e010      	b.n	8002866 <main+0xa2e>
				break;
 8002844:	bf00      	nop
 8002846:	e00e      	b.n	8002866 <main+0xa2e>
				break;
 8002848:	bf00      	nop
 800284a:	e00c      	b.n	8002866 <main+0xa2e>
				break;
 800284c:	bf00      	nop
 800284e:	e00a      	b.n	8002866 <main+0xa2e>
				break;
 8002850:	bf00      	nop
 8002852:	e008      	b.n	8002866 <main+0xa2e>
				break;
 8002854:	bf00      	nop
 8002856:	e006      	b.n	8002866 <main+0xa2e>
				break;
 8002858:	bf00      	nop
 800285a:	e004      	b.n	8002866 <main+0xa2e>
				break;
 800285c:	bf00      	nop
 800285e:	e002      	b.n	8002866 <main+0xa2e>
				break;
 8002860:	bf00      	nop
 8002862:	e000      	b.n	8002866 <main+0xa2e>
				break;
 8002864:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem) {
 8002866:	4b52      	ldr	r3, [pc, #328]	@ (80029b0 <main+0xb78>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d004      	beq.n	8002878 <main+0xa40>
 800286e:	4b52      	ldr	r3, [pc, #328]	@ (80029b8 <main+0xb80>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f43f ab69 	beq.w	8001f4a <main+0x112>
			currentTimer = micros(); // Current time in microseconds
 8002878:	f002 f850 	bl	800491c <micros>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	494e      	ldr	r1, [pc, #312]	@ (80029bc <main+0xb84>)
 8002882:	e9c1 2300 	strd	r2, r3, [r1]

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002886:	4b4e      	ldr	r3, [pc, #312]	@ (80029c0 <main+0xb88>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	461a      	mov	r2, r3
 800288e:	4b4d      	ldr	r3, [pc, #308]	@ (80029c4 <main+0xb8c>)
 8002890:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002892:	4b4d      	ldr	r3, [pc, #308]	@ (80029c8 <main+0xb90>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	461a      	mov	r2, r3
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <main+0xb8c>)
 800289c:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800289e:	4b48      	ldr	r3, [pc, #288]	@ (80029c0 <main+0xb88>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fdf9 	bl	800049c <__aeabi_ui2d>
 80028aa:	a32f      	add	r3, pc, #188	@ (adr r3, 8002968 <main+0xb30>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd fcb6 	bl	8000220 <__aeabi_dsub>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
			float RX_temp = map(
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f922 	bl	8000b04 <__aeabi_d2f>
 80028c0:	4603      	mov	r3, r0
 80028c2:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 80029cc <main+0xb94>
 80028c6:	eddf 1a46 	vldr	s3, [pc, #280]	@ 80029e0 <main+0xba8>
 80028ca:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 80029d0 <main+0xb98>
 80028ce:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80029d4 <main+0xb9c>
 80028d2:	ee00 3a10 	vmov	s0, r3
 80028d6:	f001 fefd 	bl	80046d4 <map>
 80028da:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 80028de:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <main+0xb90>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fdd9 	bl	800049c <__aeabi_ui2d>
 80028ea:	a321      	add	r3, pc, #132	@ (adr r3, 8002970 <main+0xb38>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fc96 	bl	8000220 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
			float RY_temp = map(
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7fe f902 	bl	8000b04 <__aeabi_d2f>
 8002900:	4603      	mov	r3, r0
 8002902:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 80029cc <main+0xb94>
 8002906:	eddf 1a36 	vldr	s3, [pc, #216]	@ 80029e0 <main+0xba8>
 800290a:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 80029d0 <main+0xb98>
 800290e:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80029d4 <main+0xb9c>
 8002912:	ee00 3a10 	vmov	s0, r3
 8002916:	f001 fedd 	bl	80046d4 <map>
 800291a:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 800291e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002922:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	db0d      	blt.n	800294c <main+0xb14>
 8002930:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002934:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d804      	bhi.n	800294c <main+0xb14>
				Receiver[0] = 0.00;
 8002942:	4a25      	ldr	r2, [pc, #148]	@ (80029d8 <main+0xba0>)
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e05c      	b.n	8002a06 <main+0xbce>
			else if (RX_temp > 100)
 800294c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002950:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80029cc <main+0xb94>
 8002954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	dd42      	ble.n	80029e4 <main+0xbac>
				Receiver[0] = 100.00;
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <main+0xba0>)
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <main+0xba4>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e04f      	b.n	8002a06 <main+0xbce>
 8002966:	bf00      	nop
 8002968:	00000000 	.word	0x00000000
 800296c:	40977000 	.word	0x40977000
 8002970:	00000000 	.word	0x00000000
 8002974:	40d21880 	.word	0x40d21880
 8002978:	20000c38 	.word	0x20000c38
 800297c:	000186a1 	.word	0x000186a1
 8002980:	20000c40 	.word	0x20000c40
 8002984:	42480000 	.word	0x42480000
 8002988:	c2480000 	.word	0xc2480000
 800298c:	20000bd3 	.word	0x20000bd3
 8002990:	20000c34 	.word	0x20000c34
 8002994:	00030d41 	.word	0x00030d41
 8002998:	00000000 	.word	0x00000000
 800299c:	20000b78 	.word	0x20000b78
 80029a0:	c20c0000 	.word	0xc20c0000
 80029a4:	420c0000 	.word	0x420c0000
 80029a8:	20000bcc 	.word	0x20000bcc
 80029ac:	20000bd2 	.word	0x20000bd2
 80029b0:	200012c8 	.word	0x200012c8
 80029b4:	20001138 	.word	0x20001138
 80029b8:	20000c53 	.word	0x20000c53
 80029bc:	20001320 	.word	0x20001320
 80029c0:	2000037c 	.word	0x2000037c
 80029c4:	20000ac4 	.word	0x20000ac4
 80029c8:	200002b0 	.word	0x200002b0
 80029cc:	42c80000 	.word	0x42c80000
 80029d0:	43fa0000 	.word	0x43fa0000
 80029d4:	c3fa0000 	.word	0xc3fa0000
 80029d8:	20000ab0 	.word	0x20000ab0
 80029dc:	42c80000 	.word	0x42c80000
 80029e0:	c2c80000 	.word	0xc2c80000
			else if (RX_temp < -100)
 80029e4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80029e8:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80029e0 <main+0xba8>
 80029ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	d503      	bpl.n	80029fe <main+0xbc6>
				Receiver[0] = -100.00;
 80029f6:	4ac2      	ldr	r2, [pc, #776]	@ (8002d00 <main+0xec8>)
 80029f8:	4bc2      	ldr	r3, [pc, #776]	@ (8002d04 <main+0xecc>)
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e003      	b.n	8002a06 <main+0xbce>
			else
				Receiver[0] = RX_temp;
 80029fe:	4ac0      	ldr	r2, [pc, #768]	@ (8002d00 <main+0xec8>)
 8002a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a04:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002a06:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002a0a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	db0d      	blt.n	8002a34 <main+0xbfc>
 8002a18:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002a1c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d804      	bhi.n	8002a34 <main+0xbfc>
				Receiver[1] = 0.00;
 8002a2a:	4ab5      	ldr	r2, [pc, #724]	@ (8002d00 <main+0xec8>)
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	6053      	str	r3, [r2, #4]
 8002a32:	e01d      	b.n	8002a70 <main+0xc38>
			else if (RY_temp > 100)
 8002a34:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002a38:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8002d08 <main+0xed0>
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	dd03      	ble.n	8002a4e <main+0xc16>
				Receiver[1] = 100.00;
 8002a46:	4aae      	ldr	r2, [pc, #696]	@ (8002d00 <main+0xec8>)
 8002a48:	4bb0      	ldr	r3, [pc, #704]	@ (8002d0c <main+0xed4>)
 8002a4a:	6053      	str	r3, [r2, #4]
 8002a4c:	e010      	b.n	8002a70 <main+0xc38>
			else if (RY_temp < -100)
 8002a4e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002a52:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8002d10 <main+0xed8>
 8002a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d503      	bpl.n	8002a68 <main+0xc30>
				Receiver[1] = -100.00;
 8002a60:	4aa7      	ldr	r2, [pc, #668]	@ (8002d00 <main+0xec8>)
 8002a62:	4ba8      	ldr	r3, [pc, #672]	@ (8002d04 <main+0xecc>)
 8002a64:	6053      	str	r3, [r2, #4]
 8002a66:	e003      	b.n	8002a70 <main+0xc38>
			else
				Receiver[1] = RY_temp;
 8002a68:	4aa5      	ldr	r2, [pc, #660]	@ (8002d00 <main+0xec8>)
 8002a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a6e:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a70:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <main+0xedc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a78:	d912      	bls.n	8002aa0 <main+0xc68>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002d14 <main+0xedc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd0c 	bl	800049c <__aeabi_ui2d>
 8002a84:	a39a      	add	r3, pc, #616	@ (adr r3, 8002cf0 <main+0xeb8>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fbc9 	bl	8000220 <__aeabi_dsub>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f815 	bl	8000ac4 <__aeabi_d2uiz>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002d14 <main+0xedc>)
 8002a9e:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d14 <main+0xedc>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002aa8:	d912      	bls.n	8002ad0 <main+0xc98>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002aaa:	4b9a      	ldr	r3, [pc, #616]	@ (8002d14 <main+0xedc>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fcf4 	bl	800049c <__aeabi_ui2d>
 8002ab4:	a38e      	add	r3, pc, #568	@ (adr r3, 8002cf0 <main+0xeb8>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fbb1 	bl	8000220 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fd fffd 	bl	8000ac4 <__aeabi_d2uiz>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b91      	ldr	r3, [pc, #580]	@ (8002d14 <main+0xedc>)
 8002ace:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002ad0:	4b90      	ldr	r3, [pc, #576]	@ (8002d14 <main+0xedc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002ad8:	d912      	bls.n	8002b00 <main+0xcc8>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002ada:	4b8e      	ldr	r3, [pc, #568]	@ (8002d14 <main+0xedc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fcdc 	bl	800049c <__aeabi_ui2d>
 8002ae4:	a382      	add	r3, pc, #520	@ (adr r3, 8002cf0 <main+0xeb8>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fb99 	bl	8000220 <__aeabi_dsub>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fd ffe5 	bl	8000ac4 <__aeabi_d2uiz>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <main+0xedc>)
 8002afe:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002b00:	4b84      	ldr	r3, [pc, #528]	@ (8002d14 <main+0xedc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fce6 	bl	80004e0 <__aeabi_f2d>
 8002b14:	a378      	add	r3, pc, #480	@ (adr r3, 8002cf8 <main+0xec0>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fb81 	bl	8000220 <__aeabi_dsub>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fd ffed 	bl	8000b04 <__aeabi_d2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 8002d08 <main+0xed0>
 8002b30:	eddf 1a77 	vldr	s3, [pc, #476]	@ 8002d10 <main+0xed8>
 8002b34:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8002d18 <main+0xee0>
 8002b38:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8002d1c <main+0xee4>
 8002b3c:	ee00 3a10 	vmov	s0, r3
 8002b40:	f001 fdc8 	bl	80046d4 <map>
 8002b44:	eef0 7a40 	vmov.f32	s15, s0
 8002b48:	4b6d      	ldr	r3, [pc, #436]	@ (8002d00 <main+0xec8>)
 8002b4a:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002b4e:	4b71      	ldr	r3, [pc, #452]	@ (8002d14 <main+0xedc>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5a:	ee17 0a90 	vmov	r0, s15
 8002b5e:	f7fd fcbf 	bl	80004e0 <__aeabi_f2d>
 8002b62:	a365      	add	r3, pc, #404	@ (adr r3, 8002cf8 <main+0xec0>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fb5a 	bl	8000220 <__aeabi_dsub>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fd ffc6 	bl	8000b04 <__aeabi_d2f>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8002d08 <main+0xed0>
 8002b7e:	eddf 1a64 	vldr	s3, [pc, #400]	@ 8002d10 <main+0xed8>
 8002b82:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8002d18 <main+0xee0>
 8002b86:	eddf 0a65 	vldr	s1, [pc, #404]	@ 8002d1c <main+0xee4>
 8002b8a:	ee00 3a10 	vmov	s0, r3
 8002b8e:	f001 fda1 	bl	80046d4 <map>
 8002b92:	eef0 7a40 	vmov.f32	s15, s0
 8002b96:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <main+0xec8>)
 8002b98:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d14 <main+0xedc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba8:	ee17 0a90 	vmov	r0, s15
 8002bac:	f7fd fc98 	bl	80004e0 <__aeabi_f2d>
 8002bb0:	a351      	add	r3, pc, #324	@ (adr r3, 8002cf8 <main+0xec0>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fb33 	bl	8000220 <__aeabi_dsub>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fd ff9f 	bl	8000b04 <__aeabi_d2f>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	ed9f 2a4f 	vldr	s4, [pc, #316]	@ 8002d08 <main+0xed0>
 8002bcc:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8002d10 <main+0xed8>
 8002bd0:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8002d18 <main+0xee0>
 8002bd4:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8002d1c <main+0xee4>
 8002bd8:	ee00 3a10 	vmov	s0, r3
 8002bdc:	f001 fd7a 	bl	80046d4 <map>
 8002be0:	eef0 7a40 	vmov.f32	s15, s0
 8002be4:	4b46      	ldr	r3, [pc, #280]	@ (8002d00 <main+0xec8>)
 8002be6:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002bea:	4b45      	ldr	r3, [pc, #276]	@ (8002d00 <main+0xec8>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8002d20 <main+0xee8>
 8002bf4:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8002d24 <main+0xeec>
 8002bf8:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8002d08 <main+0xed0>
 8002bfc:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8002d10 <main+0xed8>
 8002c00:	eeb0 0a67 	vmov.f32	s0, s15
 8002c04:	f001 fd66 	bl	80046d4 <map>
 8002c08:	eef0 7a40 	vmov.f32	s15, s0
 8002c0c:	4b46      	ldr	r3, [pc, #280]	@ (8002d28 <main+0xef0>)
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002c12:	4b3b      	ldr	r3, [pc, #236]	@ (8002d00 <main+0xec8>)
 8002c14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c18:	ed9f 2a41 	vldr	s4, [pc, #260]	@ 8002d20 <main+0xee8>
 8002c1c:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8002d24 <main+0xeec>
 8002c20:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8002d08 <main+0xed0>
 8002c24:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8002d10 <main+0xed8>
 8002c28:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2c:	f001 fd52 	bl	80046d4 <map>
 8002c30:	eef0 7a40 	vmov.f32	s15, s0
 8002c34:	4b3d      	ldr	r3, [pc, #244]	@ (8002d2c <main+0xef4>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <main+0xef8>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d103      	bne.n	8002c4a <main+0xe12>
				Mode = 0;
 8002c42:	4a3c      	ldr	r2, [pc, #240]	@ (8002d34 <main+0xefc>)
 8002c44:	2300      	movs	r3, #0
 8002c46:	7013      	strb	r3, [r2, #0]
 8002c48:	e17d      	b.n	8002f46 <main+0x110e>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <main+0xec8>)
 8002c4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c50:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d50d      	bpl.n	8002c7a <main+0xe42>
 8002c5e:	4b28      	ldr	r3, [pc, #160]	@ (8002d00 <main+0xec8>)
 8002c60:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c64:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	d503      	bpl.n	8002c7a <main+0xe42>
				Mode = 0;
 8002c72:	4a30      	ldr	r2, [pc, #192]	@ (8002d34 <main+0xefc>)
 8002c74:	2300      	movs	r3, #0
 8002c76:	7013      	strb	r3, [r2, #0]
 8002c78:	e165      	b.n	8002f46 <main+0x110e>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002c7a:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <main+0xec8>)
 8002c7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	f340 815a 	ble.w	8002f40 <main+0x1108>
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <main+0xf00>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 8155 	bne.w	8002f40 <main+0x1108>
				IsPress = 1;
 8002c96:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <main+0xf00>)
 8002c98:	2301      	movs	r3, #1
 8002c9a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c9c:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <main+0xf04>)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002ca2:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <main+0xec8>)
 8002ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ca8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	dd55      	ble.n	8002d62 <main+0xf2a>
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <main+0xec8>)
 8002cb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cbc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	d54b      	bpl.n	8002d62 <main+0xf2a>
						&& Receiver[4] < -30) {
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <main+0xec8>)
 8002ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cd0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d541      	bpl.n	8002d62 <main+0xf2a>
					if (Mode != 1) {
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <main+0xefc>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d02c      	beq.n	8002d40 <main+0xf08>
						Mode = 1;
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <main+0xefc>)
 8002ce8:	2301      	movs	r3, #1
 8002cea:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002cec:	e127      	b.n	8002f3e <main+0x1106>
 8002cee:	bf00      	nop
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	40b32400 	.word	0x40b32400
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40977000 	.word	0x40977000
 8002d00:	20000ab0 	.word	0x20000ab0
 8002d04:	c2c80000 	.word	0xc2c80000
 8002d08:	42c80000 	.word	0x42c80000
 8002d0c:	42c80000 	.word	0x42c80000
 8002d10:	c2c80000 	.word	0xc2c80000
 8002d14:	20000ae4 	.word	0x20000ae4
 8002d18:	43fa0000 	.word	0x43fa0000
 8002d1c:	c3fa0000 	.word	0xc3fa0000
 8002d20:	43960000 	.word	0x43960000
 8002d24:	c3960000 	.word	0xc3960000
 8002d28:	20000b7c 	.word	0x20000b7c
 8002d2c:	20000b80 	.word	0x20000b80
 8002d30:	20000bce 	.word	0x20000bce
 8002d34:	20000bcc 	.word	0x20000bcc
 8002d38:	20000bcf 	.word	0x20000bcf
 8002d3c:	20000c34 	.word	0x20000c34
					} else {
						TargetX = End_x;
 8002d40:	4b8f      	ldr	r3, [pc, #572]	@ (8002f80 <main+0x1148>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b8f      	ldr	r3, [pc, #572]	@ (8002f84 <main+0x114c>)
 8002d46:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002d48:	4b8f      	ldr	r3, [pc, #572]	@ (8002f88 <main+0x1150>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f8c <main+0x1154>)
 8002d4e:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002d50:	4b8f      	ldr	r3, [pc, #572]	@ (8002f90 <main+0x1158>)
 8002d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d54:	4b8f      	ldr	r3, [pc, #572]	@ (8002f94 <main+0x115c>)
 8002d56:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002d58:	4b8f      	ldr	r3, [pc, #572]	@ (8002f98 <main+0x1160>)
 8002d5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f9c <main+0x1164>)
 8002d5e:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002d60:	e0ed      	b.n	8002f3e <main+0x1106>
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002d62:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa0 <main+0x1168>)
 8002d64:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d68:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	dd13      	ble.n	8002d9e <main+0xf66>
 8002d76:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa0 <main+0x1168>)
 8002d78:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d7c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d88:	d509      	bpl.n	8002d9e <main+0xf66>
					revolute.finished = 0;
 8002d8a:	4a86      	ldr	r2, [pc, #536]	@ (8002fa4 <main+0x116c>)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002d90:	4a85      	ldr	r2, [pc, #532]	@ (8002fa8 <main+0x1170>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002d96:	4a85      	ldr	r2, [pc, #532]	@ (8002fac <main+0x1174>)
 8002d98:	2302      	movs	r3, #2
 8002d9a:	7013      	strb	r3, [r2, #0]
 8002d9c:	e0cf      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d9e:	4b80      	ldr	r3, [pc, #512]	@ (8002fa0 <main+0x1168>)
 8002da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002da4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	d517      	bpl.n	8002de2 <main+0xfaa>
 8002db2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa0 <main+0x1168>)
 8002db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	dd0d      	ble.n	8002de2 <main+0xfaa>
						&& Receiver[4] < 30) {
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <main+0x1168>)
 8002dc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dcc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d503      	bpl.n	8002de2 <main+0xfaa>
					Mode = 3;
 8002dda:	4a74      	ldr	r2, [pc, #464]	@ (8002fac <main+0x1174>)
 8002ddc:	2303      	movs	r3, #3
 8002dde:	7013      	strb	r3, [r2, #0]
 8002de0:	e0ad      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002de2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <main+0x1168>)
 8002de4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002de8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	dd27      	ble.n	8002e46 <main+0x100e>
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <main+0x1168>)
 8002df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dfc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	d51d      	bpl.n	8002e46 <main+0x100e>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002e0a:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <main+0x1168>)
 8002e0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e10:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1c:	dd13      	ble.n	8002e46 <main+0x100e>
 8002e1e:	4b60      	ldr	r3, [pc, #384]	@ (8002fa0 <main+0x1168>)
 8002e20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e24:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d509      	bpl.n	8002e46 <main+0x100e>
					revolute.finished = 0;
 8002e32:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa4 <main+0x116c>)
 8002e34:	2300      	movs	r3, #0
 8002e36:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002e38:	4a5b      	ldr	r2, [pc, #364]	@ (8002fa8 <main+0x1170>)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fac <main+0x1174>)
 8002e40:	2304      	movs	r3, #4
 8002e42:	7013      	strb	r3, [r2, #0]
 8002e44:	e07b      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002e46:	4b56      	ldr	r3, [pc, #344]	@ (8002fa0 <main+0x1168>)
 8002e48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e4c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	dd17      	ble.n	8002e8a <main+0x1052>
 8002e5a:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <main+0x1168>)
 8002e5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e60:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	dd0d      	ble.n	8002e8a <main+0x1052>
						&& Receiver[4] < 30) {
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <main+0x1168>)
 8002e70:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e74:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e80:	d503      	bpl.n	8002e8a <main+0x1052>
					Mode = 5;
 8002e82:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <main+0x1174>)
 8002e84:	2305      	movs	r3, #5
 8002e86:	7013      	strb	r3, [r2, #0]
 8002e88:	e059      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e8a:	4b45      	ldr	r3, [pc, #276]	@ (8002fa0 <main+0x1168>)
 8002e8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e90:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	d50d      	bpl.n	8002eba <main+0x1082>
 8002e9e:	4b40      	ldr	r3, [pc, #256]	@ (8002fa0 <main+0x1168>)
 8002ea0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ea4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	dd03      	ble.n	8002eba <main+0x1082>
					Mode = 6;
 8002eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fac <main+0x1174>)
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	7013      	strb	r3, [r2, #0]
 8002eb8:	e041      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002eba:	4b39      	ldr	r3, [pc, #228]	@ (8002fa0 <main+0x1168>)
 8002ebc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ec0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	dd17      	ble.n	8002efe <main+0x10c6>
 8002ece:	4b34      	ldr	r3, [pc, #208]	@ (8002fa0 <main+0x1168>)
 8002ed0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d50d      	bpl.n	8002efe <main+0x10c6>
						&& Receiver[4] > 30) {
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa0 <main+0x1168>)
 8002ee4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	dd03      	ble.n	8002efe <main+0x10c6>
					Mode = 7;
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <main+0x1174>)
 8002ef8:	2307      	movs	r3, #7
 8002efa:	7013      	strb	r3, [r2, #0]
 8002efc:	e01f      	b.n	8002f3e <main+0x1106>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002efe:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <main+0x1168>)
 8002f00:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f04:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	dc00      	bgt.n	8002f14 <main+0x10dc>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f12:	e018      	b.n	8002f46 <main+0x110e>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <main+0x1168>)
 8002f16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f1a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	dc00      	bgt.n	8002f2a <main+0x10f2>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f28:	e00d      	b.n	8002f46 <main+0x110e>
					// loop_counter = 0;
					TargetR = 4.18879;
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f94 <main+0x115c>)
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <main+0x1178>)
 8002f2e:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002f30:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <main+0x1164>)
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <main+0x117c>)
 8002f34:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <main+0x1174>)
 8002f38:	2308      	movs	r3, #8
 8002f3a:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f3c:	e003      	b.n	8002f46 <main+0x110e>
 8002f3e:	e002      	b.n	8002f46 <main+0x110e>
				}
			} else {
				IsPress = 0;
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <main+0x1180>)
 8002f42:	2300      	movs	r3, #0
 8002f44:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <main+0x1174>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d13a      	bne.n	8002fc4 <main+0x118c>
				Set_Motor(0, 0);
 8002f4e:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002fbc <main+0x1184>
 8002f52:	2000      	movs	r0, #0
 8002f54:	f001 ff96 	bl	8004e84 <Set_Motor>
				Set_Motor(1, 0);
 8002f58:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002fbc <main+0x1184>
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f001 ff91 	bl	8004e84 <Set_Motor>
				if (Last_Mode != Mode) {
 8002f62:	4b17      	ldr	r3, [pc, #92]	@ (8002fc0 <main+0x1188>)
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <main+0x1174>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d02d      	beq.n	8002fca <main+0x1192>
					Set_Servo(0);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f002 f806 	bl	8004f80 <Set_Servo>
					Last_Mode = Mode;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <main+0x1174>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4a11      	ldr	r2, [pc, #68]	@ (8002fc0 <main+0x1188>)
 8002f7a:	7013      	strb	r3, [r2, #0]
 8002f7c:	e025      	b.n	8002fca <main+0x1192>
 8002f7e:	bf00      	nop
 8002f80:	20000b84 	.word	0x20000b84
 8002f84:	20000b8c 	.word	0x20000b8c
 8002f88:	20000b88 	.word	0x20000b88
 8002f8c:	20000b90 	.word	0x20000b90
 8002f90:	20000af8 	.word	0x20000af8
 8002f94:	20000b94 	.word	0x20000b94
 8002f98:	20000b38 	.word	0x20000b38
 8002f9c:	20000b98 	.word	0x20000b98
 8002fa0:	20000ab0 	.word	0x20000ab0
 8002fa4:	2000133c 	.word	0x2000133c
 8002fa8:	20001380 	.word	0x20001380
 8002fac:	20000bcc 	.word	0x20000bcc
 8002fb0:	40860a91 	.word	0x40860a91
 8002fb4:	42480000 	.word	0x42480000
 8002fb8:	20000bcf 	.word	0x20000bcf
 8002fbc:	00000000 	.word	0x00000000
 8002fc0:	20000bcd 	.word	0x20000bcd
				}
			} else {
				Last_Mode = 255;
 8002fc4:	4ac2      	ldr	r2, [pc, #776]	@ (80032d0 <main+0x1498>)
 8002fc6:	23ff      	movs	r3, #255	@ 0xff
 8002fc8:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002fca:	4bc2      	ldr	r3, [pc, #776]	@ (80032d4 <main+0x149c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80af 	bne.w	8003132 <main+0x12fa>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002fd4:	4bc0      	ldr	r3, [pc, #768]	@ (80032d8 <main+0x14a0>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002fde:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002fe2:	ed9f 1abe 	vldr	s2, [pc, #760]	@ 80032dc <main+0x14a4>
 8002fe6:	eddf 0abe 	vldr	s1, [pc, #760]	@ 80032e0 <main+0x14a8>
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	f001 fb71 	bl	80046d4 <map>
 8002ff2:	eef0 7a40 	vmov.f32	s15, s0
 8002ff6:	4bbb      	ldr	r3, [pc, #748]	@ (80032e4 <main+0x14ac>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002ffc:	4bb6      	ldr	r3, [pc, #728]	@ (80032d8 <main+0x14a0>)
 8002ffe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003002:	ed9f 2ab9 	vldr	s4, [pc, #740]	@ 80032e8 <main+0x14b0>
 8003006:	eddf 1ab9 	vldr	s3, [pc, #740]	@ 80032ec <main+0x14b4>
 800300a:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 80032dc <main+0x14a4>
 800300e:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 80032e0 <main+0x14a8>
 8003012:	eeb0 0a67 	vmov.f32	s0, s15
 8003016:	f001 fb5d 	bl	80046d4 <map>
 800301a:	eef0 7a40 	vmov.f32	s15, s0
 800301e:	4bb4      	ldr	r3, [pc, #720]	@ (80032f0 <main+0x14b8>)
 8003020:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8003024:	4baf      	ldr	r3, [pc, #700]	@ (80032e4 <main+0x14ac>)
 8003026:	ed93 7a00 	vldr	s14, [r3]
 800302a:	4bb2      	ldr	r3, [pc, #712]	@ (80032f4 <main+0x14bc>)
 800302c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003034:	4bb0      	ldr	r3, [pc, #704]	@ (80032f8 <main+0x14c0>)
 8003036:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 800303a:	4bad      	ldr	r3, [pc, #692]	@ (80032f0 <main+0x14b8>)
 800303c:	ed93 7a00 	vldr	s14, [r3]
 8003040:	4bae      	ldr	r3, [pc, #696]	@ (80032fc <main+0x14c4>)
 8003042:	edd3 7a08 	vldr	s15, [r3, #32]
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	4bad      	ldr	r3, [pc, #692]	@ (8003300 <main+0x14c8>)
 800304c:	edc3 7a00 	vstr	s15, [r3]

				//Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8003050:	f001 fc64 	bl	800491c <micros>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				if (currentTimeState1 > timestampState1) {
 800305c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003060:	4ba8      	ldr	r3, [pc, #672]	@ (8003304 <main+0x14cc>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	4282      	cmp	r2, r0
 8003068:	418b      	sbcs	r3, r1
 800306a:	d250      	bcs.n	800310e <main+0x12d6>
					timestampState1 = currentTimeState1 + 1000;		//us
 800306c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003070:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003074:	61b9      	str	r1, [r7, #24]
 8003076:	f143 0300 	adc.w	r3, r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003080:	4ba0      	ldr	r3, [pc, #640]	@ (8003304 <main+0x14cc>)
 8003082:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8003086:	4b9c      	ldr	r3, [pc, #624]	@ (80032f8 <main+0x14c0>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	4b9e      	ldr	r3, [pc, #632]	@ (8003308 <main+0x14d0>)
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	4b9e      	ldr	r3, [pc, #632]	@ (800330c <main+0x14d4>)
 8003094:	edd3 6a00 	vldr	s13, [r3]
 8003098:	4b9d      	ldr	r3, [pc, #628]	@ (8003310 <main+0x14d8>)
 800309a:	ed93 6a00 	vldr	s12, [r3]
 800309e:	489d      	ldr	r0, [pc, #628]	@ (8003314 <main+0x14dc>)
 80030a0:	ed9f 3a8e 	vldr	s6, [pc, #568]	@ 80032dc <main+0x14a4>
 80030a4:	eddf 2a8e 	vldr	s5, [pc, #568]	@ 80032e0 <main+0x14a8>
 80030a8:	ed9f 2a9b 	vldr	s4, [pc, #620]	@ 8003318 <main+0x14e0>
 80030ac:	eef0 1a46 	vmov.f32	s3, s12
 80030b0:	eeb0 1a66 	vmov.f32	s2, s13
 80030b4:	eef0 0a47 	vmov.f32	s1, s14
 80030b8:	eeb0 0a67 	vmov.f32	s0, s15
 80030bc:	f001 fc48 	bl	8004950 <PID_Update>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	4b95      	ldr	r3, [pc, #596]	@ (800331c <main+0x14e4>)
 80030c6:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <main+0x14c8>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	4b93      	ldr	r3, [pc, #588]	@ (8003320 <main+0x14e8>)
 80030d2:	ed93 7a00 	vldr	s14, [r3]
 80030d6:	4b93      	ldr	r3, [pc, #588]	@ (8003324 <main+0x14ec>)
 80030d8:	edd3 6a00 	vldr	s13, [r3]
 80030dc:	4b92      	ldr	r3, [pc, #584]	@ (8003328 <main+0x14f0>)
 80030de:	ed93 6a00 	vldr	s12, [r3]
 80030e2:	4892      	ldr	r0, [pc, #584]	@ (800332c <main+0x14f4>)
 80030e4:	ed9f 3a7d 	vldr	s6, [pc, #500]	@ 80032dc <main+0x14a4>
 80030e8:	eddf 2a7d 	vldr	s5, [pc, #500]	@ 80032e0 <main+0x14a8>
 80030ec:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 8003318 <main+0x14e0>
 80030f0:	eef0 1a46 	vmov.f32	s3, s12
 80030f4:	eeb0 1a66 	vmov.f32	s2, s13
 80030f8:	eef0 0a47 	vmov.f32	s1, s14
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	f001 fc26 	bl	8004950 <PID_Update>
 8003104:	eef0 7a40 	vmov.f32	s15, s0
 8003108:	4b89      	ldr	r3, [pc, #548]	@ (8003330 <main+0x14f8>)
 800310a:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 800310e:	f001 ff83 	bl	8005018 <Workspace_limit>

				Set_Motor(0, R_PWM);
 8003112:	4b82      	ldr	r3, [pc, #520]	@ (800331c <main+0x14e4>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	2000      	movs	r0, #0
 800311e:	f001 feb1 	bl	8004e84 <Set_Motor>
				Set_Motor(1, P_PWM);
 8003122:	4b83      	ldr	r3, [pc, #524]	@ (8003330 <main+0x14f8>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	2001      	movs	r0, #1
 800312e:	f001 fea9 	bl	8004e84 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 8003132:	4b68      	ldr	r3, [pc, #416]	@ (80032d4 <main+0x149c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b04      	cmp	r3, #4
 8003138:	f040 812e 	bne.w	8003398 <main+0x1560>
				static bool sequence_active = false;
				static bool waiting_for_up = false;
				static uint64_t pen_timestamp = 0;
				const uint64_t pen_delay = 200000; // 200 ms
 800313c:	4a7d      	ldr	r2, [pc, #500]	@ (8003334 <main+0x14fc>)
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				static float last_TargetX = 0.0f;
				static float last_TargetY = 0.0f;
				static bool new_target = true;

				// Detect change in target (with small tolerance to avoid float jitter)
				if (fabsf(TargetX - last_TargetX) > 1e-3f
 8003146:	4b7c      	ldr	r3, [pc, #496]	@ (8003338 <main+0x1500>)
 8003148:	ed93 7a00 	vldr	s14, [r3]
 800314c:	4b7b      	ldr	r3, [pc, #492]	@ (800333c <main+0x1504>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	eef0 7ae7 	vabs.f32	s15, s15
 800315a:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8003340 <main+0x1508>
 800315e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	dc10      	bgt.n	800318a <main+0x1352>
						|| fabsf(TargetY - last_TargetY) > 1e-3f) {
 8003168:	4b76      	ldr	r3, [pc, #472]	@ (8003344 <main+0x150c>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <main+0x1510>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	eef0 7ae7 	vabs.f32	s15, s15
 800317c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003340 <main+0x1508>
 8003180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	dd0a      	ble.n	80031a0 <main+0x1368>
					last_TargetX = TargetX;
 800318a:	4b6b      	ldr	r3, [pc, #428]	@ (8003338 <main+0x1500>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b6b      	ldr	r3, [pc, #428]	@ (800333c <main+0x1504>)
 8003190:	601a      	str	r2, [r3, #0]
					last_TargetY = TargetY;
 8003192:	4b6c      	ldr	r3, [pc, #432]	@ (8003344 <main+0x150c>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b6c      	ldr	r3, [pc, #432]	@ (8003348 <main+0x1510>)
 8003198:	601a      	str	r2, [r3, #0]
					new_target = true;
 800319a:	4a6c      	ldr	r2, [pc, #432]	@ (800334c <main+0x1514>)
 800319c:	2301      	movs	r3, #1
 800319e:	7013      	strb	r3, [r2, #0]
				}

				InverseKinematics(TargetX, TargetY, &TargetR, &TargetP);
 80031a0:	4b65      	ldr	r3, [pc, #404]	@ (8003338 <main+0x1500>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	4b67      	ldr	r3, [pc, #412]	@ (8003344 <main+0x150c>)
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	4968      	ldr	r1, [pc, #416]	@ (8003350 <main+0x1518>)
 80031ae:	4869      	ldr	r0, [pc, #420]	@ (8003354 <main+0x151c>)
 80031b0:	eef0 0a47 	vmov.f32	s1, s14
 80031b4:	eeb0 0a67 	vmov.f32	s0, s15
 80031b8:	f002 f89a 	bl	80052f0 <InverseKinematics>
				TargetR_Deg = TargetR * 180.0f / M_PI;
 80031bc:	4b65      	ldr	r3, [pc, #404]	@ (8003354 <main+0x151c>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003358 <main+0x1520>
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	ee17 0a90 	vmov	r0, s15
 80031ce:	f7fd f987 	bl	80004e0 <__aeabi_f2d>
 80031d2:	a33d      	add	r3, pc, #244	@ (adr r3, 80032c8 <main+0x1490>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fb04 	bl	80007e4 <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fc8e 	bl	8000b04 <__aeabi_d2f>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b5c      	ldr	r3, [pc, #368]	@ (800335c <main+0x1524>)
 80031ec:	601a      	str	r2, [r3, #0]

				// Only start when there's a new target AND we're at the target
				if (!sequence_active && new_target && Pen_Status == 1
 80031ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003360 <main+0x1528>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f083 0301 	eor.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01f      	beq.n	800323c <main+0x1404>
 80031fc:	4b53      	ldr	r3, [pc, #332]	@ (800334c <main+0x1514>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <main+0x1404>
 8003204:	4b57      	ldr	r3, [pc, #348]	@ (8003364 <main+0x152c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d117      	bne.n	800323c <main+0x1404>
						&& CascadeControl_Step()) {
 800320c:	f002 fabc 	bl	8005788 <CascadeControl_Step>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <main+0x1404>
					Set_Servo(1); // Tell pen to press
 8003216:	2001      	movs	r0, #1
 8003218:	f001 feb2 	bl	8004f80 <Set_Servo>
					pen_timestamp = micros();
 800321c:	f001 fb7e 	bl	800491c <micros>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4950      	ldr	r1, [pc, #320]	@ (8003368 <main+0x1530>)
 8003226:	e9c1 2300 	strd	r2, r3, [r1]
					sequence_active = true;
 800322a:	4a4d      	ldr	r2, [pc, #308]	@ (8003360 <main+0x1528>)
 800322c:	2301      	movs	r3, #1
 800322e:	7013      	strb	r3, [r2, #0]
					waiting_for_up = true;
 8003230:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <main+0x1534>)
 8003232:	2301      	movs	r3, #1
 8003234:	7013      	strb	r3, [r2, #0]
					new_target = false; // consume the new target
 8003236:	4a45      	ldr	r2, [pc, #276]	@ (800334c <main+0x1514>)
 8003238:	2300      	movs	r3, #0
 800323a:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && waiting_for_up
 800323c:	4b48      	ldr	r3, [pc, #288]	@ (8003360 <main+0x1528>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d022      	beq.n	800328a <main+0x1452>
 8003244:	4b49      	ldr	r3, [pc, #292]	@ (800336c <main+0x1534>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01e      	beq.n	800328a <main+0x1452>
						&& micros() - pen_timestamp >= pen_delay) {
 800324c:	f001 fb66 	bl	800491c <micros>
 8003250:	4b45      	ldr	r3, [pc, #276]	@ (8003368 <main+0x1530>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	1a84      	subs	r4, r0, r2
 8003258:	65bc      	str	r4, [r7, #88]	@ 0x58
 800325a:	eb61 0303 	sbc.w	r3, r1, r3
 800325e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003260:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003264:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003266:	4291      	cmp	r1, r2
 8003268:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800326a:	eb71 0303 	sbcs.w	r3, r1, r3
 800326e:	d30c      	bcc.n	800328a <main+0x1452>
					Set_Servo(0); // Tell pen to lift
 8003270:	2000      	movs	r0, #0
 8003272:	f001 fe85 	bl	8004f80 <Set_Servo>
					pen_timestamp = micros();
 8003276:	f001 fb51 	bl	800491c <micros>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	493a      	ldr	r1, [pc, #232]	@ (8003368 <main+0x1530>)
 8003280:	e9c1 2300 	strd	r2, r3, [r1]
					waiting_for_up = false;
 8003284:	4a39      	ldr	r2, [pc, #228]	@ (800336c <main+0x1534>)
 8003286:	2300      	movs	r3, #0
 8003288:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && !waiting_for_up && Pen_Status == 1
 800328a:	4b35      	ldr	r3, [pc, #212]	@ (8003360 <main+0x1528>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8082 	beq.w	8003398 <main+0x1560>
 8003294:	4b35      	ldr	r3, [pc, #212]	@ (800336c <main+0x1534>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f083 0301 	eor.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d07a      	beq.n	8003398 <main+0x1560>
 80032a2:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <main+0x152c>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d176      	bne.n	8003398 <main+0x1560>
						&& micros() - pen_timestamp >= pen_delay) {
 80032aa:	f001 fb37 	bl	800491c <micros>
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <main+0x1530>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	1a84      	subs	r4, r0, r2
 80032b6:	653c      	str	r4, [r7, #80]	@ 0x50
 80032b8:	eb61 0303 	sbc.w	r3, r1, r3
 80032bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80032be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032c4:	e056      	b.n	8003374 <main+0x153c>
 80032c6:	bf00      	nop
 80032c8:	54442d18 	.word	0x54442d18
 80032cc:	400921fb 	.word	0x400921fb
 80032d0:	20000bcd 	.word	0x20000bcd
 80032d4:	20000bcc 	.word	0x20000bcc
 80032d8:	20000ab0 	.word	0x20000ab0
 80032dc:	42c80000 	.word	0x42c80000
 80032e0:	c2c80000 	.word	0xc2c80000
 80032e4:	20000ba4 	.word	0x20000ba4
 80032e8:	43fa0000 	.word	0x43fa0000
 80032ec:	c3fa0000 	.word	0xc3fa0000
 80032f0:	20000ba8 	.word	0x20000ba8
 80032f4:	20000af8 	.word	0x20000af8
 80032f8:	20000bbc 	.word	0x20000bbc
 80032fc:	20000b38 	.word	0x20000b38
 8003300:	20000bc0 	.word	0x20000bc0
 8003304:	200013e0 	.word	0x200013e0
 8003308:	20000200 	.word	0x20000200
 800330c:	20000204 	.word	0x20000204
 8003310:	20000208 	.word	0x20000208
 8003314:	20000c08 	.word	0x20000c08
 8003318:	3c23d70a 	.word	0x3c23d70a
 800331c:	20000bc4 	.word	0x20000bc4
 8003320:	20000218 	.word	0x20000218
 8003324:	2000021c 	.word	0x2000021c
 8003328:	20000c18 	.word	0x20000c18
 800332c:	20000c10 	.word	0x20000c10
 8003330:	20000bc8 	.word	0x20000bc8
 8003334:	00030d40 	.word	0x00030d40
 8003338:	20000b8c 	.word	0x20000b8c
 800333c:	200013e8 	.word	0x200013e8
 8003340:	3a83126f 	.word	0x3a83126f
 8003344:	20000b90 	.word	0x20000b90
 8003348:	200013ec 	.word	0x200013ec
 800334c:	2000022d 	.word	0x2000022d
 8003350:	20000b98 	.word	0x20000b98
 8003354:	20000b94 	.word	0x20000b94
 8003358:	43340000 	.word	0x43340000
 800335c:	20000aa8 	.word	0x20000aa8
 8003360:	200013f0 	.word	0x200013f0
 8003364:	20000bd0 	.word	0x20000bd0
 8003368:	200013f8 	.word	0x200013f8
 800336c:	20001400 	.word	0x20001400
 8003370:	00000000 	.word	0x00000000
 8003374:	4291      	cmp	r1, r2
 8003376:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003378:	eb71 0303 	sbcs.w	r3, r1, r3
 800337c:	d30c      	bcc.n	8003398 <main+0x1560>
					Set_Motor(0, 0);
 800337e:	ed1f 0a04 	vldr	s0, [pc, #-16]	@ 8003370 <main+0x1538>
 8003382:	2000      	movs	r0, #0
 8003384:	f001 fd7e 	bl	8004e84 <Set_Motor>
					Set_Motor(1, 0);
 8003388:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 8003370 <main+0x1538>
 800338c:	2001      	movs	r0, #1
 800338e:	f001 fd79 	bl	8004e84 <Set_Motor>
					sequence_active = false;
 8003392:	4a8d      	ldr	r2, [pc, #564]	@ (80035c8 <main+0x1790>)
 8003394:	2300      	movs	r3, #0
 8003396:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 8003398:	4b8c      	ldr	r3, [pc, #560]	@ (80035cc <main+0x1794>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b05      	cmp	r3, #5
 800339e:	f040 81e9 	bne.w	8003774 <main+0x193c>
				static uint64_t timestampState5 = 0;
				int64_t currentTimeState5 = micros();
 80033a2:	f001 fabb 	bl	800491c <micros>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
				if (currentTimeState5 > timestampState5) {
 80033ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033b2:	4b87      	ldr	r3, [pc, #540]	@ (80035d0 <main+0x1798>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	4282      	cmp	r2, r0
 80033ba:	418b      	sbcs	r3, r1
 80033bc:	f080 81da 	bcs.w	8003774 <main+0x193c>
					timestampState5 = currentTimeState5 + 1000; // us
 80033c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80033c4:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 80033c8:	6139      	str	r1, [r7, #16]
 80033ca:	f143 0300 	adc.w	r3, r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033d4:	4b7e      	ldr	r3, [pc, #504]	@ (80035d0 <main+0x1798>)
 80033d6:	e9c3 0100 	strd	r0, r1, [r3]

					P_kP_vel = 1.05845642f;
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <main+0x179c>)
 80033dc:	4b7e      	ldr	r3, [pc, #504]	@ (80035d8 <main+0x17a0>)
 80033de:	6013      	str	r3, [r2, #0]
					P_kI_vel = 0.0496f;
 80033e0:	4a7e      	ldr	r2, [pc, #504]	@ (80035dc <main+0x17a4>)
 80033e2:	4b7f      	ldr	r3, [pc, #508]	@ (80035e0 <main+0x17a8>)
 80033e4:	6013      	str	r3, [r2, #0]
					P_kD_vel = 0.00f;
 80033e6:	4a7f      	ldr	r2, [pc, #508]	@ (80035e4 <main+0x17ac>)
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	6013      	str	r3, [r2, #0]

					P_kP_pos = 3.0367f;
 80033ee:	4a7e      	ldr	r2, [pc, #504]	@ (80035e8 <main+0x17b0>)
 80033f0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <main+0x17b4>)
 80033f2:	6013      	str	r3, [r2, #0]
					P_kI_pos = 0.10198f;
 80033f4:	4a7e      	ldr	r2, [pc, #504]	@ (80035f0 <main+0x17b8>)
 80033f6:	4b7f      	ldr	r3, [pc, #508]	@ (80035f4 <main+0x17bc>)
 80033f8:	6013      	str	r3, [r2, #0]
					P_kD_pos = 0.0047f;
 80033fa:	4a7f      	ldr	r2, [pc, #508]	@ (80035f8 <main+0x17c0>)
 80033fc:	4b7f      	ldr	r3, [pc, #508]	@ (80035fc <main+0x17c4>)
 80033fe:	6013      	str	r3, [r2, #0]

					bool reachedR = fabsf(
							TargetR - Revolute_QEIdata.RadPosition) < 0.068;
 8003400:	4b7f      	ldr	r3, [pc, #508]	@ (8003600 <main+0x17c8>)
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <main+0x17cc>)
 8003408:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800340c:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedR = fabsf(
 8003410:	eef0 7ae7 	vabs.f32	s15, s15
 8003414:	ee17 0a90 	vmov	r0, s15
 8003418:	f7fd f862 	bl	80004e0 <__aeabi_f2d>
 800341c:	2301      	movs	r3, #1
 800341e:	461c      	mov	r4, r3
 8003420:	a367      	add	r3, pc, #412	@ (adr r3, 80035c0 <main+0x1788>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fd fb25 	bl	8000a74 <__aeabi_dcmplt>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <main+0x15fc>
 8003430:	2300      	movs	r3, #0
 8003432:	461c      	mov	r4, r3
 8003434:	f887 407f 	strb.w	r4, [r7, #127]	@ 0x7f
					bool reachedP = fabsf(
							TargetP - Prismatic_QEIdata.mmPosition) < 0.5;
 8003438:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <main+0x17d0>)
 800343a:	ed93 7a00 	vldr	s14, [r3]
 800343e:	4b73      	ldr	r3, [pc, #460]	@ (800360c <main+0x17d4>)
 8003440:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedP = fabsf(
 8003448:	eef0 7ae7 	vabs.f32	s15, s15
 800344c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	bf4c      	ite	mi
 800345a:	2301      	movmi	r3, #1
 800345c:	2300      	movpl	r3, #0
 800345e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
					bool all_reached = revolute.finished && prismatic.finished
 8003462:	4b6b      	ldr	r3, [pc, #428]	@ (8003610 <main+0x17d8>)
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
							&& reachedR && reachedP;
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <main+0x164e>
					bool all_reached = revolute.finished && prismatic.finished
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <main+0x17dc>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <main+0x164e>
							&& reachedR && reachedP;
 8003472:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <main+0x164e>
 800347a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <main+0x164e>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <main+0x1650>
 8003486:	2300      	movs	r3, #0
					bool all_reached = revolute.finished && prismatic.finished
 8003488:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800348c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

					int path_len = path_FIBO_length;
 8003498:	4b5f      	ldr	r3, [pc, #380]	@ (8003618 <main+0x17e0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (current_index >= path_len) {
 800349e:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <main+0x17e4>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034a4:	4293      	cmp	r3, r2
 80034a6:	dc11      	bgt.n	80034cc <main+0x1694>
						if (all_reached) {
 80034a8:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <main+0x16a6>
							Set_Servo(0);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f001 fd65 	bl	8004f80 <Set_Servo>
							Set_Motor(0, 0);
 80034b6:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8003620 <main+0x17e8>
 80034ba:	2000      	movs	r0, #0
 80034bc:	f001 fce2 	bl	8004e84 <Set_Motor>
							Set_Motor(1, 0);
 80034c0:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8003620 <main+0x17e8>
 80034c4:	2001      	movs	r0, #1
 80034c6:	f001 fcdd 	bl	8004e84 <Set_Motor>
 80034ca:	e008      	b.n	80034de <main+0x16a6>
						}
					} else {
						if (all_reached) {
 80034cc:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <main+0x16a6>
							current_index++;
 80034d4:	4b51      	ldr	r3, [pc, #324]	@ (800361c <main+0x17e4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	4b50      	ldr	r3, [pc, #320]	@ (800361c <main+0x17e4>)
 80034dc:	601a      	str	r2, [r3, #0]
						}
					}

					Point target_point = path_FIBO[current_index];
 80034de:	4b4f      	ldr	r3, [pc, #316]	@ (800361c <main+0x17e4>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4950      	ldr	r1, [pc, #320]	@ (8003624 <main+0x17ec>)
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80034f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

					InverseKinematics(target_point.x, target_point.y, &TargetR,
 80034fa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80034fe:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003502:	4941      	ldr	r1, [pc, #260]	@ (8003608 <main+0x17d0>)
 8003504:	483e      	ldr	r0, [pc, #248]	@ (8003600 <main+0x17c8>)
 8003506:	eef0 0a47 	vmov.f32	s1, s14
 800350a:	eeb0 0a67 	vmov.f32	s0, s15
 800350e:	f001 feef 	bl	80052f0 <InverseKinematics>
							&TargetP);
					Set_Servo(target_point.p);
 8003512:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351a:	ee17 0a90 	vmov	r0, s15
 800351e:	f001 fd2f 	bl	8004f80 <Set_Servo>

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003522:	4b37      	ldr	r3, [pc, #220]	@ (8003600 <main+0x17c8>)
 8003524:	ed93 7a00 	vldr	s14, [r3]
 8003528:	4b36      	ldr	r3, [pc, #216]	@ (8003604 <main+0x17cc>)
 800352a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800352e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <main+0x17f0>)
 8003534:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <main+0x17d0>)
 800353a:	ed93 7a00 	vldr	s14, [r3]
 800353e:	4b33      	ldr	r3, [pc, #204]	@ (800360c <main+0x17d4>)
 8003540:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003548:	4b38      	ldr	r3, [pc, #224]	@ (800362c <main+0x17f4>)
 800354a:	edc3 7a00 	vstr	s15, [r3]
					float R_Time = Trapezoidal_CalcTotalTime(R_Pos_Error, 1.4f,
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <main+0x17f0>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003558:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8003630 <main+0x17f8>
 800355c:	eeb0 0a67 	vmov.f32	s0, s15
 8003560:	f001 fe0c 	bl	800517c <Trapezoidal_CalcTotalTime>
 8003564:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
							9.0f);
					float P_Time = Trapezoidal_CalcTotalTime(P_Pos_Error,
 8003568:	4b30      	ldr	r3, [pc, #192]	@ (800362c <main+0x17f4>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 8003634 <main+0x17fc>
 8003572:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8003638 <main+0x1800>
 8003576:	eeb0 0a67 	vmov.f32	s0, s15
 800357a:	f001 fdff 	bl	800517c <Trapezoidal_CalcTotalTime>
 800357e:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
							300.0f, 1500.0f);
					float new_R_vmax = 1.4f;
 8003582:	4b2e      	ldr	r3, [pc, #184]	@ (800363c <main+0x1804>)
 8003584:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float new_P_vmax = 300.0f;
 8003588:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <main+0x1808>)
 800358a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					if (R_Time > P_Time) {
 800358e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8003592:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	dd51      	ble.n	8003644 <main+0x180c>
						// Revolute is slower -> reduce Prismatic vmax
						new_P_vmax = Trapezoidal_CalcVmaxFromTime(P_Pos_Error,
 80035a0:	4b22      	ldr	r3, [pc, #136]	@ (800362c <main+0x17f4>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ed97 1a1d 	vldr	s2, [r7, #116]	@ 0x74
 80035aa:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8003634 <main+0x17fc>
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	f001 fe3f 	bl	8005234 <Trapezoidal_CalcVmaxFromTime>
 80035b6:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
								1500.0f, R_Time);
						P_Time = R_Time;
 80035ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035be:	e059      	b.n	8003674 <main+0x183c>
 80035c0:	b020c49c 	.word	0xb020c49c
 80035c4:	3fb16872 	.word	0x3fb16872
 80035c8:	200013f0 	.word	0x200013f0
 80035cc:	20000bcc 	.word	0x20000bcc
 80035d0:	20001408 	.word	0x20001408
 80035d4:	20000218 	.word	0x20000218
 80035d8:	3f877b80 	.word	0x3f877b80
 80035dc:	2000021c 	.word	0x2000021c
 80035e0:	3d4b295f 	.word	0x3d4b295f
 80035e4:	20000c18 	.word	0x20000c18
 80035e8:	20000220 	.word	0x20000220
 80035ec:	4042594b 	.word	0x4042594b
 80035f0:	20000224 	.word	0x20000224
 80035f4:	3dd0dae4 	.word	0x3dd0dae4
 80035f8:	20000228 	.word	0x20000228
 80035fc:	3b9a0275 	.word	0x3b9a0275
 8003600:	20000b94 	.word	0x20000b94
 8003604:	20000af8 	.word	0x20000af8
 8003608:	20000b98 	.word	0x20000b98
 800360c:	20000b38 	.word	0x20000b38
 8003610:	2000133c 	.word	0x2000133c
 8003614:	20001380 	.word	0x20001380
 8003618:	080236e4 	.word	0x080236e4
 800361c:	200013c4 	.word	0x200013c4
 8003620:	00000000 	.word	0x00000000
 8003624:	0800d4d8 	.word	0x0800d4d8
 8003628:	20000bb4 	.word	0x20000bb4
 800362c:	20000bb8 	.word	0x20000bb8
 8003630:	3fb33333 	.word	0x3fb33333
 8003634:	44bb8000 	.word	0x44bb8000
 8003638:	43960000 	.word	0x43960000
 800363c:	3fb33333 	.word	0x3fb33333
 8003640:	43960000 	.word	0x43960000
					} else if (P_Time > R_Time) {
 8003644:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003648:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800364c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	dd0e      	ble.n	8003674 <main+0x183c>
						// Prismatic is slower -> reduce Revolute vmax
						new_R_vmax = Trapezoidal_CalcVmaxFromTime(R_Pos_Error,
 8003656:	4ba8      	ldr	r3, [pc, #672]	@ (80038f8 <main+0x1ac0>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 8003660:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	f001 fde4 	bl	8005234 <Trapezoidal_CalcVmaxFromTime>
 800366c:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
								9.0f, P_Time);
						R_Time = P_Time;
 8003670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003672:	677b      	str	r3, [r7, #116]	@ 0x74
					}
					if (revolute.finished
 8003674:	4ba1      	ldr	r3, [pc, #644]	@ (80038fc <main+0x1ac4>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <main+0x1886>
							&& fabsf(TargetR - last_TargetR) > 0.001f) {
 800367c:	4ba0      	ldr	r3, [pc, #640]	@ (8003900 <main+0x1ac8>)
 800367e:	ed93 7a00 	vldr	s14, [r3]
 8003682:	4ba0      	ldr	r3, [pc, #640]	@ (8003904 <main+0x1acc>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	eef0 7ae7 	vabs.f32	s15, s15
 8003690:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003908 <main+0x1ad0>
 8003694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	dd0f      	ble.n	80036be <main+0x1886>
						Trapezoidal_Init(&revolute, R_Pos_Error, new_R_vmax,
 800369e:	4b96      	ldr	r3, [pc, #600]	@ (80038f8 <main+0x1ac0>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80036a8:	edd7 0a2f 	vldr	s1, [r7, #188]	@ 0xbc
 80036ac:	eeb0 0a67 	vmov.f32	s0, s15
 80036b0:	4892      	ldr	r0, [pc, #584]	@ (80038fc <main+0x1ac4>)
 80036b2:	f7fe f9b7 	bl	8001a24 <Trapezoidal_Init>
								9.0f);
						last_TargetR = TargetR;
 80036b6:	4b92      	ldr	r3, [pc, #584]	@ (8003900 <main+0x1ac8>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b92      	ldr	r3, [pc, #584]	@ (8003904 <main+0x1acc>)
 80036bc:	601a      	str	r2, [r3, #0]
					}
					if (prismatic.finished
 80036be:	4b93      	ldr	r3, [pc, #588]	@ (800390c <main+0x1ad4>)
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d020      	beq.n	8003708 <main+0x18d0>
							&& fabsf(TargetP - last_TargetP) > 0.01f) {
 80036c6:	4b92      	ldr	r3, [pc, #584]	@ (8003910 <main+0x1ad8>)
 80036c8:	ed93 7a00 	vldr	s14, [r3]
 80036cc:	4b91      	ldr	r3, [pc, #580]	@ (8003914 <main+0x1adc>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d6:	eef0 7ae7 	vabs.f32	s15, s15
 80036da:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003918 <main+0x1ae0>
 80036de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e6:	dd0f      	ble.n	8003708 <main+0x18d0>
						Trapezoidal_Init(&prismatic, P_Pos_Error, new_P_vmax,
 80036e8:	4b8c      	ldr	r3, [pc, #560]	@ (800391c <main+0x1ae4>)
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 8003920 <main+0x1ae8>
 80036f2:	edd7 0a2e 	vldr	s1, [r7, #184]	@ 0xb8
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	4884      	ldr	r0, [pc, #528]	@ (800390c <main+0x1ad4>)
 80036fc:	f7fe f992 	bl	8001a24 <Trapezoidal_Init>
								1500.0f);
						last_TargetP = TargetP;
 8003700:	4b83      	ldr	r3, [pc, #524]	@ (8003910 <main+0x1ad8>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b83      	ldr	r3, [pc, #524]	@ (8003914 <main+0x1adc>)
 8003706:	601a      	str	r2, [r3, #0]
					}
					Trapezoidal_Update(&revolute, 0.001f);
 8003708:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8003908 <main+0x1ad0>
 800370c:	487b      	ldr	r0, [pc, #492]	@ (80038fc <main+0x1ac4>)
 800370e:	f7fe fa53 	bl	8001bb8 <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 8003712:	4b7a      	ldr	r3, [pc, #488]	@ (80038fc <main+0x1ac4>)
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b83      	ldr	r3, [pc, #524]	@ (8003924 <main+0x1aec>)
 8003718:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 800371a:	4b78      	ldr	r3, [pc, #480]	@ (80038fc <main+0x1ac4>)
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	4b82      	ldr	r3, [pc, #520]	@ (8003928 <main+0x1af0>)
 8003720:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 8003722:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <main+0x1ac4>)
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	4b81      	ldr	r3, [pc, #516]	@ (800392c <main+0x1af4>)
 8003728:	601a      	str	r2, [r3, #0]
					Trapezoidal_Update(&prismatic, 0.001f);
 800372a:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8003908 <main+0x1ad0>
 800372e:	4877      	ldr	r0, [pc, #476]	@ (800390c <main+0x1ad4>)
 8003730:	f7fe fa42 	bl	8001bb8 <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 8003734:	4b75      	ldr	r3, [pc, #468]	@ (800390c <main+0x1ad4>)
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <main+0x1af8>)
 800373a:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 800373c:	4b73      	ldr	r3, [pc, #460]	@ (800390c <main+0x1ad4>)
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	4b7c      	ldr	r3, [pc, #496]	@ (8003934 <main+0x1afc>)
 8003742:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 8003744:	4b71      	ldr	r3, [pc, #452]	@ (800390c <main+0x1ad4>)
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	4b7b      	ldr	r3, [pc, #492]	@ (8003938 <main+0x1b00>)
 800374a:	601a      	str	r2, [r3, #0]
					PIDStep();
 800374c:	f001 feae 	bl	80054ac <PIDStep>
					Workspace_limit();
 8003750:	f001 fc62 	bl	8005018 <Workspace_limit>
					Set_Motor(0, R_PWM);
 8003754:	4b79      	ldr	r3, [pc, #484]	@ (800393c <main+0x1b04>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	eeb0 0a67 	vmov.f32	s0, s15
 800375e:	2000      	movs	r0, #0
 8003760:	f001 fb90 	bl	8004e84 <Set_Motor>
					Set_Motor(1, P_PWM);
 8003764:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <main+0x1b08>)
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	eeb0 0a67 	vmov.f32	s0, s15
 800376e:	2001      	movs	r0, #1
 8003770:	f001 fb88 	bl	8004e84 <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 6) {
 8003774:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <main+0x1b0c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d177      	bne.n	800386c <main+0x1a34>
				static bool PenIsNotDelay = true;
				static uint64_t lastPressTime6 = 0;
				if (PenIsNotDelay) {
 800377c:	4b72      	ldr	r3, [pc, #456]	@ (8003948 <main+0x1b10>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d06c      	beq.n	800385e <main+0x1a26>
					if (IsPress && currentTimer - lastPressTime6 >= 2000000) {
 8003784:	4b71      	ldr	r3, [pc, #452]	@ (800394c <main+0x1b14>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05d      	beq.n	8003848 <main+0x1a10>
 800378c:	4b70      	ldr	r3, [pc, #448]	@ (8003950 <main+0x1b18>)
 800378e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003792:	4b70      	ldr	r3, [pc, #448]	@ (8003954 <main+0x1b1c>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	1a84      	subs	r4, r0, r2
 800379a:	60bc      	str	r4, [r7, #8]
 800379c:	eb61 0303 	sbc.w	r3, r1, r3
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <main+0x1b20>)
 80037a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a8:	4602      	mov	r2, r0
 80037aa:	429a      	cmp	r2, r3
 80037ac:	460b      	mov	r3, r1
 80037ae:	f173 0300 	sbcs.w	r3, r3, #0
 80037b2:	d349      	bcc.n	8003848 <main+0x1a10>
						lastPressTime6 = currentTimer;
 80037b4:	4b66      	ldr	r3, [pc, #408]	@ (8003950 <main+0x1b18>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	4966      	ldr	r1, [pc, #408]	@ (8003954 <main+0x1b1c>)
 80037bc:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode) {
 80037c0:	4b66      	ldr	r3, [pc, #408]	@ (800395c <main+0x1b24>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <main+0x1998>
							Mode = 2;
 80037c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003944 <main+0x1b0c>)
 80037ca:	2302      	movs	r3, #2
 80037cc:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 80037ce:	e04c      	b.n	800386a <main+0x1a32>
						} else {
							TenPointArray[counter * 2] =
 80037d0:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <main+0x1b28>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	0058      	lsls	r0, r3, #1
									Prismatic_QEIdata.mmPosition;
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <main+0x1b2c>)
 80037d8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[counter * 2] =
 80037da:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <main+0x1b30>)
 80037dc:	0083      	lsls	r3, r0, #2
 80037de:	4413      	add	r3, r2
 80037e0:	6019      	str	r1, [r3, #0]
							TenPointArray[(counter * 2) + 1] =
 80037e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003960 <main+0x1b28>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	1c58      	adds	r0, r3, #1
									Revolute_QEIdata.RadPosition;
 80037ea:	4b60      	ldr	r3, [pc, #384]	@ (800396c <main+0x1b34>)
 80037ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[(counter * 2) + 1] =
 80037ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003968 <main+0x1b30>)
 80037f0:	0083      	lsls	r3, r0, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	6019      	str	r1, [r3, #0]
							SET_TARGET(counter, Prismatic_QEIdata.mmPosition,
 80037f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003960 <main+0x1b28>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25a      	sxtb	r2, r3
 80037fc:	4b59      	ldr	r3, [pc, #356]	@ (8003964 <main+0x1b2c>)
 80037fe:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003802:	4b5a      	ldr	r3, [pc, #360]	@ (800396c <main+0x1b34>)
 8003804:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003808:	eef0 0a47 	vmov.f32	s1, s14
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	4610      	mov	r0, r2
 8003812:	f7fd fd39 	bl	8001288 <SET_TARGET>
									Revolute_QEIdata.RadPosition);
							PenIsNotDelay = PenDelay();
 8003816:	f000 febf 	bl	8004598 <PenDelay>
 800381a:	4603      	mov	r3, r0
 800381c:	4a4a      	ldr	r2, [pc, #296]	@ (8003948 <main+0x1b10>)
 800381e:	7013      	strb	r3, [r2, #0]

							counter++;
 8003820:	4b4f      	ldr	r3, [pc, #316]	@ (8003960 <main+0x1b28>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	4a4d      	ldr	r2, [pc, #308]	@ (8003960 <main+0x1b28>)
 800382a:	7013      	strb	r3, [r2, #0]
							if (counter >= 10) {
 800382c:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <main+0x1b28>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b09      	cmp	r3, #9
 8003832:	d91a      	bls.n	800386a <main+0x1a32>
								counter = 0;
 8003834:	4a4a      	ldr	r2, [pc, #296]	@ (8003960 <main+0x1b28>)
 8003836:	2300      	movs	r3, #0
 8003838:	7013      	strb	r3, [r2, #0]
								testArraydone = true;
 800383a:	4a4d      	ldr	r2, [pc, #308]	@ (8003970 <main+0x1b38>)
 800383c:	2301      	movs	r3, #1
 800383e:	7013      	strb	r3, [r2, #0]
								TenPointMode = true;
 8003840:	4a46      	ldr	r2, [pc, #280]	@ (800395c <main+0x1b24>)
 8003842:	2301      	movs	r3, #1
 8003844:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 8003846:	e010      	b.n	800386a <main+0x1a32>
							}
						}
					} else if (!TenPointMode) {
 8003848:	4b44      	ldr	r3, [pc, #272]	@ (800395c <main+0x1b24>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <main+0x1a34>
						Mode = 1;
 8003856:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <main+0x1b0c>)
 8003858:	2301      	movs	r3, #1
 800385a:	7013      	strb	r3, [r2, #0]
 800385c:	e006      	b.n	800386c <main+0x1a34>
					}
				} else {
					PenIsNotDelay = PenDelay();
 800385e:	f000 fe9b 	bl	8004598 <PenDelay>
 8003862:	4603      	mov	r3, r0
 8003864:	4a38      	ldr	r2, [pc, #224]	@ (8003948 <main+0x1b10>)
 8003866:	7013      	strb	r3, [r2, #0]
 8003868:	e000      	b.n	800386c <main+0x1a34>
						if (TenPointMode) {
 800386a:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7) {
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <main+0x1b0c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b07      	cmp	r3, #7
 8003872:	d128      	bne.n	80038c6 <main+0x1a8e>
				static uint64_t lastPressTime7 = 0;
				if (testArraydone && IsPress
 8003874:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <main+0x1b38>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d021      	beq.n	80038c0 <main+0x1a88>
 800387c:	4b33      	ldr	r3, [pc, #204]	@ (800394c <main+0x1b14>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01d      	beq.n	80038c0 <main+0x1a88>
						&& currentTimer - lastPressTime7 >= 2000000) {
 8003884:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <main+0x1b18>)
 8003886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800388a:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <main+0x1b3c>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	1a84      	subs	r4, r0, r2
 8003892:	603c      	str	r4, [r7, #0]
 8003894:	eb61 0303 	sbc.w	r3, r1, r3
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	4b2f      	ldr	r3, [pc, #188]	@ (8003958 <main+0x1b20>)
 800389c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a0:	4602      	mov	r2, r0
 80038a2:	429a      	cmp	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	f173 0300 	sbcs.w	r3, r3, #0
 80038aa:	d309      	bcc.n	80038c0 <main+0x1a88>
					lastPressTime7 = currentTimer;
 80038ac:	4b28      	ldr	r3, [pc, #160]	@ (8003950 <main+0x1b18>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	4930      	ldr	r1, [pc, #192]	@ (8003974 <main+0x1b3c>)
 80038b4:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = true;
 80038b8:	4a28      	ldr	r2, [pc, #160]	@ (800395c <main+0x1b24>)
 80038ba:	2301      	movs	r3, #1
 80038bc:	7013      	strb	r3, [r2, #0]
 80038be:	e002      	b.n	80038c6 <main+0x1a8e>
				} else {
					Mode = 2;
 80038c0:	4a20      	ldr	r2, [pc, #128]	@ (8003944 <main+0x1b0c>)
 80038c2:	2302      	movs	r3, #2
 80038c4:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 80038c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <main+0x1b0c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	f47e ab3d 	bne.w	8001f4a <main+0x112>
				if (counter8 < 10) {
 80038d0:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <main+0x1b40>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	f200 8082 	bhi.w	80039de <main+0x1ba6>
					goCenter8 = true;
 80038da:	4a28      	ldr	r2, [pc, #160]	@ (800397c <main+0x1b44>)
 80038dc:	2301      	movs	r3, #1
 80038de:	7013      	strb	r3, [r2, #0]

					if (goCenter8) {
 80038e0:	4b26      	ldr	r3, [pc, #152]	@ (800397c <main+0x1b44>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d04d      	beq.n	8003984 <main+0x1b4c>
						TargetR = M_PI_2;
 80038e8:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <main+0x1ac8>)
 80038ea:	4b25      	ldr	r3, [pc, #148]	@ (8003980 <main+0x1b48>)
 80038ec:	6013      	str	r3, [r2, #0]
						TargetP = 0;
 80038ee:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <main+0x1ad8>)
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e04b      	b.n	8003990 <main+0x1b58>
 80038f8:	20000bb4 	.word	0x20000bb4
 80038fc:	2000133c 	.word	0x2000133c
 8003900:	20000b94 	.word	0x20000b94
 8003904:	20001328 	.word	0x20001328
 8003908:	3a83126f 	.word	0x3a83126f
 800390c:	20001380 	.word	0x20001380
 8003910:	20000b98 	.word	0x20000b98
 8003914:	2000132c 	.word	0x2000132c
 8003918:	3c23d70a 	.word	0x3c23d70a
 800391c:	20000bb8 	.word	0x20000bb8
 8003920:	44bb8000 	.word	0x44bb8000
 8003924:	20000b9c 	.word	0x20000b9c
 8003928:	20000ba4 	.word	0x20000ba4
 800392c:	20000bac 	.word	0x20000bac
 8003930:	20000ba0 	.word	0x20000ba0
 8003934:	20000ba8 	.word	0x20000ba8
 8003938:	20000bb0 	.word	0x20000bb0
 800393c:	20000bc4 	.word	0x20000bc4
 8003940:	20000bc8 	.word	0x20000bc8
 8003944:	20000bcc 	.word	0x20000bcc
 8003948:	2000022e 	.word	0x2000022e
 800394c:	20000bcf 	.word	0x20000bcf
 8003950:	20001320 	.word	0x20001320
 8003954:	20001410 	.word	0x20001410
 8003958:	001e8480 	.word	0x001e8480
 800395c:	20000c52 	.word	0x20000c52
 8003960:	20000c51 	.word	0x20000c51
 8003964:	20000b38 	.word	0x20000b38
 8003968:	200012cc 	.word	0x200012cc
 800396c:	20000af8 	.word	0x20000af8
 8003970:	2000131c 	.word	0x2000131c
 8003974:	20001418 	.word	0x20001418
 8003978:	20000c50 	.word	0x20000c50
 800397c:	2000022c 	.word	0x2000022c
 8003980:	3fc90fdb 	.word	0x3fc90fdb
					} else {
						TargetR = M_PI_4;
 8003984:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <main+0x1bc4>)
 8003986:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <main+0x1bc8>)
 8003988:	6013      	str	r3, [r2, #0]
						TargetP = 150;
 800398a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <main+0x1bcc>)
 800398c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <main+0x1bd0>)
 800398e:	6013      	str	r3, [r2, #0]
					}

					if (CascadeControl_Step()) {
 8003990:	f001 fefa 	bl	8005788 <CascadeControl_Step>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	f43e aad7 	beq.w	8001f4a <main+0x112>
						if (PenDelay()) {
 800399c:	f000 fdfc 	bl	8004598 <PenDelay>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f43e aad1 	beq.w	8001f4a <main+0x112>
							if (goCenter8) {
 80039a8:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <main+0x1bd4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <main+0x1b84>
								counter8++;
 80039b0:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <main+0x1bd8>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4a15      	ldr	r2, [pc, #84]	@ (8003a10 <main+0x1bd8>)
 80039ba:	7013      	strb	r3, [r2, #0]
							}
							goCenter8 = !goCenter8;
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <main+0x1bd4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4a0d      	ldr	r2, [pc, #52]	@ (8003a0c <main+0x1bd4>)
 80039d8:	7013      	strb	r3, [r2, #0]
 80039da:	f7fe bab6 	b.w	8001f4a <main+0x112>
						}
					}
				} else if (counter8 >= 10 && IsPress) {
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <main+0x1bd8>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	f67e aab1 	bls.w	8001f4a <main+0x112>
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <main+0x1bdc>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f43e aaac 	beq.w	8001f4a <main+0x112>
					counter8 = 0;
 80039f2:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <main+0x1bd8>)
 80039f4:	2300      	movs	r3, #0
 80039f6:	7013      	strb	r3, [r2, #0]
	while (1) {
 80039f8:	f7fe baa7 	b.w	8001f4a <main+0x112>
 80039fc:	20000b94 	.word	0x20000b94
 8003a00:	3f490fdb 	.word	0x3f490fdb
 8003a04:	20000b98 	.word	0x20000b98
 8003a08:	43160000 	.word	0x43160000
 8003a0c:	2000022c 	.word	0x2000022c
 8003a10:	20000c50 	.word	0x20000c50
 8003a14:	20000bcf 	.word	0x20000bcf

08003a18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b094      	sub	sp, #80	@ 0x50
 8003a1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	2238      	movs	r2, #56	@ 0x38
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f008 fdfe 	bl	800c628 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f003 f93c 	bl	8006cb8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a4a:	2340      	movs	r3, #64	@ 0x40
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a52:	2302      	movs	r3, #2
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a56:	2304      	movs	r3, #4
 8003a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003a5a:	2355      	movs	r3, #85	@ 0x55
 8003a5c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a62:	2302      	movs	r3, #2
 8003a64:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a66:	2302      	movs	r3, #2
 8003a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 f9d6 	bl	8006e20 <HAL_RCC_OscConfig>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <SystemClock_Config+0x66>
		Error_Handler();
 8003a7a:	f001 ff07 	bl	800588c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003a7e:	230f      	movs	r3, #15
 8003a80:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a82:	2303      	movs	r3, #3
 8003a84:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	2104      	movs	r1, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fcd4 	bl	8007444 <HAL_RCC_ClockConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <SystemClock_Config+0x8e>
		Error_Handler();
 8003aa2:	f001 fef3 	bl	800588c <Error_Handler>
	}
}
 8003aa6:	bf00      	nop
 8003aa8:	3750      	adds	r7, #80	@ 0x50
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003ab6:	f107 031c 	add.w	r3, r7, #28
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003ade:	4b35      	ldr	r3, [pc, #212]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003ae0:	4a35      	ldr	r2, [pc, #212]	@ (8003bb8 <MX_TIM1_Init+0x108>)
 8003ae2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003ae4:	4b33      	ldr	r3, [pc, #204]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003ae6:	22a9      	movs	r2, #169	@ 0xa9
 8003ae8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b32      	ldr	r3, [pc, #200]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003af0:	4b30      	ldr	r3, [pc, #192]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003af6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af8:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003afe:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003b0a:	482a      	ldr	r0, [pc, #168]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b0c:	f004 fbd0 	bl	80082b0 <HAL_TIM_IC_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003b16:	f001 feb9 	bl	800588c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003b1e:	2360      	movs	r3, #96	@ 0x60
 8003b20:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b22:	2302      	movs	r3, #2
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	481f      	ldr	r0, [pc, #124]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b36:	f005 fb9b 	bl	8009270 <HAL_TIM_SlaveConfigSynchro>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_TIM1_Init+0x94>
		Error_Handler();
 8003b40:	f001 fea4 	bl	800588c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4815      	ldr	r0, [pc, #84]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b5e:	f005 f8c0 	bl	8008ce2 <HAL_TIM_IC_ConfigChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003b68:	f001 fe90 	bl	800588c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b70:	2301      	movs	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480d      	ldr	r0, [pc, #52]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b7e:	f005 f8b0 	bl	8008ce2 <HAL_TIM_IC_ConfigChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003b88:	f001 fe80 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003b98:	463b      	mov	r3, r7
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	@ (8003bb4 <MX_TIM1_Init+0x104>)
 8003b9e:	f006 fc83 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003ba8:	f001 fe70 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003bac:	bf00      	nop
 8003bae:	3730      	adds	r7, #48	@ 0x30
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200002b0 	.word	0x200002b0
 8003bb8:	40012c00 	.word	0x40012c00

08003bbc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	@ 0x30
 8003bc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003bc2:	f107 031c 	add.w	r3, r7, #28
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003be0:	463b      	mov	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003bea:	4b33      	ldr	r3, [pc, #204]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003bec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bf0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003bf4:	22a9      	movs	r2, #169	@ 0xa9
 8003bf6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c06:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003c12:	4829      	ldr	r0, [pc, #164]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c14:	f004 fb4c 	bl	80082b0 <HAL_TIM_IC_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM2_Init+0x66>
		Error_Handler();
 8003c1e:	f001 fe35 	bl	800588c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003c22:	2304      	movs	r3, #4
 8003c24:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003c26:	2350      	movs	r3, #80	@ 0x50
 8003c28:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003c36:	f107 031c 	add.w	r3, r7, #28
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	481e      	ldr	r0, [pc, #120]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c3e:	f005 fb17 	bl	8009270 <HAL_TIM_SlaveConfigSynchro>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM2_Init+0x90>
		Error_Handler();
 8003c48:	f001 fe20 	bl	800588c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	2200      	movs	r2, #0
 8003c62:	4619      	mov	r1, r3
 8003c64:	4814      	ldr	r0, [pc, #80]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c66:	f005 f83c 	bl	8008ce2 <HAL_TIM_IC_ConfigChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003c70:	f001 fe0c 	bl	800588c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003c74:	2302      	movs	r3, #2
 8003c76:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	2204      	movs	r2, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	480c      	ldr	r0, [pc, #48]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003c86:	f005 f82c 	bl	8008ce2 <HAL_TIM_IC_ConfigChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003c90:	f001 fdfc 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c94:	2300      	movs	r3, #0
 8003c96:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4805      	ldr	r0, [pc, #20]	@ (8003cb8 <MX_TIM2_Init+0xfc>)
 8003ca2:	f006 fc01 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003cac:	f001 fdee 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003cb0:	bf00      	nop
 8003cb2:	3730      	adds	r7, #48	@ 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000037c 	.word	0x2000037c

08003cbc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	@ 0x30
 8003cc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	2224      	movs	r2, #36	@ 0x24
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f008 fcac 	bl	800c628 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003cda:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003cdc:	4a21      	ldr	r2, [pc, #132]	@ (8003d64 <MX_TIM3_Init+0xa8>)
 8003cde:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003cec:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cf2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d00:	2303      	movs	r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003d10:	2304      	movs	r3, #4
 8003d12:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003d20:	2304      	movs	r3, #4
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	4619      	mov	r1, r3
 8003d2a:	480d      	ldr	r0, [pc, #52]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003d2c:	f004 fd1e 	bl	800876c <HAL_TIM_Encoder_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003d36:	f001 fda9 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003d42:	463b      	mov	r3, r7
 8003d44:	4619      	mov	r1, r3
 8003d46:	4806      	ldr	r0, [pc, #24]	@ (8003d60 <MX_TIM3_Init+0xa4>)
 8003d48:	f006 fbae 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003d52:	f001 fd9b 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003d56:	bf00      	nop
 8003d58:	3730      	adds	r7, #48	@ 0x30
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000448 	.word	0x20000448
 8003d64:	40000400 	.word	0x40000400

08003d68 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	@ 0x30
 8003d6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f008 fc56 	bl	800c628 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003d86:	4b21      	ldr	r3, [pc, #132]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003d88:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <MX_TIM4_Init+0xa8>)
 8003d8a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d9e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003dac:	2303      	movs	r3, #3
 8003dae:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	480d      	ldr	r0, [pc, #52]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003dd8:	f004 fcc8 	bl	800876c <HAL_TIM_Encoder_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003de2:	f001 fd53 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003dee:	463b      	mov	r3, r7
 8003df0:	4619      	mov	r1, r3
 8003df2:	4806      	ldr	r0, [pc, #24]	@ (8003e0c <MX_TIM4_Init+0xa4>)
 8003df4:	f006 fb58 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003dfe:	f001 fd45 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003e02:	bf00      	nop
 8003e04:	3730      	adds	r7, #48	@ 0x30
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000514 	.word	0x20000514
 8003e10:	40000800 	.word	0x40000800

08003e14 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003e32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <MX_TIM5_Init+0x98>)
 8003e36:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e3a:	22a9      	movs	r2, #169	@ 0xa9
 8003e3c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003e44:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003e58:	4813      	ldr	r0, [pc, #76]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e5a:	f003 ff5d 	bl	8007d18 <HAL_TIM_Base_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003e64:	f001 fd12 	bl	800588c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003e6e:	f107 0310 	add.w	r3, r7, #16
 8003e72:	4619      	mov	r1, r3
 8003e74:	480c      	ldr	r0, [pc, #48]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e76:	f005 f8e5 	bl	8009044 <HAL_TIM_ConfigClockSource>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM5_Init+0x70>
		Error_Handler();
 8003e80:	f001 fd04 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4805      	ldr	r0, [pc, #20]	@ (8003ea8 <MX_TIM5_Init+0x94>)
 8003e92:	f006 fb09 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003e9c:	f001 fcf6 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200005e0 	.word	0x200005e0
 8003eac:	40000c00 	.word	0x40000c00

08003eb0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b09c      	sub	sp, #112	@ 0x70
 8003eb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003eb6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ec4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003ed0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	611a      	str	r2, [r3, #16]
 8003ee0:	615a      	str	r2, [r3, #20]
 8003ee2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	2234      	movs	r2, #52	@ 0x34
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f008 fb9c 	bl	800c628 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <MX_TIM8_Init+0x174>)
 8003ef4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003ef8:	22a9      	movs	r2, #169	@ 0xa9
 8003efa:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efc:	4b48      	ldr	r3, [pc, #288]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f04:	2264      	movs	r2, #100	@ 0x64
 8003f06:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f08:	4b45      	ldr	r3, [pc, #276]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003f0e:	4b44      	ldr	r3, [pc, #272]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f14:	4b42      	ldr	r3, [pc, #264]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003f1a:	4841      	ldr	r0, [pc, #260]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f1c:	f003 fefc 	bl	8007d18 <HAL_TIM_Base_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003f26:	f001 fcb1 	bl	800588c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f2e:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003f30:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003f34:	4619      	mov	r1, r3
 8003f36:	483a      	ldr	r0, [pc, #232]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f38:	f005 f884 	bl	8009044 <HAL_TIM_ConfigClockSource>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM8_Init+0x96>
		Error_Handler();
 8003f42:	f001 fca3 	bl	800588c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003f46:	4836      	ldr	r0, [pc, #216]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f48:	f004 f832 	bl	8007fb0 <HAL_TIM_PWM_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003f52:	f001 fc9b 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003f62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f66:	4619      	mov	r1, r3
 8003f68:	482d      	ldr	r0, [pc, #180]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f6a:	f006 fa9d 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003f74:	f001 fc8a 	bl	800588c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f78:	2360      	movs	r3, #96	@ 0x60
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003f7c:	2364      	movs	r3, #100	@ 0x64
 8003f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f80:	2300      	movs	r3, #0
 8003f82:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f84:	2300      	movs	r3, #0
 8003f86:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003f94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f98:	2208      	movs	r2, #8
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4820      	ldr	r0, [pc, #128]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003f9e:	f004 ff3d 	bl	8008e1c <HAL_TIM_PWM_ConfigChannel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003fa8:	f001 fc70 	bl	800588c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003fac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fb0:	220c      	movs	r2, #12
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481a      	ldr	r0, [pc, #104]	@ (8004020 <MX_TIM8_Init+0x170>)
 8003fb6:	f004 ff31 	bl	8008e1c <HAL_TIM_PWM_ConfigChannel>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003fc0:	f001 fc64 	bl	800588c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fdc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4807      	ldr	r0, [pc, #28]	@ (8004020 <MX_TIM8_Init+0x170>)
 8004002:	f006 fae7 	bl	800a5d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 800400c:	f001 fc3e 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004010:	4803      	ldr	r0, [pc, #12]	@ (8004020 <MX_TIM8_Init+0x170>)
 8004012:	f001 fdcf 	bl	8005bb4 <HAL_TIM_MspPostInit>

}
 8004016:	bf00      	nop
 8004018:	3770      	adds	r7, #112	@ 0x70
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200006ac 	.word	0x200006ac
 8004024:	40013400 	.word	0x40013400

08004028 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b09c      	sub	sp, #112	@ 0x70
 800402c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800402e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800403c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004048:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	2234      	movs	r2, #52	@ 0x34
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f008 fae0 	bl	800c628 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004068:	4b3f      	ldr	r3, [pc, #252]	@ (8004168 <MX_TIM15_Init+0x140>)
 800406a:	4a40      	ldr	r2, [pc, #256]	@ (800416c <MX_TIM15_Init+0x144>)
 800406c:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 800406e:	4b3e      	ldr	r3, [pc, #248]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004070:	22a9      	movs	r2, #169	@ 0xa9
 8004072:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	4b3c      	ldr	r3, [pc, #240]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <MX_TIM15_Init+0x140>)
 800407c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8004080:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004082:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8004088:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <MX_TIM15_Init+0x140>)
 800408a:	2200      	movs	r2, #0
 800408c:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800408e:	4b36      	ldr	r3, [pc, #216]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8004094:	4834      	ldr	r0, [pc, #208]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004096:	f003 fe3f 	bl	8007d18 <HAL_TIM_Base_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM15_Init+0x7c>
		Error_Handler();
 80040a0:	f001 fbf4 	bl	800588c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040a8:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 80040aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ae:	4619      	mov	r1, r3
 80040b0:	482d      	ldr	r0, [pc, #180]	@ (8004168 <MX_TIM15_Init+0x140>)
 80040b2:	f004 ffc7 	bl	8009044 <HAL_TIM_ConfigClockSource>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM15_Init+0x98>
		Error_Handler();
 80040bc:	f001 fbe6 	bl	800588c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80040c0:	4829      	ldr	r0, [pc, #164]	@ (8004168 <MX_TIM15_Init+0x140>)
 80040c2:	f003 ff75 	bl	8007fb0 <HAL_TIM_PWM_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_TIM15_Init+0xa8>
		Error_Handler();
 80040cc:	f001 fbde 	bl	800588c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 80040d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040dc:	4619      	mov	r1, r3
 80040de:	4822      	ldr	r0, [pc, #136]	@ (8004168 <MX_TIM15_Init+0x140>)
 80040e0:	f006 f9e2 	bl	800a4a8 <HAL_TIMEx_MasterConfigSynchronization>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80040ea:	f001 fbcf 	bl	800588c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ee:	2360      	movs	r3, #96	@ 0x60
 80040f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040f6:	2300      	movs	r3, #0
 80040f8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040fa:	2300      	movs	r3, #0
 80040fc:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 800410a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800410e:	2200      	movs	r2, #0
 8004110:	4619      	mov	r1, r3
 8004112:	4815      	ldr	r0, [pc, #84]	@ (8004168 <MX_TIM15_Init+0x140>)
 8004114:	f004 fe82 	bl	8008e1c <HAL_TIM_PWM_ConfigChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800411e:	f001 fbb5 	bl	800588c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800413a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4807      	ldr	r0, [pc, #28]	@ (8004168 <MX_TIM15_Init+0x140>)
 800414a:	f006 fa43 	bl	800a5d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8004154:	f001 fb9a 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8004158:	4803      	ldr	r0, [pc, #12]	@ (8004168 <MX_TIM15_Init+0x140>)
 800415a:	f001 fd2b 	bl	8005bb4 <HAL_TIM_MspPostInit>

}
 800415e:	bf00      	nop
 8004160:	3770      	adds	r7, #112	@ 0x70
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000778 	.word	0x20000778
 800416c:	40014000 	.word	0x40014000

08004170 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8004174:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <MX_TIM16_Init+0x58>)
 8004176:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <MX_TIM16_Init+0x5c>)
 8004178:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 800417a:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <MX_TIM16_Init+0x58>)
 800417c:	22a9      	movs	r2, #169	@ 0xa9
 800417e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <MX_TIM16_Init+0x58>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8004186:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <MX_TIM16_Init+0x58>)
 8004188:	f240 4279 	movw	r2, #1145	@ 0x479
 800418c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418e:	4b0e      	ldr	r3, [pc, #56]	@ (80041c8 <MX_TIM16_Init+0x58>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <MX_TIM16_Init+0x58>)
 8004196:	2200      	movs	r2, #0
 8004198:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419a:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <MX_TIM16_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80041a0:	4809      	ldr	r0, [pc, #36]	@ (80041c8 <MX_TIM16_Init+0x58>)
 80041a2:	f003 fdb9 	bl	8007d18 <HAL_TIM_Base_Init>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM16_Init+0x40>
		Error_Handler();
 80041ac:	f001 fb6e 	bl	800588c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80041b0:	2108      	movs	r1, #8
 80041b2:	4805      	ldr	r0, [pc, #20]	@ (80041c8 <MX_TIM16_Init+0x58>)
 80041b4:	f004 f9e4 	bl	8008580 <HAL_TIM_OnePulse_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM16_Init+0x52>
		Error_Handler();
 80041be:	f001 fb65 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000844 	.word	0x20000844
 80041cc:	40014400 	.word	0x40014400

080041d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80041d4:	4b23      	ldr	r3, [pc, #140]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041d6:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <MX_USART2_UART_Init+0x98>)
 80041d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80041da:	4b22      	ldr	r3, [pc, #136]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80041e2:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041e8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80041ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80041f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 80041fa:	220c      	movs	r2, #12
 80041fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fe:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004204:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800420a:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 800420c:	2200      	movs	r2, #0
 800420e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004210:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004212:	2200      	movs	r2, #0
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004216:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004218:	2200      	movs	r2, #0
 800421a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800421c:	4811      	ldr	r0, [pc, #68]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 800421e:	f006 fabd 	bl	800a79c <HAL_UART_Init>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8004228:	f001 fb30 	bl	800588c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800422c:	2100      	movs	r1, #0
 800422e:	480d      	ldr	r0, [pc, #52]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004230:	f008 f8f9 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 800423a:	f001 fb27 	bl	800588c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800423e:	2100      	movs	r1, #0
 8004240:	4808      	ldr	r0, [pc, #32]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004242:	f008 f92e 	bl	800c4a2 <HAL_UARTEx_SetRxFifoThreshold>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 800424c:	f001 fb1e 	bl	800588c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8004250:	4804      	ldr	r0, [pc, #16]	@ (8004264 <MX_USART2_UART_Init+0x94>)
 8004252:	f008 f8af 	bl	800c3b4 <HAL_UARTEx_DisableFifoMode>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 800425c:	f001 fb16 	bl	800588c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000910 	.word	0x20000910
 8004268:	40004400 	.word	0x40004400

0800426c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004272:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <MX_DMA_Init+0x60>)
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	4a15      	ldr	r2, [pc, #84]	@ (80042cc <MX_DMA_Init+0x60>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6493      	str	r3, [r2, #72]	@ 0x48
 800427e:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <MX_DMA_Init+0x60>)
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <MX_DMA_Init+0x60>)
 800428c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428e:	4a0f      	ldr	r2, [pc, #60]	@ (80042cc <MX_DMA_Init+0x60>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6493      	str	r3, [r2, #72]	@ 0x48
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <MX_DMA_Init+0x60>)
 8004298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2100      	movs	r1, #0
 80042a6:	200b      	movs	r0, #11
 80042a8:	f001 ffd5 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042ac:	200b      	movs	r0, #11
 80042ae:	f001 ffec 	bl	800628a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	2100      	movs	r1, #0
 80042b6:	200c      	movs	r0, #12
 80042b8:	f001 ffcd 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80042bc:	200c      	movs	r0, #12
 80042be:	f001 ffe4 	bl	800628a <HAL_NVIC_EnableIRQ>

}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000

080042d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	@ 0x28
 80042d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	4b7a      	ldr	r3, [pc, #488]	@ (80044d0 <MX_GPIO_Init+0x200>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	4a79      	ldr	r2, [pc, #484]	@ (80044d0 <MX_GPIO_Init+0x200>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042f2:	4b77      	ldr	r3, [pc, #476]	@ (80044d0 <MX_GPIO_Init+0x200>)
 80042f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80042fe:	4b74      	ldr	r3, [pc, #464]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004302:	4a73      	ldr	r2, [pc, #460]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800430a:	4b71      	ldr	r3, [pc, #452]	@ (80044d0 <MX_GPIO_Init+0x200>)
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	4b6e      	ldr	r3, [pc, #440]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	4a6d      	ldr	r2, [pc, #436]	@ (80044d0 <MX_GPIO_Init+0x200>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004322:	4b6b      	ldr	r3, [pc, #428]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	4b68      	ldr	r3, [pc, #416]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	4a67      	ldr	r2, [pc, #412]	@ (80044d0 <MX_GPIO_Init+0x200>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800433a:	4b65      	ldr	r3, [pc, #404]	@ (80044d0 <MX_GPIO_Init+0x200>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004346:	2200      	movs	r2, #0
 8004348:	2120      	movs	r1, #32
 800434a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800434e:	f002 fc83 	bl	8006c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8004352:	2200      	movs	r2, #0
 8004354:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004358:	485e      	ldr	r0, [pc, #376]	@ (80044d4 <MX_GPIO_Init+0x204>)
 800435a:	f002 fc7d 	bl	8006c58 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800435e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004362:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	4858      	ldr	r0, [pc, #352]	@ (80044d4 <MX_GPIO_Init+0x204>)
 8004374:	f002 fad6 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8004378:	230d      	movs	r3, #13
 800437a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800437c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004380:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	4619      	mov	r1, r3
 800438c:	4851      	ldr	r0, [pc, #324]	@ (80044d4 <MX_GPIO_Init+0x204>)
 800438e:	f002 fac9 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004392:	2320      	movs	r3, #32
 8004394:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ac:	f002 faba 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80043b0:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80043b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c2:	f107 0314 	add.w	r3, r7, #20
 80043c6:	4619      	mov	r1, r3
 80043c8:	4842      	ldr	r0, [pc, #264]	@ (80044d4 <MX_GPIO_Init+0x204>)
 80043ca:	f002 faab 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 80043ce:	f640 0304 	movw	r3, #2052	@ 0x804
 80043d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	4619      	mov	r1, r3
 80043e2:	483d      	ldr	r0, [pc, #244]	@ (80044d8 <MX_GPIO_Init+0x208>)
 80043e4:	f002 fa9e 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80043e8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80043ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80043f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043f4:	2302      	movs	r3, #2
 80043f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	4619      	mov	r1, r3
 80043fe:	4836      	ldr	r0, [pc, #216]	@ (80044d8 <MX_GPIO_Init+0x208>)
 8004400:	f002 fa90 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004408:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800440a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800440e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004410:	2302      	movs	r3, #2
 8004412:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4619      	mov	r1, r3
 800441a:	482f      	ldr	r0, [pc, #188]	@ (80044d8 <MX_GPIO_Init+0x208>)
 800441c:	f002 fa82 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004424:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004426:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800442a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800443a:	f002 fa73 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800443e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004442:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004444:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004448:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800444a:	2302      	movs	r3, #2
 800444c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	4619      	mov	r1, r3
 8004454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004458:	f002 fa64 	bl	8006924 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800445c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004460:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004462:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004466:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004468:	2302      	movs	r3, #2
 800446a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	4619      	mov	r1, r3
 8004472:	4818      	ldr	r0, [pc, #96]	@ (80044d4 <MX_GPIO_Init+0x204>)
 8004474:	f002 fa56 	bl	8006924 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004478:	2200      	movs	r2, #0
 800447a:	2100      	movs	r1, #0
 800447c:	2006      	movs	r0, #6
 800447e:	f001 feea 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004482:	2006      	movs	r0, #6
 8004484:	f001 ff01 	bl	800628a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004488:	2200      	movs	r2, #0
 800448a:	2100      	movs	r1, #0
 800448c:	2008      	movs	r0, #8
 800448e:	f001 fee2 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004492:	2008      	movs	r0, #8
 8004494:	f001 fef9 	bl	800628a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	2100      	movs	r1, #0
 800449c:	2009      	movs	r0, #9
 800449e:	f001 feda 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80044a2:	2009      	movs	r0, #9
 80044a4:	f001 fef1 	bl	800628a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	2017      	movs	r0, #23
 80044ae:	f001 fed2 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80044b2:	2017      	movs	r0, #23
 80044b4:	f001 fee9 	bl	800628a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	2028      	movs	r0, #40	@ 0x28
 80044be:	f001 feca 	bl	8006256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80044c2:	2028      	movs	r0, #40	@ 0x28
 80044c4:	f001 fee1 	bl	800628a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80044c8:	bf00      	nop
 80044ca:	3728      	adds	r7, #40	@ 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	48000800 	.word	0x48000800
 80044d8:	48000400 	.word	0x48000400

080044dc <updateAndGetOvershoot>:

/* USER CODE BEGIN 4 */
float updateAndGetOvershoot(float target, float *prev_target,
		float *max_position, float current_position) {
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044e6:	60b8      	str	r0, [r7, #8]
 80044e8:	6079      	str	r1, [r7, #4]
 80044ea:	edc7 0a00 	vstr	s1, [r7]
	// Reset max_position if the target changes
	if (target != *prev_target) {
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80044f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	d005      	beq.n	800450e <updateAndGetOvershoot+0x32>
		*prev_target = target;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]
		*max_position = current_position;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	601a      	str	r2, [r3, #0]
	}

	// Track maximum deviation from target (not just max raw position)
	if (fabsf(current_position - target) > fabsf(*max_position - target)) {
 800450e:	ed97 7a00 	vldr	s14, [r7]
 8004512:	edd7 7a03 	vldr	s15, [r7, #12]
 8004516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800451a:	eeb0 7ae7 	vabs.f32	s14, s15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	edd3 6a00 	vldr	s13, [r3]
 8004524:	edd7 7a03 	vldr	s15, [r7, #12]
 8004528:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800452c:	eef0 7ae7 	vabs.f32	s15, s15
 8004530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	dd02      	ble.n	8004540 <updateAndGetOvershoot+0x64>
		*max_position = current_position;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	601a      	str	r2, [r3, #0]
	}

	if (target == 0.0f)
 8004540:	edd7 7a03 	vldr	s15, [r7, #12]
 8004544:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d102      	bne.n	8004554 <updateAndGetOvershoot+0x78>
		return 0.0f; // avoid division by zero
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e015      	b.n	8004580 <updateAndGetOvershoot+0xa4>

	float overshoot = (fabsf(*max_position - target) / fabsf(target)) * 100.0f;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	edd7 7a03 	vldr	s15, [r7, #12]
 800455e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004562:	eef0 6ae7 	vabs.f32	s13, s15
 8004566:	edd7 7a03 	vldr	s15, [r7, #12]
 800456a:	eeb0 7ae7 	vabs.f32	s14, s15
 800456e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004572:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004594 <updateAndGetOvershoot+0xb8>
 8004576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457a:	edc7 7a05 	vstr	s15, [r7, #20]
	return overshoot;
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eeb0 0a67 	vmov.f32	s0, s15
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	42c80000 	.word	0x42c80000

08004598 <PenDelay>:

bool PenDelay(void) {
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b08e      	sub	sp, #56	@ 0x38
 800459e:	af00      	add	r7, sp, #0
	static int state = 0;
	unsigned long now = micros();
 80045a0:	f000 f9bc 	bl	800491c <micros>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4613      	mov	r3, r2
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30
	bool Done = false;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch (state) {
 80045b2:	4b45      	ldr	r3, [pc, #276]	@ (80046c8 <PenDelay+0x130>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d87e      	bhi.n	80046b8 <PenDelay+0x120>
 80045ba:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <PenDelay+0x28>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045eb 	.word	0x080045eb
 80045c8:	08004633 	.word	0x08004633
 80045cc:	0800467b 	.word	0x0800467b
	case 0: // Start sequence with initial wait
		pen_delay_timer = now;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	2200      	movs	r2, #0
 80045d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d8:	4b3c      	ldr	r3, [pc, #240]	@ (80046cc <PenDelay+0x134>)
 80045da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045de:	e9c3 1200 	strd	r1, r2, [r3]
		state = 1;
 80045e2:	4b39      	ldr	r3, [pc, #228]	@ (80046c8 <PenDelay+0x130>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
		break;
 80045e8:	e066      	b.n	80046b8 <PenDelay+0x120>
	case 1: // Waiting for first 500ms
		if (now - pen_delay_timer >= 500000UL) {
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	2200      	movs	r2, #0
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80045f2:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <PenDelay+0x134>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80045fc:	4621      	mov	r1, r4
 80045fe:	ebb1 0a02 	subs.w	sl, r1, r2
 8004602:	4629      	mov	r1, r5
 8004604:	eb61 0b03 	sbc.w	fp, r1, r3
 8004608:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <PenDelay+0x138>)
 800460a:	459a      	cmp	sl, r3
 800460c:	f17b 0300 	sbcs.w	r3, fp, #0
 8004610:	d34d      	bcc.n	80046ae <PenDelay+0x116>
			Set_Servo(1);
 8004612:	2001      	movs	r0, #1
 8004614:	f000 fcb4 	bl	8004f80 <Set_Servo>
			pen_delay_timer = now;
 8004618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	61fa      	str	r2, [r7, #28]
 8004620:	4b2a      	ldr	r3, [pc, #168]	@ (80046cc <PenDelay+0x134>)
 8004622:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004626:	e9c3 1200 	strd	r1, r2, [r3]
			state = 2;
 800462a:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <PenDelay+0x130>)
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
		}
		break;
 8004630:	e03d      	b.n	80046ae <PenDelay+0x116>
	case 2: // Waiting for second 500ms after servo set to 1
		if (now - pen_delay_timer >= 500000UL) {
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2200      	movs	r2, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	617a      	str	r2, [r7, #20]
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <PenDelay+0x134>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004644:	4621      	mov	r1, r4
 8004646:	ebb1 0802 	subs.w	r8, r1, r2
 800464a:	4629      	mov	r1, r5
 800464c:	eb61 0903 	sbc.w	r9, r1, r3
 8004650:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <PenDelay+0x138>)
 8004652:	4598      	cmp	r8, r3
 8004654:	f179 0300 	sbcs.w	r3, r9, #0
 8004658:	d32b      	bcc.n	80046b2 <PenDelay+0x11a>
			Set_Servo(0);
 800465a:	2000      	movs	r0, #0
 800465c:	f000 fc90 	bl	8004f80 <Set_Servo>
			pen_delay_timer = now;
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	2200      	movs	r2, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <PenDelay+0x134>)
 800466a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800466e:	e9c3 1200 	strd	r1, r2, [r3]
			state = 3;
 8004672:	4b15      	ldr	r3, [pc, #84]	@ (80046c8 <PenDelay+0x130>)
 8004674:	2203      	movs	r2, #3
 8004676:	601a      	str	r2, [r3, #0]
		}
		break;
 8004678:	e01b      	b.n	80046b2 <PenDelay+0x11a>
	case 3: // Waiting for third 500ms after servo set to 0
		if (now - pen_delay_timer >= 500000UL) {
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	2200      	movs	r2, #0
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	4b12      	ldr	r3, [pc, #72]	@ (80046cc <PenDelay+0x134>)
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	e9d7 8900 	ldrd	r8, r9, [r7]
 800468c:	4641      	mov	r1, r8
 800468e:	1a8c      	subs	r4, r1, r2
 8004690:	4649      	mov	r1, r9
 8004692:	eb61 0503 	sbc.w	r5, r1, r3
 8004696:	4b0e      	ldr	r3, [pc, #56]	@ (80046d0 <PenDelay+0x138>)
 8004698:	429c      	cmp	r4, r3
 800469a:	f175 0300 	sbcs.w	r3, r5, #0
 800469e:	d30a      	bcc.n	80046b6 <PenDelay+0x11e>
			state = 0;
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <PenDelay+0x130>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
			Done = true;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		break;
 80046ac:	e003      	b.n	80046b6 <PenDelay+0x11e>
		break;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <PenDelay+0x120>
		break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <PenDelay+0x120>
		break;
 80046b6:	bf00      	nop
	}

	return Done;
 80046b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3738      	adds	r7, #56	@ 0x38
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	20001420 	.word	0x20001420
 80046cc:	20001330 	.word	0x20001330
 80046d0:	0007a120 	.word	0x0007a120

080046d4 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	ed87 0a05 	vstr	s0, [r7, #20]
 80046de:	edc7 0a04 	vstr	s1, [r7, #16]
 80046e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80046e6:	edc7 1a02 	vstr	s3, [r7, #8]
 80046ea:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80046f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80046f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046fa:	edd7 6a01 	vldr	s13, [r7, #4]
 80046fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004702:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004706:	ee67 6a27 	vmul.f32	s13, s14, s15
 800470a:	ed97 7a03 	vldr	s14, [r7, #12]
 800470e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	edd7 7a02 	vldr	s15, [r7, #8]
 800471e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004722:	eeb0 0a67 	vmov.f32	s0, s15
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <DWT_Init>:

void DWT_Init(void) {
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <DWT_Init+0x28>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <DWT_Init+0x28>)
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <DWT_Init+0x2c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a05      	ldr	r2, [pc, #20]	@ (800475c <DWT_Init+0x2c>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000edf0 	.word	0xe000edf0
 800475c:	e0001000 	.word	0xe0001000

08004760 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004770:	d10e      	bne.n	8004790 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8004772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800477a:	f002 fa55 	bl	8006c28 <HAL_GPIO_ReadPin>
 800477e:	4603      	mov	r3, r0
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004784:	4b4b      	ldr	r3, [pc, #300]	@ (80048b4 <HAL_GPIO_EXTI_Callback+0x154>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <HAL_GPIO_EXTI_Callback+0x154>)
 800478e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004796:	d10d      	bne.n	80047b4 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8004798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800479c:	4846      	ldr	r0, [pc, #280]	@ (80048b8 <HAL_GPIO_EXTI_Callback+0x158>)
 800479e:	f002 fa43 	bl	8006c28 <HAL_GPIO_ReadPin>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 80047a8:	4b44      	ldr	r3, [pc, #272]	@ (80048bc <HAL_GPIO_EXTI_Callback+0x15c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 80047ae:	4b44      	ldr	r3, [pc, #272]	@ (80048c0 <HAL_GPIO_EXTI_Callback+0x160>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ba:	d10e      	bne.n	80047da <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 80047bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047c0:	4840      	ldr	r0, [pc, #256]	@ (80048c4 <HAL_GPIO_EXTI_Callback+0x164>)
 80047c2:	f002 fa31 	bl	8006c28 <HAL_GPIO_ReadPin>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d103      	bne.n	80047d4 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 80047cc:	4b3e      	ldr	r3, [pc, #248]	@ (80048c8 <HAL_GPIO_EXTI_Callback+0x168>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e002      	b.n	80047da <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 80047d4:	4b3c      	ldr	r3, [pc, #240]	@ (80048c8 <HAL_GPIO_EXTI_Callback+0x168>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e0:	d10e      	bne.n	8004800 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 80047e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047e6:	4837      	ldr	r0, [pc, #220]	@ (80048c4 <HAL_GPIO_EXTI_Callback+0x164>)
 80047e8:	f002 fa1e 	bl	8006c28 <HAL_GPIO_ReadPin>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d103      	bne.n	80047fa <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 80047f2:	4b36      	ldr	r3, [pc, #216]	@ (80048cc <HAL_GPIO_EXTI_Callback+0x16c>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 80047fa:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <HAL_GPIO_EXTI_Callback+0x16c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004806:	d102      	bne.n	800480e <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 8004808:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <HAL_GPIO_EXTI_Callback+0x160>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 800480e:	4b30      	ldr	r3, [pc, #192]	@ (80048d0 <HAL_GPIO_EXTI_Callback+0x170>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d102      	bne.n	8004820 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e00a      	b.n	8004836 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d102      	bne.n	800482c <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e004      	b.n	8004836 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d13b      	bne.n	80048aa <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 8004832:	2302      	movs	r3, #2
 8004834:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8004836:	4a27      	ldr	r2, [pc, #156]	@ (80048d4 <HAL_GPIO_EXTI_Callback+0x174>)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 8004842:	4925      	ldr	r1, [pc, #148]	@ (80048d8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 800484c:	4a21      	ldr	r2, [pc, #132]	@ (80048d4 <HAL_GPIO_EXTI_Callback+0x174>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	e029      	b.n	80048ac <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <HAL_GPIO_EXTI_Callback+0x178>)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d306      	bcc.n	8004874 <HAL_GPIO_EXTI_Callback+0x114>
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	e006      	b.n	8004882 <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004874:	4a18      	ldr	r2, [pc, #96]	@ (80048d8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8004880:	3b01      	subs	r3, #1
		uint32_t delta =
 8004882:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004884:	4b15      	ldr	r3, [pc, #84]	@ (80048dc <HAL_GPIO_EXTI_Callback+0x17c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <HAL_GPIO_EXTI_Callback+0x180>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0c9b      	lsrs	r3, r3, #18
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	fbb2 f2f3 	udiv	r2, r2, r3
 8004896:	4913      	ldr	r1, [pc, #76]	@ (80048e4 <HAL_GPIO_EXTI_Callback+0x184>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 800489e:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <HAL_GPIO_EXTI_Callback+0x174>)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80048aa:	bf00      	nop
	}
}
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000b78 	.word	0x20000b78
 80048b8:	48000800 	.word	0x48000800
 80048bc:	20000bcc 	.word	0x20000bcc
 80048c0:	20000bce 	.word	0x20000bce
 80048c4:	48000400 	.word	0x48000400
 80048c8:	20000bd2 	.word	0x20000bd2
 80048cc:	20000bd3 	.word	0x20000bd3
 80048d0:	e0001000 	.word	0xe0001000
 80048d4:	20001424 	.word	0x20001424
 80048d8:	20000ad8 	.word	0x20000ad8
 80048dc:	20000230 	.word	0x20000230
 80048e0:	431bde83 	.word	0x431bde83
 80048e4:	20000ae4 	.word	0x20000ae4

080048e8 <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80048e8:	b4b0      	push	{r4, r5, r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80048f8:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	1e54      	subs	r4, r2, #1
 8004900:	f143 0500 	adc.w	r5, r3, #0
 8004904:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004906:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bcb0      	pop	{r4, r5, r7}
 8004912:	4770      	bx	lr
 8004914:	200005e0 	.word	0x200005e0
 8004918:	20000aa0 	.word	0x20000aa0

0800491c <micros>:
uint64_t micros() {
 800491c:	b4b0      	push	{r4, r5, r7}
 800491e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <micros+0x2c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	2200      	movs	r2, #0
 8004928:	4618      	mov	r0, r3
 800492a:	4611      	mov	r1, r2
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <micros+0x30>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	1884      	adds	r4, r0, r2
 8004934:	eb41 0503 	adc.w	r5, r1, r3
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
}
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	bcb0      	pop	{r4, r5, r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200005e0 	.word	0x200005e0
 800494c:	20000aa0 	.word	0x20000aa0

08004950 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8004950:	b480      	push	{r7}
 8004952:	b08f      	sub	sp, #60	@ 0x3c
 8004954:	af00      	add	r7, sp, #0
 8004956:	ed87 0a07 	vstr	s0, [r7, #28]
 800495a:	edc7 0a06 	vstr	s1, [r7, #24]
 800495e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004962:	edc7 1a04 	vstr	s3, [r7, #16]
 8004966:	ed87 2a03 	vstr	s4, [r7, #12]
 800496a:	edc7 2a02 	vstr	s5, [r7, #8]
 800496e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004972:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004974:	ed97 7a06 	vldr	s14, [r7, #24]
 8004978:	edd7 7a07 	vldr	s15, [r7, #28]
 800497c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004980:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	ed93 7a00 	vldr	s14, [r3]
 800498a:	edd7 6a07 	vldr	s13, [r7, #28]
 800498e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	ed93 7a00 	vldr	s14, [r3]
 80049a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80049aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80049ae:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80049b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	dd08      	ble.n	80049ce <PID_Update+0x7e>
		state->integ = outMax / kI;
 80049bc:	edd7 6a01 	vldr	s13, [r7, #4]
 80049c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80049c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	ed93 7a00 	vldr	s14, [r3]
 80049d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80049dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80049e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e8:	d508      	bpl.n	80049fc <PID_Update+0xac>
		state->integ = outMin / kI;
 80049ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80049ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80049f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 80049fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	dd0b      	ble.n	8004a22 <PID_Update+0xd2>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	d503      	bpl.n	8004a22 <PID_Update+0xd2>
		state->integ = 0;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004a22:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2e:	d50b      	bpl.n	8004a48 <PID_Update+0xf8>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	edd3 7a00 	vldr	s15, [r3]
 8004a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	dd03      	ble.n	8004a48 <PID_Update+0xf8>
		state->integ = 0;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	edd3 7a00 	vldr	s15, [r3]
 8004a4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a60:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a68:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004a74:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8004a8a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004a8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a96:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004aa2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	dd01      	ble.n	8004ab8 <PID_Update+0x168>
		out = outMax;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8004ab8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	d501      	bpl.n	8004ace <PID_Update+0x17e>
		out = outMin;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	ee07 3a90 	vmov	s15, r3
}
 8004ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad8:	373c      	adds	r7, #60	@ 0x3c
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	0000      	movs	r0, r0
 8004ae4:	0000      	movs	r0, r0
	...

08004ae8 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004af0:	f7ff ff14 	bl	800491c <micros>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	497b      	ldr	r1, [pc, #492]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004afa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8004afe:	4b7b      	ldr	r3, [pc, #492]	@ (8004cec <Revolute_PosVel_Update+0x204>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	4a78      	ldr	r2, [pc, #480]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b06:	6013      	str	r3, [r2, #0]

// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004b08:	4b77      	ldr	r3, [pc, #476]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	4b73      	ldr	r3, [pc, #460]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b1a:	edc3 7a06 	vstr	s15, [r3, #24]

// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004b1e:	4b72      	ldr	r3, [pc, #456]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b20:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8004b22:	4b71      	ldr	r3, [pc, #452]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004b28:	60fb      	str	r3, [r7, #12]

// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b30:	dd04      	ble.n	8004b3c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e007      	b.n	8004b4c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004b42:	da03      	bge.n	8004b4c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004b4a:	60fb      	str	r3, [r7, #12]

// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004b4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004b52:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004b54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b58:	ebb0 0a02 	subs.w	sl, r0, r2
 8004b5c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004b60:	4650      	mov	r0, sl
 8004b62:	4659      	mov	r1, fp
 8004b64:	f7fc f8e6 	bl	8000d34 <__aeabi_ul2f>
 8004b68:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004b6c:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004cf0 <Revolute_PosVel_Update+0x208>
 8004b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b74:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004b78:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	f000 80a0 	beq.w	8004cc8 <Revolute_PosVel_Update+0x1e0>
		return;

// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b92:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	edc7 7a01 	vstr	s15, [r7, #4]

// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004b9e:	4b52      	ldr	r3, [pc, #328]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004ba0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ba4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ba8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004bac:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 8004bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004bb6:	edc3 7a08 	vstr	s15, [r3, #32]

// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004bba:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	61d3      	str	r3, [r2, #28]

// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fb fc8d 	bl	80004e0 <__aeabi_f2d>
 8004bc6:	a344      	add	r3, pc, #272	@ (adr r3, 8004cd8 <Revolute_PosVel_Update+0x1f0>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f7fb fce0 	bl	8000590 <__aeabi_dmul>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f7fb ff94 	bl	8000b04 <__aeabi_d2f>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4a42      	ldr	r2, [pc, #264]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004be0:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004be2:	4b44      	ldr	r3, [pc, #272]	@ (8004cf4 <Revolute_PosVel_Update+0x20c>)
 8004be4:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004be6:	4b40      	ldr	r3, [pc, #256]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004be8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004bf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf8:	edd7 7a00 	vldr	s15, [r7]
 8004bfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004c00:	4b39      	ldr	r3, [pc, #228]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c10:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004c14:	4b34      	ldr	r3, [pc, #208]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb fc61 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004c1e:	a32e      	add	r3, pc, #184	@ (adr r3, 8004cd8 <Revolute_PosVel_Update+0x1f0>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb fcb4 	bl	8000590 <__aeabi_dmul>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7fb ff68 	bl	8000b04 <__aeabi_d2f>
 8004c34:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004c36:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	17c8      	asrs	r0, r1, #31
 8004c44:	460c      	mov	r4, r1
 8004c46:	4605      	mov	r5, r0
 8004c48:	eb12 0804 	adds.w	r8, r2, r4
 8004c4c:	eb43 0905 	adc.w	r9, r3, r5
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c52:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004c56:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fb fc68 	bl	8000534 <__aeabi_l2d>
 8004c64:	a31c      	add	r3, pc, #112	@ (adr r3, 8004cd8 <Revolute_PosVel_Update+0x1f0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fc91 	bl	8000590 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	f7fb ff45 	bl	8000b04 <__aeabi_d2f>
 8004c7a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c7e:	6393      	str	r3, [r2, #56]	@ 0x38

// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004c80:	4b19      	ldr	r3, [pc, #100]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004c82:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004c86:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004cf8 <Revolute_PosVel_Update+0x210>
 8004c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c8e:	ee17 0a90 	vmov	r0, s15
 8004c92:	f7fb fc25 	bl	80004e0 <__aeabi_f2d>
 8004c96:	a312      	add	r3, pc, #72	@ (adr r3, 8004ce0 <Revolute_PosVel_Update+0x1f8>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb fda2 	bl	80007e4 <__aeabi_ddiv>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f7fb ff2c 	bl	8000b04 <__aeabi_d2f>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004cb0:	63d3      	str	r3, [r2, #60]	@ 0x3c

// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004cb8:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004cbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cc0:	4909      	ldr	r1, [pc, #36]	@ (8004ce8 <Revolute_PosVel_Update+0x200>)
 8004cc2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004cc6:	e000      	b.n	8004cca <Revolute_PosVel_Update+0x1e2>
		return;
 8004cc8:	bf00      	nop
}
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	54442d18 	.word	0x54442d18
 8004cdc:	3f3921fb 	.word	0x3f3921fb
 8004ce0:	54442d18 	.word	0x54442d18
 8004ce4:	400921fb 	.word	0x400921fb
 8004ce8:	20000af8 	.word	0x20000af8
 8004cec:	20000514 	.word	0x20000514
 8004cf0:	358637bd 	.word	0x358637bd
 8004cf4:	3ecccccd 	.word	0x3ecccccd
 8004cf8:	43340000 	.word	0x43340000

08004cfc <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004d04:	f7ff fe0a 	bl	800491c <micros>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4958      	ldr	r1, [pc, #352]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004d12:	4b58      	ldr	r3, [pc, #352]	@ (8004e74 <Prismatic_PosVel_Update+0x178>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	4a55      	ldr	r2, [pc, #340]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d1a:	6013      	str	r3, [r2, #0]

// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004d1c:	4b54      	ldr	r3, [pc, #336]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004d20:	4b53      	ldr	r3, [pc, #332]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004d26:	60fb      	str	r3, [r7, #12]

// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d2e:	dd04      	ble.n	8004d3a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e007      	b.n	8004d4a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004d40:	da03      	bge.n	8004d4a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004d48:	60fb      	str	r3, [r7, #12]

// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004d50:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d56:	ebb0 0a02 	subs.w	sl, r0, r2
 8004d5a:	eb61 0b03 	sbc.w	fp, r1, r3
 8004d5e:	4650      	mov	r0, sl
 8004d60:	4659      	mov	r1, fp
 8004d62:	f7fb ffe7 	bl	8000d34 <__aeabi_ul2f>
 8004d66:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004d6a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004e78 <Prismatic_PosVel_Update+0x17c>
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	d070      	beq.n	8004e66 <Prismatic_PosVel_Update+0x16a>
		return;

// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d96:	edc7 7a01 	vstr	s15, [r7, #4]

// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004d9a:	4b35      	ldr	r3, [pc, #212]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004d9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004da0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004da4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004da8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004db0:	4b2f      	ldr	r3, [pc, #188]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004db2:	edc3 7a07 	vstr	s15, [r3, #28]

// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004db6:	4a2e      	ldr	r2, [pc, #184]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6193      	str	r3, [r2, #24]

// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004e7c <Prismatic_PosVel_Update+0x180>
 8004dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dc8:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004dca:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004dce:	4b2c      	ldr	r3, [pc, #176]	@ (8004e80 <Prismatic_PosVel_Update+0x184>)
 8004dd0:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004dd2:	4b27      	ldr	r3, [pc, #156]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004dd4:	ed93 7a08 	vldr	s14, [r3, #32]
 8004dd8:	edd7 7a00 	vldr	s15, [r7]
 8004ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004de4:	edd7 7a00 	vldr	s15, [r7]
 8004de8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004dec:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004dee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004df6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004dfc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e02:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004e06:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004e7c <Prismatic_PosVel_Update+0x180>
 8004e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004e0e:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e10:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004e14:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e16:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	17c8      	asrs	r0, r1, #31
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4605      	mov	r5, r0
 8004e22:	eb12 0804 	adds.w	r8, r2, r4
 8004e26:	eb43 0905 	adc.w	r9, r3, r5
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e2c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004e30:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e32:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f7fb ff83 	bl	8000d44 <__aeabi_l2f>
 8004e3e:	ee07 0a10 	vmov	s14, r0
 8004e42:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004e7c <Prismatic_PosVel_Update+0x180>
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004e4a:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e4c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004e50:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a06      	ldr	r2, [pc, #24]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e56:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e5e:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <Prismatic_PosVel_Update+0x174>)
 8004e60:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e64:	e000      	b.n	8004e68 <Prismatic_PosVel_Update+0x16c>
		return;
 8004e66:	bf00      	nop
}
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e70:	20000b38 	.word	0x20000b38
 8004e74:	20000448 	.word	0x20000448
 8004e78:	358637bd 	.word	0x358637bd
 8004e7c:	3aa00000 	.word	0x3aa00000
 8004e80:	3ecccccd 	.word	0x3ecccccd

08004e84 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004e90:	edd7 7a00 	vldr	s15, [r7]
 8004e94:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004f68 <Set_Motor+0xe4>
 8004e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea0:	dd01      	ble.n	8004ea6 <Set_Motor+0x22>
		speed = 100.0f;
 8004ea2:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <Set_Motor+0xe8>)
 8004ea4:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004ea6:	edd7 7a00 	vldr	s15, [r7]
 8004eaa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004f70 <Set_Motor+0xec>
 8004eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	d501      	bpl.n	8004ebc <Set_Motor+0x38>
		speed = -100.0f;
 8004eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f74 <Set_Motor+0xf0>)
 8004eba:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004ebc:	edd7 7a00 	vldr	s15, [r7]
 8004ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ec4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004f68 <Set_Motor+0xe4>
 8004ec8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ecc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f68 <Set_Motor+0xe4>
 8004ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed8:	ee17 3a90 	vmov	r3, s15
 8004edc:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11d      	bne.n	8004f20 <Set_Motor+0x9c>
		if (speed > 0) {
 8004ee4:	edd7 7a00 	vldr	s15, [r7]
 8004ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	dd05      	ble.n	8004efe <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	4820      	ldr	r0, [pc, #128]	@ (8004f78 <Set_Motor+0xf4>)
 8004ef8:	f001 feae 	bl	8006c58 <HAL_GPIO_WritePin>
 8004efc:	e00b      	b.n	8004f16 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004efe:	edd7 7a00 	vldr	s15, [r7]
 8004f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d504      	bpl.n	8004f16 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2120      	movs	r1, #32
 8004f10:	4819      	ldr	r0, [pc, #100]	@ (8004f78 <Set_Motor+0xf4>)
 8004f12:	f001 fea1 	bl	8006c58 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004f16:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <Set_Motor+0xf8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004f1e:	e01f      	b.n	8004f60 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d11c      	bne.n	8004f60 <Set_Motor+0xdc>
		if (speed > 0) {
 8004f26:	edd7 7a00 	vldr	s15, [r7]
 8004f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	dd05      	ble.n	8004f40 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004f34:	2200      	movs	r2, #0
 8004f36:	2140      	movs	r1, #64	@ 0x40
 8004f38:	480f      	ldr	r0, [pc, #60]	@ (8004f78 <Set_Motor+0xf4>)
 8004f3a:	f001 fe8d 	bl	8006c58 <HAL_GPIO_WritePin>
 8004f3e:	e00b      	b.n	8004f58 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004f40:	edd7 7a00 	vldr	s15, [r7]
 8004f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	d504      	bpl.n	8004f58 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2140      	movs	r1, #64	@ 0x40
 8004f52:	4809      	ldr	r0, [pc, #36]	@ (8004f78 <Set_Motor+0xf4>)
 8004f54:	f001 fe80 	bl	8006c58 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004f58:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <Set_Motor+0xf8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	42c80000 	.word	0x42c80000
 8004f6c:	42c80000 	.word	0x42c80000
 8004f70:	c2c80000 	.word	0xc2c80000
 8004f74:	c2c80000 	.word	0xc2c80000
 8004f78:	48000800 	.word	0x48000800
 8004f7c:	200006ac 	.word	0x200006ac

08004f80 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10f      	bne.n	8004fae <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <Set_Servo+0x48>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004f96:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <Set_Servo+0x4c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004f9e:	f7ff fcbd 	bl	800491c <micros>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	490a      	ldr	r1, [pc, #40]	@ (8004fd0 <Set_Servo+0x50>)
 8004fa8:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004fac:	e007      	b.n	8004fbe <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <Set_Servo+0x48>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <Set_Servo+0x4c>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000778 	.word	0x20000778
 8004fcc:	20000bd1 	.word	0x20000bd1
 8004fd0:	20000c48 	.word	0x20000c48

08004fd4 <Reset_R>:

void Reset_R() {
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004fd8:	4905      	ldr	r1, [pc, #20]	@ (8004ff0 <Reset_R+0x1c>)
 8004fda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000af8 	.word	0x20000af8

08004ff4 <Reset_P>:
void Reset_P() {
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004ff8:	4905      	ldr	r1, [pc, #20]	@ (8005010 <Reset_P+0x1c>)
 8004ffa:	4a06      	ldr	r2, [pc, #24]	@ (8005014 <Reset_P+0x20>)
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Prismatic_QEIdata.mmPosition = 0;
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000b38 	.word	0x20000b38
 8005014:	fffff99a 	.word	0xfffff99a

08005018 <Workspace_limit>:

void Workspace_limit() {
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 800501c:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <Workspace_limit+0xd8>)
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa5d 	bl	80004e0 <__aeabi_f2d>
 8005026:	a32e      	add	r3, pc, #184	@ (adr r3, 80050e0 <Workspace_limit+0xc8>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb fd22 	bl	8000a74 <__aeabi_dcmplt>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <Workspace_limit+0x36>
 8005036:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <Workspace_limit+0xdc>)
 8005038:	edd3 7a00 	vldr	s15, [r3]
 800503c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	dd03      	ble.n	800504e <Workspace_limit+0x36>
		R_PWM = 0;
 8005046:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <Workspace_limit+0xdc>)
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 800504e:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <Workspace_limit+0xd8>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fa44 	bl	80004e0 <__aeabi_f2d>
 8005058:	a323      	add	r3, pc, #140	@ (adr r3, 80050e8 <Workspace_limit+0xd0>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb fd27 	bl	8000ab0 <__aeabi_dcmpgt>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <Workspace_limit+0x68>
 8005068:	4b22      	ldr	r3, [pc, #136]	@ (80050f4 <Workspace_limit+0xdc>)
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	d503      	bpl.n	8005080 <Workspace_limit+0x68>
		R_PWM = 0;
 8005078:	4b1e      	ldr	r3, [pc, #120]	@ (80050f4 <Workspace_limit+0xdc>)
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <Workspace_limit+0xe0>)
 8005082:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005086:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80050fc <Workspace_limit+0xe4>
 800508a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	dd0b      	ble.n	80050ac <Workspace_limit+0x94>
 8005094:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <Workspace_limit+0xe8>)
 8005096:	edd3 7a00 	vldr	s15, [r3]
 800509a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	dd03      	ble.n	80050ac <Workspace_limit+0x94>
		P_PWM = 0;
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <Workspace_limit+0xe8>)
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 80050ac:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <Workspace_limit+0xe0>)
 80050ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80050b2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80050b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	d400      	bmi.n	80050c2 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 80050c0:	e00c      	b.n	80050dc <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <Workspace_limit+0xe8>)
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	d400      	bmi.n	80050d4 <Workspace_limit+0xbc>
}
 80050d2:	e003      	b.n	80050dc <Workspace_limit+0xc4>
		P_PWM = 0;
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <Workspace_limit+0xe8>)
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	1e8e6080 	.word	0x1e8e6080
 80050e4:	bffeb7bf 	.word	0xbffeb7bf
 80050e8:	bfb15b57 	.word	0xbfb15b57
 80050ec:	40143eec 	.word	0x40143eec
 80050f0:	20000af8 	.word	0x20000af8
 80050f4:	20000bc4 	.word	0x20000bc4
 80050f8:	20000b38 	.word	0x20000b38
 80050fc:	43988000 	.word	0x43988000
 8005100:	20000bc8 	.word	0x20000bc8

08005104 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8005118:	4b16      	ldr	r3, [pc, #88]	@ (8005174 <Get_QRIdata+0x70>)
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <Get_QRIdata+0x70>)
 8005128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8005134:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <Get_QRIdata+0x70>)
 8005136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <Get_QRIdata+0x74>)
 8005144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <Get_QRIdata+0x74>)
 8005152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 800515e:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <Get_QRIdata+0x74>)
 8005160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000b38 	.word	0x20000b38
 8005178:	20000af8 	.word	0x20000af8

0800517c <Trapezoidal_CalcTotalTime>:

float Trapezoidal_CalcTotalTime(float distance, float vmax, float amax) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	ed87 0a03 	vstr	s0, [r7, #12]
 8005186:	edc7 0a02 	vstr	s1, [r7, #8]
 800518a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_acc = vmax / amax;
 800518e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005192:	ed97 7a01 	vldr	s14, [r7, #4]
 8005196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_acc = 0.5f * amax * t_acc * t_acc;
 800519e:	edd7 7a01 	vldr	s15, [r7, #4]
 80051a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a06 	vstr	s15, [r7, #24]
	if (2 * d_acc > distance) {
 80051be:	edd7 7a06 	vldr	s15, [r7, #24]
 80051c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80051ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	d510      	bpl.n	80051f6 <Trapezoidal_CalcTotalTime+0x7a>
		t_acc = sqrtf(distance / amax);
 80051d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80051d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80051dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80051e0:	eeb0 0a66 	vmov.f32	s0, s13
 80051e4:	f007 fa62 	bl	800c6ac <sqrtf>
 80051e8:	ed87 0a07 	vstr	s0, [r7, #28]
		return 2 * t_acc;
 80051ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80051f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051f4:	e019      	b.n	800522a <Trapezoidal_CalcTotalTime+0xae>
	}
	float d_const = distance - 2 * d_acc;
 80051f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80051fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8005202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005206:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_const = d_const / vmax;
 800520a:	edd7 6a05 	vldr	s13, [r7, #20]
 800520e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005216:	edc7 7a04 	vstr	s15, [r7, #16]
	return 2 * t_acc + t_const;
 800521a:	edd7 7a07 	vldr	s15, [r7, #28]
 800521e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005222:	edd7 7a04 	vldr	s15, [r7, #16]
 8005226:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800522a:	eeb0 0a67 	vmov.f32	s0, s15
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <Trapezoidal_CalcVmaxFromTime>:

float Trapezoidal_CalcVmaxFromTime(float distance, float amax, float total_time) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	ed87 0a03 	vstr	s0, [r7, #12]
 800523e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005242:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_half = total_time / 2.0f;
 8005246:	ed97 7a01 	vldr	s14, [r7, #4]
 800524a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800524e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_half = distance / 2.0f;
 8005256:	ed97 7a03 	vldr	s14, [r7, #12]
 800525a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800525e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005262:	edc7 7a06 	vstr	s15, [r7, #24]

	float v_peak = amax * t_half;
 8005266:	ed97 7a02 	vldr	s14, [r7, #8]
 800526a:	edd7 7a07 	vldr	s15, [r7, #28]
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a05 	vstr	s15, [r7, #20]
	if (0.5f * v_peak * t_half >= d_half) {
 8005276:	edd7 7a05 	vldr	s15, [r7, #20]
 800527a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800527e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005282:	edd7 7a07 	vldr	s15, [r7, #28]
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	ed97 7a06 	vldr	s14, [r7, #24]
 800528e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	d80c      	bhi.n	80052b2 <Trapezoidal_CalcVmaxFromTime+0x7e>
		return sqrtf(distance * amax);
 8005298:	ed97 7a03 	vldr	s14, [r7, #12]
 800529c:	edd7 7a02 	vldr	s15, [r7, #8]
 80052a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a4:	eeb0 0a67 	vmov.f32	s0, s15
 80052a8:	f007 fa00 	bl	800c6ac <sqrtf>
 80052ac:	eef0 6a40 	vmov.f32	s13, s0
 80052b0:	e015      	b.n	80052de <Trapezoidal_CalcVmaxFromTime+0xaa>
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
 80052b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80052b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052be:	edd7 7a07 	vldr	s15, [r7, #28]
 80052c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80052ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80052d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80052da:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80052de:	eef0 7a66 	vmov.f32	s15, s13
 80052e2:	eeb0 0a67 	vmov.f32	s0, s15
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0000      	movs	r0, r0
	...

080052f0 <InverseKinematics>:

void InverseKinematics(float x, float y, float *r, float *p) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80052fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	*r = atan2f(x * -1, y) + M_PI_2;
 8005302:	edd7 7a03 	vldr	s15, [r7, #12]
 8005306:	eef1 7a67 	vneg.f32	s15, s15
 800530a:	edd7 0a02 	vldr	s1, [r7, #8]
 800530e:	eeb0 0a67 	vmov.f32	s0, s15
 8005312:	f007 f9c9 	bl	800c6a8 <atan2f>
 8005316:	ee10 3a10 	vmov	r3, s0
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f8e0 	bl	80004e0 <__aeabi_f2d>
 8005320:	a313      	add	r3, pc, #76	@ (adr r3, 8005370 <InverseKinematics+0x80>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fa ff7d 	bl	8000224 <__adddf3>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	f7fb fbe7 	bl	8000b04 <__aeabi_d2f>
 8005336:	4602      	mov	r2, r0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
	*p = sqrtf(x * x + y * y);
 800533c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005340:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005344:	edd7 7a02 	vldr	s15, [r7, #8]
 8005348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800534c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005350:	eeb0 0a67 	vmov.f32	s0, s15
 8005354:	f007 f9aa 	bl	800c6ac <sqrtf>
 8005358:	eef0 7a40 	vmov.f32	s15, s0
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	edc3 7a00 	vstr	s15, [r3]
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w
 8005370:	54442d18 	.word	0x54442d18
 8005374:	3ff921fb 	.word	0x3ff921fb

08005378 <TrapezoidStep>:

void TrapezoidStep(void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
//	static float last_TargetR = 0.0f;
//	static float last_TargetP = 0.0f;

// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 800537e:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <TrapezoidStep+0xe8>)
 8005380:	ed93 7a00 	vldr	s14, [r3]
 8005384:	4b37      	ldr	r3, [pc, #220]	@ (8005464 <TrapezoidStep+0xec>)
 8005386:	edd3 7a00 	vldr	s15, [r3]
 800538a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538e:	eef0 7ae7 	vabs.f32	s15, s15
 8005392:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 8005396:	edd7 7a01 	vldr	s15, [r7, #4]
 800539a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005468 <TrapezoidStep+0xf0>
 800539e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	dd0f      	ble.n	80053c8 <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 80053a8:	4b30      	ldr	r3, [pc, #192]	@ (800546c <TrapezoidStep+0xf4>)
 80053aa:	edd3 7a00 	vldr	s15, [r3]
 80053ae:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80053b2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8005470 <TrapezoidStep+0xf8>
 80053b6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ba:	482e      	ldr	r0, [pc, #184]	@ (8005474 <TrapezoidStep+0xfc>)
 80053bc:	f7fc fb32 	bl	8001a24 <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 80053c0:	4b27      	ldr	r3, [pc, #156]	@ (8005460 <TrapezoidStep+0xe8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a27      	ldr	r2, [pc, #156]	@ (8005464 <TrapezoidStep+0xec>)
 80053c6:	6013      	str	r3, [r2, #0]
	}

// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 80053c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <TrapezoidStep+0x100>)
 80053ca:	ed93 7a00 	vldr	s14, [r3]
 80053ce:	4b2b      	ldr	r3, [pc, #172]	@ (800547c <TrapezoidStep+0x104>)
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d8:	eef0 7ae7 	vabs.f32	s15, s15
 80053dc:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 80053e0:	edd7 7a00 	vldr	s15, [r7]
 80053e4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005480 <TrapezoidStep+0x108>
 80053e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f0:	dd0f      	ble.n	8005412 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 80053f2:	4b24      	ldr	r3, [pc, #144]	@ (8005484 <TrapezoidStep+0x10c>)
 80053f4:	edd3 7a00 	vldr	s15, [r3]
 80053f8:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005488 <TrapezoidStep+0x110>
 80053fc:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800548c <TrapezoidStep+0x114>
 8005400:	eeb0 0a67 	vmov.f32	s0, s15
 8005404:	4822      	ldr	r0, [pc, #136]	@ (8005490 <TrapezoidStep+0x118>)
 8005406:	f7fc fb0d 	bl	8001a24 <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 800540a:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <TrapezoidStep+0x100>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <TrapezoidStep+0x104>)
 8005410:	6013      	str	r3, [r2, #0]
	}

// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 8005412:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8005468 <TrapezoidStep+0xf0>
 8005416:	4817      	ldr	r0, [pc, #92]	@ (8005474 <TrapezoidStep+0xfc>)
 8005418:	f7fc fbce 	bl	8001bb8 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 800541c:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <TrapezoidStep+0xfc>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <TrapezoidStep+0x11c>)
 8005422:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 8005424:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <TrapezoidStep+0xfc>)
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <TrapezoidStep+0x120>)
 800542a:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 800542c:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <TrapezoidStep+0xfc>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4a1a      	ldr	r2, [pc, #104]	@ (800549c <TrapezoidStep+0x124>)
 8005432:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 8005434:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005468 <TrapezoidStep+0xf0>
 8005438:	4815      	ldr	r0, [pc, #84]	@ (8005490 <TrapezoidStep+0x118>)
 800543a:	f7fc fbbd 	bl	8001bb8 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <TrapezoidStep+0x118>)
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <TrapezoidStep+0x128>)
 8005444:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8005446:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <TrapezoidStep+0x118>)
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <TrapezoidStep+0x12c>)
 800544c:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 800544e:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <TrapezoidStep+0x118>)
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	4a15      	ldr	r2, [pc, #84]	@ (80054a8 <TrapezoidStep+0x130>)
 8005454:	6013      	str	r3, [r2, #0]
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000b94 	.word	0x20000b94
 8005464:	20001328 	.word	0x20001328
 8005468:	3a83126f 	.word	0x3a83126f
 800546c:	20000bb4 	.word	0x20000bb4
 8005470:	3fb33333 	.word	0x3fb33333
 8005474:	2000133c 	.word	0x2000133c
 8005478:	20000b98 	.word	0x20000b98
 800547c:	2000132c 	.word	0x2000132c
 8005480:	3c23d70a 	.word	0x3c23d70a
 8005484:	20000bb8 	.word	0x20000bb8
 8005488:	453b8000 	.word	0x453b8000
 800548c:	44160000 	.word	0x44160000
 8005490:	20001380 	.word	0x20001380
 8005494:	20000b9c 	.word	0x20000b9c
 8005498:	20000ba4 	.word	0x20000ba4
 800549c:	20000bac 	.word	0x20000bac
 80054a0:	20000ba0 	.word	0x20000ba0
 80054a4:	20000ba8 	.word	0x20000ba8
 80054a8:	20000bb0 	.word	0x20000bb0

080054ac <PIDStep>:

void PIDStep(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 80054b2:	4b65      	ldr	r3, [pc, #404]	@ (8005648 <PIDStep+0x19c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3301      	adds	r3, #1
 80054b8:	4a63      	ldr	r2, [pc, #396]	@ (8005648 <PIDStep+0x19c>)
 80054ba:	6013      	str	r3, [r2, #0]
// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 80054bc:	4b62      	ldr	r3, [pc, #392]	@ (8005648 <PIDStep+0x19c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	dd62      	ble.n	800558a <PIDStep+0xde>
		loop_counter1 = 0;
 80054c4:	4b60      	ldr	r3, [pc, #384]	@ (8005648 <PIDStep+0x19c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 80054ca:	4b60      	ldr	r3, [pc, #384]	@ (800564c <PIDStep+0x1a0>)
 80054cc:	ed93 7a00 	vldr	s14, [r3]
 80054d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005650 <PIDStep+0x1a4>)
 80054d2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80054d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054da:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 80054de:	4b5d      	ldr	r3, [pc, #372]	@ (8005654 <PIDStep+0x1a8>)
 80054e0:	ed93 7a00 	vldr	s14, [r3]
 80054e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005658 <PIDStep+0x1ac>)
 80054e6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80054ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ee:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 80054f2:	4b5a      	ldr	r3, [pc, #360]	@ (800565c <PIDStep+0x1b0>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	4b59      	ldr	r3, [pc, #356]	@ (8005660 <PIDStep+0x1b4>)
 80054fa:	ed93 7a00 	vldr	s14, [r3]
 80054fe:	4b59      	ldr	r3, [pc, #356]	@ (8005664 <PIDStep+0x1b8>)
 8005500:	edd3 6a00 	vldr	s13, [r3]
 8005504:	4858      	ldr	r0, [pc, #352]	@ (8005668 <PIDStep+0x1bc>)
 8005506:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 800566c <PIDStep+0x1c0>
 800550a:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8005670 <PIDStep+0x1c4>
 800550e:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8005674 <PIDStep+0x1c8>
 8005512:	eef0 1a66 	vmov.f32	s3, s13
 8005516:	eeb0 1a47 	vmov.f32	s2, s14
 800551a:	eef0 0a67 	vmov.f32	s1, s15
 800551e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005522:	f7ff fa15 	bl	8004950 <PID_Update>
 8005526:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 800552a:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <PIDStep+0x1cc>)
 800552c:	edd3 7a00 	vldr	s15, [r3]
 8005530:	4b52      	ldr	r3, [pc, #328]	@ (800567c <PIDStep+0x1d0>)
 8005532:	ed93 7a00 	vldr	s14, [r3]
 8005536:	4b52      	ldr	r3, [pc, #328]	@ (8005680 <PIDStep+0x1d4>)
 8005538:	edd3 6a00 	vldr	s13, [r3]
 800553c:	4851      	ldr	r0, [pc, #324]	@ (8005684 <PIDStep+0x1d8>)
 800553e:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 800566c <PIDStep+0x1c0>
 8005542:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8005670 <PIDStep+0x1c4>
 8005546:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8005674 <PIDStep+0x1c8>
 800554a:	eef0 1a66 	vmov.f32	s3, s13
 800554e:	eeb0 1a47 	vmov.f32	s2, s14
 8005552:	eef0 0a67 	vmov.f32	s1, s15
 8005556:	ed97 0a02 	vldr	s0, [r7, #8]
 800555a:	f7ff f9f9 	bl	8004950 <PID_Update>
 800555e:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8005562:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <PIDStep+0x1dc>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	edd7 7a01 	vldr	s15, [r7, #4]
 800556c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005570:	4b46      	ldr	r3, [pc, #280]	@ (800568c <PIDStep+0x1e0>)
 8005572:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8005576:	4b46      	ldr	r3, [pc, #280]	@ (8005690 <PIDStep+0x1e4>)
 8005578:	ed93 7a00 	vldr	s14, [r3]
 800557c:	edd7 7a00 	vldr	s15, [r7]
 8005580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005584:	4b43      	ldr	r3, [pc, #268]	@ (8005694 <PIDStep+0x1e8>)
 8005586:	edc3 7a00 	vstr	s15, [r3]
	}

// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 800558a:	4b40      	ldr	r3, [pc, #256]	@ (800568c <PIDStep+0x1e0>)
 800558c:	ed93 7a00 	vldr	s14, [r3]
 8005590:	4b2f      	ldr	r3, [pc, #188]	@ (8005650 <PIDStep+0x1a4>)
 8005592:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559a:	4b3f      	ldr	r3, [pc, #252]	@ (8005698 <PIDStep+0x1ec>)
 800559c:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 80055a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <PIDStep+0x1ec>)
 80055a2:	edd3 7a00 	vldr	s15, [r3]
 80055a6:	4b3d      	ldr	r3, [pc, #244]	@ (800569c <PIDStep+0x1f0>)
 80055a8:	ed93 7a00 	vldr	s14, [r3]
 80055ac:	4b3c      	ldr	r3, [pc, #240]	@ (80056a0 <PIDStep+0x1f4>)
 80055ae:	edd3 6a00 	vldr	s13, [r3]
 80055b2:	4b3c      	ldr	r3, [pc, #240]	@ (80056a4 <PIDStep+0x1f8>)
 80055b4:	ed93 6a00 	vldr	s12, [r3]
 80055b8:	483b      	ldr	r0, [pc, #236]	@ (80056a8 <PIDStep+0x1fc>)
 80055ba:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 800566c <PIDStep+0x1c0>
 80055be:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8005670 <PIDStep+0x1c4>
 80055c2:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 80056ac <PIDStep+0x200>
 80055c6:	eef0 1a46 	vmov.f32	s3, s12
 80055ca:	eeb0 1a66 	vmov.f32	s2, s13
 80055ce:	eef0 0a47 	vmov.f32	s1, s14
 80055d2:	eeb0 0a67 	vmov.f32	s0, s15
 80055d6:	f7ff f9bb 	bl	8004950 <PID_Update>
 80055da:	eef0 7a40 	vmov.f32	s15, s0
 80055de:	4b34      	ldr	r3, [pc, #208]	@ (80056b0 <PIDStep+0x204>)
 80055e0:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 80055e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005694 <PIDStep+0x1e8>)
 80055e6:	ed93 7a00 	vldr	s14, [r3]
 80055ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <PIDStep+0x1ac>)
 80055ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80055f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f4:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <PIDStep+0x208>)
 80055f6:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 80055fa:	4b2e      	ldr	r3, [pc, #184]	@ (80056b4 <PIDStep+0x208>)
 80055fc:	edd3 7a00 	vldr	s15, [r3]
 8005600:	4b2d      	ldr	r3, [pc, #180]	@ (80056b8 <PIDStep+0x20c>)
 8005602:	ed93 7a00 	vldr	s14, [r3]
 8005606:	4b2d      	ldr	r3, [pc, #180]	@ (80056bc <PIDStep+0x210>)
 8005608:	edd3 6a00 	vldr	s13, [r3]
 800560c:	4b2c      	ldr	r3, [pc, #176]	@ (80056c0 <PIDStep+0x214>)
 800560e:	ed93 6a00 	vldr	s12, [r3]
 8005612:	482c      	ldr	r0, [pc, #176]	@ (80056c4 <PIDStep+0x218>)
 8005614:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 800566c <PIDStep+0x1c0>
 8005618:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8005670 <PIDStep+0x1c4>
 800561c:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 80056ac <PIDStep+0x200>
 8005620:	eef0 1a46 	vmov.f32	s3, s12
 8005624:	eeb0 1a66 	vmov.f32	s2, s13
 8005628:	eef0 0a47 	vmov.f32	s1, s14
 800562c:	eeb0 0a67 	vmov.f32	s0, s15
 8005630:	f7ff f98e 	bl	8004950 <PID_Update>
 8005634:	eef0 7a40 	vmov.f32	s15, s0
 8005638:	4b23      	ldr	r3, [pc, #140]	@ (80056c8 <PIDStep+0x21c>)
 800563a:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001428 	.word	0x20001428
 800564c:	20000b94 	.word	0x20000b94
 8005650:	20000af8 	.word	0x20000af8
 8005654:	20000b98 	.word	0x20000b98
 8005658:	20000b38 	.word	0x20000b38
 800565c:	2000020c 	.word	0x2000020c
 8005660:	20000210 	.word	0x20000210
 8005664:	20000214 	.word	0x20000214
 8005668:	20000bf8 	.word	0x20000bf8
 800566c:	42c80000 	.word	0x42c80000
 8005670:	c2c80000 	.word	0xc2c80000
 8005674:	3c23d70a 	.word	0x3c23d70a
 8005678:	20000220 	.word	0x20000220
 800567c:	20000224 	.word	0x20000224
 8005680:	20000228 	.word	0x20000228
 8005684:	20000c00 	.word	0x20000c00
 8005688:	20000ba4 	.word	0x20000ba4
 800568c:	2000142c 	.word	0x2000142c
 8005690:	20000ba8 	.word	0x20000ba8
 8005694:	20001430 	.word	0x20001430
 8005698:	20000bbc 	.word	0x20000bbc
 800569c:	20000200 	.word	0x20000200
 80056a0:	20000204 	.word	0x20000204
 80056a4:	20000208 	.word	0x20000208
 80056a8:	20000c08 	.word	0x20000c08
 80056ac:	3a83126f 	.word	0x3a83126f
 80056b0:	20000bc4 	.word	0x20000bc4
 80056b4:	20000bc0 	.word	0x20000bc0
 80056b8:	20000218 	.word	0x20000218
 80056bc:	2000021c 	.word	0x2000021c
 80056c0:	20000c18 	.word	0x20000c18
 80056c4:	20000c10 	.word	0x20000c10
 80056c8:	20000bc8 	.word	0x20000bc8

080056cc <ToleranceCheck>:

int ToleranceCheck(void) {
 80056cc:	b5b0      	push	{r4, r5, r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 80056d0:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <ToleranceCheck+0x98>)
 80056d2:	ed93 7a00 	vldr	s14, [r3]
 80056d6:	4b24      	ldr	r3, [pc, #144]	@ (8005768 <ToleranceCheck+0x9c>)
 80056d8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80056dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e0:	eef0 7ae7 	vabs.f32	s15, s15
 80056e4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800576c <ToleranceCheck+0xa0>
 80056e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d52c      	bpl.n	800574c <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 80056f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <ToleranceCheck+0xa4>)
 80056f4:	ed93 7a00 	vldr	s14, [r3]
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <ToleranceCheck+0xa8>)
 80056fa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80056fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005702:	eef0 7ae7 	vabs.f32	s15, s15
 8005706:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005778 <ToleranceCheck+0xac>
 800570a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	d51b      	bpl.n	800574c <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <ToleranceCheck+0xb0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	4313      	orrs	r3, r2
 800571c:	d107      	bne.n	800572e <ToleranceCheck+0x62>
			lock_timer_us = micros();
 800571e:	f7ff f8fd 	bl	800491c <micros>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4915      	ldr	r1, [pc, #84]	@ (800577c <ToleranceCheck+0xb0>)
 8005728:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 800572c:	e016      	b.n	800575c <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800572e:	f7ff f8f5 	bl	800491c <micros>
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <ToleranceCheck+0xb0>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	1a84      	subs	r4, r0, r2
 800573a:	eb61 0503 	sbc.w	r5, r1, r3
 800573e:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <ToleranceCheck+0xb4>)
 8005740:	429c      	cmp	r4, r3
 8005742:	f175 0300 	sbcs.w	r3, r5, #0
 8005746:	d309      	bcc.n	800575c <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8005748:	2301      	movs	r3, #1
 800574a:	e009      	b.n	8005760 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 800574c:	490b      	ldr	r1, [pc, #44]	@ (800577c <ToleranceCheck+0xb0>)
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9c1 2300 	strd	r2, r3, [r1]
 800575a:	e000      	b.n	800575e <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 800575c:	bf00      	nop
	}

	return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	bdb0      	pop	{r4, r5, r7, pc}
 8005764:	20000b94 	.word	0x20000b94
 8005768:	20000af8 	.word	0x20000af8
 800576c:	3bded289 	.word	0x3bded289
 8005770:	20000b98 	.word	0x20000b98
 8005774:	20000b38 	.word	0x20000b38
 8005778:	3ecccccd 	.word	0x3ecccccd
 800577c:	20001438 	.word	0x20001438
 8005780:	000f4240 	.word	0x000f4240
 8005784:	00000000 	.word	0x00000000

08005788 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 800578e:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <CascadeControl_Step+0xd8>)
 8005790:	ed93 7a00 	vldr	s14, [r3]
 8005794:	4b33      	ldr	r3, [pc, #204]	@ (8005864 <CascadeControl_Step+0xdc>)
 8005796:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800579a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579e:	4b32      	ldr	r3, [pc, #200]	@ (8005868 <CascadeControl_Step+0xe0>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80057a4:	4b31      	ldr	r3, [pc, #196]	@ (800586c <CascadeControl_Step+0xe4>)
 80057a6:	ed93 7a00 	vldr	s14, [r3]
 80057aa:	4b31      	ldr	r3, [pc, #196]	@ (8005870 <CascadeControl_Step+0xe8>)
 80057ac:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005874 <CascadeControl_Step+0xec>)
 80057b6:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 80057ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005868 <CascadeControl_Step+0xe0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fe8e 	bl	80004e0 <__aeabi_f2d>
 80057c4:	a324      	add	r3, pc, #144	@ (adr r3, 8005858 <CascadeControl_Step+0xd0>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa fee1 	bl	8000590 <__aeabi_dmul>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4610      	mov	r0, r2
 80057d4:	4619      	mov	r1, r3
 80057d6:	f7fb f995 	bl	8000b04 <__aeabi_d2f>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a26      	ldr	r2, [pc, #152]	@ (8005878 <CascadeControl_Step+0xf0>)
 80057de:	6013      	str	r3, [r2, #0]

// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 80057e0:	f7ff f89c 	bl	800491c <micros>
 80057e4:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 80057e8:	4b24      	ldr	r3, [pc, #144]	@ (800587c <CascadeControl_Step+0xf4>)
 80057ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f2:	4290      	cmp	r0, r2
 80057f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80057f8:	d301      	bcc.n	80057fe <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e026      	b.n	800584c <CascadeControl_Step+0xc4>
	}
// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 80057fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005802:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8005806:	f143 0500 	adc.w	r5, r3, #0
 800580a:	4b1c      	ldr	r3, [pc, #112]	@ (800587c <CascadeControl_Step+0xf4>)
 800580c:	e9c3 4500 	strd	r4, r5, [r3]

// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 8005810:	f7ff fdb2 	bl	8005378 <TrapezoidStep>

// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 8005814:	f7ff fe4a 	bl	80054ac <PIDStep>

// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 8005818:	f7ff fbfe 	bl	8005018 <Workspace_limit>
	Set_Motor(0, R_PWM);
 800581c:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <CascadeControl_Step+0xf8>)
 800581e:	edd3 7a00 	vldr	s15, [r3]
 8005822:	eeb0 0a67 	vmov.f32	s0, s15
 8005826:	2000      	movs	r0, #0
 8005828:	f7ff fb2c 	bl	8004e84 <Set_Motor>
	Set_Motor(1, P_PWM);
 800582c:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <CascadeControl_Step+0xfc>)
 800582e:	edd3 7a00 	vldr	s15, [r3]
 8005832:	eeb0 0a67 	vmov.f32	s0, s15
 8005836:	2001      	movs	r0, #1
 8005838:	f7ff fb24 	bl	8004e84 <Set_Motor>

// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 800583c:	f7ff ff46 	bl	80056cc <ToleranceCheck>
 8005840:	4603      	mov	r3, r0
 8005842:	b2da      	uxtb	r2, r3
 8005844:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <CascadeControl_Step+0x100>)
 8005846:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8005848:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <CascadeControl_Step+0x100>)
 800584a:	781b      	ldrb	r3, [r3, #0]
//	return ToleranceCheck();
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bdb0      	pop	{r4, r5, r7, pc}
 8005854:	f3af 8000 	nop.w
 8005858:	1a63c1f8 	.word	0x1a63c1f8
 800585c:	404ca5dc 	.word	0x404ca5dc
 8005860:	20000b94 	.word	0x20000b94
 8005864:	20000af8 	.word	0x20000af8
 8005868:	20000bb4 	.word	0x20000bb4
 800586c:	20000b98 	.word	0x20000b98
 8005870:	20000b38 	.word	0x20000b38
 8005874:	20000bb8 	.word	0x20000bb8
 8005878:	20000aac 	.word	0x20000aac
 800587c:	20001440 	.word	0x20001440
 8005880:	20000bc4 	.word	0x20000bc4
 8005884:	20000bc8 	.word	0x20000bc8
 8005888:	20001338 	.word	0x20001338

0800588c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005890:	b672      	cpsid	i
}
 8005892:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <Error_Handler+0x8>

08005898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800589e:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <HAL_MspInit+0x44>)
 80058a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a2:	4a0e      	ldr	r2, [pc, #56]	@ (80058dc <HAL_MspInit+0x44>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <HAL_MspInit+0x44>)
 80058ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <HAL_MspInit+0x44>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ba:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <HAL_MspInit+0x44>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c2:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <HAL_MspInit+0x44>)
 80058c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80058ce:	f001 fa97 	bl	8006e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000

080058e0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	@ 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e8:	f107 031c 	add.w	r3, r7, #28
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a32      	ldr	r2, [pc, #200]	@ (80059c8 <HAL_TIM_IC_MspInit+0xe8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d130      	bne.n	8005964 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005902:	4b32      	ldr	r3, [pc, #200]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005906:	4a31      	ldr	r2, [pc, #196]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005908:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800590c:	6613      	str	r3, [r2, #96]	@ 0x60
 800590e:	4b2f      	ldr	r3, [pc, #188]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800591a:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 800591c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591e:	4a2b      	ldr	r2, [pc, #172]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005920:	f043 0304 	orr.w	r3, r3, #4
 8005924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005926:	4b29      	ldr	r3, [pc, #164]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005932:	2302      	movs	r3, #2
 8005934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005936:	2302      	movs	r3, #2
 8005938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593e:	2300      	movs	r3, #0
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005942:	2302      	movs	r3, #2
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005946:	f107 031c 	add.w	r3, r7, #28
 800594a:	4619      	mov	r1, r3
 800594c:	4820      	ldr	r0, [pc, #128]	@ (80059d0 <HAL_TIM_IC_MspInit+0xf0>)
 800594e:	f000 ffe9 	bl	8006924 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005952:	2200      	movs	r2, #0
 8005954:	2100      	movs	r1, #0
 8005956:	2019      	movs	r0, #25
 8005958:	f000 fc7d 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800595c:	2019      	movs	r0, #25
 800595e:	f000 fc94 	bl	800628a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005962:	e02d      	b.n	80059c0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596c:	d128      	bne.n	80059c0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800596e:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6593      	str	r3, [r2, #88]	@ 0x58
 800597a:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005986:	4b11      	ldr	r3, [pc, #68]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598a:	4a10      	ldr	r2, [pc, #64]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <HAL_TIM_IC_MspInit+0xec>)
 8005994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800599e:	2301      	movs	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a2:	2302      	movs	r3, #2
 80059a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059aa:	2300      	movs	r3, #0
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059ae:	2301      	movs	r3, #1
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b2:	f107 031c 	add.w	r3, r7, #28
 80059b6:	4619      	mov	r1, r3
 80059b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059bc:	f000 ffb2 	bl	8006924 <HAL_GPIO_Init>
}
 80059c0:	bf00      	nop
 80059c2:	3730      	adds	r7, #48	@ 0x30
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40021000 	.word	0x40021000
 80059d0:	48000800 	.word	0x48000800

080059d4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	@ 0x30
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059dc:	f107 031c 	add.w	r3, r7, #28
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d130      	bne.n	8005a58 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059f6:	4b37      	ldr	r3, [pc, #220]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fa:	4a36      	ldr	r2, [pc, #216]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a02:	4b34      	ldr	r3, [pc, #208]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a12:	4a30      	ldr	r2, [pc, #192]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005a26:	2330      	movs	r3, #48	@ 0x30
 8005a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a32:	2300      	movs	r3, #0
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a36:	2302      	movs	r3, #2
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3a:	f107 031c 	add.w	r3, r7, #28
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4825      	ldr	r0, [pc, #148]	@ (8005ad8 <HAL_TIM_Encoder_MspInit+0x104>)
 8005a42:	f000 ff6f 	bl	8006924 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	201d      	movs	r0, #29
 8005a4c:	f000 fc03 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a50:	201d      	movs	r0, #29
 8005a52:	f000 fc1a 	bl	800628a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005a56:	e036      	b.n	8005ac6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005adc <HAL_TIM_Encoder_MspInit+0x108>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d131      	bne.n	8005ac6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a62:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a66:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a68:	f043 0304 	orr.w	r3, r3, #4
 8005a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7a:	4b16      	ldr	r3, [pc, #88]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7e:	4a15      	ldr	r2, [pc, #84]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a86:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005a92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005aa4:	230a      	movs	r3, #10
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	4619      	mov	r1, r3
 8005aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ab2:	f000 ff37 	bl	8006924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	201e      	movs	r0, #30
 8005abc:	f000 fbcb 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005ac0:	201e      	movs	r0, #30
 8005ac2:	f000 fbe2 	bl	800628a <HAL_NVIC_EnableIRQ>
}
 8005ac6:	bf00      	nop
 8005ac8:	3730      	adds	r7, #48	@ 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	48000400 	.word	0x48000400
 8005adc:	40000800 	.word	0x40000800

08005ae0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d114      	bne.n	8005b1c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005af2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005afe:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	2032      	movs	r0, #50	@ 0x32
 8005b10:	f000 fba1 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005b14:	2032      	movs	r0, #50	@ 0x32
 8005b16:	f000 fbb8 	bl	800628a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005b1a:	e03c      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a21      	ldr	r2, [pc, #132]	@ (8005ba8 <HAL_TIM_Base_MspInit+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10c      	bne.n	8005b40 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
}
 8005b3e:	e02a      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a19      	ldr	r2, [pc, #100]	@ (8005bac <HAL_TIM_Base_MspInit+0xcc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10c      	bne.n	8005b64 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005b4a:	4b16      	ldr	r3, [pc, #88]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	e018      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a11      	ldr	r2, [pc, #68]	@ (8005bb0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d113      	bne.n	8005b96 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	2019      	movs	r0, #25
 8005b8c:	f000 fb63 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b90:	2019      	movs	r0, #25
 8005b92:	f000 fb7a 	bl	800628a <HAL_NVIC_EnableIRQ>
}
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400

08005bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	@ 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	60da      	str	r2, [r3, #12]
 8005bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	@ (8005c60 <HAL_TIM_MspPostInit+0xac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d11d      	bne.n	8005c12 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bd6:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bda:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005be2:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005bee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005c00:	2304      	movs	r3, #4
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4817      	ldr	r0, [pc, #92]	@ (8005c68 <HAL_TIM_MspPostInit+0xb4>)
 8005c0c:	f000 fe8a 	bl	8006924 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005c10:	e021      	b.n	8005c56 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a15      	ldr	r2, [pc, #84]	@ (8005c6c <HAL_TIM_MspPostInit+0xb8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d11c      	bne.n	8005c56 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c1c:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c20:	4a10      	ldr	r2, [pc, #64]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c28:	4b0e      	ldr	r3, [pc, #56]	@ (8005c64 <HAL_TIM_MspPostInit+0xb0>)
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005c34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c42:	2300      	movs	r3, #0
 8005c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005c46:	2301      	movs	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4807      	ldr	r0, [pc, #28]	@ (8005c70 <HAL_TIM_MspPostInit+0xbc>)
 8005c52:	f000 fe67 	bl	8006924 <HAL_GPIO_Init>
}
 8005c56:	bf00      	nop
 8005c58:	3728      	adds	r7, #40	@ 0x28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40021000 	.word	0x40021000
 8005c68:	48000800 	.word	0x48000800
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	48000400 	.word	0x48000400

08005c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b09e      	sub	sp, #120	@ 0x78
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	2254      	movs	r2, #84	@ 0x54
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f006 fcc7 	bl	800c628 <memset>
  if(huart->Instance==USART2)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8005dd4 <HAL_UART_MspInit+0x160>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f040 8092 	bne.w	8005dca <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cae:	f107 0310 	add.w	r3, r7, #16
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fde2 	bl	800787c <HAL_RCCEx_PeriphCLKConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005cbe:	f7ff fde5 	bl	800588c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cc2:	4b45      	ldr	r3, [pc, #276]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc6:	4a44      	ldr	r2, [pc, #272]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cce:	4b42      	ldr	r3, [pc, #264]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cda:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cde:	4a3e      	ldr	r2, [pc, #248]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd8 <HAL_UART_MspInit+0x164>)
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d02:	2307      	movs	r3, #7
 8005d04:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d10:	f000 fe08 	bl	8006924 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d16:	4a32      	ldr	r2, [pc, #200]	@ (8005de0 <HAL_UART_MspInit+0x16c>)
 8005d18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005d1a:	4b30      	ldr	r3, [pc, #192]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d1c:	221a      	movs	r2, #26
 8005d1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d20:	4b2e      	ldr	r3, [pc, #184]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d26:	4b2d      	ldr	r3, [pc, #180]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d32:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d38:	4b28      	ldr	r3, [pc, #160]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005d3e:	4b27      	ldr	r3, [pc, #156]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d44:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d4a:	4824      	ldr	r0, [pc, #144]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d4c:	f000 fab8 	bl	80062c0 <HAL_DMA_Init>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005d56:	f7ff fd99 	bl	800588c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005d62:	4a1e      	ldr	r2, [pc, #120]	@ (8005ddc <HAL_UART_MspInit+0x168>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005de8 <HAL_UART_MspInit+0x174>)
 8005d6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d70:	221b      	movs	r2, #27
 8005d72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d74:	4b1b      	ldr	r3, [pc, #108]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d76:	2210      	movs	r2, #16
 8005d78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d80:	4b18      	ldr	r3, [pc, #96]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d82:	2280      	movs	r2, #128	@ 0x80
 8005d84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d86:	4b17      	ldr	r3, [pc, #92]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d8c:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d92:	4b14      	ldr	r3, [pc, #80]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d98:	4b12      	ldr	r3, [pc, #72]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d9e:	4811      	ldr	r0, [pc, #68]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005da0:	f000 fa8e 	bl	80062c0 <HAL_DMA_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005daa:	f7ff fd6f 	bl	800588c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a0c      	ldr	r2, [pc, #48]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005db2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005db4:	4a0b      	ldr	r2, [pc, #44]	@ (8005de4 <HAL_UART_MspInit+0x170>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	2026      	movs	r0, #38	@ 0x26
 8005dc0:	f000 fa49 	bl	8006256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dc4:	2026      	movs	r0, #38	@ 0x26
 8005dc6:	f000 fa60 	bl	800628a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005dca:	bf00      	nop
 8005dcc:	3778      	adds	r7, #120	@ 0x78
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40004400 	.word	0x40004400
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	200009dc 	.word	0x200009dc
 8005de0:	40020008 	.word	0x40020008
 8005de4:	20000a3c 	.word	0x20000a3c
 8005de8:	4002001c 	.word	0x4002001c

08005dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <NMI_Handler+0x4>

08005df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <HardFault_Handler+0x4>

08005dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <MemManage_Handler+0x4>

08005e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <BusFault_Handler+0x4>

08005e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <UsageFault_Handler+0x4>

08005e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e42:	f000 f90f 	bl	8006064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f000 ff1a 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005e5c:	2004      	movs	r0, #4
 8005e5e:	f000 ff13 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005e6a:	2008      	movs	r0, #8
 8005e6c:	f000 ff0c 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005e78:	4802      	ldr	r0, [pc, #8]	@ (8005e84 <DMA1_Channel1_IRQHandler+0x10>)
 8005e7a:	f000 fc04 	bl	8006686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	200009dc 	.word	0x200009dc

08005e88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005e8c:	4802      	ldr	r0, [pc, #8]	@ (8005e98 <DMA1_Channel2_IRQHandler+0x10>)
 8005e8e:	f000 fbfa 	bl	8006686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000a3c 	.word	0x20000a3c

08005e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005ea0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005ea4:	f000 fef0 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005ea8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005eac:	f000 feec 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005eb8:	4803      	ldr	r0, [pc, #12]	@ (8005ec8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005eba:	f002 fd99 	bl	80089f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005ebe:	4803      	ldr	r0, [pc, #12]	@ (8005ecc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005ec0:	f002 fd96 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200002b0 	.word	0x200002b0
 8005ecc:	20000844 	.word	0x20000844

08005ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ed4:	4802      	ldr	r0, [pc, #8]	@ (8005ee0 <TIM3_IRQHandler+0x10>)
 8005ed6:	f002 fd8b 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000448 	.word	0x20000448

08005ee4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005ee8:	4802      	ldr	r0, [pc, #8]	@ (8005ef4 <TIM4_IRQHandler+0x10>)
 8005eea:	f002 fd81 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000514 	.word	0x20000514

08005ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005efc:	4802      	ldr	r0, [pc, #8]	@ (8005f08 <USART2_IRQHandler+0x10>)
 8005efe:	f004 fe33 	bl	800ab68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000910 	.word	0x20000910

08005f0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005f10:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005f14:	f000 feb8 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005f18:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005f1c:	f000 feb4 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005f20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005f24:	f000 feb0 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005f28:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005f2c:	f000 feac 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005f38:	4802      	ldr	r0, [pc, #8]	@ (8005f44 <TIM5_IRQHandler+0x10>)
 8005f3a:	f002 fd59 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200005e0 	.word	0x200005e0

08005f48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <SystemInit+0x20>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f52:	4a05      	ldr	r2, [pc, #20]	@ (8005f68 <SystemInit+0x20>)
 8005f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f5c:	bf00      	nop
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f6c:	480d      	ldr	r0, [pc, #52]	@ (8005fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f70:	f7ff ffea 	bl	8005f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f74:	480c      	ldr	r0, [pc, #48]	@ (8005fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f76:	490d      	ldr	r1, [pc, #52]	@ (8005fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f78:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb0 <LoopForever+0xe>)
  movs r3, #0
 8005f7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f7c:	e002      	b.n	8005f84 <LoopCopyDataInit>

08005f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f82:	3304      	adds	r3, #4

08005f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f88:	d3f9      	bcc.n	8005f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8005fb8 <LoopForever+0x16>)
  movs r3, #0
 8005f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f90:	e001      	b.n	8005f96 <LoopFillZerobss>

08005f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f94:	3204      	adds	r2, #4

08005f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f98:	d3fb      	bcc.n	8005f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f9a:	f006 fb53 	bl	800c644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f9e:	f7fb ff4b 	bl	8001e38 <main>

08005fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8005fa2:	e7fe      	b.n	8005fa2 <LoopForever>
  ldr   r0, =_estack
 8005fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fac:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8005fb0:	08023b40 	.word	0x08023b40
  ldr r2, =_sbss
 8005fb4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005fb8:	20001584 	.word	0x20001584

08005fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fbc:	e7fe      	b.n	8005fbc <ADC1_2_IRQHandler>

08005fbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fc8:	2003      	movs	r0, #3
 8005fca:	f000 f939 	bl	8006240 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f000 f80e 	bl	8005ff0 <HAL_InitTick>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	71fb      	strb	r3, [r7, #7]
 8005fde:	e001      	b.n	8005fe4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fe0:	f7ff fc5a 	bl	8005898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fe4:	79fb      	ldrb	r3, [r7, #7]

}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005ffc:	4b16      	ldr	r3, [pc, #88]	@ (8006058 <HAL_InitTick+0x68>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d022      	beq.n	800604a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006004:	4b15      	ldr	r3, [pc, #84]	@ (800605c <HAL_InitTick+0x6c>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <HAL_InitTick+0x68>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006010:	fbb1 f3f3 	udiv	r3, r1, r3
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f944 	bl	80062a6 <HAL_SYSTICK_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d809      	bhi.n	800603e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800602a:	2200      	movs	r2, #0
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	f000 f910 	bl	8006256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006036:	4a0a      	ldr	r2, [pc, #40]	@ (8006060 <HAL_InitTick+0x70>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e007      	b.n	800604e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e004      	b.n	800604e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	e001      	b.n	800604e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000238 	.word	0x20000238
 800605c:	20000230 	.word	0x20000230
 8006060:	20000234 	.word	0x20000234

08006064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006068:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <HAL_IncTick+0x1c>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <HAL_IncTick+0x20>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4413      	add	r3, r2
 8006072:	4a03      	ldr	r2, [pc, #12]	@ (8006080 <HAL_IncTick+0x1c>)
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	20001448 	.word	0x20001448
 8006084:	20000238 	.word	0x20000238

08006088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return uwTick;
 800608c:	4b03      	ldr	r3, [pc, #12]	@ (800609c <HAL_GetTick+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20001448 	.word	0x20001448

080060a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060b0:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060bc:	4013      	ands	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060d2:	4a04      	ldr	r2, [pc, #16]	@ (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	60d3      	str	r3, [r2, #12]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <__NVIC_GetPriorityGrouping+0x18>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 0307 	and.w	r3, r3, #7
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000ed00 	.word	0xe000ed00

08006104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	db0b      	blt.n	800612e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 021f 	and.w	r2, r3, #31
 800611c:	4907      	ldr	r1, [pc, #28]	@ (800613c <__NVIC_EnableIRQ+0x38>)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2001      	movs	r0, #1
 8006126:	fa00 f202 	lsl.w	r2, r0, r2
 800612a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000e100 	.word	0xe000e100

08006140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800614c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db0a      	blt.n	800616a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	490c      	ldr	r1, [pc, #48]	@ (800618c <__NVIC_SetPriority+0x4c>)
 800615a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	440b      	add	r3, r1
 8006164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006168:	e00a      	b.n	8006180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4908      	ldr	r1, [pc, #32]	@ (8006190 <__NVIC_SetPriority+0x50>)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	3b04      	subs	r3, #4
 8006178:	0112      	lsls	r2, r2, #4
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	440b      	add	r3, r1
 800617e:	761a      	strb	r2, [r3, #24]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	e000e100 	.word	0xe000e100
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	@ 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f1c3 0307 	rsb	r3, r3, #7
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	bf28      	it	cs
 80061b2:	2304      	movcs	r3, #4
 80061b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d902      	bls.n	80061c4 <NVIC_EncodePriority+0x30>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3b03      	subs	r3, #3
 80061c2:	e000      	b.n	80061c6 <NVIC_EncodePriority+0x32>
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43da      	mvns	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	401a      	ands	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061dc:	f04f 31ff 	mov.w	r1, #4294967295
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	43d9      	mvns	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	4313      	orrs	r3, r2
         );
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3724      	adds	r7, #36	@ 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3b01      	subs	r3, #1
 8006208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800620c:	d301      	bcc.n	8006212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800620e:	2301      	movs	r3, #1
 8006210:	e00f      	b.n	8006232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006212:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <SysTick_Config+0x40>)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3b01      	subs	r3, #1
 8006218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800621a:	210f      	movs	r1, #15
 800621c:	f04f 30ff 	mov.w	r0, #4294967295
 8006220:	f7ff ff8e 	bl	8006140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006224:	4b05      	ldr	r3, [pc, #20]	@ (800623c <SysTick_Config+0x40>)
 8006226:	2200      	movs	r2, #0
 8006228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800622a:	4b04      	ldr	r3, [pc, #16]	@ (800623c <SysTick_Config+0x40>)
 800622c:	2207      	movs	r2, #7
 800622e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	e000e010 	.word	0xe000e010

08006240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff ff29 	bl	80060a0 <__NVIC_SetPriorityGrouping>
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	4603      	mov	r3, r0
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006264:	f7ff ff40 	bl	80060e8 <__NVIC_GetPriorityGrouping>
 8006268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	6978      	ldr	r0, [r7, #20]
 8006270:	f7ff ff90 	bl	8006194 <NVIC_EncodePriority>
 8006274:	4602      	mov	r2, r0
 8006276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff ff5f 	bl	8006140 <__NVIC_SetPriority>
}
 8006282:	bf00      	nop
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff ff33 	bl	8006104 <__NVIC_EnableIRQ>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff ffa4 	bl	80061fc <SysTick_Config>
 80062b4:	4603      	mov	r3, r0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e08d      	b.n	80063ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	4b47      	ldr	r3, [pc, #284]	@ (80063f8 <HAL_DMA_Init+0x138>)
 80062da:	429a      	cmp	r2, r3
 80062dc:	d80f      	bhi.n	80062fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <HAL_DMA_Init+0x13c>)
 80062e6:	4413      	add	r3, r2
 80062e8:	4a45      	ldr	r2, [pc, #276]	@ (8006400 <HAL_DMA_Init+0x140>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	009a      	lsls	r2, r3, #2
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a42      	ldr	r2, [pc, #264]	@ (8006404 <HAL_DMA_Init+0x144>)
 80062fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80062fc:	e00e      	b.n	800631c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	4b40      	ldr	r3, [pc, #256]	@ (8006408 <HAL_DMA_Init+0x148>)
 8006306:	4413      	add	r3, r2
 8006308:	4a3d      	ldr	r2, [pc, #244]	@ (8006400 <HAL_DMA_Init+0x140>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	009a      	lsls	r2, r3, #2
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a3c      	ldr	r2, [pc, #240]	@ (800640c <HAL_DMA_Init+0x14c>)
 800631a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800634c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa76 	bl	8006860 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800637c:	d102      	bne.n	8006384 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006398:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d010      	beq.n	80063c4 <HAL_DMA_Init+0x104>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d80c      	bhi.n	80063c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa96 	bl	80068dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	e008      	b.n	80063d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40020407 	.word	0x40020407
 80063fc:	bffdfff8 	.word	0xbffdfff8
 8006400:	cccccccd 	.word	0xcccccccd
 8006404:	40020000 	.word	0x40020000
 8006408:	bffdfbf8 	.word	0xbffdfbf8
 800640c:	40020400 	.word	0x40020400

08006410 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_DMA_Start_IT+0x20>
 800642c:	2302      	movs	r3, #2
 800642e:	e066      	b.n	80064fe <HAL_DMA_Start_IT+0xee>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d155      	bne.n	80064f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f9bb 	bl	80067e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 020e 	orr.w	r2, r2, #14
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e00f      	b.n	80064a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0204 	bic.w	r2, r2, #4
 8006496:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 020a 	orr.w	r2, r2, #10
 80064a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e005      	b.n	80064fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
 80064fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d005      	beq.n	800652a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2204      	movs	r2, #4
 8006522:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e037      	b.n	800659a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 020e 	bic.w	r2, r2, #14
 8006538:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006548:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f003 021f 	and.w	r2, r3, #31
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f202 	lsl.w	r2, r1, r2
 800656c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006576:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800658e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006598:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d00d      	beq.n	80065ec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2204      	movs	r2, #4
 80065d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
 80065ea:	e047      	b.n	800667c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 020e 	bic.w	r2, r2, #14
 80065fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800661a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006620:	f003 021f 	and.w	r2, r3, #31
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	2101      	movs	r1, #1
 800662a:	fa01 f202 	lsl.w	r2, r1, r2
 800662e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006638:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006650:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800665a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
    }
  }
  return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2204      	movs	r2, #4
 80066a8:	409a      	lsls	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d026      	beq.n	8006700 <HAL_DMA_IRQHandler+0x7a>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d021      	beq.n	8006700 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d107      	bne.n	80066da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0204 	bic.w	r2, r2, #4
 80066d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f003 021f 	and.w	r2, r3, #31
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2104      	movs	r1, #4
 80066e8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d071      	beq.n	80067da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066fe:	e06c      	b.n	80067da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2202      	movs	r2, #2
 800670a:	409a      	lsls	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d02e      	beq.n	8006772 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d029      	beq.n	8006772 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 020a 	bic.w	r2, r2, #10
 800673a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006748:	f003 021f 	and.w	r2, r3, #31
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	2102      	movs	r1, #2
 8006752:	fa01 f202 	lsl.w	r2, r1, r2
 8006756:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d038      	beq.n	80067da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006770:	e033      	b.n	80067da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2208      	movs	r2, #8
 800677c:	409a      	lsls	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02a      	beq.n	80067dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d025      	beq.n	80067dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 020e 	bic.w	r2, r2, #14
 800679e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a4:	f003 021f 	and.w	r2, r3, #31
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f202 	lsl.w	r2, r1, r2
 80067b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
}
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	f003 021f 	and.w	r2, r3, #31
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	2101      	movs	r1, #1
 800681c:	fa01 f202 	lsl.w	r2, r1, r2
 8006820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b10      	cmp	r3, #16
 8006830:	d108      	bne.n	8006844 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006842:	e007      	b.n	8006854 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	4b16      	ldr	r3, [pc, #88]	@ (80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d802      	bhi.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006874:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e001      	b.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800687c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	3b08      	subs	r3, #8
 800688a:	4a12      	ldr	r2, [pc, #72]	@ (80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	009a      	lsls	r2, r3, #2
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a0b      	ldr	r2, [pc, #44]	@ (80068d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80068aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f003 031f 	and.w	r3, r3, #31
 80068b2:	2201      	movs	r2, #1
 80068b4:	409a      	lsls	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40020407 	.word	0x40020407
 80068cc:	40020800 	.word	0x40020800
 80068d0:	40020820 	.word	0x40020820
 80068d4:	cccccccd 	.word	0xcccccccd
 80068d8:	40020880 	.word	0x40020880

080068dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a08      	ldr	r2, [pc, #32]	@ (8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3b01      	subs	r3, #1
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2201      	movs	r2, #1
 800690a:	409a      	lsls	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	1000823f 	.word	0x1000823f
 8006920:	40020940 	.word	0x40020940

08006924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006932:	e15a      	b.n	8006bea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	2101      	movs	r1, #1
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	fa01 f303 	lsl.w	r3, r1, r3
 8006940:	4013      	ands	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 814c 	beq.w	8006be4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d005      	beq.n	8006964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006960:	2b02      	cmp	r3, #2
 8006962:	d130      	bne.n	80069c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	2203      	movs	r2, #3
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4013      	ands	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800699a:	2201      	movs	r2, #1
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43db      	mvns	r3, r3
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4013      	ands	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 0201 	and.w	r2, r3, #1
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d017      	beq.n	8006a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	2203      	movs	r2, #3
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	43db      	mvns	r3, r3
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4013      	ands	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d123      	bne.n	8006a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	08da      	lsrs	r2, r3, #3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3208      	adds	r2, #8
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	220f      	movs	r2, #15
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	08da      	lsrs	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3208      	adds	r2, #8
 8006a50:	6939      	ldr	r1, [r7, #16]
 8006a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	2203      	movs	r2, #3
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 0203 	and.w	r2, r3, #3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80a6 	beq.w	8006be4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a98:	4b5b      	ldr	r3, [pc, #364]	@ (8006c08 <HAL_GPIO_Init+0x2e4>)
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c08 <HAL_GPIO_Init+0x2e4>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8006aa4:	4b58      	ldr	r3, [pc, #352]	@ (8006c08 <HAL_GPIO_Init+0x2e4>)
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ab0:	4a56      	ldr	r2, [pc, #344]	@ (8006c0c <HAL_GPIO_Init+0x2e8>)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	089b      	lsrs	r3, r3, #2
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ada:	d01f      	beq.n	8006b1c <HAL_GPIO_Init+0x1f8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a4c      	ldr	r2, [pc, #304]	@ (8006c10 <HAL_GPIO_Init+0x2ec>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d019      	beq.n	8006b18 <HAL_GPIO_Init+0x1f4>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8006c14 <HAL_GPIO_Init+0x2f0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <HAL_GPIO_Init+0x1f0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a4a      	ldr	r2, [pc, #296]	@ (8006c18 <HAL_GPIO_Init+0x2f4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00d      	beq.n	8006b10 <HAL_GPIO_Init+0x1ec>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a49      	ldr	r2, [pc, #292]	@ (8006c1c <HAL_GPIO_Init+0x2f8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <HAL_GPIO_Init+0x1e8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a48      	ldr	r2, [pc, #288]	@ (8006c20 <HAL_GPIO_Init+0x2fc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d101      	bne.n	8006b08 <HAL_GPIO_Init+0x1e4>
 8006b04:	2305      	movs	r3, #5
 8006b06:	e00a      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b08:	2306      	movs	r3, #6
 8006b0a:	e008      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	e006      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b10:	2303      	movs	r3, #3
 8006b12:	e004      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e002      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <HAL_GPIO_Init+0x1fa>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	f002 0203 	and.w	r2, r2, #3
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4093      	lsls	r3, r2
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b2e:	4937      	ldr	r1, [pc, #220]	@ (8006c0c <HAL_GPIO_Init+0x2e8>)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	3302      	adds	r3, #2
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b3c:	4b39      	ldr	r3, [pc, #228]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b60:	4a30      	ldr	r2, [pc, #192]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b66:	4b2f      	ldr	r3, [pc, #188]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4013      	ands	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b8a:	4a26      	ldr	r2, [pc, #152]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b90:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bba:	4b1a      	ldr	r3, [pc, #104]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bde:	4a11      	ldr	r2, [pc, #68]	@ (8006c24 <HAL_GPIO_Init+0x300>)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3301      	adds	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f47f ae9d 	bne.w	8006934 <HAL_GPIO_Init+0x10>
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	48000400 	.word	0x48000400
 8006c14:	48000800 	.word	0x48000800
 8006c18:	48000c00 	.word	0x48000c00
 8006c1c:	48001000 	.word	0x48001000
 8006c20:	48001400 	.word	0x48001400
 8006c24:	40010400 	.word	0x40010400

08006c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	887b      	ldrh	r3, [r7, #2]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e001      	b.n	8006c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	807b      	strh	r3, [r7, #2]
 8006c64:	4613      	mov	r3, r2
 8006c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c68:	787b      	ldrb	r3, [r7, #1]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c6e:	887a      	ldrh	r2, [r7, #2]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c74:	e002      	b.n	8006c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c76:	887a      	ldrh	r2, [r7, #2]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c92:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d006      	beq.n	8006cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c9e:	4a05      	ldr	r2, [pc, #20]	@ (8006cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ca0:	88fb      	ldrh	r3, [r7, #6]
 8006ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd fd5a 	bl	8004760 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40010400 	.word	0x40010400

08006cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d141      	bne.n	8006d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd2:	d131      	bne.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cd4:	4b47      	ldr	r3, [pc, #284]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cda:	4a46      	ldr	r2, [pc, #280]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ce4:	4b43      	ldr	r3, [pc, #268]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cec:	4a41      	ldr	r2, [pc, #260]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cf4:	4b40      	ldr	r3, [pc, #256]	@ (8006df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2232      	movs	r2, #50	@ 0x32
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8006dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	0c9b      	lsrs	r3, r3, #18
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d0a:	e002      	b.n	8006d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d12:	4b38      	ldr	r3, [pc, #224]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1e:	d102      	bne.n	8006d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f2      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d26:	4b33      	ldr	r3, [pc, #204]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d32:	d158      	bne.n	8006de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e057      	b.n	8006de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d38:	4b2e      	ldr	r3, [pc, #184]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d48:	e04d      	b.n	8006de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d50:	d141      	bne.n	8006dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d52:	4b28      	ldr	r3, [pc, #160]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d5e:	d131      	bne.n	8006dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d60:	4b24      	ldr	r3, [pc, #144]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d66:	4a23      	ldr	r2, [pc, #140]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d70:	4b20      	ldr	r3, [pc, #128]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d78:	4a1e      	ldr	r2, [pc, #120]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d80:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2232      	movs	r2, #50	@ 0x32
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	0c9b      	lsrs	r3, r3, #18
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d96:	e002      	b.n	8006d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d9e:	4b15      	ldr	r3, [pc, #84]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006daa:	d102      	bne.n	8006db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f2      	bne.n	8006d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dbe:	d112      	bne.n	8006de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e011      	b.n	8006de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dca:	4a0a      	ldr	r2, [pc, #40]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006dd4:	e007      	b.n	8006de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006dd6:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006dde:	4a05      	ldr	r2, [pc, #20]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40007000 	.word	0x40007000
 8006df8:	20000230 	.word	0x20000230
 8006dfc:	431bde83 	.word	0x431bde83

08006e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e04:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a04      	ldr	r2, [pc, #16]	@ (8006e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e0e:	6093      	str	r3, [r2, #8]
}
 8006e10:	bf00      	nop
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40007000 	.word	0x40007000

08006e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e2fe      	b.n	8007430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d075      	beq.n	8006f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3e:	4b97      	ldr	r3, [pc, #604]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e48:	4b94      	ldr	r3, [pc, #592]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d102      	bne.n	8006e5e <HAL_RCC_OscConfig+0x3e>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d002      	beq.n	8006e64 <HAL_RCC_OscConfig+0x44>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d10b      	bne.n	8006e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	4b8d      	ldr	r3, [pc, #564]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d05b      	beq.n	8006f28 <HAL_RCC_OscConfig+0x108>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d157      	bne.n	8006f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e2d9      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e84:	d106      	bne.n	8006e94 <HAL_RCC_OscConfig+0x74>
 8006e86:	4b85      	ldr	r3, [pc, #532]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a84      	ldr	r2, [pc, #528]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e01d      	b.n	8006ed0 <HAL_RCC_OscConfig+0xb0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x98>
 8006e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7b      	ldr	r2, [pc, #492]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e00b      	b.n	8006ed0 <HAL_RCC_OscConfig+0xb0>
 8006eb8:	4b78      	ldr	r3, [pc, #480]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a77      	ldr	r2, [pc, #476]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	4b75      	ldr	r3, [pc, #468]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a74      	ldr	r2, [pc, #464]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d013      	beq.n	8006f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7ff f8d6 	bl	8006088 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ee0:	f7ff f8d2 	bl	8006088 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b64      	cmp	r3, #100	@ 0x64
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e29e      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0xc0>
 8006efe:	e014      	b.n	8006f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f00:	f7ff f8c2 	bl	8006088 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f08:	f7ff f8be 	bl	8006088 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b64      	cmp	r3, #100	@ 0x64
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e28a      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f1a:	4b60      	ldr	r3, [pc, #384]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f0      	bne.n	8006f08 <HAL_RCC_OscConfig+0xe8>
 8006f26:	e000      	b.n	8006f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d075      	beq.n	8007022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f36:	4b59      	ldr	r3, [pc, #356]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 030c 	and.w	r3, r3, #12
 8006f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f40:	4b56      	ldr	r3, [pc, #344]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b0c      	cmp	r3, #12
 8006f4e:	d102      	bne.n	8006f56 <HAL_RCC_OscConfig+0x136>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d002      	beq.n	8006f5c <HAL_RCC_OscConfig+0x13c>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d11f      	bne.n	8006f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_OscConfig+0x154>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e25d      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f74:	4b49      	ldr	r3, [pc, #292]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	4946      	ldr	r1, [pc, #280]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f88:	4b45      	ldr	r3, [pc, #276]	@ (80070a0 <HAL_RCC_OscConfig+0x280>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff f82f 	bl	8005ff0 <HAL_InitTick>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d043      	beq.n	8007020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e249      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d023      	beq.n	8006fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7ff f86a 	bl	8006088 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb8:	f7ff f866 	bl	8006088 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e232      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fca:	4b34      	ldr	r3, [pc, #208]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd6:	4b31      	ldr	r3, [pc, #196]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	492d      	ldr	r1, [pc, #180]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	604b      	str	r3, [r1, #4]
 8006fea:	e01a      	b.n	8007022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fec:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7ff f846 	bl	8006088 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007000:	f7ff f842 	bl	8006088 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e20e      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007012:	4b22      	ldr	r3, [pc, #136]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f0      	bne.n	8007000 <HAL_RCC_OscConfig+0x1e0>
 800701e:	e000      	b.n	8007022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d041      	beq.n	80070b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01c      	beq.n	8007070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007036:	4b19      	ldr	r3, [pc, #100]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8007038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800703c:	4a17      	ldr	r2, [pc, #92]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007046:	f7ff f81f 	bl	8006088 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800704e:	f7ff f81b 	bl	8006088 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e1e7      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007060:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8007062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ef      	beq.n	800704e <HAL_RCC_OscConfig+0x22e>
 800706e:	e020      	b.n	80070b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007070:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8007072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007076:	4a09      	ldr	r2, [pc, #36]	@ (800709c <HAL_RCC_OscConfig+0x27c>)
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007080:	f7ff f802 	bl	8006088 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007086:	e00d      	b.n	80070a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007088:	f7fe fffe 	bl	8006088 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d906      	bls.n	80070a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e1ca      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
 800709a:	bf00      	nop
 800709c:	40021000 	.word	0x40021000
 80070a0:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070a4:	4b8c      	ldr	r3, [pc, #560]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80070a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1ea      	bne.n	8007088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a6 	beq.w	800720c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c0:	2300      	movs	r3, #0
 80070c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070c4:	4b84      	ldr	r3, [pc, #528]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80070c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_OscConfig+0x2b4>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <HAL_RCC_OscConfig+0x2b6>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070da:	4b7f      	ldr	r3, [pc, #508]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070de:	4a7e      	ldr	r2, [pc, #504]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e6:	4b7c      	ldr	r3, [pc, #496]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070f2:	2301      	movs	r3, #1
 80070f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070f6:	4b79      	ldr	r3, [pc, #484]	@ (80072dc <HAL_RCC_OscConfig+0x4bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d118      	bne.n	8007134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007102:	4b76      	ldr	r3, [pc, #472]	@ (80072dc <HAL_RCC_OscConfig+0x4bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a75      	ldr	r2, [pc, #468]	@ (80072dc <HAL_RCC_OscConfig+0x4bc>)
 8007108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800710c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800710e:	f7fe ffbb 	bl	8006088 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007116:	f7fe ffb7 	bl	8006088 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e183      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007128:	4b6c      	ldr	r3, [pc, #432]	@ (80072dc <HAL_RCC_OscConfig+0x4bc>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0f0      	beq.n	8007116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d108      	bne.n	800714e <HAL_RCC_OscConfig+0x32e>
 800713c:	4b66      	ldr	r3, [pc, #408]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800713e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007142:	4a65      	ldr	r2, [pc, #404]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800714c:	e024      	b.n	8007198 <HAL_RCC_OscConfig+0x378>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d110      	bne.n	8007178 <HAL_RCC_OscConfig+0x358>
 8007156:	4b60      	ldr	r3, [pc, #384]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800715e:	f043 0304 	orr.w	r3, r3, #4
 8007162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007166:	4b5c      	ldr	r3, [pc, #368]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716c:	4a5a      	ldr	r2, [pc, #360]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007176:	e00f      	b.n	8007198 <HAL_RCC_OscConfig+0x378>
 8007178:	4b57      	ldr	r3, [pc, #348]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717e:	4a56      	ldr	r2, [pc, #344]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007188:	4b53      	ldr	r3, [pc, #332]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718e:	4a52      	ldr	r2, [pc, #328]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007190:	f023 0304 	bic.w	r3, r3, #4
 8007194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fe ff72 	bl	8006088 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a6:	e00a      	b.n	80071be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a8:	f7fe ff6e 	bl	8006088 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e138      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071be:	4b46      	ldr	r3, [pc, #280]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ed      	beq.n	80071a8 <HAL_RCC_OscConfig+0x388>
 80071cc:	e015      	b.n	80071fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ce:	f7fe ff5b 	bl	8006088 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fe ff57 	bl	8006088 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e121      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071ec:	4b3a      	ldr	r3, [pc, #232]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1ed      	bne.n	80071d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071fa:	7ffb      	ldrb	r3, [r7, #31]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007200:	4b35      	ldr	r3, [pc, #212]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007204:	4a34      	ldr	r2, [pc, #208]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800720a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d03c      	beq.n	8007292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01c      	beq.n	800725a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007220:	4b2d      	ldr	r3, [pc, #180]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007226:	4a2c      	ldr	r2, [pc, #176]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007230:	f7fe ff2a 	bl	8006088 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007238:	f7fe ff26 	bl	8006088 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0f2      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800724a:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800724c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0ef      	beq.n	8007238 <HAL_RCC_OscConfig+0x418>
 8007258:	e01b      	b.n	8007292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800725a:	4b1f      	ldr	r3, [pc, #124]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800725c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007260:	4a1d      	ldr	r2, [pc, #116]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007262:	f023 0301 	bic.w	r3, r3, #1
 8007266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726a:	f7fe ff0d 	bl	8006088 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007272:	f7fe ff09 	bl	8006088 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e0d5      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007284:	4b14      	ldr	r3, [pc, #80]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 8007286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1ef      	bne.n	8007272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 80c9 	beq.w	800742e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800729c:	4b0e      	ldr	r3, [pc, #56]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	f000 8083 	beq.w	80073b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d15e      	bne.n	8007370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b2:	4b09      	ldr	r3, [pc, #36]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a08      	ldr	r2, [pc, #32]	@ (80072d8 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072be:	f7fe fee3 	bl	8006088 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072c4:	e00c      	b.n	80072e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c6:	f7fe fedf 	bl	8006088 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d905      	bls.n	80072e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0ab      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e0:	4b55      	ldr	r3, [pc, #340]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1ec      	bne.n	80072c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072ec:	4b52      	ldr	r3, [pc, #328]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	4b52      	ldr	r3, [pc, #328]	@ (800743c <HAL_RCC_OscConfig+0x61c>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6a11      	ldr	r1, [r2, #32]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072fc:	3a01      	subs	r2, #1
 80072fe:	0112      	lsls	r2, r2, #4
 8007300:	4311      	orrs	r1, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007306:	0212      	lsls	r2, r2, #8
 8007308:	4311      	orrs	r1, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800730e:	0852      	lsrs	r2, r2, #1
 8007310:	3a01      	subs	r2, #1
 8007312:	0552      	lsls	r2, r2, #21
 8007314:	4311      	orrs	r1, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800731a:	0852      	lsrs	r2, r2, #1
 800731c:	3a01      	subs	r2, #1
 800731e:	0652      	lsls	r2, r2, #25
 8007320:	4311      	orrs	r1, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007326:	06d2      	lsls	r2, r2, #27
 8007328:	430a      	orrs	r2, r1
 800732a:	4943      	ldr	r1, [pc, #268]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 800732c:	4313      	orrs	r3, r2
 800732e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007330:	4b41      	ldr	r3, [pc, #260]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a40      	ldr	r2, [pc, #256]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800733c:	4b3e      	ldr	r3, [pc, #248]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4a3d      	ldr	r2, [pc, #244]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007348:	f7fe fe9e 	bl	8006088 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007350:	f7fe fe9a 	bl	8006088 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e066      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007362:	4b35      	ldr	r3, [pc, #212]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f0      	beq.n	8007350 <HAL_RCC_OscConfig+0x530>
 800736e:	e05e      	b.n	800742e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007370:	4b31      	ldr	r3, [pc, #196]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a30      	ldr	r2, [pc, #192]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fe fe84 	bl	8006088 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007384:	f7fe fe80 	bl	8006088 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e04c      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007396:	4b28      	ldr	r3, [pc, #160]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80073a2:	4b25      	ldr	r3, [pc, #148]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	4924      	ldr	r1, [pc, #144]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 80073a8:	4b25      	ldr	r3, [pc, #148]	@ (8007440 <HAL_RCC_OscConfig+0x620>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	60cb      	str	r3, [r1, #12]
 80073ae:	e03e      	b.n	800742e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e039      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80073bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007438 <HAL_RCC_OscConfig+0x618>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f003 0203 	and.w	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d12c      	bne.n	800742a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	3b01      	subs	r3, #1
 80073dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	429a      	cmp	r2, r3
 80073e0:	d123      	bne.n	800742a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d11b      	bne.n	800742a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d113      	bne.n	800742a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	3b01      	subs	r3, #1
 8007410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007412:	429a      	cmp	r2, r3
 8007414:	d109      	bne.n	800742a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	3b01      	subs	r3, #1
 8007424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007426:	429a      	cmp	r2, r3
 8007428:	d001      	beq.n	800742e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40021000 	.word	0x40021000
 800743c:	019f800c 	.word	0x019f800c
 8007440:	feeefffc 	.word	0xfeeefffc

08007444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e11e      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b91      	ldr	r3, [pc, #580]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d910      	bls.n	800748c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b8e      	ldr	r3, [pc, #568]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 020f 	bic.w	r2, r3, #15
 8007472:	498c      	ldr	r1, [pc, #560]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b8a      	ldr	r3, [pc, #552]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e106      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d073      	beq.n	8007580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d129      	bne.n	80074f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074a0:	4b81      	ldr	r3, [pc, #516]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0f4      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80074b0:	f000 f99e 	bl	80077f0 <RCC_GetSysClockFreqFromPLLSource>
 80074b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4a7c      	ldr	r2, [pc, #496]	@ (80076ac <HAL_RCC_ClockConfig+0x268>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d93f      	bls.n	800753e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074be:	4b7a      	ldr	r3, [pc, #488]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d033      	beq.n	800753e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d12f      	bne.n	800753e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074de:	4b72      	ldr	r3, [pc, #456]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074e6:	4a70      	ldr	r2, [pc, #448]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80074e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074ee:	2380      	movs	r3, #128	@ 0x80
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e024      	b.n	800753e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d107      	bne.n	800750c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074fc:	4b6a      	ldr	r3, [pc, #424]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0c6      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800750c:	4b66      	ldr	r3, [pc, #408]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e0be      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800751c:	f000 f8ce 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 8007520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4a61      	ldr	r2, [pc, #388]	@ (80076ac <HAL_RCC_ClockConfig+0x268>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d909      	bls.n	800753e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800752a:	4b5f      	ldr	r3, [pc, #380]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007532:	4a5d      	ldr	r2, [pc, #372]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 8007534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800753a:	2380      	movs	r3, #128	@ 0x80
 800753c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800753e:	4b5a      	ldr	r3, [pc, #360]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f023 0203 	bic.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4957      	ldr	r1, [pc, #348]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800754c:	4313      	orrs	r3, r2
 800754e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007550:	f7fe fd9a 	bl	8006088 <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	e00a      	b.n	800756e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007558:	f7fe fd96 	bl	8006088 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d901      	bls.n	800756e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e095      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756e:	4b4e      	ldr	r3, [pc, #312]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 020c 	and.w	r2, r3, #12
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	429a      	cmp	r2, r3
 800757e:	d1eb      	bne.n	8007558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d023      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007598:	4b43      	ldr	r3, [pc, #268]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4a42      	ldr	r2, [pc, #264]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800759e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80075b0:	4b3d      	ldr	r3, [pc, #244]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075b8:	4a3b      	ldr	r2, [pc, #236]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4936      	ldr	r1, [pc, #216]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	608b      	str	r3, [r1, #8]
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b80      	cmp	r3, #128	@ 0x80
 80075d8:	d105      	bne.n	80075e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075da:	4b33      	ldr	r3, [pc, #204]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	4a32      	ldr	r2, [pc, #200]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 80075e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075e6:	4b2f      	ldr	r3, [pc, #188]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d21d      	bcs.n	8007630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f4:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 020f 	bic.w	r2, r3, #15
 80075fc:	4929      	ldr	r1, [pc, #164]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007604:	f7fe fd40 	bl	8006088 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800760a:	e00a      	b.n	8007622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800760c:	f7fe fd3c 	bl	8006088 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e03b      	b.n	800769a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007622:	4b20      	ldr	r3, [pc, #128]	@ (80076a4 <HAL_RCC_ClockConfig+0x260>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d1ed      	bne.n	800760c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800763c:	4b1a      	ldr	r3, [pc, #104]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4917      	ldr	r1, [pc, #92]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800765a:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	490f      	ldr	r1, [pc, #60]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800766e:	f000 f825 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 8007672:	4602      	mov	r2, r0
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <HAL_RCC_ClockConfig+0x264>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	490c      	ldr	r1, [pc, #48]	@ (80076b0 <HAL_RCC_ClockConfig+0x26c>)
 8007680:	5ccb      	ldrb	r3, [r1, r3]
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	fa22 f303 	lsr.w	r3, r2, r3
 800768a:	4a0a      	ldr	r2, [pc, #40]	@ (80076b4 <HAL_RCC_ClockConfig+0x270>)
 800768c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800768e:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <HAL_RCC_ClockConfig+0x274>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fcac 	bl	8005ff0 <HAL_InitTick>
 8007698:	4603      	mov	r3, r0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40022000 	.word	0x40022000
 80076a8:	40021000 	.word	0x40021000
 80076ac:	04c4b400 	.word	0x04c4b400
 80076b0:	080236e8 	.word	0x080236e8
 80076b4:	20000230 	.word	0x20000230
 80076b8:	20000234 	.word	0x20000234

080076bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80076c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 030c 	and.w	r3, r3, #12
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d102      	bne.n	80076d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e047      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076d4:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d102      	bne.n	80076e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076e0:	4b26      	ldr	r3, [pc, #152]	@ (800777c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e03e      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076e6:	4b23      	ldr	r3, [pc, #140]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 030c 	and.w	r3, r3, #12
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d136      	bne.n	8007760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076f2:	4b20      	ldr	r3, [pc, #128]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	3301      	adds	r3, #1
 8007708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d10c      	bne.n	800772a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007710:	4a1a      	ldr	r2, [pc, #104]	@ (800777c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	4a16      	ldr	r2, [pc, #88]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800771a:	68d2      	ldr	r2, [r2, #12]
 800771c:	0a12      	lsrs	r2, r2, #8
 800771e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007722:	fb02 f303 	mul.w	r3, r2, r3
 8007726:	617b      	str	r3, [r7, #20]
      break;
 8007728:	e00c      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800772a:	4a13      	ldr	r2, [pc, #76]	@ (8007778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	4a10      	ldr	r2, [pc, #64]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007734:	68d2      	ldr	r2, [r2, #12]
 8007736:	0a12      	lsrs	r2, r2, #8
 8007738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]
      break;
 8007742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007744:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	0e5b      	lsrs	r3, r3, #25
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	3301      	adds	r3, #1
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	e001      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007764:	693b      	ldr	r3, [r7, #16]
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40021000 	.word	0x40021000
 8007778:	00f42400 	.word	0x00f42400
 800777c:	016e3600 	.word	0x016e3600

08007780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007784:	4b03      	ldr	r3, [pc, #12]	@ (8007794 <HAL_RCC_GetHCLKFreq+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000230 	.word	0x20000230

08007798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800779c:	f7ff fff0 	bl	8007780 <HAL_RCC_GetHCLKFreq>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	4904      	ldr	r1, [pc, #16]	@ (80077c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ae:	5ccb      	ldrb	r3, [r1, r3]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000
 80077c0:	080236f8 	.word	0x080236f8

080077c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80077c8:	f7ff ffda 	bl	8007780 <HAL_RCC_GetHCLKFreq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	0adb      	lsrs	r3, r3, #11
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4904      	ldr	r1, [pc, #16]	@ (80077ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80077da:	5ccb      	ldrb	r3, [r1, r3]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	080236f8 	.word	0x080236f8

080077f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007800:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	091b      	lsrs	r3, r3, #4
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d10c      	bne.n	800782e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007814:	4a17      	ldr	r2, [pc, #92]	@ (8007874 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	4a14      	ldr	r2, [pc, #80]	@ (8007870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800781e:	68d2      	ldr	r2, [r2, #12]
 8007820:	0a12      	lsrs	r2, r2, #8
 8007822:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	617b      	str	r3, [r7, #20]
    break;
 800782c:	e00c      	b.n	8007848 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800782e:	4a12      	ldr	r2, [pc, #72]	@ (8007878 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	fbb2 f3f3 	udiv	r3, r2, r3
 8007836:	4a0e      	ldr	r2, [pc, #56]	@ (8007870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007838:	68d2      	ldr	r2, [r2, #12]
 800783a:	0a12      	lsrs	r2, r2, #8
 800783c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007840:	fb02 f303 	mul.w	r3, r2, r3
 8007844:	617b      	str	r3, [r7, #20]
    break;
 8007846:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007848:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	0e5b      	lsrs	r3, r3, #25
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	3301      	adds	r3, #1
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007860:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007862:	687b      	ldr	r3, [r7, #4]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	40021000 	.word	0x40021000
 8007874:	016e3600 	.word	0x016e3600
 8007878:	00f42400 	.word	0x00f42400

0800787c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007884:	2300      	movs	r3, #0
 8007886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007888:	2300      	movs	r3, #0
 800788a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8098 	beq.w	80079ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789a:	2300      	movs	r3, #0
 800789c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800789e:	4b43      	ldr	r3, [pc, #268]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10d      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078aa:	4b40      	ldr	r3, [pc, #256]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ae:	4a3f      	ldr	r2, [pc, #252]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b6:	4b3d      	ldr	r3, [pc, #244]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c2:	2301      	movs	r3, #1
 80078c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c6:	4b3a      	ldr	r3, [pc, #232]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a39      	ldr	r2, [pc, #228]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078d2:	f7fe fbd9 	bl	8006088 <HAL_GetTick>
 80078d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078d8:	e009      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078da:	f7fe fbd5 	bl	8006088 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d902      	bls.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	74fb      	strb	r3, [r7, #19]
        break;
 80078ec:	e005      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078ee:	4b30      	ldr	r3, [pc, #192]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0ef      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d159      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007900:	4b2a      	ldr	r3, [pc, #168]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01e      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d019      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800791c:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007928:	4b20      	ldr	r3, [pc, #128]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792e:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007938:	4b1c      	ldr	r3, [pc, #112]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	4a1b      	ldr	r2, [pc, #108]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007948:	4a18      	ldr	r2, [pc, #96]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800795a:	f7fe fb95 	bl	8006088 <HAL_GetTick>
 800795e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007960:	e00b      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007962:	f7fe fb91 	bl	8006088 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007970:	4293      	cmp	r3, r2
 8007972:	d902      	bls.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	74fb      	strb	r3, [r7, #19]
            break;
 8007978:	e006      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800797a:	4b0c      	ldr	r3, [pc, #48]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0ec      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007988:	7cfb      	ldrb	r3, [r7, #19]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10b      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800798e:	4b07      	ldr	r3, [pc, #28]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799c:	4903      	ldr	r1, [pc, #12]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80079a4:	e008      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079a6:	7cfb      	ldrb	r3, [r7, #19]
 80079a8:	74bb      	strb	r3, [r7, #18]
 80079aa:	e005      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80079ac:	40021000 	.word	0x40021000
 80079b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	7cfb      	ldrb	r3, [r7, #19]
 80079b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079b8:	7c7b      	ldrb	r3, [r7, #17]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d105      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079be:	4ba7      	ldr	r3, [pc, #668]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	4aa6      	ldr	r2, [pc, #664]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079d6:	4ba1      	ldr	r3, [pc, #644]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079dc:	f023 0203 	bic.w	r2, r3, #3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	499d      	ldr	r1, [pc, #628]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079f8:	4b98      	ldr	r3, [pc, #608]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fe:	f023 020c 	bic.w	r2, r3, #12
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	4995      	ldr	r1, [pc, #596]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a1a:	4b90      	ldr	r3, [pc, #576]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	498c      	ldr	r1, [pc, #560]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a3c:	4b87      	ldr	r3, [pc, #540]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	4984      	ldr	r1, [pc, #528]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	497b      	ldr	r1, [pc, #492]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a80:	4b76      	ldr	r3, [pc, #472]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	4973      	ldr	r1, [pc, #460]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	496a      	ldr	r1, [pc, #424]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ac4:	4b65      	ldr	r3, [pc, #404]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	4962      	ldr	r1, [pc, #392]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	4959      	ldr	r1, [pc, #356]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b08:	4b54      	ldr	r3, [pc, #336]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b0e:	f023 0203 	bic.w	r2, r3, #3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b16:	4951      	ldr	r1, [pc, #324]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	4948      	ldr	r1, [pc, #288]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b4c:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5a:	4940      	ldr	r1, [pc, #256]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b6a:	d105      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4a3a      	ldr	r2, [pc, #232]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b76:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d015      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b84:	4b35      	ldr	r3, [pc, #212]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b92:	4932      	ldr	r1, [pc, #200]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ba2:	d105      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bbc:	4b27      	ldr	r3, [pc, #156]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	4924      	ldr	r1, [pc, #144]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bda:	d105      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007be6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bf4:	4b19      	ldr	r3, [pc, #100]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c02:	4916      	ldr	r1, [pc, #88]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c12:	d105      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c14:	4b11      	ldr	r3, [pc, #68]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a10      	ldr	r2, [pc, #64]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d019      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	4908      	ldr	r1, [pc, #32]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c4a:	d109      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	4b03      	ldr	r3, [pc, #12]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a02      	ldr	r2, [pc, #8]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c56:	60d3      	str	r3, [r2, #12]
 8007c58:	e002      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d015      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c6c:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7a:	4926      	ldr	r1, [pc, #152]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c8a:	d105      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c8c:	4b21      	ldr	r3, [pc, #132]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	4a20      	ldr	r2, [pc, #128]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d015      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007caa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb2:	4918      	ldr	r1, [pc, #96]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc2:	d105      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cc4:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a12      	ldr	r2, [pc, #72]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d015      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ce2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cea:	490a      	ldr	r1, [pc, #40]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cfa:	d105      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a04      	ldr	r2, [pc, #16]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40021000 	.word	0x40021000

08007d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e054      	b.n	8007dd4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d111      	bne.n	8007d5a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 fb3c 	bl	800a3bc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a23      	ldr	r2, [pc, #140]	@ (8007ddc <HAL_TIM_Base_Init+0xc4>)
 8007d50:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f001 fc7b 	bl	8009668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	08005ae1 	.word	0x08005ae1

08007de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d001      	beq.n	8007df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e04c      	b.n	8007e92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a26      	ldr	r2, [pc, #152]	@ (8007ea0 <HAL_TIM_Base_Start+0xc0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d022      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d01d      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a22      	ldr	r2, [pc, #136]	@ (8007ea4 <HAL_TIM_Base_Start+0xc4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d018      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a21      	ldr	r2, [pc, #132]	@ (8007ea8 <HAL_TIM_Base_Start+0xc8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007eac <HAL_TIM_Base_Start+0xcc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb0 <HAL_TIM_Base_Start+0xd0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d009      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb4 <HAL_TIM_Base_Start+0xd4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_Base_Start+0x70>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb8 <HAL_TIM_Base_Start+0xd8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d115      	bne.n	8007e7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <HAL_TIM_Base_Start+0xdc>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d015      	beq.n	8007e8e <HAL_TIM_Base_Start+0xae>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e68:	d011      	beq.n	8007e8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	e008      	b.n	8007e8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40012c00 	.word	0x40012c00
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40015000 	.word	0x40015000
 8007ebc:	00010007 	.word	0x00010007

08007ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d001      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e054      	b.n	8007f82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a26      	ldr	r2, [pc, #152]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d01d      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a22      	ldr	r2, [pc, #136]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d018      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a21      	ldr	r2, [pc, #132]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00e      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d009      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d115      	bne.n	8007f6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	4b19      	ldr	r3, [pc, #100]	@ (8007fac <HAL_TIM_Base_Start_IT+0xec>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d015      	beq.n	8007f7e <HAL_TIM_Base_Start_IT+0xbe>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f58:	d011      	beq.n	8007f7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0201 	orr.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6a:	e008      	b.n	8007f7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e000      	b.n	8007f80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40000400 	.word	0x40000400
 8007f98:	40000800 	.word	0x40000800
 8007f9c:	40000c00 	.word	0x40000c00
 8007fa0:	40013400 	.word	0x40013400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40015000 	.word	0x40015000
 8007fac:	00010007 	.word	0x00010007

08007fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e054      	b.n	800806c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d111      	bne.n	8007ff2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f002 f9f0 	bl	800a3bc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	@ (8008074 <HAL_TIM_PWM_Init+0xc4>)
 8007fe8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f001 fb2f 	bl	8009668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08008079 	.word	0x08008079

08008078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_TIM_PWM_Start+0x24>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	bf14      	ite	ne
 80080a8:	2301      	movne	r3, #1
 80080aa:	2300      	moveq	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	e03c      	b.n	800812a <HAL_TIM_PWM_Start+0x9e>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d109      	bne.n	80080ca <HAL_TIM_PWM_Start+0x3e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	e02f      	b.n	800812a <HAL_TIM_PWM_Start+0x9e>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d109      	bne.n	80080e4 <HAL_TIM_PWM_Start+0x58>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e022      	b.n	800812a <HAL_TIM_PWM_Start+0x9e>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b0c      	cmp	r3, #12
 80080e8:	d109      	bne.n	80080fe <HAL_TIM_PWM_Start+0x72>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	e015      	b.n	800812a <HAL_TIM_PWM_Start+0x9e>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b10      	cmp	r3, #16
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start+0x8c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e008      	b.n	800812a <HAL_TIM_PWM_Start+0x9e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e0a6      	b.n	8008280 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <HAL_TIM_PWM_Start+0xb6>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008140:	e023      	b.n	800818a <HAL_TIM_PWM_Start+0xfe>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d104      	bne.n	8008152 <HAL_TIM_PWM_Start+0xc6>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008150:	e01b      	b.n	800818a <HAL_TIM_PWM_Start+0xfe>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d104      	bne.n	8008162 <HAL_TIM_PWM_Start+0xd6>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008160:	e013      	b.n	800818a <HAL_TIM_PWM_Start+0xfe>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b0c      	cmp	r3, #12
 8008166:	d104      	bne.n	8008172 <HAL_TIM_PWM_Start+0xe6>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008170:	e00b      	b.n	800818a <HAL_TIM_PWM_Start+0xfe>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b10      	cmp	r3, #16
 8008176:	d104      	bne.n	8008182 <HAL_TIM_PWM_Start+0xf6>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008180:	e003      	b.n	800818a <HAL_TIM_PWM_Start+0xfe>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f002 f8ec 	bl	800a370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a3a      	ldr	r2, [pc, #232]	@ (8008288 <HAL_TIM_PWM_Start+0x1fc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d018      	beq.n	80081d4 <HAL_TIM_PWM_Start+0x148>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a39      	ldr	r2, [pc, #228]	@ (800828c <HAL_TIM_PWM_Start+0x200>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <HAL_TIM_PWM_Start+0x148>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a37      	ldr	r2, [pc, #220]	@ (8008290 <HAL_TIM_PWM_Start+0x204>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00e      	beq.n	80081d4 <HAL_TIM_PWM_Start+0x148>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a36      	ldr	r2, [pc, #216]	@ (8008294 <HAL_TIM_PWM_Start+0x208>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d009      	beq.n	80081d4 <HAL_TIM_PWM_Start+0x148>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a34      	ldr	r2, [pc, #208]	@ (8008298 <HAL_TIM_PWM_Start+0x20c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_TIM_PWM_Start+0x148>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a33      	ldr	r2, [pc, #204]	@ (800829c <HAL_TIM_PWM_Start+0x210>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d101      	bne.n	80081d8 <HAL_TIM_PWM_Start+0x14c>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <HAL_TIM_PWM_Start+0x14e>
 80081d8:	2300      	movs	r3, #0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a25      	ldr	r2, [pc, #148]	@ (8008288 <HAL_TIM_PWM_Start+0x1fc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d022      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008200:	d01d      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a26      	ldr	r2, [pc, #152]	@ (80082a0 <HAL_TIM_PWM_Start+0x214>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d018      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a24      	ldr	r2, [pc, #144]	@ (80082a4 <HAL_TIM_PWM_Start+0x218>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d013      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a23      	ldr	r2, [pc, #140]	@ (80082a8 <HAL_TIM_PWM_Start+0x21c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00e      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a19      	ldr	r2, [pc, #100]	@ (800828c <HAL_TIM_PWM_Start+0x200>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d009      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a18      	ldr	r2, [pc, #96]	@ (8008290 <HAL_TIM_PWM_Start+0x204>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d004      	beq.n	800823e <HAL_TIM_PWM_Start+0x1b2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a18      	ldr	r2, [pc, #96]	@ (800829c <HAL_TIM_PWM_Start+0x210>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d115      	bne.n	800826a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	4b19      	ldr	r3, [pc, #100]	@ (80082ac <HAL_TIM_PWM_Start+0x220>)
 8008246:	4013      	ands	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b06      	cmp	r3, #6
 800824e:	d015      	beq.n	800827c <HAL_TIM_PWM_Start+0x1f0>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008256:	d011      	beq.n	800827c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008268:	e008      	b.n	800827c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0201 	orr.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e000      	b.n	800827e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40012c00 	.word	0x40012c00
 800828c:	40013400 	.word	0x40013400
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800
 800829c:	40015000 	.word	0x40015000
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00
 80082ac:	00010007 	.word	0x00010007

080082b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e054      	b.n	800836c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d111      	bne.n	80082f2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f002 f870 	bl	800a3bc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a23      	ldr	r2, [pc, #140]	@ (8008374 <HAL_TIM_IC_Init+0xc4>)
 80082e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f001 f9af 	bl	8009668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	080058e1 	.word	0x080058e1

08008378 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_TIM_IC_Start+0x1a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800838e:	b2db      	uxtb	r3, r3
 8008390:	e023      	b.n	80083da <HAL_TIM_IC_Start+0x62>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b04      	cmp	r3, #4
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_IC_Start+0x2a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	e01b      	b.n	80083da <HAL_TIM_IC_Start+0x62>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_IC_Start+0x3a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	e013      	b.n	80083da <HAL_TIM_IC_Start+0x62>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_IC_Start+0x4a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	e00b      	b.n	80083da <HAL_TIM_IC_Start+0x62>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d104      	bne.n	80083d2 <HAL_TIM_IC_Start+0x5a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	e003      	b.n	80083da <HAL_TIM_IC_Start+0x62>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <HAL_TIM_IC_Start+0x74>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	e013      	b.n	8008414 <HAL_TIM_IC_Start+0x9c>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d104      	bne.n	80083fc <HAL_TIM_IC_Start+0x84>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	e00b      	b.n	8008414 <HAL_TIM_IC_Start+0x9c>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d104      	bne.n	800840c <HAL_TIM_IC_Start+0x94>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008408:	b2db      	uxtb	r3, r3
 800840a:	e003      	b.n	8008414 <HAL_TIM_IC_Start+0x9c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008412:	b2db      	uxtb	r3, r3
 8008414:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d102      	bne.n	8008422 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d001      	beq.n	8008426 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e097      	b.n	8008556 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_TIM_IC_Start+0xbe>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008434:	e023      	b.n	800847e <HAL_TIM_IC_Start+0x106>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b04      	cmp	r3, #4
 800843a:	d104      	bne.n	8008446 <HAL_TIM_IC_Start+0xce>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008444:	e01b      	b.n	800847e <HAL_TIM_IC_Start+0x106>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b08      	cmp	r3, #8
 800844a:	d104      	bne.n	8008456 <HAL_TIM_IC_Start+0xde>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008454:	e013      	b.n	800847e <HAL_TIM_IC_Start+0x106>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b0c      	cmp	r3, #12
 800845a:	d104      	bne.n	8008466 <HAL_TIM_IC_Start+0xee>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008464:	e00b      	b.n	800847e <HAL_TIM_IC_Start+0x106>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b10      	cmp	r3, #16
 800846a:	d104      	bne.n	8008476 <HAL_TIM_IC_Start+0xfe>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008474:	e003      	b.n	800847e <HAL_TIM_IC_Start+0x106>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2202      	movs	r2, #2
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_TIM_IC_Start+0x116>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800848c:	e013      	b.n	80084b6 <HAL_TIM_IC_Start+0x13e>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d104      	bne.n	800849e <HAL_TIM_IC_Start+0x126>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800849c:	e00b      	b.n	80084b6 <HAL_TIM_IC_Start+0x13e>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d104      	bne.n	80084ae <HAL_TIM_IC_Start+0x136>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084ac:	e003      	b.n	80084b6 <HAL_TIM_IC_Start+0x13e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2201      	movs	r2, #1
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 ff56 	bl	800a370 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <HAL_TIM_IC_Start+0x1e8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d022      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d6:	d01d      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a21      	ldr	r2, [pc, #132]	@ (8008564 <HAL_TIM_IC_Start+0x1ec>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d018      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a20      	ldr	r2, [pc, #128]	@ (8008568 <HAL_TIM_IC_Start+0x1f0>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d013      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1e      	ldr	r2, [pc, #120]	@ (800856c <HAL_TIM_IC_Start+0x1f4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00e      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008570 <HAL_TIM_IC_Start+0x1f8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d009      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a1b      	ldr	r2, [pc, #108]	@ (8008574 <HAL_TIM_IC_Start+0x1fc>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <HAL_TIM_IC_Start+0x19c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a1a      	ldr	r2, [pc, #104]	@ (8008578 <HAL_TIM_IC_Start+0x200>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d115      	bne.n	8008540 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	4b18      	ldr	r3, [pc, #96]	@ (800857c <HAL_TIM_IC_Start+0x204>)
 800851c:	4013      	ands	r3, r2
 800851e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b06      	cmp	r3, #6
 8008524:	d015      	beq.n	8008552 <HAL_TIM_IC_Start+0x1da>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852c:	d011      	beq.n	8008552 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853e:	e008      	b.n	8008552 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	e000      	b.n	8008554 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	40012c00 	.word	0x40012c00
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40013400 	.word	0x40013400
 8008574:	40014000 	.word	0x40014000
 8008578:	40015000 	.word	0x40015000
 800857c:	00010007 	.word	0x00010007

08008580 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e04c      	b.n	800862e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d111      	bne.n	80085c4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 ff07 	bl	800a3bc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008638 <HAL_TIM_OnePulse_Init+0xb8>)
 80085ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f001 f846 	bl	8009668 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0208 	bic.w	r2, r2, #8
 80085ea:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	0800863d 	.word	0x0800863d

0800863c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008660:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008668:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008670:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008678:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d108      	bne.n	8008692 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d105      	bne.n	8008692 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008686:	7b7b      	ldrb	r3, [r7, #13]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d102      	bne.n	8008692 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800868c:	7b3b      	ldrb	r3, [r7, #12]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e059      	b.n	800874a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0202 	orr.w	r2, r2, #2
 80086c4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0204 	orr.w	r2, r2, #4
 80086d4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2201      	movs	r2, #1
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fe46 	bl	800a370 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2201      	movs	r2, #1
 80086ea:	2104      	movs	r1, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fe3f 	bl	800a370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a17      	ldr	r2, [pc, #92]	@ (8008754 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d018      	beq.n	800872e <HAL_TIM_OnePulse_Start_IT+0xde>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a15      	ldr	r2, [pc, #84]	@ (8008758 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a14      	ldr	r2, [pc, #80]	@ (800875c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00e      	beq.n	800872e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a12      	ldr	r2, [pc, #72]	@ (8008760 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_TIM_OnePulse_Start_IT+0xde>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a11      	ldr	r2, [pc, #68]	@ (8008764 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d004      	beq.n	800872e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a0f      	ldr	r2, [pc, #60]	@ (8008768 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d101      	bne.n	8008732 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008746:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40013400 	.word	0x40013400
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800
 8008768:	40015000 	.word	0x40015000

0800876c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e0a2      	b.n	80088c6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d111      	bne.n	80087b0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fe11 	bl	800a3bc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a4a      	ldr	r2, [pc, #296]	@ (80088d0 <HAL_TIM_Encoder_Init+0x164>)
 80087a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f000 ff46 	bl	8009668 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	4313      	orrs	r3, r2
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008822:	f023 030c 	bic.w	r3, r3, #12
 8008826:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800882e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	4313      	orrs	r3, r2
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	011a      	lsls	r2, r3, #4
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	031b      	lsls	r3, r3, #12
 8008852:	4313      	orrs	r3, r2
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008860:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008868:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	4313      	orrs	r3, r2
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	080059d5 	.word	0x080059d5

080088d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d110      	bne.n	8008926 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d102      	bne.n	8008910 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800890a:	7b7b      	ldrb	r3, [r7, #13]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d001      	beq.n	8008914 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e069      	b.n	80089e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008924:	e031      	b.n	800898a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b04      	cmp	r3, #4
 800892a:	d110      	bne.n	800894e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d102      	bne.n	8008938 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008932:	7b3b      	ldrb	r3, [r7, #12]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d001      	beq.n	800893c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e055      	b.n	80089e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800894c:	e01d      	b.n	800898a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d108      	bne.n	8008966 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d105      	bne.n	8008966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008960:	7b3b      	ldrb	r3, [r7, #12]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d001      	beq.n	800896a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e03e      	b.n	80089e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2202      	movs	r2, #2
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <HAL_TIM_Encoder_Start+0xc4>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b04      	cmp	r3, #4
 8008994:	d008      	beq.n	80089a8 <HAL_TIM_Encoder_Start+0xd4>
 8008996:	e00f      	b.n	80089b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2201      	movs	r2, #1
 800899e:	2100      	movs	r1, #0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 fce5 	bl	800a370 <TIM_CCxChannelCmd>
      break;
 80089a6:	e016      	b.n	80089d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2201      	movs	r2, #1
 80089ae:	2104      	movs	r1, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fcdd 	bl	800a370 <TIM_CCxChannelCmd>
      break;
 80089b6:	e00e      	b.n	80089d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2201      	movs	r2, #1
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 fcd5 	bl	800a370 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2201      	movs	r2, #1
 80089cc:	2104      	movs	r1, #4
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fcce 	bl	800a370 <TIM_CCxChannelCmd>
      break;
 80089d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0201 	orr.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d026      	beq.n	8008a60 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d021      	beq.n	8008a60 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0202 	mvn.w	r2, #2
 8008a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
 8008a44:	e009      	b.n	8008a5a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d026      	beq.n	8008ab8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d021      	beq.n	8008ab8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0204 	mvn.w	r2, #4
 8008a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
 8008a9c:	e009      	b.n	8008ab2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d026      	beq.n	8008b10 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d021      	beq.n	8008b10 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0208 	mvn.w	r2, #8
 8008ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
 8008af4:	e009      	b.n	8008b0a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d026      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d021      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0210 	mvn.w	r2, #16
 8008b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2208      	movs	r2, #8
 8008b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
 8008b4c:	e009      	b.n	8008b62 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00e      	beq.n	8008b90 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0201 	mvn.w	r2, #1
 8008b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00e      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f06f 0220 	mvn.w	r2, #32
 8008c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00e      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00e      	beq.n	8008cb2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00e      	beq.n	8008cda <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e088      	b.n	8008e12 <HAL_TIM_IC_ConfigChannel+0x130>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d11b      	bne.n	8008d46 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008d1e:	f001 f961 	bl	8009fe4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699a      	ldr	r2, [r3, #24]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 020c 	bic.w	r2, r2, #12
 8008d30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6999      	ldr	r1, [r3, #24]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	619a      	str	r2, [r3, #24]
 8008d44:	e060      	b.n	8008e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d11c      	bne.n	8008d86 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008d5c:	f001 f9e5 	bl	800a12a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	619a      	str	r2, [r3, #24]
 8008d84:	e040      	b.n	8008e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d11b      	bne.n	8008dc4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008d9c:	f001 fa32 	bl	800a204 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	69da      	ldr	r2, [r3, #28]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 020c 	bic.w	r2, r2, #12
 8008dae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69d9      	ldr	r1, [r3, #28]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	61da      	str	r2, [r3, #28]
 8008dc2:	e021      	b.n	8008e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b0c      	cmp	r3, #12
 8008dc8:	d11c      	bne.n	8008e04 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008dda:	f001 fa4f 	bl	800a27c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008dec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69d9      	ldr	r1, [r3, #28]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	021a      	lsls	r2, r3, #8
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	61da      	str	r2, [r3, #28]
 8008e02:	e001      	b.n	8008e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e0ff      	b.n	800903a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b14      	cmp	r3, #20
 8008e46:	f200 80f0 	bhi.w	800902a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	0800902b 	.word	0x0800902b
 8008e58:	0800902b 	.word	0x0800902b
 8008e5c:	0800902b 	.word	0x0800902b
 8008e60:	08008ee5 	.word	0x08008ee5
 8008e64:	0800902b 	.word	0x0800902b
 8008e68:	0800902b 	.word	0x0800902b
 8008e6c:	0800902b 	.word	0x0800902b
 8008e70:	08008f27 	.word	0x08008f27
 8008e74:	0800902b 	.word	0x0800902b
 8008e78:	0800902b 	.word	0x0800902b
 8008e7c:	0800902b 	.word	0x0800902b
 8008e80:	08008f67 	.word	0x08008f67
 8008e84:	0800902b 	.word	0x0800902b
 8008e88:	0800902b 	.word	0x0800902b
 8008e8c:	0800902b 	.word	0x0800902b
 8008e90:	08008fa9 	.word	0x08008fa9
 8008e94:	0800902b 	.word	0x0800902b
 8008e98:	0800902b 	.word	0x0800902b
 8008e9c:	0800902b 	.word	0x0800902b
 8008ea0:	08008fe9 	.word	0x08008fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fc90 	bl	80097d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0208 	orr.w	r2, r2, #8
 8008ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0204 	bic.w	r2, r2, #4
 8008ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6999      	ldr	r1, [r3, #24]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	619a      	str	r2, [r3, #24]
      break;
 8008ee2:	e0a5      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fd0a 	bl	8009904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6999      	ldr	r1, [r3, #24]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	021a      	lsls	r2, r3, #8
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	619a      	str	r2, [r3, #24]
      break;
 8008f24:	e084      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fd7d 	bl	8009a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69da      	ldr	r2, [r3, #28]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0204 	bic.w	r2, r2, #4
 8008f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69d9      	ldr	r1, [r3, #28]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	61da      	str	r2, [r3, #28]
      break;
 8008f64:	e064      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fdef 	bl	8009b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69da      	ldr	r2, [r3, #28]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69d9      	ldr	r1, [r3, #28]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	021a      	lsls	r2, r3, #8
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	61da      	str	r2, [r3, #28]
      break;
 8008fa6:	e043      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fe62 	bl	8009c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0208 	orr.w	r2, r2, #8
 8008fc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008fe6:	e023      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 feac 	bl	8009d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009002:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009012:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009028:	e002      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
      break;
 800902e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop

08009044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_TIM_ConfigClockSource+0x1c>
 800905c:	2302      	movs	r3, #2
 800905e:	e0f6      	b.n	800924e <HAL_TIM_ConfigClockSource+0x20a>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800907e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800908a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a6f      	ldr	r2, [pc, #444]	@ (8009258 <HAL_TIM_ConfigClockSource+0x214>)
 800909a:	4293      	cmp	r3, r2
 800909c:	f000 80c1 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090a0:	4a6d      	ldr	r2, [pc, #436]	@ (8009258 <HAL_TIM_ConfigClockSource+0x214>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	f200 80c6 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090a8:	4a6c      	ldr	r2, [pc, #432]	@ (800925c <HAL_TIM_ConfigClockSource+0x218>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	f000 80b9 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090b0:	4a6a      	ldr	r2, [pc, #424]	@ (800925c <HAL_TIM_ConfigClockSource+0x218>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	f200 80be 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090b8:	4a69      	ldr	r2, [pc, #420]	@ (8009260 <HAL_TIM_ConfigClockSource+0x21c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	f000 80b1 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090c0:	4a67      	ldr	r2, [pc, #412]	@ (8009260 <HAL_TIM_ConfigClockSource+0x21c>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	f200 80b6 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090c8:	4a66      	ldr	r2, [pc, #408]	@ (8009264 <HAL_TIM_ConfigClockSource+0x220>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f000 80a9 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090d0:	4a64      	ldr	r2, [pc, #400]	@ (8009264 <HAL_TIM_ConfigClockSource+0x220>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	f200 80ae 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090d8:	4a63      	ldr	r2, [pc, #396]	@ (8009268 <HAL_TIM_ConfigClockSource+0x224>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	f000 80a1 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090e0:	4a61      	ldr	r2, [pc, #388]	@ (8009268 <HAL_TIM_ConfigClockSource+0x224>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	f200 80a6 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090e8:	4a60      	ldr	r2, [pc, #384]	@ (800926c <HAL_TIM_ConfigClockSource+0x228>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	f000 8099 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 80090f0:	4a5e      	ldr	r2, [pc, #376]	@ (800926c <HAL_TIM_ConfigClockSource+0x228>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	f200 809e 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 80090f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80090fc:	f000 8091 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 8009100:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009104:	f200 8096 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800910c:	f000 8089 	beq.w	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 8009110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009114:	f200 808e 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800911c:	d03e      	beq.n	800919c <HAL_TIM_ConfigClockSource+0x158>
 800911e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009122:	f200 8087 	bhi.w	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912a:	f000 8086 	beq.w	800923a <HAL_TIM_ConfigClockSource+0x1f6>
 800912e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009132:	d87f      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009134:	2b70      	cmp	r3, #112	@ 0x70
 8009136:	d01a      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x12a>
 8009138:	2b70      	cmp	r3, #112	@ 0x70
 800913a:	d87b      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 800913c:	2b60      	cmp	r3, #96	@ 0x60
 800913e:	d050      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0x19e>
 8009140:	2b60      	cmp	r3, #96	@ 0x60
 8009142:	d877      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009144:	2b50      	cmp	r3, #80	@ 0x50
 8009146:	d03c      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x17e>
 8009148:	2b50      	cmp	r3, #80	@ 0x50
 800914a:	d873      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 800914c:	2b40      	cmp	r3, #64	@ 0x40
 800914e:	d058      	beq.n	8009202 <HAL_TIM_ConfigClockSource+0x1be>
 8009150:	2b40      	cmp	r3, #64	@ 0x40
 8009152:	d86f      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009154:	2b30      	cmp	r3, #48	@ 0x30
 8009156:	d064      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 8009158:	2b30      	cmp	r3, #48	@ 0x30
 800915a:	d86b      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 800915c:	2b20      	cmp	r3, #32
 800915e:	d060      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 8009160:	2b20      	cmp	r3, #32
 8009162:	d867      	bhi.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d05c      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 8009168:	2b10      	cmp	r3, #16
 800916a:	d05a      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x1de>
 800916c:	e062      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800917e:	f001 f8d7 	bl	800a330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	609a      	str	r2, [r3, #8]
      break;
 800919a:	e04f      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ac:	f001 f8c0 	bl	800a330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091be:	609a      	str	r2, [r3, #8]
      break;
 80091c0:	e03c      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ce:	461a      	mov	r2, r3
 80091d0:	f000 ff7c 	bl	800a0cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2150      	movs	r1, #80	@ 0x50
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f88b 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 80091e0:	e02c      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091ee:	461a      	mov	r2, r3
 80091f0:	f000 ffd8 	bl	800a1a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2160      	movs	r1, #96	@ 0x60
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 f87b 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009200:	e01c      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800920e:	461a      	mov	r2, r3
 8009210:	f000 ff5c 	bl	800a0cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2140      	movs	r1, #64	@ 0x40
 800921a:	4618      	mov	r0, r3
 800921c:	f001 f86b 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009220:	e00c      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f001 f862 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009232:	e003      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	73fb      	strb	r3, [r7, #15]
      break;
 8009238:	e000      	b.n	800923c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800923a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	00100070 	.word	0x00100070
 800925c:	00100060 	.word	0x00100060
 8009260:	00100050 	.word	0x00100050
 8009264:	00100040 	.word	0x00100040
 8009268:	00100030 	.word	0x00100030
 800926c:	00100020 	.word	0x00100020

08009270 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009284:	2302      	movs	r3, #2
 8009286:	e031      	b.n	80092ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fdc2 	bl	8009e24 <TIM_SlaveTimer_SetConfig>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d009      	beq.n	80092ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e018      	b.n	80092ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80092d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	460b      	mov	r3, r1
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e14a      	b.n	800965a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	f040 80dd 	bne.w	800958c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	2b1f      	cmp	r3, #31
 80093d6:	f200 80d6 	bhi.w	8009586 <HAL_TIM_RegisterCallback+0x1de>
 80093da:	a201      	add	r2, pc, #4	@ (adr r2, 80093e0 <HAL_TIM_RegisterCallback+0x38>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	08009461 	.word	0x08009461
 80093e4:	08009469 	.word	0x08009469
 80093e8:	08009471 	.word	0x08009471
 80093ec:	08009479 	.word	0x08009479
 80093f0:	08009481 	.word	0x08009481
 80093f4:	08009489 	.word	0x08009489
 80093f8:	08009491 	.word	0x08009491
 80093fc:	08009499 	.word	0x08009499
 8009400:	080094a1 	.word	0x080094a1
 8009404:	080094a9 	.word	0x080094a9
 8009408:	080094b1 	.word	0x080094b1
 800940c:	080094b9 	.word	0x080094b9
 8009410:	080094c1 	.word	0x080094c1
 8009414:	080094c9 	.word	0x080094c9
 8009418:	080094d3 	.word	0x080094d3
 800941c:	080094dd 	.word	0x080094dd
 8009420:	080094e7 	.word	0x080094e7
 8009424:	080094f1 	.word	0x080094f1
 8009428:	080094fb 	.word	0x080094fb
 800942c:	08009505 	.word	0x08009505
 8009430:	0800950f 	.word	0x0800950f
 8009434:	08009519 	.word	0x08009519
 8009438:	08009523 	.word	0x08009523
 800943c:	0800952d 	.word	0x0800952d
 8009440:	08009537 	.word	0x08009537
 8009444:	08009541 	.word	0x08009541
 8009448:	0800954b 	.word	0x0800954b
 800944c:	08009555 	.word	0x08009555
 8009450:	0800955f 	.word	0x0800955f
 8009454:	08009569 	.word	0x08009569
 8009458:	08009573 	.word	0x08009573
 800945c:	0800957d 	.word	0x0800957d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009466:	e0f7      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800946e:	e0f3      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009476:	e0ef      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800947e:	e0eb      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009486:	e0e7      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800948e:	e0e3      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009496:	e0df      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800949e:	e0db      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80094a6:	e0d7      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80094ae:	e0d3      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80094b6:	e0cf      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80094be:	e0cb      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80094c6:	e0c7      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80094d0:	e0c2      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80094da:	e0bd      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80094e4:	e0b8      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80094ee:	e0b3      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80094f8:	e0ae      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009502:	e0a9      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800950c:	e0a4      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009516:	e09f      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009520:	e09a      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800952a:	e095      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009534:	e090      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800953e:	e08b      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009548:	e086      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009552:	e081      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800955c:	e07c      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009566:	e077      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009570:	e072      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800957a:	e06d      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009584:	e068      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	75fb      	strb	r3, [r7, #23]
        break;
 800958a:	e065      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d15d      	bne.n	8009654 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	2b0d      	cmp	r3, #13
 800959c:	d857      	bhi.n	800964e <HAL_TIM_RegisterCallback+0x2a6>
 800959e:	a201      	add	r2, pc, #4	@ (adr r2, 80095a4 <HAL_TIM_RegisterCallback+0x1fc>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095dd 	.word	0x080095dd
 80095a8:	080095e5 	.word	0x080095e5
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	080095f5 	.word	0x080095f5
 80095b4:	080095fd 	.word	0x080095fd
 80095b8:	08009605 	.word	0x08009605
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	08009615 	.word	0x08009615
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	08009625 	.word	0x08009625
 80095cc:	0800962d 	.word	0x0800962d
 80095d0:	08009635 	.word	0x08009635
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	08009645 	.word	0x08009645
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80095e2:	e039      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80095ea:	e035      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80095f2:	e031      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80095fa:	e02d      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009602:	e029      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800960a:	e025      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009612:	e021      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800961a:	e01d      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009622:	e019      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800962a:	e015      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009632:	e011      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800963a:	e00d      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009642:	e009      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800964c:	e004      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
        break;
 8009652:	e001      	b.n	8009658 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop

08009668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a4c      	ldr	r2, [pc, #304]	@ (80097ac <TIM_Base_SetConfig+0x144>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d017      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009686:	d013      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a49      	ldr	r2, [pc, #292]	@ (80097b0 <TIM_Base_SetConfig+0x148>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00f      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a48      	ldr	r2, [pc, #288]	@ (80097b4 <TIM_Base_SetConfig+0x14c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00b      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a47      	ldr	r2, [pc, #284]	@ (80097b8 <TIM_Base_SetConfig+0x150>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a46      	ldr	r2, [pc, #280]	@ (80097bc <TIM_Base_SetConfig+0x154>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_Base_SetConfig+0x48>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a45      	ldr	r2, [pc, #276]	@ (80097c0 <TIM_Base_SetConfig+0x158>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d108      	bne.n	80096c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a39      	ldr	r2, [pc, #228]	@ (80097ac <TIM_Base_SetConfig+0x144>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d023      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d0:	d01f      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a36      	ldr	r2, [pc, #216]	@ (80097b0 <TIM_Base_SetConfig+0x148>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01b      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a35      	ldr	r2, [pc, #212]	@ (80097b4 <TIM_Base_SetConfig+0x14c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d017      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a34      	ldr	r2, [pc, #208]	@ (80097b8 <TIM_Base_SetConfig+0x150>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d013      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a33      	ldr	r2, [pc, #204]	@ (80097bc <TIM_Base_SetConfig+0x154>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00f      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a33      	ldr	r2, [pc, #204]	@ (80097c4 <TIM_Base_SetConfig+0x15c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00b      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a32      	ldr	r2, [pc, #200]	@ (80097c8 <TIM_Base_SetConfig+0x160>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d007      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a31      	ldr	r2, [pc, #196]	@ (80097cc <TIM_Base_SetConfig+0x164>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_Base_SetConfig+0xaa>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a2c      	ldr	r2, [pc, #176]	@ (80097c0 <TIM_Base_SetConfig+0x158>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d108      	bne.n	8009724 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a18      	ldr	r2, [pc, #96]	@ (80097ac <TIM_Base_SetConfig+0x144>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d013      	beq.n	8009778 <TIM_Base_SetConfig+0x110>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a1a      	ldr	r2, [pc, #104]	@ (80097bc <TIM_Base_SetConfig+0x154>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00f      	beq.n	8009778 <TIM_Base_SetConfig+0x110>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a1a      	ldr	r2, [pc, #104]	@ (80097c4 <TIM_Base_SetConfig+0x15c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d00b      	beq.n	8009778 <TIM_Base_SetConfig+0x110>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a19      	ldr	r2, [pc, #100]	@ (80097c8 <TIM_Base_SetConfig+0x160>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d007      	beq.n	8009778 <TIM_Base_SetConfig+0x110>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a18      	ldr	r2, [pc, #96]	@ (80097cc <TIM_Base_SetConfig+0x164>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_Base_SetConfig+0x110>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a13      	ldr	r2, [pc, #76]	@ (80097c0 <TIM_Base_SetConfig+0x158>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d103      	bne.n	8009780 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b01      	cmp	r3, #1
 8009790:	d105      	bne.n	800979e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	611a      	str	r2, [r3, #16]
  }
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40012c00 	.word	0x40012c00
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40013400 	.word	0x40013400
 80097c0:	40015000 	.word	0x40015000
 80097c4:	40014000 	.word	0x40014000
 80097c8:	40014400 	.word	0x40014400
 80097cc:	40014800 	.word	0x40014800

080097d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	f023 0201 	bic.w	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0303 	bic.w	r3, r3, #3
 800980a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f023 0302 	bic.w	r3, r3, #2
 800981c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	4313      	orrs	r3, r2
 8009826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a30      	ldr	r2, [pc, #192]	@ (80098ec <TIM_OC1_SetConfig+0x11c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d013      	beq.n	8009858 <TIM_OC1_SetConfig+0x88>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a2f      	ldr	r2, [pc, #188]	@ (80098f0 <TIM_OC1_SetConfig+0x120>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00f      	beq.n	8009858 <TIM_OC1_SetConfig+0x88>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a2e      	ldr	r2, [pc, #184]	@ (80098f4 <TIM_OC1_SetConfig+0x124>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00b      	beq.n	8009858 <TIM_OC1_SetConfig+0x88>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a2d      	ldr	r2, [pc, #180]	@ (80098f8 <TIM_OC1_SetConfig+0x128>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d007      	beq.n	8009858 <TIM_OC1_SetConfig+0x88>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a2c      	ldr	r2, [pc, #176]	@ (80098fc <TIM_OC1_SetConfig+0x12c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_OC1_SetConfig+0x88>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a2b      	ldr	r2, [pc, #172]	@ (8009900 <TIM_OC1_SetConfig+0x130>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d10c      	bne.n	8009872 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f023 0308 	bic.w	r3, r3, #8
 800985e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 0304 	bic.w	r3, r3, #4
 8009870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a1d      	ldr	r2, [pc, #116]	@ (80098ec <TIM_OC1_SetConfig+0x11c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d013      	beq.n	80098a2 <TIM_OC1_SetConfig+0xd2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1c      	ldr	r2, [pc, #112]	@ (80098f0 <TIM_OC1_SetConfig+0x120>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00f      	beq.n	80098a2 <TIM_OC1_SetConfig+0xd2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a1b      	ldr	r2, [pc, #108]	@ (80098f4 <TIM_OC1_SetConfig+0x124>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00b      	beq.n	80098a2 <TIM_OC1_SetConfig+0xd2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a1a      	ldr	r2, [pc, #104]	@ (80098f8 <TIM_OC1_SetConfig+0x128>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d007      	beq.n	80098a2 <TIM_OC1_SetConfig+0xd2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a19      	ldr	r2, [pc, #100]	@ (80098fc <TIM_OC1_SetConfig+0x12c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d003      	beq.n	80098a2 <TIM_OC1_SetConfig+0xd2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <TIM_OC1_SetConfig+0x130>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d111      	bne.n	80098c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	621a      	str	r2, [r3, #32]
}
 80098e0:	bf00      	nop
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	40012c00 	.word	0x40012c00
 80098f0:	40013400 	.word	0x40013400
 80098f4:	40014000 	.word	0x40014000
 80098f8:	40014400 	.word	0x40014400
 80098fc:	40014800 	.word	0x40014800
 8009900:	40015000 	.word	0x40015000

08009904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	f023 0210 	bic.w	r2, r3, #16
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800993e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f023 0320 	bic.w	r3, r3, #32
 8009952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a2c      	ldr	r2, [pc, #176]	@ (8009a14 <TIM_OC2_SetConfig+0x110>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d007      	beq.n	8009978 <TIM_OC2_SetConfig+0x74>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a2b      	ldr	r2, [pc, #172]	@ (8009a18 <TIM_OC2_SetConfig+0x114>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_OC2_SetConfig+0x74>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a2a      	ldr	r2, [pc, #168]	@ (8009a1c <TIM_OC2_SetConfig+0x118>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d10d      	bne.n	8009994 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800997e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a1f      	ldr	r2, [pc, #124]	@ (8009a14 <TIM_OC2_SetConfig+0x110>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <TIM_OC2_SetConfig+0xc0>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a18 <TIM_OC2_SetConfig+0x114>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00f      	beq.n	80099c4 <TIM_OC2_SetConfig+0xc0>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a20 <TIM_OC2_SetConfig+0x11c>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00b      	beq.n	80099c4 <TIM_OC2_SetConfig+0xc0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009a24 <TIM_OC2_SetConfig+0x120>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d007      	beq.n	80099c4 <TIM_OC2_SetConfig+0xc0>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a28 <TIM_OC2_SetConfig+0x124>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_OC2_SetConfig+0xc0>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a17      	ldr	r2, [pc, #92]	@ (8009a1c <TIM_OC2_SetConfig+0x118>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d113      	bne.n	80099ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40012c00 	.word	0x40012c00
 8009a18:	40013400 	.word	0x40013400
 8009a1c:	40015000 	.word	0x40015000
 8009a20:	40014000 	.word	0x40014000
 8009a24:	40014400 	.word	0x40014400
 8009a28:	40014800 	.word	0x40014800

08009a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a2b      	ldr	r2, [pc, #172]	@ (8009b38 <TIM_OC3_SetConfig+0x10c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_OC3_SetConfig+0x72>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a2a      	ldr	r2, [pc, #168]	@ (8009b3c <TIM_OC3_SetConfig+0x110>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_OC3_SetConfig+0x72>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a29      	ldr	r2, [pc, #164]	@ (8009b40 <TIM_OC3_SetConfig+0x114>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d10d      	bne.n	8009aba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1e      	ldr	r2, [pc, #120]	@ (8009b38 <TIM_OC3_SetConfig+0x10c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <TIM_OC3_SetConfig+0xbe>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8009b3c <TIM_OC3_SetConfig+0x110>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00f      	beq.n	8009aea <TIM_OC3_SetConfig+0xbe>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b44 <TIM_OC3_SetConfig+0x118>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <TIM_OC3_SetConfig+0xbe>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b48 <TIM_OC3_SetConfig+0x11c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d007      	beq.n	8009aea <TIM_OC3_SetConfig+0xbe>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	@ (8009b4c <TIM_OC3_SetConfig+0x120>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_OC3_SetConfig+0xbe>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <TIM_OC3_SetConfig+0x114>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d113      	bne.n	8009b12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	621a      	str	r2, [r3, #32]
}
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	40012c00 	.word	0x40012c00
 8009b3c:	40013400 	.word	0x40013400
 8009b40:	40015000 	.word	0x40015000
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800

08009b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	031b      	lsls	r3, r3, #12
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a2c      	ldr	r2, [pc, #176]	@ (8009c60 <TIM_OC4_SetConfig+0x110>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d007      	beq.n	8009bc4 <TIM_OC4_SetConfig+0x74>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8009c64 <TIM_OC4_SetConfig+0x114>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d003      	beq.n	8009bc4 <TIM_OC4_SetConfig+0x74>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009c68 <TIM_OC4_SetConfig+0x118>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d10d      	bne.n	8009be0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	031b      	lsls	r3, r3, #12
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a1f      	ldr	r2, [pc, #124]	@ (8009c60 <TIM_OC4_SetConfig+0x110>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d013      	beq.n	8009c10 <TIM_OC4_SetConfig+0xc0>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a1e      	ldr	r2, [pc, #120]	@ (8009c64 <TIM_OC4_SetConfig+0x114>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00f      	beq.n	8009c10 <TIM_OC4_SetConfig+0xc0>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c6c <TIM_OC4_SetConfig+0x11c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d00b      	beq.n	8009c10 <TIM_OC4_SetConfig+0xc0>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8009c70 <TIM_OC4_SetConfig+0x120>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d007      	beq.n	8009c10 <TIM_OC4_SetConfig+0xc0>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a1c      	ldr	r2, [pc, #112]	@ (8009c74 <TIM_OC4_SetConfig+0x124>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d003      	beq.n	8009c10 <TIM_OC4_SetConfig+0xc0>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a17      	ldr	r2, [pc, #92]	@ (8009c68 <TIM_OC4_SetConfig+0x118>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d113      	bne.n	8009c38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	019b      	lsls	r3, r3, #6
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	019b      	lsls	r3, r3, #6
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40012c00 	.word	0x40012c00
 8009c64:	40013400 	.word	0x40013400
 8009c68:	40015000 	.word	0x40015000
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800

08009c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a19      	ldr	r2, [pc, #100]	@ (8009d34 <TIM_OC5_SetConfig+0xbc>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d013      	beq.n	8009cfa <TIM_OC5_SetConfig+0x82>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a18      	ldr	r2, [pc, #96]	@ (8009d38 <TIM_OC5_SetConfig+0xc0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d00f      	beq.n	8009cfa <TIM_OC5_SetConfig+0x82>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a17      	ldr	r2, [pc, #92]	@ (8009d3c <TIM_OC5_SetConfig+0xc4>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00b      	beq.n	8009cfa <TIM_OC5_SetConfig+0x82>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a16      	ldr	r2, [pc, #88]	@ (8009d40 <TIM_OC5_SetConfig+0xc8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d007      	beq.n	8009cfa <TIM_OC5_SetConfig+0x82>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a15      	ldr	r2, [pc, #84]	@ (8009d44 <TIM_OC5_SetConfig+0xcc>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d003      	beq.n	8009cfa <TIM_OC5_SetConfig+0x82>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a14      	ldr	r2, [pc, #80]	@ (8009d48 <TIM_OC5_SetConfig+0xd0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d109      	bne.n	8009d0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	40012c00 	.word	0x40012c00
 8009d38:	40013400 	.word	0x40013400
 8009d3c:	40014000 	.word	0x40014000
 8009d40:	40014400 	.word	0x40014400
 8009d44:	40014800 	.word	0x40014800
 8009d48:	40015000 	.word	0x40015000

08009d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	021b      	lsls	r3, r3, #8
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	051b      	lsls	r3, r3, #20
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e0c <TIM_OC6_SetConfig+0xc0>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d013      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x84>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a19      	ldr	r2, [pc, #100]	@ (8009e10 <TIM_OC6_SetConfig+0xc4>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00f      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x84>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a18      	ldr	r2, [pc, #96]	@ (8009e14 <TIM_OC6_SetConfig+0xc8>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x84>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a17      	ldr	r2, [pc, #92]	@ (8009e18 <TIM_OC6_SetConfig+0xcc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x84>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <TIM_OC6_SetConfig+0xd0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x84>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a15      	ldr	r2, [pc, #84]	@ (8009e20 <TIM_OC6_SetConfig+0xd4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d109      	bne.n	8009de4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	40012c00 	.word	0x40012c00
 8009e10:	40013400 	.word	0x40013400
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40014400 	.word	0x40014400
 8009e1c:	40014800 	.word	0x40014800
 8009e20:	40015000 	.word	0x40015000

08009e24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e44:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	4a56      	ldr	r2, [pc, #344]	@ (8009fcc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	f000 80a2 	beq.w	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009e7a:	4a54      	ldr	r2, [pc, #336]	@ (8009fcc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	f200 809b 	bhi.w	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009e82:	4a53      	ldr	r2, [pc, #332]	@ (8009fd0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f000 809a 	beq.w	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009e8a:	4a51      	ldr	r2, [pc, #324]	@ (8009fd0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	f200 8093 	bhi.w	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009e92:	4a50      	ldr	r2, [pc, #320]	@ (8009fd4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	f000 8092 	beq.w	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8009fd4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f200 808b 	bhi.w	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ea2:	4a4d      	ldr	r2, [pc, #308]	@ (8009fd8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	f000 808a 	beq.w	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8009fd8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	f200 8083 	bhi.w	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8009fdc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	f000 8082 	beq.w	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009eba:	4a48      	ldr	r2, [pc, #288]	@ (8009fdc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d87b      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ec0:	4a47      	ldr	r2, [pc, #284]	@ (8009fe0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d07b      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009ec6:	4a46      	ldr	r2, [pc, #280]	@ (8009fe0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d875      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ecc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ed0:	d075      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009ed2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ed6:	d86f      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ed8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009edc:	d06f      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ee2:	d869      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ee4:	2b70      	cmp	r3, #112	@ 0x70
 8009ee6:	d01a      	beq.n	8009f1e <TIM_SlaveTimer_SetConfig+0xfa>
 8009ee8:	2b70      	cmp	r3, #112	@ 0x70
 8009eea:	d865      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009eec:	2b60      	cmp	r3, #96	@ 0x60
 8009eee:	d059      	beq.n	8009fa4 <TIM_SlaveTimer_SetConfig+0x180>
 8009ef0:	2b60      	cmp	r3, #96	@ 0x60
 8009ef2:	d861      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ef4:	2b50      	cmp	r3, #80	@ 0x50
 8009ef6:	d04b      	beq.n	8009f90 <TIM_SlaveTimer_SetConfig+0x16c>
 8009ef8:	2b50      	cmp	r3, #80	@ 0x50
 8009efa:	d85d      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009efc:	2b40      	cmp	r3, #64	@ 0x40
 8009efe:	d019      	beq.n	8009f34 <TIM_SlaveTimer_SetConfig+0x110>
 8009f00:	2b40      	cmp	r3, #64	@ 0x40
 8009f02:	d859      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f04:	2b30      	cmp	r3, #48	@ 0x30
 8009f06:	d05a      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009f08:	2b30      	cmp	r3, #48	@ 0x30
 8009f0a:	d855      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d056      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d851      	bhi.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d052      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009f18:	2b10      	cmp	r3, #16
 8009f1a:	d050      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x19a>
 8009f1c:	e04c      	b.n	8009fb8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009f2e:	f000 f9ff 	bl	800a330 <TIM_ETR_SetConfig>
      break;
 8009f32:	e045      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b05      	cmp	r3, #5
 8009f3a:	d004      	beq.n	8009f46 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009f40:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009f44:	d101      	bne.n	8009f4a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e03b      	b.n	8009fc2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6a1a      	ldr	r2, [r3, #32]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 0201 	bic.w	r2, r2, #1
 8009f60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	621a      	str	r2, [r3, #32]
      break;
 8009f8e:	e017      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f000 f895 	bl	800a0cc <TIM_TI1_ConfigInputStage>
      break;
 8009fa2:	e00d      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f000 f8f7 	bl	800a1a4 <TIM_TI2_ConfigInputStage>
      break;
 8009fb6:	e003      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbc:	e000      	b.n	8009fc0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009fbe:	bf00      	nop
  }

  return status;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	00100070 	.word	0x00100070
 8009fd0:	00100060 	.word	0x00100060
 8009fd4:	00100050 	.word	0x00100050
 8009fd8:	00100040 	.word	0x00100040
 8009fdc:	00100030 	.word	0x00100030
 8009fe0:	00100020 	.word	0x00100020

08009fe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f023 0201 	bic.w	r2, r3, #1
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4a28      	ldr	r2, [pc, #160]	@ (800a0b0 <TIM_TI1_SetConfig+0xcc>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d01b      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a018:	d017      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4a25      	ldr	r2, [pc, #148]	@ (800a0b4 <TIM_TI1_SetConfig+0xd0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d013      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4a24      	ldr	r2, [pc, #144]	@ (800a0b8 <TIM_TI1_SetConfig+0xd4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00f      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4a23      	ldr	r2, [pc, #140]	@ (800a0bc <TIM_TI1_SetConfig+0xd8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d00b      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4a22      	ldr	r2, [pc, #136]	@ (800a0c0 <TIM_TI1_SetConfig+0xdc>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d007      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4a21      	ldr	r2, [pc, #132]	@ (800a0c4 <TIM_TI1_SetConfig+0xe0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d003      	beq.n	800a04a <TIM_TI1_SetConfig+0x66>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4a20      	ldr	r2, [pc, #128]	@ (800a0c8 <TIM_TI1_SetConfig+0xe4>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d101      	bne.n	800a04e <TIM_TI1_SetConfig+0x6a>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <TIM_TI1_SetConfig+0x6c>
 800a04e:	2300      	movs	r3, #0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e003      	b.n	800a06e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f043 0301 	orr.w	r3, r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	4313      	orrs	r3, r2
 800a080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f023 030a 	bic.w	r3, r3, #10
 800a088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 030a 	and.w	r3, r3, #10
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	40012c00 	.word	0x40012c00
 800a0b4:	40000400 	.word	0x40000400
 800a0b8:	40000800 	.word	0x40000800
 800a0bc:	40000c00 	.word	0x40000c00
 800a0c0:	40013400 	.word	0x40013400
 800a0c4:	40014000 	.word	0x40014000
 800a0c8:	40015000 	.word	0x40015000

0800a0cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	f023 0201 	bic.w	r2, r3, #1
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f023 030a 	bic.w	r3, r3, #10
 800a108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	621a      	str	r2, [r3, #32]
}
 800a11e:	bf00      	nop
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b087      	sub	sp, #28
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f023 0210 	bic.w	r2, r3, #16
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	031b      	lsls	r3, r3, #12
 800a16e:	b29b      	uxth	r3, r3
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4313      	orrs	r3, r2
 800a174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a17c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	621a      	str	r2, [r3, #32]
}
 800a198:	bf00      	nop
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f023 0210 	bic.w	r2, r3, #16
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	031b      	lsls	r3, r3, #12
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	621a      	str	r2, [r3, #32]
}
 800a1f8:	bf00      	nop
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f023 0303 	bic.w	r3, r3, #3
 800a230:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4313      	orrs	r3, r2
 800a238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a240:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	b2db      	uxtb	r3, r3
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a254:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	621a      	str	r2, [r3, #32]
}
 800a270:	bf00      	nop
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	031b      	lsls	r3, r3, #12
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a2ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	031b      	lsls	r3, r3, #12
 800a2d4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a30c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	f043 0307 	orr.w	r3, r3, #7
 800a31c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	609a      	str	r2, [r3, #8]
}
 800a324:	bf00      	nop
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a34a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	021a      	lsls	r2, r3, #8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	431a      	orrs	r2, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4313      	orrs	r3, r2
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	609a      	str	r2, [r3, #8]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2201      	movs	r2, #1
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1a      	ldr	r2, [r3, #32]
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	43db      	mvns	r3, r3
 800a392:	401a      	ands	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1a      	ldr	r2, [r3, #32]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f003 031f 	and.w	r3, r3, #31
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a26      	ldr	r2, [pc, #152]	@ (800a460 <TIM_ResetCallback+0xa4>)
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a25      	ldr	r2, [pc, #148]	@ (800a464 <TIM_ResetCallback+0xa8>)
 800a3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a24      	ldr	r2, [pc, #144]	@ (800a468 <TIM_ResetCallback+0xac>)
 800a3d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a23      	ldr	r2, [pc, #140]	@ (800a46c <TIM_ResetCallback+0xb0>)
 800a3e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a22      	ldr	r2, [pc, #136]	@ (800a470 <TIM_ResetCallback+0xb4>)
 800a3e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a21      	ldr	r2, [pc, #132]	@ (800a474 <TIM_ResetCallback+0xb8>)
 800a3f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a20      	ldr	r2, [pc, #128]	@ (800a478 <TIM_ResetCallback+0xbc>)
 800a3f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a47c <TIM_ResetCallback+0xc0>)
 800a400:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a1e      	ldr	r2, [pc, #120]	@ (800a480 <TIM_ResetCallback+0xc4>)
 800a408:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a1d      	ldr	r2, [pc, #116]	@ (800a484 <TIM_ResetCallback+0xc8>)
 800a410:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a1c      	ldr	r2, [pc, #112]	@ (800a488 <TIM_ResetCallback+0xcc>)
 800a418:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1b      	ldr	r2, [pc, #108]	@ (800a48c <TIM_ResetCallback+0xd0>)
 800a420:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1a      	ldr	r2, [pc, #104]	@ (800a490 <TIM_ResetCallback+0xd4>)
 800a428:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a19      	ldr	r2, [pc, #100]	@ (800a494 <TIM_ResetCallback+0xd8>)
 800a430:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a18      	ldr	r2, [pc, #96]	@ (800a498 <TIM_ResetCallback+0xdc>)
 800a438:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a17      	ldr	r2, [pc, #92]	@ (800a49c <TIM_ResetCallback+0xe0>)
 800a440:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a16      	ldr	r2, [pc, #88]	@ (800a4a0 <TIM_ResetCallback+0xe4>)
 800a448:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a15      	ldr	r2, [pc, #84]	@ (800a4a4 <TIM_ResetCallback+0xe8>)
 800a450:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	080048e9 	.word	0x080048e9
 800a464:	080092f5 	.word	0x080092f5
 800a468:	0800936d 	.word	0x0800936d
 800a46c:	08009381 	.word	0x08009381
 800a470:	0800931d 	.word	0x0800931d
 800a474:	08009331 	.word	0x08009331
 800a478:	08009309 	.word	0x08009309
 800a47c:	08009345 	.word	0x08009345
 800a480:	08009359 	.word	0x08009359
 800a484:	08009395 	.word	0x08009395
 800a488:	0800a6fd 	.word	0x0800a6fd
 800a48c:	0800a711 	.word	0x0800a711
 800a490:	0800a725 	.word	0x0800a725
 800a494:	0800a739 	.word	0x0800a739
 800a498:	0800a74d 	.word	0x0800a74d
 800a49c:	0800a761 	.word	0x0800a761
 800a4a0:	0800a775 	.word	0x0800a775
 800a4a4:	0800a789 	.word	0x0800a789

0800a4a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d101      	bne.n	800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e074      	b.n	800a5aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a34      	ldr	r2, [pc, #208]	@ (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d009      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a33      	ldr	r2, [pc, #204]	@ (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d004      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a31      	ldr	r2, [pc, #196]	@ (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d108      	bne.n	800a510 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a504:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a21      	ldr	r2, [pc, #132]	@ (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d022      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a540:	d01d      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a1f      	ldr	r2, [pc, #124]	@ (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d018      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a1c      	ldr	r2, [pc, #112]	@ (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00e      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a15      	ldr	r2, [pc, #84]	@ (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d009      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a18      	ldr	r2, [pc, #96]	@ (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d004      	beq.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a11      	ldr	r2, [pc, #68]	@ (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d10c      	bne.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40012c00 	.word	0x40012c00
 800a5bc:	40013400 	.word	0x40013400
 800a5c0:	40015000 	.word	0x40015000
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40014000 	.word	0x40014000

0800a5d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e078      	b.n	800a6e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	041b      	lsls	r3, r3, #16
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d009      	beq.n	800a696 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d004      	beq.n	800a696 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a19      	ldr	r2, [pc, #100]	@ (800a6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d11c      	bne.n	800a6d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a0:	051b      	lsls	r3, r3, #20
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40012c00 	.word	0x40012c00
 800a6f4:	40013400 	.word	0x40013400
 800a6f8:	40015000 	.word	0x40015000

0800a6fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e050      	b.n	800a850 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d114      	bne.n	800a7e2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fde5 	bl	800b390 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a21      	ldr	r2, [pc, #132]	@ (800a858 <HAL_UART_Init+0xbc>)
 800a7d4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2224      	movs	r2, #36	@ 0x24
 800a7e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0201 	bic.w	r2, r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f912 	bl	800ba2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fe13 	bl	800b434 <UART_SetConfig>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d101      	bne.n	800a818 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e01b      	b.n	800a850 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 f991 	bl	800bb70 <UART_CheckIdleState>
 800a84e:	4603      	mov	r3, r0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	08005c75 	.word	0x08005c75

0800a85c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	460b      	mov	r3, r1
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d109      	bne.n	800a888 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e09c      	b.n	800a9c2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d16c      	bne.n	800a96c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a892:	7afb      	ldrb	r3, [r7, #11]
 800a894:	2b0c      	cmp	r3, #12
 800a896:	d85e      	bhi.n	800a956 <HAL_UART_RegisterCallback+0xfa>
 800a898:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a0 <HAL_UART_RegisterCallback+0x44>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8d5 	.word	0x0800a8d5
 800a8a4:	0800a8df 	.word	0x0800a8df
 800a8a8:	0800a8e9 	.word	0x0800a8e9
 800a8ac:	0800a8f3 	.word	0x0800a8f3
 800a8b0:	0800a8fd 	.word	0x0800a8fd
 800a8b4:	0800a907 	.word	0x0800a907
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a91b 	.word	0x0800a91b
 800a8c0:	0800a925 	.word	0x0800a925
 800a8c4:	0800a92f 	.word	0x0800a92f
 800a8c8:	0800a939 	.word	0x0800a939
 800a8cc:	0800a943 	.word	0x0800a943
 800a8d0:	0800a94d 	.word	0x0800a94d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a8dc:	e070      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a8e6:	e06b      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a8f0:	e066      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a8fa:	e061      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a904:	e05c      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a90e:	e057      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a918:	e052      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a922:	e04d      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a92c:	e048      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a936:	e043      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a940:	e03e      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a94a:	e039      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a954:	e034      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a95c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	75fb      	strb	r3, [r7, #23]
        break;
 800a96a:	e029      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a972:	2b00      	cmp	r3, #0
 800a974:	d11a      	bne.n	800a9ac <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	2b0b      	cmp	r3, #11
 800a97a:	d002      	beq.n	800a982 <HAL_UART_RegisterCallback+0x126>
 800a97c:	2b0c      	cmp	r3, #12
 800a97e:	d005      	beq.n	800a98c <HAL_UART_RegisterCallback+0x130>
 800a980:	e009      	b.n	800a996 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a98a:	e019      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a994:	e014      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a99c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	75fb      	strb	r3, [r7, #23]
        break;
 800a9aa:	e009      	b.n	800a9c0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop

0800a9d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	@ 0x28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	d167      	bne.n	800aab8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <HAL_UART_Transmit_DMA+0x24>
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e060      	b.n	800aaba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	88fa      	ldrh	r2, [r7, #6]
 800aa02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2221      	movs	r2, #33	@ 0x21
 800aa1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d028      	beq.n	800aa78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa2a:	4a26      	ldr	r2, [pc, #152]	@ (800aac4 <HAL_UART_Transmit_DMA+0xf4>)
 800aa2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa32:	4a25      	ldr	r2, [pc, #148]	@ (800aac8 <HAL_UART_Transmit_DMA+0xf8>)
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa3a:	4a24      	ldr	r2, [pc, #144]	@ (800aacc <HAL_UART_Transmit_DMA+0xfc>)
 800aa3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa42:	2200      	movs	r2, #0
 800aa44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3328      	adds	r3, #40	@ 0x28
 800aa56:	461a      	mov	r2, r3
 800aa58:	88fb      	ldrh	r3, [r7, #6]
 800aa5a:	f7fb fcd9 	bl	8006410 <HAL_DMA_Start_IT>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2210      	movs	r2, #16
 800aa68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e020      	b.n	800aaba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3308      	adds	r3, #8
 800aa86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa96:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa0:	623a      	str	r2, [r7, #32]
 800aaa2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	6a3a      	ldr	r2, [r7, #32]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e5      	bne.n	800aa80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	e000      	b.n	800aaba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aab8:	2302      	movs	r3, #2
  }
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3728      	adds	r7, #40	@ 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	0800c03b 	.word	0x0800c03b
 800aac8:	0800c0d9 	.word	0x0800c0d9
 800aacc:	0800c273 	.word	0x0800c273

0800aad0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	@ 0x28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d137      	bne.n	800ab58 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_UART_Receive_DMA+0x24>
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e030      	b.n	800ab5a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a18      	ldr	r2, [pc, #96]	@ (800ab64 <HAL_UART_Receive_DMA+0x94>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d01f      	beq.n	800ab48 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d018      	beq.n	800ab48 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	613b      	str	r3, [r7, #16]
   return(result);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	623b      	str	r3, [r7, #32]
 800ab36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69f9      	ldr	r1, [r7, #28]
 800ab3a:	6a3a      	ldr	r2, [r7, #32]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab48:	88fb      	ldrh	r3, [r7, #6]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f001 f926 	bl	800bda0 <UART_Start_Receive_DMA>
 800ab54:	4603      	mov	r3, r0
 800ab56:	e000      	b.n	800ab5a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab58:	2302      	movs	r3, #2
  }
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3728      	adds	r7, #40	@ 0x28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	40008000 	.word	0x40008000

0800ab68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b0ba      	sub	sp, #232	@ 0xe8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab92:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ab96:	4013      	ands	r3, r2
 800ab98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ab9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d11b      	bne.n	800abdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b00      	cmp	r3, #0
 800abae:	d015      	beq.n	800abdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 8312 	beq.w	800b1f6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
      }
      return;
 800abda:	e30c      	b.n	800b1f6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800abdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 8129 	beq.w	800ae38 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800abe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800abea:	4b90      	ldr	r3, [pc, #576]	@ (800ae2c <HAL_UART_IRQHandler+0x2c4>)
 800abec:	4013      	ands	r3, r2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800abf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800abf6:	4b8e      	ldr	r3, [pc, #568]	@ (800ae30 <HAL_UART_IRQHandler+0x2c8>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 811c 	beq.w	800ae38 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d011      	beq.n	800ac30 <HAL_UART_IRQHandler+0xc8>
 800ac0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac26:	f043 0201 	orr.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d011      	beq.n	800ac60 <HAL_UART_IRQHandler+0xf8>
 800ac3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac56:	f043 0204 	orr.w	r2, r3, #4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d011      	beq.n	800ac90 <HAL_UART_IRQHandler+0x128>
 800ac6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac86:	f043 0202 	orr.w	r2, r3, #2
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d017      	beq.n	800accc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d105      	bne.n	800acb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800acac:	4b5f      	ldr	r3, [pc, #380]	@ (800ae2c <HAL_UART_IRQHandler+0x2c4>)
 800acae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2208      	movs	r2, #8
 800acba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc2:	f043 0208 	orr.w	r2, r3, #8
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800accc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d012      	beq.n	800acfe <HAL_UART_IRQHandler+0x196>
 800acd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00c      	beq.n	800acfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acf4:	f043 0220 	orr.w	r2, r3, #32
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8278 	beq.w	800b1fa <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d013      	beq.n	800ad3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad52:	2b40      	cmp	r3, #64	@ 0x40
 800ad54:	d005      	beq.n	800ad62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d058      	beq.n	800ae14 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f001 f903 	bl	800bf6e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad72:	2b40      	cmp	r3, #64	@ 0x40
 800ad74:	d148      	bne.n	800ae08 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ad8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ada2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ada6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800adae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800adba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1d9      	bne.n	800ad76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d017      	beq.n	800adfc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add2:	4a18      	ldr	r2, [pc, #96]	@ (800ae34 <HAL_UART_IRQHandler+0x2cc>)
 800add4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800addc:	4618      	mov	r0, r3
 800adde:	f7fb fbeb 	bl	80065b8 <HAL_DMA_Abort_IT>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01f      	beq.n	800ae28 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800adf6:	4610      	mov	r0, r2
 800adf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adfa:	e015      	b.n	800ae28 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae06:	e00f      	b.n	800ae28 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae12:	e009      	b.n	800ae28 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ae26:	e1e8      	b.n	800b1fa <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae28:	bf00      	nop
    return;
 800ae2a:	e1e6      	b.n	800b1fa <HAL_UART_IRQHandler+0x692>
 800ae2c:	10000001 	.word	0x10000001
 800ae30:	04000120 	.word	0x04000120
 800ae34:	0800c2f7 	.word	0x0800c2f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	f040 8176 	bne.w	800b12e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae46:	f003 0310 	and.w	r3, r3, #16
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 816f 	beq.w	800b12e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae54:	f003 0310 	and.w	r3, r3, #16
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 8168 	beq.w	800b12e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2210      	movs	r2, #16
 800ae64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae70:	2b40      	cmp	r3, #64	@ 0x40
 800ae72:	f040 80dc 	bne.w	800b02e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80b1 	beq.w	800aff0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	f080 80a9 	bcs.w	800aff0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aea4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f040 8087 	bne.w	800afca <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aeea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aefe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1da      	bne.n	800aebc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3308      	adds	r3, #8
 800af0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af18:	f023 0301 	bic.w	r3, r3, #1
 800af1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3308      	adds	r3, #8
 800af26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e1      	bne.n	800af06 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3308      	adds	r3, #8
 800af48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3308      	adds	r3, #8
 800af62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e3      	bne.n	800af42 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af98:	f023 0310 	bic.w	r3, r3, #16
 800af9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e4      	bne.n	800af88 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fb fa9e 	bl	8006506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800afe2:	b292      	uxth	r2, r2
 800afe4:	1a8a      	subs	r2, r1, r2
 800afe6:	b292      	uxth	r2, r2
 800afe8:	4611      	mov	r1, r2
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800afee:	e106      	b.n	800b1fe <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800affa:	429a      	cmp	r2, r3
 800affc:	f040 80ff 	bne.w	800b1fe <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b20      	cmp	r3, #32
 800b010:	f040 80f5 	bne.w	800b1fe <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b026:	4611      	mov	r1, r2
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	4798      	blx	r3
      return;
 800b02c:	e0e7      	b.n	800b1fe <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b048:	b29b      	uxth	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 80d9 	beq.w	800b202 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80d4 	beq.w	800b202 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b06e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b07c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b07e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e4      	bne.n	800b05a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	623b      	str	r3, [r7, #32]
   return(result);
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0a6:	f023 0301 	bic.w	r3, r3, #1
 800b0aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b0b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c0:	e841 2300 	strex	r3, r2, [r1]
 800b0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1e1      	bne.n	800b090 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f023 0310 	bic.w	r3, r3, #16
 800b0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b102:	61fb      	str	r3, [r7, #28]
 800b104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	69b9      	ldr	r1, [r7, #24]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	617b      	str	r3, [r7, #20]
   return(result);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e4      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2202      	movs	r2, #2
 800b11a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b122:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b126:	4611      	mov	r1, r2
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b12c:	e069      	b.n	800b202 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d010      	beq.n	800b15c <HAL_UART_IRQHandler+0x5f4>
 800b13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b13e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b14e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b15a:	e055      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b164:	2b00      	cmp	r3, #0
 800b166:	d014      	beq.n	800b192 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b16c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b170:	2b00      	cmp	r3, #0
 800b172:	d105      	bne.n	800b180 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d008      	beq.n	800b192 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b184:	2b00      	cmp	r3, #0
 800b186:	d03e      	beq.n	800b206 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
    }
    return;
 800b190:	e039      	b.n	800b206 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d009      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x64a>
 800b19e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 f8b7 	bl	800c31e <UART_EndTransmit_IT>
    return;
 800b1b0:	e02a      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x66e>
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1d4:	e018      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d012      	beq.n	800b208 <HAL_UART_IRQHandler+0x6a0>
 800b1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da0e      	bge.n	800b208 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1f4:	e008      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b1f6:	bf00      	nop
 800b1f8:	e006      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b1fa:	bf00      	nop
 800b1fc:	e004      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b1fe:	bf00      	nop
 800b200:	e002      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b202:	bf00      	nop
 800b204:	e000      	b.n	800b208 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b206:	bf00      	nop
  }
}
 800b208:	37e8      	adds	r7, #232	@ 0xe8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop

0800b210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a09      	ldr	r2, [pc, #36]	@ (800b2fc <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d009      	beq.n	800b2f0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	615a      	str	r2, [r3, #20]
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	40008000 	.word	0x40008000

0800b300 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a18      	ldr	r2, [pc, #96]	@ (800b370 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d027      	beq.n	800b362 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d120      	bne.n	800b35e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <HAL_UART_EnableReceiverTimeout+0x2a>
 800b326:	2302      	movs	r3, #2
 800b328:	e01c      	b.n	800b364 <HAL_UART_EnableReceiverTimeout+0x64>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2224      	movs	r2, #36	@ 0x24
 800b336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b348:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e002      	b.n	800b364 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b35e:	2302      	movs	r3, #2
 800b360:	e000      	b.n	800b364 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
  }
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	40008000 	.word	0x40008000

0800b374 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a1a      	ldr	r2, [pc, #104]	@ (800b404 <UART_InitCallbacksToDefault+0x74>)
 800b39c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a19      	ldr	r2, [pc, #100]	@ (800b408 <UART_InitCallbacksToDefault+0x78>)
 800b3a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a18      	ldr	r2, [pc, #96]	@ (800b40c <UART_InitCallbacksToDefault+0x7c>)
 800b3ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a17      	ldr	r2, [pc, #92]	@ (800b410 <UART_InitCallbacksToDefault+0x80>)
 800b3b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a16      	ldr	r2, [pc, #88]	@ (800b414 <UART_InitCallbacksToDefault+0x84>)
 800b3bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a15      	ldr	r2, [pc, #84]	@ (800b418 <UART_InitCallbacksToDefault+0x88>)
 800b3c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a14      	ldr	r2, [pc, #80]	@ (800b41c <UART_InitCallbacksToDefault+0x8c>)
 800b3cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a13      	ldr	r2, [pc, #76]	@ (800b420 <UART_InitCallbacksToDefault+0x90>)
 800b3d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a12      	ldr	r2, [pc, #72]	@ (800b424 <UART_InitCallbacksToDefault+0x94>)
 800b3dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a11      	ldr	r2, [pc, #68]	@ (800b428 <UART_InitCallbacksToDefault+0x98>)
 800b3e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a10      	ldr	r2, [pc, #64]	@ (800b42c <UART_InitCallbacksToDefault+0x9c>)
 800b3ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a0f      	ldr	r2, [pc, #60]	@ (800b430 <UART_InitCallbacksToDefault+0xa0>)
 800b3f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	0800b225 	.word	0x0800b225
 800b408:	0800b211 	.word	0x0800b211
 800b40c:	0800b24d 	.word	0x0800b24d
 800b410:	0800b239 	.word	0x0800b239
 800b414:	0800b261 	.word	0x0800b261
 800b418:	0800b275 	.word	0x0800b275
 800b41c:	0800b289 	.word	0x0800b289
 800b420:	0800b29d 	.word	0x0800b29d
 800b424:	0800c379 	.word	0x0800c379
 800b428:	0800c38d 	.word	0x0800c38d
 800b42c:	0800c3a1 	.word	0x0800c3a1
 800b430:	0800b2b1 	.word	0x0800b2b1

0800b434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b438:	b08c      	sub	sp, #48	@ 0x30
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	431a      	orrs	r2, r3
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4313      	orrs	r3, r2
 800b45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4baa      	ldr	r3, [pc, #680]	@ (800b70c <UART_SetConfig+0x2d8>)
 800b464:	4013      	ands	r3, r2
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b46c:	430b      	orrs	r3, r1
 800b46e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a9f      	ldr	r2, [pc, #636]	@ (800b710 <UART_SetConfig+0x2dc>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d004      	beq.n	800b4a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b49c:	4313      	orrs	r3, r2
 800b49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b4aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4be:	f023 010f 	bic.w	r1, r3, #15
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a90      	ldr	r2, [pc, #576]	@ (800b714 <UART_SetConfig+0x2e0>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d125      	bne.n	800b524 <UART_SetConfig+0xf0>
 800b4d8:	4b8f      	ldr	r3, [pc, #572]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d81a      	bhi.n	800b51c <UART_SetConfig+0xe8>
 800b4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ec <UART_SetConfig+0xb8>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b4fd 	.word	0x0800b4fd
 800b4f0:	0800b50d 	.word	0x0800b50d
 800b4f4:	0800b505 	.word	0x0800b505
 800b4f8:	0800b515 	.word	0x0800b515
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b502:	e116      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b504:	2302      	movs	r3, #2
 800b506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b50a:	e112      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b512:	e10e      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51a:	e10a      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b522:	e106      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a7c      	ldr	r2, [pc, #496]	@ (800b71c <UART_SetConfig+0x2e8>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d138      	bne.n	800b5a0 <UART_SetConfig+0x16c>
 800b52e:	4b7a      	ldr	r3, [pc, #488]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b534:	f003 030c 	and.w	r3, r3, #12
 800b538:	2b0c      	cmp	r3, #12
 800b53a:	d82d      	bhi.n	800b598 <UART_SetConfig+0x164>
 800b53c:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <UART_SetConfig+0x110>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b579 	.word	0x0800b579
 800b548:	0800b599 	.word	0x0800b599
 800b54c:	0800b599 	.word	0x0800b599
 800b550:	0800b599 	.word	0x0800b599
 800b554:	0800b589 	.word	0x0800b589
 800b558:	0800b599 	.word	0x0800b599
 800b55c:	0800b599 	.word	0x0800b599
 800b560:	0800b599 	.word	0x0800b599
 800b564:	0800b581 	.word	0x0800b581
 800b568:	0800b599 	.word	0x0800b599
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	0800b599 	.word	0x0800b599
 800b574:	0800b591 	.word	0x0800b591
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57e:	e0d8      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b580:	2302      	movs	r3, #2
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b586:	e0d4      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b58e:	e0d0      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b590:	2308      	movs	r3, #8
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b596:	e0cc      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b598:	2310      	movs	r3, #16
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59e:	e0c8      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a5e      	ldr	r2, [pc, #376]	@ (800b720 <UART_SetConfig+0x2ec>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d125      	bne.n	800b5f6 <UART_SetConfig+0x1c2>
 800b5aa:	4b5b      	ldr	r3, [pc, #364]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b5b4:	2b30      	cmp	r3, #48	@ 0x30
 800b5b6:	d016      	beq.n	800b5e6 <UART_SetConfig+0x1b2>
 800b5b8:	2b30      	cmp	r3, #48	@ 0x30
 800b5ba:	d818      	bhi.n	800b5ee <UART_SetConfig+0x1ba>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d00a      	beq.n	800b5d6 <UART_SetConfig+0x1a2>
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	d814      	bhi.n	800b5ee <UART_SetConfig+0x1ba>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <UART_SetConfig+0x19a>
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d008      	beq.n	800b5de <UART_SetConfig+0x1aa>
 800b5cc:	e00f      	b.n	800b5ee <UART_SetConfig+0x1ba>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5d4:	e0ad      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5dc:	e0a9      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5de:	2304      	movs	r3, #4
 800b5e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5e4:	e0a5      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5e6:	2308      	movs	r3, #8
 800b5e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ec:	e0a1      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5ee:	2310      	movs	r3, #16
 800b5f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f4:	e09d      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a4a      	ldr	r2, [pc, #296]	@ (800b724 <UART_SetConfig+0x2f0>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d125      	bne.n	800b64c <UART_SetConfig+0x218>
 800b600:	4b45      	ldr	r3, [pc, #276]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b606:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b60a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b60c:	d016      	beq.n	800b63c <UART_SetConfig+0x208>
 800b60e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b610:	d818      	bhi.n	800b644 <UART_SetConfig+0x210>
 800b612:	2b80      	cmp	r3, #128	@ 0x80
 800b614:	d00a      	beq.n	800b62c <UART_SetConfig+0x1f8>
 800b616:	2b80      	cmp	r3, #128	@ 0x80
 800b618:	d814      	bhi.n	800b644 <UART_SetConfig+0x210>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <UART_SetConfig+0x1f0>
 800b61e:	2b40      	cmp	r3, #64	@ 0x40
 800b620:	d008      	beq.n	800b634 <UART_SetConfig+0x200>
 800b622:	e00f      	b.n	800b644 <UART_SetConfig+0x210>
 800b624:	2300      	movs	r3, #0
 800b626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b62a:	e082      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b62c:	2302      	movs	r3, #2
 800b62e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b632:	e07e      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b634:	2304      	movs	r3, #4
 800b636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b63a:	e07a      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b63c:	2308      	movs	r3, #8
 800b63e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b642:	e076      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b644:	2310      	movs	r3, #16
 800b646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b64a:	e072      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a35      	ldr	r2, [pc, #212]	@ (800b728 <UART_SetConfig+0x2f4>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d12a      	bne.n	800b6ac <UART_SetConfig+0x278>
 800b656:	4b30      	ldr	r3, [pc, #192]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b65c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b664:	d01a      	beq.n	800b69c <UART_SetConfig+0x268>
 800b666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b66a:	d81b      	bhi.n	800b6a4 <UART_SetConfig+0x270>
 800b66c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b670:	d00c      	beq.n	800b68c <UART_SetConfig+0x258>
 800b672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b676:	d815      	bhi.n	800b6a4 <UART_SetConfig+0x270>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <UART_SetConfig+0x250>
 800b67c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b680:	d008      	beq.n	800b694 <UART_SetConfig+0x260>
 800b682:	e00f      	b.n	800b6a4 <UART_SetConfig+0x270>
 800b684:	2300      	movs	r3, #0
 800b686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b68a:	e052      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b68c:	2302      	movs	r3, #2
 800b68e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b692:	e04e      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b694:	2304      	movs	r3, #4
 800b696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69a:	e04a      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b69c:	2308      	movs	r3, #8
 800b69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6a2:	e046      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6aa:	e042      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a17      	ldr	r2, [pc, #92]	@ (800b710 <UART_SetConfig+0x2dc>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d13a      	bne.n	800b72c <UART_SetConfig+0x2f8>
 800b6b6:	4b18      	ldr	r3, [pc, #96]	@ (800b718 <UART_SetConfig+0x2e4>)
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b6c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6c4:	d01a      	beq.n	800b6fc <UART_SetConfig+0x2c8>
 800b6c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6ca:	d81b      	bhi.n	800b704 <UART_SetConfig+0x2d0>
 800b6cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6d0:	d00c      	beq.n	800b6ec <UART_SetConfig+0x2b8>
 800b6d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6d6:	d815      	bhi.n	800b704 <UART_SetConfig+0x2d0>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <UART_SetConfig+0x2b0>
 800b6dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6e0:	d008      	beq.n	800b6f4 <UART_SetConfig+0x2c0>
 800b6e2:	e00f      	b.n	800b704 <UART_SetConfig+0x2d0>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ea:	e022      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6f2:	e01e      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6fa:	e01a      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b702:	e016      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b704:	2310      	movs	r3, #16
 800b706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b70a:	e012      	b.n	800b732 <UART_SetConfig+0x2fe>
 800b70c:	cfff69f3 	.word	0xcfff69f3
 800b710:	40008000 	.word	0x40008000
 800b714:	40013800 	.word	0x40013800
 800b718:	40021000 	.word	0x40021000
 800b71c:	40004400 	.word	0x40004400
 800b720:	40004800 	.word	0x40004800
 800b724:	40004c00 	.word	0x40004c00
 800b728:	40005000 	.word	0x40005000
 800b72c:	2310      	movs	r3, #16
 800b72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4aae      	ldr	r2, [pc, #696]	@ (800b9f0 <UART_SetConfig+0x5bc>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	f040 8097 	bne.w	800b86c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b73e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b742:	2b08      	cmp	r3, #8
 800b744:	d823      	bhi.n	800b78e <UART_SetConfig+0x35a>
 800b746:	a201      	add	r2, pc, #4	@ (adr r2, 800b74c <UART_SetConfig+0x318>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b78f 	.word	0x0800b78f
 800b754:	0800b779 	.word	0x0800b779
 800b758:	0800b78f 	.word	0x0800b78f
 800b75c:	0800b77f 	.word	0x0800b77f
 800b760:	0800b78f 	.word	0x0800b78f
 800b764:	0800b78f 	.word	0x0800b78f
 800b768:	0800b78f 	.word	0x0800b78f
 800b76c:	0800b787 	.word	0x0800b787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b770:	f7fc f812 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 800b774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b776:	e010      	b.n	800b79a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b778:	4b9e      	ldr	r3, [pc, #632]	@ (800b9f4 <UART_SetConfig+0x5c0>)
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b77c:	e00d      	b.n	800b79a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b77e:	f7fb ff9d 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800b782:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b784:	e009      	b.n	800b79a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b78a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b78c:	e005      	b.n	800b79a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8130 	beq.w	800ba02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a6:	4a94      	ldr	r2, [pc, #592]	@ (800b9f8 <UART_SetConfig+0x5c4>)
 800b7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d305      	bcc.n	800b7d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d903      	bls.n	800b7da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7d8:	e113      	b.n	800ba02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	2200      	movs	r2, #0
 800b7de:	60bb      	str	r3, [r7, #8]
 800b7e0:	60fa      	str	r2, [r7, #12]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e6:	4a84      	ldr	r2, [pc, #528]	@ (800b9f8 <UART_SetConfig+0x5c4>)
 800b7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	603b      	str	r3, [r7, #0]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7fc:	f7f5 fae0 	bl	8000dc0 <__aeabi_uldivmod>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4610      	mov	r0, r2
 800b806:	4619      	mov	r1, r3
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	020b      	lsls	r3, r1, #8
 800b812:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b816:	0202      	lsls	r2, r0, #8
 800b818:	6979      	ldr	r1, [r7, #20]
 800b81a:	6849      	ldr	r1, [r1, #4]
 800b81c:	0849      	lsrs	r1, r1, #1
 800b81e:	2000      	movs	r0, #0
 800b820:	460c      	mov	r4, r1
 800b822:	4605      	mov	r5, r0
 800b824:	eb12 0804 	adds.w	r8, r2, r4
 800b828:	eb43 0905 	adc.w	r9, r3, r5
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	469a      	mov	sl, r3
 800b834:	4693      	mov	fp, r2
 800b836:	4652      	mov	r2, sl
 800b838:	465b      	mov	r3, fp
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	f7f5 fabf 	bl	8000dc0 <__aeabi_uldivmod>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4613      	mov	r3, r2
 800b848:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b850:	d308      	bcc.n	800b864 <UART_SetConfig+0x430>
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b858:	d204      	bcs.n	800b864 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6a3a      	ldr	r2, [r7, #32]
 800b860:	60da      	str	r2, [r3, #12]
 800b862:	e0ce      	b.n	800ba02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b86a:	e0ca      	b.n	800ba02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b874:	d166      	bne.n	800b944 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b87a:	2b08      	cmp	r3, #8
 800b87c:	d827      	bhi.n	800b8ce <UART_SetConfig+0x49a>
 800b87e:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <UART_SetConfig+0x450>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b8a9 	.word	0x0800b8a9
 800b888:	0800b8b1 	.word	0x0800b8b1
 800b88c:	0800b8b9 	.word	0x0800b8b9
 800b890:	0800b8cf 	.word	0x0800b8cf
 800b894:	0800b8bf 	.word	0x0800b8bf
 800b898:	0800b8cf 	.word	0x0800b8cf
 800b89c:	0800b8cf 	.word	0x0800b8cf
 800b8a0:	0800b8cf 	.word	0x0800b8cf
 800b8a4:	0800b8c7 	.word	0x0800b8c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8a8:	f7fb ff76 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 800b8ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8ae:	e014      	b.n	800b8da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8b0:	f7fb ff88 	bl	80077c4 <HAL_RCC_GetPCLK2Freq>
 800b8b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8b6:	e010      	b.n	800b8da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8b8:	4b4e      	ldr	r3, [pc, #312]	@ (800b9f4 <UART_SetConfig+0x5c0>)
 800b8ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8bc:	e00d      	b.n	800b8da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8be:	f7fb fefd 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800b8c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8c4:	e009      	b.n	800b8da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8cc:	e005      	b.n	800b8da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b8d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 8090 	beq.w	800ba02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e6:	4a44      	ldr	r2, [pc, #272]	@ (800b9f8 <UART_SetConfig+0x5c4>)
 800b8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8f4:	005a      	lsls	r2, r3, #1
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	085b      	lsrs	r3, r3, #1
 800b8fc:	441a      	add	r2, r3
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	fbb2 f3f3 	udiv	r3, r2, r3
 800b906:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	2b0f      	cmp	r3, #15
 800b90c:	d916      	bls.n	800b93c <UART_SetConfig+0x508>
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b914:	d212      	bcs.n	800b93c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f023 030f 	bic.w	r3, r3, #15
 800b91e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	085b      	lsrs	r3, r3, #1
 800b924:	b29b      	uxth	r3, r3
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	8bfb      	ldrh	r3, [r7, #30]
 800b92e:	4313      	orrs	r3, r2
 800b930:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	8bfa      	ldrh	r2, [r7, #30]
 800b938:	60da      	str	r2, [r3, #12]
 800b93a:	e062      	b.n	800ba02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b942:	e05e      	b.n	800ba02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b944:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d828      	bhi.n	800b99e <UART_SetConfig+0x56a>
 800b94c:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <UART_SetConfig+0x520>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800b979 	.word	0x0800b979
 800b958:	0800b981 	.word	0x0800b981
 800b95c:	0800b989 	.word	0x0800b989
 800b960:	0800b99f 	.word	0x0800b99f
 800b964:	0800b98f 	.word	0x0800b98f
 800b968:	0800b99f 	.word	0x0800b99f
 800b96c:	0800b99f 	.word	0x0800b99f
 800b970:	0800b99f 	.word	0x0800b99f
 800b974:	0800b997 	.word	0x0800b997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b978:	f7fb ff0e 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 800b97c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b97e:	e014      	b.n	800b9aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b980:	f7fb ff20 	bl	80077c4 <HAL_RCC_GetPCLK2Freq>
 800b984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b986:	e010      	b.n	800b9aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b988:	4b1a      	ldr	r3, [pc, #104]	@ (800b9f4 <UART_SetConfig+0x5c0>)
 800b98a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b98c:	e00d      	b.n	800b9aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b98e:	f7fb fe95 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800b992:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b994:	e009      	b.n	800b9aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b99a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b99c:	e005      	b.n	800b9aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b9a8:	bf00      	nop
    }

    if (pclk != 0U)
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d028      	beq.n	800ba02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b4:	4a10      	ldr	r2, [pc, #64]	@ (800b9f8 <UART_SetConfig+0x5c4>)
 800b9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	441a      	add	r2, r3
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d910      	bls.n	800b9fc <UART_SetConfig+0x5c8>
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e0:	d20c      	bcs.n	800b9fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60da      	str	r2, [r3, #12]
 800b9ec:	e009      	b.n	800ba02 <UART_SetConfig+0x5ce>
 800b9ee:	bf00      	nop
 800b9f0:	40008000 	.word	0x40008000
 800b9f4:	00f42400 	.word	0x00f42400
 800b9f8:	08023700 	.word	0x08023700
      }
      else
      {
        ret = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2200      	movs	r2, #0
 800ba16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ba1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3730      	adds	r7, #48	@ 0x30
 800ba26:	46bd      	mov	sp, r7
 800ba28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ba2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00a      	beq.n	800ba56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00a      	beq.n	800ba78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00a      	beq.n	800ba9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9e:	f003 0304 	and.w	r3, r3, #4
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01a      	beq.n	800bb42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb2a:	d10a      	bne.n	800bb42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	605a      	str	r2, [r3, #4]
  }
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b098      	sub	sp, #96	@ 0x60
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb80:	f7fa fa82 	bl	8006088 <HAL_GetTick>
 800bb84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 0308 	and.w	r3, r3, #8
 800bb90:	2b08      	cmp	r3, #8
 800bb92:	d12f      	bne.n	800bbf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f88e 	bl	800bcc4 <UART_WaitOnFlagUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d022      	beq.n	800bbf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbd4:	e841 2300 	strex	r3, r2, [r1]
 800bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e6      	bne.n	800bbae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e063      	b.n	800bcbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d149      	bne.n	800bc96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f857 	bl	800bcc4 <UART_WaitOnFlagUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d03c      	beq.n	800bc96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	e853 3f00 	ldrex	r3, [r3]
 800bc28:	623b      	str	r3, [r7, #32]
   return(result);
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc42:	e841 2300 	strex	r3, r2, [r1]
 800bc46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e6      	bne.n	800bc1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	e853 3f00 	ldrex	r3, [r3]
 800bc5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f023 0301 	bic.w	r3, r3, #1
 800bc64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc6e:	61fa      	str	r2, [r7, #28]
 800bc70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc72:	69b9      	ldr	r1, [r7, #24]
 800bc74:	69fa      	ldr	r2, [r7, #28]
 800bc76:	e841 2300 	strex	r3, r2, [r1]
 800bc7a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e5      	bne.n	800bc4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2220      	movs	r2, #32
 800bc86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	e012      	b.n	800bcbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2220      	movs	r2, #32
 800bca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3758      	adds	r7, #88	@ 0x58
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	603b      	str	r3, [r7, #0]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcd4:	e04f      	b.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcdc:	d04b      	beq.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcde:	f7fa f9d3 	bl	8006088 <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d302      	bcc.n	800bcf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e04e      	b.n	800bd96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0304 	and.w	r3, r3, #4
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d037      	beq.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b80      	cmp	r3, #128	@ 0x80
 800bd0a:	d034      	beq.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b40      	cmp	r3, #64	@ 0x40
 800bd10:	d031      	beq.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	f003 0308 	and.w	r3, r3, #8
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	d110      	bne.n	800bd42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2208      	movs	r2, #8
 800bd26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f920 	bl	800bf6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2208      	movs	r2, #8
 800bd32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e029      	b.n	800bd96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd50:	d111      	bne.n	800bd76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f906 	bl	800bf6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e00f      	b.n	800bd96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69da      	ldr	r2, [r3, #28]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4013      	ands	r3, r2
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	bf0c      	ite	eq
 800bd86:	2301      	moveq	r3, #1
 800bd88:	2300      	movne	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d0a0      	beq.n	800bcd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b096      	sub	sp, #88	@ 0x58
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	88fa      	ldrh	r2, [r7, #6]
 800bdb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2222      	movs	r2, #34	@ 0x22
 800bdc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d02d      	beq.n	800be32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bddc:	4a40      	ldr	r2, [pc, #256]	@ (800bee0 <UART_Start_Receive_DMA+0x140>)
 800bdde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde6:	4a3f      	ldr	r2, [pc, #252]	@ (800bee4 <UART_Start_Receive_DMA+0x144>)
 800bde8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf0:	4a3d      	ldr	r2, [pc, #244]	@ (800bee8 <UART_Start_Receive_DMA+0x148>)
 800bdf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3324      	adds	r3, #36	@ 0x24
 800be0a:	4619      	mov	r1, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be10:	461a      	mov	r2, r3
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	f7fa fafc 	bl	8006410 <HAL_DMA_Start_IT>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2210      	movs	r2, #16
 800be22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2220      	movs	r2, #32
 800be2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e051      	b.n	800bed6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d018      	beq.n	800be6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	461a      	mov	r2, r3
 800be56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be60:	e841 2300 	strex	r3, r2, [r1]
 800be64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e6      	bne.n	800be3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3308      	adds	r3, #8
 800be72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7e:	f043 0301 	orr.w	r3, r3, #1
 800be82:	653b      	str	r3, [r7, #80]	@ 0x50
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3308      	adds	r3, #8
 800be8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be8c:	637a      	str	r2, [r7, #52]	@ 0x34
 800be8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e5      	bne.n	800be6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3308      	adds	r3, #8
 800bea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	e853 3f00 	ldrex	r3, [r3]
 800beae:	613b      	str	r3, [r7, #16]
   return(result);
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3308      	adds	r3, #8
 800bebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bec0:	623a      	str	r2, [r7, #32]
 800bec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	69f9      	ldr	r1, [r7, #28]
 800bec6:	6a3a      	ldr	r2, [r7, #32]
 800bec8:	e841 2300 	strex	r3, r2, [r1]
 800becc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e5      	bne.n	800bea0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3758      	adds	r7, #88	@ 0x58
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	0800c0f9 	.word	0x0800c0f9
 800bee4:	0800c22d 	.word	0x0800c22d
 800bee8:	0800c273 	.word	0x0800c273

0800beec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800beec:	b480      	push	{r7}
 800beee:	b08f      	sub	sp, #60	@ 0x3c
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bf08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e6      	bne.n	800bef4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bf3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf46:	61ba      	str	r2, [r7, #24]
 800bf48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6979      	ldr	r1, [r7, #20]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	613b      	str	r3, [r7, #16]
   return(result);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e5      	bne.n	800bf26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bf62:	bf00      	nop
 800bf64:	373c      	adds	r7, #60	@ 0x3c
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b095      	sub	sp, #84	@ 0x54
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf94:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e6      	bne.n	800bf76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3308      	adds	r3, #8
 800bfae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bfbe:	f023 0301 	bic.w	r3, r3, #1
 800bfc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3308      	adds	r3, #8
 800bfca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e3      	bne.n	800bfa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d118      	bne.n	800c01a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	e853 3f00 	ldrex	r3, [r3]
 800bff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f023 0310 	bic.w	r3, r3, #16
 800bffc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c006:	61bb      	str	r3, [r7, #24]
 800c008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	613b      	str	r3, [r7, #16]
   return(result);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e6      	bne.n	800bfe8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2220      	movs	r2, #32
 800c01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c02e:	bf00      	nop
 800c030:	3754      	adds	r7, #84	@ 0x54
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b090      	sub	sp, #64	@ 0x40
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c046:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d137      	bne.n	800c0c6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c058:	2200      	movs	r2, #0
 800c05a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3308      	adds	r3, #8
 800c064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c068:	e853 3f00 	ldrex	r3, [r3]
 800c06c:	623b      	str	r3, [r7, #32]
   return(result);
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c074:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3308      	adds	r3, #8
 800c07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c07e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e5      	bne.n	800c05e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	69b9      	ldr	r1, [r7, #24]
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e6      	bne.n	800c092 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0c4:	e004      	b.n	800c0d0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c0cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c0ce:	4798      	blx	r3
}
 800c0d0:	bf00      	nop
 800c0d2:	3740      	adds	r7, #64	@ 0x40
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b09c      	sub	sp, #112	@ 0x70
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c104:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	2b00      	cmp	r3, #0
 800c112:	d171      	bne.n	800c1f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c116:	2200      	movs	r2, #0
 800c118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c11c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c12a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c12c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c130:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c13a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c13c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e6      	bne.n	800c11c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c14e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3308      	adds	r3, #8
 800c154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c158:	e853 3f00 	ldrex	r3, [r3]
 800c15c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c160:	f023 0301 	bic.w	r3, r3, #1
 800c164:	667b      	str	r3, [r7, #100]	@ 0x64
 800c166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3308      	adds	r3, #8
 800c16c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c16e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1e5      	bne.n	800c14e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	623b      	str	r3, [r7, #32]
   return(result);
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c198:	663b      	str	r3, [r7, #96]	@ 0x60
 800c19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3308      	adds	r3, #8
 800c1a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e5      	bne.n	800c182 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c1b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d118      	bne.n	800c1f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	e853 3f00 	ldrex	r3, [r3]
 800c1d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 0310 	bic.w	r3, r3, #16
 800c1da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e8:	69b9      	ldr	r1, [r7, #24]
 800c1ea:	69fa      	ldr	r2, [r7, #28]
 800c1ec:	e841 2300 	strex	r3, r2, [r1]
 800c1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e6      	bne.n	800c1c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c202:	2b01      	cmp	r3, #1
 800c204:	d109      	bne.n	800c21a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c208:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c20c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c20e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c212:	4611      	mov	r1, r2
 800c214:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c216:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c218:	e004      	b.n	800c224 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c21a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c21c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c220:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c222:	4798      	blx	r3
}
 800c224:	bf00      	nop
 800c226:	3770      	adds	r7, #112	@ 0x70
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2201      	movs	r2, #1
 800c23e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d10b      	bne.n	800c260 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c254:	0852      	lsrs	r2, r2, #1
 800c256:	b292      	uxth	r2, r2
 800c258:	4611      	mov	r1, r2
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c25e:	e004      	b.n	800c26a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	4798      	blx	r3
}
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c286:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c29a:	2b80      	cmp	r3, #128	@ 0x80
 800c29c:	d109      	bne.n	800c2b2 <UART_DMAError+0x40>
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b21      	cmp	r3, #33	@ 0x21
 800c2a2:	d106      	bne.n	800c2b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c2ac:	6978      	ldr	r0, [r7, #20]
 800c2ae:	f7ff fe1d 	bl	800beec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2bc:	2b40      	cmp	r3, #64	@ 0x40
 800c2be:	d109      	bne.n	800c2d4 <UART_DMAError+0x62>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b22      	cmp	r3, #34	@ 0x22
 800c2c4:	d106      	bne.n	800c2d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f7ff fe4d 	bl	800bf6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2da:	f043 0210 	orr.w	r2, r3, #16
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2ea:	6978      	ldr	r0, [r7, #20]
 800c2ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2ee:	bf00      	nop
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b088      	sub	sp, #32
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	60bb      	str	r3, [r7, #8]
   return(result);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c33a:	61fb      	str	r3, [r7, #28]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	461a      	mov	r2, r3
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	61bb      	str	r3, [r7, #24]
 800c346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c348:	6979      	ldr	r1, [r7, #20]
 800c34a:	69ba      	ldr	r2, [r7, #24]
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	613b      	str	r3, [r7, #16]
   return(result);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e6      	bne.n	800c326 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c370:	bf00      	nop
 800c372:	3720      	adds	r7, #32
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d101      	bne.n	800c3ca <HAL_UARTEx_DisableFifoMode+0x16>
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	e027      	b.n	800c41a <HAL_UARTEx_DisableFifoMode+0x66>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2224      	movs	r2, #36	@ 0x24
 800c3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f022 0201 	bic.w	r2, r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2220      	movs	r2, #32
 800c40c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e02d      	b.n	800c49a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2224      	movs	r2, #36	@ 0x24
 800c44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0201 	bic.w	r2, r2, #1
 800c464:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f850 	bl	800c520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d101      	bne.n	800c4ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	e02d      	b.n	800c516 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2224      	movs	r2, #36	@ 0x24
 800c4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f022 0201 	bic.w	r2, r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f812 	bl	800c520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2220      	movs	r2, #32
 800c508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d108      	bne.n	800c542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c540:	e031      	b.n	800c5a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c542:	2308      	movs	r3, #8
 800c544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c546:	2308      	movs	r3, #8
 800c548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	0e5b      	lsrs	r3, r3, #25
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 0307 	and.w	r3, r3, #7
 800c558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	0f5b      	lsrs	r3, r3, #29
 800c562:	b2db      	uxtb	r3, r3
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	7b3a      	ldrb	r2, [r7, #12]
 800c56e:	4911      	ldr	r1, [pc, #68]	@ (800c5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c570:	5c8a      	ldrb	r2, [r1, r2]
 800c572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c576:	7b3a      	ldrb	r2, [r7, #12]
 800c578:	490f      	ldr	r1, [pc, #60]	@ (800c5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c57a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	7b7a      	ldrb	r2, [r7, #13]
 800c58c:	4909      	ldr	r1, [pc, #36]	@ (800c5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c58e:	5c8a      	ldrb	r2, [r1, r2]
 800c590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c594:	7b7a      	ldrb	r2, [r7, #13]
 800c596:	4908      	ldr	r1, [pc, #32]	@ (800c5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c59a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	08023718 	.word	0x08023718
 800c5b8:	08023720 	.word	0x08023720

0800c5bc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	edd3 7a07 	vldr	s15, [r3, #28]
 800c5d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c5ec:	eeb1 7a67 	vneg.f32	s14, s15
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1a      	ldr	r2, [r3, #32]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d006      	beq.n	800c620 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	330c      	adds	r3, #12
 800c616:	220c      	movs	r2, #12
 800c618:	2100      	movs	r1, #0
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 f804 	bl	800c628 <memset>
  }

}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <memset>:
 800c628:	4402      	add	r2, r0
 800c62a:	4603      	mov	r3, r0
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d100      	bne.n	800c632 <memset+0xa>
 800c630:	4770      	bx	lr
 800c632:	f803 1b01 	strb.w	r1, [r3], #1
 800c636:	e7f9      	b.n	800c62c <memset+0x4>

0800c638 <__errno>:
 800c638:	4b01      	ldr	r3, [pc, #4]	@ (800c640 <__errno+0x8>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	2000023c 	.word	0x2000023c

0800c644 <__libc_init_array>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	4d0d      	ldr	r5, [pc, #52]	@ (800c67c <__libc_init_array+0x38>)
 800c648:	4c0d      	ldr	r4, [pc, #52]	@ (800c680 <__libc_init_array+0x3c>)
 800c64a:	1b64      	subs	r4, r4, r5
 800c64c:	10a4      	asrs	r4, r4, #2
 800c64e:	2600      	movs	r6, #0
 800c650:	42a6      	cmp	r6, r4
 800c652:	d109      	bne.n	800c668 <__libc_init_array+0x24>
 800c654:	4d0b      	ldr	r5, [pc, #44]	@ (800c684 <__libc_init_array+0x40>)
 800c656:	4c0c      	ldr	r4, [pc, #48]	@ (800c688 <__libc_init_array+0x44>)
 800c658:	f000 ff32 	bl	800d4c0 <_init>
 800c65c:	1b64      	subs	r4, r4, r5
 800c65e:	10a4      	asrs	r4, r4, #2
 800c660:	2600      	movs	r6, #0
 800c662:	42a6      	cmp	r6, r4
 800c664:	d105      	bne.n	800c672 <__libc_init_array+0x2e>
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66c:	4798      	blx	r3
 800c66e:	3601      	adds	r6, #1
 800c670:	e7ee      	b.n	800c650 <__libc_init_array+0xc>
 800c672:	f855 3b04 	ldr.w	r3, [r5], #4
 800c676:	4798      	blx	r3
 800c678:	3601      	adds	r6, #1
 800c67a:	e7f2      	b.n	800c662 <__libc_init_array+0x1e>
 800c67c:	08023b38 	.word	0x08023b38
 800c680:	08023b38 	.word	0x08023b38
 800c684:	08023b38 	.word	0x08023b38
 800c688:	08023b3c 	.word	0x08023b3c

0800c68c <memcpy>:
 800c68c:	440a      	add	r2, r1
 800c68e:	4291      	cmp	r1, r2
 800c690:	f100 33ff 	add.w	r3, r0, #4294967295
 800c694:	d100      	bne.n	800c698 <memcpy+0xc>
 800c696:	4770      	bx	lr
 800c698:	b510      	push	{r4, lr}
 800c69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a2:	4291      	cmp	r1, r2
 800c6a4:	d1f9      	bne.n	800c69a <memcpy+0xe>
 800c6a6:	bd10      	pop	{r4, pc}

0800c6a8 <atan2f>:
 800c6a8:	f000 b94c 	b.w	800c944 <__ieee754_atan2f>

0800c6ac <sqrtf>:
 800c6ac:	b508      	push	{r3, lr}
 800c6ae:	ed2d 8b02 	vpush	{d8}
 800c6b2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6b6:	f000 f8a1 	bl	800c7fc <__ieee754_sqrtf>
 800c6ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800c6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c2:	d60c      	bvs.n	800c6de <sqrtf+0x32>
 800c6c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c6e4 <sqrtf+0x38>
 800c6c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d0:	d505      	bpl.n	800c6de <sqrtf+0x32>
 800c6d2:	f7ff ffb1 	bl	800c638 <__errno>
 800c6d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c6da:	2321      	movs	r3, #33	@ 0x21
 800c6dc:	6003      	str	r3, [r0, #0]
 800c6de:	ecbd 8b02 	vpop	{d8}
 800c6e2:	bd08      	pop	{r3, pc}
 800c6e4:	00000000 	.word	0x00000000

0800c6e8 <cosf>:
 800c6e8:	ee10 3a10 	vmov	r3, s0
 800c6ec:	b507      	push	{r0, r1, r2, lr}
 800c6ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c768 <cosf+0x80>)
 800c6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d806      	bhi.n	800c706 <cosf+0x1e>
 800c6f8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c76c <cosf+0x84>
 800c6fc:	b003      	add	sp, #12
 800c6fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800c702:	f000 b87f 	b.w	800c804 <__kernel_cosf>
 800c706:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c70a:	d304      	bcc.n	800c716 <cosf+0x2e>
 800c70c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c710:	b003      	add	sp, #12
 800c712:	f85d fb04 	ldr.w	pc, [sp], #4
 800c716:	4668      	mov	r0, sp
 800c718:	f000 f9b4 	bl	800ca84 <__ieee754_rem_pio2f>
 800c71c:	f000 0003 	and.w	r0, r0, #3
 800c720:	2801      	cmp	r0, #1
 800c722:	d009      	beq.n	800c738 <cosf+0x50>
 800c724:	2802      	cmp	r0, #2
 800c726:	d010      	beq.n	800c74a <cosf+0x62>
 800c728:	b9b0      	cbnz	r0, 800c758 <cosf+0x70>
 800c72a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c72e:	ed9d 0a00 	vldr	s0, [sp]
 800c732:	f000 f867 	bl	800c804 <__kernel_cosf>
 800c736:	e7eb      	b.n	800c710 <cosf+0x28>
 800c738:	eddd 0a01 	vldr	s1, [sp, #4]
 800c73c:	ed9d 0a00 	vldr	s0, [sp]
 800c740:	f000 f8b8 	bl	800c8b4 <__kernel_sinf>
 800c744:	eeb1 0a40 	vneg.f32	s0, s0
 800c748:	e7e2      	b.n	800c710 <cosf+0x28>
 800c74a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c74e:	ed9d 0a00 	vldr	s0, [sp]
 800c752:	f000 f857 	bl	800c804 <__kernel_cosf>
 800c756:	e7f5      	b.n	800c744 <cosf+0x5c>
 800c758:	eddd 0a01 	vldr	s1, [sp, #4]
 800c75c:	ed9d 0a00 	vldr	s0, [sp]
 800c760:	2001      	movs	r0, #1
 800c762:	f000 f8a7 	bl	800c8b4 <__kernel_sinf>
 800c766:	e7d3      	b.n	800c710 <cosf+0x28>
 800c768:	3f490fd8 	.word	0x3f490fd8
 800c76c:	00000000 	.word	0x00000000

0800c770 <sinf>:
 800c770:	ee10 3a10 	vmov	r3, s0
 800c774:	b507      	push	{r0, r1, r2, lr}
 800c776:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f4 <sinf+0x84>)
 800c778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d807      	bhi.n	800c790 <sinf+0x20>
 800c780:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c7f8 <sinf+0x88>
 800c784:	2000      	movs	r0, #0
 800c786:	b003      	add	sp, #12
 800c788:	f85d eb04 	ldr.w	lr, [sp], #4
 800c78c:	f000 b892 	b.w	800c8b4 <__kernel_sinf>
 800c790:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c794:	d304      	bcc.n	800c7a0 <sinf+0x30>
 800c796:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c79a:	b003      	add	sp, #12
 800c79c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7a0:	4668      	mov	r0, sp
 800c7a2:	f000 f96f 	bl	800ca84 <__ieee754_rem_pio2f>
 800c7a6:	f000 0003 	and.w	r0, r0, #3
 800c7aa:	2801      	cmp	r0, #1
 800c7ac:	d00a      	beq.n	800c7c4 <sinf+0x54>
 800c7ae:	2802      	cmp	r0, #2
 800c7b0:	d00f      	beq.n	800c7d2 <sinf+0x62>
 800c7b2:	b9c0      	cbnz	r0, 800c7e6 <sinf+0x76>
 800c7b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7b8:	ed9d 0a00 	vldr	s0, [sp]
 800c7bc:	2001      	movs	r0, #1
 800c7be:	f000 f879 	bl	800c8b4 <__kernel_sinf>
 800c7c2:	e7ea      	b.n	800c79a <sinf+0x2a>
 800c7c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7c8:	ed9d 0a00 	vldr	s0, [sp]
 800c7cc:	f000 f81a 	bl	800c804 <__kernel_cosf>
 800c7d0:	e7e3      	b.n	800c79a <sinf+0x2a>
 800c7d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7d6:	ed9d 0a00 	vldr	s0, [sp]
 800c7da:	2001      	movs	r0, #1
 800c7dc:	f000 f86a 	bl	800c8b4 <__kernel_sinf>
 800c7e0:	eeb1 0a40 	vneg.f32	s0, s0
 800c7e4:	e7d9      	b.n	800c79a <sinf+0x2a>
 800c7e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7ea:	ed9d 0a00 	vldr	s0, [sp]
 800c7ee:	f000 f809 	bl	800c804 <__kernel_cosf>
 800c7f2:	e7f5      	b.n	800c7e0 <sinf+0x70>
 800c7f4:	3f490fd8 	.word	0x3f490fd8
 800c7f8:	00000000 	.word	0x00000000

0800c7fc <__ieee754_sqrtf>:
 800c7fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c800:	4770      	bx	lr
	...

0800c804 <__kernel_cosf>:
 800c804:	ee10 3a10 	vmov	r3, s0
 800c808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c80c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c810:	eef0 6a40 	vmov.f32	s13, s0
 800c814:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c818:	d204      	bcs.n	800c824 <__kernel_cosf+0x20>
 800c81a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c81e:	ee17 2a90 	vmov	r2, s15
 800c822:	b342      	cbz	r2, 800c876 <__kernel_cosf+0x72>
 800c824:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c828:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c894 <__kernel_cosf+0x90>
 800c82c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c898 <__kernel_cosf+0x94>
 800c830:	4a1a      	ldr	r2, [pc, #104]	@ (800c89c <__kernel_cosf+0x98>)
 800c832:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c836:	4293      	cmp	r3, r2
 800c838:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c8a0 <__kernel_cosf+0x9c>
 800c83c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c840:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c8a4 <__kernel_cosf+0xa0>
 800c844:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c848:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c8a8 <__kernel_cosf+0xa4>
 800c84c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c850:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c8ac <__kernel_cosf+0xa8>
 800c854:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c858:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c85c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c860:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c864:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86c:	d804      	bhi.n	800c878 <__kernel_cosf+0x74>
 800c86e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c872:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c876:	4770      	bx	lr
 800c878:	4a0d      	ldr	r2, [pc, #52]	@ (800c8b0 <__kernel_cosf+0xac>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bf9a      	itte	ls
 800c87e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c882:	ee07 3a10 	vmovls	s14, r3
 800c886:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c88a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c88e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c892:	e7ec      	b.n	800c86e <__kernel_cosf+0x6a>
 800c894:	ad47d74e 	.word	0xad47d74e
 800c898:	310f74f6 	.word	0x310f74f6
 800c89c:	3e999999 	.word	0x3e999999
 800c8a0:	b493f27c 	.word	0xb493f27c
 800c8a4:	37d00d01 	.word	0x37d00d01
 800c8a8:	bab60b61 	.word	0xbab60b61
 800c8ac:	3d2aaaab 	.word	0x3d2aaaab
 800c8b0:	3f480000 	.word	0x3f480000

0800c8b4 <__kernel_sinf>:
 800c8b4:	ee10 3a10 	vmov	r3, s0
 800c8b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8bc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c8c0:	d204      	bcs.n	800c8cc <__kernel_sinf+0x18>
 800c8c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c8c6:	ee17 3a90 	vmov	r3, s15
 800c8ca:	b35b      	cbz	r3, 800c924 <__kernel_sinf+0x70>
 800c8cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c8d0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c928 <__kernel_sinf+0x74>
 800c8d4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c92c <__kernel_sinf+0x78>
 800c8d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c8dc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c930 <__kernel_sinf+0x7c>
 800c8e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c8e4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c934 <__kernel_sinf+0x80>
 800c8e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c8ec:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c938 <__kernel_sinf+0x84>
 800c8f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c8f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c8f8:	b930      	cbnz	r0, 800c908 <__kernel_sinf+0x54>
 800c8fa:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c93c <__kernel_sinf+0x88>
 800c8fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c902:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c906:	4770      	bx	lr
 800c908:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c90c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c910:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c914:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c918:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c940 <__kernel_sinf+0x8c>
 800c91c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c920:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	2f2ec9d3 	.word	0x2f2ec9d3
 800c92c:	b2d72f34 	.word	0xb2d72f34
 800c930:	3638ef1b 	.word	0x3638ef1b
 800c934:	b9500d01 	.word	0xb9500d01
 800c938:	3c088889 	.word	0x3c088889
 800c93c:	be2aaaab 	.word	0xbe2aaaab
 800c940:	3e2aaaab 	.word	0x3e2aaaab

0800c944 <__ieee754_atan2f>:
 800c944:	ee10 2a90 	vmov	r2, s1
 800c948:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c94c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c950:	b510      	push	{r4, lr}
 800c952:	eef0 7a40 	vmov.f32	s15, s0
 800c956:	d806      	bhi.n	800c966 <__ieee754_atan2f+0x22>
 800c958:	ee10 0a10 	vmov	r0, s0
 800c95c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c960:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c964:	d904      	bls.n	800c970 <__ieee754_atan2f+0x2c>
 800c966:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c96a:	eeb0 0a67 	vmov.f32	s0, s15
 800c96e:	bd10      	pop	{r4, pc}
 800c970:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c974:	d103      	bne.n	800c97e <__ieee754_atan2f+0x3a>
 800c976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c97a:	f000 b9b3 	b.w	800cce4 <atanf>
 800c97e:	1794      	asrs	r4, r2, #30
 800c980:	f004 0402 	and.w	r4, r4, #2
 800c984:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c988:	b943      	cbnz	r3, 800c99c <__ieee754_atan2f+0x58>
 800c98a:	2c02      	cmp	r4, #2
 800c98c:	d05e      	beq.n	800ca4c <__ieee754_atan2f+0x108>
 800c98e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ca60 <__ieee754_atan2f+0x11c>
 800c992:	2c03      	cmp	r4, #3
 800c994:	bf08      	it	eq
 800c996:	eef0 7a47 	vmoveq.f32	s15, s14
 800c99a:	e7e6      	b.n	800c96a <__ieee754_atan2f+0x26>
 800c99c:	b941      	cbnz	r1, 800c9b0 <__ieee754_atan2f+0x6c>
 800c99e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ca64 <__ieee754_atan2f+0x120>
 800c9a2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ca68 <__ieee754_atan2f+0x124>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	bfa8      	it	ge
 800c9aa:	eef0 7a47 	vmovge.f32	s15, s14
 800c9ae:	e7dc      	b.n	800c96a <__ieee754_atan2f+0x26>
 800c9b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c9b4:	d110      	bne.n	800c9d8 <__ieee754_atan2f+0x94>
 800c9b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800c9be:	d107      	bne.n	800c9d0 <__ieee754_atan2f+0x8c>
 800c9c0:	2c02      	cmp	r4, #2
 800c9c2:	d846      	bhi.n	800ca52 <__ieee754_atan2f+0x10e>
 800c9c4:	4b29      	ldr	r3, [pc, #164]	@ (800ca6c <__ieee754_atan2f+0x128>)
 800c9c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9ca:	edd3 7a00 	vldr	s15, [r3]
 800c9ce:	e7cc      	b.n	800c96a <__ieee754_atan2f+0x26>
 800c9d0:	2c02      	cmp	r4, #2
 800c9d2:	d841      	bhi.n	800ca58 <__ieee754_atan2f+0x114>
 800c9d4:	4b26      	ldr	r3, [pc, #152]	@ (800ca70 <__ieee754_atan2f+0x12c>)
 800c9d6:	e7f6      	b.n	800c9c6 <__ieee754_atan2f+0x82>
 800c9d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9dc:	d0df      	beq.n	800c99e <__ieee754_atan2f+0x5a>
 800c9de:	1a5b      	subs	r3, r3, r1
 800c9e0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c9e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c9e8:	da1a      	bge.n	800ca20 <__ieee754_atan2f+0xdc>
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	da01      	bge.n	800c9f2 <__ieee754_atan2f+0xae>
 800c9ee:	313c      	adds	r1, #60	@ 0x3c
 800c9f0:	db19      	blt.n	800ca26 <__ieee754_atan2f+0xe2>
 800c9f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c9f6:	f000 fa49 	bl	800ce8c <fabsf>
 800c9fa:	f000 f973 	bl	800cce4 <atanf>
 800c9fe:	eef0 7a40 	vmov.f32	s15, s0
 800ca02:	2c01      	cmp	r4, #1
 800ca04:	d012      	beq.n	800ca2c <__ieee754_atan2f+0xe8>
 800ca06:	2c02      	cmp	r4, #2
 800ca08:	d017      	beq.n	800ca3a <__ieee754_atan2f+0xf6>
 800ca0a:	2c00      	cmp	r4, #0
 800ca0c:	d0ad      	beq.n	800c96a <__ieee754_atan2f+0x26>
 800ca0e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ca74 <__ieee754_atan2f+0x130>
 800ca12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca16:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ca78 <__ieee754_atan2f+0x134>
 800ca1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca1e:	e7a4      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca20:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ca68 <__ieee754_atan2f+0x124>
 800ca24:	e7ed      	b.n	800ca02 <__ieee754_atan2f+0xbe>
 800ca26:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ca7c <__ieee754_atan2f+0x138>
 800ca2a:	e7ea      	b.n	800ca02 <__ieee754_atan2f+0xbe>
 800ca2c:	ee17 3a90 	vmov	r3, s15
 800ca30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ca34:	ee07 3a90 	vmov	s15, r3
 800ca38:	e797      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ca74 <__ieee754_atan2f+0x130>
 800ca3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ca78 <__ieee754_atan2f+0x134>
 800ca46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca4a:	e78e      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca4c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ca78 <__ieee754_atan2f+0x134>
 800ca50:	e78b      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca52:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ca80 <__ieee754_atan2f+0x13c>
 800ca56:	e788      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ca7c <__ieee754_atan2f+0x138>
 800ca5c:	e785      	b.n	800c96a <__ieee754_atan2f+0x26>
 800ca5e:	bf00      	nop
 800ca60:	c0490fdb 	.word	0xc0490fdb
 800ca64:	bfc90fdb 	.word	0xbfc90fdb
 800ca68:	3fc90fdb 	.word	0x3fc90fdb
 800ca6c:	08023734 	.word	0x08023734
 800ca70:	08023728 	.word	0x08023728
 800ca74:	33bbbd2e 	.word	0x33bbbd2e
 800ca78:	40490fdb 	.word	0x40490fdb
 800ca7c:	00000000 	.word	0x00000000
 800ca80:	3f490fdb 	.word	0x3f490fdb

0800ca84 <__ieee754_rem_pio2f>:
 800ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca86:	ee10 6a10 	vmov	r6, s0
 800ca8a:	4b88      	ldr	r3, [pc, #544]	@ (800ccac <__ieee754_rem_pio2f+0x228>)
 800ca8c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ca90:	429d      	cmp	r5, r3
 800ca92:	b087      	sub	sp, #28
 800ca94:	4604      	mov	r4, r0
 800ca96:	d805      	bhi.n	800caa4 <__ieee754_rem_pio2f+0x20>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	ed80 0a00 	vstr	s0, [r0]
 800ca9e:	6043      	str	r3, [r0, #4]
 800caa0:	2000      	movs	r0, #0
 800caa2:	e022      	b.n	800caea <__ieee754_rem_pio2f+0x66>
 800caa4:	4b82      	ldr	r3, [pc, #520]	@ (800ccb0 <__ieee754_rem_pio2f+0x22c>)
 800caa6:	429d      	cmp	r5, r3
 800caa8:	d83a      	bhi.n	800cb20 <__ieee754_rem_pio2f+0x9c>
 800caaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800caae:	2e00      	cmp	r6, #0
 800cab0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ccb4 <__ieee754_rem_pio2f+0x230>
 800cab4:	4a80      	ldr	r2, [pc, #512]	@ (800ccb8 <__ieee754_rem_pio2f+0x234>)
 800cab6:	f023 030f 	bic.w	r3, r3, #15
 800caba:	dd18      	ble.n	800caee <__ieee754_rem_pio2f+0x6a>
 800cabc:	4293      	cmp	r3, r2
 800cabe:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cac2:	bf09      	itett	eq
 800cac4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ccbc <__ieee754_rem_pio2f+0x238>
 800cac8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ccc0 <__ieee754_rem_pio2f+0x23c>
 800cacc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ccc4 <__ieee754_rem_pio2f+0x240>
 800cad0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cad4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cadc:	ed80 7a00 	vstr	s14, [r0]
 800cae0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cae4:	edc0 7a01 	vstr	s15, [r0, #4]
 800cae8:	2001      	movs	r0, #1
 800caea:	b007      	add	sp, #28
 800caec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caee:	4293      	cmp	r3, r2
 800caf0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800caf4:	bf09      	itett	eq
 800caf6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ccbc <__ieee754_rem_pio2f+0x238>
 800cafa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ccc0 <__ieee754_rem_pio2f+0x23c>
 800cafe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ccc4 <__ieee754_rem_pio2f+0x240>
 800cb02:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cb06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb0e:	ed80 7a00 	vstr	s14, [r0]
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1e:	e7e4      	b.n	800caea <__ieee754_rem_pio2f+0x66>
 800cb20:	4b69      	ldr	r3, [pc, #420]	@ (800ccc8 <__ieee754_rem_pio2f+0x244>)
 800cb22:	429d      	cmp	r5, r3
 800cb24:	d873      	bhi.n	800cc0e <__ieee754_rem_pio2f+0x18a>
 800cb26:	f000 f9b1 	bl	800ce8c <fabsf>
 800cb2a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cccc <__ieee754_rem_pio2f+0x248>
 800cb2e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cb32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb3e:	ee17 0a90 	vmov	r0, s15
 800cb42:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ccb4 <__ieee754_rem_pio2f+0x230>
 800cb46:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cb4a:	281f      	cmp	r0, #31
 800cb4c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ccc0 <__ieee754_rem_pio2f+0x23c>
 800cb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb54:	eeb1 6a47 	vneg.f32	s12, s14
 800cb58:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cb5c:	ee16 1a90 	vmov	r1, s13
 800cb60:	dc09      	bgt.n	800cb76 <__ieee754_rem_pio2f+0xf2>
 800cb62:	4a5b      	ldr	r2, [pc, #364]	@ (800ccd0 <__ieee754_rem_pio2f+0x24c>)
 800cb64:	1e47      	subs	r7, r0, #1
 800cb66:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cb6a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cb6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d107      	bne.n	800cb86 <__ieee754_rem_pio2f+0x102>
 800cb76:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800cb7a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800cb7e:	2a08      	cmp	r2, #8
 800cb80:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cb84:	dc14      	bgt.n	800cbb0 <__ieee754_rem_pio2f+0x12c>
 800cb86:	6021      	str	r1, [r4, #0]
 800cb88:	ed94 7a00 	vldr	s14, [r4]
 800cb8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cb90:	2e00      	cmp	r6, #0
 800cb92:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb96:	ed84 0a01 	vstr	s0, [r4, #4]
 800cb9a:	daa6      	bge.n	800caea <__ieee754_rem_pio2f+0x66>
 800cb9c:	eeb1 7a47 	vneg.f32	s14, s14
 800cba0:	eeb1 0a40 	vneg.f32	s0, s0
 800cba4:	ed84 7a00 	vstr	s14, [r4]
 800cba8:	ed84 0a01 	vstr	s0, [r4, #4]
 800cbac:	4240      	negs	r0, r0
 800cbae:	e79c      	b.n	800caea <__ieee754_rem_pio2f+0x66>
 800cbb0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ccbc <__ieee754_rem_pio2f+0x238>
 800cbb4:	eef0 6a40 	vmov.f32	s13, s0
 800cbb8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cbbc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cbc0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cbc4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ccc4 <__ieee754_rem_pio2f+0x240>
 800cbc8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cbcc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cbd0:	ee15 2a90 	vmov	r2, s11
 800cbd4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cbd8:	1a5b      	subs	r3, r3, r1
 800cbda:	2b19      	cmp	r3, #25
 800cbdc:	dc04      	bgt.n	800cbe8 <__ieee754_rem_pio2f+0x164>
 800cbde:	edc4 5a00 	vstr	s11, [r4]
 800cbe2:	eeb0 0a66 	vmov.f32	s0, s13
 800cbe6:	e7cf      	b.n	800cb88 <__ieee754_rem_pio2f+0x104>
 800cbe8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ccd4 <__ieee754_rem_pio2f+0x250>
 800cbec:	eeb0 0a66 	vmov.f32	s0, s13
 800cbf0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cbf4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cbf8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ccd8 <__ieee754_rem_pio2f+0x254>
 800cbfc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cc00:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cc04:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc08:	ed84 7a00 	vstr	s14, [r4]
 800cc0c:	e7bc      	b.n	800cb88 <__ieee754_rem_pio2f+0x104>
 800cc0e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800cc12:	d306      	bcc.n	800cc22 <__ieee754_rem_pio2f+0x19e>
 800cc14:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cc18:	edc0 7a01 	vstr	s15, [r0, #4]
 800cc1c:	edc0 7a00 	vstr	s15, [r0]
 800cc20:	e73e      	b.n	800caa0 <__ieee754_rem_pio2f+0x1c>
 800cc22:	15ea      	asrs	r2, r5, #23
 800cc24:	3a86      	subs	r2, #134	@ 0x86
 800cc26:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cc2a:	ee07 3a90 	vmov	s15, r3
 800cc2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cc32:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ccdc <__ieee754_rem_pio2f+0x258>
 800cc36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc3e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cc42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cc4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc52:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cc56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc62:	edcd 7a05 	vstr	s15, [sp, #20]
 800cc66:	d11e      	bne.n	800cca6 <__ieee754_rem_pio2f+0x222>
 800cc68:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc70:	bf0c      	ite	eq
 800cc72:	2301      	moveq	r3, #1
 800cc74:	2302      	movne	r3, #2
 800cc76:	491a      	ldr	r1, [pc, #104]	@ (800cce0 <__ieee754_rem_pio2f+0x25c>)
 800cc78:	9101      	str	r1, [sp, #4]
 800cc7a:	2102      	movs	r1, #2
 800cc7c:	9100      	str	r1, [sp, #0]
 800cc7e:	a803      	add	r0, sp, #12
 800cc80:	4621      	mov	r1, r4
 800cc82:	f000 f971 	bl	800cf68 <__kernel_rem_pio2f>
 800cc86:	2e00      	cmp	r6, #0
 800cc88:	f6bf af2f 	bge.w	800caea <__ieee754_rem_pio2f+0x66>
 800cc8c:	edd4 7a00 	vldr	s15, [r4]
 800cc90:	eef1 7a67 	vneg.f32	s15, s15
 800cc94:	edc4 7a00 	vstr	s15, [r4]
 800cc98:	edd4 7a01 	vldr	s15, [r4, #4]
 800cc9c:	eef1 7a67 	vneg.f32	s15, s15
 800cca0:	edc4 7a01 	vstr	s15, [r4, #4]
 800cca4:	e782      	b.n	800cbac <__ieee754_rem_pio2f+0x128>
 800cca6:	2303      	movs	r3, #3
 800cca8:	e7e5      	b.n	800cc76 <__ieee754_rem_pio2f+0x1f2>
 800ccaa:	bf00      	nop
 800ccac:	3f490fd8 	.word	0x3f490fd8
 800ccb0:	4016cbe3 	.word	0x4016cbe3
 800ccb4:	3fc90f80 	.word	0x3fc90f80
 800ccb8:	3fc90fd0 	.word	0x3fc90fd0
 800ccbc:	37354400 	.word	0x37354400
 800ccc0:	37354443 	.word	0x37354443
 800ccc4:	2e85a308 	.word	0x2e85a308
 800ccc8:	43490f80 	.word	0x43490f80
 800cccc:	3f22f984 	.word	0x3f22f984
 800ccd0:	08023740 	.word	0x08023740
 800ccd4:	2e85a300 	.word	0x2e85a300
 800ccd8:	248d3132 	.word	0x248d3132
 800ccdc:	43800000 	.word	0x43800000
 800cce0:	080237c0 	.word	0x080237c0

0800cce4 <atanf>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	ee10 5a10 	vmov	r5, s0
 800ccea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ccee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ccf2:	eef0 7a40 	vmov.f32	s15, s0
 800ccf6:	d310      	bcc.n	800cd1a <atanf+0x36>
 800ccf8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ccfc:	d904      	bls.n	800cd08 <atanf+0x24>
 800ccfe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cd02:	eeb0 0a67 	vmov.f32	s0, s15
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ce40 <atanf+0x15c>
 800cd0c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ce44 <atanf+0x160>
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	bfc8      	it	gt
 800cd14:	eef0 7a47 	vmovgt.f32	s15, s14
 800cd18:	e7f3      	b.n	800cd02 <atanf+0x1e>
 800cd1a:	4b4b      	ldr	r3, [pc, #300]	@ (800ce48 <atanf+0x164>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d810      	bhi.n	800cd42 <atanf+0x5e>
 800cd20:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cd24:	d20a      	bcs.n	800cd3c <atanf+0x58>
 800cd26:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ce4c <atanf+0x168>
 800cd2a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cd2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3a:	dce2      	bgt.n	800cd02 <atanf+0x1e>
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd40:	e013      	b.n	800cd6a <atanf+0x86>
 800cd42:	f000 f8a3 	bl	800ce8c <fabsf>
 800cd46:	4b42      	ldr	r3, [pc, #264]	@ (800ce50 <atanf+0x16c>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	d84f      	bhi.n	800cdec <atanf+0x108>
 800cd4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d841      	bhi.n	800cdd8 <atanf+0xf4>
 800cd54:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cd58:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cd5c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cd60:	2300      	movs	r3, #0
 800cd62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cd66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cd70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ce54 <atanf+0x170>
 800cd74:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ce58 <atanf+0x174>
 800cd78:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ce5c <atanf+0x178>
 800cd7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cd80:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cd84:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ce60 <atanf+0x17c>
 800cd88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cd8c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ce64 <atanf+0x180>
 800cd90:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cd94:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ce68 <atanf+0x184>
 800cd98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cd9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ce6c <atanf+0x188>
 800cda0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cda4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ce70 <atanf+0x18c>
 800cda8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cdac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ce74 <atanf+0x190>
 800cdb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cdb4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ce78 <atanf+0x194>
 800cdb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cdbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ce7c <atanf+0x198>
 800cdc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cdc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cdc8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cdcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cdd0:	d121      	bne.n	800ce16 <atanf+0x132>
 800cdd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdd6:	e794      	b.n	800cd02 <atanf+0x1e>
 800cdd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cddc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cde0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cde4:	2301      	movs	r3, #1
 800cde6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cdea:	e7be      	b.n	800cd6a <atanf+0x86>
 800cdec:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <atanf+0x19c>)
 800cdee:	429c      	cmp	r4, r3
 800cdf0:	d80b      	bhi.n	800ce0a <atanf+0x126>
 800cdf2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cdf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdfa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cdfe:	2302      	movs	r3, #2
 800ce00:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ce04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce08:	e7af      	b.n	800cd6a <atanf+0x86>
 800ce0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ce0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ce12:	2303      	movs	r3, #3
 800ce14:	e7a9      	b.n	800cd6a <atanf+0x86>
 800ce16:	4a1b      	ldr	r2, [pc, #108]	@ (800ce84 <atanf+0x1a0>)
 800ce18:	491b      	ldr	r1, [pc, #108]	@ (800ce88 <atanf+0x1a4>)
 800ce1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ce1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ce22:	edd3 6a00 	vldr	s13, [r3]
 800ce26:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ce2a:	2d00      	cmp	r5, #0
 800ce2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce30:	edd2 7a00 	vldr	s15, [r2]
 800ce34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce38:	bfb8      	it	lt
 800ce3a:	eef1 7a67 	vneglt.f32	s15, s15
 800ce3e:	e760      	b.n	800cd02 <atanf+0x1e>
 800ce40:	bfc90fdb 	.word	0xbfc90fdb
 800ce44:	3fc90fdb 	.word	0x3fc90fdb
 800ce48:	3edfffff 	.word	0x3edfffff
 800ce4c:	7149f2ca 	.word	0x7149f2ca
 800ce50:	3f97ffff 	.word	0x3f97ffff
 800ce54:	3c8569d7 	.word	0x3c8569d7
 800ce58:	3d4bda59 	.word	0x3d4bda59
 800ce5c:	bd6ef16b 	.word	0xbd6ef16b
 800ce60:	3d886b35 	.word	0x3d886b35
 800ce64:	3dba2e6e 	.word	0x3dba2e6e
 800ce68:	3e124925 	.word	0x3e124925
 800ce6c:	3eaaaaab 	.word	0x3eaaaaab
 800ce70:	bd15a221 	.word	0xbd15a221
 800ce74:	bd9d8795 	.word	0xbd9d8795
 800ce78:	bde38e38 	.word	0xbde38e38
 800ce7c:	be4ccccd 	.word	0xbe4ccccd
 800ce80:	401bffff 	.word	0x401bffff
 800ce84:	08023ae8 	.word	0x08023ae8
 800ce88:	08023ad8 	.word	0x08023ad8

0800ce8c <fabsf>:
 800ce8c:	ee10 3a10 	vmov	r3, s0
 800ce90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce94:	ee00 3a10 	vmov	s0, r3
 800ce98:	4770      	bx	lr
	...

0800ce9c <scalbnf>:
 800ce9c:	ee10 3a10 	vmov	r3, s0
 800cea0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cea4:	d02b      	beq.n	800cefe <scalbnf+0x62>
 800cea6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ceaa:	d302      	bcc.n	800ceb2 <scalbnf+0x16>
 800ceac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ceb0:	4770      	bx	lr
 800ceb2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ceb6:	d123      	bne.n	800cf00 <scalbnf+0x64>
 800ceb8:	4b24      	ldr	r3, [pc, #144]	@ (800cf4c <scalbnf+0xb0>)
 800ceba:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800cf50 <scalbnf+0xb4>
 800cebe:	4298      	cmp	r0, r3
 800cec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cec4:	db17      	blt.n	800cef6 <scalbnf+0x5a>
 800cec6:	ee10 3a10 	vmov	r3, s0
 800ceca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cece:	3a19      	subs	r2, #25
 800ced0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ced4:	4288      	cmp	r0, r1
 800ced6:	dd15      	ble.n	800cf04 <scalbnf+0x68>
 800ced8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800cf54 <scalbnf+0xb8>
 800cedc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800cf58 <scalbnf+0xbc>
 800cee0:	ee10 3a10 	vmov	r3, s0
 800cee4:	eeb0 7a67 	vmov.f32	s14, s15
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bfb8      	it	lt
 800ceec:	eef0 7a66 	vmovlt.f32	s15, s13
 800cef0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cef4:	4770      	bx	lr
 800cef6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cf5c <scalbnf+0xc0>
 800cefa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cefe:	4770      	bx	lr
 800cf00:	0dd2      	lsrs	r2, r2, #23
 800cf02:	e7e5      	b.n	800ced0 <scalbnf+0x34>
 800cf04:	4410      	add	r0, r2
 800cf06:	28fe      	cmp	r0, #254	@ 0xfe
 800cf08:	dce6      	bgt.n	800ced8 <scalbnf+0x3c>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	dd06      	ble.n	800cf1c <scalbnf+0x80>
 800cf0e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf12:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cf16:	ee00 3a10 	vmov	s0, r3
 800cf1a:	4770      	bx	lr
 800cf1c:	f110 0f16 	cmn.w	r0, #22
 800cf20:	da09      	bge.n	800cf36 <scalbnf+0x9a>
 800cf22:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800cf5c <scalbnf+0xc0>
 800cf26:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800cf60 <scalbnf+0xc4>
 800cf2a:	ee10 3a10 	vmov	r3, s0
 800cf2e:	eeb0 7a67 	vmov.f32	s14, s15
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	e7d9      	b.n	800ceea <scalbnf+0x4e>
 800cf36:	3019      	adds	r0, #25
 800cf38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf3c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cf40:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cf64 <scalbnf+0xc8>
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	e7d7      	b.n	800cefa <scalbnf+0x5e>
 800cf4a:	bf00      	nop
 800cf4c:	ffff3cb0 	.word	0xffff3cb0
 800cf50:	4c000000 	.word	0x4c000000
 800cf54:	7149f2ca 	.word	0x7149f2ca
 800cf58:	f149f2ca 	.word	0xf149f2ca
 800cf5c:	0da24260 	.word	0x0da24260
 800cf60:	8da24260 	.word	0x8da24260
 800cf64:	33000000 	.word	0x33000000

0800cf68 <__kernel_rem_pio2f>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	ed2d 8b04 	vpush	{d8-d9}
 800cf70:	b0d9      	sub	sp, #356	@ 0x164
 800cf72:	4690      	mov	r8, r2
 800cf74:	9001      	str	r0, [sp, #4]
 800cf76:	4ab6      	ldr	r2, [pc, #728]	@ (800d250 <__kernel_rem_pio2f+0x2e8>)
 800cf78:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800cf7a:	f118 0f04 	cmn.w	r8, #4
 800cf7e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800cf82:	460f      	mov	r7, r1
 800cf84:	f103 3bff 	add.w	fp, r3, #4294967295
 800cf88:	db26      	blt.n	800cfd8 <__kernel_rem_pio2f+0x70>
 800cf8a:	f1b8 0203 	subs.w	r2, r8, #3
 800cf8e:	bf48      	it	mi
 800cf90:	f108 0204 	addmi.w	r2, r8, #4
 800cf94:	10d2      	asrs	r2, r2, #3
 800cf96:	1c55      	adds	r5, r2, #1
 800cf98:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800cf9a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800cf9e:	00e8      	lsls	r0, r5, #3
 800cfa0:	eba2 060b 	sub.w	r6, r2, fp
 800cfa4:	9002      	str	r0, [sp, #8]
 800cfa6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800cfaa:	eb0a 0c0b 	add.w	ip, sl, fp
 800cfae:	ac1c      	add	r4, sp, #112	@ 0x70
 800cfb0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	4560      	cmp	r0, ip
 800cfb8:	dd10      	ble.n	800cfdc <__kernel_rem_pio2f+0x74>
 800cfba:	a91c      	add	r1, sp, #112	@ 0x70
 800cfbc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800cfc0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800cfc4:	2600      	movs	r6, #0
 800cfc6:	4556      	cmp	r6, sl
 800cfc8:	dc24      	bgt.n	800d014 <__kernel_rem_pio2f+0xac>
 800cfca:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cfce:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800cfd2:	4684      	mov	ip, r0
 800cfd4:	2400      	movs	r4, #0
 800cfd6:	e016      	b.n	800d006 <__kernel_rem_pio2f+0x9e>
 800cfd8:	2200      	movs	r2, #0
 800cfda:	e7dc      	b.n	800cf96 <__kernel_rem_pio2f+0x2e>
 800cfdc:	42c6      	cmn	r6, r0
 800cfde:	bf5d      	ittte	pl
 800cfe0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800cfe4:	ee07 1a90 	vmovpl	s15, r1
 800cfe8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cfec:	eef0 7a47 	vmovmi.f32	s15, s14
 800cff0:	ece4 7a01 	vstmia	r4!, {s15}
 800cff4:	3001      	adds	r0, #1
 800cff6:	e7de      	b.n	800cfb6 <__kernel_rem_pio2f+0x4e>
 800cff8:	ecfe 6a01 	vldmia	lr!, {s13}
 800cffc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d000:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d004:	3401      	adds	r4, #1
 800d006:	455c      	cmp	r4, fp
 800d008:	ddf6      	ble.n	800cff8 <__kernel_rem_pio2f+0x90>
 800d00a:	ece9 7a01 	vstmia	r9!, {s15}
 800d00e:	3601      	adds	r6, #1
 800d010:	3004      	adds	r0, #4
 800d012:	e7d8      	b.n	800cfc6 <__kernel_rem_pio2f+0x5e>
 800d014:	a908      	add	r1, sp, #32
 800d016:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d01a:	9104      	str	r1, [sp, #16]
 800d01c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d01e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d25c <__kernel_rem_pio2f+0x2f4>
 800d022:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d258 <__kernel_rem_pio2f+0x2f0>
 800d026:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d02a:	9203      	str	r2, [sp, #12]
 800d02c:	4654      	mov	r4, sl
 800d02e:	00a2      	lsls	r2, r4, #2
 800d030:	9205      	str	r2, [sp, #20]
 800d032:	aa58      	add	r2, sp, #352	@ 0x160
 800d034:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d038:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d03c:	a944      	add	r1, sp, #272	@ 0x110
 800d03e:	aa08      	add	r2, sp, #32
 800d040:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d044:	4694      	mov	ip, r2
 800d046:	4626      	mov	r6, r4
 800d048:	2e00      	cmp	r6, #0
 800d04a:	dc4c      	bgt.n	800d0e6 <__kernel_rem_pio2f+0x17e>
 800d04c:	4628      	mov	r0, r5
 800d04e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d052:	f7ff ff23 	bl	800ce9c <scalbnf>
 800d056:	eeb0 8a40 	vmov.f32	s16, s0
 800d05a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d05e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d062:	f000 f9e9 	bl	800d438 <floorf>
 800d066:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d06a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d06e:	2d00      	cmp	r5, #0
 800d070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d074:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d078:	ee17 9a90 	vmov	r9, s15
 800d07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d080:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d084:	dd41      	ble.n	800d10a <__kernel_rem_pio2f+0x1a2>
 800d086:	f104 3cff 	add.w	ip, r4, #4294967295
 800d08a:	a908      	add	r1, sp, #32
 800d08c:	f1c5 0e08 	rsb	lr, r5, #8
 800d090:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d094:	fa46 f00e 	asr.w	r0, r6, lr
 800d098:	4481      	add	r9, r0
 800d09a:	fa00 f00e 	lsl.w	r0, r0, lr
 800d09e:	1a36      	subs	r6, r6, r0
 800d0a0:	f1c5 0007 	rsb	r0, r5, #7
 800d0a4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d0a8:	4106      	asrs	r6, r0
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	dd3c      	ble.n	800d128 <__kernel_rem_pio2f+0x1c0>
 800d0ae:	f04f 0e00 	mov.w	lr, #0
 800d0b2:	f109 0901 	add.w	r9, r9, #1
 800d0b6:	4670      	mov	r0, lr
 800d0b8:	4574      	cmp	r4, lr
 800d0ba:	dc68      	bgt.n	800d18e <__kernel_rem_pio2f+0x226>
 800d0bc:	2d00      	cmp	r5, #0
 800d0be:	dd03      	ble.n	800d0c8 <__kernel_rem_pio2f+0x160>
 800d0c0:	2d01      	cmp	r5, #1
 800d0c2:	d074      	beq.n	800d1ae <__kernel_rem_pio2f+0x246>
 800d0c4:	2d02      	cmp	r5, #2
 800d0c6:	d07d      	beq.n	800d1c4 <__kernel_rem_pio2f+0x25c>
 800d0c8:	2e02      	cmp	r6, #2
 800d0ca:	d12d      	bne.n	800d128 <__kernel_rem_pio2f+0x1c0>
 800d0cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d0d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d0d4:	b340      	cbz	r0, 800d128 <__kernel_rem_pio2f+0x1c0>
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	9306      	str	r3, [sp, #24]
 800d0da:	f7ff fedf 	bl	800ce9c <scalbnf>
 800d0de:	9b06      	ldr	r3, [sp, #24]
 800d0e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d0e4:	e020      	b.n	800d128 <__kernel_rem_pio2f+0x1c0>
 800d0e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d0ea:	3e01      	subs	r6, #1
 800d0ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d0f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d0fc:	ecac 0a01 	vstmia	ip!, {s0}
 800d100:	ed30 0a01 	vldmdb	r0!, {s0}
 800d104:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d108:	e79e      	b.n	800d048 <__kernel_rem_pio2f+0xe0>
 800d10a:	d105      	bne.n	800d118 <__kernel_rem_pio2f+0x1b0>
 800d10c:	1e60      	subs	r0, r4, #1
 800d10e:	a908      	add	r1, sp, #32
 800d110:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d114:	11f6      	asrs	r6, r6, #7
 800d116:	e7c8      	b.n	800d0aa <__kernel_rem_pio2f+0x142>
 800d118:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d11c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d124:	da31      	bge.n	800d18a <__kernel_rem_pio2f+0x222>
 800d126:	2600      	movs	r6, #0
 800d128:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d130:	f040 8098 	bne.w	800d264 <__kernel_rem_pio2f+0x2fc>
 800d134:	1e60      	subs	r0, r4, #1
 800d136:	2200      	movs	r2, #0
 800d138:	4550      	cmp	r0, sl
 800d13a:	da4b      	bge.n	800d1d4 <__kernel_rem_pio2f+0x26c>
 800d13c:	2a00      	cmp	r2, #0
 800d13e:	d065      	beq.n	800d20c <__kernel_rem_pio2f+0x2a4>
 800d140:	3c01      	subs	r4, #1
 800d142:	ab08      	add	r3, sp, #32
 800d144:	3d08      	subs	r5, #8
 800d146:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0f8      	beq.n	800d140 <__kernel_rem_pio2f+0x1d8>
 800d14e:	4628      	mov	r0, r5
 800d150:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d154:	f7ff fea2 	bl	800ce9c <scalbnf>
 800d158:	1c63      	adds	r3, r4, #1
 800d15a:	aa44      	add	r2, sp, #272	@ 0x110
 800d15c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d25c <__kernel_rem_pio2f+0x2f4>
 800d160:	0099      	lsls	r1, r3, #2
 800d162:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d166:	4623      	mov	r3, r4
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f280 80a9 	bge.w	800d2c0 <__kernel_rem_pio2f+0x358>
 800d16e:	4623      	mov	r3, r4
 800d170:	2b00      	cmp	r3, #0
 800d172:	f2c0 80c7 	blt.w	800d304 <__kernel_rem_pio2f+0x39c>
 800d176:	aa44      	add	r2, sp, #272	@ 0x110
 800d178:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d17c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d254 <__kernel_rem_pio2f+0x2ec>
 800d180:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800d184:	2000      	movs	r0, #0
 800d186:	1ae2      	subs	r2, r4, r3
 800d188:	e0b1      	b.n	800d2ee <__kernel_rem_pio2f+0x386>
 800d18a:	2602      	movs	r6, #2
 800d18c:	e78f      	b.n	800d0ae <__kernel_rem_pio2f+0x146>
 800d18e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d192:	b948      	cbnz	r0, 800d1a8 <__kernel_rem_pio2f+0x240>
 800d194:	b121      	cbz	r1, 800d1a0 <__kernel_rem_pio2f+0x238>
 800d196:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d19a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d19e:	2101      	movs	r1, #1
 800d1a0:	f10e 0e01 	add.w	lr, lr, #1
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	e787      	b.n	800d0b8 <__kernel_rem_pio2f+0x150>
 800d1a8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d1ac:	e7f5      	b.n	800d19a <__kernel_rem_pio2f+0x232>
 800d1ae:	f104 3cff 	add.w	ip, r4, #4294967295
 800d1b2:	aa08      	add	r2, sp, #32
 800d1b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d1b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d1bc:	a908      	add	r1, sp, #32
 800d1be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d1c2:	e781      	b.n	800d0c8 <__kernel_rem_pio2f+0x160>
 800d1c4:	f104 3cff 	add.w	ip, r4, #4294967295
 800d1c8:	aa08      	add	r2, sp, #32
 800d1ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d1ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d1d2:	e7f3      	b.n	800d1bc <__kernel_rem_pio2f+0x254>
 800d1d4:	a908      	add	r1, sp, #32
 800d1d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d1da:	3801      	subs	r0, #1
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	e7ab      	b.n	800d138 <__kernel_rem_pio2f+0x1d0>
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d0fa      	beq.n	800d1e0 <__kernel_rem_pio2f+0x278>
 800d1ea:	9905      	ldr	r1, [sp, #20]
 800d1ec:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d1f0:	eb0d 0001 	add.w	r0, sp, r1
 800d1f4:	18e6      	adds	r6, r4, r3
 800d1f6:	a91c      	add	r1, sp, #112	@ 0x70
 800d1f8:	f104 0c01 	add.w	ip, r4, #1
 800d1fc:	384c      	subs	r0, #76	@ 0x4c
 800d1fe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d202:	4422      	add	r2, r4
 800d204:	4562      	cmp	r2, ip
 800d206:	da04      	bge.n	800d212 <__kernel_rem_pio2f+0x2aa>
 800d208:	4614      	mov	r4, r2
 800d20a:	e710      	b.n	800d02e <__kernel_rem_pio2f+0xc6>
 800d20c:	9804      	ldr	r0, [sp, #16]
 800d20e:	2201      	movs	r2, #1
 800d210:	e7e7      	b.n	800d1e2 <__kernel_rem_pio2f+0x27a>
 800d212:	9903      	ldr	r1, [sp, #12]
 800d214:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d218:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d21c:	9105      	str	r1, [sp, #20]
 800d21e:	ee07 1a90 	vmov	s15, r1
 800d222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d226:	2400      	movs	r4, #0
 800d228:	ece6 7a01 	vstmia	r6!, {s15}
 800d22c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800d230:	46b1      	mov	r9, r6
 800d232:	455c      	cmp	r4, fp
 800d234:	dd04      	ble.n	800d240 <__kernel_rem_pio2f+0x2d8>
 800d236:	ece0 7a01 	vstmia	r0!, {s15}
 800d23a:	f10c 0c01 	add.w	ip, ip, #1
 800d23e:	e7e1      	b.n	800d204 <__kernel_rem_pio2f+0x29c>
 800d240:	ecfe 6a01 	vldmia	lr!, {s13}
 800d244:	ed39 7a01 	vldmdb	r9!, {s14}
 800d248:	3401      	adds	r4, #1
 800d24a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d24e:	e7f0      	b.n	800d232 <__kernel_rem_pio2f+0x2ca>
 800d250:	08023b24 	.word	0x08023b24
 800d254:	08023af8 	.word	0x08023af8
 800d258:	43800000 	.word	0x43800000
 800d25c:	3b800000 	.word	0x3b800000
 800d260:	00000000 	.word	0x00000000
 800d264:	9b02      	ldr	r3, [sp, #8]
 800d266:	eeb0 0a48 	vmov.f32	s0, s16
 800d26a:	eba3 0008 	sub.w	r0, r3, r8
 800d26e:	f7ff fe15 	bl	800ce9c <scalbnf>
 800d272:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d258 <__kernel_rem_pio2f+0x2f0>
 800d276:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27e:	db19      	blt.n	800d2b4 <__kernel_rem_pio2f+0x34c>
 800d280:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d25c <__kernel_rem_pio2f+0x2f4>
 800d284:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d288:	aa08      	add	r2, sp, #32
 800d28a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d28e:	3508      	adds	r5, #8
 800d290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d294:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d29c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d2a0:	ee10 3a10 	vmov	r3, s0
 800d2a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d2a8:	ee17 3a90 	vmov	r3, s15
 800d2ac:	3401      	adds	r4, #1
 800d2ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d2b2:	e74c      	b.n	800d14e <__kernel_rem_pio2f+0x1e6>
 800d2b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d2b8:	aa08      	add	r2, sp, #32
 800d2ba:	ee10 3a10 	vmov	r3, s0
 800d2be:	e7f6      	b.n	800d2ae <__kernel_rem_pio2f+0x346>
 800d2c0:	a808      	add	r0, sp, #32
 800d2c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d2c6:	9001      	str	r0, [sp, #4]
 800d2c8:	ee07 0a90 	vmov	s15, r0
 800d2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d2d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d2da:	ed62 7a01 	vstmdb	r2!, {s15}
 800d2de:	e743      	b.n	800d168 <__kernel_rem_pio2f+0x200>
 800d2e0:	ecfc 6a01 	vldmia	ip!, {s13}
 800d2e4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d2e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	4550      	cmp	r0, sl
 800d2f0:	dc01      	bgt.n	800d2f6 <__kernel_rem_pio2f+0x38e>
 800d2f2:	4290      	cmp	r0, r2
 800d2f4:	ddf4      	ble.n	800d2e0 <__kernel_rem_pio2f+0x378>
 800d2f6:	a858      	add	r0, sp, #352	@ 0x160
 800d2f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d2fc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d300:	3b01      	subs	r3, #1
 800d302:	e735      	b.n	800d170 <__kernel_rem_pio2f+0x208>
 800d304:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d306:	2b02      	cmp	r3, #2
 800d308:	dc09      	bgt.n	800d31e <__kernel_rem_pio2f+0x3b6>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dc27      	bgt.n	800d35e <__kernel_rem_pio2f+0x3f6>
 800d30e:	d040      	beq.n	800d392 <__kernel_rem_pio2f+0x42a>
 800d310:	f009 0007 	and.w	r0, r9, #7
 800d314:	b059      	add	sp, #356	@ 0x164
 800d316:	ecbd 8b04 	vpop	{d8-d9}
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d320:	2b03      	cmp	r3, #3
 800d322:	d1f5      	bne.n	800d310 <__kernel_rem_pio2f+0x3a8>
 800d324:	aa30      	add	r2, sp, #192	@ 0xc0
 800d326:	1f0b      	subs	r3, r1, #4
 800d328:	4413      	add	r3, r2
 800d32a:	461a      	mov	r2, r3
 800d32c:	4620      	mov	r0, r4
 800d32e:	2800      	cmp	r0, #0
 800d330:	dc50      	bgt.n	800d3d4 <__kernel_rem_pio2f+0x46c>
 800d332:	4622      	mov	r2, r4
 800d334:	2a01      	cmp	r2, #1
 800d336:	dc5d      	bgt.n	800d3f4 <__kernel_rem_pio2f+0x48c>
 800d338:	ab30      	add	r3, sp, #192	@ 0xc0
 800d33a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800d33e:	440b      	add	r3, r1
 800d340:	2c01      	cmp	r4, #1
 800d342:	dc67      	bgt.n	800d414 <__kernel_rem_pio2f+0x4ac>
 800d344:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d348:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d167      	bne.n	800d420 <__kernel_rem_pio2f+0x4b8>
 800d350:	edc7 6a00 	vstr	s13, [r7]
 800d354:	ed87 7a01 	vstr	s14, [r7, #4]
 800d358:	edc7 7a02 	vstr	s15, [r7, #8]
 800d35c:	e7d8      	b.n	800d310 <__kernel_rem_pio2f+0x3a8>
 800d35e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d360:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800d364:	440b      	add	r3, r1
 800d366:	4622      	mov	r2, r4
 800d368:	2a00      	cmp	r2, #0
 800d36a:	da24      	bge.n	800d3b6 <__kernel_rem_pio2f+0x44e>
 800d36c:	b34e      	cbz	r6, 800d3c2 <__kernel_rem_pio2f+0x45a>
 800d36e:	eef1 7a47 	vneg.f32	s15, s14
 800d372:	edc7 7a00 	vstr	s15, [r7]
 800d376:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d37a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d37e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d380:	2301      	movs	r3, #1
 800d382:	429c      	cmp	r4, r3
 800d384:	da20      	bge.n	800d3c8 <__kernel_rem_pio2f+0x460>
 800d386:	b10e      	cbz	r6, 800d38c <__kernel_rem_pio2f+0x424>
 800d388:	eef1 7a67 	vneg.f32	s15, s15
 800d38c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d390:	e7be      	b.n	800d310 <__kernel_rem_pio2f+0x3a8>
 800d392:	ab30      	add	r3, sp, #192	@ 0xc0
 800d394:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d260 <__kernel_rem_pio2f+0x2f8>
 800d398:	440b      	add	r3, r1
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	da05      	bge.n	800d3aa <__kernel_rem_pio2f+0x442>
 800d39e:	b10e      	cbz	r6, 800d3a4 <__kernel_rem_pio2f+0x43c>
 800d3a0:	eef1 7a67 	vneg.f32	s15, s15
 800d3a4:	edc7 7a00 	vstr	s15, [r7]
 800d3a8:	e7b2      	b.n	800d310 <__kernel_rem_pio2f+0x3a8>
 800d3aa:	ed33 7a01 	vldmdb	r3!, {s14}
 800d3ae:	3c01      	subs	r4, #1
 800d3b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3b4:	e7f1      	b.n	800d39a <__kernel_rem_pio2f+0x432>
 800d3b6:	ed73 7a01 	vldmdb	r3!, {s15}
 800d3ba:	3a01      	subs	r2, #1
 800d3bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3c0:	e7d2      	b.n	800d368 <__kernel_rem_pio2f+0x400>
 800d3c2:	eef0 7a47 	vmov.f32	s15, s14
 800d3c6:	e7d4      	b.n	800d372 <__kernel_rem_pio2f+0x40a>
 800d3c8:	ecb2 7a01 	vldmia	r2!, {s14}
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3d2:	e7d6      	b.n	800d382 <__kernel_rem_pio2f+0x41a>
 800d3d4:	ed72 7a01 	vldmdb	r2!, {s15}
 800d3d8:	edd2 6a01 	vldr	s13, [r2, #4]
 800d3dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d3e0:	3801      	subs	r0, #1
 800d3e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3e6:	ed82 7a00 	vstr	s14, [r2]
 800d3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ee:	edc2 7a01 	vstr	s15, [r2, #4]
 800d3f2:	e79c      	b.n	800d32e <__kernel_rem_pio2f+0x3c6>
 800d3f4:	ed73 7a01 	vldmdb	r3!, {s15}
 800d3f8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d3fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d400:	3a01      	subs	r2, #1
 800d402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d406:	ed83 7a00 	vstr	s14, [r3]
 800d40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d412:	e78f      	b.n	800d334 <__kernel_rem_pio2f+0x3cc>
 800d414:	ed33 7a01 	vldmdb	r3!, {s14}
 800d418:	3c01      	subs	r4, #1
 800d41a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d41e:	e78f      	b.n	800d340 <__kernel_rem_pio2f+0x3d8>
 800d420:	eef1 6a66 	vneg.f32	s13, s13
 800d424:	eeb1 7a47 	vneg.f32	s14, s14
 800d428:	edc7 6a00 	vstr	s13, [r7]
 800d42c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d430:	eef1 7a67 	vneg.f32	s15, s15
 800d434:	e790      	b.n	800d358 <__kernel_rem_pio2f+0x3f0>
 800d436:	bf00      	nop

0800d438 <floorf>:
 800d438:	ee10 3a10 	vmov	r3, s0
 800d43c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d440:	3a7f      	subs	r2, #127	@ 0x7f
 800d442:	2a16      	cmp	r2, #22
 800d444:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d448:	dc2b      	bgt.n	800d4a2 <floorf+0x6a>
 800d44a:	2a00      	cmp	r2, #0
 800d44c:	da12      	bge.n	800d474 <floorf+0x3c>
 800d44e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d4b4 <floorf+0x7c>
 800d452:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d456:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45e:	dd06      	ble.n	800d46e <floorf+0x36>
 800d460:	2b00      	cmp	r3, #0
 800d462:	da24      	bge.n	800d4ae <floorf+0x76>
 800d464:	2900      	cmp	r1, #0
 800d466:	4b14      	ldr	r3, [pc, #80]	@ (800d4b8 <floorf+0x80>)
 800d468:	bf08      	it	eq
 800d46a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d46e:	ee00 3a10 	vmov	s0, r3
 800d472:	4770      	bx	lr
 800d474:	4911      	ldr	r1, [pc, #68]	@ (800d4bc <floorf+0x84>)
 800d476:	4111      	asrs	r1, r2
 800d478:	420b      	tst	r3, r1
 800d47a:	d0fa      	beq.n	800d472 <floorf+0x3a>
 800d47c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d4b4 <floorf+0x7c>
 800d480:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d484:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48c:	ddef      	ble.n	800d46e <floorf+0x36>
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfbe      	ittt	lt
 800d492:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d496:	fa40 f202 	asrlt.w	r2, r0, r2
 800d49a:	189b      	addlt	r3, r3, r2
 800d49c:	ea23 0301 	bic.w	r3, r3, r1
 800d4a0:	e7e5      	b.n	800d46e <floorf+0x36>
 800d4a2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d4a6:	d3e4      	bcc.n	800d472 <floorf+0x3a>
 800d4a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4ac:	4770      	bx	lr
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e7dd      	b.n	800d46e <floorf+0x36>
 800d4b2:	bf00      	nop
 800d4b4:	7149f2ca 	.word	0x7149f2ca
 800d4b8:	bf800000 	.word	0xbf800000
 800d4bc:	007fffff 	.word	0x007fffff

0800d4c0 <_init>:
 800d4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c2:	bf00      	nop
 800d4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4c6:	bc08      	pop	{r3}
 800d4c8:	469e      	mov	lr, r3
 800d4ca:	4770      	bx	lr

0800d4cc <_fini>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	bf00      	nop
 800d4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d2:	bc08      	pop	{r3}
 800d4d4:	469e      	mov	lr, r3
 800d4d6:	4770      	bx	lr
