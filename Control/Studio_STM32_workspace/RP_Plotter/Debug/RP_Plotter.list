
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d1a0  0800d3c8  0800d3c8  0000e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a568  0801a568  0001c2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a568  0801a568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a570  0801a570  0001c2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a570  0801a570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a574  0801a574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0801a578  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  200002c8  0801a83c  0001c2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0801a83c  0001c5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187c8  00000000  00000000  0001c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0f  00000000  00000000  00034abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000378d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed3  00000000  00000000  00038bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747f  00000000  00000000  00039a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c6d  00000000  00000000  00060f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100346  00000000  00000000  00077b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  00177f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0017d59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c8 	.word	0x200002c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d3b0 	.word	0x0800d3b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002cc 	.word	0x200002cc
 8000214:	0800d3b0 	.word	0x0800d3b0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002e4 	.word	0x200002e4

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002e4 	.word	0x200002e4

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a f885 	bl	800b264 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f883 	bl	8009298 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f00a f80d 	bl	800b1b8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a f824 	bl	800b1f0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 facb 	bl	800a74c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 fbf3 	bl	800a9c0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fddd 	bl	8007db0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 f99e 	bl	8008540 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002e4 	.word	0x200002e4
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET(int8_t slot, float dist, float ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dc04      	bgt.n	80012c2 <SET_TARGET+0x3a>
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	3310      	adds	r3, #16
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <SET_TARGET+0x42>
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	3313      	adds	r3, #19
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SET_TARGET+0x94>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dc05      	bgt.n	80012fc <SET_TARGET+0x74>
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	3310      	adds	r3, #16
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3301      	adds	r3, #1
 80012fa:	e004      	b.n	8001306 <SET_TARGET+0x7e>
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	3313      	adds	r3, #19
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3301      	adds	r3, #1
 8001306:	b291      	uxth	r1, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SET_TARGET+0x94>)
 800130a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20001160 	.word	0x20001160

08001320 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08b      	sub	sp, #44	@ 0x2c
 8001324:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001326:	4bbc      	ldr	r3, [pc, #752]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001328:	f645 1261 	movw	r2, #22881	@ 0x5961
 800132c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800132e:	4bbb      	ldr	r3, [pc, #748]	@ (800161c <Modbus_Protocal_Worker+0x2fc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <Modbus_Protocal_Worker+0x1a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <Modbus_Protocal_Worker+0x1c>
 800133a:	2201      	movs	r2, #1
 800133c:	4bb6      	ldr	r3, [pc, #728]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 800133e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001340:	4bb5      	ldr	r3, [pc, #724]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4bb3      	ldr	r3, [pc, #716]	@ (8001620 <Modbus_Protocal_Worker+0x300>)
 8001352:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001354:	4bb0      	ldr	r3, [pc, #704]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001356:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001624 <Modbus_Protocal_Worker+0x304>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4baf      	ldr	r3, [pc, #700]	@ (8001628 <Modbus_Protocal_Worker+0x308>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 8001370:	4ba9      	ldr	r3, [pc, #676]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001372:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8a0 	bl	80004bc <__aeabi_i2d>
 800137c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f905 	bl	8000590 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fbb9 	bl	8000b04 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8a3 	bl	80004e0 <__aeabi_f2d>
 800139a:	a39b      	add	r3, pc, #620	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2e8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff3e 	bl	8000220 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbaa 	bl	8000b04 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a9d      	ldr	r2, [pc, #628]	@ (8001628 <Modbus_Protocal_Worker+0x308>)
 80013b4:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013b6:	f107 040c 	add.w	r4, r7, #12
 80013ba:	f107 0210 	add.w	r2, r7, #16
 80013be:	f107 0114 	add.w	r1, r7, #20
 80013c2:	f107 0018 	add.w	r0, r7, #24
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	f003 fe0f 	bl	8004ff4 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f881 	bl	80004e0 <__aeabi_f2d>
 80013de:	a38a      	add	r3, pc, #552	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2e8>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7fe ff1e 	bl	8000224 <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	a387      	add	r3, pc, #540	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8cb 	bl	8000590 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb7f 	bl	8000b04 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 800140a:	edd7 7a07 	vldr	s15, [r7, #28]
 800140e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b7d      	ldr	r3, [pc, #500]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001424:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f859 	bl	80004e0 <__aeabi_f2d>
 800142e:	a378      	add	r3, pc, #480	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f8ac 	bl	8000590 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb60 	bl	8000b04 <__aeabi_d2f>
 8001444:	ee07 0a90 	vmov	s15, r0
 8001448:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 800144c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 8001454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001458:	ee17 3a90 	vmov	r3, s15
 800145c:	b21b      	sxth	r3, r3
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001462:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f83a 	bl	80004e0 <__aeabi_f2d>
 800146c:	a368      	add	r3, pc, #416	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f88d 	bl	8000590 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb41 	bl	8000b04 <__aeabi_d2f>
 8001482:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001486:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800148a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	b21b      	sxth	r3, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 80014a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a6:	eef0 7ae7 	vabs.f32	s15, s15
 80014aa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014c0:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d6:	ee17 3a90 	vmov	r3, s15
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b4e      	ldr	r3, [pc, #312]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 80014e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f2:	ee17 3a90 	vmov	r3, s15
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014fc:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7ddb      	ldrb	r3, [r3, #23]
 8001504:	3b01      	subs	r3, #1
 8001506:	2b03      	cmp	r3, #3
 8001508:	d80a      	bhi.n	8001520 <Modbus_Protocal_Worker+0x200>
 800150a:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <Modbus_Protocal_Worker+0x1f0>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800152b 	.word	0x0800152b
 8001514:	080016f5 	.word	0x080016f5
 8001518:	080015b7 	.word	0x080015b7
 800151c:	08001631 	.word	0x08001631
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001520:	4b42      	ldr	r3, [pc, #264]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	75da      	strb	r2, [r3, #23]
		break;
 8001528:	e0fc      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 800152a:	4b40      	ldr	r3, [pc, #256]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <Modbus_Protocal_Worker+0x224>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 8001536:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2202      	movs	r2, #2
 800153c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800153e:	f000 f9e7 	bl	8001910 <Modbus_Emission>
 8001542:	e018      	b.n	8001576 <Modbus_Protocal_Worker+0x256>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001558:	b29b      	uxth	r3, r3
 800155a:	429a      	cmp	r2, r3
 800155c:	d00b      	beq.n	8001576 <Modbus_Protocal_Worker+0x256>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2203      	movs	r2, #3
 8001574:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001580:	2b20      	cmp	r3, #32
 8001582:	f040 80c8 	bne.w	8001716 <Modbus_Protocal_Worker+0x3f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001590:	4b26      	ldr	r3, [pc, #152]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001596:	4b25      	ldr	r3, [pc, #148]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015a2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015a6:	4413      	add	r3, r2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ae:	4619      	mov	r1, r3
 80015b0:	f009 fa06 	bl	800a9c0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015b4:	e0af      	b.n	8001716 <Modbus_Protocal_Worker+0x3f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80ac 	beq.w	800171a <Modbus_Protocal_Worker+0x3fa>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	22fe      	movs	r2, #254	@ 0xfe
 80015c8:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015e8:	1a8a      	subs	r2, r1, r2
 80015ea:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015ec:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2204      	movs	r2, #4
 80015f6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015f8:	e08f      	b.n	800171a <Modbus_Protocal_Worker+0x3fa>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	03b761f5 	.word	0x03b761f5
 8001604:	3f5c9871 	.word	0x3f5c9871
 8001608:	54442d18 	.word	0x54442d18
 800160c:	3ff921fb 	.word	0x3ff921fb
 8001610:	1a63c1f8 	.word	0x1a63c1f8
 8001614:	404ca5dc 	.word	0x404ca5dc
 8001618:	20001160 	.word	0x20001160
 800161c:	20000c07 	.word	0x20000c07
 8001620:	20000c7c 	.word	0x20000c7c
 8001624:	3dcccccd 	.word	0x3dcccccd
 8001628:	20000c74 	.word	0x20000c74
 800162c:	200002e4 	.word	0x200002e4
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001638:	f113 0f02 	cmn.w	r3, #2
 800163c:	d150      	bne.n	80016e0 <Modbus_Protocal_Worker+0x3c0>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 8001646:	4b39      	ldr	r3, [pc, #228]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 8001656:	3b02      	subs	r3, #2
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fddc 	bl	8001218 <CRC16>
 8001660:	4603      	mov	r3, r0
 8001662:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 8001664:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 8001672:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001674:	440b      	add	r3, r1
 8001676:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d10c      	bne.n	8001698 <Modbus_Protocal_Worker+0x378>
					&& CalculateCRC.U8[1]
 800167e:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 800168c:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800168e:	440b      	add	r3, r1
 8001690:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d004      	beq.n	80016a2 <Modbus_Protocal_Worker+0x382>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	22ff      	movs	r2, #255	@ 0xff
 800169e:	759a      	strb	r2, [r3, #22]
				break;
 80016a0:	e040      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d113      	bne.n	80016dc <Modbus_Protocal_Worker+0x3bc>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016c4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016ce:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016d0:	461a      	mov	r2, r3
 80016d2:	f00a ff53 	bl	800c57c <memcpy>

			//execute command
			Modbus_frame_response();
 80016d6:	f000 f903 	bl	80018e0 <Modbus_frame_response>
 80016da:	e001      	b.n	80016e0 <Modbus_Protocal_Worker+0x3c0>
				break;
 80016dc:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80016de:	e021      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		if (hModbus->Flag_T35TimeOut) {
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	7d5b      	ldrb	r3, [r3, #21]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <Modbus_Protocal_Worker+0x3fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	75da      	strb	r2, [r3, #23]
		break;
 80016f2:	e014      	b.n	800171e <Modbus_Protocal_Worker+0x3fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d10f      	bne.n	8001722 <Modbus_Protocal_Worker+0x402>
			hModbus->TxCount = 0;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	75da      	strb	r2, [r3, #23]
		break;
 8001714:	e005      	b.n	8001722 <Modbus_Protocal_Worker+0x402>
		break;
 8001716:	bf00      	nop
 8001718:	e004      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 800171a:	bf00      	nop
 800171c:	e002      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 8001722:	bf00      	nop
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	@ 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	200002e4 	.word	0x200002e4

08001730 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	7e5b      	ldrb	r3, [r3, #25]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	7e92      	ldrb	r2, [r2, #26]
 8001746:	4413      	add	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <modbusWrite1Register+0x7c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d903      	bls.n	800175e <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f8a0 	bl	800189c <ModbusErrorReply>
		return;
 800175c:	e023      	b.n	80017a6 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	440b      	add	r3, r1
 800176e:	7ed2      	ldrb	r2, [r2, #27]
 8001770:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	440b      	add	r3, r1
 8001782:	7f12      	ldrb	r2, [r2, #28]
 8001784:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3318      	adds	r3, #24
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	f00a fef0 	bl	800c57c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <modbusWrite1Register+0x7c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002e4 	.word	0x200002e4

080017b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <modbusRead1Register+0xe8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	7edb      	ldrb	r3, [r3, #27]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017c0:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <modbusRead1Register+0xe8>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017c6:	4413      	add	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017ca:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <modbusRead1Register+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7e5b      	ldrb	r3, [r3, #25]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4a30      	ldr	r2, [pc, #192]	@ (8001898 <modbusRead1Register+0xe8>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	7e92      	ldrb	r2, [r2, #26]
 80017da:	4413      	add	r3, r2
 80017dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <modbusRead1Register+0x3a>
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80017e8:	d903      	bls.n	80017f2 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f856 	bl	800189c <ModbusErrorReply>
		return;
 80017f0:	e04e      	b.n	8001890 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <modbusRead1Register+0xe8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d808      	bhi.n	8001810 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80017fe:	88ba      	ldrh	r2, [r7, #4]
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <modbusRead1Register+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d903      	bls.n	8001818 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001810:	2002      	movs	r0, #2
 8001812:	f000 f843 	bl	800189c <ModbusErrorReply>
		return;
 8001816:	e03b      	b.n	8001890 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <modbusRead1Register+0xe8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <modbusRead1Register+0xe8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0052      	lsls	r2, r2, #1
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001832:	2400      	movs	r4, #0
 8001834:	e020      	b.n	8001878 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <modbusRead1Register+0xe8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	4423      	add	r3, r4
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <modbusRead1Register+0xe8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	1c63      	adds	r3, r4, #1
 800184a:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800184c:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 800184e:	4413      	add	r3, r2
 8001850:	460a      	mov	r2, r1
 8001852:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <modbusRead1Register+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	4423      	add	r3, r4
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <modbusRead1Register+0xe8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	0063      	lsls	r3, r4, #1
 800186a:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800186c:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 800186e:	4413      	add	r3, r2
 8001870:	460a      	mov	r2, r1
 8001872:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001876:	3401      	adds	r4, #1
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	429c      	cmp	r4, r3
 800187c:	dbdb      	blt.n	8001836 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <modbusRead1Register+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0052      	lsls	r2, r2, #1
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	200002e4 	.word	0x200002e4

0800189c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <ModbusErrorReply+0x40>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	7e1a      	ldrb	r2, [r3, #24]
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <ModbusErrorReply+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <ModbusErrorReply+0x40>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <ModbusErrorReply+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002e4 	.word	0x200002e4

080018e0 <Modbus_frame_response>:

void Modbus_frame_response() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <Modbus_frame_response+0x2c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d004      	beq.n	80018f8 <Modbus_frame_response+0x18>
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d105      	bne.n	80018fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80018f2:	f7ff ff1d 	bl	8001730 <modbusWrite1Register>
		break;
 80018f6:	e006      	b.n	8001906 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80018f8:	f7ff ff5a 	bl	80017b0 <modbusRead1Register>
		break;
 80018fc:	e003      	b.n	8001906 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff ffcc 	bl	800189c <ModbusErrorReply>
		break;
 8001904:	bf00      	nop

	}
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002e4 	.word	0x200002e4

08001910 <Modbus_Emission>:

void Modbus_Emission() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001920:	2b20      	cmp	r3, #32
 8001922:	d15d      	bne.n	80019e0 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001924:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <Modbus_Emission+0xe8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001932:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 800193a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 8001944:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800194c:	461a      	mov	r2, r3
 800194e:	f00a fe15 	bl	800c57c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800195a:	461a      	mov	r2, r3
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <Modbus_Emission+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3203      	adds	r2, #3
 8001962:	b292      	uxth	r2, r2
 8001964:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <Modbus_Emission+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001978:	3b02      	subs	r3, #2
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff fc4b 	bl	8001218 <CRC16>
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <Modbus_Emission+0xe8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001992:	3b02      	subs	r3, #2
 8001994:	7939      	ldrb	r1, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	460a      	mov	r2, r1
 800199a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019aa:	3b01      	subs	r3, #1
 80019ac:	7979      	ldrb	r1, [r7, #5]
 80019ae:	4413      	add	r3, r2
 80019b0:	460a      	mov	r2, r1
 80019b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d10d      	bne.n	80019e0 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019da:	461a      	mov	r2, r3
 80019dc:	f008 ff70 	bl	800a8c0 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	755a      	strb	r2, [r3, #21]

}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200002e4 	.word	0x200002e4

080019fc <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a08:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a0c:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a14:	eef0 7ae7 	vabs.f32	s15, s15
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	eef0 7ae7 	vabs.f32	s15, s15
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a2c:	edd7 7a00 	vldr	s15, [r7]
 8001a30:	eef0 7ae7 	vabs.f32	s15, s15
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	db02      	blt.n	8001a64 <Trapezoidal_Init+0x68>
 8001a5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a62:	e000      	b.n	8001a66 <Trapezoidal_Init+0x6a>
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <Trapezoidal_Init+0x190>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd14      	ble.n	8001ad4 <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f00a fd6a 	bl	800c59c <sqrtf>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ad2:	e006      	b.n	8001ae2 <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001afe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b38:	e017      	b.n	8001b6a <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	bf800000 	.word	0xbf800000

08001b90 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b90:	b480      	push	{r7}
 8001b92:	b095      	sub	sp, #84	@ 0x54
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 812c 	bne.w	8001dfe <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001bac:	edd7 7a00 	vldr	s15, [r7]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bd2:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bd6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bde:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001be2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001be6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d111      	bne.n	8001c3a <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c1e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c26:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c2a:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c2e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c3e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c42:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c4e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c52:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001c78:	4b64      	ldr	r3, [pc, #400]	@ (8001e0c <Trapezoidal_Update+0x27c>)
 8001c7a:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c88:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d51a      	bpl.n	8001ccc <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cca:	e079      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001ccc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d519      	bpl.n	8001d1a <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001ce6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001cf6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d10:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d18:	e052      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d26:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d53a      	bpl.n	8001daa <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d34:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d44:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d48:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d50:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d64:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001d84:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001da0:	eef1 7a67 	vneg.f32	s15, s15
 8001da4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001da8:	e00a      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dc6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dda:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edc3 7a06 	vstr	s15, [r3, #24]
 8001dfc:	e000      	b.n	8001e00 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001dfe:	bf00      	nop
}
 8001e00:	3754      	adds	r7, #84	@ 0x54
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	358637bd 	.word	0x358637bd

08001e10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	ed2d 8b02 	vpush	{d8}
 8001e18:	b0b1      	sub	sp, #196	@ 0xc4
 8001e1a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e1c:	f004 f847 	bl	8005eae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e20:	f001 fdd6 	bl	80039d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e24:	f002 fa30 	bl	8004288 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e28:	f002 f9fc 	bl	8004224 <MX_DMA_Init>
	MX_TIM4_Init();
 8001e2c:	f001 ff78 	bl	8003d20 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e30:	f001 ffcc 	bl	8003dcc <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e34:	f001 ff1e 	bl	8003c74 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e38:	f002 f816 	bl	8003e68 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e3c:	f002 f8d0 	bl	8003fe0 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e40:	f001 fe12 	bl	8003a68 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e44:	f001 fe96 	bl	8003b74 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e48:	f002 f96e 	bl	8004128 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e4c:	f002 f99c 	bl	8004188 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e50:	484c      	ldr	r0, [pc, #304]	@ (8001f84 <main+0x174>)
 8001e52:	f005 ff3d 	bl	8007cd0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e56:	2100      	movs	r1, #0
 8001e58:	484a      	ldr	r0, [pc, #296]	@ (8001f84 <main+0x174>)
 8001e5a:	f006 fa05 	bl	8008268 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e5e:	2104      	movs	r1, #4
 8001e60:	4848      	ldr	r0, [pc, #288]	@ (8001f84 <main+0x174>)
 8001e62:	f006 fa01 	bl	8008268 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e66:	4848      	ldr	r0, [pc, #288]	@ (8001f88 <main+0x178>)
 8001e68:	f005 ff32 	bl	8007cd0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4846      	ldr	r0, [pc, #280]	@ (8001f88 <main+0x178>)
 8001e70:	f006 f9fa 	bl	8008268 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e74:	2104      	movs	r1, #4
 8001e76:	4844      	ldr	r0, [pc, #272]	@ (8001f88 <main+0x178>)
 8001e78:	f006 f9f6 	bl	8008268 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e7c:	213c      	movs	r1, #60	@ 0x3c
 8001e7e:	4843      	ldr	r0, [pc, #268]	@ (8001f8c <main+0x17c>)
 8001e80:	f006 fca0 	bl	80087c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e84:	213c      	movs	r1, #60	@ 0x3c
 8001e86:	4842      	ldr	r0, [pc, #264]	@ (8001f90 <main+0x180>)
 8001e88:	f006 fc9c 	bl	80087c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e8c:	4841      	ldr	r0, [pc, #260]	@ (8001f94 <main+0x184>)
 8001e8e:	f005 ff8f 	bl	8007db0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e92:	4841      	ldr	r0, [pc, #260]	@ (8001f98 <main+0x188>)
 8001e94:	f005 ff1c 	bl	8007cd0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e98:	2108      	movs	r1, #8
 8001e9a:	483f      	ldr	r0, [pc, #252]	@ (8001f98 <main+0x188>)
 8001e9c:	f006 f86e 	bl	8007f7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ea0:	210c      	movs	r1, #12
 8001ea2:	483d      	ldr	r0, [pc, #244]	@ (8001f98 <main+0x188>)
 8001ea4:	f006 f86a 	bl	8007f7c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ea8:	483c      	ldr	r0, [pc, #240]	@ (8001f9c <main+0x18c>)
 8001eaa:	f005 ff11 	bl	8007cd0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	483a      	ldr	r0, [pc, #232]	@ (8001f9c <main+0x18c>)
 8001eb2:	f006 f863 	bl	8007f7c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001eb6:	f002 fbb3 	bl	8004620 <DWT_Init>

	PID.Kp = 0.1;
 8001eba:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <main+0x190>)
 8001ebc:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <main+0x194>)
 8001ebe:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001ec0:	4a37      	ldr	r2, [pc, #220]	@ (8001fa0 <main+0x190>)
 8001ec2:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <main+0x198>)
 8001ec4:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001ec6:	4a36      	ldr	r2, [pc, #216]	@ (8001fa0 <main+0x190>)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <main+0x194>)
 8001eca:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4834      	ldr	r0, [pc, #208]	@ (8001fa0 <main+0x190>)
 8001ed0:	f00a faec 	bl	800c4ac <arm_pid_init_f32>

	Reset_R();
 8001ed4:	f002 fff6 	bl	8004ec4 <Reset_R>
	Reset_P();
 8001ed8:	f003 f804 	bl	8004ee4 <Reset_P>
	calibState = CALIB_IDLE;
 8001edc:	4a33      	ldr	r2, [pc, #204]	@ (8001fac <main+0x19c>)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f002 ffc4 	bl	8004e70 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001ee8:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <main+0x1a0>)
 8001eea:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <main+0x1a4>)
 8001eec:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001eee:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <main+0x1a0>)
 8001ef0:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <main+0x1a8>)
 8001ef2:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb0 <main+0x1a0>)
 8001ef6:	2315      	movs	r3, #21
 8001ef8:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <main+0x1a0>)
 8001efc:	23c8      	movs	r3, #200	@ 0xc8
 8001efe:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001f00:	492e      	ldr	r1, [pc, #184]	@ (8001fbc <main+0x1ac>)
 8001f02:	482b      	ldr	r0, [pc, #172]	@ (8001fb0 <main+0x1a0>)
 8001f04:	f7ff f932 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f08:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <main+0x1ac>)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f0e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001fc0 <main+0x1b0>
 8001f12:	2000      	movs	r0, #0
 8001f14:	f002 ff2e 	bl	8004d74 <Set_Motor>
	Set_Motor(1, 0);
 8001f18:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001fc0 <main+0x1b0>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f002 ff29 	bl	8004d74 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (!Test_no_BaseSystem && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f22:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <main+0x1b4>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <main+0x136>
 8001f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f34:	4824      	ldr	r0, [pc, #144]	@ (8001fc8 <main+0x1b8>)
 8001f36:	f004 fdef 	bl	8006b18 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <main+0x136>
			Test_no_BaseSystem = true;
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <main+0x1b4>)
 8001f42:	2301      	movs	r3, #1
 8001f44:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <main+0x1ac>)
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <main+0x1bc>)
 8001f4c:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <main+0x1c0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d17e      	bne.n	8002054 <main+0x244>
			switch (base_status) {
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <main+0x1bc>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00e      	beq.n	8001f7c <main+0x16c>
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	dc38      	bgt.n	8001fd4 <main+0x1c4>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d002      	beq.n	8001f6c <main+0x15c>
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d004      	beq.n	8001f74 <main+0x164>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f6a:	e033      	b.n	8001fd4 <main+0x1c4>
				REG16(REG_MOTION_STATUS) = 1;
 8001f6c:	4a13      	ldr	r2, [pc, #76]	@ (8001fbc <main+0x1ac>)
 8001f6e:	2301      	movs	r3, #1
 8001f70:	8413      	strh	r3, [r2, #32]
				break;
 8001f72:	e030      	b.n	8001fd6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 2;
 8001f74:	4a11      	ldr	r2, [pc, #68]	@ (8001fbc <main+0x1ac>)
 8001f76:	2302      	movs	r3, #2
 8001f78:	8413      	strh	r3, [r2, #32]
				break;
 8001f7a:	e02c      	b.n	8001fd6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 4;
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <main+0x1ac>)
 8001f7e:	2304      	movs	r3, #4
 8001f80:	8413      	strh	r3, [r2, #32]
				break;
 8001f82:	e028      	b.n	8001fd6 <main+0x1c6>
 8001f84:	200002e8 	.word	0x200002e8
 8001f88:	200003b4 	.word	0x200003b4
 8001f8c:	20000480 	.word	0x20000480
 8001f90:	2000054c 	.word	0x2000054c
 8001f94:	20000618 	.word	0x20000618
 8001f98:	200006e4 	.word	0x200006e4
 8001f9c:	200007b0 	.word	0x200007b0
 8001fa0:	20000c0c 	.word	0x20000c0c
 8001fa4:	3dcccccd 	.word	0x3dcccccd
 8001fa8:	3727c5ac 	.word	0x3727c5ac
 8001fac:	20000c54 	.word	0x20000c54
 8001fb0:	20000c88 	.word	0x20000c88
 8001fb4:	20000948 	.word	0x20000948
 8001fb8:	2000087c 	.word	0x2000087c
 8001fbc:	20001160 	.word	0x20001160
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	20000c73 	.word	0x20000c73
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	200012f0 	.word	0x200012f0
 8001fd0:	20000c05 	.word	0x20000c05
				break;
 8001fd4:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem) {
 8001fd6:	4b87      	ldr	r3, [pc, #540]	@ (80021f4 <main+0x3e4>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	4b86      	ldr	r3, [pc, #536]	@ (80021f8 <main+0x3e8>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	d007      	beq.n	8001ffc <main+0x1ec>
				TargetR = TargetR_BaseSystem;
 8001fec:	4b81      	ldr	r3, [pc, #516]	@ (80021f4 <main+0x3e4>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <main+0x3ec>)
 8001ff2:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80021f4 <main+0x3e4>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <main+0x3e8>)
 8001ffa:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem) {
 8001ffc:	4b80      	ldr	r3, [pc, #512]	@ (8002200 <main+0x3f0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <main+0x3f4>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d00e      	beq.n	8002036 <main+0x226>
				TargetP = TargetP_BaseSystem;
 8002018:	4b7a      	ldr	r3, [pc, #488]	@ (8002204 <main+0x3f4>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b7a      	ldr	r3, [pc, #488]	@ (8002208 <main+0x3f8>)
 800201e:	601a      	str	r2, [r3, #0]
				Last_Pen_BaseSystem = TargetP_BaseSystem;
 8002020:	4b78      	ldr	r3, [pc, #480]	@ (8002204 <main+0x3f4>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202a:	edc7 7a01 	vstr	s15, [r7, #4]
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <main+0x3f0>)
 8002034:	7013      	strb	r3, [r2, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 8002036:	4b75      	ldr	r3, [pc, #468]	@ (800220c <main+0x3fc>)
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	4b71      	ldr	r3, [pc, #452]	@ (8002200 <main+0x3f0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d008      	beq.n	8002054 <main+0x244>
				Set_Servo(Pen_BaseSystem);
 8002042:	4b72      	ldr	r3, [pc, #456]	@ (800220c <main+0x3fc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 ff12 	bl	8004e70 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <main+0x3fc>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4a6b      	ldr	r2, [pc, #428]	@ (8002200 <main+0x3f0>)
 8002052:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8002054:	f7ff f964 	bl	8001320 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8002058:	4b6d      	ldr	r3, [pc, #436]	@ (8002210 <main+0x400>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205e:	4b6d      	ldr	r3, [pc, #436]	@ (8002214 <main+0x404>)
 8002060:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8002062:	4b6d      	ldr	r3, [pc, #436]	@ (8002218 <main+0x408>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002068:	4b6c      	ldr	r3, [pc, #432]	@ (800221c <main+0x40c>)
 800206a:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 800206c:	f002 fbce 	bl	800480c <micros>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (currentTime > timestamp) {
 8002078:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <main+0x410>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4282      	cmp	r2, r0
 8002084:	418b      	sbcs	r3, r1
 8002086:	d210      	bcs.n	80020aa <main+0x29a>
			timestamp = currentTime + 1000; // us
 8002088:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800208c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002090:	6539      	str	r1, [r7, #80]	@ 0x50
 8002092:	f143 0300 	adc.w	r3, r3, #0
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
 8002098:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800209c:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <main+0x410>)
 800209e:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 80020a2:	f002 fc99 	bl	80049d8 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 80020a6:	f002 fda1 	bl	8004bec <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 80020aa:	f002 fbaf 	bl	800480c <micros>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		if (currentTime1 > timestamp1) {
 80020b6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80020ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <main+0x414>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4282      	cmp	r2, r0
 80020c2:	418b      	sbcs	r3, r1
 80020c4:	d20d      	bcs.n	80020e2 <main+0x2d2>
			timestamp1 = currentTime1 + 10000; // us
 80020c6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80020ca:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020ce:	1851      	adds	r1, r2, r1
 80020d0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020d2:	f143 0300 	adc.w	r3, r3, #0
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80020dc:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <main+0x414>)
 80020de:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020e2:	f002 fb93 	bl	800480c <micros>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if (currentTime2 > timestamp2) {
 80020ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <main+0x418>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	4282      	cmp	r2, r0
 80020fa:	418b      	sbcs	r3, r1
 80020fc:	d20c      	bcs.n	8002118 <main+0x308>
			timestamp2 = currentTime2 + 100000; // us
 80020fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002102:	494a      	ldr	r1, [pc, #296]	@ (800222c <main+0x41c>)
 8002104:	1851      	adds	r1, r2, r1
 8002106:	6439      	str	r1, [r7, #64]	@ 0x40
 8002108:	f143 0300 	adc.w	r3, r3, #0
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44
 800210e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002112:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <main+0x418>)
 8002114:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 8002118:	4b45      	ldr	r3, [pc, #276]	@ (8002230 <main+0x420>)
 800211a:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 800211e:	4b45      	ldr	r3, [pc, #276]	@ (8002234 <main+0x424>)
 8002120:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002124:	eef1 7a67 	vneg.f32	s15, s15
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f00a fa54 	bl	800c5d8 <cosf>
 8002130:	eef0 7a40 	vmov.f32	s15, s0
 8002134:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8002138:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <main+0x428>)
 800213a:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 800213e:	4b3c      	ldr	r3, [pc, #240]	@ (8002230 <main+0x420>)
 8002140:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <main+0x424>)
 8002146:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800214a:	eeb0 0a67 	vmov.f32	s0, s15
 800214e:	f00a fa87 	bl	800c660 <sinf>
 8002152:	eef0 7a40 	vmov.f32	s15, s0
 8002156:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <main+0x42c>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002160:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002164:	4836      	ldr	r0, [pc, #216]	@ (8002240 <main+0x430>)
 8002166:	f004 fcd7 	bl	8006b18 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10e      	bne.n	800218e <main+0x37e>
			Mode = 0;
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <main+0x434>)
 8002172:	2300      	movs	r3, #0
 8002174:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8002176:	4a34      	ldr	r2, [pc, #208]	@ (8002248 <main+0x438>)
 8002178:	2301      	movs	r3, #1
 800217a:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 800217c:	2000      	movs	r0, #0
 800217e:	f002 fe77 	bl	8004e70 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002188:	482d      	ldr	r0, [pc, #180]	@ (8002240 <main+0x430>)
 800218a:	f004 fcdd 	bl	8006b48 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 800218e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002192:	482e      	ldr	r0, [pc, #184]	@ (800224c <main+0x43c>)
 8002194:	f004 fcc0 	bl	8006b18 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <main+0x3a0>
			EmergencyState = 0;
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <main+0x438>)
 80021a0:	2300      	movs	r3, #0
 80021a2:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021aa:	4825      	ldr	r0, [pc, #148]	@ (8002240 <main+0x430>)
 80021ac:	f004 fccc 	bl	8006b48 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 80021b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021b4:	4825      	ldr	r0, [pc, #148]	@ (800224c <main+0x43c>)
 80021b6:	f004 fcaf 	bl	8006b18 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <main+0x3b6>
			Pen_Status = 0;
 80021c0:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <main+0x440>)
 80021c2:	2300      	movs	r3, #0
 80021c4:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 80021c6:	2104      	movs	r1, #4
 80021c8:	4820      	ldr	r0, [pc, #128]	@ (800224c <main+0x43c>)
 80021ca:	f004 fca5 	bl	8006b18 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <main+0x3ca>
			Pen_Status = 1;
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <main+0x440>)
 80021d6:	2301      	movs	r3, #1
 80021d8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80021da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e2:	f004 fc99 	bl	8006b18 <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d135      	bne.n	8002258 <main+0x448>
			z_temp = 1;
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <main+0x444>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	7013      	strb	r3, [r2, #0]
 80021f2:	e03d      	b.n	8002270 <main+0x460>
 80021f4:	20000c74 	.word	0x20000c74
 80021f8:	20000c80 	.word	0x20000c80
 80021fc:	20000bcc 	.word	0x20000bcc
 8002200:	20000c84 	.word	0x20000c84
 8002204:	20000c78 	.word	0x20000c78
 8002208:	20000bd0 	.word	0x20000bd0
 800220c:	20000c7c 	.word	0x20000c7c
 8002210:	2000054c 	.word	0x2000054c
 8002214:	20000b28 	.word	0x20000b28
 8002218:	20000480 	.word	0x20000480
 800221c:	20000b2c 	.word	0x20000b2c
 8002220:	200013f8 	.word	0x200013f8
 8002224:	20001400 	.word	0x20001400
 8002228:	20001408 	.word	0x20001408
 800222c:	000186a0 	.word	0x000186a0
 8002230:	20000b70 	.word	0x20000b70
 8002234:	20000b30 	.word	0x20000b30
 8002238:	20000bbc 	.word	0x20000bbc
 800223c:	20000bc0 	.word	0x20000bc0
 8002240:	48000800 	.word	0x48000800
 8002244:	20000c04 	.word	0x20000c04
 8002248:	20000c05 	.word	0x20000c05
 800224c:	48000400 	.word	0x48000400
 8002250:	20000c07 	.word	0x20000c07
 8002254:	20000bb1 	.word	0x20000bb1
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 8002258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002260:	f004 fc5a 	bl	8006b18 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <main+0x460>
			z_temp = 0;
 800226a:	4ab3      	ldr	r2, [pc, #716]	@ (8002538 <main+0x728>)
 800226c:	2300      	movs	r3, #0
 800226e:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 8002270:	4bb2      	ldr	r3, [pc, #712]	@ (800253c <main+0x72c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d102      	bne.n	800227e <main+0x46e>
			REG16(REG_MOTION_STATUS) = 0;
 8002278:	4ab1      	ldr	r2, [pc, #708]	@ (8002540 <main+0x730>)
 800227a:	2300      	movs	r3, #0
 800227c:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem))
 800227e:	4bb1      	ldr	r3, [pc, #708]	@ (8002544 <main+0x734>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <main+0x486>
 8002286:	4bb0      	ldr	r3, [pc, #704]	@ (8002548 <main+0x738>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d007      	beq.n	800229e <main+0x48e>
 800228e:	4baf      	ldr	r3, [pc, #700]	@ (800254c <main+0x73c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <main+0x48e>
				|| base_status == 8) {
 8002296:	4bac      	ldr	r3, [pc, #688]	@ (8002548 <main+0x738>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d142      	bne.n	8002324 <main+0x514>
			REG16(REG_MOTION_STATUS) = 8;
 800229e:	4aa8      	ldr	r2, [pc, #672]	@ (8002540 <main+0x730>)
 80022a0:	2308      	movs	r3, #8
 80022a2:	8413      	strh	r3, [r2, #32]

			if (TenPointMode) {
 80022a4:	4baa      	ldr	r3, [pc, #680]	@ (8002550 <main+0x740>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d012      	beq.n	80022d2 <main+0x4c2>
				TargetR = TenPointArray[(counter * 2) + 1];
 80022ac:	4ba9      	ldr	r3, [pc, #676]	@ (8002554 <main+0x744>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	3301      	adds	r3, #1
 80022b4:	4aa8      	ldr	r2, [pc, #672]	@ (8002558 <main+0x748>)
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4ba7      	ldr	r3, [pc, #668]	@ (800255c <main+0x74c>)
 80022be:	601a      	str	r2, [r3, #0]
				TargetP = TenPointArray[counter * 2];
 80022c0:	4ba4      	ldr	r3, [pc, #656]	@ (8002554 <main+0x744>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4aa4      	ldr	r2, [pc, #656]	@ (8002558 <main+0x748>)
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002560 <main+0x750>)
 80022d0:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 80022d2:	f003 f9d1 	bl	8005678 <CascadeControl_Step>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <main+0x514>
				if (PenDelay()) {
 80022dc:	f002 f8da 	bl	8004494 <PenDelay>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <main+0x514>
					if (TenPointMode) {
 80022e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002550 <main+0x740>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <main+0x506>
						if (counter == 9) {
 80022ee:	4b99      	ldr	r3, [pc, #612]	@ (8002554 <main+0x744>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d109      	bne.n	800230a <main+0x4fa>
							TenPointMode = false;
 80022f6:	4a96      	ldr	r2, [pc, #600]	@ (8002550 <main+0x740>)
 80022f8:	2300      	movs	r3, #0
 80022fa:	7013      	strb	r3, [r2, #0]
							counter = 0;
 80022fc:	4a95      	ldr	r2, [pc, #596]	@ (8002554 <main+0x744>)
 80022fe:	2300      	movs	r3, #0
 8002300:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 8002302:	4a90      	ldr	r2, [pc, #576]	@ (8002544 <main+0x734>)
 8002304:	2301      	movs	r3, #1
 8002306:	7013      	strb	r3, [r2, #0]
 8002308:	e005      	b.n	8002316 <main+0x506>
						} else {
							counter++;
 800230a:	4b92      	ldr	r3, [pc, #584]	@ (8002554 <main+0x744>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4a90      	ldr	r2, [pc, #576]	@ (8002554 <main+0x744>)
 8002314:	7013      	strb	r3, [r2, #0]
						}
					}
					if (base_status == 8) {
 8002316:	4b8c      	ldr	r3, [pc, #560]	@ (8002548 <main+0x738>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d102      	bne.n	8002324 <main+0x514>
						REG16(REG_MOTION_STATUS) = 0;
 800231e:	4a88      	ldr	r2, [pc, #544]	@ (8002540 <main+0x730>)
 8002320:	2300      	movs	r3, #0
 8002322:	8413      	strh	r3, [r2, #32]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem))
 8002324:	4b87      	ldr	r3, [pc, #540]	@ (8002544 <main+0x734>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d107      	bne.n	800233c <main+0x52c>
 800232c:	4b86      	ldr	r3, [pc, #536]	@ (8002548 <main+0x738>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d008      	beq.n	8002346 <main+0x536>
 8002334:	4b85      	ldr	r3, [pc, #532]	@ (800254c <main+0x73c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <main+0x536>
				|| base_status == 1) {
 800233c:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <main+0x738>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 827e 	bne.w	8002842 <main+0xa32>
			switch (calibState) {
 8002346:	4b87      	ldr	r3, [pc, #540]	@ (8002564 <main+0x754>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	f200 8279 	bhi.w	8002842 <main+0xa32>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <main+0x548>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	0800238d 	.word	0x0800238d
 800235c:	080023c3 	.word	0x080023c3
 8002360:	08002409 	.word	0x08002409
 8002364:	08002453 	.word	0x08002453
 8002368:	0800249d 	.word	0x0800249d
 800236c:	080024eb 	.word	0x080024eb
 8002370:	08002591 	.word	0x08002591
 8002374:	080025d1 	.word	0x080025d1
 8002378:	0800262f 	.word	0x0800262f
 800237c:	0800269b 	.word	0x0800269b
 8002380:	08002707 	.word	0x08002707
 8002384:	08002777 	.word	0x08002777
 8002388:	080027b9 	.word	0x080027b9
			case CALIB_IDLE:
				Set_Motor(0, 0);
 800238c:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8002568 <main+0x758>
 8002390:	2000      	movs	r0, #0
 8002392:	f002 fcef 	bl	8004d74 <Set_Motor>
				Set_Motor(1, 0);
 8002396:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002568 <main+0x758>
 800239a:	2001      	movs	r0, #1
 800239c:	f002 fcea 	bl	8004d74 <Set_Motor>
				P_Limit = 0;
 80023a0:	4a72      	ldr	r2, [pc, #456]	@ (800256c <main+0x75c>)
 80023a2:	2300      	movs	r3, #0
 80023a4:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80023a6:	4a72      	ldr	r2, [pc, #456]	@ (8002570 <main+0x760>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80023ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <main+0x754>)
 80023ae:	2301      	movs	r3, #1
 80023b0:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80023b2:	f002 fa2b 	bl	800480c <micros>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	496e      	ldr	r1, [pc, #440]	@ (8002574 <main+0x764>)
 80023bc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023c0:	e23f      	b.n	8002842 <main+0xa32>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <main+0x768>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800257c <main+0x76c>
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd06      	ble.n	80023e4 <main+0x5d4>
					Cal_Side = 1;
 80023d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002580 <main+0x770>)
 80023d8:	2301      	movs	r3, #1
 80023da:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023dc:	4a61      	ldr	r2, [pc, #388]	@ (8002564 <main+0x754>)
 80023de:	2302      	movs	r3, #2
 80023e0:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80023e2:	e22e      	b.n	8002842 <main+0xa32>
				} else if (Receiver[0] < -80) {
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <main+0x768>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002584 <main+0x774>
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d400      	bmi.n	80023fa <main+0x5ea>
				break;
 80023f8:	e223      	b.n	8002842 <main+0xa32>
					Cal_Side = 2;
 80023fa:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <main+0x770>)
 80023fc:	2302      	movs	r3, #2
 80023fe:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <main+0x754>)
 8002402:	2302      	movs	r3, #2
 8002404:	7013      	strb	r3, [r2, #0]
				break;
 8002406:	e21c      	b.n	8002842 <main+0xa32>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002408:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 800240c:	2001      	movs	r0, #1
 800240e:	f002 fcb1 	bl	8004d74 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002412:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002416:	485c      	ldr	r0, [pc, #368]	@ (8002588 <main+0x778>)
 8002418:	f004 fb7e 	bl	8006b18 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d004      	beq.n	800242c <main+0x61c>
 8002422:	4b52      	ldr	r3, [pc, #328]	@ (800256c <main+0x75c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 81dd 	beq.w	80027e6 <main+0x9d6>
					Set_Motor(1, 0);
 800242c:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002568 <main+0x758>
 8002430:	2001      	movs	r0, #1
 8002432:	f002 fc9f 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 8002436:	f002 f9e9 	bl	800480c <micros>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	494d      	ldr	r1, [pc, #308]	@ (8002574 <main+0x764>)
 8002440:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002444:	4a49      	ldr	r2, [pc, #292]	@ (800256c <main+0x75c>)
 8002446:	2300      	movs	r3, #0
 8002448:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800244a:	4a46      	ldr	r2, [pc, #280]	@ (8002564 <main+0x754>)
 800244c:	2303      	movs	r3, #3
 800244e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002450:	e1c9      	b.n	80027e6 <main+0x9d6>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002452:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002568 <main+0x758>
 8002456:	2001      	movs	r0, #1
 8002458:	f002 fc8c 	bl	8004d74 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800245c:	f002 f9d6 	bl	800480c <micros>
 8002460:	4b44      	ldr	r3, [pc, #272]	@ (8002574 <main+0x764>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	ebb0 0802 	subs.w	r8, r0, r2
 800246a:	eb61 0903 	sbc.w	r9, r1, r3
 800246e:	4b47      	ldr	r3, [pc, #284]	@ (800258c <main+0x77c>)
 8002470:	4598      	cmp	r8, r3
 8002472:	f179 0300 	sbcs.w	r3, r9, #0
 8002476:	d311      	bcc.n	800249c <main+0x68c>
					Set_Motor(1, 15);
 8002478:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800247c:	2001      	movs	r0, #1
 800247e:	f002 fc79 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 8002482:	f002 f9c3 	bl	800480c <micros>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	493a      	ldr	r1, [pc, #232]	@ (8002574 <main+0x764>)
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002490:	4a36      	ldr	r2, [pc, #216]	@ (800256c <main+0x75c>)
 8002492:	2300      	movs	r3, #0
 8002494:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002496:	4a33      	ldr	r2, [pc, #204]	@ (8002564 <main+0x754>)
 8002498:	2304      	movs	r3, #4
 800249a:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 800249c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80024a0:	2001      	movs	r0, #1
 80024a2:	f002 fc67 	bl	8004d74 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024a6:	f002 f9b1 	bl	800480c <micros>
 80024aa:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <main+0x764>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	ebb0 0a02 	subs.w	sl, r0, r2
 80024b4:	eb61 0b03 	sbc.w	fp, r1, r3
 80024b8:	4b34      	ldr	r3, [pc, #208]	@ (800258c <main+0x77c>)
 80024ba:	459a      	cmp	sl, r3
 80024bc:	f17b 0300 	sbcs.w	r3, fp, #0
 80024c0:	f0c0 8193 	bcc.w	80027ea <main+0x9da>
					Set_Motor(1, 0);
 80024c4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002568 <main+0x758>
 80024c8:	2001      	movs	r0, #1
 80024ca:	f002 fc53 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 80024ce:	f002 f99d 	bl	800480c <micros>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4927      	ldr	r1, [pc, #156]	@ (8002574 <main+0x764>)
 80024d8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024dc:	4a23      	ldr	r2, [pc, #140]	@ (800256c <main+0x75c>)
 80024de:	2300      	movs	r3, #0
 80024e0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80024e2:	4a20      	ldr	r2, [pc, #128]	@ (8002564 <main+0x754>)
 80024e4:	2305      	movs	r3, #5
 80024e6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80024e8:	e17f      	b.n	80027ea <main+0x9da>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80024ea:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002568 <main+0x758>
 80024ee:	2001      	movs	r0, #1
 80024f0:	f002 fc40 	bl	8004d74 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024f4:	f002 f98a 	bl	800480c <micros>
 80024f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <main+0x764>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	1a85      	subs	r5, r0, r2
 8002500:	eb61 0603 	sbc.w	r6, r1, r3
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <main+0x77c>)
 8002506:	429d      	cmp	r5, r3
 8002508:	f176 0300 	sbcs.w	r3, r6, #0
 800250c:	f0c0 816f 	bcc.w	80027ee <main+0x9de>
					Set_Motor(1, -5);
 8002510:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002514:	2001      	movs	r0, #1
 8002516:	f002 fc2d 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 800251a:	f002 f977 	bl	800480c <micros>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4914      	ldr	r1, [pc, #80]	@ (8002574 <main+0x764>)
 8002524:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <main+0x75c>)
 800252a:	2300      	movs	r3, #0
 800252c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <main+0x754>)
 8002530:	2306      	movs	r3, #6
 8002532:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002534:	e15b      	b.n	80027ee <main+0x9de>
 8002536:	bf00      	nop
 8002538:	20000bb1 	.word	0x20000bb1
 800253c:	20000c05 	.word	0x20000c05
 8002540:	20001160 	.word	0x20001160
 8002544:	20000c04 	.word	0x20000c04
 8002548:	200012f0 	.word	0x200012f0
 800254c:	20000c73 	.word	0x20000c73
 8002550:	20000c72 	.word	0x20000c72
 8002554:	20000c71 	.word	0x20000c71
 8002558:	200012f4 	.word	0x200012f4
 800255c:	20000bcc 	.word	0x20000bcc
 8002560:	20000bd0 	.word	0x20000bd0
 8002564:	20000c54 	.word	0x20000c54
 8002568:	00000000 	.word	0x00000000
 800256c:	20000c09 	.word	0x20000c09
 8002570:	20000c0a 	.word	0x20000c0a
 8002574:	20000c58 	.word	0x20000c58
 8002578:	20000ae8 	.word	0x20000ae8
 800257c:	42a00000 	.word	0x42a00000
 8002580:	20000c60 	.word	0x20000c60
 8002584:	c2a00000 	.word	0xc2a00000
 8002588:	48000400 	.word	0x48000400
 800258c:	000186a1 	.word	0x000186a1

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002590:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002594:	2001      	movs	r0, #1
 8002596:	f002 fbed 	bl	8004d74 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800259a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800259e:	489b      	ldr	r0, [pc, #620]	@ (800280c <main+0x9fc>)
 80025a0:	f004 faba 	bl	8006b18 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d004      	beq.n	80025b4 <main+0x7a4>
 80025aa:	4b99      	ldr	r3, [pc, #612]	@ (8002810 <main+0xa00>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 811f 	beq.w	80027f2 <main+0x9e2>
					Set_Motor(1, 0);
 80025b4:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8002814 <main+0xa04>
 80025b8:	2001      	movs	r0, #1
 80025ba:	f002 fbdb 	bl	8004d74 <Set_Motor>
					Reset_P();
 80025be:	f002 fc91 	bl	8004ee4 <Reset_P>
					P_Limit = 0;
 80025c2:	4a93      	ldr	r2, [pc, #588]	@ (8002810 <main+0xa00>)
 80025c4:	2300      	movs	r3, #0
 80025c6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80025c8:	4a93      	ldr	r2, [pc, #588]	@ (8002818 <main+0xa08>)
 80025ca:	2307      	movs	r3, #7
 80025cc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025ce:	e110      	b.n	80027f2 <main+0x9e2>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <main+0xa0c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <main+0x7d4>
					Set_Motor(0, -30);
 80025d8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80025dc:	2000      	movs	r0, #0
 80025de:	f002 fbc9 	bl	8004d74 <Set_Motor>
 80025e2:	e004      	b.n	80025ee <main+0x7de>
				else
					Set_Motor(0, 30);
 80025e4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f002 fbc3 	bl	8004d74 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 80025ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025f2:	4886      	ldr	r0, [pc, #536]	@ (800280c <main+0x9fc>)
 80025f4:	f004 fa90 	bl	8006b18 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d004      	beq.n	8002608 <main+0x7f8>
 80025fe:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <main+0xa10>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80f7 	beq.w	80027f6 <main+0x9e6>
					Set_Motor(0, 0);
 8002608:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8002814 <main+0xa04>
 800260c:	2000      	movs	r0, #0
 800260e:	f002 fbb1 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 8002612:	f002 f8fb 	bl	800480c <micros>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4982      	ldr	r1, [pc, #520]	@ (8002824 <main+0xa14>)
 800261c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002620:	4a7f      	ldr	r2, [pc, #508]	@ (8002820 <main+0xa10>)
 8002622:	2300      	movs	r3, #0
 8002624:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002626:	4a7c      	ldr	r2, [pc, #496]	@ (8002818 <main+0xa08>)
 8002628:	2308      	movs	r3, #8
 800262a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800262c:	e0e3      	b.n	80027f6 <main+0x9e6>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 800262e:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8002814 <main+0xa04>
 8002632:	2000      	movs	r0, #0
 8002634:	f002 fb9e 	bl	8004d74 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002638:	f002 f8e8 	bl	800480c <micros>
 800263c:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <main+0xa14>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	1a84      	subs	r4, r0, r2
 8002644:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002646:	eb61 0303 	sbc.w	r3, r1, r3
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800264c:	4b76      	ldr	r3, [pc, #472]	@ (8002828 <main+0xa18>)
 800264e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002652:	4602      	mov	r2, r0
 8002654:	429a      	cmp	r2, r3
 8002656:	460b      	mov	r3, r1
 8002658:	f173 0300 	sbcs.w	r3, r3, #0
 800265c:	f0c0 80cd 	bcc.w	80027fa <main+0x9ea>
					if (Cal_Side == 1)
 8002660:	4b6e      	ldr	r3, [pc, #440]	@ (800281c <main+0xa0c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <main+0x864>
						Set_Motor(0, 30);
 8002668:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800266c:	2000      	movs	r0, #0
 800266e:	f002 fb81 	bl	8004d74 <Set_Motor>
 8002672:	e004      	b.n	800267e <main+0x86e>
					else
						Set_Motor(0, -30);
 8002674:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002678:	2000      	movs	r0, #0
 800267a:	f002 fb7b 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 800267e:	f002 f8c5 	bl	800480c <micros>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4967      	ldr	r1, [pc, #412]	@ (8002824 <main+0xa14>)
 8002688:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800268c:	4a64      	ldr	r2, [pc, #400]	@ (8002820 <main+0xa10>)
 800268e:	2300      	movs	r3, #0
 8002690:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002692:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <main+0xa08>)
 8002694:	2309      	movs	r3, #9
 8002696:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002698:	e0af      	b.n	80027fa <main+0x9ea>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800269a:	4b60      	ldr	r3, [pc, #384]	@ (800281c <main+0xa0c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <main+0x89e>
					Set_Motor(0, 30);
 80026a2:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80026a6:	2000      	movs	r0, #0
 80026a8:	f002 fb64 	bl	8004d74 <Set_Motor>
 80026ac:	e004      	b.n	80026b8 <main+0x8a8>
				else
					Set_Motor(0, -30);
 80026ae:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026b2:	2000      	movs	r0, #0
 80026b4:	f002 fb5e 	bl	8004d74 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 80026b8:	f002 f8a8 	bl	800480c <micros>
 80026bc:	4b59      	ldr	r3, [pc, #356]	@ (8002824 <main+0xa14>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	1a84      	subs	r4, r0, r2
 80026c4:	633c      	str	r4, [r7, #48]	@ 0x30
 80026c6:	eb61 0303 	sbc.w	r3, r1, r3
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80026cc:	4b57      	ldr	r3, [pc, #348]	@ (800282c <main+0xa1c>)
 80026ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80026d2:	4602      	mov	r2, r0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	f173 0300 	sbcs.w	r3, r3, #0
 80026dc:	f0c0 808f 	bcc.w	80027fe <main+0x9ee>
					Set_Motor(0, 0);
 80026e0:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8002814 <main+0xa04>
 80026e4:	2000      	movs	r0, #0
 80026e6:	f002 fb45 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 80026ea:	f002 f88f 	bl	800480c <micros>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	494c      	ldr	r1, [pc, #304]	@ (8002824 <main+0xa14>)
 80026f4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026f8:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <main+0xa10>)
 80026fa:	2300      	movs	r3, #0
 80026fc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <main+0xa08>)
 8002700:	230a      	movs	r3, #10
 8002702:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002704:	e07b      	b.n	80027fe <main+0x9ee>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002706:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002814 <main+0xa04>
 800270a:	2000      	movs	r0, #0
 800270c:	f002 fb32 	bl	8004d74 <Set_Motor>
				Z_index_R = 0;
 8002710:	4a47      	ldr	r2, [pc, #284]	@ (8002830 <main+0xa20>)
 8002712:	2300      	movs	r3, #0
 8002714:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 8002716:	f002 f879 	bl	800480c <micros>
 800271a:	4b42      	ldr	r3, [pc, #264]	@ (8002824 <main+0xa14>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	1a84      	subs	r4, r0, r2
 8002722:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002724:	eb61 0303 	sbc.w	r3, r1, r3
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272a:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <main+0xa18>)
 800272c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002730:	4602      	mov	r2, r0
 8002732:	429a      	cmp	r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	f173 0300 	sbcs.w	r3, r3, #0
 800273a:	d362      	bcc.n	8002802 <main+0x9f2>
					if (Cal_Side == 1)
 800273c:	4b37      	ldr	r3, [pc, #220]	@ (800281c <main+0xa0c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <main+0x940>
						Set_Motor(0, -25);
 8002744:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002748:	2000      	movs	r0, #0
 800274a:	f002 fb13 	bl	8004d74 <Set_Motor>
 800274e:	e004      	b.n	800275a <main+0x94a>
					else
						Set_Motor(0, 25);
 8002750:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002754:	2000      	movs	r0, #0
 8002756:	f002 fb0d 	bl	8004d74 <Set_Motor>
					calib_timer = micros();
 800275a:	f002 f857 	bl	800480c <micros>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4930      	ldr	r1, [pc, #192]	@ (8002824 <main+0xa14>)
 8002764:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002768:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <main+0xa10>)
 800276a:	2300      	movs	r3, #0
 800276c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 800276e:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <main+0xa08>)
 8002770:	230b      	movs	r3, #11
 8002772:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002774:	e045      	b.n	8002802 <main+0x9f2>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002776:	4b29      	ldr	r3, [pc, #164]	@ (800281c <main+0xa0c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <main+0x97a>
					Set_Motor(0, -25);
 800277e:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002782:	2000      	movs	r0, #0
 8002784:	f002 faf6 	bl	8004d74 <Set_Motor>
 8002788:	e004      	b.n	8002794 <main+0x984>
				else
					Set_Motor(0, 25);
 800278a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800278e:	2000      	movs	r0, #0
 8002790:	f002 faf0 	bl	8004d74 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 8002794:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <main+0xa20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d034      	beq.n	8002806 <main+0x9f6>
					Set_Motor(0, 0);
 800279c:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002814 <main+0xa04>
 80027a0:	2000      	movs	r0, #0
 80027a2:	f002 fae7 	bl	8004d74 <Set_Motor>
					Reset_R();
 80027a6:	f002 fb8d 	bl	8004ec4 <Reset_R>
					R_Limit = 0;
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <main+0xa10>)
 80027ac:	2300      	movs	r3, #0
 80027ae:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <main+0xa08>)
 80027b2:	230c      	movs	r3, #12
 80027b4:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027b6:	e026      	b.n	8002806 <main+0x9f6>

			case CALIB_DONE:
				Cal_Side = 0;
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <main+0xa0c>)
 80027ba:	2300      	movs	r3, #0
 80027bc:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <main+0xa24>)
 80027c0:	2300      	movs	r3, #0
 80027c2:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <main+0xa00>)
 80027c6:	2300      	movs	r3, #0
 80027c8:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027ca:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <main+0xa10>)
 80027cc:	2300      	movs	r3, #0
 80027ce:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <main+0xa08>)
 80027d2:	2300      	movs	r3, #0
 80027d4:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <main+0xa28>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d130      	bne.n	8002840 <main+0xa30>
					REG16(REG_MOTION_STATUS) = 0;
 80027de:	4a17      	ldr	r2, [pc, #92]	@ (800283c <main+0xa2c>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 80027e4:	e02c      	b.n	8002840 <main+0xa30>
				break;
 80027e6:	bf00      	nop
 80027e8:	e02b      	b.n	8002842 <main+0xa32>
				break;
 80027ea:	bf00      	nop
 80027ec:	e029      	b.n	8002842 <main+0xa32>
				break;
 80027ee:	bf00      	nop
 80027f0:	e027      	b.n	8002842 <main+0xa32>
				break;
 80027f2:	bf00      	nop
 80027f4:	e025      	b.n	8002842 <main+0xa32>
				break;
 80027f6:	bf00      	nop
 80027f8:	e023      	b.n	8002842 <main+0xa32>
				break;
 80027fa:	bf00      	nop
 80027fc:	e021      	b.n	8002842 <main+0xa32>
				break;
 80027fe:	bf00      	nop
 8002800:	e01f      	b.n	8002842 <main+0xa32>
				break;
 8002802:	bf00      	nop
 8002804:	e01d      	b.n	8002842 <main+0xa32>
				break;
 8002806:	bf00      	nop
 8002808:	e01b      	b.n	8002842 <main+0xa32>
 800280a:	bf00      	nop
 800280c:	48000400 	.word	0x48000400
 8002810:	20000c09 	.word	0x20000c09
 8002814:	00000000 	.word	0x00000000
 8002818:	20000c54 	.word	0x20000c54
 800281c:	20000c60 	.word	0x20000c60
 8002820:	20000c0a 	.word	0x20000c0a
 8002824:	20000c58 	.word	0x20000c58
 8002828:	000186a1 	.word	0x000186a1
 800282c:	00030d41 	.word	0x00030d41
 8002830:	20000bb0 	.word	0x20000bb0
 8002834:	20000c04 	.word	0x20000c04
 8002838:	200012f0 	.word	0x200012f0
 800283c:	20001160 	.word	0x20001160
				break;
 8002840:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem) {
 8002842:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <main+0xbc8>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d004      	beq.n	8002854 <main+0xa44>
 800284a:	4b64      	ldr	r3, [pc, #400]	@ (80029dc <main+0xbcc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f43f ab67 	beq.w	8001f22 <main+0x112>
			currentTimer = micros(); // Current time in microseconds
 8002854:	f001 ffda 	bl	800480c <micros>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4960      	ldr	r1, [pc, #384]	@ (80029e0 <main+0xbd0>)
 800285e:	e9c1 2300 	strd	r2, r3, [r1]

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002862:	4b60      	ldr	r3, [pc, #384]	@ (80029e4 <main+0xbd4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	461a      	mov	r2, r3
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <main+0xbd8>)
 800286c:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 800286e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ec <main+0xbdc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	461a      	mov	r2, r3
 8002876:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <main+0xbd8>)
 8002878:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800287a:	4b5a      	ldr	r3, [pc, #360]	@ (80029e4 <main+0xbd4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe0b 	bl	800049c <__aeabi_ui2d>
 8002886:	a350      	add	r3, pc, #320	@ (adr r3, 80029c8 <main+0xbb8>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd fcc8 	bl	8000220 <__aeabi_dsub>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
			float RX_temp = map(
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f7fe f934 	bl	8000b04 <__aeabi_d2f>
 800289c:	4603      	mov	r3, r0
 800289e:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 80029f0 <main+0xbe0>
 80028a2:	eddf 1a54 	vldr	s3, [pc, #336]	@ 80029f4 <main+0xbe4>
 80028a6:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 80029f8 <main+0xbe8>
 80028aa:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80029fc <main+0xbec>
 80028ae:	ee00 3a10 	vmov	s0, r3
 80028b2:	f001 fe87 	bl	80045c4 <map>
 80028b6:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 80028ba:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <main+0xbdc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fdeb 	bl	800049c <__aeabi_ui2d>
 80028c6:	a342      	add	r3, pc, #264	@ (adr r3, 80029d0 <main+0xbc0>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fca8 	bl	8000220 <__aeabi_dsub>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
			float RY_temp = map(
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f914 	bl	8000b04 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 80029f0 <main+0xbe0>
 80028e2:	eddf 1a44 	vldr	s3, [pc, #272]	@ 80029f4 <main+0xbe4>
 80028e6:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 80029f8 <main+0xbe8>
 80028ea:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80029fc <main+0xbec>
 80028ee:	ee00 3a10 	vmov	s0, r3
 80028f2:	f001 fe67 	bl	80045c4 <map>
 80028f6:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 80028fa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028fe:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	db0d      	blt.n	8002928 <main+0xb18>
 800290c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002910:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d804      	bhi.n	8002928 <main+0xb18>
				Receiver[0] = 0.00;
 800291e:	4a38      	ldr	r2, [pc, #224]	@ (8002a00 <main+0xbf0>)
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <main+0xb54>
			else if (RX_temp > 100)
 8002928:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800292c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80029f0 <main+0xbe0>
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd03      	ble.n	8002942 <main+0xb32>
				Receiver[0] = 100.00;
 800293a:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <main+0xbf0>)
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <main+0xbf4>)
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e010      	b.n	8002964 <main+0xb54>
			else if (RX_temp < -100)
 8002942:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002946:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80029f4 <main+0xbe4>
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d503      	bpl.n	800295c <main+0xb4c>
				Receiver[0] = -100.00;
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <main+0xbf0>)
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <main+0xbf8>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e003      	b.n	8002964 <main+0xb54>
			else
				Receiver[0] = RX_temp;
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <main+0xbf0>)
 800295e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002962:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002964:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002968:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800296c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002974:	db0d      	blt.n	8002992 <main+0xb82>
 8002976:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800297a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d804      	bhi.n	8002992 <main+0xb82>
				Receiver[1] = 0.00;
 8002988:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <main+0xbf0>)
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e040      	b.n	8002a14 <main+0xc04>
			else if (RY_temp > 100)
 8002992:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002996:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80029f0 <main+0xbe0>
 800299a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	dd03      	ble.n	80029ac <main+0xb9c>
				Receiver[1] = 100.00;
 80029a4:	4a16      	ldr	r2, [pc, #88]	@ (8002a00 <main+0xbf0>)
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <main+0xbf4>)
 80029a8:	6053      	str	r3, [r2, #4]
 80029aa:	e033      	b.n	8002a14 <main+0xc04>
			else if (RY_temp < -100)
 80029ac:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029b0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80029f4 <main+0xbe4>
 80029b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	d526      	bpl.n	8002a0c <main+0xbfc>
				Receiver[1] = -100.00;
 80029be:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <main+0xbf0>)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <main+0xbf8>)
 80029c2:	6053      	str	r3, [r2, #4]
 80029c4:	e026      	b.n	8002a14 <main+0xc04>
 80029c6:	bf00      	nop
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40977000 	.word	0x40977000
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40d21880 	.word	0x40d21880
 80029d8:	200012f0 	.word	0x200012f0
 80029dc:	20000c73 	.word	0x20000c73
 80029e0:	20001348 	.word	0x20001348
 80029e4:	200003b4 	.word	0x200003b4
 80029e8:	20000afc 	.word	0x20000afc
 80029ec:	200002e8 	.word	0x200002e8
 80029f0:	42c80000 	.word	0x42c80000
 80029f4:	c2c80000 	.word	0xc2c80000
 80029f8:	43fa0000 	.word	0x43fa0000
 80029fc:	c3fa0000 	.word	0xc3fa0000
 8002a00:	20000ae8 	.word	0x20000ae8
 8002a04:	42c80000 	.word	0x42c80000
 8002a08:	c2c80000 	.word	0xc2c80000
			else
				Receiver[1] = RY_temp;
 8002a0c:	4ac0      	ldr	r2, [pc, #768]	@ (8002d10 <main+0xf00>)
 8002a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a12:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a14:	4bbf      	ldr	r3, [pc, #764]	@ (8002d14 <main+0xf04>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a1c:	d912      	bls.n	8002a44 <main+0xc34>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a1e:	4bbd      	ldr	r3, [pc, #756]	@ (8002d14 <main+0xf04>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd3a 	bl	800049c <__aeabi_ui2d>
 8002a28:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002d00 <main+0xef0>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fbf7 	bl	8000220 <__aeabi_dsub>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f843 	bl	8000ac4 <__aeabi_d2uiz>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4bb4      	ldr	r3, [pc, #720]	@ (8002d14 <main+0xf04>)
 8002a42:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a44:	4bb3      	ldr	r3, [pc, #716]	@ (8002d14 <main+0xf04>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a4c:	d912      	bls.n	8002a74 <main+0xc64>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8002d14 <main+0xf04>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd22 	bl	800049c <__aeabi_ui2d>
 8002a58:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002d00 <main+0xef0>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fbdf 	bl	8000220 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f82b 	bl	8000ac4 <__aeabi_d2uiz>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <main+0xf04>)
 8002a72:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a74:	4ba7      	ldr	r3, [pc, #668]	@ (8002d14 <main+0xf04>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a7c:	d912      	bls.n	8002aa4 <main+0xc94>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002a7e:	4ba5      	ldr	r3, [pc, #660]	@ (8002d14 <main+0xf04>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd0a 	bl	800049c <__aeabi_ui2d>
 8002a88:	a39d      	add	r3, pc, #628	@ (adr r3, 8002d00 <main+0xef0>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fbc7 	bl	8000220 <__aeabi_dsub>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f813 	bl	8000ac4 <__aeabi_d2uiz>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d14 <main+0xf04>)
 8002aa2:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d14 <main+0xf04>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab0:	ee17 0a90 	vmov	r0, s15
 8002ab4:	f7fd fd14 	bl	80004e0 <__aeabi_f2d>
 8002ab8:	a393      	add	r3, pc, #588	@ (adr r3, 8002d08 <main+0xef8>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fbaf 	bl	8000220 <__aeabi_dsub>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f81b 	bl	8000b04 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8002d18 <main+0xf08>
 8002ad4:	eddf 1a91 	vldr	s3, [pc, #580]	@ 8002d1c <main+0xf0c>
 8002ad8:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8002d20 <main+0xf10>
 8002adc:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8002d24 <main+0xf14>
 8002ae0:	ee00 3a10 	vmov	s0, r3
 8002ae4:	f001 fd6e 	bl	80045c4 <map>
 8002ae8:	eef0 7a40 	vmov.f32	s15, s0
 8002aec:	4b88      	ldr	r3, [pc, #544]	@ (8002d10 <main+0xf00>)
 8002aee:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <main+0xf04>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ee17 0a90 	vmov	r0, s15
 8002b02:	f7fd fced 	bl	80004e0 <__aeabi_f2d>
 8002b06:	a380      	add	r3, pc, #512	@ (adr r3, 8002d08 <main+0xef8>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fb88 	bl	8000220 <__aeabi_dsub>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f7fd fff4 	bl	8000b04 <__aeabi_d2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8002d18 <main+0xf08>
 8002b22:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002d1c <main+0xf0c>
 8002b26:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8002d20 <main+0xf10>
 8002b2a:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8002d24 <main+0xf14>
 8002b2e:	ee00 3a10 	vmov	s0, r3
 8002b32:	f001 fd47 	bl	80045c4 <map>
 8002b36:	eef0 7a40 	vmov.f32	s15, s0
 8002b3a:	4b75      	ldr	r3, [pc, #468]	@ (8002d10 <main+0xf00>)
 8002b3c:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b40:	4b74      	ldr	r3, [pc, #464]	@ (8002d14 <main+0xf04>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fcc6 	bl	80004e0 <__aeabi_f2d>
 8002b54:	a36c      	add	r3, pc, #432	@ (adr r3, 8002d08 <main+0xef8>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fb61 	bl	8000220 <__aeabi_dsub>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fd ffcd 	bl	8000b04 <__aeabi_d2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	ed9f 2a6a 	vldr	s4, [pc, #424]	@ 8002d18 <main+0xf08>
 8002b70:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002d1c <main+0xf0c>
 8002b74:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002d20 <main+0xf10>
 8002b78:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8002d24 <main+0xf14>
 8002b7c:	ee00 3a10 	vmov	s0, r3
 8002b80:	f001 fd20 	bl	80045c4 <map>
 8002b84:	eef0 7a40 	vmov.f32	s15, s0
 8002b88:	4b61      	ldr	r3, [pc, #388]	@ (8002d10 <main+0xf00>)
 8002b8a:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002b8e:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <main+0xf00>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8002d28 <main+0xf18>
 8002b98:	eddf 1a64 	vldr	s3, [pc, #400]	@ 8002d2c <main+0xf1c>
 8002b9c:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8002d18 <main+0xf08>
 8002ba0:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8002d1c <main+0xf0c>
 8002ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba8:	f001 fd0c 	bl	80045c4 <map>
 8002bac:	eef0 7a40 	vmov.f32	s15, s0
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d30 <main+0xf20>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002bb6:	4b56      	ldr	r3, [pc, #344]	@ (8002d10 <main+0xf00>)
 8002bb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bbc:	ed9f 2a5a 	vldr	s4, [pc, #360]	@ 8002d28 <main+0xf18>
 8002bc0:	eddf 1a5a 	vldr	s3, [pc, #360]	@ 8002d2c <main+0xf1c>
 8002bc4:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8002d18 <main+0xf08>
 8002bc8:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8002d1c <main+0xf0c>
 8002bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd0:	f001 fcf8 	bl	80045c4 <map>
 8002bd4:	eef0 7a40 	vmov.f32	s15, s0
 8002bd8:	4b56      	ldr	r3, [pc, #344]	@ (8002d34 <main+0xf24>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <main+0xf28>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d103      	bne.n	8002bee <main+0xdde>
				Mode = 0;
 8002be6:	4a55      	ldr	r2, [pc, #340]	@ (8002d3c <main+0xf2c>)
 8002be8:	2300      	movs	r3, #0
 8002bea:	7013      	strb	r3, [r2, #0]
 8002bec:	e1b1      	b.n	8002f52 <main+0x1142>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002bee:	4b48      	ldr	r3, [pc, #288]	@ (8002d10 <main+0xf00>)
 8002bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	d513      	bpl.n	8002c2a <main+0xe1a>
 8002c02:	4b43      	ldr	r3, [pc, #268]	@ (8002d10 <main+0xf00>)
 8002c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c08:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d509      	bpl.n	8002c2a <main+0xe1a>
				Mode = 0;
 8002c16:	4a49      	ldr	r2, [pc, #292]	@ (8002d3c <main+0xf2c>)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c22:	4847      	ldr	r0, [pc, #284]	@ (8002d40 <main+0xf30>)
 8002c24:	f003 ff90 	bl	8006b48 <HAL_GPIO_WritePin>
 8002c28:	e193      	b.n	8002f52 <main+0x1142>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002c2a:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <main+0xf00>)
 8002c2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	f340 8188 	ble.w	8002f4c <main+0x113c>
 8002c3c:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <main+0xf34>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8183 	bne.w	8002f4c <main+0x113c>
				IsPress = 1;
 8002c46:	4a3f      	ldr	r2, [pc, #252]	@ (8002d44 <main+0xf34>)
 8002c48:	2301      	movs	r3, #1
 8002c4a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d48 <main+0xf38>)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002c52:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <main+0xf00>)
 8002c54:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c58:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	dd2c      	ble.n	8002cc0 <main+0xeb0>
 8002c66:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <main+0xf00>)
 8002c68:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c6c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d522      	bpl.n	8002cc0 <main+0xeb0>
						&& Receiver[4] < -30) {
 8002c7a:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <main+0xf00>)
 8002c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c80:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d518      	bpl.n	8002cc0 <main+0xeb0>
					if (Mode != 1) {
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <main+0xf2c>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d003      	beq.n	8002c9e <main+0xe8e>
						Mode = 1;
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <main+0xf2c>)
 8002c98:	2301      	movs	r3, #1
 8002c9a:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002c9c:	e142      	b.n	8002f24 <main+0x1114>
					} else {
						TargetX = End_x;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <main+0xf3c>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <main+0xf40>)
 8002ca4:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d54 <main+0xf44>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <main+0xf48>)
 8002cac:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002cae:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <main+0xf4c>)
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <main+0xf50>)
 8002cb4:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <main+0xf54>)
 8002cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <main+0xf58>)
 8002cbc:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002cbe:	e131      	b.n	8002f24 <main+0x1114>
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <main+0xf00>)
 8002cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cc6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	dd4f      	ble.n	8002d74 <main+0xf64>
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <main+0xf00>)
 8002cd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cda:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d545      	bpl.n	8002d74 <main+0xf64>
					revolute.finished = 0;
 8002ce8:	4a20      	ldr	r2, [pc, #128]	@ (8002d6c <main+0xf5c>)
 8002cea:	2300      	movs	r3, #0
 8002cec:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002cee:	4a20      	ldr	r2, [pc, #128]	@ (8002d70 <main+0xf60>)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002cf4:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <main+0xf2c>)
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	7013      	strb	r3, [r2, #0]
 8002cfa:	e113      	b.n	8002f24 <main+0x1114>
 8002cfc:	f3af 8000 	nop.w
 8002d00:	00000000 	.word	0x00000000
 8002d04:	40b32400 	.word	0x40b32400
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	40977000 	.word	0x40977000
 8002d10:	20000ae8 	.word	0x20000ae8
 8002d14:	20000b1c 	.word	0x20000b1c
 8002d18:	42c80000 	.word	0x42c80000
 8002d1c:	c2c80000 	.word	0xc2c80000
 8002d20:	43fa0000 	.word	0x43fa0000
 8002d24:	c3fa0000 	.word	0xc3fa0000
 8002d28:	43960000 	.word	0x43960000
 8002d2c:	c3960000 	.word	0xc3960000
 8002d30:	20000bb4 	.word	0x20000bb4
 8002d34:	20000bb8 	.word	0x20000bb8
 8002d38:	20000c05 	.word	0x20000c05
 8002d3c:	20000c04 	.word	0x20000c04
 8002d40:	48000800 	.word	0x48000800
 8002d44:	20000c06 	.word	0x20000c06
 8002d48:	20000c54 	.word	0x20000c54
 8002d4c:	20000bbc 	.word	0x20000bbc
 8002d50:	20000bc4 	.word	0x20000bc4
 8002d54:	20000bc0 	.word	0x20000bc0
 8002d58:	20000bc8 	.word	0x20000bc8
 8002d5c:	20000b30 	.word	0x20000b30
 8002d60:	20000bcc 	.word	0x20000bcc
 8002d64:	20000b70 	.word	0x20000b70
 8002d68:	20000bd0 	.word	0x20000bd0
 8002d6c:	20001364 	.word	0x20001364
 8002d70:	200013a8 	.word	0x200013a8
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d74:	4b6c      	ldr	r3, [pc, #432]	@ (8002f28 <main+0x1118>)
 8002d76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d7a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	d517      	bpl.n	8002db8 <main+0xfa8>
 8002d88:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <main+0x1118>)
 8002d8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d8e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd0d      	ble.n	8002db8 <main+0xfa8>
						&& Receiver[4] < 30) {
 8002d9c:	4b62      	ldr	r3, [pc, #392]	@ (8002f28 <main+0x1118>)
 8002d9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	d503      	bpl.n	8002db8 <main+0xfa8>
					Mode = 3;
 8002db0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f2c <main+0x111c>)
 8002db2:	2303      	movs	r3, #3
 8002db4:	7013      	strb	r3, [r2, #0]
 8002db6:	e0b5      	b.n	8002f24 <main+0x1114>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002db8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f28 <main+0x1118>)
 8002dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dbe:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	dd27      	ble.n	8002e1c <main+0x100c>
 8002dcc:	4b56      	ldr	r3, [pc, #344]	@ (8002f28 <main+0x1118>)
 8002dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	d51d      	bpl.n	8002e1c <main+0x100c>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002de0:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <main+0x1118>)
 8002de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002de6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd13      	ble.n	8002e1c <main+0x100c>
 8002df4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f28 <main+0x1118>)
 8002df6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	d509      	bpl.n	8002e1c <main+0x100c>
					revolute.finished = 0;
 8002e08:	4a49      	ldr	r2, [pc, #292]	@ (8002f30 <main+0x1120>)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002e0e:	4a49      	ldr	r2, [pc, #292]	@ (8002f34 <main+0x1124>)
 8002e10:	2300      	movs	r3, #0
 8002e12:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e14:	4a45      	ldr	r2, [pc, #276]	@ (8002f2c <main+0x111c>)
 8002e16:	2304      	movs	r3, #4
 8002e18:	7013      	strb	r3, [r2, #0]
 8002e1a:	e083      	b.n	8002f24 <main+0x1114>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002e1c:	4b42      	ldr	r3, [pc, #264]	@ (8002f28 <main+0x1118>)
 8002e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e22:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	dd17      	ble.n	8002e60 <main+0x1050>
 8002e30:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <main+0x1118>)
 8002e32:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e36:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	dd0d      	ble.n	8002e60 <main+0x1050>
						&& Receiver[4] < 30) {
 8002e44:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <main+0x1118>)
 8002e46:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e4a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d503      	bpl.n	8002e60 <main+0x1050>
					Mode = 5;
 8002e58:	4a34      	ldr	r2, [pc, #208]	@ (8002f2c <main+0x111c>)
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	7013      	strb	r3, [r2, #0]
 8002e5e:	e061      	b.n	8002f24 <main+0x1114>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e60:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <main+0x1118>)
 8002e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e66:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d515      	bpl.n	8002ea0 <main+0x1090>
 8002e74:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <main+0x1118>)
 8002e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e7a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	dd0b      	ble.n	8002ea0 <main+0x1090>
					if (TenPointMode) {
 8002e88:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <main+0x1128>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <main+0x1088>
						Mode = 2;
 8002e90:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <main+0x111c>)
 8002e92:	2302      	movs	r3, #2
 8002e94:	7013      	strb	r3, [r2, #0]
					if (TenPointMode) {
 8002e96:	e045      	b.n	8002f24 <main+0x1114>
					} else {
						Mode = 6;
 8002e98:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <main+0x111c>)
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	7013      	strb	r3, [r2, #0]
					if (TenPointMode) {
 8002e9e:	e041      	b.n	8002f24 <main+0x1114>
					}
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002ea0:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <main+0x1118>)
 8002ea2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	dd17      	ble.n	8002ee4 <main+0x10d4>
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f28 <main+0x1118>)
 8002eb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eba:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d50d      	bpl.n	8002ee4 <main+0x10d4>
						&& Receiver[4] > 30) {
 8002ec8:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <main+0x1118>)
 8002eca:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ece:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	dd03      	ble.n	8002ee4 <main+0x10d4>
					Mode = 7;
 8002edc:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <main+0x111c>)
 8002ede:	2307      	movs	r3, #7
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	e01f      	b.n	8002f24 <main+0x1114>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <main+0x1118>)
 8002ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	dc00      	bgt.n	8002efa <main+0x10ea>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002ef8:	e02b      	b.n	8002f52 <main+0x1142>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <main+0x1118>)
 8002efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f00:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	dc00      	bgt.n	8002f10 <main+0x1100>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f0e:	e020      	b.n	8002f52 <main+0x1142>
					// loop_counter = 0;
					TargetR = 4.18879;
 8002f10:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <main+0x112c>)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <main+0x1130>)
 8002f14:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002f16:	4a0b      	ldr	r2, [pc, #44]	@ (8002f44 <main+0x1134>)
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <main+0x1138>)
 8002f1a:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002f1c:	4a03      	ldr	r2, [pc, #12]	@ (8002f2c <main+0x111c>)
 8002f1e:	2308      	movs	r3, #8
 8002f20:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f22:	e016      	b.n	8002f52 <main+0x1142>
 8002f24:	e015      	b.n	8002f52 <main+0x1142>
 8002f26:	bf00      	nop
 8002f28:	20000ae8 	.word	0x20000ae8
 8002f2c:	20000c04 	.word	0x20000c04
 8002f30:	20001364 	.word	0x20001364
 8002f34:	200013a8 	.word	0x200013a8
 8002f38:	20000c72 	.word	0x20000c72
 8002f3c:	20000bcc 	.word	0x20000bcc
 8002f40:	40860a91 	.word	0x40860a91
 8002f44:	20000bd0 	.word	0x20000bd0
 8002f48:	42480000 	.word	0x42480000
				}
			} else {
				IsPress = 0;
 8002f4c:	4ac4      	ldr	r2, [pc, #784]	@ (8003260 <main+0x1450>)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002f52:	4bc4      	ldr	r3, [pc, #784]	@ (8003264 <main+0x1454>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <main+0x1164>
				Set_Motor(0, 0);
 8002f5a:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8003268 <main+0x1458>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f001 ff08 	bl	8004d74 <Set_Motor>
				Set_Motor(1, 0);
 8002f64:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8003268 <main+0x1458>
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f001 ff03 	bl	8004d74 <Set_Motor>
				Set_Servo(0);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f001 ff7e 	bl	8004e70 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002f74:	4bbb      	ldr	r3, [pc, #748]	@ (8003264 <main+0x1454>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 80af 	bne.w	80030dc <main+0x12cc>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002f7e:	4bbb      	ldr	r3, [pc, #748]	@ (800326c <main+0x145c>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f88:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002f8c:	ed9f 1ab8 	vldr	s2, [pc, #736]	@ 8003270 <main+0x1460>
 8002f90:	eddf 0ab8 	vldr	s1, [pc, #736]	@ 8003274 <main+0x1464>
 8002f94:	eeb0 0a67 	vmov.f32	s0, s15
 8002f98:	f001 fb14 	bl	80045c4 <map>
 8002f9c:	eef0 7a40 	vmov.f32	s15, s0
 8002fa0:	4bb5      	ldr	r3, [pc, #724]	@ (8003278 <main+0x1468>)
 8002fa2:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002fa6:	4bb1      	ldr	r3, [pc, #708]	@ (800326c <main+0x145c>)
 8002fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fac:	ed9f 2ab3 	vldr	s4, [pc, #716]	@ 800327c <main+0x146c>
 8002fb0:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 8003280 <main+0x1470>
 8002fb4:	ed9f 1aae 	vldr	s2, [pc, #696]	@ 8003270 <main+0x1460>
 8002fb8:	eddf 0aae 	vldr	s1, [pc, #696]	@ 8003274 <main+0x1464>
 8002fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc0:	f001 fb00 	bl	80045c4 <map>
 8002fc4:	eef0 7a40 	vmov.f32	s15, s0
 8002fc8:	4bae      	ldr	r3, [pc, #696]	@ (8003284 <main+0x1474>)
 8002fca:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002fce:	4baa      	ldr	r3, [pc, #680]	@ (8003278 <main+0x1468>)
 8002fd0:	ed93 7a00 	vldr	s14, [r3]
 8002fd4:	4bac      	ldr	r3, [pc, #688]	@ (8003288 <main+0x1478>)
 8002fd6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	4bab      	ldr	r3, [pc, #684]	@ (800328c <main+0x147c>)
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002fe4:	4ba7      	ldr	r3, [pc, #668]	@ (8003284 <main+0x1474>)
 8002fe6:	ed93 7a00 	vldr	s14, [r3]
 8002fea:	4ba9      	ldr	r3, [pc, #676]	@ (8003290 <main+0x1480>)
 8002fec:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	4ba7      	ldr	r3, [pc, #668]	@ (8003294 <main+0x1484>)
 8002ff6:	edc3 7a00 	vstr	s15, [r3]

				//Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8002ffa:	f001 fc07 	bl	800480c <micros>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				if (currentTimeState1 > timestampState1) {
 8003006:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800300a:	4ba3      	ldr	r3, [pc, #652]	@ (8003298 <main+0x1488>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	4282      	cmp	r2, r0
 8003012:	418b      	sbcs	r3, r1
 8003014:	d250      	bcs.n	80030b8 <main+0x12a8>
					timestampState1 = currentTimeState1 + 1000;		//us
 8003016:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800301a:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 800301e:	6239      	str	r1, [r7, #32]
 8003020:	f143 0300 	adc.w	r3, r3, #0
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
 8003026:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800302a:	4b9b      	ldr	r3, [pc, #620]	@ (8003298 <main+0x1488>)
 800302c:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8003030:	4b96      	ldr	r3, [pc, #600]	@ (800328c <main+0x147c>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	4b99      	ldr	r3, [pc, #612]	@ (800329c <main+0x148c>)
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4b98      	ldr	r3, [pc, #608]	@ (80032a0 <main+0x1490>)
 800303e:	edd3 6a00 	vldr	s13, [r3]
 8003042:	4b98      	ldr	r3, [pc, #608]	@ (80032a4 <main+0x1494>)
 8003044:	ed93 6a00 	vldr	s12, [r3]
 8003048:	4897      	ldr	r0, [pc, #604]	@ (80032a8 <main+0x1498>)
 800304a:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8003270 <main+0x1460>
 800304e:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8003274 <main+0x1464>
 8003052:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 80032ac <main+0x149c>
 8003056:	eef0 1a46 	vmov.f32	s3, s12
 800305a:	eeb0 1a66 	vmov.f32	s2, s13
 800305e:	eef0 0a47 	vmov.f32	s1, s14
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	f001 fbeb 	bl	8004840 <PID_Update>
 800306a:	eef0 7a40 	vmov.f32	s15, s0
 800306e:	4b90      	ldr	r3, [pc, #576]	@ (80032b0 <main+0x14a0>)
 8003070:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8003074:	4b87      	ldr	r3, [pc, #540]	@ (8003294 <main+0x1484>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	4b8e      	ldr	r3, [pc, #568]	@ (80032b4 <main+0x14a4>)
 800307c:	ed93 7a00 	vldr	s14, [r3]
 8003080:	4b8d      	ldr	r3, [pc, #564]	@ (80032b8 <main+0x14a8>)
 8003082:	edd3 6a00 	vldr	s13, [r3]
 8003086:	4b8d      	ldr	r3, [pc, #564]	@ (80032bc <main+0x14ac>)
 8003088:	ed93 6a00 	vldr	s12, [r3]
 800308c:	488c      	ldr	r0, [pc, #560]	@ (80032c0 <main+0x14b0>)
 800308e:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8003270 <main+0x1460>
 8003092:	eddf 2a78 	vldr	s5, [pc, #480]	@ 8003274 <main+0x1464>
 8003096:	ed9f 2a85 	vldr	s4, [pc, #532]	@ 80032ac <main+0x149c>
 800309a:	eef0 1a46 	vmov.f32	s3, s12
 800309e:	eeb0 1a66 	vmov.f32	s2, s13
 80030a2:	eef0 0a47 	vmov.f32	s1, s14
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	f001 fbc9 	bl	8004840 <PID_Update>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	4b84      	ldr	r3, [pc, #528]	@ (80032c4 <main+0x14b4>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 80030b8:	f001 ff26 	bl	8004f08 <Workspace_limit>

				Set_Motor(0, R_PWM);
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <main+0x14a0>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb0 0a67 	vmov.f32	s0, s15
 80030c6:	2000      	movs	r0, #0
 80030c8:	f001 fe54 	bl	8004d74 <Set_Motor>
				Set_Motor(1, P_PWM);
 80030cc:	4b7d      	ldr	r3, [pc, #500]	@ (80032c4 <main+0x14b4>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	eeb0 0a67 	vmov.f32	s0, s15
 80030d6:	2001      	movs	r0, #1
 80030d8:	f001 fe4c 	bl	8004d74 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 80030dc:	4b61      	ldr	r3, [pc, #388]	@ (8003264 <main+0x1454>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	f040 812f 	bne.w	8003344 <main+0x1534>
				static bool sequence_active = false;
				static bool waiting_for_up = false;
				static uint64_t pen_timestamp = 0;
				const uint64_t pen_delay = 200000; // 200 ms
 80030e6:	4a78      	ldr	r2, [pc, #480]	@ (80032c8 <main+0x14b8>)
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				static float last_TargetX = 0.0f;
				static float last_TargetY = 0.0f;
				static bool new_target = true;

				// Detect change in target (with small tolerance to avoid float jitter)
				if (fabsf(TargetX - last_TargetX) > 1e-3f
 80030f0:	4b76      	ldr	r3, [pc, #472]	@ (80032cc <main+0x14bc>)
 80030f2:	ed93 7a00 	vldr	s14, [r3]
 80030f6:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <main+0x14c0>)
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003100:	eef0 7ae7 	vabs.f32	s15, s15
 8003104:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80032d4 <main+0x14c4>
 8003108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	dc10      	bgt.n	8003134 <main+0x1324>
						|| fabsf(TargetY - last_TargetY) > 1e-3f) {
 8003112:	4b71      	ldr	r3, [pc, #452]	@ (80032d8 <main+0x14c8>)
 8003114:	ed93 7a00 	vldr	s14, [r3]
 8003118:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <main+0x14cc>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003122:	eef0 7ae7 	vabs.f32	s15, s15
 8003126:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80032d4 <main+0x14c4>
 800312a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003132:	dd0a      	ble.n	800314a <main+0x133a>
					last_TargetX = TargetX;
 8003134:	4b65      	ldr	r3, [pc, #404]	@ (80032cc <main+0x14bc>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b65      	ldr	r3, [pc, #404]	@ (80032d0 <main+0x14c0>)
 800313a:	601a      	str	r2, [r3, #0]
					last_TargetY = TargetY;
 800313c:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <main+0x14c8>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <main+0x14cc>)
 8003142:	601a      	str	r2, [r3, #0]
					new_target = true;
 8003144:	4a66      	ldr	r2, [pc, #408]	@ (80032e0 <main+0x14d0>)
 8003146:	2301      	movs	r3, #1
 8003148:	7013      	strb	r3, [r2, #0]
				}

				InverseKinematics(TargetX, TargetY, &TargetR, &TargetP);
 800314a:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <main+0x14bc>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	4b61      	ldr	r3, [pc, #388]	@ (80032d8 <main+0x14c8>)
 8003152:	ed93 7a00 	vldr	s14, [r3]
 8003156:	4963      	ldr	r1, [pc, #396]	@ (80032e4 <main+0x14d4>)
 8003158:	4863      	ldr	r0, [pc, #396]	@ (80032e8 <main+0x14d8>)
 800315a:	eef0 0a47 	vmov.f32	s1, s14
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	f002 f83d 	bl	80051e0 <InverseKinematics>
				TargetR_Deg = TargetR * 180.0f / M_PI;
 8003166:	4b60      	ldr	r3, [pc, #384]	@ (80032e8 <main+0x14d8>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80032ec <main+0x14dc>
 8003170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003174:	ee17 0a90 	vmov	r0, s15
 8003178:	f7fd f9b2 	bl	80004e0 <__aeabi_f2d>
 800317c:	a336      	add	r3, pc, #216	@ (adr r3, 8003258 <main+0x1448>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fd fb2f 	bl	80007e4 <__aeabi_ddiv>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fcb9 	bl	8000b04 <__aeabi_d2f>
 8003192:	4602      	mov	r2, r0
 8003194:	4b56      	ldr	r3, [pc, #344]	@ (80032f0 <main+0x14e0>)
 8003196:	601a      	str	r2, [r3, #0]

				// Only start when there's a new target AND we're at the target
				if (!sequence_active && new_target && Pen_Status == 1
 8003198:	4b56      	ldr	r3, [pc, #344]	@ (80032f4 <main+0x14e4>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f083 0301 	eor.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01f      	beq.n	80031e6 <main+0x13d6>
 80031a6:	4b4e      	ldr	r3, [pc, #312]	@ (80032e0 <main+0x14d0>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01b      	beq.n	80031e6 <main+0x13d6>
 80031ae:	4b52      	ldr	r3, [pc, #328]	@ (80032f8 <main+0x14e8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d117      	bne.n	80031e6 <main+0x13d6>
						&& CascadeControl_Step()) {
 80031b6:	f002 fa5f 	bl	8005678 <CascadeControl_Step>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <main+0x13d6>
					Set_Servo(1); // Tell pen to press
 80031c0:	2001      	movs	r0, #1
 80031c2:	f001 fe55 	bl	8004e70 <Set_Servo>
					pen_timestamp = micros();
 80031c6:	f001 fb21 	bl	800480c <micros>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	494b      	ldr	r1, [pc, #300]	@ (80032fc <main+0x14ec>)
 80031d0:	e9c1 2300 	strd	r2, r3, [r1]
					sequence_active = true;
 80031d4:	4a47      	ldr	r2, [pc, #284]	@ (80032f4 <main+0x14e4>)
 80031d6:	2301      	movs	r3, #1
 80031d8:	7013      	strb	r3, [r2, #0]
					waiting_for_up = true;
 80031da:	4a49      	ldr	r2, [pc, #292]	@ (8003300 <main+0x14f0>)
 80031dc:	2301      	movs	r3, #1
 80031de:	7013      	strb	r3, [r2, #0]
					new_target = false; // consume the new target
 80031e0:	4a3f      	ldr	r2, [pc, #252]	@ (80032e0 <main+0x14d0>)
 80031e2:	2300      	movs	r3, #0
 80031e4:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && waiting_for_up
 80031e6:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <main+0x14e4>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d022      	beq.n	8003234 <main+0x1424>
 80031ee:	4b44      	ldr	r3, [pc, #272]	@ (8003300 <main+0x14f0>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01e      	beq.n	8003234 <main+0x1424>
						&& micros() - pen_timestamp >= pen_delay) {
 80031f6:	f001 fb09 	bl	800480c <micros>
 80031fa:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <main+0x14ec>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	1a84      	subs	r4, r0, r2
 8003202:	663c      	str	r4, [r7, #96]	@ 0x60
 8003204:	eb61 0303 	sbc.w	r3, r1, r3
 8003208:	667b      	str	r3, [r7, #100]	@ 0x64
 800320a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800320e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003210:	4291      	cmp	r1, r2
 8003212:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003214:	eb71 0303 	sbcs.w	r3, r1, r3
 8003218:	d30c      	bcc.n	8003234 <main+0x1424>
					Set_Servo(0); // Tell pen to lift
 800321a:	2000      	movs	r0, #0
 800321c:	f001 fe28 	bl	8004e70 <Set_Servo>
					pen_timestamp = micros();
 8003220:	f001 faf4 	bl	800480c <micros>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4934      	ldr	r1, [pc, #208]	@ (80032fc <main+0x14ec>)
 800322a:	e9c1 2300 	strd	r2, r3, [r1]
					waiting_for_up = false;
 800322e:	4a34      	ldr	r2, [pc, #208]	@ (8003300 <main+0x14f0>)
 8003230:	2300      	movs	r3, #0
 8003232:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && !waiting_for_up && Pen_Status == 1
 8003234:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <main+0x14e4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8083 	beq.w	8003344 <main+0x1534>
 800323e:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <main+0x14f0>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	f083 0301 	eor.w	r3, r3, #1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d07b      	beq.n	8003344 <main+0x1534>
 800324c:	4b2a      	ldr	r3, [pc, #168]	@ (80032f8 <main+0x14e8>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	e057      	b.n	8003304 <main+0x14f4>
 8003254:	f3af 8000 	nop.w
 8003258:	54442d18 	.word	0x54442d18
 800325c:	400921fb 	.word	0x400921fb
 8003260:	20000c06 	.word	0x20000c06
 8003264:	20000c04 	.word	0x20000c04
 8003268:	00000000 	.word	0x00000000
 800326c:	20000ae8 	.word	0x20000ae8
 8003270:	42c80000 	.word	0x42c80000
 8003274:	c2c80000 	.word	0xc2c80000
 8003278:	20000bdc 	.word	0x20000bdc
 800327c:	43fa0000 	.word	0x43fa0000
 8003280:	c3fa0000 	.word	0xc3fa0000
 8003284:	20000be0 	.word	0x20000be0
 8003288:	20000b30 	.word	0x20000b30
 800328c:	20000bf4 	.word	0x20000bf4
 8003290:	20000b70 	.word	0x20000b70
 8003294:	20000bf8 	.word	0x20000bf8
 8003298:	20001410 	.word	0x20001410
 800329c:	20000238 	.word	0x20000238
 80032a0:	2000023c 	.word	0x2000023c
 80032a4:	20000240 	.word	0x20000240
 80032a8:	20000c40 	.word	0x20000c40
 80032ac:	3c23d70a 	.word	0x3c23d70a
 80032b0:	20000bfc 	.word	0x20000bfc
 80032b4:	20000250 	.word	0x20000250
 80032b8:	20000254 	.word	0x20000254
 80032bc:	20000c50 	.word	0x20000c50
 80032c0:	20000c48 	.word	0x20000c48
 80032c4:	20000c00 	.word	0x20000c00
 80032c8:	00030d40 	.word	0x00030d40
 80032cc:	20000bc4 	.word	0x20000bc4
 80032d0:	20001418 	.word	0x20001418
 80032d4:	3a83126f 	.word	0x3a83126f
 80032d8:	20000bc8 	.word	0x20000bc8
 80032dc:	2000141c 	.word	0x2000141c
 80032e0:	20000265 	.word	0x20000265
 80032e4:	20000bd0 	.word	0x20000bd0
 80032e8:	20000bcc 	.word	0x20000bcc
 80032ec:	43340000 	.word	0x43340000
 80032f0:	20000ae0 	.word	0x20000ae0
 80032f4:	20001420 	.word	0x20001420
 80032f8:	20000c07 	.word	0x20000c07
 80032fc:	20001428 	.word	0x20001428
 8003300:	20001430 	.word	0x20001430
 8003304:	d11e      	bne.n	8003344 <main+0x1534>
						&& micros() - pen_timestamp >= pen_delay) {
 8003306:	f001 fa81 	bl	800480c <micros>
 800330a:	4b9b      	ldr	r3, [pc, #620]	@ (8003578 <main+0x1768>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	1a84      	subs	r4, r0, r2
 8003312:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003314:	eb61 0303 	sbc.w	r3, r1, r3
 8003318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800331a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800331e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003320:	4291      	cmp	r1, r2
 8003322:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003324:	eb71 0303 	sbcs.w	r3, r1, r3
 8003328:	d30c      	bcc.n	8003344 <main+0x1534>
					Set_Motor(0, 0);
 800332a:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 800357c <main+0x176c>
 800332e:	2000      	movs	r0, #0
 8003330:	f001 fd20 	bl	8004d74 <Set_Motor>
					Set_Motor(1, 0);
 8003334:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 800357c <main+0x176c>
 8003338:	2001      	movs	r0, #1
 800333a:	f001 fd1b 	bl	8004d74 <Set_Motor>
					sequence_active = false;
 800333e:	4a90      	ldr	r2, [pc, #576]	@ (8003580 <main+0x1770>)
 8003340:	2300      	movs	r3, #0
 8003342:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 8003344:	4b8f      	ldr	r3, [pc, #572]	@ (8003584 <main+0x1774>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b05      	cmp	r3, #5
 800334a:	f040 81ef 	bne.w	800372c <main+0x191c>
				static uint64_t timestampState5 = 0;
				int64_t currentTimeState5 = micros();
 800334e:	f001 fa5d 	bl	800480c <micros>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
				if (currentTimeState5 > timestampState5) {
 800335a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800335e:	4b8a      	ldr	r3, [pc, #552]	@ (8003588 <main+0x1778>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	4282      	cmp	r2, r0
 8003366:	418b      	sbcs	r3, r1
 8003368:	f080 81e0 	bcs.w	800372c <main+0x191c>
					timestampState5 = currentTimeState5 + 1000; // us
 800336c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003370:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003374:	61b9      	str	r1, [r7, #24]
 8003376:	f143 0300 	adc.w	r3, r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003380:	4b81      	ldr	r3, [pc, #516]	@ (8003588 <main+0x1778>)
 8003382:	e9c3 0100 	strd	r0, r1, [r3]

					P_kP_vel = 1.05845642f;
 8003386:	4a81      	ldr	r2, [pc, #516]	@ (800358c <main+0x177c>)
 8003388:	4b81      	ldr	r3, [pc, #516]	@ (8003590 <main+0x1780>)
 800338a:	6013      	str	r3, [r2, #0]
					P_kI_vel = 0.0496f;
 800338c:	4a81      	ldr	r2, [pc, #516]	@ (8003594 <main+0x1784>)
 800338e:	4b82      	ldr	r3, [pc, #520]	@ (8003598 <main+0x1788>)
 8003390:	6013      	str	r3, [r2, #0]
					P_kD_vel = 0.00f;
 8003392:	4a82      	ldr	r2, [pc, #520]	@ (800359c <main+0x178c>)
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	6013      	str	r3, [r2, #0]

					P_kP_pos = 3.0367f;
 800339a:	4a81      	ldr	r2, [pc, #516]	@ (80035a0 <main+0x1790>)
 800339c:	4b81      	ldr	r3, [pc, #516]	@ (80035a4 <main+0x1794>)
 800339e:	6013      	str	r3, [r2, #0]
					P_kI_pos = 0.10198f;
 80033a0:	4a81      	ldr	r2, [pc, #516]	@ (80035a8 <main+0x1798>)
 80033a2:	4b82      	ldr	r3, [pc, #520]	@ (80035ac <main+0x179c>)
 80033a4:	6013      	str	r3, [r2, #0]
					P_kD_pos = 0.0047f;
 80033a6:	4a82      	ldr	r2, [pc, #520]	@ (80035b0 <main+0x17a0>)
 80033a8:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <main+0x17a4>)
 80033aa:	6013      	str	r3, [r2, #0]

					bool reachedR = fabsf(
							TargetR - Revolute_QEIdata.RadPosition) < 0.068;
 80033ac:	4b82      	ldr	r3, [pc, #520]	@ (80035b8 <main+0x17a8>)
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	4b82      	ldr	r3, [pc, #520]	@ (80035bc <main+0x17ac>)
 80033b4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedR = fabsf(
 80033bc:	eef0 7ae7 	vabs.f32	s15, s15
 80033c0:	ee17 0a90 	vmov	r0, s15
 80033c4:	f7fd f88c 	bl	80004e0 <__aeabi_f2d>
 80033c8:	2301      	movs	r3, #1
 80033ca:	461c      	mov	r4, r3
 80033cc:	a368      	add	r3, pc, #416	@ (adr r3, 8003570 <main+0x1760>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd fb4f 	bl	8000a74 <__aeabi_dcmplt>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <main+0x15d0>
 80033dc:	2300      	movs	r3, #0
 80033de:	461c      	mov	r4, r3
 80033e0:	f887 407f 	strb.w	r4, [r7, #127]	@ 0x7f
					bool reachedP = fabsf(
							TargetP - Prismatic_QEIdata.mmPosition) < 0.5;
 80033e4:	4b76      	ldr	r3, [pc, #472]	@ (80035c0 <main+0x17b0>)
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	4b76      	ldr	r3, [pc, #472]	@ (80035c4 <main+0x17b4>)
 80033ec:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033f0:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedP = fabsf(
 80033f4:	eef0 7ae7 	vabs.f32	s15, s15
 80033f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	bf4c      	ite	mi
 8003406:	2301      	movmi	r3, #1
 8003408:	2300      	movpl	r3, #0
 800340a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
					bool all_reached = revolute.finished && prismatic.finished
 800340e:	4b6e      	ldr	r3, [pc, #440]	@ (80035c8 <main+0x17b8>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
							&& reachedR && reachedP;
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <main+0x1622>
					bool all_reached = revolute.finished && prismatic.finished
 8003416:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <main+0x17bc>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <main+0x1622>
							&& reachedR && reachedP;
 800341e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <main+0x1622>
 8003426:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <main+0x1622>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <main+0x1624>
 8003432:	2300      	movs	r3, #0
					bool all_reached = revolute.finished && prismatic.finished
 8003434:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8003438:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

					if (current_index >= path_lengths[current_path_index]) {
 8003444:	4b62      	ldr	r3, [pc, #392]	@ (80035d0 <main+0x17c0>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b62      	ldr	r3, [pc, #392]	@ (80035d4 <main+0x17c4>)
 800344a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800344e:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <main+0x17c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	dc16      	bgt.n	8003484 <main+0x1674>
						if (all_reached) {
 8003456:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <main+0x1686>
							Set_Servo(0); // Pen up before switching path
 800345e:	2000      	movs	r0, #0
 8003460:	f001 fd06 	bl	8004e70 <Set_Servo>

							current_path_index++;
 8003464:	4b5a      	ldr	r3, [pc, #360]	@ (80035d0 <main+0x17c0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <main+0x17c0>)
 800346c:	601a      	str	r2, [r3, #0]
							if (current_path_index >= 14) {
 800346e:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <main+0x17c0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b0d      	cmp	r3, #13
 8003474:	dd02      	ble.n	800347c <main+0x166c>
								current_path_index = 0;
 8003476:	4a56      	ldr	r2, [pc, #344]	@ (80035d0 <main+0x17c0>)
 8003478:	2300      	movs	r3, #0
 800347a:	6013      	str	r3, [r2, #0]
							}

							current_index = 0;
 800347c:	4a56      	ldr	r2, [pc, #344]	@ (80035d8 <main+0x17c8>)
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e008      	b.n	8003496 <main+0x1686>
						}
					} else {
						// --- Handle stepping inside the current path ---
						if (all_reached) {
 8003484:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <main+0x1686>
							current_index++;
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <main+0x17c8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4b51      	ldr	r3, [pc, #324]	@ (80035d8 <main+0x17c8>)
 8003494:	601a      	str	r2, [r3, #0]
						}
					}

					Point target_point =
							paths[current_path_index][current_index];
 8003496:	4b4e      	ldr	r3, [pc, #312]	@ (80035d0 <main+0x17c0>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <main+0x17cc>)
 800349c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034a0:	4b4d      	ldr	r3, [pc, #308]	@ (80035d8 <main+0x17c8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
					Point target_point =
 80034a8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80034ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034b0:	e882 0003 	stmia.w	r2, {r0, r1}
					InverseKinematics(target_point.x, target_point.y, &TargetR,
 80034b4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80034b8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80034bc:	4940      	ldr	r1, [pc, #256]	@ (80035c0 <main+0x17b0>)
 80034be:	483e      	ldr	r0, [pc, #248]	@ (80035b8 <main+0x17a8>)
 80034c0:	eef0 0a47 	vmov.f32	s1, s14
 80034c4:	eeb0 0a67 	vmov.f32	s0, s15
 80034c8:	f001 fe8a 	bl	80051e0 <InverseKinematics>
							&TargetP);

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 80034cc:	4b3a      	ldr	r3, [pc, #232]	@ (80035b8 <main+0x17a8>)
 80034ce:	ed93 7a00 	vldr	s14, [r3]
 80034d2:	4b3a      	ldr	r3, [pc, #232]	@ (80035bc <main+0x17ac>)
 80034d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <main+0x17d0>)
 80034de:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80034e2:	4b37      	ldr	r3, [pc, #220]	@ (80035c0 <main+0x17b0>)
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <main+0x17b4>)
 80034ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	4b3c      	ldr	r3, [pc, #240]	@ (80035e4 <main+0x17d4>)
 80034f4:	edc3 7a00 	vstr	s15, [r3]
					float R_Time = Trapezoidal_CalcTotalTime(R_Pos_Error, 1.4f,
 80034f8:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <main+0x17d0>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003502:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80035e8 <main+0x17d8>
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	f001 fdaf 	bl	800506c <Trapezoidal_CalcTotalTime>
 800350e:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78
							9.0f);
					float P_Time = Trapezoidal_CalcTotalTime(P_Pos_Error,
 8003512:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <main+0x17d4>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 80035ec <main+0x17dc>
 800351c:	eddf 0a34 	vldr	s1, [pc, #208]	@ 80035f0 <main+0x17e0>
 8003520:	eeb0 0a67 	vmov.f32	s0, s15
 8003524:	f001 fda2 	bl	800506c <Trapezoidal_CalcTotalTime>
 8003528:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
							300.0f, 1500.0f);
					float new_R_vmax = 1.4f;
 800352c:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <main+0x17e4>)
 800352e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float new_P_vmax = 300.0f;
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <main+0x17e8>)
 8003534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					if (R_Time > P_Time) {
 8003538:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800353c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	dd58      	ble.n	80035fc <main+0x17ec>
						// Revolute is slower -> reduce Prismatic vmax
						new_P_vmax = Trapezoidal_CalcVmaxFromTime(P_Pos_Error,
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <main+0x17d4>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	ed97 1a1e 	vldr	s2, [r7, #120]	@ 0x78
 8003554:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80035ec <main+0x17dc>
 8003558:	eeb0 0a67 	vmov.f32	s0, s15
 800355c:	f001 fde2 	bl	8005124 <Trapezoidal_CalcVmaxFromTime>
 8003560:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
								1500.0f, R_Time);
						P_Time = R_Time;
 8003564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003566:	677b      	str	r3, [r7, #116]	@ 0x74
 8003568:	e060      	b.n	800362c <main+0x181c>
 800356a:	bf00      	nop
 800356c:	f3af 8000 	nop.w
 8003570:	b020c49c 	.word	0xb020c49c
 8003574:	3fb16872 	.word	0x3fb16872
 8003578:	20001428 	.word	0x20001428
 800357c:	00000000 	.word	0x00000000
 8003580:	20001420 	.word	0x20001420
 8003584:	20000c04 	.word	0x20000c04
 8003588:	20001438 	.word	0x20001438
 800358c:	20000250 	.word	0x20000250
 8003590:	3f877b80 	.word	0x3f877b80
 8003594:	20000254 	.word	0x20000254
 8003598:	3d4b295f 	.word	0x3d4b295f
 800359c:	20000c50 	.word	0x20000c50
 80035a0:	20000258 	.word	0x20000258
 80035a4:	4042594b 	.word	0x4042594b
 80035a8:	2000025c 	.word	0x2000025c
 80035ac:	3dd0dae4 	.word	0x3dd0dae4
 80035b0:	20000260 	.word	0x20000260
 80035b4:	3b9a0275 	.word	0x3b9a0275
 80035b8:	20000bcc 	.word	0x20000bcc
 80035bc:	20000b30 	.word	0x20000b30
 80035c0:	20000bd0 	.word	0x20000bd0
 80035c4:	20000b70 	.word	0x20000b70
 80035c8:	20001364 	.word	0x20001364
 80035cc:	200013a8 	.word	0x200013a8
 80035d0:	200013f0 	.word	0x200013f0
 80035d4:	0801a0e8 	.word	0x0801a0e8
 80035d8:	200013ec 	.word	0x200013ec
 80035dc:	20000200 	.word	0x20000200
 80035e0:	20000bec 	.word	0x20000bec
 80035e4:	20000bf0 	.word	0x20000bf0
 80035e8:	3fb33333 	.word	0x3fb33333
 80035ec:	44bb8000 	.word	0x44bb8000
 80035f0:	43960000 	.word	0x43960000
 80035f4:	3fb33333 	.word	0x3fb33333
 80035f8:	43960000 	.word	0x43960000
					} else if (P_Time > R_Time) {
 80035fc:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8003600:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	dd0e      	ble.n	800362c <main+0x181c>
						// Prismatic is slower -> reduce Revolute vmax
						new_R_vmax = Trapezoidal_CalcVmaxFromTime(R_Pos_Error,
 800360e:	4ba8      	ldr	r3, [pc, #672]	@ (80038b0 <main+0x1aa0>)
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	ed97 1a1d 	vldr	s2, [r7, #116]	@ 0x74
 8003618:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	f001 fd80 	bl	8005124 <Trapezoidal_CalcVmaxFromTime>
 8003624:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
								9.0f, P_Time);
						R_Time = P_Time;
 8003628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362a:	67bb      	str	r3, [r7, #120]	@ 0x78
					}
					if (revolute.finished
 800362c:	4ba1      	ldr	r3, [pc, #644]	@ (80038b4 <main+0x1aa4>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <main+0x1866>
							&& fabsf(TargetR - last_TargetR) > 0.001f) {
 8003634:	4ba0      	ldr	r3, [pc, #640]	@ (80038b8 <main+0x1aa8>)
 8003636:	ed93 7a00 	vldr	s14, [r3]
 800363a:	4ba0      	ldr	r3, [pc, #640]	@ (80038bc <main+0x1aac>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003644:	eef0 7ae7 	vabs.f32	s15, s15
 8003648:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80038c0 <main+0x1ab0>
 800364c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	dd0f      	ble.n	8003676 <main+0x1866>
						Trapezoidal_Init(&revolute, R_Pos_Error, new_R_vmax,
 8003656:	4b96      	ldr	r3, [pc, #600]	@ (80038b0 <main+0x1aa0>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003660:	edd7 0a2f 	vldr	s1, [r7, #188]	@ 0xbc
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	4892      	ldr	r0, [pc, #584]	@ (80038b4 <main+0x1aa4>)
 800366a:	f7fe f9c7 	bl	80019fc <Trapezoidal_Init>
								9.0f);
						last_TargetR = TargetR;
 800366e:	4b92      	ldr	r3, [pc, #584]	@ (80038b8 <main+0x1aa8>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b92      	ldr	r3, [pc, #584]	@ (80038bc <main+0x1aac>)
 8003674:	601a      	str	r2, [r3, #0]
					}
					if (prismatic.finished
 8003676:	4b93      	ldr	r3, [pc, #588]	@ (80038c4 <main+0x1ab4>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <main+0x18b0>
							&& fabsf(TargetP - last_TargetP) > 0.01f) {
 800367e:	4b92      	ldr	r3, [pc, #584]	@ (80038c8 <main+0x1ab8>)
 8003680:	ed93 7a00 	vldr	s14, [r3]
 8003684:	4b91      	ldr	r3, [pc, #580]	@ (80038cc <main+0x1abc>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368e:	eef0 7ae7 	vabs.f32	s15, s15
 8003692:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80038d0 <main+0x1ac0>
 8003696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	dd0f      	ble.n	80036c0 <main+0x18b0>
						Trapezoidal_Init(&prismatic, P_Pos_Error, new_P_vmax,
 80036a0:	4b8c      	ldr	r3, [pc, #560]	@ (80038d4 <main+0x1ac4>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 80038d8 <main+0x1ac8>
 80036aa:	edd7 0a2e 	vldr	s1, [r7, #184]	@ 0xb8
 80036ae:	eeb0 0a67 	vmov.f32	s0, s15
 80036b2:	4884      	ldr	r0, [pc, #528]	@ (80038c4 <main+0x1ab4>)
 80036b4:	f7fe f9a2 	bl	80019fc <Trapezoidal_Init>
								1500.0f);
						last_TargetP = TargetP;
 80036b8:	4b83      	ldr	r3, [pc, #524]	@ (80038c8 <main+0x1ab8>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b83      	ldr	r3, [pc, #524]	@ (80038cc <main+0x1abc>)
 80036be:	601a      	str	r2, [r3, #0]
					}
					Trapezoidal_Update(&revolute, 0.001f);
 80036c0:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80038c0 <main+0x1ab0>
 80036c4:	487b      	ldr	r0, [pc, #492]	@ (80038b4 <main+0x1aa4>)
 80036c6:	f7fe fa63 	bl	8001b90 <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 80036ca:	4b7a      	ldr	r3, [pc, #488]	@ (80038b4 <main+0x1aa4>)
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	4b83      	ldr	r3, [pc, #524]	@ (80038dc <main+0x1acc>)
 80036d0:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 80036d2:	4b78      	ldr	r3, [pc, #480]	@ (80038b4 <main+0x1aa4>)
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	4b82      	ldr	r3, [pc, #520]	@ (80038e0 <main+0x1ad0>)
 80036d8:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 80036da:	4b76      	ldr	r3, [pc, #472]	@ (80038b4 <main+0x1aa4>)
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	4b81      	ldr	r3, [pc, #516]	@ (80038e4 <main+0x1ad4>)
 80036e0:	601a      	str	r2, [r3, #0]
					Trapezoidal_Update(&prismatic, 0.001f);
 80036e2:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 80038c0 <main+0x1ab0>
 80036e6:	4877      	ldr	r0, [pc, #476]	@ (80038c4 <main+0x1ab4>)
 80036e8:	f7fe fa52 	bl	8001b90 <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 80036ec:	4b75      	ldr	r3, [pc, #468]	@ (80038c4 <main+0x1ab4>)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	4b7d      	ldr	r3, [pc, #500]	@ (80038e8 <main+0x1ad8>)
 80036f2:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 80036f4:	4b73      	ldr	r3, [pc, #460]	@ (80038c4 <main+0x1ab4>)
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ec <main+0x1adc>)
 80036fa:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 80036fc:	4b71      	ldr	r3, [pc, #452]	@ (80038c4 <main+0x1ab4>)
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <main+0x1ae0>)
 8003702:	601a      	str	r2, [r3, #0]
					PIDStep();
 8003704:	f001 fe4a 	bl	800539c <PIDStep>
					Workspace_limit();
 8003708:	f001 fbfe 	bl	8004f08 <Workspace_limit>
					Set_Motor(0, R_PWM);
 800370c:	4b79      	ldr	r3, [pc, #484]	@ (80038f4 <main+0x1ae4>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	eeb0 0a67 	vmov.f32	s0, s15
 8003716:	2000      	movs	r0, #0
 8003718:	f001 fb2c 	bl	8004d74 <Set_Motor>
					Set_Motor(1, P_PWM);
 800371c:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <main+0x1ae8>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	2001      	movs	r0, #1
 8003728:	f001 fb24 	bl	8004d74 <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 6) {
 800372c:	4b73      	ldr	r3, [pc, #460]	@ (80038fc <main+0x1aec>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b06      	cmp	r3, #6
 8003732:	d177      	bne.n	8003824 <main+0x1a14>
				static bool PenIsNotDelay = true;
				static uint64_t lastPressTime6 = 0;
				if (PenIsNotDelay) {
 8003734:	4b72      	ldr	r3, [pc, #456]	@ (8003900 <main+0x1af0>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d06c      	beq.n	8003816 <main+0x1a06>
					if (IsPress && currentTimer - lastPressTime6 >= 2000000) {
 800373c:	4b71      	ldr	r3, [pc, #452]	@ (8003904 <main+0x1af4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05d      	beq.n	8003800 <main+0x19f0>
 8003744:	4b70      	ldr	r3, [pc, #448]	@ (8003908 <main+0x1af8>)
 8003746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374a:	4b70      	ldr	r3, [pc, #448]	@ (800390c <main+0x1afc>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	1a84      	subs	r4, r0, r2
 8003752:	613c      	str	r4, [r7, #16]
 8003754:	eb61 0303 	sbc.w	r3, r1, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	4b6d      	ldr	r3, [pc, #436]	@ (8003910 <main+0x1b00>)
 800375c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003760:	4602      	mov	r2, r0
 8003762:	429a      	cmp	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	f173 0300 	sbcs.w	r3, r3, #0
 800376a:	d349      	bcc.n	8003800 <main+0x19f0>
						lastPressTime6 = currentTimer;
 800376c:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <main+0x1af8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	4966      	ldr	r1, [pc, #408]	@ (800390c <main+0x1afc>)
 8003774:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode) {
 8003778:	4b66      	ldr	r3, [pc, #408]	@ (8003914 <main+0x1b04>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <main+0x1978>
							Mode = 2;
 8003780:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <main+0x1aec>)
 8003782:	2302      	movs	r3, #2
 8003784:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 8003786:	e04c      	b.n	8003822 <main+0x1a12>
						} else {
							TenPointArray[counter * 2] =
 8003788:	4b63      	ldr	r3, [pc, #396]	@ (8003918 <main+0x1b08>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	0058      	lsls	r0, r3, #1
									Prismatic_QEIdata.mmPosition;
 800378e:	4b63      	ldr	r3, [pc, #396]	@ (800391c <main+0x1b0c>)
 8003790:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[counter * 2] =
 8003792:	4a63      	ldr	r2, [pc, #396]	@ (8003920 <main+0x1b10>)
 8003794:	0083      	lsls	r3, r0, #2
 8003796:	4413      	add	r3, r2
 8003798:	6019      	str	r1, [r3, #0]
							TenPointArray[(counter * 2) + 1] =
 800379a:	4b5f      	ldr	r3, [pc, #380]	@ (8003918 <main+0x1b08>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	1c58      	adds	r0, r3, #1
									Revolute_QEIdata.RadPosition;
 80037a2:	4b60      	ldr	r3, [pc, #384]	@ (8003924 <main+0x1b14>)
 80037a4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[(counter * 2) + 1] =
 80037a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003920 <main+0x1b10>)
 80037a8:	0083      	lsls	r3, r0, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	6019      	str	r1, [r3, #0]
							SET_TARGET(counter, Prismatic_QEIdata.mmPosition,
 80037ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003918 <main+0x1b08>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b25a      	sxtb	r2, r3
 80037b4:	4b59      	ldr	r3, [pc, #356]	@ (800391c <main+0x1b0c>)
 80037b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003924 <main+0x1b14>)
 80037bc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80037c0:	eef0 0a47 	vmov.f32	s1, s14
 80037c4:	eeb0 0a67 	vmov.f32	s0, s15
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fd fd5d 	bl	8001288 <SET_TARGET>
									Revolute_QEIdata.RadPosition);
							PenIsNotDelay = PenDelay();
 80037ce:	f000 fe61 	bl	8004494 <PenDelay>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003900 <main+0x1af0>)
 80037d6:	7013      	strb	r3, [r2, #0]

							counter++;
 80037d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003918 <main+0x1b08>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003918 <main+0x1b08>)
 80037e2:	7013      	strb	r3, [r2, #0]
							if (counter >= 10) {
 80037e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003918 <main+0x1b08>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b09      	cmp	r3, #9
 80037ea:	d91a      	bls.n	8003822 <main+0x1a12>
								counter = 0;
 80037ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003918 <main+0x1b08>)
 80037ee:	2300      	movs	r3, #0
 80037f0:	7013      	strb	r3, [r2, #0]
								testArraydone = true;
 80037f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003928 <main+0x1b18>)
 80037f4:	2301      	movs	r3, #1
 80037f6:	7013      	strb	r3, [r2, #0]
								TenPointMode = true;
 80037f8:	4a46      	ldr	r2, [pc, #280]	@ (8003914 <main+0x1b04>)
 80037fa:	2301      	movs	r3, #1
 80037fc:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 80037fe:	e010      	b.n	8003822 <main+0x1a12>
							}
						}
					} else if (!TenPointMode) {
 8003800:	4b44      	ldr	r3, [pc, #272]	@ (8003914 <main+0x1b04>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <main+0x1a14>
						Mode = 1;
 800380e:	4a3b      	ldr	r2, [pc, #236]	@ (80038fc <main+0x1aec>)
 8003810:	2301      	movs	r3, #1
 8003812:	7013      	strb	r3, [r2, #0]
 8003814:	e006      	b.n	8003824 <main+0x1a14>
					}
				} else {
					PenIsNotDelay = PenDelay();
 8003816:	f000 fe3d 	bl	8004494 <PenDelay>
 800381a:	4603      	mov	r3, r0
 800381c:	4a38      	ldr	r2, [pc, #224]	@ (8003900 <main+0x1af0>)
 800381e:	7013      	strb	r3, [r2, #0]
 8003820:	e000      	b.n	8003824 <main+0x1a14>
						if (TenPointMode) {
 8003822:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7) {
 8003824:	4b35      	ldr	r3, [pc, #212]	@ (80038fc <main+0x1aec>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b07      	cmp	r3, #7
 800382a:	d128      	bne.n	800387e <main+0x1a6e>
				static uint64_t lastPressTime7 = 0;
				if (testArraydone && IsPress
 800382c:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <main+0x1b18>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d021      	beq.n	8003878 <main+0x1a68>
 8003834:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <main+0x1af4>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01d      	beq.n	8003878 <main+0x1a68>
						&& currentTimer - lastPressTime7 >= 2000000) {
 800383c:	4b32      	ldr	r3, [pc, #200]	@ (8003908 <main+0x1af8>)
 800383e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <main+0x1b1c>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	1a84      	subs	r4, r0, r2
 800384a:	60bc      	str	r4, [r7, #8]
 800384c:	eb61 0303 	sbc.w	r3, r1, r3
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b2f      	ldr	r3, [pc, #188]	@ (8003910 <main+0x1b00>)
 8003854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003858:	4602      	mov	r2, r0
 800385a:	429a      	cmp	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	f173 0300 	sbcs.w	r3, r3, #0
 8003862:	d309      	bcc.n	8003878 <main+0x1a68>
					lastPressTime7 = currentTimer;
 8003864:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <main+0x1af8>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	4930      	ldr	r1, [pc, #192]	@ (800392c <main+0x1b1c>)
 800386c:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = true;
 8003870:	4a28      	ldr	r2, [pc, #160]	@ (8003914 <main+0x1b04>)
 8003872:	2301      	movs	r3, #1
 8003874:	7013      	strb	r3, [r2, #0]
 8003876:	e002      	b.n	800387e <main+0x1a6e>
				} else {
					Mode = 2;
 8003878:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <main+0x1aec>)
 800387a:	2302      	movs	r3, #2
 800387c:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 800387e:	4b1f      	ldr	r3, [pc, #124]	@ (80038fc <main+0x1aec>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b08      	cmp	r3, #8
 8003884:	f47e ab4d 	bne.w	8001f22 <main+0x112>
				if (counter8 < 10) {
 8003888:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <main+0x1b20>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b09      	cmp	r3, #9
 800388e:	f200 8082 	bhi.w	8003996 <main+0x1b86>
					goCenter8 = true;
 8003892:	4a28      	ldr	r2, [pc, #160]	@ (8003934 <main+0x1b24>)
 8003894:	2301      	movs	r3, #1
 8003896:	7013      	strb	r3, [r2, #0]

					if (goCenter8) {
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <main+0x1b24>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d04d      	beq.n	800393c <main+0x1b2c>
						TargetR = M_PI_2;
 80038a0:	4a05      	ldr	r2, [pc, #20]	@ (80038b8 <main+0x1aa8>)
 80038a2:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <main+0x1b28>)
 80038a4:	6013      	str	r3, [r2, #0]
						TargetP = 0;
 80038a6:	4a08      	ldr	r2, [pc, #32]	@ (80038c8 <main+0x1ab8>)
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e04b      	b.n	8003948 <main+0x1b38>
 80038b0:	20000bec 	.word	0x20000bec
 80038b4:	20001364 	.word	0x20001364
 80038b8:	20000bcc 	.word	0x20000bcc
 80038bc:	20001350 	.word	0x20001350
 80038c0:	3a83126f 	.word	0x3a83126f
 80038c4:	200013a8 	.word	0x200013a8
 80038c8:	20000bd0 	.word	0x20000bd0
 80038cc:	20001354 	.word	0x20001354
 80038d0:	3c23d70a 	.word	0x3c23d70a
 80038d4:	20000bf0 	.word	0x20000bf0
 80038d8:	44bb8000 	.word	0x44bb8000
 80038dc:	20000bd4 	.word	0x20000bd4
 80038e0:	20000bdc 	.word	0x20000bdc
 80038e4:	20000be4 	.word	0x20000be4
 80038e8:	20000bd8 	.word	0x20000bd8
 80038ec:	20000be0 	.word	0x20000be0
 80038f0:	20000be8 	.word	0x20000be8
 80038f4:	20000bfc 	.word	0x20000bfc
 80038f8:	20000c00 	.word	0x20000c00
 80038fc:	20000c04 	.word	0x20000c04
 8003900:	20000266 	.word	0x20000266
 8003904:	20000c06 	.word	0x20000c06
 8003908:	20001348 	.word	0x20001348
 800390c:	20001440 	.word	0x20001440
 8003910:	001e8480 	.word	0x001e8480
 8003914:	20000c72 	.word	0x20000c72
 8003918:	20000c71 	.word	0x20000c71
 800391c:	20000b70 	.word	0x20000b70
 8003920:	200012f4 	.word	0x200012f4
 8003924:	20000b30 	.word	0x20000b30
 8003928:	20001344 	.word	0x20001344
 800392c:	20001448 	.word	0x20001448
 8003930:	20000c70 	.word	0x20000c70
 8003934:	20000264 	.word	0x20000264
 8003938:	3fc90fdb 	.word	0x3fc90fdb
					} else {
						TargetR = M_PI_4;
 800393c:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <main+0x1ba4>)
 800393e:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <main+0x1ba8>)
 8003940:	6013      	str	r3, [r2, #0]
						TargetP = 150;
 8003942:	4a1e      	ldr	r2, [pc, #120]	@ (80039bc <main+0x1bac>)
 8003944:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <main+0x1bb0>)
 8003946:	6013      	str	r3, [r2, #0]
					}

					if (CascadeControl_Step()) {
 8003948:	f001 fe96 	bl	8005678 <CascadeControl_Step>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f43e aae7 	beq.w	8001f22 <main+0x112>
						if (PenDelay()) {
 8003954:	f000 fd9e 	bl	8004494 <PenDelay>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f43e aae1 	beq.w	8001f22 <main+0x112>
							if (goCenter8) {
 8003960:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <main+0x1bb4>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <main+0x1b64>
								counter8++;
 8003968:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <main+0x1bb8>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <main+0x1bb8>)
 8003972:	7013      	strb	r3, [r2, #0]
							}
							goCenter8 = !goCenter8;
 8003974:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <main+0x1bb4>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <main+0x1bb4>)
 8003990:	7013      	strb	r3, [r2, #0]
 8003992:	f7fe bac6 	b.w	8001f22 <main+0x112>
						}
					}
				} else if (counter8 >= 10 && IsPress) {
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <main+0x1bb8>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b09      	cmp	r3, #9
 800399c:	f67e aac1 	bls.w	8001f22 <main+0x112>
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <main+0x1bbc>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f43e aabc 	beq.w	8001f22 <main+0x112>
					counter8 = 0;
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <main+0x1bb8>)
 80039ac:	2300      	movs	r3, #0
 80039ae:	7013      	strb	r3, [r2, #0]
	while (1) {
 80039b0:	f7fe bab7 	b.w	8001f22 <main+0x112>
 80039b4:	20000bcc 	.word	0x20000bcc
 80039b8:	3f490fdb 	.word	0x3f490fdb
 80039bc:	20000bd0 	.word	0x20000bd0
 80039c0:	43160000 	.word	0x43160000
 80039c4:	20000264 	.word	0x20000264
 80039c8:	20000c70 	.word	0x20000c70
 80039cc:	20000c06 	.word	0x20000c06

080039d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b094      	sub	sp, #80	@ 0x50
 80039d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80039d6:	f107 0318 	add.w	r3, r7, #24
 80039da:	2238      	movs	r2, #56	@ 0x38
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f008 fd9a 	bl	800c518 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f003 f8d8 	bl	8006ba8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a06:	2302      	movs	r3, #2
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003a12:	2355      	movs	r3, #85	@ 0x55
 8003a14:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a16:	2302      	movs	r3, #2
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003a22:	f107 0318 	add.w	r3, r7, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 f972 	bl	8006d10 <HAL_RCC_OscConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <SystemClock_Config+0x66>
		Error_Handler();
 8003a32:	f001 fea3 	bl	800577c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003a36:	230f      	movs	r3, #15
 8003a38:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fc70 	bl	8007334 <HAL_RCC_ClockConfig>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <SystemClock_Config+0x8e>
		Error_Handler();
 8003a5a:	f001 fe8f 	bl	800577c <Error_Handler>
	}
}
 8003a5e:	bf00      	nop
 8003a60:	3750      	adds	r7, #80	@ 0x50
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	@ 0x30
 8003a6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003a6e:	f107 031c 	add.w	r3, r7, #28
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003a96:	4b35      	ldr	r3, [pc, #212]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003a98:	4a35      	ldr	r2, [pc, #212]	@ (8003b70 <MX_TIM1_Init+0x108>)
 8003a9a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003a9c:	4b33      	ldr	r3, [pc, #204]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003a9e:	22a9      	movs	r2, #169	@ 0xa9
 8003aa0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa2:	4b32      	ldr	r3, [pc, #200]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003aa8:	4b30      	ldr	r3, [pc, #192]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aae:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003ac2:	482a      	ldr	r0, [pc, #168]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003ac4:	f004 fb6c 	bl	80081a0 <HAL_TIM_IC_Init>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003ace:	f001 fe55 	bl	800577c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003ad6:	2360      	movs	r3, #96	@ 0x60
 8003ad8:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ada:	2302      	movs	r3, #2
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4619      	mov	r1, r3
 8003aec:	481f      	ldr	r0, [pc, #124]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003aee:	f005 fb37 	bl	8009160 <HAL_TIM_SlaveConfigSynchro>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM1_Init+0x94>
		Error_Handler();
 8003af8:	f001 fe40 	bl	800577c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003b00:	2302      	movs	r3, #2
 8003b02:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	2200      	movs	r2, #0
 8003b12:	4619      	mov	r1, r3
 8003b14:	4815      	ldr	r0, [pc, #84]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003b16:	f005 f85c 	bl	8008bd2 <HAL_TIM_IC_ConfigChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003b20:	f001 fe2c 	bl	800577c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b24:	2302      	movs	r3, #2
 8003b26:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	2204      	movs	r2, #4
 8003b32:	4619      	mov	r1, r3
 8003b34:	480d      	ldr	r0, [pc, #52]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003b36:	f005 f84c 	bl	8008bd2 <HAL_TIM_IC_ConfigChannel>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003b40:	f001 fe1c 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003b50:	463b      	mov	r3, r7
 8003b52:	4619      	mov	r1, r3
 8003b54:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <MX_TIM1_Init+0x104>)
 8003b56:	f006 fc1f 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003b60:	f001 fe0c 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003b64:	bf00      	nop
 8003b66:	3730      	adds	r7, #48	@ 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	200002e8 	.word	0x200002e8
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	@ 0x30
 8003b78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003b8a:	f107 030c 	add.w	r3, r7, #12
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b98:	463b      	mov	r3, r7
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003ba2:	4b33      	ldr	r3, [pc, #204]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ba8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003baa:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bac:	22a9      	movs	r2, #169	@ 0xa9
 8003bae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003bca:	4829      	ldr	r0, [pc, #164]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bcc:	f004 fae8 	bl	80081a0 <HAL_TIM_IC_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM2_Init+0x66>
		Error_Handler();
 8003bd6:	f001 fdd1 	bl	800577c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003bde:	2350      	movs	r3, #80	@ 0x50
 8003be0:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003bee:	f107 031c 	add.w	r3, r7, #28
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	481e      	ldr	r0, [pc, #120]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bf6:	f005 fab3 	bl	8009160 <HAL_TIM_SlaveConfigSynchro>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003c00:	f001 fdbc 	bl	800577c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4814      	ldr	r0, [pc, #80]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c1e:	f004 ffd8 	bl	8008bd2 <HAL_TIM_IC_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003c28:	f001 fda8 	bl	800577c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003c30:	2302      	movs	r3, #2
 8003c32:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c3e:	f004 ffc8 	bl	8008bd2 <HAL_TIM_IC_ConfigChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003c48:	f001 fd98 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003c54:	463b      	mov	r3, r7
 8003c56:	4619      	mov	r1, r3
 8003c58:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c5a:	f006 fb9d 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003c64:	f001 fd8a 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003c68:	bf00      	nop
 8003c6a:	3730      	adds	r7, #48	@ 0x30
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200003b4 	.word	0x200003b4

08003c74 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f008 fc48 	bl	800c518 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c88:	463b      	mov	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c92:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003c94:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <MX_TIM3_Init+0xa8>)
 8003c96:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003caa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	480d      	ldr	r0, [pc, #52]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003ce4:	f004 fcba 	bl	800865c <HAL_TIM_Encoder_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003cee:	f001 fd45 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	@ (8003d18 <MX_TIM3_Init+0xa4>)
 8003d00:	f006 fb4a 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003d0a:	f001 fd37 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003d0e:	bf00      	nop
 8003d10:	3730      	adds	r7, #48	@ 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000480 	.word	0x20000480
 8003d1c:	40000400 	.word	0x40000400

08003d20 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	@ 0x30
 8003d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	2224      	movs	r2, #36	@ 0x24
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f008 fbf2 	bl	800c518 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d34:	463b      	mov	r3, r7
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003d3e:	4b21      	ldr	r3, [pc, #132]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d40:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <MX_TIM4_Init+0xa8>)
 8003d42:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003d50:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d56:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d64:	2303      	movs	r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003d74:	2304      	movs	r3, #4
 8003d76:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003d84:	2304      	movs	r3, #4
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	480d      	ldr	r0, [pc, #52]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003d90:	f004 fc64 	bl	800865c <HAL_TIM_Encoder_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003d9a:	f001 fcef 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003da6:	463b      	mov	r3, r7
 8003da8:	4619      	mov	r1, r3
 8003daa:	4806      	ldr	r0, [pc, #24]	@ (8003dc4 <MX_TIM4_Init+0xa4>)
 8003dac:	f006 faf4 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003db6:	f001 fce1 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	3730      	adds	r7, #48	@ 0x30
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000054c 	.word	0x2000054c
 8003dc8:	40000800 	.word	0x40000800

08003dcc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <MX_TIM5_Init+0x98>)
 8003dee:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003df2:	22a9      	movs	r2, #169	@ 0xa9
 8003df4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003e02:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e04:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003e10:	4813      	ldr	r0, [pc, #76]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003e12:	f003 fef9 	bl	8007c08 <HAL_TIM_Base_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003e1c:	f001 fcae 	bl	800577c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e24:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480c      	ldr	r0, [pc, #48]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003e2e:	f005 f881 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_TIM5_Init+0x70>
		Error_Handler();
 8003e38:	f001 fca0 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	4619      	mov	r1, r3
 8003e48:	4805      	ldr	r0, [pc, #20]	@ (8003e60 <MX_TIM5_Init+0x94>)
 8003e4a:	f006 faa5 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003e54:	f001 fc92 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003e58:	bf00      	nop
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000618 	.word	0x20000618
 8003e64:	40000c00 	.word	0x40000c00

08003e68 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b09c      	sub	sp, #112	@ 0x70
 8003e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	611a      	str	r2, [r3, #16]
 8003e98:	615a      	str	r2, [r3, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	2234      	movs	r2, #52	@ 0x34
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f008 fb38 	bl	800c518 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <MX_TIM8_Init+0x174>)
 8003eac:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003eae:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003eb0:	22a9      	movs	r2, #169	@ 0xa9
 8003eb2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb4:	4b48      	ldr	r3, [pc, #288]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ebc:	2264      	movs	r2, #100	@ 0x64
 8003ebe:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec0:	4b45      	ldr	r3, [pc, #276]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003ec6:	4b44      	ldr	r3, [pc, #272]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ecc:	4b42      	ldr	r3, [pc, #264]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003ed2:	4841      	ldr	r0, [pc, #260]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ed4:	f003 fe98 	bl	8007c08 <HAL_TIM_Base_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003ede:	f001 fc4d 	bl	800577c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ee6:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003ee8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003eec:	4619      	mov	r1, r3
 8003eee:	483a      	ldr	r0, [pc, #232]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003ef0:	f005 f820 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM8_Init+0x96>
		Error_Handler();
 8003efa:	f001 fc3f 	bl	800577c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003efe:	4836      	ldr	r0, [pc, #216]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003f00:	f003 ffce 	bl	8007ea0 <HAL_TIM_PWM_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003f0a:	f001 fc37 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003f1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f1e:	4619      	mov	r1, r3
 8003f20:	482d      	ldr	r0, [pc, #180]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003f22:	f006 fa39 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003f2c:	f001 fc26 	bl	800577c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f30:	2360      	movs	r3, #96	@ 0x60
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003f34:	2364      	movs	r3, #100	@ 0x64
 8003f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003f4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f50:	2208      	movs	r2, #8
 8003f52:	4619      	mov	r1, r3
 8003f54:	4820      	ldr	r0, [pc, #128]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003f56:	f004 fed9 	bl	8008d0c <HAL_TIM_PWM_ConfigChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003f60:	f001 fc0c 	bl	800577c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003f64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f68:	220c      	movs	r2, #12
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	481a      	ldr	r0, [pc, #104]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003f6e:	f004 fecd 	bl	8008d0c <HAL_TIM_PWM_ConfigChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003f78:	f001 fc00 	bl	800577c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f94:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003fac:	2300      	movs	r3, #0
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4807      	ldr	r0, [pc, #28]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003fba:	f006 fa83 	bl	800a4c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003fc4:	f001 fbda 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003fc8:	4803      	ldr	r0, [pc, #12]	@ (8003fd8 <MX_TIM8_Init+0x170>)
 8003fca:	f001 fd6b 	bl	8005aa4 <HAL_TIM_MspPostInit>

}
 8003fce:	bf00      	nop
 8003fd0:	3770      	adds	r7, #112	@ 0x70
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200006e4 	.word	0x200006e4
 8003fdc:	40013400 	.word	0x40013400

08003fe0 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b09c      	sub	sp, #112	@ 0x70
 8003fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003fe6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004000:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	611a      	str	r2, [r3, #16]
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2234      	movs	r2, #52	@ 0x34
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f008 fa7c 	bl	800c518 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004020:	4b3f      	ldr	r3, [pc, #252]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004022:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <MX_TIM15_Init+0x144>)
 8004024:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8004026:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004028:	22a9      	movs	r2, #169	@ 0xa9
 800402a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402c:	4b3c      	ldr	r3, [pc, #240]	@ (8004120 <MX_TIM15_Init+0x140>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004034:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8004038:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403a:	4b39      	ldr	r3, [pc, #228]	@ (8004120 <MX_TIM15_Init+0x140>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8004040:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 800404c:	4834      	ldr	r0, [pc, #208]	@ (8004120 <MX_TIM15_Init+0x140>)
 800404e:	f003 fddb 	bl	8007c08 <HAL_TIM_Base_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM15_Init+0x7c>
		Error_Handler();
 8004058:	f001 fb90 	bl	800577c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004060:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8004062:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004066:	4619      	mov	r1, r3
 8004068:	482d      	ldr	r0, [pc, #180]	@ (8004120 <MX_TIM15_Init+0x140>)
 800406a:	f004 ff63 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM15_Init+0x98>
		Error_Handler();
 8004074:	f001 fb82 	bl	800577c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8004078:	4829      	ldr	r0, [pc, #164]	@ (8004120 <MX_TIM15_Init+0x140>)
 800407a:	f003 ff11 	bl	8007ea0 <HAL_TIM_PWM_Init>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM15_Init+0xa8>
		Error_Handler();
 8004084:	f001 fb7a 	bl	800577c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8004090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004094:	4619      	mov	r1, r3
 8004096:	4822      	ldr	r0, [pc, #136]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004098:	f006 f97e 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80040a2:	f001 fb6b 	bl	800577c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040a6:	2360      	movs	r3, #96	@ 0x60
 80040a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ae:	2300      	movs	r3, #0
 80040b0:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040b2:	2300      	movs	r3, #0
 80040b4:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 80040c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040c6:	2200      	movs	r2, #0
 80040c8:	4619      	mov	r1, r3
 80040ca:	4815      	ldr	r0, [pc, #84]	@ (8004120 <MX_TIM15_Init+0x140>)
 80040cc:	f004 fe1e 	bl	8008d0c <HAL_TIM_PWM_ConfigChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80040d6:	f001 fb51 	bl	800577c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040f2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4807      	ldr	r0, [pc, #28]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004102:	f006 f9df 	bl	800a4c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 800410c:	f001 fb36 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8004110:	4803      	ldr	r0, [pc, #12]	@ (8004120 <MX_TIM15_Init+0x140>)
 8004112:	f001 fcc7 	bl	8005aa4 <HAL_TIM_MspPostInit>

}
 8004116:	bf00      	nop
 8004118:	3770      	adds	r7, #112	@ 0x70
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200007b0 	.word	0x200007b0
 8004124:	40014000 	.word	0x40014000

08004128 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <MX_TIM16_Init+0x58>)
 800412e:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <MX_TIM16_Init+0x5c>)
 8004130:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8004132:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <MX_TIM16_Init+0x58>)
 8004134:	22a9      	movs	r2, #169	@ 0xa9
 8004136:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <MX_TIM16_Init+0x58>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <MX_TIM16_Init+0x58>)
 8004140:	f240 4279 	movw	r2, #1145	@ 0x479
 8004144:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <MX_TIM16_Init+0x58>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <MX_TIM16_Init+0x58>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <MX_TIM16_Init+0x58>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8004158:	4809      	ldr	r0, [pc, #36]	@ (8004180 <MX_TIM16_Init+0x58>)
 800415a:	f003 fd55 	bl	8007c08 <HAL_TIM_Base_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM16_Init+0x40>
		Error_Handler();
 8004164:	f001 fb0a 	bl	800577c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8004168:	2108      	movs	r1, #8
 800416a:	4805      	ldr	r0, [pc, #20]	@ (8004180 <MX_TIM16_Init+0x58>)
 800416c:	f004 f980 	bl	8008470 <HAL_TIM_OnePulse_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM16_Init+0x52>
		Error_Handler();
 8004176:	f001 fb01 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000087c 	.word	0x2000087c
 8004184:	40014400 	.word	0x40014400

08004188 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800418c:	4b23      	ldr	r3, [pc, #140]	@ (800421c <MX_USART2_UART_Init+0x94>)
 800418e:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <MX_USART2_UART_Init+0x98>)
 8004190:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <MX_USART2_UART_Init+0x94>)
 8004194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004198:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800419a:	4b20      	ldr	r3, [pc, #128]	@ (800421c <MX_USART2_UART_Init+0x94>)
 800419c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041a0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041b2:	220c      	movs	r2, #12
 80041b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041bc:	4b17      	ldr	r3, [pc, #92]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c2:	4b16      	ldr	r3, [pc, #88]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041c8:	4b14      	ldr	r3, [pc, #80]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80041d4:	4811      	ldr	r0, [pc, #68]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041d6:	f006 fa59 	bl	800a68c <HAL_UART_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 80041e0:	f001 facc 	bl	800577c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80041e4:	2100      	movs	r1, #0
 80041e6:	480d      	ldr	r0, [pc, #52]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041e8:	f008 f895 	bl	800c316 <HAL_UARTEx_SetTxFifoThreshold>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 80041f2:	f001 fac3 	bl	800577c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80041f6:	2100      	movs	r1, #0
 80041f8:	4808      	ldr	r0, [pc, #32]	@ (800421c <MX_USART2_UART_Init+0x94>)
 80041fa:	f008 f8ca 	bl	800c392 <HAL_UARTEx_SetRxFifoThreshold>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8004204:	f001 faba 	bl	800577c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8004208:	4804      	ldr	r0, [pc, #16]	@ (800421c <MX_USART2_UART_Init+0x94>)
 800420a:	f008 f84b 	bl	800c2a4 <HAL_UARTEx_DisableFifoMode>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8004214:	f001 fab2 	bl	800577c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000948 	.word	0x20000948
 8004220:	40004400 	.word	0x40004400

08004224 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <MX_DMA_Init+0x60>)
 800422c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <MX_DMA_Init+0x60>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6493      	str	r3, [r2, #72]	@ 0x48
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <MX_DMA_Init+0x60>)
 8004238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <MX_DMA_Init+0x60>)
 8004244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004246:	4a0f      	ldr	r2, [pc, #60]	@ (8004284 <MX_DMA_Init+0x60>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6493      	str	r3, [r2, #72]	@ 0x48
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <MX_DMA_Init+0x60>)
 8004250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	200b      	movs	r0, #11
 8004260:	f001 ff71 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004264:	200b      	movs	r0, #11
 8004266:	f001 ff88 	bl	800617a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	200c      	movs	r0, #12
 8004270:	f001 ff69 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004274:	200c      	movs	r0, #12
 8004276:	f001 ff80 	bl	800617a <HAL_NVIC_EnableIRQ>

}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000

08004288 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	4b7a      	ldr	r3, [pc, #488]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	4a79      	ldr	r2, [pc, #484]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042aa:	4b77      	ldr	r3, [pc, #476]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80042b6:	4b74      	ldr	r3, [pc, #464]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042c2:	4b71      	ldr	r3, [pc, #452]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042da:	4b6b      	ldr	r3, [pc, #428]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80042e6:	4b68      	ldr	r3, [pc, #416]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	4a67      	ldr	r2, [pc, #412]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042f2:	4b65      	ldr	r3, [pc, #404]	@ (8004488 <MX_GPIO_Init+0x200>)
 80042f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042fe:	2200      	movs	r2, #0
 8004300:	2120      	movs	r1, #32
 8004302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004306:	f002 fc1f 	bl	8006b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 800430a:	2200      	movs	r2, #0
 800430c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004310:	485e      	ldr	r0, [pc, #376]	@ (800448c <MX_GPIO_Init+0x204>)
 8004312:	f002 fc19 	bl	8006b48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800431a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	4619      	mov	r1, r3
 800432a:	4858      	ldr	r0, [pc, #352]	@ (800448c <MX_GPIO_Init+0x204>)
 800432c:	f002 fa72 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8004330:	230d      	movs	r3, #13
 8004332:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004334:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004338:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4619      	mov	r1, r3
 8004344:	4851      	ldr	r0, [pc, #324]	@ (800448c <MX_GPIO_Init+0x204>)
 8004346:	f002 fa65 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800434a:	2320      	movs	r3, #32
 800434c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434e:	2301      	movs	r3, #1
 8004350:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800435a:	f107 0314 	add.w	r3, r7, #20
 800435e:	4619      	mov	r1, r3
 8004360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004364:	f002 fa56 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8004368:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 800436c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	4842      	ldr	r0, [pc, #264]	@ (800448c <MX_GPIO_Init+0x204>)
 8004382:	f002 fa47 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8004386:	f640 0304 	movw	r3, #2052	@ 0x804
 800438a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	4619      	mov	r1, r3
 800439a:	483d      	ldr	r0, [pc, #244]	@ (8004490 <MX_GPIO_Init+0x208>)
 800439c:	f002 fa3a 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80043a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80043a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80043aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043ac:	2302      	movs	r3, #2
 80043ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	4836      	ldr	r0, [pc, #216]	@ (8004490 <MX_GPIO_Init+0x208>)
 80043b8:	f002 fa2c 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043c8:	2302      	movs	r3, #2
 80043ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4619      	mov	r1, r3
 80043d2:	482f      	ldr	r0, [pc, #188]	@ (8004490 <MX_GPIO_Init+0x208>)
 80043d4:	f002 fa1e 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4619      	mov	r1, r3
 80043ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043f2:	f002 fa0f 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004400:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004402:	2302      	movs	r3, #2
 8004404:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004410:	f002 fa00 	bl	8006814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004418:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800441a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800441e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004420:	2302      	movs	r3, #2
 8004422:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	4619      	mov	r1, r3
 800442a:	4818      	ldr	r0, [pc, #96]	@ (800448c <MX_GPIO_Init+0x204>)
 800442c:	f002 f9f2 	bl	8006814 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004430:	2200      	movs	r2, #0
 8004432:	2100      	movs	r1, #0
 8004434:	2006      	movs	r0, #6
 8004436:	f001 fe86 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800443a:	2006      	movs	r0, #6
 800443c:	f001 fe9d 	bl	800617a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004440:	2200      	movs	r2, #0
 8004442:	2100      	movs	r1, #0
 8004444:	2008      	movs	r0, #8
 8004446:	f001 fe7e 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800444a:	2008      	movs	r0, #8
 800444c:	f001 fe95 	bl	800617a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004450:	2200      	movs	r2, #0
 8004452:	2100      	movs	r1, #0
 8004454:	2009      	movs	r0, #9
 8004456:	f001 fe76 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800445a:	2009      	movs	r0, #9
 800445c:	f001 fe8d 	bl	800617a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	2017      	movs	r0, #23
 8004466:	f001 fe6e 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800446a:	2017      	movs	r0, #23
 800446c:	f001 fe85 	bl	800617a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	2028      	movs	r0, #40	@ 0x28
 8004476:	f001 fe66 	bl	8006146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800447a:	2028      	movs	r0, #40	@ 0x28
 800447c:	f001 fe7d 	bl	800617a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004480:	bf00      	nop
 8004482:	3728      	adds	r7, #40	@ 0x28
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	48000800 	.word	0x48000800
 8004490:	48000400 	.word	0x48000400

08004494 <PenDelay>:

/* USER CODE BEGIN 4 */
bool PenDelay(void) {
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b08e      	sub	sp, #56	@ 0x38
 800449a:	af00      	add	r7, sp, #0
	static int state = 0;
	unsigned long now = micros();
 800449c:	f000 f9b6 	bl	800480c <micros>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	637b      	str	r3, [r7, #52]	@ 0x34

	switch (state) {
 80044a8:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <PenDelay+0x124>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d87d      	bhi.n	80045ac <PenDelay+0x118>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <PenDelay+0x24>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044e3 	.word	0x080044e3
 80044c0:	0800452b 	.word	0x0800452b
 80044c4:	08004573 	.word	0x08004573
	case 0: // Start sequence with initial wait
		pen_delay_timer = now;
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d0:	4b3a      	ldr	r3, [pc, #232]	@ (80045bc <PenDelay+0x128>)
 80044d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044d6:	e9c3 1200 	strd	r1, r2, [r3]
		state = 1;
 80044da:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <PenDelay+0x124>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
		break;
 80044e0:	e064      	b.n	80045ac <PenDelay+0x118>
	case 1: // Waiting for first 500ms
		if (now - pen_delay_timer >= 500000UL) {
 80044e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e4:	2200      	movs	r2, #0
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ea:	4b34      	ldr	r3, [pc, #208]	@ (80045bc <PenDelay+0x128>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044f4:	4621      	mov	r1, r4
 80044f6:	ebb1 0a02 	subs.w	sl, r1, r2
 80044fa:	4629      	mov	r1, r5
 80044fc:	eb61 0b03 	sbc.w	fp, r1, r3
 8004500:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <PenDelay+0x12c>)
 8004502:	459a      	cmp	sl, r3
 8004504:	f17b 0300 	sbcs.w	r3, fp, #0
 8004508:	d34b      	bcc.n	80045a2 <PenDelay+0x10e>
			Set_Servo(1);
 800450a:	2001      	movs	r0, #1
 800450c:	f000 fcb0 	bl	8004e70 <Set_Servo>
			pen_delay_timer = now;
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004512:	2200      	movs	r2, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	61fa      	str	r2, [r7, #28]
 8004518:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <PenDelay+0x128>)
 800451a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800451e:	e9c3 1200 	strd	r1, r2, [r3]
			state = 2;
 8004522:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <PenDelay+0x124>)
 8004524:	2202      	movs	r2, #2
 8004526:	601a      	str	r2, [r3, #0]
		}
		break;
 8004528:	e03b      	b.n	80045a2 <PenDelay+0x10e>
	case 2: // Waiting for second 500ms after servo set to 1
		if (now - pen_delay_timer >= 500000UL) {
 800452a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452c:	2200      	movs	r2, #0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	617a      	str	r2, [r7, #20]
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <PenDelay+0x128>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800453c:	4621      	mov	r1, r4
 800453e:	ebb1 0802 	subs.w	r8, r1, r2
 8004542:	4629      	mov	r1, r5
 8004544:	eb61 0903 	sbc.w	r9, r1, r3
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <PenDelay+0x12c>)
 800454a:	4598      	cmp	r8, r3
 800454c:	f179 0300 	sbcs.w	r3, r9, #0
 8004550:	d329      	bcc.n	80045a6 <PenDelay+0x112>
			Set_Servo(0);
 8004552:	2000      	movs	r0, #0
 8004554:	f000 fc8c 	bl	8004e70 <Set_Servo>
			pen_delay_timer = now;
 8004558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455a:	2200      	movs	r2, #0
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	60fa      	str	r2, [r7, #12]
 8004560:	4b16      	ldr	r3, [pc, #88]	@ (80045bc <PenDelay+0x128>)
 8004562:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004566:	e9c3 1200 	strd	r1, r2, [r3]
			state = 3;
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <PenDelay+0x124>)
 800456c:	2203      	movs	r2, #3
 800456e:	601a      	str	r2, [r3, #0]
		}
		break;
 8004570:	e019      	b.n	80045a6 <PenDelay+0x112>
	case 3: // Waiting for third 500ms after servo set to 0
		if (now - pen_delay_timer >= 500000UL) {
 8004572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004574:	2200      	movs	r2, #0
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <PenDelay+0x128>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004584:	4641      	mov	r1, r8
 8004586:	1a8c      	subs	r4, r1, r2
 8004588:	4649      	mov	r1, r9
 800458a:	eb61 0503 	sbc.w	r5, r1, r3
 800458e:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <PenDelay+0x12c>)
 8004590:	429c      	cmp	r4, r3
 8004592:	f175 0300 	sbcs.w	r3, r5, #0
 8004596:	d308      	bcc.n	80045aa <PenDelay+0x116>
			state = 0;
 8004598:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <PenDelay+0x124>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
			return true;
 800459e:	2301      	movs	r3, #1
 80045a0:	e005      	b.n	80045ae <PenDelay+0x11a>
		break;
 80045a2:	bf00      	nop
 80045a4:	e002      	b.n	80045ac <PenDelay+0x118>
		break;
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <PenDelay+0x118>
		}
		break;
 80045aa:	bf00      	nop
	}
	return false;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3738      	adds	r7, #56	@ 0x38
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b8:	20001450 	.word	0x20001450
 80045bc:	20001358 	.word	0x20001358
 80045c0:	0007a120 	.word	0x0007a120

080045c4 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80045ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80045d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80045d6:	edc7 1a02 	vstr	s3, [r7, #8]
 80045da:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80045de:	ed97 7a05 	vldr	s14, [r7, #20]
 80045e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ea:	edd7 6a01 	vldr	s13, [r7, #4]
 80045ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80045f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80045fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	edd7 7a02 	vldr	s15, [r7, #8]
 800460e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <DWT_Init>:

void DWT_Init(void) {
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004624:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <DWT_Init+0x28>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a07      	ldr	r2, [pc, #28]	@ (8004648 <DWT_Init+0x28>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <DWT_Init+0x2c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a05      	ldr	r2, [pc, #20]	@ (800464c <DWT_Init+0x2c>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000edf0 	.word	0xe000edf0
 800464c:	e0001000 	.word	0xe0001000

08004650 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004660:	d10e      	bne.n	8004680 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8004662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800466a:	f002 fa55 	bl	8006b18 <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004674:	4b4b      	ldr	r3, [pc, #300]	@ (80047a4 <HAL_GPIO_EXTI_Callback+0x154>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4b49      	ldr	r3, [pc, #292]	@ (80047a4 <HAL_GPIO_EXTI_Callback+0x154>)
 800467e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d10d      	bne.n	80046a4 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8004688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800468c:	4846      	ldr	r0, [pc, #280]	@ (80047a8 <HAL_GPIO_EXTI_Callback+0x158>)
 800468e:	f002 fa43 	bl	8006b18 <HAL_GPIO_ReadPin>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 8004698:	4b44      	ldr	r3, [pc, #272]	@ (80047ac <HAL_GPIO_EXTI_Callback+0x15c>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 800469e:	4b44      	ldr	r3, [pc, #272]	@ (80047b0 <HAL_GPIO_EXTI_Callback+0x160>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046aa:	d10e      	bne.n	80046ca <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 80046ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046b0:	4840      	ldr	r0, [pc, #256]	@ (80047b4 <HAL_GPIO_EXTI_Callback+0x164>)
 80046b2:	f002 fa31 	bl	8006b18 <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d103      	bne.n	80046c4 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 80046bc:	4b3e      	ldr	r3, [pc, #248]	@ (80047b8 <HAL_GPIO_EXTI_Callback+0x168>)
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 80046c4:	4b3c      	ldr	r3, [pc, #240]	@ (80047b8 <HAL_GPIO_EXTI_Callback+0x168>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d0:	d10e      	bne.n	80046f0 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 80046d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046d6:	4837      	ldr	r0, [pc, #220]	@ (80047b4 <HAL_GPIO_EXTI_Callback+0x164>)
 80046d8:	f002 fa1e 	bl	8006b18 <HAL_GPIO_ReadPin>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d103      	bne.n	80046ea <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 80046e2:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <HAL_GPIO_EXTI_Callback+0x16c>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 80046ea:	4b34      	ldr	r3, [pc, #208]	@ (80047bc <HAL_GPIO_EXTI_Callback+0x16c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d102      	bne.n	80046fe <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 80046f8:	4b2d      	ldr	r3, [pc, #180]	@ (80047b0 <HAL_GPIO_EXTI_Callback+0x160>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 80046fe:	4b30      	ldr	r3, [pc, #192]	@ (80047c0 <HAL_GPIO_EXTI_Callback+0x170>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e00a      	b.n	8004726 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d102      	bne.n	800471c <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8004716:	2301      	movs	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e004      	b.n	8004726 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b08      	cmp	r3, #8
 8004720:	d13b      	bne.n	800479a <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 8004722:	2302      	movs	r3, #2
 8004724:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8004726:	4a27      	ldr	r2, [pc, #156]	@ (80047c4 <HAL_GPIO_EXTI_Callback+0x174>)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 8004732:	4925      	ldr	r1, [pc, #148]	@ (80047c8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 800473c:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <HAL_GPIO_EXTI_Callback+0x174>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4413      	add	r3, r2
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e029      	b.n	800479c <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	429a      	cmp	r2, r3
 8004754:	d306      	bcc.n	8004764 <HAL_GPIO_EXTI_Callback+0x114>
 8004756:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	e006      	b.n	8004772 <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004764:	4a18      	ldr	r2, [pc, #96]	@ (80047c8 <HAL_GPIO_EXTI_Callback+0x178>)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8004770:	3b01      	subs	r3, #1
		uint32_t delta =
 8004772:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004774:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <HAL_GPIO_EXTI_Callback+0x17c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <HAL_GPIO_EXTI_Callback+0x180>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	fbb2 f2f3 	udiv	r2, r2, r3
 8004786:	4913      	ldr	r1, [pc, #76]	@ (80047d4 <HAL_GPIO_EXTI_Callback+0x184>)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 800478e:	4a0d      	ldr	r2, [pc, #52]	@ (80047c4 <HAL_GPIO_EXTI_Callback+0x174>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e000      	b.n	800479c <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 800479a:	bf00      	nop
	}
}
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000bb0 	.word	0x20000bb0
 80047a8:	48000800 	.word	0x48000800
 80047ac:	20000c04 	.word	0x20000c04
 80047b0:	20000c05 	.word	0x20000c05
 80047b4:	48000400 	.word	0x48000400
 80047b8:	20000c09 	.word	0x20000c09
 80047bc:	20000c0a 	.word	0x20000c0a
 80047c0:	e0001000 	.word	0xe0001000
 80047c4:	20001454 	.word	0x20001454
 80047c8:	20000b10 	.word	0x20000b10
 80047cc:	20000268 	.word	0x20000268
 80047d0:	431bde83 	.word	0x431bde83
 80047d4:	20000b1c 	.word	0x20000b1c

080047d8 <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80047d8:	b4b0      	push	{r4, r5, r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d108      	bne.n	80047fa <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	1e54      	subs	r4, r2, #1
 80047f0:	f143 0500 	adc.w	r5, r3, #0
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80047f6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bcb0      	pop	{r4, r5, r7}
 8004802:	4770      	bx	lr
 8004804:	20000618 	.word	0x20000618
 8004808:	20000ad8 	.word	0x20000ad8

0800480c <micros>:
uint64_t micros() {
 800480c:	b4b0      	push	{r4, r5, r7}
 800480e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <micros+0x2c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	2200      	movs	r2, #0
 8004818:	4618      	mov	r0, r3
 800481a:	4611      	mov	r1, r2
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <micros+0x30>)
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	1884      	adds	r4, r0, r2
 8004824:	eb41 0503 	adc.w	r5, r1, r3
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
}
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	bcb0      	pop	{r4, r5, r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000618 	.word	0x20000618
 800483c:	20000ad8 	.word	0x20000ad8

08004840 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8004840:	b480      	push	{r7}
 8004842:	b08f      	sub	sp, #60	@ 0x3c
 8004844:	af00      	add	r7, sp, #0
 8004846:	ed87 0a07 	vstr	s0, [r7, #28]
 800484a:	edc7 0a06 	vstr	s1, [r7, #24]
 800484e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004852:	edc7 1a04 	vstr	s3, [r7, #16]
 8004856:	ed87 2a03 	vstr	s4, [r7, #12]
 800485a:	edc7 2a02 	vstr	s5, [r7, #8]
 800485e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004862:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004864:	ed97 7a06 	vldr	s14, [r7, #24]
 8004868:	edd7 7a07 	vldr	s15, [r7, #28]
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	ed93 7a00 	vldr	s14, [r3]
 800487a:	edd7 6a07 	vldr	s13, [r7, #28]
 800487e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	ed93 7a00 	vldr	s14, [r3]
 8004896:	ed97 6a01 	vldr	s12, [r7, #4]
 800489a:	edd7 6a05 	vldr	s13, [r7, #20]
 800489e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80048a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	dd08      	ble.n	80048be <PID_Update+0x7e>
		state->integ = outMax / kI;
 80048ac:	edd7 6a01 	vldr	s13, [r7, #4]
 80048b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80048b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	ed93 7a00 	vldr	s14, [r3]
 80048c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80048cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80048d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	d508      	bpl.n	80048ec <PID_Update+0xac>
		state->integ = outMin / kI;
 80048da:	edd7 6a02 	vldr	s13, [r7, #8]
 80048de:	ed97 7a05 	vldr	s14, [r7, #20]
 80048e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 80048ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80048f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	dd0b      	ble.n	8004912 <PID_Update+0xd2>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	edd3 7a00 	vldr	s15, [r3]
 8004900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d503      	bpl.n	8004912 <PID_Update+0xd2>
		state->integ = 0;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004912:	edd7 7a07 	vldr	s15, [r7, #28]
 8004916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d50b      	bpl.n	8004938 <PID_Update+0xf8>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	edd3 7a00 	vldr	s15, [r3]
 8004926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	dd03      	ble.n	8004938 <PID_Update+0xf8>
		state->integ = 0;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	edd3 7a00 	vldr	s15, [r3]
 800493e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004950:	ed97 7a07 	vldr	s14, [r7, #28]
 8004954:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004958:	ed97 7a03 	vldr	s14, [r7, #12]
 800495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004960:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004964:	ed97 7a04 	vldr	s14, [r7, #16]
 8004968:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 800497a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800497e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004986:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800498a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004992:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004996:	edd7 7a01 	vldr	s15, [r7, #4]
 800499a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	dd01      	ble.n	80049a8 <PID_Update+0x168>
		out = outMax;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 80049a8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80049ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80049b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	d501      	bpl.n	80049be <PID_Update+0x17e>
		out = outMin;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	ee07 3a90 	vmov	s15, r3
}
 80049c4:	eeb0 0a67 	vmov.f32	s0, s15
 80049c8:	373c      	adds	r7, #60	@ 0x3c
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	0000      	movs	r0, r0
 80049d4:	0000      	movs	r0, r0
	...

080049d8 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 80049d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 80049e0:	f7ff ff14 	bl	800480c <micros>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	497b      	ldr	r1, [pc, #492]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 80049ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 80049ee:	4b7b      	ldr	r3, [pc, #492]	@ (8004bdc <Revolute_PosVel_Update+0x204>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	4a78      	ldr	r2, [pc, #480]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 80049f6:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 80049f8:	4b77      	ldr	r3, [pc, #476]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a0a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004a0e:	4b72      	ldr	r3, [pc, #456]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a10:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8004a12:	4b71      	ldr	r3, [pc, #452]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004a18:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a20:	dd04      	ble.n	8004a2c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e007      	b.n	8004a3c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004a32:	da03      	bge.n	8004a3c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004a3a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004a3c:	4b66      	ldr	r3, [pc, #408]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004a42:	4b65      	ldr	r3, [pc, #404]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a48:	ebb0 0a02 	subs.w	sl, r0, r2
 8004a4c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004a50:	4650      	mov	r0, sl
 8004a52:	4659      	mov	r1, fp
 8004a54:	f7fc f96e 	bl	8000d34 <__aeabi_ul2f>
 8004a58:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004a5c:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004be0 <Revolute_PosVel_Update+0x208>
 8004a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a64:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a74:	f000 80a0 	beq.w	8004bb8 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a82:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a8a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004a8e:	4b52      	ldr	r3, [pc, #328]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004a90:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004aa6:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fb fd15 	bl	80004e0 <__aeabi_f2d>
 8004ab6:	a344      	add	r3, pc, #272	@ (adr r3, 8004bc8 <Revolute_PosVel_Update+0x1f0>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fd68 	bl	8000590 <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f7fc f81c 	bl	8000b04 <__aeabi_d2f>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a42      	ldr	r2, [pc, #264]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004ad0:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004ad2:	4b44      	ldr	r3, [pc, #272]	@ (8004be4 <Revolute_PosVel_Update+0x20c>)
 8004ad4:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004ad6:	4b40      	ldr	r3, [pc, #256]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004ad8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004adc:	edd7 7a00 	vldr	s15, [r7]
 8004ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004ae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae8:	edd7 7a00 	vldr	s15, [r7]
 8004aec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004af0:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004af2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004afa:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004afe:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b00:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004b04:	4b34      	ldr	r3, [pc, #208]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fce9 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004b0e:	a32e      	add	r3, pc, #184	@ (adr r3, 8004bc8 <Revolute_PosVel_Update+0x1f0>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fd3c 	bl	8000590 <__aeabi_dmul>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7fb fff0 	bl	8000b04 <__aeabi_d2f>
 8004b24:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004b26:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	17c8      	asrs	r0, r1, #31
 8004b34:	460c      	mov	r4, r1
 8004b36:	4605      	mov	r5, r0
 8004b38:	eb12 0804 	adds.w	r8, r2, r4
 8004b3c:	eb43 0905 	adc.w	r9, r3, r5
 8004b40:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b42:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b48:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f7fb fcf0 	bl	8000534 <__aeabi_l2d>
 8004b54:	a31c      	add	r3, pc, #112	@ (adr r3, 8004bc8 <Revolute_PosVel_Update+0x1f0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fd19 	bl	8000590 <__aeabi_dmul>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7fb ffcd 	bl	8000b04 <__aeabi_d2f>
 8004b6a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b6e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004b72:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b76:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004be8 <Revolute_PosVel_Update+0x210>
 8004b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b7e:	ee17 0a90 	vmov	r0, s15
 8004b82:	f7fb fcad 	bl	80004e0 <__aeabi_f2d>
 8004b86:	a312      	add	r3, pc, #72	@ (adr r3, 8004bd0 <Revolute_PosVel_Update+0x1f8>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fe2a 	bl	80007e4 <__aeabi_ddiv>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f7fb ffb4 	bl	8000b04 <__aeabi_d2f>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004ba0:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004ba8:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004baa:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004bac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004bb0:	4909      	ldr	r1, [pc, #36]	@ (8004bd8 <Revolute_PosVel_Update+0x200>)
 8004bb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004bb6:	e000      	b.n	8004bba <Revolute_PosVel_Update+0x1e2>
		return;
 8004bb8:	bf00      	nop
}
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	f3af 8000 	nop.w
 8004bc8:	54442d18 	.word	0x54442d18
 8004bcc:	3f3921fb 	.word	0x3f3921fb
 8004bd0:	54442d18 	.word	0x54442d18
 8004bd4:	400921fb 	.word	0x400921fb
 8004bd8:	20000b30 	.word	0x20000b30
 8004bdc:	2000054c 	.word	0x2000054c
 8004be0:	358637bd 	.word	0x358637bd
 8004be4:	3ecccccd 	.word	0x3ecccccd
 8004be8:	43340000 	.word	0x43340000

08004bec <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004bf4:	f7ff fe0a 	bl	800480c <micros>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4958      	ldr	r1, [pc, #352]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004bfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004c02:	4b58      	ldr	r3, [pc, #352]	@ (8004d64 <Prismatic_PosVel_Update+0x178>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	4a55      	ldr	r2, [pc, #340]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c0a:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004c0c:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004c10:	4b53      	ldr	r3, [pc, #332]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004c16:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1e:	dd04      	ble.n	8004c2a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e007      	b.n	8004c3a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004c30:	da03      	bge.n	8004c3a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004c38:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004c3a:	4b49      	ldr	r3, [pc, #292]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004c40:	4b47      	ldr	r3, [pc, #284]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c46:	ebb0 0a02 	subs.w	sl, r0, r2
 8004c4a:	eb61 0b03 	sbc.w	fp, r1, r3
 8004c4e:	4650      	mov	r0, sl
 8004c50:	4659      	mov	r1, fp
 8004c52:	f7fc f86f 	bl	8000d34 <__aeabi_ul2f>
 8004c56:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004c5a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004d68 <Prismatic_PosVel_Update+0x17c>
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	d070      	beq.n	8004d56 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c86:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004c8a:	4b35      	ldr	r3, [pc, #212]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004c8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c90:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c94:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004c98:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004ca2:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004d6c <Prismatic_PosVel_Update+0x180>
 8004cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb8:	4b29      	ldr	r3, [pc, #164]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004cba:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8004d70 <Prismatic_PosVel_Update+0x184>)
 8004cc0:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004cc2:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004cc4:	ed93 7a08 	vldr	s14, [r3, #32]
 8004cc8:	edd7 7a00 	vldr	s15, [r7]
 8004ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004cd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd4:	edd7 7a00 	vldr	s15, [r7]
 8004cd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004cde:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004cec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004cf2:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004cf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d6c <Prismatic_PosVel_Update+0x180>
 8004cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004cfe:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d00:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d06:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	17c8      	asrs	r0, r1, #31
 8004d0e:	460c      	mov	r4, r1
 8004d10:	4605      	mov	r5, r0
 8004d12:	eb12 0804 	adds.w	r8, r2, r4
 8004d16:	eb43 0905 	adc.w	r9, r3, r5
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d1c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004d20:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7fc f80b 	bl	8000d44 <__aeabi_l2f>
 8004d2e:	ee07 0a10 	vmov	s14, r0
 8004d32:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004d6c <Prismatic_PosVel_Update+0x180>
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d3c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a06      	ldr	r2, [pc, #24]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d46:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d4e:	4904      	ldr	r1, [pc, #16]	@ (8004d60 <Prismatic_PosVel_Update+0x174>)
 8004d50:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d54:	e000      	b.n	8004d58 <Prismatic_PosVel_Update+0x16c>
		return;
 8004d56:	bf00      	nop
}
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d60:	20000b70 	.word	0x20000b70
 8004d64:	20000480 	.word	0x20000480
 8004d68:	358637bd 	.word	0x358637bd
 8004d6c:	3aa00000 	.word	0x3aa00000
 8004d70:	3ecccccd 	.word	0x3ecccccd

08004d74 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004e58 <Set_Motor+0xe4>
 8004d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	dd01      	ble.n	8004d96 <Set_Motor+0x22>
		speed = 100.0f;
 8004d92:	4b32      	ldr	r3, [pc, #200]	@ (8004e5c <Set_Motor+0xe8>)
 8004d94:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004d96:	edd7 7a00 	vldr	s15, [r7]
 8004d9a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004e60 <Set_Motor+0xec>
 8004d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d501      	bpl.n	8004dac <Set_Motor+0x38>
		speed = -100.0f;
 8004da8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e64 <Set_Motor+0xf0>)
 8004daa:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004dac:	edd7 7a00 	vldr	s15, [r7]
 8004db0:	eef0 7ae7 	vabs.f32	s15, s15
 8004db4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004e58 <Set_Motor+0xe4>
 8004db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004dbc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004e58 <Set_Motor+0xe4>
 8004dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc8:	ee17 3a90 	vmov	r3, s15
 8004dcc:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11d      	bne.n	8004e10 <Set_Motor+0x9c>
		if (speed > 0) {
 8004dd4:	edd7 7a00 	vldr	s15, [r7]
 8004dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de0:	dd05      	ble.n	8004dee <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2120      	movs	r1, #32
 8004de6:	4820      	ldr	r0, [pc, #128]	@ (8004e68 <Set_Motor+0xf4>)
 8004de8:	f001 feae 	bl	8006b48 <HAL_GPIO_WritePin>
 8004dec:	e00b      	b.n	8004e06 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004dee:	edd7 7a00 	vldr	s15, [r7]
 8004df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfa:	d504      	bpl.n	8004e06 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	2120      	movs	r1, #32
 8004e00:	4819      	ldr	r0, [pc, #100]	@ (8004e68 <Set_Motor+0xf4>)
 8004e02:	f001 fea1 	bl	8006b48 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004e06:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <Set_Motor+0xf8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004e0e:	e01f      	b.n	8004e50 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d11c      	bne.n	8004e50 <Set_Motor+0xdc>
		if (speed > 0) {
 8004e16:	edd7 7a00 	vldr	s15, [r7]
 8004e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	dd05      	ble.n	8004e30 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2140      	movs	r1, #64	@ 0x40
 8004e28:	480f      	ldr	r0, [pc, #60]	@ (8004e68 <Set_Motor+0xf4>)
 8004e2a:	f001 fe8d 	bl	8006b48 <HAL_GPIO_WritePin>
 8004e2e:	e00b      	b.n	8004e48 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004e30:	edd7 7a00 	vldr	s15, [r7]
 8004e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d504      	bpl.n	8004e48 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2140      	movs	r1, #64	@ 0x40
 8004e42:	4809      	ldr	r0, [pc, #36]	@ (8004e68 <Set_Motor+0xf4>)
 8004e44:	f001 fe80 	bl	8006b48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004e48:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <Set_Motor+0xf8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	42c80000 	.word	0x42c80000
 8004e5c:	42c80000 	.word	0x42c80000
 8004e60:	c2c80000 	.word	0xc2c80000
 8004e64:	c2c80000 	.word	0xc2c80000
 8004e68:	48000800 	.word	0x48000800
 8004e6c:	200006e4 	.word	0x200006e4

08004e70 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <Set_Servo+0x48>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004e86:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <Set_Servo+0x4c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004e8e:	f7ff fcbd 	bl	800480c <micros>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	490a      	ldr	r1, [pc, #40]	@ (8004ec0 <Set_Servo+0x50>)
 8004e98:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004e9c:	e007      	b.n	8004eae <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <Set_Servo+0x48>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <Set_Servo+0x4c>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200007b0 	.word	0x200007b0
 8004ebc:	20000c08 	.word	0x20000c08
 8004ec0:	20000c68 	.word	0x20000c68

08004ec4 <Reset_R>:

void Reset_R() {
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004ec8:	4905      	ldr	r1, [pc, #20]	@ (8004ee0 <Reset_R+0x1c>)
 8004eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004ed6:	bf00      	nop
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000b30 	.word	0x20000b30

08004ee4 <Reset_P>:
void Reset_P() {
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004ee8:	4905      	ldr	r1, [pc, #20]	@ (8004f00 <Reset_P+0x1c>)
 8004eea:	4a06      	ldr	r2, [pc, #24]	@ (8004f04 <Reset_P+0x20>)
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000b70 	.word	0x20000b70
 8004f04:	fffff99a 	.word	0xfffff99a

08004f08 <Workspace_limit>:

void Workspace_limit() {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 8004f0c:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <Workspace_limit+0xd8>)
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fae5 	bl	80004e0 <__aeabi_f2d>
 8004f16:	a32e      	add	r3, pc, #184	@ (adr r3, 8004fd0 <Workspace_limit+0xc8>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fdaa 	bl	8000a74 <__aeabi_dcmplt>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <Workspace_limit+0x36>
 8004f26:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe4 <Workspace_limit+0xdc>)
 8004f28:	edd3 7a00 	vldr	s15, [r3]
 8004f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	dd03      	ble.n	8004f3e <Workspace_limit+0x36>
		R_PWM = 0;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <Workspace_limit+0xdc>)
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 8004f3e:	4b28      	ldr	r3, [pc, #160]	@ (8004fe0 <Workspace_limit+0xd8>)
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb facc 	bl	80004e0 <__aeabi_f2d>
 8004f48:	a323      	add	r3, pc, #140	@ (adr r3, 8004fd8 <Workspace_limit+0xd0>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fdaf 	bl	8000ab0 <__aeabi_dcmpgt>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <Workspace_limit+0x68>
 8004f58:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <Workspace_limit+0xdc>)
 8004f5a:	edd3 7a00 	vldr	s15, [r3]
 8004f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d503      	bpl.n	8004f70 <Workspace_limit+0x68>
		R_PWM = 0;
 8004f68:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe4 <Workspace_limit+0xdc>)
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <Workspace_limit+0xe0>)
 8004f72:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004f76:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004fec <Workspace_limit+0xe4>
 8004f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	dd0b      	ble.n	8004f9c <Workspace_limit+0x94>
 8004f84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <Workspace_limit+0xe8>)
 8004f86:	edd3 7a00 	vldr	s15, [r3]
 8004f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f92:	dd03      	ble.n	8004f9c <Workspace_limit+0x94>
		P_PWM = 0;
 8004f94:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <Workspace_limit+0xe8>)
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004f9c:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <Workspace_limit+0xe0>)
 8004f9e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004fa2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	d400      	bmi.n	8004fb2 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 8004fb0:	e00c      	b.n	8004fcc <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <Workspace_limit+0xe8>)
 8004fb4:	edd3 7a00 	vldr	s15, [r3]
 8004fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc0:	d400      	bmi.n	8004fc4 <Workspace_limit+0xbc>
}
 8004fc2:	e003      	b.n	8004fcc <Workspace_limit+0xc4>
		P_PWM = 0;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <Workspace_limit+0xe8>)
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	1e8e6080 	.word	0x1e8e6080
 8004fd4:	bffeb7bf 	.word	0xbffeb7bf
 8004fd8:	bfb15b57 	.word	0xbfb15b57
 8004fdc:	40143eec 	.word	0x40143eec
 8004fe0:	20000b30 	.word	0x20000b30
 8004fe4:	20000bfc 	.word	0x20000bfc
 8004fe8:	20000b70 	.word	0x20000b70
 8004fec:	43988000 	.word	0x43988000
 8004ff0:	20000c00 	.word	0x20000c00

08004ff4 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8005008:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <Get_QRIdata+0x70>)
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8005016:	4b13      	ldr	r3, [pc, #76]	@ (8005064 <Get_QRIdata+0x70>)
 8005018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8005024:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <Get_QRIdata+0x70>)
 8005026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <Get_QRIdata+0x74>)
 8005034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8005040:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <Get_QRIdata+0x74>)
 8005042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <Get_QRIdata+0x74>)
 8005050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000b70 	.word	0x20000b70
 8005068:	20000b30 	.word	0x20000b30

0800506c <Trapezoidal_CalcTotalTime>:

float Trapezoidal_CalcTotalTime(float distance, float vmax, float amax) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	ed87 0a03 	vstr	s0, [r7, #12]
 8005076:	edc7 0a02 	vstr	s1, [r7, #8]
 800507a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_acc = vmax / amax;
 800507e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005082:	ed97 7a01 	vldr	s14, [r7, #4]
 8005086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_acc = 0.5f * amax * t_acc * t_acc;
 800508e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005092:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800509a:	edd7 7a07 	vldr	s15, [r7, #28]
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a06 	vstr	s15, [r7, #24]
	if (2 * d_acc > distance) {
 80050ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80050b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80050ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	d510      	bpl.n	80050e6 <Trapezoidal_CalcTotalTime+0x7a>
		t_acc = sqrtf(distance / amax);
 80050c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80050c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80050cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050d0:	eeb0 0a66 	vmov.f32	s0, s13
 80050d4:	f007 fa62 	bl	800c59c <sqrtf>
 80050d8:	ed87 0a07 	vstr	s0, [r7, #28]
		return 2 * t_acc;
 80050dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80050e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050e4:	e019      	b.n	800511a <Trapezoidal_CalcTotalTime+0xae>
	}
	float d_const = distance - 2 * d_acc;
 80050e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80050ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80050f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f6:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_const = d_const / vmax;
 80050fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80050fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8005102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005106:	edc7 7a04 	vstr	s15, [r7, #16]
	return 2 * t_acc + t_const;
 800510a:	edd7 7a07 	vldr	s15, [r7, #28]
 800510e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005112:	edd7 7a04 	vldr	s15, [r7, #16]
 8005116:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800511a:	eeb0 0a67 	vmov.f32	s0, s15
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <Trapezoidal_CalcVmaxFromTime>:

float Trapezoidal_CalcVmaxFromTime(float distance, float amax, float total_time) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	ed87 0a03 	vstr	s0, [r7, #12]
 800512e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005132:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_half = total_time / 2.0f;
 8005136:	ed97 7a01 	vldr	s14, [r7, #4]
 800513a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800513e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_half = distance / 2.0f;
 8005146:	ed97 7a03 	vldr	s14, [r7, #12]
 800514a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800514e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005152:	edc7 7a06 	vstr	s15, [r7, #24]

	float v_peak = amax * t_half;
 8005156:	ed97 7a02 	vldr	s14, [r7, #8]
 800515a:	edd7 7a07 	vldr	s15, [r7, #28]
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a05 	vstr	s15, [r7, #20]
	if (0.5f * v_peak * t_half >= d_half) {
 8005166:	edd7 7a05 	vldr	s15, [r7, #20]
 800516a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800516e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005172:	edd7 7a07 	vldr	s15, [r7, #28]
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	ed97 7a06 	vldr	s14, [r7, #24]
 800517e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	d80c      	bhi.n	80051a2 <Trapezoidal_CalcVmaxFromTime+0x7e>
		return sqrtf(distance * amax);
 8005188:	ed97 7a03 	vldr	s14, [r7, #12]
 800518c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005194:	eeb0 0a67 	vmov.f32	s0, s15
 8005198:	f007 fa00 	bl	800c59c <sqrtf>
 800519c:	eef0 6a40 	vmov.f32	s13, s0
 80051a0:	e015      	b.n	80051ce <Trapezoidal_CalcVmaxFromTime+0xaa>
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
 80051a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80051a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80051b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	ed97 7a03 	vldr	s14, [r7, #12]
 80051c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80051ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80051ce:	eef0 7a66 	vmov.f32	s15, s13
 80051d2:	eeb0 0a67 	vmov.f32	s0, s15
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	0000      	movs	r0, r0
	...

080051e0 <InverseKinematics>:

void InverseKinematics(float x, float y, float *r, float *p) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80051ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	*r = atan2f(x * -1, y) + M_PI_2;
 80051f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051f6:	eef1 7a67 	vneg.f32	s15, s15
 80051fa:	edd7 0a02 	vldr	s1, [r7, #8]
 80051fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005202:	f007 f9c9 	bl	800c598 <atan2f>
 8005206:	ee10 3a10 	vmov	r3, s0
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb f968 	bl	80004e0 <__aeabi_f2d>
 8005210:	a313      	add	r3, pc, #76	@ (adr r3, 8005260 <InverseKinematics+0x80>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fb f805 	bl	8000224 <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	f7fb fc6f 	bl	8000b04 <__aeabi_d2f>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
	*p = sqrtf(x * x + y * y);
 800522c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005230:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005234:	edd7 7a02 	vldr	s15, [r7, #8]
 8005238:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800523c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005240:	eeb0 0a67 	vmov.f32	s0, s15
 8005244:	f007 f9aa 	bl	800c59c <sqrtf>
 8005248:	eef0 7a40 	vmov.f32	s15, s0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	edc3 7a00 	vstr	s15, [r3]
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w
 8005260:	54442d18 	.word	0x54442d18
 8005264:	3ff921fb 	.word	0x3ff921fb

08005268 <TrapezoidStep>:

void TrapezoidStep(void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
//	static float last_TargetR = 0.0f;
//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 800526e:	4b38      	ldr	r3, [pc, #224]	@ (8005350 <TrapezoidStep+0xe8>)
 8005270:	ed93 7a00 	vldr	s14, [r3]
 8005274:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <TrapezoidStep+0xec>)
 8005276:	edd3 7a00 	vldr	s15, [r3]
 800527a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527e:	eef0 7ae7 	vabs.f32	s15, s15
 8005282:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 8005286:	edd7 7a01 	vldr	s15, [r7, #4]
 800528a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005358 <TrapezoidStep+0xf0>
 800528e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	dd0f      	ble.n	80052b8 <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 8005298:	4b30      	ldr	r3, [pc, #192]	@ (800535c <TrapezoidStep+0xf4>)
 800529a:	edd3 7a00 	vldr	s15, [r3]
 800529e:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80052a2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8005360 <TrapezoidStep+0xf8>
 80052a6:	eeb0 0a67 	vmov.f32	s0, s15
 80052aa:	482e      	ldr	r0, [pc, #184]	@ (8005364 <TrapezoidStep+0xfc>)
 80052ac:	f7fc fba6 	bl	80019fc <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 80052b0:	4b27      	ldr	r3, [pc, #156]	@ (8005350 <TrapezoidStep+0xe8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a27      	ldr	r2, [pc, #156]	@ (8005354 <TrapezoidStep+0xec>)
 80052b6:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 80052b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <TrapezoidStep+0x100>)
 80052ba:	ed93 7a00 	vldr	s14, [r3]
 80052be:	4b2b      	ldr	r3, [pc, #172]	@ (800536c <TrapezoidStep+0x104>)
 80052c0:	edd3 7a00 	vldr	s15, [r3]
 80052c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c8:	eef0 7ae7 	vabs.f32	s15, s15
 80052cc:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 80052d0:	edd7 7a00 	vldr	s15, [r7]
 80052d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005370 <TrapezoidStep+0x108>
 80052d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	dd0f      	ble.n	8005302 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 80052e2:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <TrapezoidStep+0x10c>)
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005378 <TrapezoidStep+0x110>
 80052ec:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800537c <TrapezoidStep+0x114>
 80052f0:	eeb0 0a67 	vmov.f32	s0, s15
 80052f4:	4822      	ldr	r0, [pc, #136]	@ (8005380 <TrapezoidStep+0x118>)
 80052f6:	f7fc fb81 	bl	80019fc <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <TrapezoidStep+0x100>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <TrapezoidStep+0x104>)
 8005300:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 8005302:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8005358 <TrapezoidStep+0xf0>
 8005306:	4817      	ldr	r0, [pc, #92]	@ (8005364 <TrapezoidStep+0xfc>)
 8005308:	f7fc fc42 	bl	8001b90 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 800530c:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <TrapezoidStep+0xfc>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <TrapezoidStep+0x11c>)
 8005312:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 8005314:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <TrapezoidStep+0xfc>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <TrapezoidStep+0x120>)
 800531a:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <TrapezoidStep+0xfc>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <TrapezoidStep+0x124>)
 8005322:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 8005324:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005358 <TrapezoidStep+0xf0>
 8005328:	4815      	ldr	r0, [pc, #84]	@ (8005380 <TrapezoidStep+0x118>)
 800532a:	f7fc fc31 	bl	8001b90 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 800532e:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <TrapezoidStep+0x118>)
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <TrapezoidStep+0x128>)
 8005334:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8005336:	4b12      	ldr	r3, [pc, #72]	@ (8005380 <TrapezoidStep+0x118>)
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <TrapezoidStep+0x12c>)
 800533c:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 800533e:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <TrapezoidStep+0x118>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <TrapezoidStep+0x130>)
 8005344:	6013      	str	r3, [r2, #0]
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000bcc 	.word	0x20000bcc
 8005354:	20001350 	.word	0x20001350
 8005358:	3a83126f 	.word	0x3a83126f
 800535c:	20000bec 	.word	0x20000bec
 8005360:	3fb33333 	.word	0x3fb33333
 8005364:	20001364 	.word	0x20001364
 8005368:	20000bd0 	.word	0x20000bd0
 800536c:	20001354 	.word	0x20001354
 8005370:	3c23d70a 	.word	0x3c23d70a
 8005374:	20000bf0 	.word	0x20000bf0
 8005378:	453b8000 	.word	0x453b8000
 800537c:	44160000 	.word	0x44160000
 8005380:	200013a8 	.word	0x200013a8
 8005384:	20000bd4 	.word	0x20000bd4
 8005388:	20000bdc 	.word	0x20000bdc
 800538c:	20000be4 	.word	0x20000be4
 8005390:	20000bd8 	.word	0x20000bd8
 8005394:	20000be0 	.word	0x20000be0
 8005398:	20000be8 	.word	0x20000be8

0800539c <PIDStep>:

void PIDStep(void) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <PIDStep+0x19c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a63      	ldr	r2, [pc, #396]	@ (8005538 <PIDStep+0x19c>)
 80053aa:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 80053ac:	4b62      	ldr	r3, [pc, #392]	@ (8005538 <PIDStep+0x19c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	dd62      	ble.n	800547a <PIDStep+0xde>
		loop_counter1 = 0;
 80053b4:	4b60      	ldr	r3, [pc, #384]	@ (8005538 <PIDStep+0x19c>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 80053ba:	4b60      	ldr	r3, [pc, #384]	@ (800553c <PIDStep+0x1a0>)
 80053bc:	ed93 7a00 	vldr	s14, [r3]
 80053c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005540 <PIDStep+0x1a4>)
 80053c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80053c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ca:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 80053ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005544 <PIDStep+0x1a8>)
 80053d0:	ed93 7a00 	vldr	s14, [r3]
 80053d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005548 <PIDStep+0x1ac>)
 80053d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80053da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053de:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 80053e2:	4b5a      	ldr	r3, [pc, #360]	@ (800554c <PIDStep+0x1b0>)
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <PIDStep+0x1b4>)
 80053ea:	ed93 7a00 	vldr	s14, [r3]
 80053ee:	4b59      	ldr	r3, [pc, #356]	@ (8005554 <PIDStep+0x1b8>)
 80053f0:	edd3 6a00 	vldr	s13, [r3]
 80053f4:	4858      	ldr	r0, [pc, #352]	@ (8005558 <PIDStep+0x1bc>)
 80053f6:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 800555c <PIDStep+0x1c0>
 80053fa:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8005560 <PIDStep+0x1c4>
 80053fe:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8005564 <PIDStep+0x1c8>
 8005402:	eef0 1a66 	vmov.f32	s3, s13
 8005406:	eeb0 1a47 	vmov.f32	s2, s14
 800540a:	eef0 0a67 	vmov.f32	s1, s15
 800540e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005412:	f7ff fa15 	bl	8004840 <PID_Update>
 8005416:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 800541a:	4b53      	ldr	r3, [pc, #332]	@ (8005568 <PIDStep+0x1cc>)
 800541c:	edd3 7a00 	vldr	s15, [r3]
 8005420:	4b52      	ldr	r3, [pc, #328]	@ (800556c <PIDStep+0x1d0>)
 8005422:	ed93 7a00 	vldr	s14, [r3]
 8005426:	4b52      	ldr	r3, [pc, #328]	@ (8005570 <PIDStep+0x1d4>)
 8005428:	edd3 6a00 	vldr	s13, [r3]
 800542c:	4851      	ldr	r0, [pc, #324]	@ (8005574 <PIDStep+0x1d8>)
 800542e:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 800555c <PIDStep+0x1c0>
 8005432:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8005560 <PIDStep+0x1c4>
 8005436:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8005564 <PIDStep+0x1c8>
 800543a:	eef0 1a66 	vmov.f32	s3, s13
 800543e:	eeb0 1a47 	vmov.f32	s2, s14
 8005442:	eef0 0a67 	vmov.f32	s1, s15
 8005446:	ed97 0a02 	vldr	s0, [r7, #8]
 800544a:	f7ff f9f9 	bl	8004840 <PID_Update>
 800544e:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8005452:	4b49      	ldr	r3, [pc, #292]	@ (8005578 <PIDStep+0x1dc>)
 8005454:	ed93 7a00 	vldr	s14, [r3]
 8005458:	edd7 7a01 	vldr	s15, [r7, #4]
 800545c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005460:	4b46      	ldr	r3, [pc, #280]	@ (800557c <PIDStep+0x1e0>)
 8005462:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8005466:	4b46      	ldr	r3, [pc, #280]	@ (8005580 <PIDStep+0x1e4>)
 8005468:	ed93 7a00 	vldr	s14, [r3]
 800546c:	edd7 7a00 	vldr	s15, [r7]
 8005470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005474:	4b43      	ldr	r3, [pc, #268]	@ (8005584 <PIDStep+0x1e8>)
 8005476:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 800547a:	4b40      	ldr	r3, [pc, #256]	@ (800557c <PIDStep+0x1e0>)
 800547c:	ed93 7a00 	vldr	s14, [r3]
 8005480:	4b2f      	ldr	r3, [pc, #188]	@ (8005540 <PIDStep+0x1a4>)
 8005482:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548a:	4b3f      	ldr	r3, [pc, #252]	@ (8005588 <PIDStep+0x1ec>)
 800548c:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 8005490:	4b3d      	ldr	r3, [pc, #244]	@ (8005588 <PIDStep+0x1ec>)
 8005492:	edd3 7a00 	vldr	s15, [r3]
 8005496:	4b3d      	ldr	r3, [pc, #244]	@ (800558c <PIDStep+0x1f0>)
 8005498:	ed93 7a00 	vldr	s14, [r3]
 800549c:	4b3c      	ldr	r3, [pc, #240]	@ (8005590 <PIDStep+0x1f4>)
 800549e:	edd3 6a00 	vldr	s13, [r3]
 80054a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005594 <PIDStep+0x1f8>)
 80054a4:	ed93 6a00 	vldr	s12, [r3]
 80054a8:	483b      	ldr	r0, [pc, #236]	@ (8005598 <PIDStep+0x1fc>)
 80054aa:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 800555c <PIDStep+0x1c0>
 80054ae:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8005560 <PIDStep+0x1c4>
 80054b2:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 800559c <PIDStep+0x200>
 80054b6:	eef0 1a46 	vmov.f32	s3, s12
 80054ba:	eeb0 1a66 	vmov.f32	s2, s13
 80054be:	eef0 0a47 	vmov.f32	s1, s14
 80054c2:	eeb0 0a67 	vmov.f32	s0, s15
 80054c6:	f7ff f9bb 	bl	8004840 <PID_Update>
 80054ca:	eef0 7a40 	vmov.f32	s15, s0
 80054ce:	4b34      	ldr	r3, [pc, #208]	@ (80055a0 <PIDStep+0x204>)
 80054d0:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 80054d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005584 <PIDStep+0x1e8>)
 80054d6:	ed93 7a00 	vldr	s14, [r3]
 80054da:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <PIDStep+0x1ac>)
 80054dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80054e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e4:	4b2f      	ldr	r3, [pc, #188]	@ (80055a4 <PIDStep+0x208>)
 80054e6:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 80054ea:	4b2e      	ldr	r3, [pc, #184]	@ (80055a4 <PIDStep+0x208>)
 80054ec:	edd3 7a00 	vldr	s15, [r3]
 80054f0:	4b2d      	ldr	r3, [pc, #180]	@ (80055a8 <PIDStep+0x20c>)
 80054f2:	ed93 7a00 	vldr	s14, [r3]
 80054f6:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <PIDStep+0x210>)
 80054f8:	edd3 6a00 	vldr	s13, [r3]
 80054fc:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <PIDStep+0x214>)
 80054fe:	ed93 6a00 	vldr	s12, [r3]
 8005502:	482c      	ldr	r0, [pc, #176]	@ (80055b4 <PIDStep+0x218>)
 8005504:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 800555c <PIDStep+0x1c0>
 8005508:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8005560 <PIDStep+0x1c4>
 800550c:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800559c <PIDStep+0x200>
 8005510:	eef0 1a46 	vmov.f32	s3, s12
 8005514:	eeb0 1a66 	vmov.f32	s2, s13
 8005518:	eef0 0a47 	vmov.f32	s1, s14
 800551c:	eeb0 0a67 	vmov.f32	s0, s15
 8005520:	f7ff f98e 	bl	8004840 <PID_Update>
 8005524:	eef0 7a40 	vmov.f32	s15, s0
 8005528:	4b23      	ldr	r3, [pc, #140]	@ (80055b8 <PIDStep+0x21c>)
 800552a:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20001458 	.word	0x20001458
 800553c:	20000bcc 	.word	0x20000bcc
 8005540:	20000b30 	.word	0x20000b30
 8005544:	20000bd0 	.word	0x20000bd0
 8005548:	20000b70 	.word	0x20000b70
 800554c:	20000244 	.word	0x20000244
 8005550:	20000248 	.word	0x20000248
 8005554:	2000024c 	.word	0x2000024c
 8005558:	20000c30 	.word	0x20000c30
 800555c:	42c80000 	.word	0x42c80000
 8005560:	c2c80000 	.word	0xc2c80000
 8005564:	3c23d70a 	.word	0x3c23d70a
 8005568:	20000258 	.word	0x20000258
 800556c:	2000025c 	.word	0x2000025c
 8005570:	20000260 	.word	0x20000260
 8005574:	20000c38 	.word	0x20000c38
 8005578:	20000bdc 	.word	0x20000bdc
 800557c:	2000145c 	.word	0x2000145c
 8005580:	20000be0 	.word	0x20000be0
 8005584:	20001460 	.word	0x20001460
 8005588:	20000bf4 	.word	0x20000bf4
 800558c:	20000238 	.word	0x20000238
 8005590:	2000023c 	.word	0x2000023c
 8005594:	20000240 	.word	0x20000240
 8005598:	20000c40 	.word	0x20000c40
 800559c:	3a83126f 	.word	0x3a83126f
 80055a0:	20000bfc 	.word	0x20000bfc
 80055a4:	20000bf8 	.word	0x20000bf8
 80055a8:	20000250 	.word	0x20000250
 80055ac:	20000254 	.word	0x20000254
 80055b0:	20000c50 	.word	0x20000c50
 80055b4:	20000c48 	.word	0x20000c48
 80055b8:	20000c00 	.word	0x20000c00

080055bc <ToleranceCheck>:

int ToleranceCheck(void) {
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <ToleranceCheck+0x98>)
 80055c2:	ed93 7a00 	vldr	s14, [r3]
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <ToleranceCheck+0x9c>)
 80055c8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d0:	eef0 7ae7 	vabs.f32	s15, s15
 80055d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800565c <ToleranceCheck+0xa0>
 80055d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	d52c      	bpl.n	800563c <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 80055e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005660 <ToleranceCheck+0xa4>)
 80055e4:	ed93 7a00 	vldr	s14, [r3]
 80055e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005664 <ToleranceCheck+0xa8>)
 80055ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80055ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f2:	eef0 7ae7 	vabs.f32	s15, s15
 80055f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005668 <ToleranceCheck+0xac>
 80055fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005602:	d51b      	bpl.n	800563c <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 8005604:	4b19      	ldr	r3, [pc, #100]	@ (800566c <ToleranceCheck+0xb0>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	4313      	orrs	r3, r2
 800560c:	d107      	bne.n	800561e <ToleranceCheck+0x62>
			lock_timer_us = micros();
 800560e:	f7ff f8fd 	bl	800480c <micros>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4915      	ldr	r1, [pc, #84]	@ (800566c <ToleranceCheck+0xb0>)
 8005618:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 800561c:	e016      	b.n	800564c <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800561e:	f7ff f8f5 	bl	800480c <micros>
 8005622:	4b12      	ldr	r3, [pc, #72]	@ (800566c <ToleranceCheck+0xb0>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	1a84      	subs	r4, r0, r2
 800562a:	eb61 0503 	sbc.w	r5, r1, r3
 800562e:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <ToleranceCheck+0xb4>)
 8005630:	429c      	cmp	r4, r3
 8005632:	f175 0300 	sbcs.w	r3, r5, #0
 8005636:	d309      	bcc.n	800564c <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8005638:	2301      	movs	r3, #1
 800563a:	e009      	b.n	8005650 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 800563c:	490b      	ldr	r1, [pc, #44]	@ (800566c <ToleranceCheck+0xb0>)
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9c1 2300 	strd	r2, r3, [r1]
 800564a:	e000      	b.n	800564e <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 800564c:	bf00      	nop
	}

	return 0;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	20000bcc 	.word	0x20000bcc
 8005658:	20000b30 	.word	0x20000b30
 800565c:	3bded289 	.word	0x3bded289
 8005660:	20000bd0 	.word	0x20000bd0
 8005664:	20000b70 	.word	0x20000b70
 8005668:	3ecccccd 	.word	0x3ecccccd
 800566c:	20001468 	.word	0x20001468
 8005670:	000f4240 	.word	0x000f4240
 8005674:	00000000 	.word	0x00000000

08005678 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8005678:	b5b0      	push	{r4, r5, r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 800567e:	4b34      	ldr	r3, [pc, #208]	@ (8005750 <CascadeControl_Step+0xd8>)
 8005680:	ed93 7a00 	vldr	s14, [r3]
 8005684:	4b33      	ldr	r3, [pc, #204]	@ (8005754 <CascadeControl_Step+0xdc>)
 8005686:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800568a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800568e:	4b32      	ldr	r3, [pc, #200]	@ (8005758 <CascadeControl_Step+0xe0>)
 8005690:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8005694:	4b31      	ldr	r3, [pc, #196]	@ (800575c <CascadeControl_Step+0xe4>)
 8005696:	ed93 7a00 	vldr	s14, [r3]
 800569a:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <CascadeControl_Step+0xe8>)
 800569c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80056a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005764 <CascadeControl_Step+0xec>)
 80056a6:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 80056aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005758 <CascadeControl_Step+0xe0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa ff16 	bl	80004e0 <__aeabi_f2d>
 80056b4:	a324      	add	r3, pc, #144	@ (adr r3, 8005748 <CascadeControl_Step+0xd0>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa ff69 	bl	8000590 <__aeabi_dmul>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	f7fb fa1d 	bl	8000b04 <__aeabi_d2f>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4a26      	ldr	r2, [pc, #152]	@ (8005768 <CascadeControl_Step+0xf0>)
 80056ce:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 80056d0:	f7ff f89c 	bl	800480c <micros>
 80056d4:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 80056d8:	4b24      	ldr	r3, [pc, #144]	@ (800576c <CascadeControl_Step+0xf4>)
 80056da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e2:	4290      	cmp	r0, r2
 80056e4:	eb71 0303 	sbcs.w	r3, r1, r3
 80056e8:	d301      	bcc.n	80056ee <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e026      	b.n	800573c <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 80056ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f2:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80056f6:	f143 0500 	adc.w	r5, r3, #0
 80056fa:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <CascadeControl_Step+0xf4>)
 80056fc:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 8005700:	f7ff fdb2 	bl	8005268 <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 8005704:	f7ff fe4a 	bl	800539c <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 8005708:	f7ff fbfe 	bl	8004f08 <Workspace_limit>
	Set_Motor(0, R_PWM);
 800570c:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <CascadeControl_Step+0xf8>)
 800570e:	edd3 7a00 	vldr	s15, [r3]
 8005712:	eeb0 0a67 	vmov.f32	s0, s15
 8005716:	2000      	movs	r0, #0
 8005718:	f7ff fb2c 	bl	8004d74 <Set_Motor>
	Set_Motor(1, P_PWM);
 800571c:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <CascadeControl_Step+0xfc>)
 800571e:	edd3 7a00 	vldr	s15, [r3]
 8005722:	eeb0 0a67 	vmov.f32	s0, s15
 8005726:	2001      	movs	r0, #1
 8005728:	f7ff fb24 	bl	8004d74 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 800572c:	f7ff ff46 	bl	80055bc <ToleranceCheck>
 8005730:	4603      	mov	r3, r0
 8005732:	b2da      	uxtb	r2, r3
 8005734:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <CascadeControl_Step+0x100>)
 8005736:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8005738:	4b0f      	ldr	r3, [pc, #60]	@ (8005778 <CascadeControl_Step+0x100>)
 800573a:	781b      	ldrb	r3, [r3, #0]
//	return ToleranceCheck();
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bdb0      	pop	{r4, r5, r7, pc}
 8005744:	f3af 8000 	nop.w
 8005748:	1a63c1f8 	.word	0x1a63c1f8
 800574c:	404ca5dc 	.word	0x404ca5dc
 8005750:	20000bcc 	.word	0x20000bcc
 8005754:	20000b30 	.word	0x20000b30
 8005758:	20000bec 	.word	0x20000bec
 800575c:	20000bd0 	.word	0x20000bd0
 8005760:	20000b70 	.word	0x20000b70
 8005764:	20000bf0 	.word	0x20000bf0
 8005768:	20000ae4 	.word	0x20000ae4
 800576c:	20001470 	.word	0x20001470
 8005770:	20000bfc 	.word	0x20000bfc
 8005774:	20000c00 	.word	0x20000c00
 8005778:	20001360 	.word	0x20001360

0800577c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005780:	b672      	cpsid	i
}
 8005782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <Error_Handler+0x8>

08005788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800578e:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <HAL_MspInit+0x44>)
 8005790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005792:	4a0e      	ldr	r2, [pc, #56]	@ (80057cc <HAL_MspInit+0x44>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6613      	str	r3, [r2, #96]	@ 0x60
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_MspInit+0x44>)
 800579c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <HAL_MspInit+0x44>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	4a08      	ldr	r2, [pc, #32]	@ (80057cc <HAL_MspInit+0x44>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_MspInit+0x44>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80057be:	f001 fa97 	bl	8006cf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000

080057d0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	@ 0x30
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d8:	f107 031c 	add.w	r3, r7, #28
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <HAL_TIM_IC_MspInit+0xe8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d130      	bne.n	8005854 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057f2:	4b32      	ldr	r3, [pc, #200]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	4a31      	ldr	r2, [pc, #196]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 80057f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80057fe:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800580a:	4b2c      	ldr	r3, [pc, #176]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 800580c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580e:	4a2b      	ldr	r2, [pc, #172]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005816:	4b29      	ldr	r3, [pc, #164]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005822:	2302      	movs	r3, #2
 8005824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005826:	2302      	movs	r3, #2
 8005828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800582e:	2300      	movs	r3, #0
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005832:	2302      	movs	r3, #2
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005836:	f107 031c 	add.w	r3, r7, #28
 800583a:	4619      	mov	r1, r3
 800583c:	4820      	ldr	r0, [pc, #128]	@ (80058c0 <HAL_TIM_IC_MspInit+0xf0>)
 800583e:	f000 ffe9 	bl	8006814 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005842:	2200      	movs	r2, #0
 8005844:	2100      	movs	r1, #0
 8005846:	2019      	movs	r0, #25
 8005848:	f000 fc7d 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800584c:	2019      	movs	r0, #25
 800584e:	f000 fc94 	bl	800617a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005852:	e02d      	b.n	80058b0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d128      	bne.n	80058b0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800585e:	4b17      	ldr	r3, [pc, #92]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
 800586a:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005876:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587a:	4a10      	ldr	r2, [pc, #64]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005882:	4b0e      	ldr	r3, [pc, #56]	@ (80058bc <HAL_TIM_IC_MspInit+0xec>)
 8005884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005892:	2302      	movs	r3, #2
 8005894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800589a:	2300      	movs	r3, #0
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800589e:	2301      	movs	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a2:	f107 031c 	add.w	r3, r7, #28
 80058a6:	4619      	mov	r1, r3
 80058a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058ac:	f000 ffb2 	bl	8006814 <HAL_GPIO_Init>
}
 80058b0:	bf00      	nop
 80058b2:	3730      	adds	r7, #48	@ 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40021000 	.word	0x40021000
 80058c0:	48000800 	.word	0x48000800

080058c4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	@ 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 031c 	add.w	r3, r7, #28
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a37      	ldr	r2, [pc, #220]	@ (80059c0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058e6:	4b37      	ldr	r3, [pc, #220]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	4a36      	ldr	r2, [pc, #216]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f2:	4b34      	ldr	r3, [pc, #208]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fe:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005902:	4a30      	ldr	r2, [pc, #192]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800590a:	4b2e      	ldr	r3, [pc, #184]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005916:	2330      	movs	r3, #48	@ 0x30
 8005918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800591a:	2302      	movs	r3, #2
 800591c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005922:	2300      	movs	r3, #0
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005926:	2302      	movs	r3, #2
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592a:	f107 031c 	add.w	r3, r7, #28
 800592e:	4619      	mov	r1, r3
 8005930:	4825      	ldr	r0, [pc, #148]	@ (80059c8 <HAL_TIM_Encoder_MspInit+0x104>)
 8005932:	f000 ff6f 	bl	8006814 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005936:	2200      	movs	r2, #0
 8005938:	2100      	movs	r1, #0
 800593a:	201d      	movs	r0, #29
 800593c:	f000 fc03 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005940:	201d      	movs	r0, #29
 8005942:	f000 fc1a 	bl	800617a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005946:	e036      	b.n	80059b6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1f      	ldr	r2, [pc, #124]	@ (80059cc <HAL_TIM_Encoder_MspInit+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d131      	bne.n	80059b6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005952:	4b1c      	ldr	r3, [pc, #112]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005956:	4a1b      	ldr	r2, [pc, #108]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6593      	str	r3, [r2, #88]	@ 0x58
 800595e:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800596a:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 800596c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005982:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005988:	2302      	movs	r3, #2
 800598a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005990:	2300      	movs	r3, #0
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005994:	230a      	movs	r3, #10
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005998:	f107 031c 	add.w	r3, r7, #28
 800599c:	4619      	mov	r1, r3
 800599e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059a2:	f000 ff37 	bl	8006814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	201e      	movs	r0, #30
 80059ac:	f000 fbcb 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80059b0:	201e      	movs	r0, #30
 80059b2:	f000 fbe2 	bl	800617a <HAL_NVIC_EnableIRQ>
}
 80059b6:	bf00      	nop
 80059b8:	3730      	adds	r7, #48	@ 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40021000 	.word	0x40021000
 80059c8:	48000400 	.word	0x48000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005a90 <HAL_TIM_Base_MspInit+0xc0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d114      	bne.n	8005a0c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80059e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 80059e8:	f043 0308 	orr.w	r3, r3, #8
 80059ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ee:	4b29      	ldr	r3, [pc, #164]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80059fa:	2200      	movs	r2, #0
 80059fc:	2100      	movs	r1, #0
 80059fe:	2032      	movs	r0, #50	@ 0x32
 8005a00:	f000 fba1 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005a04:	2032      	movs	r0, #50	@ 0x32
 8005a06:	f000 fbb8 	bl	800617a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005a0a:	e03c      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <HAL_TIM_Base_MspInit+0xc8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a16:	4b1f      	ldr	r3, [pc, #124]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a22:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	693b      	ldr	r3, [r7, #16]
}
 8005a2e:	e02a      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <HAL_TIM_Base_MspInit+0xcc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005a3a:	4b16      	ldr	r3, [pc, #88]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a46:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	e018      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a11      	ldr	r2, [pc, #68]	@ (8005aa0 <HAL_TIM_Base_MspInit+0xd0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d113      	bne.n	8005a86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a62:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <HAL_TIM_Base_MspInit+0xc4>)
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	2019      	movs	r0, #25
 8005a7c:	f000 fb63 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005a80:	2019      	movs	r0, #25
 8005a82:	f000 fb7a 	bl	800617a <HAL_NVIC_EnableIRQ>
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400

08005aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a23      	ldr	r2, [pc, #140]	@ (8005b50 <HAL_TIM_MspPostInit+0xac>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d11d      	bne.n	8005b02 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ac6:	4b23      	ldr	r3, [pc, #140]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aca:	4a22      	ldr	r2, [pc, #136]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ad2:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aec:	2300      	movs	r3, #0
 8005aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005af0:	2304      	movs	r3, #4
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	4619      	mov	r1, r3
 8005afa:	4817      	ldr	r0, [pc, #92]	@ (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005afc:	f000 fe8a 	bl	8006814 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005b00:	e021      	b.n	8005b46 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a15      	ldr	r2, [pc, #84]	@ (8005b5c <HAL_TIM_MspPostInit+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d11c      	bne.n	8005b46 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b0c:	4b11      	ldr	r3, [pc, #68]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b10:	4a10      	ldr	r2, [pc, #64]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005b12:	f043 0302 	orr.w	r3, r3, #2
 8005b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b18:	4b0e      	ldr	r3, [pc, #56]	@ (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005b36:	2301      	movs	r3, #1
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b3a:	f107 0314 	add.w	r3, r7, #20
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4807      	ldr	r0, [pc, #28]	@ (8005b60 <HAL_TIM_MspPostInit+0xbc>)
 8005b42:	f000 fe67 	bl	8006814 <HAL_GPIO_Init>
}
 8005b46:	bf00      	nop
 8005b48:	3728      	adds	r7, #40	@ 0x28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40013400 	.word	0x40013400
 8005b54:	40021000 	.word	0x40021000
 8005b58:	48000800 	.word	0x48000800
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	48000400 	.word	0x48000400

08005b64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b09e      	sub	sp, #120	@ 0x78
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b7c:	f107 0310 	add.w	r3, r7, #16
 8005b80:	2254      	movs	r2, #84	@ 0x54
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f006 fcc7 	bl	800c518 <memset>
  if(huart->Instance==USART2)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005cc4 <HAL_UART_MspInit+0x160>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	f040 8092 	bne.w	8005cba <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b96:	2302      	movs	r3, #2
 8005b98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b9e:	f107 0310 	add.w	r3, r7, #16
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fde2 	bl	800776c <HAL_RCCEx_PeriphCLKConfig>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005bae:	f7ff fde5 	bl	800577c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bb2:	4b45      	ldr	r3, [pc, #276]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb6:	4a44      	ldr	r2, [pc, #272]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bbe:	4b42      	ldr	r3, [pc, #264]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bca:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bce:	4a3e      	ldr	r2, [pc, #248]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc8 <HAL_UART_MspInit+0x164>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005be2:	230c      	movs	r3, #12
 8005be4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be6:	2302      	movs	r3, #2
 8005be8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bf2:	2307      	movs	r3, #7
 8005bf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c00:	f000 fe08 	bl	8006814 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005c04:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c06:	4a32      	ldr	r2, [pc, #200]	@ (8005cd0 <HAL_UART_MspInit+0x16c>)
 8005c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005c0a:	4b30      	ldr	r3, [pc, #192]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c0c:	221a      	movs	r2, #26
 8005c0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c16:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c1e:	2280      	movs	r2, #128	@ 0x80
 8005c20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c22:	4b2a      	ldr	r3, [pc, #168]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c28:	4b28      	ldr	r3, [pc, #160]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005c2e:	4b27      	ldr	r3, [pc, #156]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c34:	4b25      	ldr	r3, [pc, #148]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c3a:	4824      	ldr	r0, [pc, #144]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c3c:	f000 fab8 	bl	80061b0 <HAL_DMA_Init>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005c46:	f7ff fd99 	bl	800577c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005c52:	4a1e      	ldr	r2, [pc, #120]	@ (8005ccc <HAL_UART_MspInit+0x168>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005c58:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <HAL_UART_MspInit+0x174>)
 8005c5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c60:	221b      	movs	r2, #27
 8005c62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c66:	2210      	movs	r2, #16
 8005c68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c70:	4b18      	ldr	r3, [pc, #96]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c72:	2280      	movs	r2, #128	@ 0x80
 8005c74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c76:	4b17      	ldr	r3, [pc, #92]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c7c:	4b15      	ldr	r3, [pc, #84]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c88:	4b12      	ldr	r3, [pc, #72]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c8e:	4811      	ldr	r0, [pc, #68]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005c90:	f000 fa8e 	bl	80061b0 <HAL_DMA_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005c9a:	f7ff fd6f 	bl	800577c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005ca2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd4 <HAL_UART_MspInit+0x170>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2100      	movs	r1, #0
 8005cae:	2026      	movs	r0, #38	@ 0x26
 8005cb0:	f000 fa49 	bl	8006146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cb4:	2026      	movs	r0, #38	@ 0x26
 8005cb6:	f000 fa60 	bl	800617a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005cba:	bf00      	nop
 8005cbc:	3778      	adds	r7, #120	@ 0x78
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	20000a14 	.word	0x20000a14
 8005cd0:	40020008 	.word	0x40020008
 8005cd4:	20000a74 	.word	0x20000a74
 8005cd8:	4002001c 	.word	0x4002001c

08005cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <NMI_Handler+0x4>

08005ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <HardFault_Handler+0x4>

08005cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <MemManage_Handler+0x4>

08005cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <BusFault_Handler+0x4>

08005cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <UsageFault_Handler+0x4>

08005d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d16:	bf00      	nop
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d32:	f000 f90f 	bl	8005f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f000 ff1a 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d44:	bf00      	nop
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005d4c:	2004      	movs	r0, #4
 8005d4e:	f000 ff13 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005d5a:	2008      	movs	r0, #8
 8005d5c:	f000 ff0c 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005d68:	4802      	ldr	r0, [pc, #8]	@ (8005d74 <DMA1_Channel1_IRQHandler+0x10>)
 8005d6a:	f000 fc04 	bl	8006576 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d6e:	bf00      	nop
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000a14 	.word	0x20000a14

08005d78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005d7c:	4802      	ldr	r0, [pc, #8]	@ (8005d88 <DMA1_Channel2_IRQHandler+0x10>)
 8005d7e:	f000 fbfa 	bl	8006576 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000a74 	.word	0x20000a74

08005d8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005d90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d94:	f000 fef0 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005d98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005d9c:	f000 feec 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005da8:	4803      	ldr	r0, [pc, #12]	@ (8005db8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005daa:	f002 fd99 	bl	80088e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005dae:	4803      	ldr	r0, [pc, #12]	@ (8005dbc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005db0:	f002 fd96 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005db4:	bf00      	nop
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200002e8 	.word	0x200002e8
 8005dbc:	2000087c 	.word	0x2000087c

08005dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005dc4:	4802      	ldr	r0, [pc, #8]	@ (8005dd0 <TIM3_IRQHandler+0x10>)
 8005dc6:	f002 fd8b 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000480 	.word	0x20000480

08005dd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005dd8:	4802      	ldr	r0, [pc, #8]	@ (8005de4 <TIM4_IRQHandler+0x10>)
 8005dda:	f002 fd81 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000054c 	.word	0x2000054c

08005de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005dec:	4802      	ldr	r0, [pc, #8]	@ (8005df8 <USART2_IRQHandler+0x10>)
 8005dee:	f004 fe33 	bl	800aa58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000948 	.word	0x20000948

08005dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005e00:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005e04:	f000 feb8 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005e08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005e0c:	f000 feb4 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005e10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005e14:	f000 feb0 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005e1c:	f000 feac 	bl	8006b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005e20:	bf00      	nop
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005e28:	4802      	ldr	r0, [pc, #8]	@ (8005e34 <TIM5_IRQHandler+0x10>)
 8005e2a:	f002 fd59 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000618 	.word	0x20000618

08005e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005e3c:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <SystemInit+0x20>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	4a05      	ldr	r2, [pc, #20]	@ (8005e58 <SystemInit+0x20>)
 8005e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	e000ed00 	.word	0xe000ed00

08005e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e5c:	480d      	ldr	r0, [pc, #52]	@ (8005e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e60:	f7ff ffea 	bl	8005e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e64:	480c      	ldr	r0, [pc, #48]	@ (8005e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e66:	490d      	ldr	r1, [pc, #52]	@ (8005e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e68:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea0 <LoopForever+0xe>)
  movs r3, #0
 8005e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e6c:	e002      	b.n	8005e74 <LoopCopyDataInit>

08005e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e72:	3304      	adds	r3, #4

08005e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e78:	d3f9      	bcc.n	8005e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8005ea8 <LoopForever+0x16>)
  movs r3, #0
 8005e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e80:	e001      	b.n	8005e86 <LoopFillZerobss>

08005e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e84:	3204      	adds	r2, #4

08005e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e88:	d3fb      	bcc.n	8005e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e8a:	f006 fb53 	bl	800c534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e8e:	f7fb ffbf 	bl	8001e10 <main>

08005e92 <LoopForever>:

LoopForever:
    b LoopForever
 8005e92:	e7fe      	b.n	8005e92 <LoopForever>
  ldr   r0, =_estack
 8005e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e9c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8005ea0:	0801a578 	.word	0x0801a578
  ldr r2, =_sbss
 8005ea4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8005ea8:	200015b4 	.word	0x200015b4

08005eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005eac:	e7fe      	b.n	8005eac <ADC1_2_IRQHandler>

08005eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb8:	2003      	movs	r0, #3
 8005eba:	f000 f939 	bl	8006130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f000 f80e 	bl	8005ee0 <HAL_InitTick>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	71fb      	strb	r3, [r7, #7]
 8005ece:	e001      	b.n	8005ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ed0:	f7ff fc5a 	bl	8005788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005eec:	4b16      	ldr	r3, [pc, #88]	@ (8005f48 <HAL_InitTick+0x68>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d022      	beq.n	8005f3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ef4:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <HAL_InitTick+0x6c>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <HAL_InitTick+0x68>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f944 	bl	8006196 <HAL_SYSTICK_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10f      	bne.n	8005f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d809      	bhi.n	8005f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f22:	f000 f910 	bl	8006146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f26:	4a0a      	ldr	r2, [pc, #40]	@ (8005f50 <HAL_InitTick+0x70>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e007      	b.n	8005f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	e004      	b.n	8005f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e001      	b.n	8005f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000270 	.word	0x20000270
 8005f4c:	20000268 	.word	0x20000268
 8005f50:	2000026c 	.word	0x2000026c

08005f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <HAL_IncTick+0x1c>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_IncTick+0x20>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	4a03      	ldr	r2, [pc, #12]	@ (8005f70 <HAL_IncTick+0x1c>)
 8005f64:	6013      	str	r3, [r2, #0]
}
 8005f66:	bf00      	nop
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20001478 	.word	0x20001478
 8005f74:	20000270 	.word	0x20000270

08005f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <HAL_GetTick+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20001478 	.word	0x20001478

08005f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005fac:	4013      	ands	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fc2:	4a04      	ldr	r2, [pc, #16]	@ (8005fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	60d3      	str	r3, [r2, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fdc:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	0a1b      	lsrs	r3, r3, #8
 8005fe2:	f003 0307 	and.w	r3, r3, #7
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	2b00      	cmp	r3, #0
 8006004:	db0b      	blt.n	800601e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	f003 021f 	and.w	r2, r3, #31
 800600c:	4907      	ldr	r1, [pc, #28]	@ (800602c <__NVIC_EnableIRQ+0x38>)
 800600e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2001      	movs	r0, #1
 8006016:	fa00 f202 	lsl.w	r2, r0, r2
 800601a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000e100 	.word	0xe000e100

08006030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800603c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006040:	2b00      	cmp	r3, #0
 8006042:	db0a      	blt.n	800605a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	490c      	ldr	r1, [pc, #48]	@ (800607c <__NVIC_SetPriority+0x4c>)
 800604a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604e:	0112      	lsls	r2, r2, #4
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	440b      	add	r3, r1
 8006054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006058:	e00a      	b.n	8006070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4908      	ldr	r1, [pc, #32]	@ (8006080 <__NVIC_SetPriority+0x50>)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	3b04      	subs	r3, #4
 8006068:	0112      	lsls	r2, r2, #4
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	440b      	add	r3, r1
 800606e:	761a      	strb	r2, [r3, #24]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	e000e100 	.word	0xe000e100
 8006080:	e000ed00 	.word	0xe000ed00

08006084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	@ 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f1c3 0307 	rsb	r3, r3, #7
 800609e:	2b04      	cmp	r3, #4
 80060a0:	bf28      	it	cs
 80060a2:	2304      	movcs	r3, #4
 80060a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	3304      	adds	r3, #4
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d902      	bls.n	80060b4 <NVIC_EncodePriority+0x30>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3b03      	subs	r3, #3
 80060b2:	e000      	b.n	80060b6 <NVIC_EncodePriority+0x32>
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43da      	mvns	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	401a      	ands	r2, r3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060cc:	f04f 31ff 	mov.w	r1, #4294967295
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	43d9      	mvns	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060dc:	4313      	orrs	r3, r2
         );
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3724      	adds	r7, #36	@ 0x24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060fc:	d301      	bcc.n	8006102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060fe:	2301      	movs	r3, #1
 8006100:	e00f      	b.n	8006122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006102:	4a0a      	ldr	r2, [pc, #40]	@ (800612c <SysTick_Config+0x40>)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3b01      	subs	r3, #1
 8006108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800610a:	210f      	movs	r1, #15
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	f7ff ff8e 	bl	8006030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <SysTick_Config+0x40>)
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800611a:	4b04      	ldr	r3, [pc, #16]	@ (800612c <SysTick_Config+0x40>)
 800611c:	2207      	movs	r2, #7
 800611e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	e000e010 	.word	0xe000e010

08006130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff29 	bl	8005f90 <__NVIC_SetPriorityGrouping>
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	4603      	mov	r3, r0
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006154:	f7ff ff40 	bl	8005fd8 <__NVIC_GetPriorityGrouping>
 8006158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	6978      	ldr	r0, [r7, #20]
 8006160:	f7ff ff90 	bl	8006084 <NVIC_EncodePriority>
 8006164:	4602      	mov	r2, r0
 8006166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff ff5f 	bl	8006030 <__NVIC_SetPriority>
}
 8006172:	bf00      	nop
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	4603      	mov	r3, r0
 8006182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff33 	bl	8005ff4 <__NVIC_EnableIRQ>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ffa4 	bl	80060ec <SysTick_Config>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e08d      	b.n	80062de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b47      	ldr	r3, [pc, #284]	@ (80062e8 <HAL_DMA_Init+0x138>)
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d80f      	bhi.n	80061ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b45      	ldr	r3, [pc, #276]	@ (80062ec <HAL_DMA_Init+0x13c>)
 80061d6:	4413      	add	r3, r2
 80061d8:	4a45      	ldr	r2, [pc, #276]	@ (80062f0 <HAL_DMA_Init+0x140>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	009a      	lsls	r2, r3, #2
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a42      	ldr	r2, [pc, #264]	@ (80062f4 <HAL_DMA_Init+0x144>)
 80061ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80061ec:	e00e      	b.n	800620c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b40      	ldr	r3, [pc, #256]	@ (80062f8 <HAL_DMA_Init+0x148>)
 80061f6:	4413      	add	r3, r2
 80061f8:	4a3d      	ldr	r2, [pc, #244]	@ (80062f0 <HAL_DMA_Init+0x140>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	091b      	lsrs	r3, r3, #4
 8006200:	009a      	lsls	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a3c      	ldr	r2, [pc, #240]	@ (80062fc <HAL_DMA_Init+0x14c>)
 800620a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa76 	bl	8006750 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800626c:	d102      	bne.n	8006274 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006288:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <HAL_DMA_Init+0x104>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d80c      	bhi.n	80062b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa96 	bl	80067cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	e008      	b.n	80062c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40020407 	.word	0x40020407
 80062ec:	bffdfff8 	.word	0xbffdfff8
 80062f0:	cccccccd 	.word	0xcccccccd
 80062f4:	40020000 	.word	0x40020000
 80062f8:	bffdfbf8 	.word	0xbffdfbf8
 80062fc:	40020400 	.word	0x40020400

08006300 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_DMA_Start_IT+0x20>
 800631c:	2302      	movs	r3, #2
 800631e:	e066      	b.n	80063ee <HAL_DMA_Start_IT+0xee>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d155      	bne.n	80063e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f9bb 	bl	80066d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 020e 	orr.w	r2, r2, #14
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e00f      	b.n	8006398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0204 	bic.w	r2, r2, #4
 8006386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 020a 	orr.w	r2, r2, #10
 8006396:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e005      	b.n	80063ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
 80063ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d005      	beq.n	800641a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2204      	movs	r2, #4
 8006412:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e037      	b.n	800648a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 020e 	bic.w	r2, r2, #14
 8006428:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006438:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f003 021f 	and.w	r2, r3, #31
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	2101      	movs	r1, #1
 8006458:	fa01 f202 	lsl.w	r2, r1, r2
 800645c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006466:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800647e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006488:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d00d      	beq.n	80064dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	e047      	b.n	800656c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 020e 	bic.w	r2, r2, #14
 80064ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800650a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006510:	f003 021f 	and.w	r2, r3, #31
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	2101      	movs	r1, #1
 800651a:	fa01 f202 	lsl.w	r2, r1, r2
 800651e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006528:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006540:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800654a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
    }
  }
  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2204      	movs	r2, #4
 8006598:	409a      	lsls	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d026      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x7a>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d021      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0204 	bic.w	r2, r2, #4
 80065c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f003 021f 	and.w	r2, r3, #31
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	2104      	movs	r1, #4
 80065d8:	fa01 f202 	lsl.w	r2, r1, r2
 80065dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d071      	beq.n	80066ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065ee:	e06c      	b.n	80066ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2202      	movs	r2, #2
 80065fa:	409a      	lsls	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02e      	beq.n	8006662 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d029      	beq.n	8006662 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 020a 	bic.w	r2, r2, #10
 800662a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006640:	2102      	movs	r1, #2
 8006642:	fa01 f202 	lsl.w	r2, r1, r2
 8006646:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d038      	beq.n	80066ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006660:	e033      	b.n	80066ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2208      	movs	r2, #8
 800666c:	409a      	lsls	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d02a      	beq.n	80066cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d025      	beq.n	80066cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 020e 	bic.w	r2, r2, #14
 800668e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006694:	f003 021f 	and.w	r2, r3, #31
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669c:	2101      	movs	r1, #1
 800669e:	fa01 f202 	lsl.w	r2, r1, r2
 80066a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
}
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006702:	f003 021f 	and.w	r2, r3, #31
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	2101      	movs	r1, #1
 800670c:	fa01 f202 	lsl.w	r2, r1, r2
 8006710:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b10      	cmp	r3, #16
 8006720:	d108      	bne.n	8006734 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006732:	e007      	b.n	8006744 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	4b16      	ldr	r3, [pc, #88]	@ (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006760:	429a      	cmp	r2, r3
 8006762:	d802      	bhi.n	800676a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e001      	b.n	800676e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800676a:	4b15      	ldr	r3, [pc, #84]	@ (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800676c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	3b08      	subs	r3, #8
 800677a:	4a12      	ldr	r2, [pc, #72]	@ (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	091b      	lsrs	r3, r3, #4
 8006782:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006788:	089b      	lsrs	r3, r3, #2
 800678a:	009a      	lsls	r2, r3, #2
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a0b      	ldr	r2, [pc, #44]	@ (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800679a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2201      	movs	r2, #1
 80067a4:	409a      	lsls	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40020407 	.word	0x40020407
 80067bc:	40020800 	.word	0x40020800
 80067c0:	40020820 	.word	0x40020820
 80067c4:	cccccccd 	.word	0xcccccccd
 80067c8:	40020880 	.word	0x40020880

080067cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	461a      	mov	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a08      	ldr	r2, [pc, #32]	@ (8006810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2201      	movs	r2, #1
 80067fa:	409a      	lsls	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	1000823f 	.word	0x1000823f
 8006810:	40020940 	.word	0x40020940

08006814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006822:	e15a      	b.n	8006ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2101      	movs	r1, #1
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 814c 	beq.w	8006ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d005      	beq.n	8006854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006850:	2b02      	cmp	r3, #2
 8006852:	d130      	bne.n	80068b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	2203      	movs	r2, #3
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43db      	mvns	r3, r3
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4013      	ands	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800688a:	2201      	movs	r2, #1
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43db      	mvns	r3, r3
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4013      	ands	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 0201 	and.w	r2, r3, #1
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d017      	beq.n	80068f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4013      	ands	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d123      	bne.n	8006946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	08da      	lsrs	r2, r3, #3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3208      	adds	r2, #8
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	220f      	movs	r2, #15
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43db      	mvns	r3, r3
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4013      	ands	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	08da      	lsrs	r2, r3, #3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3208      	adds	r2, #8
 8006940:	6939      	ldr	r1, [r7, #16]
 8006942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	2203      	movs	r2, #3
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4013      	ands	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f003 0203 	and.w	r2, r3, #3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80a6 	beq.w	8006ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006988:	4b5b      	ldr	r3, [pc, #364]	@ (8006af8 <HAL_GPIO_Init+0x2e4>)
 800698a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698c:	4a5a      	ldr	r2, [pc, #360]	@ (8006af8 <HAL_GPIO_Init+0x2e4>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6613      	str	r3, [r2, #96]	@ 0x60
 8006994:	4b58      	ldr	r3, [pc, #352]	@ (8006af8 <HAL_GPIO_Init+0x2e4>)
 8006996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069a0:	4a56      	ldr	r2, [pc, #344]	@ (8006afc <HAL_GPIO_Init+0x2e8>)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	3302      	adds	r3, #2
 80069a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	220f      	movs	r2, #15
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4013      	ands	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069ca:	d01f      	beq.n	8006a0c <HAL_GPIO_Init+0x1f8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006b00 <HAL_GPIO_Init+0x2ec>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d019      	beq.n	8006a08 <HAL_GPIO_Init+0x1f4>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a4b      	ldr	r2, [pc, #300]	@ (8006b04 <HAL_GPIO_Init+0x2f0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_GPIO_Init+0x1f0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a4a      	ldr	r2, [pc, #296]	@ (8006b08 <HAL_GPIO_Init+0x2f4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00d      	beq.n	8006a00 <HAL_GPIO_Init+0x1ec>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a49      	ldr	r2, [pc, #292]	@ (8006b0c <HAL_GPIO_Init+0x2f8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <HAL_GPIO_Init+0x1e8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a48      	ldr	r2, [pc, #288]	@ (8006b10 <HAL_GPIO_Init+0x2fc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d101      	bne.n	80069f8 <HAL_GPIO_Init+0x1e4>
 80069f4:	2305      	movs	r3, #5
 80069f6:	e00a      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 80069f8:	2306      	movs	r3, #6
 80069fa:	e008      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 80069fc:	2304      	movs	r3, #4
 80069fe:	e006      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 8006a00:	2303      	movs	r3, #3
 8006a02:	e004      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e002      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <HAL_GPIO_Init+0x1fa>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	f002 0203 	and.w	r2, r2, #3
 8006a14:	0092      	lsls	r2, r2, #2
 8006a16:	4093      	lsls	r3, r2
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a1e:	4937      	ldr	r1, [pc, #220]	@ (8006afc <HAL_GPIO_Init+0x2e8>)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	3302      	adds	r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a2c:	4b39      	ldr	r3, [pc, #228]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a50:	4a30      	ldr	r2, [pc, #192]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a56:	4b2f      	ldr	r3, [pc, #188]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4013      	ands	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a7a:	4a26      	ldr	r2, [pc, #152]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a80:	4b24      	ldr	r3, [pc, #144]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ace:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <HAL_GPIO_Init+0x300>)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f47f ae9d 	bne.w	8006824 <HAL_GPIO_Init+0x10>
  }
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40010000 	.word	0x40010000
 8006b00:	48000400 	.word	0x48000400
 8006b04:	48000800 	.word	0x48000800
 8006b08:	48000c00 	.word	0x48000c00
 8006b0c:	48001000 	.word	0x48001000
 8006b10:	48001400 	.word	0x48001400
 8006b14:	40010400 	.word	0x40010400

08006b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	887b      	ldrh	r3, [r7, #2]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
 8006b34:	e001      	b.n	8006b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	807b      	strh	r3, [r7, #2]
 8006b54:	4613      	mov	r3, r2
 8006b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b58:	787b      	ldrb	r3, [r7, #1]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b64:	e002      	b.n	8006b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b66:	887a      	ldrh	r2, [r7, #2]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b82:	4b08      	ldr	r3, [pc, #32]	@ (8006ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b8e:	4a05      	ldr	r2, [pc, #20]	@ (8006ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fd5a 	bl	8004650 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d141      	bne.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc2:	d131      	bne.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bc4:	4b47      	ldr	r3, [pc, #284]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bca:	4a46      	ldr	r2, [pc, #280]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bd4:	4b43      	ldr	r3, [pc, #268]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bdc:	4a41      	ldr	r2, [pc, #260]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006be4:	4b40      	ldr	r3, [pc, #256]	@ (8006ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2232      	movs	r2, #50	@ 0x32
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	4a3f      	ldr	r2, [pc, #252]	@ (8006cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	0c9b      	lsrs	r3, r3, #18
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bfa:	e002      	b.n	8006c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c02:	4b38      	ldr	r3, [pc, #224]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0e:	d102      	bne.n	8006c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f2      	bne.n	8006bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c16:	4b33      	ldr	r3, [pc, #204]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c22:	d158      	bne.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e057      	b.n	8006cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c28:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c38:	e04d      	b.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c40:	d141      	bne.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c42:	4b28      	ldr	r3, [pc, #160]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c4e:	d131      	bne.n	8006cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c50:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c56:	4a23      	ldr	r2, [pc, #140]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c60:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c68:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2232      	movs	r2, #50	@ 0x32
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	0c9b      	lsrs	r3, r3, #18
 8006c82:	3301      	adds	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c86:	e002      	b.n	8006c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9a:	d102      	bne.n	8006ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f2      	bne.n	8006c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ca2:	4b10      	ldr	r3, [pc, #64]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cae:	d112      	bne.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e011      	b.n	8006cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006cc4:	e007      	b.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cc6:	4b07      	ldr	r3, [pc, #28]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cce:	4a05      	ldr	r2, [pc, #20]	@ (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40007000 	.word	0x40007000
 8006ce8:	20000268 	.word	0x20000268
 8006cec:	431bde83 	.word	0x431bde83

08006cf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	@ (8006d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cfe:	6093      	str	r3, [r2, #8]
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40007000 	.word	0x40007000

08006d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e2fe      	b.n	8007320 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d075      	beq.n	8006e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2e:	4b97      	ldr	r3, [pc, #604]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d38:	4b94      	ldr	r3, [pc, #592]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d102      	bne.n	8006d4e <HAL_RCC_OscConfig+0x3e>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d002      	beq.n	8006d54 <HAL_RCC_OscConfig+0x44>
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d10b      	bne.n	8006d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d54:	4b8d      	ldr	r3, [pc, #564]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d05b      	beq.n	8006e18 <HAL_RCC_OscConfig+0x108>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d157      	bne.n	8006e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e2d9      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d74:	d106      	bne.n	8006d84 <HAL_RCC_OscConfig+0x74>
 8006d76:	4b85      	ldr	r3, [pc, #532]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a84      	ldr	r2, [pc, #528]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e01d      	b.n	8006dc0 <HAL_RCC_OscConfig+0xb0>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0x98>
 8006d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7e      	ldr	r2, [pc, #504]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCC_OscConfig+0xb0>
 8006da8:	4b78      	ldr	r3, [pc, #480]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a77      	ldr	r2, [pc, #476]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4b75      	ldr	r3, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a74      	ldr	r2, [pc, #464]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7ff f8d6 	bl	8005f78 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7ff f8d2 	bl	8005f78 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	@ 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e29e      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0xc0>
 8006dee:	e014      	b.n	8006e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7ff f8c2 	bl	8005f78 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7ff f8be 	bl	8005f78 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	@ 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e28a      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e0a:	4b60      	ldr	r3, [pc, #384]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0xe8>
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d075      	beq.n	8006f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e26:	4b59      	ldr	r3, [pc, #356]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
 8006e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e30:	4b56      	ldr	r3, [pc, #344]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d102      	bne.n	8006e46 <HAL_RCC_OscConfig+0x136>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d002      	beq.n	8006e4c <HAL_RCC_OscConfig+0x13c>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d11f      	bne.n	8006e8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_OscConfig+0x154>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e25d      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e64:	4b49      	ldr	r3, [pc, #292]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	061b      	lsls	r3, r3, #24
 8006e72:	4946      	ldr	r1, [pc, #280]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e78:	4b45      	ldr	r3, [pc, #276]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff f82f 	bl	8005ee0 <HAL_InitTick>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d043      	beq.n	8006f10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e249      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d023      	beq.n	8006edc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e94:	4b3d      	ldr	r3, [pc, #244]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a3c      	ldr	r2, [pc, #240]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7ff f86a 	bl	8005f78 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea8:	f7ff f866 	bl	8005f78 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e232      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eba:	4b34      	ldr	r3, [pc, #208]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec6:	4b31      	ldr	r3, [pc, #196]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	492d      	ldr	r1, [pc, #180]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	604b      	str	r3, [r1, #4]
 8006eda:	e01a      	b.n	8006f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006edc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006ee2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7ff f846 	bl	8005f78 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef0:	f7ff f842 	bl	8005f78 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e20e      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f02:	4b22      	ldr	r3, [pc, #136]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1e0>
 8006f0e:	e000      	b.n	8006f12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d041      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01c      	beq.n	8006f60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f2c:	4a17      	ldr	r2, [pc, #92]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f36:	f7ff f81f 	bl	8005f78 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3e:	f7ff f81b 	bl	8005f78 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e1e7      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f50:	4b0e      	ldr	r3, [pc, #56]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0ef      	beq.n	8006f3e <HAL_RCC_OscConfig+0x22e>
 8006f5e:	e020      	b.n	8006fa2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f60:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f66:	4a09      	ldr	r2, [pc, #36]	@ (8006f8c <HAL_RCC_OscConfig+0x27c>)
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f70:	f7ff f802 	bl	8005f78 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f76:	e00d      	b.n	8006f94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f78:	f7fe fffe 	bl	8005f78 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d906      	bls.n	8006f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e1ca      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	2000026c 	.word	0x2000026c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f94:	4b8c      	ldr	r3, [pc, #560]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8006f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1ea      	bne.n	8006f78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 80a6 	beq.w	80070fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fb4:	4b84      	ldr	r3, [pc, #528]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x2b4>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x2b6>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fca:	4b7f      	ldr	r3, [pc, #508]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fce:	4a7e      	ldr	r2, [pc, #504]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8006fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fe6:	4b79      	ldr	r3, [pc, #484]	@ (80071cc <HAL_RCC_OscConfig+0x4bc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d118      	bne.n	8007024 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ff2:	4b76      	ldr	r3, [pc, #472]	@ (80071cc <HAL_RCC_OscConfig+0x4bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a75      	ldr	r2, [pc, #468]	@ (80071cc <HAL_RCC_OscConfig+0x4bc>)
 8006ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ffe:	f7fe ffbb 	bl	8005f78 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007006:	f7fe ffb7 	bl	8005f78 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e183      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007018:	4b6c      	ldr	r3, [pc, #432]	@ (80071cc <HAL_RCC_OscConfig+0x4bc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d108      	bne.n	800703e <HAL_RCC_OscConfig+0x32e>
 800702c:	4b66      	ldr	r3, [pc, #408]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007032:	4a65      	ldr	r2, [pc, #404]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800703c:	e024      	b.n	8007088 <HAL_RCC_OscConfig+0x378>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b05      	cmp	r3, #5
 8007044:	d110      	bne.n	8007068 <HAL_RCC_OscConfig+0x358>
 8007046:	4b60      	ldr	r3, [pc, #384]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704c:	4a5e      	ldr	r2, [pc, #376]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007056:	4b5c      	ldr	r3, [pc, #368]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705c:	4a5a      	ldr	r2, [pc, #360]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007066:	e00f      	b.n	8007088 <HAL_RCC_OscConfig+0x378>
 8007068:	4b57      	ldr	r3, [pc, #348]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706e:	4a56      	ldr	r2, [pc, #344]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007078:	4b53      	ldr	r3, [pc, #332]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707e:	4a52      	ldr	r2, [pc, #328]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d016      	beq.n	80070be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007090:	f7fe ff72 	bl	8005f78 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007096:	e00a      	b.n	80070ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007098:	f7fe ff6e 	bl	8005f78 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e138      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ae:	4b46      	ldr	r3, [pc, #280]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ed      	beq.n	8007098 <HAL_RCC_OscConfig+0x388>
 80070bc:	e015      	b.n	80070ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070be:	f7fe ff5b 	bl	8005f78 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070c4:	e00a      	b.n	80070dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c6:	f7fe ff57 	bl	8005f78 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e121      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070dc:	4b3a      	ldr	r3, [pc, #232]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ed      	bne.n	80070c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070ea:	7ffb      	ldrb	r3, [r7, #31]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d105      	bne.n	80070fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f0:	4b35      	ldr	r3, [pc, #212]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80070f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f4:	4a34      	ldr	r2, [pc, #208]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80070f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d03c      	beq.n	8007182 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01c      	beq.n	800714a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007110:	4b2d      	ldr	r3, [pc, #180]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007116:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007120:	f7fe ff2a 	bl	8005f78 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007128:	f7fe ff26 	bl	8005f78 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e0f2      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800713a:	4b23      	ldr	r3, [pc, #140]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800713c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0ef      	beq.n	8007128 <HAL_RCC_OscConfig+0x418>
 8007148:	e01b      	b.n	8007182 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800714a:	4b1f      	ldr	r3, [pc, #124]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800714c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007150:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715a:	f7fe ff0d 	bl	8005f78 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007162:	f7fe ff09 	bl	8005f78 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0d5      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007174:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 8007176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1ef      	bne.n	8007162 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80c9 	beq.w	800731e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800718c:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b0c      	cmp	r3, #12
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d15e      	bne.n	8007260 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a2:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a08      	ldr	r2, [pc, #32]	@ (80071c8 <HAL_RCC_OscConfig+0x4b8>)
 80071a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ae:	f7fe fee3 	bl	8005f78 <HAL_GetTick>
 80071b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b4:	e00c      	b.n	80071d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b6:	f7fe fedf 	bl	8005f78 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d905      	bls.n	80071d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0ab      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d0:	4b55      	ldr	r3, [pc, #340]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1ec      	bne.n	80071b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071dc:	4b52      	ldr	r3, [pc, #328]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	4b52      	ldr	r3, [pc, #328]	@ (800732c <HAL_RCC_OscConfig+0x61c>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6a11      	ldr	r1, [r2, #32]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071ec:	3a01      	subs	r2, #1
 80071ee:	0112      	lsls	r2, r2, #4
 80071f0:	4311      	orrs	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80071f6:	0212      	lsls	r2, r2, #8
 80071f8:	4311      	orrs	r1, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071fe:	0852      	lsrs	r2, r2, #1
 8007200:	3a01      	subs	r2, #1
 8007202:	0552      	lsls	r2, r2, #21
 8007204:	4311      	orrs	r1, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800720a:	0852      	lsrs	r2, r2, #1
 800720c:	3a01      	subs	r2, #1
 800720e:	0652      	lsls	r2, r2, #25
 8007210:	4311      	orrs	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007216:	06d2      	lsls	r2, r2, #27
 8007218:	430a      	orrs	r2, r1
 800721a:	4943      	ldr	r1, [pc, #268]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 800721c:	4313      	orrs	r3, r2
 800721e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007220:	4b41      	ldr	r3, [pc, #260]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a40      	ldr	r2, [pc, #256]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800722a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800722c:	4b3e      	ldr	r3, [pc, #248]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a3d      	ldr	r2, [pc, #244]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fe fe9e 	bl	8005f78 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007240:	f7fe fe9a 	bl	8005f78 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e066      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007252:	4b35      	ldr	r3, [pc, #212]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x530>
 800725e:	e05e      	b.n	800731e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007260:	4b31      	ldr	r3, [pc, #196]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a30      	ldr	r2, [pc, #192]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800726a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fe fe84 	bl	8005f78 <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007274:	f7fe fe80 	bl	8005f78 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e04c      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007286:	4b28      	ldr	r3, [pc, #160]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007292:	4b25      	ldr	r3, [pc, #148]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	4924      	ldr	r1, [pc, #144]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 8007298:	4b25      	ldr	r3, [pc, #148]	@ (8007330 <HAL_RCC_OscConfig+0x620>)
 800729a:	4013      	ands	r3, r2
 800729c:	60cb      	str	r3, [r1, #12]
 800729e:	e03e      	b.n	800731e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e039      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80072ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <HAL_RCC_OscConfig+0x618>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f003 0203 	and.w	r2, r3, #3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d12c      	bne.n	800731a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	3b01      	subs	r3, #1
 80072cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d123      	bne.n	800731a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d11b      	bne.n	800731a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d113      	bne.n	800731a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	3b01      	subs	r3, #1
 8007300:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d109      	bne.n	800731a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	3b01      	subs	r3, #1
 8007314:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007316:	429a      	cmp	r2, r3
 8007318:	d001      	beq.n	800731e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40021000 	.word	0x40021000
 800732c:	019f800c 	.word	0x019f800c
 8007330:	feeefffc 	.word	0xfeeefffc

08007334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e11e      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800734c:	4b91      	ldr	r3, [pc, #580]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d910      	bls.n	800737c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735a:	4b8e      	ldr	r3, [pc, #568]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 020f 	bic.w	r2, r3, #15
 8007362:	498c      	ldr	r1, [pc, #560]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b8a      	ldr	r3, [pc, #552]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e106      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d073      	beq.n	8007470 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d129      	bne.n	80073e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007390:	4b81      	ldr	r3, [pc, #516]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0f4      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80073a0:	f000 f99e 	bl	80076e0 <RCC_GetSysClockFreqFromPLLSource>
 80073a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4a7c      	ldr	r2, [pc, #496]	@ (800759c <HAL_RCC_ClockConfig+0x268>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d93f      	bls.n	800742e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d033      	beq.n	800742e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12f      	bne.n	800742e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073ce:	4b72      	ldr	r3, [pc, #456]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073d6:	4a70      	ldr	r2, [pc, #448]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80073d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073de:	2380      	movs	r3, #128	@ 0x80
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	e024      	b.n	800742e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d107      	bne.n	80073fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0c6      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073fc:	4b66      	ldr	r3, [pc, #408]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0be      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800740c:	f000 f8ce 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 8007410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4a61      	ldr	r2, [pc, #388]	@ (800759c <HAL_RCC_ClockConfig+0x268>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d909      	bls.n	800742e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800741a:	4b5f      	ldr	r3, [pc, #380]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007422:	4a5d      	ldr	r2, [pc, #372]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 8007424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007428:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800742a:	2380      	movs	r3, #128	@ 0x80
 800742c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800742e:	4b5a      	ldr	r3, [pc, #360]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f023 0203 	bic.w	r2, r3, #3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	4957      	ldr	r1, [pc, #348]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800743c:	4313      	orrs	r3, r2
 800743e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fe fd9a 	bl	8005f78 <HAL_GetTick>
 8007444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007446:	e00a      	b.n	800745e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007448:	f7fe fd96 	bl	8005f78 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e095      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	4b4e      	ldr	r3, [pc, #312]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 020c 	and.w	r2, r3, #12
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	429a      	cmp	r2, r3
 800746e:	d1eb      	bne.n	8007448 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d023      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007488:	4b43      	ldr	r3, [pc, #268]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a42      	ldr	r2, [pc, #264]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800748e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007492:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80074a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80074a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074b0:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4936      	ldr	r1, [pc, #216]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	608b      	str	r3, [r1, #8]
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b80      	cmp	r3, #128	@ 0x80
 80074c8:	d105      	bne.n	80074d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074ca:	4b33      	ldr	r3, [pc, #204]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	4a32      	ldr	r2, [pc, #200]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 80074d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d21d      	bcs.n	8007520 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f023 020f 	bic.w	r2, r3, #15
 80074ec:	4929      	ldr	r1, [pc, #164]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074f4:	f7fe fd40 	bl	8005f78 <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fa:	e00a      	b.n	8007512 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074fc:	f7fe fd3c 	bl	8005f78 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e03b      	b.n	800758a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	4b20      	ldr	r3, [pc, #128]	@ (8007594 <HAL_RCC_ClockConfig+0x260>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d1ed      	bne.n	80074fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800752c:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4917      	ldr	r1, [pc, #92]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800753a:	4313      	orrs	r3, r2
 800753c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800754a:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	490f      	ldr	r1, [pc, #60]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800755e:	f000 f825 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 8007562:	4602      	mov	r2, r0
 8007564:	4b0c      	ldr	r3, [pc, #48]	@ (8007598 <HAL_RCC_ClockConfig+0x264>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	490c      	ldr	r1, [pc, #48]	@ (80075a0 <HAL_RCC_ClockConfig+0x26c>)
 8007570:	5ccb      	ldrb	r3, [r1, r3]
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	fa22 f303 	lsr.w	r3, r2, r3
 800757a:	4a0a      	ldr	r2, [pc, #40]	@ (80075a4 <HAL_RCC_ClockConfig+0x270>)
 800757c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <HAL_RCC_ClockConfig+0x274>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fcac 	bl	8005ee0 <HAL_InitTick>
 8007588:	4603      	mov	r3, r0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40022000 	.word	0x40022000
 8007598:	40021000 	.word	0x40021000
 800759c:	04c4b400 	.word	0x04c4b400
 80075a0:	0801a120 	.word	0x0801a120
 80075a4:	20000268 	.word	0x20000268
 80075a8:	2000026c 	.word	0x2000026c

080075ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 030c 	and.w	r3, r3, #12
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d102      	bne.n	80075c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075be:	4b2a      	ldr	r3, [pc, #168]	@ (8007668 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	e047      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075c4:	4b27      	ldr	r3, [pc, #156]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 030c 	and.w	r3, r3, #12
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d102      	bne.n	80075d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075d0:	4b26      	ldr	r3, [pc, #152]	@ (800766c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	e03e      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075d6:	4b23      	ldr	r3, [pc, #140]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 030c 	and.w	r3, r3, #12
 80075de:	2b0c      	cmp	r3, #12
 80075e0:	d136      	bne.n	8007650 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075e2:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	3301      	adds	r3, #1
 80075f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d10c      	bne.n	800761a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007600:	4a1a      	ldr	r2, [pc, #104]	@ (800766c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	fbb2 f3f3 	udiv	r3, r2, r3
 8007608:	4a16      	ldr	r2, [pc, #88]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 800760a:	68d2      	ldr	r2, [r2, #12]
 800760c:	0a12      	lsrs	r2, r2, #8
 800760e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007612:	fb02 f303 	mul.w	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
      break;
 8007618:	e00c      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800761a:	4a13      	ldr	r2, [pc, #76]	@ (8007668 <HAL_RCC_GetSysClockFreq+0xbc>)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	4a10      	ldr	r2, [pc, #64]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007624:	68d2      	ldr	r2, [r2, #12]
 8007626:	0a12      	lsrs	r2, r2, #8
 8007628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]
      break;
 8007632:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007634:	4b0b      	ldr	r3, [pc, #44]	@ (8007664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	0e5b      	lsrs	r3, r3, #25
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	3301      	adds	r3, #1
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e001      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007654:	693b      	ldr	r3, [r7, #16]
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40021000 	.word	0x40021000
 8007668:	00f42400 	.word	0x00f42400
 800766c:	016e3600 	.word	0x016e3600

08007670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007674:	4b03      	ldr	r3, [pc, #12]	@ (8007684 <HAL_RCC_GetHCLKFreq+0x14>)
 8007676:	681b      	ldr	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000268 	.word	0x20000268

08007688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800768c:	f7ff fff0 	bl	8007670 <HAL_RCC_GetHCLKFreq>
 8007690:	4602      	mov	r2, r0
 8007692:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	4904      	ldr	r1, [pc, #16]	@ (80076b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800769e:	5ccb      	ldrb	r3, [r1, r3]
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40021000 	.word	0x40021000
 80076b0:	0801a130 	.word	0x0801a130

080076b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076b8:	f7ff ffda 	bl	8007670 <HAL_RCC_GetHCLKFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	0adb      	lsrs	r3, r3, #11
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	4904      	ldr	r1, [pc, #16]	@ (80076dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80076ca:	5ccb      	ldrb	r3, [r1, r3]
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40021000 	.word	0x40021000
 80076dc:	0801a130 	.word	0x0801a130

080076e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	3301      	adds	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d10c      	bne.n	800771e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007704:	4a17      	ldr	r2, [pc, #92]	@ (8007764 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	4a14      	ldr	r2, [pc, #80]	@ (8007760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800770e:	68d2      	ldr	r2, [r2, #12]
 8007710:	0a12      	lsrs	r2, r2, #8
 8007712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	617b      	str	r3, [r7, #20]
    break;
 800771c:	e00c      	b.n	8007738 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800771e:	4a12      	ldr	r2, [pc, #72]	@ (8007768 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	4a0e      	ldr	r2, [pc, #56]	@ (8007760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007728:	68d2      	ldr	r2, [r2, #12]
 800772a:	0a12      	lsrs	r2, r2, #8
 800772c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]
    break;
 8007736:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007738:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	0e5b      	lsrs	r3, r3, #25
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	3301      	adds	r3, #1
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007752:	687b      	ldr	r3, [r7, #4]
}
 8007754:	4618      	mov	r0, r3
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40021000 	.word	0x40021000
 8007764:	016e3600 	.word	0x016e3600
 8007768:	00f42400 	.word	0x00f42400

0800776c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007774:	2300      	movs	r3, #0
 8007776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007778:	2300      	movs	r3, #0
 800777a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8098 	beq.w	80078ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800778a:	2300      	movs	r3, #0
 800778c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800778e:	4b43      	ldr	r3, [pc, #268]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10d      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800779a:	4b40      	ldr	r3, [pc, #256]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	4a3f      	ldr	r2, [pc, #252]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80077a6:	4b3d      	ldr	r3, [pc, #244]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077b2:	2301      	movs	r3, #1
 80077b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077b6:	4b3a      	ldr	r3, [pc, #232]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a39      	ldr	r2, [pc, #228]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077c2:	f7fe fbd9 	bl	8005f78 <HAL_GetTick>
 80077c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077c8:	e009      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ca:	f7fe fbd5 	bl	8005f78 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d902      	bls.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	74fb      	strb	r3, [r7, #19]
        break;
 80077dc:	e005      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077de:	4b30      	ldr	r3, [pc, #192]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ef      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d159      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077f0:	4b2a      	ldr	r3, [pc, #168]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d01e      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	429a      	cmp	r2, r3
 800780a:	d019      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800780c:	4b23      	ldr	r3, [pc, #140]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007818:	4b20      	ldr	r3, [pc, #128]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007828:	4b1c      	ldr	r3, [pc, #112]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782e:	4a1b      	ldr	r2, [pc, #108]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007838:	4a18      	ldr	r2, [pc, #96]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d016      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784a:	f7fe fb95 	bl	8005f78 <HAL_GetTick>
 800784e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007850:	e00b      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007852:	f7fe fb91 	bl	8005f78 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007860:	4293      	cmp	r3, r2
 8007862:	d902      	bls.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	74fb      	strb	r3, [r7, #19]
            break;
 8007868:	e006      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786a:	4b0c      	ldr	r3, [pc, #48]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ec      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007878:	7cfb      	ldrb	r3, [r7, #19]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800787e:	4b07      	ldr	r3, [pc, #28]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	4903      	ldr	r1, [pc, #12]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007894:	e008      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007896:	7cfb      	ldrb	r3, [r7, #19]
 8007898:	74bb      	strb	r3, [r7, #18]
 800789a:	e005      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800789c:	40021000 	.word	0x40021000
 80078a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	7cfb      	ldrb	r3, [r7, #19]
 80078a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078a8:	7c7b      	ldrb	r3, [r7, #17]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d105      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078ae:	4ba7      	ldr	r3, [pc, #668]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b2:	4aa6      	ldr	r2, [pc, #664]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078c6:	4ba1      	ldr	r3, [pc, #644]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078cc:	f023 0203 	bic.w	r2, r3, #3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	499d      	ldr	r1, [pc, #628]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078e8:	4b98      	ldr	r3, [pc, #608]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ee:	f023 020c 	bic.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	4995      	ldr	r1, [pc, #596]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800790a:	4b90      	ldr	r3, [pc, #576]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007910:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	498c      	ldr	r1, [pc, #560]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800792c:	4b87      	ldr	r3, [pc, #540]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	4984      	ldr	r1, [pc, #528]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800794e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007954:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	497b      	ldr	r1, [pc, #492]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795e:	4313      	orrs	r3, r2
 8007960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007970:	4b76      	ldr	r3, [pc, #472]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007976:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	4973      	ldr	r1, [pc, #460]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007992:	4b6e      	ldr	r3, [pc, #440]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007998:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	496a      	ldr	r1, [pc, #424]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079b4:	4b65      	ldr	r3, [pc, #404]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	4962      	ldr	r1, [pc, #392]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079d6:	4b5d      	ldr	r3, [pc, #372]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e4:	4959      	ldr	r1, [pc, #356]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079f8:	4b54      	ldr	r3, [pc, #336]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079fe:	f023 0203 	bic.w	r2, r3, #3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a06:	4951      	ldr	r1, [pc, #324]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	4948      	ldr	r1, [pc, #288]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d015      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a3c:	4b43      	ldr	r3, [pc, #268]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	4940      	ldr	r1, [pc, #256]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a5a:	d105      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	4a3a      	ldr	r2, [pc, #232]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a66:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d015      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a74:	4b35      	ldr	r3, [pc, #212]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a82:	4932      	ldr	r1, [pc, #200]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a92:	d105      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a94:	4b2d      	ldr	r3, [pc, #180]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	4a2c      	ldr	r2, [pc, #176]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a9e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d015      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007aac:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	4924      	ldr	r1, [pc, #144]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aca:	d105      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007acc:	4b1f      	ldr	r3, [pc, #124]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ad6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d015      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ae4:	4b19      	ldr	r3, [pc, #100]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af2:	4916      	ldr	r1, [pc, #88]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b02:	d105      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b04:	4b11      	ldr	r3, [pc, #68]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	4a10      	ldr	r2, [pc, #64]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d019      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2a:	4908      	ldr	r1, [pc, #32]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b3a:	d109      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b3c:	4b03      	ldr	r3, [pc, #12]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4a02      	ldr	r2, [pc, #8]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b46:	60d3      	str	r3, [r2, #12]
 8007b48:	e002      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d015      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b5c:	4b29      	ldr	r3, [pc, #164]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	4926      	ldr	r1, [pc, #152]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b7a:	d105      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b7c:	4b21      	ldr	r3, [pc, #132]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	4a20      	ldr	r2, [pc, #128]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d015      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b94:	4b1b      	ldr	r3, [pc, #108]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba2:	4918      	ldr	r1, [pc, #96]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb2:	d105      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bb4:	4b13      	ldr	r3, [pc, #76]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4a12      	ldr	r2, [pc, #72]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d015      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bda:	490a      	ldr	r1, [pc, #40]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bea:	d105      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4a04      	ldr	r2, [pc, #16]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40021000 	.word	0x40021000

08007c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e054      	b.n	8007cc4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d111      	bne.n	8007c4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f002 fb3c 	bl	800a2ac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a23      	ldr	r2, [pc, #140]	@ (8007ccc <HAL_TIM_Base_Init+0xc4>)
 8007c40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f001 fc7b 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	080059d1 	.word	0x080059d1

08007cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04c      	b.n	8007d82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a26      	ldr	r2, [pc, #152]	@ (8007d90 <HAL_TIM_Base_Start+0xc0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d022      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d02:	d01d      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a22      	ldr	r2, [pc, #136]	@ (8007d94 <HAL_TIM_Base_Start+0xc4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d018      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a21      	ldr	r2, [pc, #132]	@ (8007d98 <HAL_TIM_Base_Start+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d013      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <HAL_TIM_Base_Start+0xcc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00e      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1e      	ldr	r2, [pc, #120]	@ (8007da0 <HAL_TIM_Base_Start+0xd0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d009      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <HAL_TIM_Base_Start+0xd4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <HAL_TIM_Base_Start+0x70>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <HAL_TIM_Base_Start+0xd8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d115      	bne.n	8007d6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <HAL_TIM_Base_Start+0xdc>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d015      	beq.n	8007d7e <HAL_TIM_Base_Start+0xae>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d58:	d011      	beq.n	8007d7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6a:	e008      	b.n	8007d7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e000      	b.n	8007d80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800
 8007d9c:	40000c00 	.word	0x40000c00
 8007da0:	40013400 	.word	0x40013400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40015000 	.word	0x40015000
 8007dac:	00010007 	.word	0x00010007

08007db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d001      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e054      	b.n	8007e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0201 	orr.w	r2, r2, #1
 8007dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a26      	ldr	r2, [pc, #152]	@ (8007e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d022      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d01d      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a22      	ldr	r2, [pc, #136]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d018      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a21      	ldr	r2, [pc, #132]	@ (8007e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	@ (8007e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	@ (8007e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d115      	bne.n	8007e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	4b19      	ldr	r3, [pc, #100]	@ (8007e9c <HAL_TIM_Base_Start_IT+0xec>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d015      	beq.n	8007e6e <HAL_TIM_Base_Start_IT+0xbe>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e48:	d011      	beq.n	8007e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0201 	orr.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5a:	e008      	b.n	8007e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e000      	b.n	8007e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40013400 	.word	0x40013400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40015000 	.word	0x40015000
 8007e9c:	00010007 	.word	0x00010007

08007ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e054      	b.n	8007f5c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d111      	bne.n	8007ee2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f002 f9f0 	bl	800a2ac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a23      	ldr	r2, [pc, #140]	@ (8007f64 <HAL_TIM_PWM_Init+0xc4>)
 8007ed8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f001 fb2f 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	08007f69 	.word	0x08007f69

08007f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d109      	bne.n	8007fa0 <HAL_TIM_PWM_Start+0x24>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e03c      	b.n	800801a <HAL_TIM_PWM_Start+0x9e>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d109      	bne.n	8007fba <HAL_TIM_PWM_Start+0x3e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	bf14      	ite	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	2300      	moveq	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	e02f      	b.n	800801a <HAL_TIM_PWM_Start+0x9e>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d109      	bne.n	8007fd4 <HAL_TIM_PWM_Start+0x58>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	bf14      	ite	ne
 8007fcc:	2301      	movne	r3, #1
 8007fce:	2300      	moveq	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	e022      	b.n	800801a <HAL_TIM_PWM_Start+0x9e>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b0c      	cmp	r3, #12
 8007fd8:	d109      	bne.n	8007fee <HAL_TIM_PWM_Start+0x72>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e015      	b.n	800801a <HAL_TIM_PWM_Start+0x9e>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d109      	bne.n	8008008 <HAL_TIM_PWM_Start+0x8c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	e008      	b.n	800801a <HAL_TIM_PWM_Start+0x9e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e0a6      	b.n	8008170 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_TIM_PWM_Start+0xb6>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008030:	e023      	b.n	800807a <HAL_TIM_PWM_Start+0xfe>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b04      	cmp	r3, #4
 8008036:	d104      	bne.n	8008042 <HAL_TIM_PWM_Start+0xc6>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008040:	e01b      	b.n	800807a <HAL_TIM_PWM_Start+0xfe>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b08      	cmp	r3, #8
 8008046:	d104      	bne.n	8008052 <HAL_TIM_PWM_Start+0xd6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008050:	e013      	b.n	800807a <HAL_TIM_PWM_Start+0xfe>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b0c      	cmp	r3, #12
 8008056:	d104      	bne.n	8008062 <HAL_TIM_PWM_Start+0xe6>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008060:	e00b      	b.n	800807a <HAL_TIM_PWM_Start+0xfe>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b10      	cmp	r3, #16
 8008066:	d104      	bne.n	8008072 <HAL_TIM_PWM_Start+0xf6>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008070:	e003      	b.n	800807a <HAL_TIM_PWM_Start+0xfe>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2201      	movs	r2, #1
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f002 f8ec 	bl	800a260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3a      	ldr	r2, [pc, #232]	@ (8008178 <HAL_TIM_PWM_Start+0x1fc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <HAL_TIM_PWM_Start+0x148>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a39      	ldr	r2, [pc, #228]	@ (800817c <HAL_TIM_PWM_Start+0x200>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d013      	beq.n	80080c4 <HAL_TIM_PWM_Start+0x148>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a37      	ldr	r2, [pc, #220]	@ (8008180 <HAL_TIM_PWM_Start+0x204>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <HAL_TIM_PWM_Start+0x148>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a36      	ldr	r2, [pc, #216]	@ (8008184 <HAL_TIM_PWM_Start+0x208>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_TIM_PWM_Start+0x148>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a34      	ldr	r2, [pc, #208]	@ (8008188 <HAL_TIM_PWM_Start+0x20c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_TIM_PWM_Start+0x148>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a33      	ldr	r2, [pc, #204]	@ (800818c <HAL_TIM_PWM_Start+0x210>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <HAL_TIM_PWM_Start+0x14c>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <HAL_TIM_PWM_Start+0x14e>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a25      	ldr	r2, [pc, #148]	@ (8008178 <HAL_TIM_PWM_Start+0x1fc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d022      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f0:	d01d      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a26      	ldr	r2, [pc, #152]	@ (8008190 <HAL_TIM_PWM_Start+0x214>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d018      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a24      	ldr	r2, [pc, #144]	@ (8008194 <HAL_TIM_PWM_Start+0x218>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a23      	ldr	r2, [pc, #140]	@ (8008198 <HAL_TIM_PWM_Start+0x21c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a19      	ldr	r2, [pc, #100]	@ (800817c <HAL_TIM_PWM_Start+0x200>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a18      	ldr	r2, [pc, #96]	@ (8008180 <HAL_TIM_PWM_Start+0x204>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_TIM_PWM_Start+0x1b2>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a18      	ldr	r2, [pc, #96]	@ (800818c <HAL_TIM_PWM_Start+0x210>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d115      	bne.n	800815a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	4b19      	ldr	r3, [pc, #100]	@ (800819c <HAL_TIM_PWM_Start+0x220>)
 8008136:	4013      	ands	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d015      	beq.n	800816c <HAL_TIM_PWM_Start+0x1f0>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008146:	d011      	beq.n	800816c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	e008      	b.n	800816c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0201 	orr.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e000      	b.n	800816e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40013400 	.word	0x40013400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800
 800818c:	40015000 	.word	0x40015000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	00010007 	.word	0x00010007

080081a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e054      	b.n	800825c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d111      	bne.n	80081e2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f002 f870 	bl	800a2ac <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a23      	ldr	r2, [pc, #140]	@ (8008264 <HAL_TIM_IC_Init+0xc4>)
 80081d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f001 f9af 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	080057d1 	.word	0x080057d1

08008268 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_TIM_IC_Start+0x1a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800827e:	b2db      	uxtb	r3, r3
 8008280:	e023      	b.n	80082ca <HAL_TIM_IC_Start+0x62>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d104      	bne.n	8008292 <HAL_TIM_IC_Start+0x2a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800828e:	b2db      	uxtb	r3, r3
 8008290:	e01b      	b.n	80082ca <HAL_TIM_IC_Start+0x62>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_IC_Start+0x3a>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	e013      	b.n	80082ca <HAL_TIM_IC_Start+0x62>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_IC_Start+0x4a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_IC_Start+0x62>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_IC_Start+0x5a>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	e003      	b.n	80082ca <HAL_TIM_IC_Start+0x62>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <HAL_TIM_IC_Start+0x74>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	e013      	b.n	8008304 <HAL_TIM_IC_Start+0x9c>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d104      	bne.n	80082ec <HAL_TIM_IC_Start+0x84>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e00b      	b.n	8008304 <HAL_TIM_IC_Start+0x9c>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d104      	bne.n	80082fc <HAL_TIM_IC_Start+0x94>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	e003      	b.n	8008304 <HAL_TIM_IC_Start+0x9c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008302:	b2db      	uxtb	r3, r3
 8008304:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d102      	bne.n	8008312 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d001      	beq.n	8008316 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e097      	b.n	8008446 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d104      	bne.n	8008326 <HAL_TIM_IC_Start+0xbe>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008324:	e023      	b.n	800836e <HAL_TIM_IC_Start+0x106>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b04      	cmp	r3, #4
 800832a:	d104      	bne.n	8008336 <HAL_TIM_IC_Start+0xce>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008334:	e01b      	b.n	800836e <HAL_TIM_IC_Start+0x106>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d104      	bne.n	8008346 <HAL_TIM_IC_Start+0xde>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008344:	e013      	b.n	800836e <HAL_TIM_IC_Start+0x106>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b0c      	cmp	r3, #12
 800834a:	d104      	bne.n	8008356 <HAL_TIM_IC_Start+0xee>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008354:	e00b      	b.n	800836e <HAL_TIM_IC_Start+0x106>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b10      	cmp	r3, #16
 800835a:	d104      	bne.n	8008366 <HAL_TIM_IC_Start+0xfe>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008364:	e003      	b.n	800836e <HAL_TIM_IC_Start+0x106>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <HAL_TIM_IC_Start+0x116>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800837c:	e013      	b.n	80083a6 <HAL_TIM_IC_Start+0x13e>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d104      	bne.n	800838e <HAL_TIM_IC_Start+0x126>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800838c:	e00b      	b.n	80083a6 <HAL_TIM_IC_Start+0x13e>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b08      	cmp	r3, #8
 8008392:	d104      	bne.n	800839e <HAL_TIM_IC_Start+0x136>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800839c:	e003      	b.n	80083a6 <HAL_TIM_IC_Start+0x13e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2201      	movs	r2, #1
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 ff56 	bl	800a260 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a25      	ldr	r2, [pc, #148]	@ (8008450 <HAL_TIM_IC_Start+0x1e8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d022      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c6:	d01d      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a21      	ldr	r2, [pc, #132]	@ (8008454 <HAL_TIM_IC_Start+0x1ec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d018      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a20      	ldr	r2, [pc, #128]	@ (8008458 <HAL_TIM_IC_Start+0x1f0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d013      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <HAL_TIM_IC_Start+0x1f4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00e      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008460 <HAL_TIM_IC_Start+0x1f8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d009      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008464 <HAL_TIM_IC_Start+0x1fc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d004      	beq.n	8008404 <HAL_TIM_IC_Start+0x19c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008468 <HAL_TIM_IC_Start+0x200>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d115      	bne.n	8008430 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	4b18      	ldr	r3, [pc, #96]	@ (800846c <HAL_TIM_IC_Start+0x204>)
 800840c:	4013      	ands	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b06      	cmp	r3, #6
 8008414:	d015      	beq.n	8008442 <HAL_TIM_IC_Start+0x1da>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841c:	d011      	beq.n	8008442 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842e:	e008      	b.n	8008442 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e000      	b.n	8008444 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008442:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40015000 	.word	0x40015000
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e04c      	b.n	800851e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d111      	bne.n	80084b4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 ff07 	bl	800a2ac <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008528 <HAL_TIM_OnePulse_Init+0xb8>)
 80084aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f001 f846 	bl	8009558 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0208 	bic.w	r2, r2, #8
 80084da:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	0800852d 	.word	0x0800852d

0800852c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008550:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008558:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008560:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008568:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d108      	bne.n	8008582 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d105      	bne.n	8008582 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008576:	7b7b      	ldrb	r3, [r7, #13]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d102      	bne.n	8008582 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800857c:	7b3b      	ldrb	r3, [r7, #12]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d001      	beq.n	8008586 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e059      	b.n	800863a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0202 	orr.w	r2, r2, #2
 80085b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0204 	orr.w	r2, r2, #4
 80085c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2201      	movs	r2, #1
 80085cc:	2100      	movs	r1, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fe46 	bl	800a260 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2201      	movs	r2, #1
 80085da:	2104      	movs	r1, #4
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fe3f 	bl	800a260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a17      	ldr	r2, [pc, #92]	@ (8008644 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d018      	beq.n	800861e <HAL_TIM_OnePulse_Start_IT+0xde>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a15      	ldr	r2, [pc, #84]	@ (8008648 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d013      	beq.n	800861e <HAL_TIM_OnePulse_Start_IT+0xde>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a14      	ldr	r2, [pc, #80]	@ (800864c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00e      	beq.n	800861e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a12      	ldr	r2, [pc, #72]	@ (8008650 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d009      	beq.n	800861e <HAL_TIM_OnePulse_Start_IT+0xde>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a11      	ldr	r2, [pc, #68]	@ (8008654 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d004      	beq.n	800861e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a0f      	ldr	r2, [pc, #60]	@ (8008658 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d101      	bne.n	8008622 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008636:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800
 8008658:	40015000 	.word	0x40015000

0800865c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0a2      	b.n	80087b6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d111      	bne.n	80086a0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fe11 	bl	800a2ac <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4a      	ldr	r2, [pc, #296]	@ (80087c0 <HAL_TIM_Encoder_Init+0x164>)
 8008696:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80086b6:	f023 0307 	bic.w	r3, r3, #7
 80086ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f000 ff46 	bl	8009558 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	4313      	orrs	r3, r2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008712:	f023 030c 	bic.w	r3, r3, #12
 8008716:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800871e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	4313      	orrs	r3, r2
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	011a      	lsls	r2, r3, #4
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	031b      	lsls	r3, r3, #12
 8008742:	4313      	orrs	r3, r2
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008750:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008758:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	4313      	orrs	r3, r2
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	080058c5 	.word	0x080058c5

080087c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d110      	bne.n	8008816 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d102      	bne.n	8008800 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087fa:	7b7b      	ldrb	r3, [r7, #13]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d001      	beq.n	8008804 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e069      	b.n	80088d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008814:	e031      	b.n	800887a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b04      	cmp	r3, #4
 800881a:	d110      	bne.n	800883e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d102      	bne.n	8008828 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008822:	7b3b      	ldrb	r3, [r7, #12]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d001      	beq.n	800882c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e055      	b.n	80088d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800883c:	e01d      	b.n	800887a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d108      	bne.n	8008856 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d105      	bne.n	8008856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800884a:	7b7b      	ldrb	r3, [r7, #13]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008850:	7b3b      	ldrb	r3, [r7, #12]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d001      	beq.n	800885a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e03e      	b.n	80088d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_TIM_Encoder_Start+0xc4>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b04      	cmp	r3, #4
 8008884:	d008      	beq.n	8008898 <HAL_TIM_Encoder_Start+0xd4>
 8008886:	e00f      	b.n	80088a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2201      	movs	r2, #1
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f001 fce5 	bl	800a260 <TIM_CCxChannelCmd>
      break;
 8008896:	e016      	b.n	80088c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2201      	movs	r2, #1
 800889e:	2104      	movs	r1, #4
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fcdd 	bl	800a260 <TIM_CCxChannelCmd>
      break;
 80088a6:	e00e      	b.n	80088c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2201      	movs	r2, #1
 80088ae:	2100      	movs	r1, #0
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 fcd5 	bl	800a260 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	2104      	movs	r1, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fcce 	bl	800a260 <TIM_CCxChannelCmd>
      break;
 80088c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0201 	orr.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d026      	beq.n	8008950 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d021      	beq.n	8008950 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0202 	mvn.w	r2, #2
 8008914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
 8008934:	e009      	b.n	800894a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d026      	beq.n	80089a8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d021      	beq.n	80089a8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0204 	mvn.w	r2, #4
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
 800898c:	e009      	b.n	80089a2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d026      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d021      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0208 	mvn.w	r2, #8
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2204      	movs	r2, #4
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	e009      	b.n	80089fa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d026      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d021      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f06f 0210 	mvn.w	r2, #16
 8008a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2208      	movs	r2, #8
 8008a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
 8008a3c:	e009      	b.n	8008a52 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00e      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0201 	mvn.w	r2, #1
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00e      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00e      	beq.n	8008ada <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00e      	beq.n	8008b02 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00e      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f06f 0220 	mvn.w	r2, #32
 8008b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00e      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e088      	b.n	8008d02 <HAL_TIM_IC_ConfigChannel+0x130>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d11b      	bne.n	8008c36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c0e:	f001 f961 	bl	8009ed4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 020c 	bic.w	r2, r2, #12
 8008c20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6999      	ldr	r1, [r3, #24]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	619a      	str	r2, [r3, #24]
 8008c34:	e060      	b.n	8008cf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d11c      	bne.n	8008c76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008c4c:	f001 f9e5 	bl	800a01a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6999      	ldr	r1, [r3, #24]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	021a      	lsls	r2, r3, #8
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	619a      	str	r2, [r3, #24]
 8008c74:	e040      	b.n	8008cf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d11b      	bne.n	8008cb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008c8c:	f001 fa32 	bl	800a0f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69da      	ldr	r2, [r3, #28]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 020c 	bic.w	r2, r2, #12
 8008c9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69d9      	ldr	r1, [r3, #28]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	61da      	str	r2, [r3, #28]
 8008cb2:	e021      	b.n	8008cf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b0c      	cmp	r3, #12
 8008cb8:	d11c      	bne.n	8008cf4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008cca:	f001 fa4f 	bl	800a16c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008cdc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69d9      	ldr	r1, [r3, #28]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	61da      	str	r2, [r3, #28]
 8008cf2:	e001      	b.n	8008cf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e0ff      	b.n	8008f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b14      	cmp	r3, #20
 8008d36:	f200 80f0 	bhi.w	8008f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008f1b 	.word	0x08008f1b
 8008d48:	08008f1b 	.word	0x08008f1b
 8008d4c:	08008f1b 	.word	0x08008f1b
 8008d50:	08008dd5 	.word	0x08008dd5
 8008d54:	08008f1b 	.word	0x08008f1b
 8008d58:	08008f1b 	.word	0x08008f1b
 8008d5c:	08008f1b 	.word	0x08008f1b
 8008d60:	08008e17 	.word	0x08008e17
 8008d64:	08008f1b 	.word	0x08008f1b
 8008d68:	08008f1b 	.word	0x08008f1b
 8008d6c:	08008f1b 	.word	0x08008f1b
 8008d70:	08008e57 	.word	0x08008e57
 8008d74:	08008f1b 	.word	0x08008f1b
 8008d78:	08008f1b 	.word	0x08008f1b
 8008d7c:	08008f1b 	.word	0x08008f1b
 8008d80:	08008e99 	.word	0x08008e99
 8008d84:	08008f1b 	.word	0x08008f1b
 8008d88:	08008f1b 	.word	0x08008f1b
 8008d8c:	08008f1b 	.word	0x08008f1b
 8008d90:	08008ed9 	.word	0x08008ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fc90 	bl	80096c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0208 	orr.w	r2, r2, #8
 8008dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0204 	bic.w	r2, r2, #4
 8008dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6999      	ldr	r1, [r3, #24]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	619a      	str	r2, [r3, #24]
      break;
 8008dd2:	e0a5      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd0a 	bl	80097f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6999      	ldr	r1, [r3, #24]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	021a      	lsls	r2, r3, #8
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	619a      	str	r2, [r3, #24]
      break;
 8008e14:	e084      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fd7d 	bl	800991c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69da      	ldr	r2, [r3, #28]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0208 	orr.w	r2, r2, #8
 8008e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0204 	bic.w	r2, r2, #4
 8008e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69d9      	ldr	r1, [r3, #28]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	61da      	str	r2, [r3, #28]
      break;
 8008e54:	e064      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fdef 	bl	8009a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69da      	ldr	r2, [r3, #28]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69d9      	ldr	r1, [r3, #28]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	021a      	lsls	r2, r3, #8
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	61da      	str	r2, [r3, #28]
      break;
 8008e96:	e043      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fe62 	bl	8009b68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0208 	orr.w	r2, r2, #8
 8008eb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0204 	bic.w	r2, r2, #4
 8008ec2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ed6:	e023      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 feac 	bl	8009c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	021a      	lsls	r2, r3, #8
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f18:	e002      	b.n	8008f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop

08008f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIM_ConfigClockSource+0x1c>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e0f6      	b.n	800913e <HAL_TIM_ConfigClockSource+0x20a>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a6f      	ldr	r2, [pc, #444]	@ (8009148 <HAL_TIM_ConfigClockSource+0x214>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	f000 80c1 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008f90:	4a6d      	ldr	r2, [pc, #436]	@ (8009148 <HAL_TIM_ConfigClockSource+0x214>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	f200 80c6 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f98:	4a6c      	ldr	r2, [pc, #432]	@ (800914c <HAL_TIM_ConfigClockSource+0x218>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f000 80b9 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800914c <HAL_TIM_ConfigClockSource+0x218>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	f200 80be 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fa8:	4a69      	ldr	r2, [pc, #420]	@ (8009150 <HAL_TIM_ConfigClockSource+0x21c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	f000 80b1 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008fb0:	4a67      	ldr	r2, [pc, #412]	@ (8009150 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f200 80b6 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb8:	4a66      	ldr	r2, [pc, #408]	@ (8009154 <HAL_TIM_ConfigClockSource+0x220>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	f000 80a9 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008fc0:	4a64      	ldr	r2, [pc, #400]	@ (8009154 <HAL_TIM_ConfigClockSource+0x220>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f200 80ae 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc8:	4a63      	ldr	r2, [pc, #396]	@ (8009158 <HAL_TIM_ConfigClockSource+0x224>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f000 80a1 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008fd0:	4a61      	ldr	r2, [pc, #388]	@ (8009158 <HAL_TIM_ConfigClockSource+0x224>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f200 80a6 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd8:	4a60      	ldr	r2, [pc, #384]	@ (800915c <HAL_TIM_ConfigClockSource+0x228>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f000 8099 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800915c <HAL_TIM_ConfigClockSource+0x228>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f200 809e 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fec:	f000 8091 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ff4:	f200 8096 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ffc:	f000 8089 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8009000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009004:	f200 808e 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800900c:	d03e      	beq.n	800908c <HAL_TIM_ConfigClockSource+0x158>
 800900e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009012:	f200 8087 	bhi.w	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800901a:	f000 8086 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1f6>
 800901e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009022:	d87f      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009024:	2b70      	cmp	r3, #112	@ 0x70
 8009026:	d01a      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x12a>
 8009028:	2b70      	cmp	r3, #112	@ 0x70
 800902a:	d87b      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 800902c:	2b60      	cmp	r3, #96	@ 0x60
 800902e:	d050      	beq.n	80090d2 <HAL_TIM_ConfigClockSource+0x19e>
 8009030:	2b60      	cmp	r3, #96	@ 0x60
 8009032:	d877      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009034:	2b50      	cmp	r3, #80	@ 0x50
 8009036:	d03c      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x17e>
 8009038:	2b50      	cmp	r3, #80	@ 0x50
 800903a:	d873      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 800903c:	2b40      	cmp	r3, #64	@ 0x40
 800903e:	d058      	beq.n	80090f2 <HAL_TIM_ConfigClockSource+0x1be>
 8009040:	2b40      	cmp	r3, #64	@ 0x40
 8009042:	d86f      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009044:	2b30      	cmp	r3, #48	@ 0x30
 8009046:	d064      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8009048:	2b30      	cmp	r3, #48	@ 0x30
 800904a:	d86b      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 800904c:	2b20      	cmp	r3, #32
 800904e:	d060      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8009050:	2b20      	cmp	r3, #32
 8009052:	d867      	bhi.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d05c      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 8009058:	2b10      	cmp	r3, #16
 800905a:	d05a      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x1de>
 800905c:	e062      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800906e:	f001 f8d7 	bl	800a220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	609a      	str	r2, [r3, #8]
      break;
 800908a:	e04f      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800909c:	f001 f8c0 	bl	800a220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090ae:	609a      	str	r2, [r3, #8]
      break;
 80090b0:	e03c      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090be:	461a      	mov	r2, r3
 80090c0:	f000 ff7c 	bl	8009fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2150      	movs	r1, #80	@ 0x50
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 f88b 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 80090d0:	e02c      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090de:	461a      	mov	r2, r3
 80090e0:	f000 ffd8 	bl	800a094 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2160      	movs	r1, #96	@ 0x60
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f87b 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 80090f0:	e01c      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fe:	461a      	mov	r2, r3
 8009100:	f000 ff5c 	bl	8009fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2140      	movs	r1, #64	@ 0x40
 800910a:	4618      	mov	r0, r3
 800910c:	f001 f86b 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009110:	e00c      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f001 f862 	bl	800a1e6 <TIM_ITRx_SetConfig>
      break;
 8009122:	e003      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
      break;
 8009128:	e000      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800912a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	00100070 	.word	0x00100070
 800914c:	00100060 	.word	0x00100060
 8009150:	00100050 	.word	0x00100050
 8009154:	00100040 	.word	0x00100040
 8009158:	00100030 	.word	0x00100030
 800915c:	00100020 	.word	0x00100020

08009160 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009174:	2302      	movs	r3, #2
 8009176:	e031      	b.n	80091dc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fdc2 	bl	8009d14 <TIM_SlaveTimer_SetConfig>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d009      	beq.n	80091aa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e018      	b.n	80091dc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091b8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091c8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	460b      	mov	r3, r1
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e14a      	b.n	800954a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	f040 80dd 	bne.w	800947c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	2b1f      	cmp	r3, #31
 80092c6:	f200 80d6 	bhi.w	8009476 <HAL_TIM_RegisterCallback+0x1de>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <HAL_TIM_RegisterCallback+0x38>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	08009351 	.word	0x08009351
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009361 	.word	0x08009361
 80092dc:	08009369 	.word	0x08009369
 80092e0:	08009371 	.word	0x08009371
 80092e4:	08009379 	.word	0x08009379
 80092e8:	08009381 	.word	0x08009381
 80092ec:	08009389 	.word	0x08009389
 80092f0:	08009391 	.word	0x08009391
 80092f4:	08009399 	.word	0x08009399
 80092f8:	080093a1 	.word	0x080093a1
 80092fc:	080093a9 	.word	0x080093a9
 8009300:	080093b1 	.word	0x080093b1
 8009304:	080093b9 	.word	0x080093b9
 8009308:	080093c3 	.word	0x080093c3
 800930c:	080093cd 	.word	0x080093cd
 8009310:	080093d7 	.word	0x080093d7
 8009314:	080093e1 	.word	0x080093e1
 8009318:	080093eb 	.word	0x080093eb
 800931c:	080093f5 	.word	0x080093f5
 8009320:	080093ff 	.word	0x080093ff
 8009324:	08009409 	.word	0x08009409
 8009328:	08009413 	.word	0x08009413
 800932c:	0800941d 	.word	0x0800941d
 8009330:	08009427 	.word	0x08009427
 8009334:	08009431 	.word	0x08009431
 8009338:	0800943b 	.word	0x0800943b
 800933c:	08009445 	.word	0x08009445
 8009340:	0800944f 	.word	0x0800944f
 8009344:	08009459 	.word	0x08009459
 8009348:	08009463 	.word	0x08009463
 800934c:	0800946d 	.word	0x0800946d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009356:	e0f7      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800935e:	e0f3      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009366:	e0ef      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800936e:	e0eb      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009376:	e0e7      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800937e:	e0e3      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009386:	e0df      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800938e:	e0db      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009396:	e0d7      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800939e:	e0d3      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80093a6:	e0cf      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80093ae:	e0cb      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80093b6:	e0c7      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80093c0:	e0c2      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80093ca:	e0bd      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80093d4:	e0b8      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80093de:	e0b3      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80093e8:	e0ae      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80093f2:	e0a9      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80093fc:	e0a4      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009406:	e09f      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009410:	e09a      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800941a:	e095      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009424:	e090      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800942e:	e08b      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009438:	e086      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009442:	e081      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800944c:	e07c      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009456:	e077      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009460:	e072      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800946a:	e06d      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009474:	e068      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	75fb      	strb	r3, [r7, #23]
        break;
 800947a:	e065      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d15d      	bne.n	8009544 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	2b0d      	cmp	r3, #13
 800948c:	d857      	bhi.n	800953e <HAL_TIM_RegisterCallback+0x2a6>
 800948e:	a201      	add	r2, pc, #4	@ (adr r2, 8009494 <HAL_TIM_RegisterCallback+0x1fc>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094cd 	.word	0x080094cd
 8009498:	080094d5 	.word	0x080094d5
 800949c:	080094dd 	.word	0x080094dd
 80094a0:	080094e5 	.word	0x080094e5
 80094a4:	080094ed 	.word	0x080094ed
 80094a8:	080094f5 	.word	0x080094f5
 80094ac:	080094fd 	.word	0x080094fd
 80094b0:	08009505 	.word	0x08009505
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	08009515 	.word	0x08009515
 80094bc:	0800951d 	.word	0x0800951d
 80094c0:	08009525 	.word	0x08009525
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	08009535 	.word	0x08009535
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80094d2:	e039      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80094da:	e035      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80094e2:	e031      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80094ea:	e02d      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80094f2:	e029      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80094fa:	e025      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009502:	e021      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800950a:	e01d      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009512:	e019      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800951a:	e015      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009522:	e011      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800952a:	e00d      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009532:	e009      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800953c:	e004      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
        break;
 8009542:	e001      	b.n	8009548 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop

08009558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a4c      	ldr	r2, [pc, #304]	@ (800969c <TIM_Base_SetConfig+0x144>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d017      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009576:	d013      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a49      	ldr	r2, [pc, #292]	@ (80096a0 <TIM_Base_SetConfig+0x148>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00f      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a48      	ldr	r2, [pc, #288]	@ (80096a4 <TIM_Base_SetConfig+0x14c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00b      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a47      	ldr	r2, [pc, #284]	@ (80096a8 <TIM_Base_SetConfig+0x150>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d007      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a46      	ldr	r2, [pc, #280]	@ (80096ac <TIM_Base_SetConfig+0x154>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_Base_SetConfig+0x48>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a45      	ldr	r2, [pc, #276]	@ (80096b0 <TIM_Base_SetConfig+0x158>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d108      	bne.n	80095b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a39      	ldr	r2, [pc, #228]	@ (800969c <TIM_Base_SetConfig+0x144>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d023      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c0:	d01f      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a36      	ldr	r2, [pc, #216]	@ (80096a0 <TIM_Base_SetConfig+0x148>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d01b      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a35      	ldr	r2, [pc, #212]	@ (80096a4 <TIM_Base_SetConfig+0x14c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d017      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a34      	ldr	r2, [pc, #208]	@ (80096a8 <TIM_Base_SetConfig+0x150>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d013      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a33      	ldr	r2, [pc, #204]	@ (80096ac <TIM_Base_SetConfig+0x154>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00f      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a33      	ldr	r2, [pc, #204]	@ (80096b4 <TIM_Base_SetConfig+0x15c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00b      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a32      	ldr	r2, [pc, #200]	@ (80096b8 <TIM_Base_SetConfig+0x160>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d007      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a31      	ldr	r2, [pc, #196]	@ (80096bc <TIM_Base_SetConfig+0x164>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d003      	beq.n	8009602 <TIM_Base_SetConfig+0xaa>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2c      	ldr	r2, [pc, #176]	@ (80096b0 <TIM_Base_SetConfig+0x158>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d108      	bne.n	8009614 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a18      	ldr	r2, [pc, #96]	@ (800969c <TIM_Base_SetConfig+0x144>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d013      	beq.n	8009668 <TIM_Base_SetConfig+0x110>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a1a      	ldr	r2, [pc, #104]	@ (80096ac <TIM_Base_SetConfig+0x154>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00f      	beq.n	8009668 <TIM_Base_SetConfig+0x110>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a1a      	ldr	r2, [pc, #104]	@ (80096b4 <TIM_Base_SetConfig+0x15c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d00b      	beq.n	8009668 <TIM_Base_SetConfig+0x110>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a19      	ldr	r2, [pc, #100]	@ (80096b8 <TIM_Base_SetConfig+0x160>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d007      	beq.n	8009668 <TIM_Base_SetConfig+0x110>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a18      	ldr	r2, [pc, #96]	@ (80096bc <TIM_Base_SetConfig+0x164>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_Base_SetConfig+0x110>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a13      	ldr	r2, [pc, #76]	@ (80096b0 <TIM_Base_SetConfig+0x158>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d103      	bne.n	8009670 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b01      	cmp	r3, #1
 8009680:	d105      	bne.n	800968e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	f023 0201 	bic.w	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	611a      	str	r2, [r3, #16]
  }
}
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40012c00 	.word	0x40012c00
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40000c00 	.word	0x40000c00
 80096ac:	40013400 	.word	0x40013400
 80096b0:	40015000 	.word	0x40015000
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40014400 	.word	0x40014400
 80096bc:	40014800 	.word	0x40014800

080096c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	f023 0201 	bic.w	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f023 0302 	bic.w	r3, r3, #2
 800970c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a30      	ldr	r2, [pc, #192]	@ (80097dc <TIM_OC1_SetConfig+0x11c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d013      	beq.n	8009748 <TIM_OC1_SetConfig+0x88>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a2f      	ldr	r2, [pc, #188]	@ (80097e0 <TIM_OC1_SetConfig+0x120>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00f      	beq.n	8009748 <TIM_OC1_SetConfig+0x88>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a2e      	ldr	r2, [pc, #184]	@ (80097e4 <TIM_OC1_SetConfig+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00b      	beq.n	8009748 <TIM_OC1_SetConfig+0x88>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a2d      	ldr	r2, [pc, #180]	@ (80097e8 <TIM_OC1_SetConfig+0x128>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <TIM_OC1_SetConfig+0x88>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a2c      	ldr	r2, [pc, #176]	@ (80097ec <TIM_OC1_SetConfig+0x12c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_OC1_SetConfig+0x88>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a2b      	ldr	r2, [pc, #172]	@ (80097f0 <TIM_OC1_SetConfig+0x130>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d10c      	bne.n	8009762 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f023 0308 	bic.w	r3, r3, #8
 800974e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0304 	bic.w	r3, r3, #4
 8009760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a1d      	ldr	r2, [pc, #116]	@ (80097dc <TIM_OC1_SetConfig+0x11c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d013      	beq.n	8009792 <TIM_OC1_SetConfig+0xd2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a1c      	ldr	r2, [pc, #112]	@ (80097e0 <TIM_OC1_SetConfig+0x120>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00f      	beq.n	8009792 <TIM_OC1_SetConfig+0xd2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a1b      	ldr	r2, [pc, #108]	@ (80097e4 <TIM_OC1_SetConfig+0x124>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00b      	beq.n	8009792 <TIM_OC1_SetConfig+0xd2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a1a      	ldr	r2, [pc, #104]	@ (80097e8 <TIM_OC1_SetConfig+0x128>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d007      	beq.n	8009792 <TIM_OC1_SetConfig+0xd2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a19      	ldr	r2, [pc, #100]	@ (80097ec <TIM_OC1_SetConfig+0x12c>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d003      	beq.n	8009792 <TIM_OC1_SetConfig+0xd2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a18      	ldr	r2, [pc, #96]	@ (80097f0 <TIM_OC1_SetConfig+0x130>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d111      	bne.n	80097b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	621a      	str	r2, [r3, #32]
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	40014000 	.word	0x40014000
 80097e8:	40014400 	.word	0x40014400
 80097ec:	40014800 	.word	0x40014800
 80097f0:	40015000 	.word	0x40015000

080097f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f023 0210 	bic.w	r2, r3, #16
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800982e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	021b      	lsls	r3, r3, #8
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4313      	orrs	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f023 0320 	bic.w	r3, r3, #32
 8009842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a2c      	ldr	r2, [pc, #176]	@ (8009904 <TIM_OC2_SetConfig+0x110>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_OC2_SetConfig+0x74>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a2b      	ldr	r2, [pc, #172]	@ (8009908 <TIM_OC2_SetConfig+0x114>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC2_SetConfig+0x74>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a2a      	ldr	r2, [pc, #168]	@ (800990c <TIM_OC2_SetConfig+0x118>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d10d      	bne.n	8009884 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800986e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a1f      	ldr	r2, [pc, #124]	@ (8009904 <TIM_OC2_SetConfig+0x110>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d013      	beq.n	80098b4 <TIM_OC2_SetConfig+0xc0>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a1e      	ldr	r2, [pc, #120]	@ (8009908 <TIM_OC2_SetConfig+0x114>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00f      	beq.n	80098b4 <TIM_OC2_SetConfig+0xc0>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a1e      	ldr	r2, [pc, #120]	@ (8009910 <TIM_OC2_SetConfig+0x11c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00b      	beq.n	80098b4 <TIM_OC2_SetConfig+0xc0>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a1d      	ldr	r2, [pc, #116]	@ (8009914 <TIM_OC2_SetConfig+0x120>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d007      	beq.n	80098b4 <TIM_OC2_SetConfig+0xc0>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <TIM_OC2_SetConfig+0x124>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d003      	beq.n	80098b4 <TIM_OC2_SetConfig+0xc0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a17      	ldr	r2, [pc, #92]	@ (800990c <TIM_OC2_SetConfig+0x118>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d113      	bne.n	80098dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	621a      	str	r2, [r3, #32]
}
 80098f6:	bf00      	nop
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	40012c00 	.word	0x40012c00
 8009908:	40013400 	.word	0x40013400
 800990c:	40015000 	.word	0x40015000
 8009910:	40014000 	.word	0x40014000
 8009914:	40014400 	.word	0x40014400
 8009918:	40014800 	.word	0x40014800

0800991c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800994a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800994e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2b      	ldr	r2, [pc, #172]	@ (8009a28 <TIM_OC3_SetConfig+0x10c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d007      	beq.n	800998e <TIM_OC3_SetConfig+0x72>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a2a      	ldr	r2, [pc, #168]	@ (8009a2c <TIM_OC3_SetConfig+0x110>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d003      	beq.n	800998e <TIM_OC3_SetConfig+0x72>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a29      	ldr	r2, [pc, #164]	@ (8009a30 <TIM_OC3_SetConfig+0x114>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d10d      	bne.n	80099aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009a28 <TIM_OC3_SetConfig+0x10c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <TIM_OC3_SetConfig+0xbe>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a2c <TIM_OC3_SetConfig+0x110>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00f      	beq.n	80099da <TIM_OC3_SetConfig+0xbe>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009a34 <TIM_OC3_SetConfig+0x118>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00b      	beq.n	80099da <TIM_OC3_SetConfig+0xbe>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a38 <TIM_OC3_SetConfig+0x11c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d007      	beq.n	80099da <TIM_OC3_SetConfig+0xbe>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a1b      	ldr	r2, [pc, #108]	@ (8009a3c <TIM_OC3_SetConfig+0x120>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d003      	beq.n	80099da <TIM_OC3_SetConfig+0xbe>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a16      	ldr	r2, [pc, #88]	@ (8009a30 <TIM_OC3_SetConfig+0x114>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d113      	bne.n	8009a02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	621a      	str	r2, [r3, #32]
}
 8009a1c:	bf00      	nop
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	40012c00 	.word	0x40012c00
 8009a2c:	40013400 	.word	0x40013400
 8009a30:	40015000 	.word	0x40015000
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800

08009a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	031b      	lsls	r3, r3, #12
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b50 <TIM_OC4_SetConfig+0x110>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d007      	beq.n	8009ab4 <TIM_OC4_SetConfig+0x74>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8009b54 <TIM_OC4_SetConfig+0x114>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_OC4_SetConfig+0x74>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a2a      	ldr	r2, [pc, #168]	@ (8009b58 <TIM_OC4_SetConfig+0x118>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d10d      	bne.n	8009ad0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	031b      	lsls	r3, r3, #12
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8009b50 <TIM_OC4_SetConfig+0x110>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d013      	beq.n	8009b00 <TIM_OC4_SetConfig+0xc0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a1e      	ldr	r2, [pc, #120]	@ (8009b54 <TIM_OC4_SetConfig+0x114>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00f      	beq.n	8009b00 <TIM_OC4_SetConfig+0xc0>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b5c <TIM_OC4_SetConfig+0x11c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <TIM_OC4_SetConfig+0xc0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1d      	ldr	r2, [pc, #116]	@ (8009b60 <TIM_OC4_SetConfig+0x120>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <TIM_OC4_SetConfig+0xc0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b64 <TIM_OC4_SetConfig+0x124>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_OC4_SetConfig+0xc0>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a17      	ldr	r2, [pc, #92]	@ (8009b58 <TIM_OC4_SetConfig+0x118>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d113      	bne.n	8009b28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	019b      	lsls	r3, r3, #6
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	019b      	lsls	r3, r3, #6
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	621a      	str	r2, [r3, #32]
}
 8009b42:	bf00      	nop
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40012c00 	.word	0x40012c00
 8009b54:	40013400 	.word	0x40013400
 8009b58:	40015000 	.word	0x40015000
 8009b5c:	40014000 	.word	0x40014000
 8009b60:	40014400 	.word	0x40014400
 8009b64:	40014800 	.word	0x40014800

08009b68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009bac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	@ (8009c24 <TIM_OC5_SetConfig+0xbc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <TIM_OC5_SetConfig+0x82>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a18      	ldr	r2, [pc, #96]	@ (8009c28 <TIM_OC5_SetConfig+0xc0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00f      	beq.n	8009bea <TIM_OC5_SetConfig+0x82>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a17      	ldr	r2, [pc, #92]	@ (8009c2c <TIM_OC5_SetConfig+0xc4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00b      	beq.n	8009bea <TIM_OC5_SetConfig+0x82>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a16      	ldr	r2, [pc, #88]	@ (8009c30 <TIM_OC5_SetConfig+0xc8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d007      	beq.n	8009bea <TIM_OC5_SetConfig+0x82>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a15      	ldr	r2, [pc, #84]	@ (8009c34 <TIM_OC5_SetConfig+0xcc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_OC5_SetConfig+0x82>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a14      	ldr	r2, [pc, #80]	@ (8009c38 <TIM_OC5_SetConfig+0xd0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d109      	bne.n	8009bfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	621a      	str	r2, [r3, #32]
}
 8009c18:	bf00      	nop
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	40012c00 	.word	0x40012c00
 8009c28:	40013400 	.word	0x40013400
 8009c2c:	40014000 	.word	0x40014000
 8009c30:	40014400 	.word	0x40014400
 8009c34:	40014800 	.word	0x40014800
 8009c38:	40015000 	.word	0x40015000

08009c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	051b      	lsls	r3, r3, #20
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1a      	ldr	r2, [pc, #104]	@ (8009cfc <TIM_OC6_SetConfig+0xc0>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d013      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x84>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a19      	ldr	r2, [pc, #100]	@ (8009d00 <TIM_OC6_SetConfig+0xc4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00f      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x84>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a18      	ldr	r2, [pc, #96]	@ (8009d04 <TIM_OC6_SetConfig+0xc8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00b      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x84>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a17      	ldr	r2, [pc, #92]	@ (8009d08 <TIM_OC6_SetConfig+0xcc>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d007      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x84>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a16      	ldr	r2, [pc, #88]	@ (8009d0c <TIM_OC6_SetConfig+0xd0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x84>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a15      	ldr	r2, [pc, #84]	@ (8009d10 <TIM_OC6_SetConfig+0xd4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d109      	bne.n	8009cd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	029b      	lsls	r3, r3, #10
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	621a      	str	r2, [r3, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40012c00 	.word	0x40012c00
 8009d00:	40013400 	.word	0x40013400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800
 8009d10:	40015000 	.word	0x40015000

08009d14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4a56      	ldr	r2, [pc, #344]	@ (8009ebc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	f000 80a2 	beq.w	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009d6a:	4a54      	ldr	r2, [pc, #336]	@ (8009ebc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	f200 809b 	bhi.w	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009d72:	4a53      	ldr	r2, [pc, #332]	@ (8009ec0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f000 809a 	beq.w	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009d7a:	4a51      	ldr	r2, [pc, #324]	@ (8009ec0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	f200 8093 	bhi.w	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009d82:	4a50      	ldr	r2, [pc, #320]	@ (8009ec4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	f000 8092 	beq.w	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009d8a:	4a4e      	ldr	r2, [pc, #312]	@ (8009ec4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	f200 808b 	bhi.w	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009d92:	4a4d      	ldr	r2, [pc, #308]	@ (8009ec8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	f000 808a 	beq.w	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8009ec8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	f200 8083 	bhi.w	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009da2:	4a4a      	ldr	r2, [pc, #296]	@ (8009ecc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	f000 8082 	beq.w	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009daa:	4a48      	ldr	r2, [pc, #288]	@ (8009ecc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d87b      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009db0:	4a47      	ldr	r2, [pc, #284]	@ (8009ed0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d07b      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009db6:	4a46      	ldr	r2, [pc, #280]	@ (8009ed0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d875      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009dbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dc0:	d075      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009dc2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dc6:	d86f      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dcc:	d06f      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd2:	d869      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009dd4:	2b70      	cmp	r3, #112	@ 0x70
 8009dd6:	d01a      	beq.n	8009e0e <TIM_SlaveTimer_SetConfig+0xfa>
 8009dd8:	2b70      	cmp	r3, #112	@ 0x70
 8009dda:	d865      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ddc:	2b60      	cmp	r3, #96	@ 0x60
 8009dde:	d059      	beq.n	8009e94 <TIM_SlaveTimer_SetConfig+0x180>
 8009de0:	2b60      	cmp	r3, #96	@ 0x60
 8009de2:	d861      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009de4:	2b50      	cmp	r3, #80	@ 0x50
 8009de6:	d04b      	beq.n	8009e80 <TIM_SlaveTimer_SetConfig+0x16c>
 8009de8:	2b50      	cmp	r3, #80	@ 0x50
 8009dea:	d85d      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009dec:	2b40      	cmp	r3, #64	@ 0x40
 8009dee:	d019      	beq.n	8009e24 <TIM_SlaveTimer_SetConfig+0x110>
 8009df0:	2b40      	cmp	r3, #64	@ 0x40
 8009df2:	d859      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009df4:	2b30      	cmp	r3, #48	@ 0x30
 8009df6:	d05a      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009df8:	2b30      	cmp	r3, #48	@ 0x30
 8009dfa:	d855      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d056      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d851      	bhi.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d052      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d050      	beq.n	8009eae <TIM_SlaveTimer_SetConfig+0x19a>
 8009e0c:	e04c      	b.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009e1e:	f000 f9ff 	bl	800a220 <TIM_ETR_SetConfig>
      break;
 8009e22:	e045      	b.n	8009eb0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b05      	cmp	r3, #5
 8009e2a:	d004      	beq.n	8009e36 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009e30:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009e34:	d101      	bne.n	8009e3a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e03b      	b.n	8009eb2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6a1a      	ldr	r2, [r3, #32]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0201 	bic.w	r2, r2, #1
 8009e50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e60:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
      break;
 8009e7e:	e017      	b.n	8009eb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f000 f895 	bl	8009fbc <TIM_TI1_ConfigInputStage>
      break;
 8009e92:	e00d      	b.n	8009eb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f000 f8f7 	bl	800a094 <TIM_TI2_ConfigInputStage>
      break;
 8009ea6:	e003      	b.n	8009eb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8009eac:	e000      	b.n	8009eb0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009eae:	bf00      	nop
  }

  return status;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	00100070 	.word	0x00100070
 8009ec0:	00100060 	.word	0x00100060
 8009ec4:	00100050 	.word	0x00100050
 8009ec8:	00100040 	.word	0x00100040
 8009ecc:	00100030 	.word	0x00100030
 8009ed0:	00100020 	.word	0x00100020

08009ed4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	f023 0201 	bic.w	r2, r3, #1
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4a28      	ldr	r2, [pc, #160]	@ (8009fa0 <TIM_TI1_SetConfig+0xcc>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d01b      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f08:	d017      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4a25      	ldr	r2, [pc, #148]	@ (8009fa4 <TIM_TI1_SetConfig+0xd0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d013      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4a24      	ldr	r2, [pc, #144]	@ (8009fa8 <TIM_TI1_SetConfig+0xd4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00f      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4a23      	ldr	r2, [pc, #140]	@ (8009fac <TIM_TI1_SetConfig+0xd8>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00b      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a22      	ldr	r2, [pc, #136]	@ (8009fb0 <TIM_TI1_SetConfig+0xdc>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d007      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4a21      	ldr	r2, [pc, #132]	@ (8009fb4 <TIM_TI1_SetConfig+0xe0>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_TI1_SetConfig+0x66>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4a20      	ldr	r2, [pc, #128]	@ (8009fb8 <TIM_TI1_SetConfig+0xe4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d101      	bne.n	8009f3e <TIM_TI1_SetConfig+0x6a>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <TIM_TI1_SetConfig+0x6c>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e003      	b.n	8009f5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f043 0301 	orr.w	r3, r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f023 030a 	bic.w	r3, r3, #10
 8009f78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f003 030a 	and.w	r3, r3, #10
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	621a      	str	r2, [r3, #32]
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40012c00 	.word	0x40012c00
 8009fa4:	40000400 	.word	0x40000400
 8009fa8:	40000800 	.word	0x40000800
 8009fac:	40000c00 	.word	0x40000c00
 8009fb0:	40013400 	.word	0x40013400
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	40015000 	.word	0x40015000

08009fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f023 0201 	bic.w	r2, r3, #1
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f023 030a 	bic.w	r3, r3, #10
 8009ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	621a      	str	r2, [r3, #32]
}
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f023 0210 	bic.w	r2, r3, #16
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	021b      	lsls	r3, r3, #8
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	031b      	lsls	r3, r3, #12
 800a05e:	b29b      	uxth	r3, r3
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a06c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	621a      	str	r2, [r3, #32]
}
 800a088:	bf00      	nop
 800a08a:	371c      	adds	r7, #28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	f023 0210 	bic.w	r2, r3, #16
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	031b      	lsls	r3, r3, #12
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	621a      	str	r2, [r3, #32]
}
 800a0e8:	bf00      	nop
 800a0ea:	371c      	adds	r7, #28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a130:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	b2db      	uxtb	r3, r3
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a144:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	4313      	orrs	r3, r2
 800a152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	621a      	str	r2, [r3, #32]
}
 800a160:	bf00      	nop
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a198:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	031b      	lsls	r3, r3, #12
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a1be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	031b      	lsls	r3, r3, #12
 800a1c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	621a      	str	r2, [r3, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a1fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	f043 0307 	orr.w	r3, r3, #7
 800a20c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	609a      	str	r2, [r3, #8]
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a23a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	021a      	lsls	r2, r3, #8
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	431a      	orrs	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	609a      	str	r2, [r3, #8]
}
 800a254:	bf00      	nop
 800a256:	371c      	adds	r7, #28
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f003 031f 	and.w	r3, r3, #31
 800a272:	2201      	movs	r2, #1
 800a274:	fa02 f303 	lsl.w	r3, r2, r3
 800a278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a1a      	ldr	r2, [r3, #32]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	43db      	mvns	r3, r3
 800a282:	401a      	ands	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	fa01 f303 	lsl.w	r3, r1, r3
 800a298:	431a      	orrs	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	621a      	str	r2, [r3, #32]
}
 800a29e:	bf00      	nop
 800a2a0:	371c      	adds	r7, #28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
	...

0800a2ac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a26      	ldr	r2, [pc, #152]	@ (800a350 <TIM_ResetCallback+0xa4>)
 800a2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a25      	ldr	r2, [pc, #148]	@ (800a354 <TIM_ResetCallback+0xa8>)
 800a2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a24      	ldr	r2, [pc, #144]	@ (800a358 <TIM_ResetCallback+0xac>)
 800a2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a23      	ldr	r2, [pc, #140]	@ (800a35c <TIM_ResetCallback+0xb0>)
 800a2d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a22      	ldr	r2, [pc, #136]	@ (800a360 <TIM_ResetCallback+0xb4>)
 800a2d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a21      	ldr	r2, [pc, #132]	@ (800a364 <TIM_ResetCallback+0xb8>)
 800a2e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a20      	ldr	r2, [pc, #128]	@ (800a368 <TIM_ResetCallback+0xbc>)
 800a2e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a36c <TIM_ResetCallback+0xc0>)
 800a2f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a370 <TIM_ResetCallback+0xc4>)
 800a2f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a1d      	ldr	r2, [pc, #116]	@ (800a374 <TIM_ResetCallback+0xc8>)
 800a300:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a1c      	ldr	r2, [pc, #112]	@ (800a378 <TIM_ResetCallback+0xcc>)
 800a308:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a1b      	ldr	r2, [pc, #108]	@ (800a37c <TIM_ResetCallback+0xd0>)
 800a310:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a1a      	ldr	r2, [pc, #104]	@ (800a380 <TIM_ResetCallback+0xd4>)
 800a318:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a19      	ldr	r2, [pc, #100]	@ (800a384 <TIM_ResetCallback+0xd8>)
 800a320:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a18      	ldr	r2, [pc, #96]	@ (800a388 <TIM_ResetCallback+0xdc>)
 800a328:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a17      	ldr	r2, [pc, #92]	@ (800a38c <TIM_ResetCallback+0xe0>)
 800a330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a16      	ldr	r2, [pc, #88]	@ (800a390 <TIM_ResetCallback+0xe4>)
 800a338:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a15      	ldr	r2, [pc, #84]	@ (800a394 <TIM_ResetCallback+0xe8>)
 800a340:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	080047d9 	.word	0x080047d9
 800a354:	080091e5 	.word	0x080091e5
 800a358:	0800925d 	.word	0x0800925d
 800a35c:	08009271 	.word	0x08009271
 800a360:	0800920d 	.word	0x0800920d
 800a364:	08009221 	.word	0x08009221
 800a368:	080091f9 	.word	0x080091f9
 800a36c:	08009235 	.word	0x08009235
 800a370:	08009249 	.word	0x08009249
 800a374:	08009285 	.word	0x08009285
 800a378:	0800a5ed 	.word	0x0800a5ed
 800a37c:	0800a601 	.word	0x0800a601
 800a380:	0800a615 	.word	0x0800a615
 800a384:	0800a629 	.word	0x0800a629
 800a388:	0800a63d 	.word	0x0800a63d
 800a38c:	0800a651 	.word	0x0800a651
 800a390:	0800a665 	.word	0x0800a665
 800a394:	0800a679 	.word	0x0800a679

0800a398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d101      	bne.n	800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e074      	b.n	800a49a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a34      	ldr	r2, [pc, #208]	@ (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d009      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a33      	ldr	r2, [pc, #204]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d004      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a31      	ldr	r2, [pc, #196]	@ (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d108      	bne.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a40a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a21      	ldr	r2, [pc, #132]	@ (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d022      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a430:	d01d      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d018      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a1c      	ldr	r2, [pc, #112]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d00e      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a15      	ldr	r2, [pc, #84]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d009      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a18      	ldr	r2, [pc, #96]	@ (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d004      	beq.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a11      	ldr	r2, [pc, #68]	@ (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d10c      	bne.n	800a488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40013400 	.word	0x40013400
 800a4b0:	40015000 	.word	0x40015000
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40014000 	.word	0x40014000

0800a4c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d101      	bne.n	800a4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e078      	b.n	800a5d2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	4313      	orrs	r3, r2
 800a510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	041b      	lsls	r3, r3, #16
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	4313      	orrs	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a1c      	ldr	r2, [pc, #112]	@ (800a5e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d009      	beq.n	800a586 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a1b      	ldr	r2, [pc, #108]	@ (800a5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d004      	beq.n	800a586 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a19      	ldr	r2, [pc, #100]	@ (800a5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d11c      	bne.n	800a5c0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	051b      	lsls	r3, r3, #20
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	40012c00 	.word	0x40012c00
 800a5e4:	40013400 	.word	0x40013400
 800a5e8:	40015000 	.word	0x40015000

0800a5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e050      	b.n	800a740 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d114      	bne.n	800a6d2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fde5 	bl	800b280 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a21      	ldr	r2, [pc, #132]	@ (800a748 <HAL_UART_Init+0xbc>)
 800a6c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2224      	movs	r2, #36	@ 0x24
 800a6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f022 0201 	bic.w	r2, r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f912 	bl	800b91c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fe13 	bl	800b324 <UART_SetConfig>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b01      	cmp	r3, #1
 800a702:	d101      	bne.n	800a708 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e01b      	b.n	800a740 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f991 	bl	800ba60 <UART_CheckIdleState>
 800a73e:	4603      	mov	r3, r0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	08005b65 	.word	0x08005b65

0800a74c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	460b      	mov	r3, r1
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d109      	bne.n	800a778 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a76a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e09c      	b.n	800a8b2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77e:	2b20      	cmp	r3, #32
 800a780:	d16c      	bne.n	800a85c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a782:	7afb      	ldrb	r3, [r7, #11]
 800a784:	2b0c      	cmp	r3, #12
 800a786:	d85e      	bhi.n	800a846 <HAL_UART_RegisterCallback+0xfa>
 800a788:	a201      	add	r2, pc, #4	@ (adr r2, 800a790 <HAL_UART_RegisterCallback+0x44>)
 800a78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a7c5 	.word	0x0800a7c5
 800a794:	0800a7cf 	.word	0x0800a7cf
 800a798:	0800a7d9 	.word	0x0800a7d9
 800a79c:	0800a7e3 	.word	0x0800a7e3
 800a7a0:	0800a7ed 	.word	0x0800a7ed
 800a7a4:	0800a7f7 	.word	0x0800a7f7
 800a7a8:	0800a801 	.word	0x0800a801
 800a7ac:	0800a80b 	.word	0x0800a80b
 800a7b0:	0800a815 	.word	0x0800a815
 800a7b4:	0800a81f 	.word	0x0800a81f
 800a7b8:	0800a829 	.word	0x0800a829
 800a7bc:	0800a833 	.word	0x0800a833
 800a7c0:	0800a83d 	.word	0x0800a83d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a7cc:	e070      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a7d6:	e06b      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a7e0:	e066      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a7ea:	e061      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a7f4:	e05c      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a7fe:	e057      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a808:	e052      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a812:	e04d      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a81c:	e048      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a826:	e043      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a830:	e03e      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a83a:	e039      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a844:	e034      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a84c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	75fb      	strb	r3, [r7, #23]
        break;
 800a85a:	e029      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a862:	2b00      	cmp	r3, #0
 800a864:	d11a      	bne.n	800a89c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	2b0b      	cmp	r3, #11
 800a86a:	d002      	beq.n	800a872 <HAL_UART_RegisterCallback+0x126>
 800a86c:	2b0c      	cmp	r3, #12
 800a86e:	d005      	beq.n	800a87c <HAL_UART_RegisterCallback+0x130>
 800a870:	e009      	b.n	800a886 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a87a:	e019      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a884:	e014      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a88c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	75fb      	strb	r3, [r7, #23]
        break;
 800a89a:	e009      	b.n	800a8b0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop

0800a8c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	@ 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d167      	bne.n	800a9a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <HAL_UART_Transmit_DMA+0x24>
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e060      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	88fa      	ldrh	r2, [r7, #6]
 800a8f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2221      	movs	r2, #33	@ 0x21
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d028      	beq.n	800a968 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a91a:	4a26      	ldr	r2, [pc, #152]	@ (800a9b4 <HAL_UART_Transmit_DMA+0xf4>)
 800a91c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a922:	4a25      	ldr	r2, [pc, #148]	@ (800a9b8 <HAL_UART_Transmit_DMA+0xf8>)
 800a924:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a92a:	4a24      	ldr	r2, [pc, #144]	@ (800a9bc <HAL_UART_Transmit_DMA+0xfc>)
 800a92c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a932:	2200      	movs	r2, #0
 800a934:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93e:	4619      	mov	r1, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3328      	adds	r3, #40	@ 0x28
 800a946:	461a      	mov	r2, r3
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	f7fb fcd9 	bl	8006300 <HAL_DMA_Start_IT>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d009      	beq.n	800a968 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2210      	movs	r2, #16
 800a958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2220      	movs	r2, #32
 800a960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e020      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2240      	movs	r2, #64	@ 0x40
 800a96e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	613b      	str	r3, [r7, #16]
   return(result);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a990:	623a      	str	r2, [r7, #32]
 800a992:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	69f9      	ldr	r1, [r7, #28]
 800a996:	6a3a      	ldr	r2, [r7, #32]
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e5      	bne.n	800a970 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e000      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a9a8:	2302      	movs	r3, #2
  }
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3728      	adds	r7, #40	@ 0x28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800bf2b 	.word	0x0800bf2b
 800a9b8:	0800bfc9 	.word	0x0800bfc9
 800a9bc:	0800c163 	.word	0x0800c163

0800a9c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	@ 0x28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d137      	bne.n	800aa48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <HAL_UART_Receive_DMA+0x24>
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e030      	b.n	800aa4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <HAL_UART_Receive_DMA+0x94>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d01f      	beq.n	800aa38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	613b      	str	r3, [r7, #16]
   return(result);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa24:	623b      	str	r3, [r7, #32]
 800aa26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69f9      	ldr	r1, [r7, #28]
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e6      	bne.n	800aa06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f001 f926 	bl	800bc90 <UART_Start_Receive_DMA>
 800aa44:	4603      	mov	r3, r0
 800aa46:	e000      	b.n	800aa4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa48:	2302      	movs	r3, #2
  }
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3728      	adds	r7, #40	@ 0x28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	40008000 	.word	0x40008000

0800aa58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b0ba      	sub	sp, #232	@ 0xe8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa82:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa86:	4013      	ands	r3, r2
 800aa88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11b      	bne.n	800aacc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d015      	beq.n	800aacc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d105      	bne.n	800aab8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8312 	beq.w	800b0e6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
      }
      return;
 800aaca:	e30c      	b.n	800b0e6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aacc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 8129 	beq.w	800ad28 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aad6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aada:	4b90      	ldr	r3, [pc, #576]	@ (800ad1c <HAL_UART_IRQHandler+0x2c4>)
 800aadc:	4013      	ands	r3, r2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aae6:	4b8e      	ldr	r3, [pc, #568]	@ (800ad20 <HAL_UART_IRQHandler+0x2c8>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 811c 	beq.w	800ad28 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d011      	beq.n	800ab20 <HAL_UART_IRQHandler+0xc8>
 800aafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab16:	f043 0201 	orr.w	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d011      	beq.n	800ab50 <HAL_UART_IRQHandler+0xf8>
 800ab2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab46:	f043 0204 	orr.w	r2, r3, #4
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d011      	beq.n	800ab80 <HAL_UART_IRQHandler+0x128>
 800ab5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2204      	movs	r2, #4
 800ab6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab76:	f043 0202 	orr.w	r2, r3, #2
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d017      	beq.n	800abbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab9c:	4b5f      	ldr	r3, [pc, #380]	@ (800ad1c <HAL_UART_IRQHandler+0x2c4>)
 800ab9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2208      	movs	r2, #8
 800abaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb2:	f043 0208 	orr.w	r2, r3, #8
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <HAL_UART_IRQHandler+0x196>
 800abc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00c      	beq.n	800abee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe4:	f043 0220 	orr.w	r2, r3, #32
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8278 	beq.w	800b0ea <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d105      	bne.n	800ac1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d005      	beq.n	800ac52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d058      	beq.n	800ad04 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f001 f903 	bl	800be5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac62:	2b40      	cmp	r3, #64	@ 0x40
 800ac64:	d148      	bne.n	800acf8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1d9      	bne.n	800ac66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d017      	beq.n	800acec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc2:	4a18      	ldr	r2, [pc, #96]	@ (800ad24 <HAL_UART_IRQHandler+0x2cc>)
 800acc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800accc:	4618      	mov	r0, r3
 800acce:	f7fb fbeb 	bl	80064a8 <HAL_DMA_Abort_IT>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01f      	beq.n	800ad18 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acea:	e015      	b.n	800ad18 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf6:	e00f      	b.n	800ad18 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad02:	e009      	b.n	800ad18 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ad16:	e1e8      	b.n	800b0ea <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad18:	bf00      	nop
    return;
 800ad1a:	e1e6      	b.n	800b0ea <HAL_UART_IRQHandler+0x692>
 800ad1c:	10000001 	.word	0x10000001
 800ad20:	04000120 	.word	0x04000120
 800ad24:	0800c1e7 	.word	0x0800c1e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	f040 8176 	bne.w	800b01e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad36:	f003 0310 	and.w	r3, r3, #16
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 816f 	beq.w	800b01e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad44:	f003 0310 	and.w	r3, r3, #16
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 8168 	beq.w	800b01e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2210      	movs	r2, #16
 800ad54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad60:	2b40      	cmp	r3, #64	@ 0x40
 800ad62:	f040 80dc 	bne.w	800af1e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80b1 	beq.w	800aee0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	f080 80a9 	bcs.w	800aee0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f040 8087 	bne.w	800aeba <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800adc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800adc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800add6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ade2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800adee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1da      	bne.n	800adac <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3308      	adds	r3, #8
 800ae16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ae1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e1      	bne.n	800adf6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3308      	adds	r3, #8
 800ae38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae3c:	e853 3f00 	ldrex	r3, [r3]
 800ae40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3308      	adds	r3, #8
 800ae52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e3      	bne.n	800ae32 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae88:	f023 0310 	bic.w	r3, r3, #16
 800ae8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e4      	bne.n	800ae78 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fb fa9e 	bl	80063f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2202      	movs	r2, #2
 800aebe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800aed2:	b292      	uxth	r2, r2
 800aed4:	1a8a      	subs	r2, r1, r2
 800aed6:	b292      	uxth	r2, r2
 800aed8:	4611      	mov	r1, r2
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aede:	e106      	b.n	800b0ee <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aeea:	429a      	cmp	r2, r3
 800aeec:	f040 80ff 	bne.w	800b0ee <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b20      	cmp	r3, #32
 800af00:	f040 80f5 	bne.w	800b0ee <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800af16:	4611      	mov	r1, r2
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4798      	blx	r3
      return;
 800af1c:	e0e7      	b.n	800b0ee <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af38:	b29b      	uxth	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 80d9 	beq.w	800b0f2 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800af40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80d4 	beq.w	800b0f2 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e4      	bne.n	800af4a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3308      	adds	r3, #8
 800af86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	623b      	str	r3, [r7, #32]
   return(result);
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800afa8:	633a      	str	r2, [r7, #48]	@ 0x30
 800afaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e1      	bne.n	800af80 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f023 0310 	bic.w	r3, r3, #16
 800afe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	69b9      	ldr	r1, [r7, #24]
 800aff8:	69fa      	ldr	r2, [r7, #28]
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	617b      	str	r3, [r7, #20]
   return(result);
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e4      	bne.n	800afd0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2202      	movs	r2, #2
 800b00a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b012:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b016:	4611      	mov	r1, r2
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b01c:	e069      	b.n	800b0f2 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <HAL_UART_IRQHandler+0x5f4>
 800b02a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b02e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b03e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b04a:	e055      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b054:	2b00      	cmp	r3, #0
 800b056:	d014      	beq.n	800b082 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b05c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d008      	beq.n	800b082 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b074:	2b00      	cmp	r3, #0
 800b076:	d03e      	beq.n	800b0f6 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	4798      	blx	r3
    }
    return;
 800b080:	e039      	b.n	800b0f6 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x64a>
 800b08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 f8b7 	bl	800c20e <UART_EndTransmit_IT>
    return;
 800b0a0:	e02a      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00b      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x66e>
 800b0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d005      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0c4:	e018      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d012      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da0e      	bge.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0e4:	e008      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0e6:	bf00      	nop
 800b0e8:	e006      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b0ea:	bf00      	nop
 800b0ec:	e004      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0ee:	bf00      	nop
 800b0f0:	e002      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0f2:	bf00      	nop
 800b0f4:	e000      	b.n	800b0f8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b0f6:	bf00      	nop
  }
}
 800b0f8:	37e8      	adds	r7, #232	@ 0xe8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop

0800b100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a09      	ldr	r2, [pc, #36]	@ (800b1ec <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d009      	beq.n	800b1e0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	615a      	str	r2, [r3, #20]
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	40008000 	.word	0x40008000

0800b1f0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a18      	ldr	r2, [pc, #96]	@ (800b260 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d027      	beq.n	800b252 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d120      	bne.n	800b24e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b212:	2b01      	cmp	r3, #1
 800b214:	d101      	bne.n	800b21a <HAL_UART_EnableReceiverTimeout+0x2a>
 800b216:	2302      	movs	r3, #2
 800b218:	e01c      	b.n	800b254 <HAL_UART_EnableReceiverTimeout+0x64>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2224      	movs	r2, #36	@ 0x24
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b238:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e002      	b.n	800b254 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b24e:	2302      	movs	r3, #2
 800b250:	e000      	b.n	800b254 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
  }
}
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	40008000 	.word	0x40008000

0800b264 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
	...

0800b280 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a1a      	ldr	r2, [pc, #104]	@ (800b2f4 <UART_InitCallbacksToDefault+0x74>)
 800b28c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a19      	ldr	r2, [pc, #100]	@ (800b2f8 <UART_InitCallbacksToDefault+0x78>)
 800b294:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a18      	ldr	r2, [pc, #96]	@ (800b2fc <UART_InitCallbacksToDefault+0x7c>)
 800b29c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a17      	ldr	r2, [pc, #92]	@ (800b300 <UART_InitCallbacksToDefault+0x80>)
 800b2a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a16      	ldr	r2, [pc, #88]	@ (800b304 <UART_InitCallbacksToDefault+0x84>)
 800b2ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a15      	ldr	r2, [pc, #84]	@ (800b308 <UART_InitCallbacksToDefault+0x88>)
 800b2b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a14      	ldr	r2, [pc, #80]	@ (800b30c <UART_InitCallbacksToDefault+0x8c>)
 800b2bc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a13      	ldr	r2, [pc, #76]	@ (800b310 <UART_InitCallbacksToDefault+0x90>)
 800b2c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a12      	ldr	r2, [pc, #72]	@ (800b314 <UART_InitCallbacksToDefault+0x94>)
 800b2cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a11      	ldr	r2, [pc, #68]	@ (800b318 <UART_InitCallbacksToDefault+0x98>)
 800b2d4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a10      	ldr	r2, [pc, #64]	@ (800b31c <UART_InitCallbacksToDefault+0x9c>)
 800b2dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a0f      	ldr	r2, [pc, #60]	@ (800b320 <UART_InitCallbacksToDefault+0xa0>)
 800b2e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	0800b115 	.word	0x0800b115
 800b2f8:	0800b101 	.word	0x0800b101
 800b2fc:	0800b13d 	.word	0x0800b13d
 800b300:	0800b129 	.word	0x0800b129
 800b304:	0800b151 	.word	0x0800b151
 800b308:	0800b165 	.word	0x0800b165
 800b30c:	0800b179 	.word	0x0800b179
 800b310:	0800b18d 	.word	0x0800b18d
 800b314:	0800c269 	.word	0x0800c269
 800b318:	0800c27d 	.word	0x0800c27d
 800b31c:	0800c291 	.word	0x0800c291
 800b320:	0800b1a1 	.word	0x0800b1a1

0800b324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b328:	b08c      	sub	sp, #48	@ 0x30
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	689a      	ldr	r2, [r3, #8]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	431a      	orrs	r2, r3
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	431a      	orrs	r2, r3
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	4313      	orrs	r3, r2
 800b34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4baa      	ldr	r3, [pc, #680]	@ (800b5fc <UART_SetConfig+0x2d8>)
 800b354:	4013      	ands	r3, r2
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b35c:	430b      	orrs	r3, r1
 800b35e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a9f      	ldr	r2, [pc, #636]	@ (800b600 <UART_SetConfig+0x2dc>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b38c:	4313      	orrs	r3, r2
 800b38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b39a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	6812      	ldr	r2, [r2, #0]
 800b3a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	f023 010f 	bic.w	r1, r3, #15
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	430a      	orrs	r2, r1
 800b3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a90      	ldr	r2, [pc, #576]	@ (800b604 <UART_SetConfig+0x2e0>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d125      	bne.n	800b414 <UART_SetConfig+0xf0>
 800b3c8:	4b8f      	ldr	r3, [pc, #572]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d81a      	bhi.n	800b40c <UART_SetConfig+0xe8>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <UART_SetConfig+0xb8>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b3fd 	.word	0x0800b3fd
 800b3e4:	0800b3f5 	.word	0x0800b3f5
 800b3e8:	0800b405 	.word	0x0800b405
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3f2:	e116      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3fa:	e112      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b402:	e10e      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b404:	2308      	movs	r3, #8
 800b406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b40a:	e10a      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b40c:	2310      	movs	r3, #16
 800b40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b412:	e106      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a7c      	ldr	r2, [pc, #496]	@ (800b60c <UART_SetConfig+0x2e8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d138      	bne.n	800b490 <UART_SetConfig+0x16c>
 800b41e:	4b7a      	ldr	r3, [pc, #488]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b424:	f003 030c 	and.w	r3, r3, #12
 800b428:	2b0c      	cmp	r3, #12
 800b42a:	d82d      	bhi.n	800b488 <UART_SetConfig+0x164>
 800b42c:	a201      	add	r2, pc, #4	@ (adr r2, 800b434 <UART_SetConfig+0x110>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b469 	.word	0x0800b469
 800b438:	0800b489 	.word	0x0800b489
 800b43c:	0800b489 	.word	0x0800b489
 800b440:	0800b489 	.word	0x0800b489
 800b444:	0800b479 	.word	0x0800b479
 800b448:	0800b489 	.word	0x0800b489
 800b44c:	0800b489 	.word	0x0800b489
 800b450:	0800b489 	.word	0x0800b489
 800b454:	0800b471 	.word	0x0800b471
 800b458:	0800b489 	.word	0x0800b489
 800b45c:	0800b489 	.word	0x0800b489
 800b460:	0800b489 	.word	0x0800b489
 800b464:	0800b481 	.word	0x0800b481
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b46e:	e0d8      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b470:	2302      	movs	r3, #2
 800b472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b476:	e0d4      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b478:	2304      	movs	r3, #4
 800b47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b47e:	e0d0      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b480:	2308      	movs	r3, #8
 800b482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b486:	e0cc      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b488:	2310      	movs	r3, #16
 800b48a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48e:	e0c8      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a5e      	ldr	r2, [pc, #376]	@ (800b610 <UART_SetConfig+0x2ec>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d125      	bne.n	800b4e6 <UART_SetConfig+0x1c2>
 800b49a:	4b5b      	ldr	r3, [pc, #364]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b4a4:	2b30      	cmp	r3, #48	@ 0x30
 800b4a6:	d016      	beq.n	800b4d6 <UART_SetConfig+0x1b2>
 800b4a8:	2b30      	cmp	r3, #48	@ 0x30
 800b4aa:	d818      	bhi.n	800b4de <UART_SetConfig+0x1ba>
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d00a      	beq.n	800b4c6 <UART_SetConfig+0x1a2>
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d814      	bhi.n	800b4de <UART_SetConfig+0x1ba>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <UART_SetConfig+0x19a>
 800b4b8:	2b10      	cmp	r3, #16
 800b4ba:	d008      	beq.n	800b4ce <UART_SetConfig+0x1aa>
 800b4bc:	e00f      	b.n	800b4de <UART_SetConfig+0x1ba>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4c4:	e0ad      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4cc:	e0a9      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d4:	e0a5      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b4d6:	2308      	movs	r3, #8
 800b4d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4dc:	e0a1      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b4de:	2310      	movs	r3, #16
 800b4e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e4:	e09d      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a4a      	ldr	r2, [pc, #296]	@ (800b614 <UART_SetConfig+0x2f0>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d125      	bne.n	800b53c <UART_SetConfig+0x218>
 800b4f0:	4b45      	ldr	r3, [pc, #276]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4fc:	d016      	beq.n	800b52c <UART_SetConfig+0x208>
 800b4fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800b500:	d818      	bhi.n	800b534 <UART_SetConfig+0x210>
 800b502:	2b80      	cmp	r3, #128	@ 0x80
 800b504:	d00a      	beq.n	800b51c <UART_SetConfig+0x1f8>
 800b506:	2b80      	cmp	r3, #128	@ 0x80
 800b508:	d814      	bhi.n	800b534 <UART_SetConfig+0x210>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <UART_SetConfig+0x1f0>
 800b50e:	2b40      	cmp	r3, #64	@ 0x40
 800b510:	d008      	beq.n	800b524 <UART_SetConfig+0x200>
 800b512:	e00f      	b.n	800b534 <UART_SetConfig+0x210>
 800b514:	2300      	movs	r3, #0
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51a:	e082      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b51c:	2302      	movs	r3, #2
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b522:	e07e      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b524:	2304      	movs	r3, #4
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e07a      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b52c:	2308      	movs	r3, #8
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e076      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b534:	2310      	movs	r3, #16
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e072      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a35      	ldr	r2, [pc, #212]	@ (800b618 <UART_SetConfig+0x2f4>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d12a      	bne.n	800b59c <UART_SetConfig+0x278>
 800b546:	4b30      	ldr	r3, [pc, #192]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b554:	d01a      	beq.n	800b58c <UART_SetConfig+0x268>
 800b556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b55a:	d81b      	bhi.n	800b594 <UART_SetConfig+0x270>
 800b55c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b560:	d00c      	beq.n	800b57c <UART_SetConfig+0x258>
 800b562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b566:	d815      	bhi.n	800b594 <UART_SetConfig+0x270>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <UART_SetConfig+0x250>
 800b56c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b570:	d008      	beq.n	800b584 <UART_SetConfig+0x260>
 800b572:	e00f      	b.n	800b594 <UART_SetConfig+0x270>
 800b574:	2300      	movs	r3, #0
 800b576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57a:	e052      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b57c:	2302      	movs	r3, #2
 800b57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b582:	e04e      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b584:	2304      	movs	r3, #4
 800b586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b58a:	e04a      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b58c:	2308      	movs	r3, #8
 800b58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b592:	e046      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b594:	2310      	movs	r3, #16
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59a:	e042      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a17      	ldr	r2, [pc, #92]	@ (800b600 <UART_SetConfig+0x2dc>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d13a      	bne.n	800b61c <UART_SetConfig+0x2f8>
 800b5a6:	4b18      	ldr	r3, [pc, #96]	@ (800b608 <UART_SetConfig+0x2e4>)
 800b5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b5b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5b4:	d01a      	beq.n	800b5ec <UART_SetConfig+0x2c8>
 800b5b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5ba:	d81b      	bhi.n	800b5f4 <UART_SetConfig+0x2d0>
 800b5bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c0:	d00c      	beq.n	800b5dc <UART_SetConfig+0x2b8>
 800b5c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c6:	d815      	bhi.n	800b5f4 <UART_SetConfig+0x2d0>
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <UART_SetConfig+0x2b0>
 800b5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5d0:	d008      	beq.n	800b5e4 <UART_SetConfig+0x2c0>
 800b5d2:	e00f      	b.n	800b5f4 <UART_SetConfig+0x2d0>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5da:	e022      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5e2:	e01e      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ea:	e01a      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b5ec:	2308      	movs	r3, #8
 800b5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f2:	e016      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5fa:	e012      	b.n	800b622 <UART_SetConfig+0x2fe>
 800b5fc:	cfff69f3 	.word	0xcfff69f3
 800b600:	40008000 	.word	0x40008000
 800b604:	40013800 	.word	0x40013800
 800b608:	40021000 	.word	0x40021000
 800b60c:	40004400 	.word	0x40004400
 800b610:	40004800 	.word	0x40004800
 800b614:	40004c00 	.word	0x40004c00
 800b618:	40005000 	.word	0x40005000
 800b61c:	2310      	movs	r3, #16
 800b61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4aae      	ldr	r2, [pc, #696]	@ (800b8e0 <UART_SetConfig+0x5bc>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	f040 8097 	bne.w	800b75c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b62e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b632:	2b08      	cmp	r3, #8
 800b634:	d823      	bhi.n	800b67e <UART_SetConfig+0x35a>
 800b636:	a201      	add	r2, pc, #4	@ (adr r2, 800b63c <UART_SetConfig+0x318>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b67f 	.word	0x0800b67f
 800b644:	0800b669 	.word	0x0800b669
 800b648:	0800b67f 	.word	0x0800b67f
 800b64c:	0800b66f 	.word	0x0800b66f
 800b650:	0800b67f 	.word	0x0800b67f
 800b654:	0800b67f 	.word	0x0800b67f
 800b658:	0800b67f 	.word	0x0800b67f
 800b65c:	0800b677 	.word	0x0800b677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b660:	f7fc f812 	bl	8007688 <HAL_RCC_GetPCLK1Freq>
 800b664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b666:	e010      	b.n	800b68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b668:	4b9e      	ldr	r3, [pc, #632]	@ (800b8e4 <UART_SetConfig+0x5c0>)
 800b66a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b66c:	e00d      	b.n	800b68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b66e:	f7fb ff9d 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 800b672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b674:	e009      	b.n	800b68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b67a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b67c:	e005      	b.n	800b68a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b688:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 8130 	beq.w	800b8f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	4a94      	ldr	r2, [pc, #592]	@ (800b8e8 <UART_SetConfig+0x5c4>)
 800b698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b69c:	461a      	mov	r2, r3
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	4413      	add	r3, r2
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d305      	bcc.n	800b6c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d903      	bls.n	800b6ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b6c8:	e113      	b.n	800b8f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	60bb      	str	r3, [r7, #8]
 800b6d0:	60fa      	str	r2, [r7, #12]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d6:	4a84      	ldr	r2, [pc, #528]	@ (800b8e8 <UART_SetConfig+0x5c4>)
 800b6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	2200      	movs	r2, #0
 800b6e0:	603b      	str	r3, [r7, #0]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6ec:	f7f5 fb68 	bl	8000dc0 <__aeabi_uldivmod>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	f04f 0300 	mov.w	r3, #0
 800b700:	020b      	lsls	r3, r1, #8
 800b702:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b706:	0202      	lsls	r2, r0, #8
 800b708:	6979      	ldr	r1, [r7, #20]
 800b70a:	6849      	ldr	r1, [r1, #4]
 800b70c:	0849      	lsrs	r1, r1, #1
 800b70e:	2000      	movs	r0, #0
 800b710:	460c      	mov	r4, r1
 800b712:	4605      	mov	r5, r0
 800b714:	eb12 0804 	adds.w	r8, r2, r4
 800b718:	eb43 0905 	adc.w	r9, r3, r5
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	469a      	mov	sl, r3
 800b724:	4693      	mov	fp, r2
 800b726:	4652      	mov	r2, sl
 800b728:	465b      	mov	r3, fp
 800b72a:	4640      	mov	r0, r8
 800b72c:	4649      	mov	r1, r9
 800b72e:	f7f5 fb47 	bl	8000dc0 <__aeabi_uldivmod>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4613      	mov	r3, r2
 800b738:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b740:	d308      	bcc.n	800b754 <UART_SetConfig+0x430>
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b748:	d204      	bcs.n	800b754 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6a3a      	ldr	r2, [r7, #32]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	e0ce      	b.n	800b8f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b75a:	e0ca      	b.n	800b8f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b764:	d166      	bne.n	800b834 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b766:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b76a:	2b08      	cmp	r3, #8
 800b76c:	d827      	bhi.n	800b7be <UART_SetConfig+0x49a>
 800b76e:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <UART_SetConfig+0x450>)
 800b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b774:	0800b799 	.word	0x0800b799
 800b778:	0800b7a1 	.word	0x0800b7a1
 800b77c:	0800b7a9 	.word	0x0800b7a9
 800b780:	0800b7bf 	.word	0x0800b7bf
 800b784:	0800b7af 	.word	0x0800b7af
 800b788:	0800b7bf 	.word	0x0800b7bf
 800b78c:	0800b7bf 	.word	0x0800b7bf
 800b790:	0800b7bf 	.word	0x0800b7bf
 800b794:	0800b7b7 	.word	0x0800b7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b798:	f7fb ff76 	bl	8007688 <HAL_RCC_GetPCLK1Freq>
 800b79c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b79e:	e014      	b.n	800b7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a0:	f7fb ff88 	bl	80076b4 <HAL_RCC_GetPCLK2Freq>
 800b7a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7a6:	e010      	b.n	800b7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7a8:	4b4e      	ldr	r3, [pc, #312]	@ (800b8e4 <UART_SetConfig+0x5c0>)
 800b7aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7ac:	e00d      	b.n	800b7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ae:	f7fb fefd 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 800b7b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7b4:	e009      	b.n	800b7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7bc:	e005      	b.n	800b7ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8090 	beq.w	800b8f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d6:	4a44      	ldr	r2, [pc, #272]	@ (800b8e8 <UART_SetConfig+0x5c4>)
 800b7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e4:	005a      	lsls	r2, r3, #1
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	441a      	add	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	d916      	bls.n	800b82c <UART_SetConfig+0x508>
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b804:	d212      	bcs.n	800b82c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	f023 030f 	bic.w	r3, r3, #15
 800b80e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	b29b      	uxth	r3, r3
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	8bfb      	ldrh	r3, [r7, #30]
 800b81e:	4313      	orrs	r3, r2
 800b820:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	8bfa      	ldrh	r2, [r7, #30]
 800b828:	60da      	str	r2, [r3, #12]
 800b82a:	e062      	b.n	800b8f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b832:	e05e      	b.n	800b8f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b838:	2b08      	cmp	r3, #8
 800b83a:	d828      	bhi.n	800b88e <UART_SetConfig+0x56a>
 800b83c:	a201      	add	r2, pc, #4	@ (adr r2, 800b844 <UART_SetConfig+0x520>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b869 	.word	0x0800b869
 800b848:	0800b871 	.word	0x0800b871
 800b84c:	0800b879 	.word	0x0800b879
 800b850:	0800b88f 	.word	0x0800b88f
 800b854:	0800b87f 	.word	0x0800b87f
 800b858:	0800b88f 	.word	0x0800b88f
 800b85c:	0800b88f 	.word	0x0800b88f
 800b860:	0800b88f 	.word	0x0800b88f
 800b864:	0800b887 	.word	0x0800b887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b868:	f7fb ff0e 	bl	8007688 <HAL_RCC_GetPCLK1Freq>
 800b86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b86e:	e014      	b.n	800b89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b870:	f7fb ff20 	bl	80076b4 <HAL_RCC_GetPCLK2Freq>
 800b874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b876:	e010      	b.n	800b89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b878:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e4 <UART_SetConfig+0x5c0>)
 800b87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b87c:	e00d      	b.n	800b89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b87e:	f7fb fe95 	bl	80075ac <HAL_RCC_GetSysClockFreq>
 800b882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b884:	e009      	b.n	800b89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b88c:	e005      	b.n	800b89a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b898:	bf00      	nop
    }

    if (pclk != 0U)
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d028      	beq.n	800b8f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a4:	4a10      	ldr	r2, [pc, #64]	@ (800b8e8 <UART_SetConfig+0x5c4>)
 800b8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	085b      	lsrs	r3, r3, #1
 800b8b8:	441a      	add	r2, r3
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	2b0f      	cmp	r3, #15
 800b8c8:	d910      	bls.n	800b8ec <UART_SetConfig+0x5c8>
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8d0:	d20c      	bcs.n	800b8ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60da      	str	r2, [r3, #12]
 800b8dc:	e009      	b.n	800b8f2 <UART_SetConfig+0x5ce>
 800b8de:	bf00      	nop
 800b8e0:	40008000 	.word	0x40008000
 800b8e4:	00f42400 	.word	0x00f42400
 800b8e8:	0801a138 	.word	0x0801a138
      }
      else
      {
        ret = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2200      	movs	r2, #0
 800b906:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2200      	movs	r2, #0
 800b90c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b90e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b912:	4618      	mov	r0, r3
 800b914:	3730      	adds	r7, #48	@ 0x30
 800b916:	46bd      	mov	sp, r7
 800b918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b91c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b928:	f003 0308 	and.w	r3, r3, #8
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96c:	f003 0302 	and.w	r3, r3, #2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98e:	f003 0304 	and.w	r3, r3, #4
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	f003 0310 	and.w	r3, r3, #16
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d2:	f003 0320 	and.w	r3, r3, #32
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d01a      	beq.n	800ba32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba1a:	d10a      	bne.n	800ba32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	605a      	str	r2, [r3, #4]
  }
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b098      	sub	sp, #96	@ 0x60
 800ba64:	af02      	add	r7, sp, #8
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba70:	f7fa fa82 	bl	8005f78 <HAL_GetTick>
 800ba74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0308 	and.w	r3, r3, #8
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d12f      	bne.n	800bae4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f88e 	bl	800bbb4 <UART_WaitOnFlagUntilTimeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d022      	beq.n	800bae4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa6:	e853 3f00 	ldrex	r3, [r3]
 800baaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800baac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bab2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	461a      	mov	r2, r3
 800baba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800babc:	647b      	str	r3, [r7, #68]	@ 0x44
 800babe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bac4:	e841 2300 	strex	r3, r2, [r1]
 800bac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800baca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e6      	bne.n	800ba9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e063      	b.n	800bbac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 0304 	and.w	r3, r3, #4
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d149      	bne.n	800bb86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bafa:	2200      	movs	r2, #0
 800bafc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f857 	bl	800bbb4 <UART_WaitOnFlagUntilTimeout>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d03c      	beq.n	800bb86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	623b      	str	r3, [r7, #32]
   return(result);
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e6      	bne.n	800bb0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3308      	adds	r3, #8
 800bb44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	e853 3f00 	ldrex	r3, [r3]
 800bb4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f023 0301 	bic.w	r3, r3, #1
 800bb54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb5e:	61fa      	str	r2, [r7, #28]
 800bb60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb62:	69b9      	ldr	r1, [r7, #24]
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	e841 2300 	strex	r3, r2, [r1]
 800bb6a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1e5      	bne.n	800bb3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2220      	movs	r2, #32
 800bb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e012      	b.n	800bbac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3758      	adds	r7, #88	@ 0x58
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	603b      	str	r3, [r7, #0]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc4:	e04f      	b.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbcc:	d04b      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbce:	f7fa f9d3 	bl	8005f78 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d302      	bcc.n	800bbe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e04e      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0304 	and.w	r3, r3, #4
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d037      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b80      	cmp	r3, #128	@ 0x80
 800bbfa:	d034      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b40      	cmp	r3, #64	@ 0x40
 800bc00:	d031      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	f003 0308 	and.w	r3, r3, #8
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d110      	bne.n	800bc32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2208      	movs	r2, #8
 800bc16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f920 	bl	800be5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2208      	movs	r2, #8
 800bc22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e029      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc40:	d111      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 f906 	bl	800be5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e00f      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	69da      	ldr	r2, [r3, #28]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	4013      	ands	r3, r2
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	bf0c      	ite	eq
 800bc76:	2301      	moveq	r3, #1
 800bc78:	2300      	movne	r3, #0
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d0a0      	beq.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b096      	sub	sp, #88	@ 0x58
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	88fa      	ldrh	r2, [r7, #6]
 800bca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2222      	movs	r2, #34	@ 0x22
 800bcb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d02d      	beq.n	800bd22 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bccc:	4a40      	ldr	r2, [pc, #256]	@ (800bdd0 <UART_Start_Receive_DMA+0x140>)
 800bcce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcd6:	4a3f      	ldr	r2, [pc, #252]	@ (800bdd4 <UART_Start_Receive_DMA+0x144>)
 800bcd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bce0:	4a3d      	ldr	r2, [pc, #244]	@ (800bdd8 <UART_Start_Receive_DMA+0x148>)
 800bce2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcea:	2200      	movs	r2, #0
 800bcec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3324      	adds	r3, #36	@ 0x24
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd00:	461a      	mov	r2, r3
 800bd02:	88fb      	ldrh	r3, [r7, #6]
 800bd04:	f7fa fafc 	bl	8006300 <HAL_DMA_Start_IT>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d009      	beq.n	800bd22 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2210      	movs	r2, #16
 800bd12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e051      	b.n	800bdc6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d018      	beq.n	800bd5c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd4a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e6      	bne.n	800bd2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3308      	adds	r3, #8
 800bd62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd66:	e853 3f00 	ldrex	r3, [r3]
 800bd6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd7c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bd7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd84:	e841 2300 	strex	r3, r2, [r1]
 800bd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e5      	bne.n	800bd5c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3308      	adds	r3, #8
 800bd96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bda6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3308      	adds	r3, #8
 800bdae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bdb0:	623a      	str	r2, [r7, #32]
 800bdb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	69f9      	ldr	r1, [r7, #28]
 800bdb6:	6a3a      	ldr	r2, [r7, #32]
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e5      	bne.n	800bd90 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3758      	adds	r7, #88	@ 0x58
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	0800bfe9 	.word	0x0800bfe9
 800bdd4:	0800c11d 	.word	0x0800c11d
 800bdd8:	0800c163 	.word	0x0800c163

0800bddc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b08f      	sub	sp, #60	@ 0x3c
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	e853 3f00 	ldrex	r3, [r3]
 800bdf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bdf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be04:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be0a:	e841 2300 	strex	r3, r2, [r1]
 800be0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1e6      	bne.n	800bde4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3308      	adds	r3, #8
 800be1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	60bb      	str	r3, [r7, #8]
   return(result);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800be2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3308      	adds	r3, #8
 800be34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be36:	61ba      	str	r2, [r7, #24]
 800be38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6979      	ldr	r1, [r7, #20]
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	613b      	str	r3, [r7, #16]
   return(result);
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e5      	bne.n	800be16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2220      	movs	r2, #32
 800be4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800be52:	bf00      	nop
 800be54:	373c      	adds	r7, #60	@ 0x3c
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be5e:	b480      	push	{r7}
 800be60:	b095      	sub	sp, #84	@ 0x54
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be84:	643b      	str	r3, [r7, #64]	@ 0x40
 800be86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3308      	adds	r3, #8
 800beba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800beca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e3      	bne.n	800be98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d118      	bne.n	800bf0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f023 0310 	bic.w	r3, r3, #16
 800beec:	647b      	str	r3, [r7, #68]	@ 0x44
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6979      	ldr	r1, [r7, #20]
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	613b      	str	r3, [r7, #16]
   return(result);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e6      	bne.n	800bed8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2220      	movs	r2, #32
 800bf0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bf1e:	bf00      	nop
 800bf20:	3754      	adds	r7, #84	@ 0x54
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b090      	sub	sp, #64	@ 0x40
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0320 	and.w	r3, r3, #32
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d137      	bne.n	800bfb6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3308      	adds	r3, #8
 800bf54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e5      	bne.n	800bf4e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	e853 3f00 	ldrex	r3, [r3]
 800bf8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf96:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	69b9      	ldr	r1, [r7, #24]
 800bfa6:	69fa      	ldr	r2, [r7, #28]
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	617b      	str	r3, [r7, #20]
   return(result);
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1e6      	bne.n	800bf82 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfb4:	e004      	b.n	800bfc0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bfbc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bfbe:	4798      	blx	r3
}
 800bfc0:	bf00      	nop
 800bfc2:	3740      	adds	r7, #64	@ 0x40
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b09c      	sub	sp, #112	@ 0x70
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0320 	and.w	r3, r3, #32
 800c000:	2b00      	cmp	r3, #0
 800c002:	d171      	bne.n	800c0e8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c006:	2200      	movs	r2, #0
 800c008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c01c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c020:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c02a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c02c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c030:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c032:	e841 2300 	strex	r3, r2, [r1]
 800c036:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e6      	bne.n	800c00c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c050:	f023 0301 	bic.w	r3, r3, #1
 800c054:	667b      	str	r3, [r7, #100]	@ 0x64
 800c056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c05e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c060:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e5      	bne.n	800c03e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	623b      	str	r3, [r7, #32]
   return(result);
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c088:	663b      	str	r3, [r7, #96]	@ 0x60
 800c08a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3308      	adds	r3, #8
 800c090:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c092:	633a      	str	r2, [r7, #48]	@ 0x30
 800c094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e5      	bne.n	800c072 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d118      	bne.n	800c0e8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	e853 3f00 	ldrex	r3, [r3]
 800c0c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 0310 	bic.w	r3, r3, #16
 800c0ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0d4:	61fb      	str	r3, [r7, #28]
 800c0d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d8:	69b9      	ldr	r1, [r7, #24]
 800c0da:	69fa      	ldr	r2, [r7, #28]
 800c0dc:	e841 2300 	strex	r3, r2, [r1]
 800c0e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1e6      	bne.n	800c0b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d109      	bne.n	800c10a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c0fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0fe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c102:	4611      	mov	r1, r2
 800c104:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c106:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c108:	e004      	b.n	800c114 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c10c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c110:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c112:	4798      	blx	r3
}
 800c114:	bf00      	nop
 800c116:	3770      	adds	r7, #112	@ 0x70
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c128:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c134:	2b01      	cmp	r3, #1
 800c136:	d10b      	bne.n	800c150 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c144:	0852      	lsrs	r2, r2, #1
 800c146:	b292      	uxth	r2, r2
 800c148:	4611      	mov	r1, r2
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c14e:	e004      	b.n	800c15a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	4798      	blx	r3
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b086      	sub	sp, #24
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c176:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c18a:	2b80      	cmp	r3, #128	@ 0x80
 800c18c:	d109      	bne.n	800c1a2 <UART_DMAError+0x40>
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2b21      	cmp	r3, #33	@ 0x21
 800c192:	d106      	bne.n	800c1a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2200      	movs	r2, #0
 800c198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	f7ff fe1d 	bl	800bddc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ac:	2b40      	cmp	r3, #64	@ 0x40
 800c1ae:	d109      	bne.n	800c1c4 <UART_DMAError+0x62>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b22      	cmp	r3, #34	@ 0x22
 800c1b4:	d106      	bne.n	800c1c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c1be:	6978      	ldr	r0, [r7, #20]
 800c1c0:	f7ff fe4d 	bl	800be5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ca:	f043 0210 	orr.w	r2, r3, #16
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1da:	6978      	ldr	r0, [r7, #20]
 800c1dc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1de:	bf00      	nop
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b088      	sub	sp, #32
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	e853 3f00 	ldrex	r3, [r3]
 800c222:	60bb      	str	r3, [r7, #8]
   return(result);
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	461a      	mov	r2, r3
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	61bb      	str	r3, [r7, #24]
 800c236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c238:	6979      	ldr	r1, [r7, #20]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	e841 2300 	strex	r3, r2, [r1]
 800c240:	613b      	str	r3, [r7, #16]
   return(result);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1e6      	bne.n	800c216 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c260:	bf00      	nop
 800c262:	3720      	adds	r7, #32
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d101      	bne.n	800c2ba <HAL_UARTEx_DisableFifoMode+0x16>
 800c2b6:	2302      	movs	r3, #2
 800c2b8:	e027      	b.n	800c30a <HAL_UARTEx_DisableFifoMode+0x66>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2224      	movs	r2, #36	@ 0x24
 800c2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f022 0201 	bic.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2220      	movs	r2, #32
 800c2fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c326:	2b01      	cmp	r3, #1
 800c328:	d101      	bne.n	800c32e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c32a:	2302      	movs	r3, #2
 800c32c:	e02d      	b.n	800c38a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2224      	movs	r2, #36	@ 0x24
 800c33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f022 0201 	bic.w	r2, r2, #1
 800c354:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	430a      	orrs	r2, r1
 800c368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f850 	bl	800c410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2220      	movs	r2, #32
 800c37c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e02d      	b.n	800c406 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2224      	movs	r2, #36	@ 0x24
 800c3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f022 0201 	bic.w	r2, r2, #1
 800c3d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f812 	bl	800c410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d108      	bne.n	800c432 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c430:	e031      	b.n	800c496 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c432:	2308      	movs	r3, #8
 800c434:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c436:	2308      	movs	r3, #8
 800c438:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	0e5b      	lsrs	r3, r3, #25
 800c442:	b2db      	uxtb	r3, r3
 800c444:	f003 0307 	and.w	r3, r3, #7
 800c448:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	0f5b      	lsrs	r3, r3, #29
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 0307 	and.w	r3, r3, #7
 800c458:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
 800c45c:	7b3a      	ldrb	r2, [r7, #12]
 800c45e:	4911      	ldr	r1, [pc, #68]	@ (800c4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c460:	5c8a      	ldrb	r2, [r1, r2]
 800c462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c466:	7b3a      	ldrb	r2, [r7, #12]
 800c468:	490f      	ldr	r1, [pc, #60]	@ (800c4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c46a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c46c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	7b7a      	ldrb	r2, [r7, #13]
 800c47c:	4909      	ldr	r1, [pc, #36]	@ (800c4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c47e:	5c8a      	ldrb	r2, [r1, r2]
 800c480:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c484:	7b7a      	ldrb	r2, [r7, #13]
 800c486:	4908      	ldr	r1, [pc, #32]	@ (800c4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c488:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c48a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c48e:	b29a      	uxth	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c496:	bf00      	nop
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	0801a150 	.word	0x0801a150
 800c4a8:	0801a158 	.word	0x0801a158

0800c4ac <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4dc:	eeb1 7a67 	vneg.f32	s14, s15
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a1a      	ldr	r2, [r3, #32]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d006      	beq.n	800c510 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	330c      	adds	r3, #12
 800c506:	220c      	movs	r2, #12
 800c508:	2100      	movs	r1, #0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f804 	bl	800c518 <memset>
  }

}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <memset>:
 800c518:	4402      	add	r2, r0
 800c51a:	4603      	mov	r3, r0
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d100      	bne.n	800c522 <memset+0xa>
 800c520:	4770      	bx	lr
 800c522:	f803 1b01 	strb.w	r1, [r3], #1
 800c526:	e7f9      	b.n	800c51c <memset+0x4>

0800c528 <__errno>:
 800c528:	4b01      	ldr	r3, [pc, #4]	@ (800c530 <__errno+0x8>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20000274 	.word	0x20000274

0800c534 <__libc_init_array>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	4d0d      	ldr	r5, [pc, #52]	@ (800c56c <__libc_init_array+0x38>)
 800c538:	4c0d      	ldr	r4, [pc, #52]	@ (800c570 <__libc_init_array+0x3c>)
 800c53a:	1b64      	subs	r4, r4, r5
 800c53c:	10a4      	asrs	r4, r4, #2
 800c53e:	2600      	movs	r6, #0
 800c540:	42a6      	cmp	r6, r4
 800c542:	d109      	bne.n	800c558 <__libc_init_array+0x24>
 800c544:	4d0b      	ldr	r5, [pc, #44]	@ (800c574 <__libc_init_array+0x40>)
 800c546:	4c0c      	ldr	r4, [pc, #48]	@ (800c578 <__libc_init_array+0x44>)
 800c548:	f000 ff32 	bl	800d3b0 <_init>
 800c54c:	1b64      	subs	r4, r4, r5
 800c54e:	10a4      	asrs	r4, r4, #2
 800c550:	2600      	movs	r6, #0
 800c552:	42a6      	cmp	r6, r4
 800c554:	d105      	bne.n	800c562 <__libc_init_array+0x2e>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	f855 3b04 	ldr.w	r3, [r5], #4
 800c55c:	4798      	blx	r3
 800c55e:	3601      	adds	r6, #1
 800c560:	e7ee      	b.n	800c540 <__libc_init_array+0xc>
 800c562:	f855 3b04 	ldr.w	r3, [r5], #4
 800c566:	4798      	blx	r3
 800c568:	3601      	adds	r6, #1
 800c56a:	e7f2      	b.n	800c552 <__libc_init_array+0x1e>
 800c56c:	0801a570 	.word	0x0801a570
 800c570:	0801a570 	.word	0x0801a570
 800c574:	0801a570 	.word	0x0801a570
 800c578:	0801a574 	.word	0x0801a574

0800c57c <memcpy>:
 800c57c:	440a      	add	r2, r1
 800c57e:	4291      	cmp	r1, r2
 800c580:	f100 33ff 	add.w	r3, r0, #4294967295
 800c584:	d100      	bne.n	800c588 <memcpy+0xc>
 800c586:	4770      	bx	lr
 800c588:	b510      	push	{r4, lr}
 800c58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c592:	4291      	cmp	r1, r2
 800c594:	d1f9      	bne.n	800c58a <memcpy+0xe>
 800c596:	bd10      	pop	{r4, pc}

0800c598 <atan2f>:
 800c598:	f000 b94c 	b.w	800c834 <__ieee754_atan2f>

0800c59c <sqrtf>:
 800c59c:	b508      	push	{r3, lr}
 800c59e:	ed2d 8b02 	vpush	{d8}
 800c5a2:	eeb0 8a40 	vmov.f32	s16, s0
 800c5a6:	f000 f8a1 	bl	800c6ec <__ieee754_sqrtf>
 800c5aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	d60c      	bvs.n	800c5ce <sqrtf+0x32>
 800c5b4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c5d4 <sqrtf+0x38>
 800c5b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c0:	d505      	bpl.n	800c5ce <sqrtf+0x32>
 800c5c2:	f7ff ffb1 	bl	800c528 <__errno>
 800c5c6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c5ca:	2321      	movs	r3, #33	@ 0x21
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	ecbd 8b02 	vpop	{d8}
 800c5d2:	bd08      	pop	{r3, pc}
 800c5d4:	00000000 	.word	0x00000000

0800c5d8 <cosf>:
 800c5d8:	ee10 3a10 	vmov	r3, s0
 800c5dc:	b507      	push	{r0, r1, r2, lr}
 800c5de:	4a1e      	ldr	r2, [pc, #120]	@ (800c658 <cosf+0x80>)
 800c5e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d806      	bhi.n	800c5f6 <cosf+0x1e>
 800c5e8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c65c <cosf+0x84>
 800c5ec:	b003      	add	sp, #12
 800c5ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f2:	f000 b87f 	b.w	800c6f4 <__kernel_cosf>
 800c5f6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5fa:	d304      	bcc.n	800c606 <cosf+0x2e>
 800c5fc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c600:	b003      	add	sp, #12
 800c602:	f85d fb04 	ldr.w	pc, [sp], #4
 800c606:	4668      	mov	r0, sp
 800c608:	f000 f9b4 	bl	800c974 <__ieee754_rem_pio2f>
 800c60c:	f000 0003 	and.w	r0, r0, #3
 800c610:	2801      	cmp	r0, #1
 800c612:	d009      	beq.n	800c628 <cosf+0x50>
 800c614:	2802      	cmp	r0, #2
 800c616:	d010      	beq.n	800c63a <cosf+0x62>
 800c618:	b9b0      	cbnz	r0, 800c648 <cosf+0x70>
 800c61a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c61e:	ed9d 0a00 	vldr	s0, [sp]
 800c622:	f000 f867 	bl	800c6f4 <__kernel_cosf>
 800c626:	e7eb      	b.n	800c600 <cosf+0x28>
 800c628:	eddd 0a01 	vldr	s1, [sp, #4]
 800c62c:	ed9d 0a00 	vldr	s0, [sp]
 800c630:	f000 f8b8 	bl	800c7a4 <__kernel_sinf>
 800c634:	eeb1 0a40 	vneg.f32	s0, s0
 800c638:	e7e2      	b.n	800c600 <cosf+0x28>
 800c63a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c63e:	ed9d 0a00 	vldr	s0, [sp]
 800c642:	f000 f857 	bl	800c6f4 <__kernel_cosf>
 800c646:	e7f5      	b.n	800c634 <cosf+0x5c>
 800c648:	eddd 0a01 	vldr	s1, [sp, #4]
 800c64c:	ed9d 0a00 	vldr	s0, [sp]
 800c650:	2001      	movs	r0, #1
 800c652:	f000 f8a7 	bl	800c7a4 <__kernel_sinf>
 800c656:	e7d3      	b.n	800c600 <cosf+0x28>
 800c658:	3f490fd8 	.word	0x3f490fd8
 800c65c:	00000000 	.word	0x00000000

0800c660 <sinf>:
 800c660:	ee10 3a10 	vmov	r3, s0
 800c664:	b507      	push	{r0, r1, r2, lr}
 800c666:	4a1f      	ldr	r2, [pc, #124]	@ (800c6e4 <sinf+0x84>)
 800c668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d807      	bhi.n	800c680 <sinf+0x20>
 800c670:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c6e8 <sinf+0x88>
 800c674:	2000      	movs	r0, #0
 800c676:	b003      	add	sp, #12
 800c678:	f85d eb04 	ldr.w	lr, [sp], #4
 800c67c:	f000 b892 	b.w	800c7a4 <__kernel_sinf>
 800c680:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c684:	d304      	bcc.n	800c690 <sinf+0x30>
 800c686:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c68a:	b003      	add	sp, #12
 800c68c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c690:	4668      	mov	r0, sp
 800c692:	f000 f96f 	bl	800c974 <__ieee754_rem_pio2f>
 800c696:	f000 0003 	and.w	r0, r0, #3
 800c69a:	2801      	cmp	r0, #1
 800c69c:	d00a      	beq.n	800c6b4 <sinf+0x54>
 800c69e:	2802      	cmp	r0, #2
 800c6a0:	d00f      	beq.n	800c6c2 <sinf+0x62>
 800c6a2:	b9c0      	cbnz	r0, 800c6d6 <sinf+0x76>
 800c6a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6a8:	ed9d 0a00 	vldr	s0, [sp]
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	f000 f879 	bl	800c7a4 <__kernel_sinf>
 800c6b2:	e7ea      	b.n	800c68a <sinf+0x2a>
 800c6b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6b8:	ed9d 0a00 	vldr	s0, [sp]
 800c6bc:	f000 f81a 	bl	800c6f4 <__kernel_cosf>
 800c6c0:	e7e3      	b.n	800c68a <sinf+0x2a>
 800c6c2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6c6:	ed9d 0a00 	vldr	s0, [sp]
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	f000 f86a 	bl	800c7a4 <__kernel_sinf>
 800c6d0:	eeb1 0a40 	vneg.f32	s0, s0
 800c6d4:	e7d9      	b.n	800c68a <sinf+0x2a>
 800c6d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6da:	ed9d 0a00 	vldr	s0, [sp]
 800c6de:	f000 f809 	bl	800c6f4 <__kernel_cosf>
 800c6e2:	e7f5      	b.n	800c6d0 <sinf+0x70>
 800c6e4:	3f490fd8 	.word	0x3f490fd8
 800c6e8:	00000000 	.word	0x00000000

0800c6ec <__ieee754_sqrtf>:
 800c6ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <__kernel_cosf>:
 800c6f4:	ee10 3a10 	vmov	r3, s0
 800c6f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6fc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c700:	eef0 6a40 	vmov.f32	s13, s0
 800c704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c708:	d204      	bcs.n	800c714 <__kernel_cosf+0x20>
 800c70a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c70e:	ee17 2a90 	vmov	r2, s15
 800c712:	b342      	cbz	r2, 800c766 <__kernel_cosf+0x72>
 800c714:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c718:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c784 <__kernel_cosf+0x90>
 800c71c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c788 <__kernel_cosf+0x94>
 800c720:	4a1a      	ldr	r2, [pc, #104]	@ (800c78c <__kernel_cosf+0x98>)
 800c722:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c726:	4293      	cmp	r3, r2
 800c728:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c790 <__kernel_cosf+0x9c>
 800c72c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c730:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c794 <__kernel_cosf+0xa0>
 800c734:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c738:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c798 <__kernel_cosf+0xa4>
 800c73c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c740:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c79c <__kernel_cosf+0xa8>
 800c744:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c748:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c74c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c750:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c754:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c75c:	d804      	bhi.n	800c768 <__kernel_cosf+0x74>
 800c75e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c762:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c766:	4770      	bx	lr
 800c768:	4a0d      	ldr	r2, [pc, #52]	@ (800c7a0 <__kernel_cosf+0xac>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	bf9a      	itte	ls
 800c76e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c772:	ee07 3a10 	vmovls	s14, r3
 800c776:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c77a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c77e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c782:	e7ec      	b.n	800c75e <__kernel_cosf+0x6a>
 800c784:	ad47d74e 	.word	0xad47d74e
 800c788:	310f74f6 	.word	0x310f74f6
 800c78c:	3e999999 	.word	0x3e999999
 800c790:	b493f27c 	.word	0xb493f27c
 800c794:	37d00d01 	.word	0x37d00d01
 800c798:	bab60b61 	.word	0xbab60b61
 800c79c:	3d2aaaab 	.word	0x3d2aaaab
 800c7a0:	3f480000 	.word	0x3f480000

0800c7a4 <__kernel_sinf>:
 800c7a4:	ee10 3a10 	vmov	r3, s0
 800c7a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c7b0:	d204      	bcs.n	800c7bc <__kernel_sinf+0x18>
 800c7b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c7b6:	ee17 3a90 	vmov	r3, s15
 800c7ba:	b35b      	cbz	r3, 800c814 <__kernel_sinf+0x70>
 800c7bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c7c0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c818 <__kernel_sinf+0x74>
 800c7c4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c81c <__kernel_sinf+0x78>
 800c7c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c7cc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c820 <__kernel_sinf+0x7c>
 800c7d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7d4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c824 <__kernel_sinf+0x80>
 800c7d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c7dc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c828 <__kernel_sinf+0x84>
 800c7e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c7e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7e8:	b930      	cbnz	r0, 800c7f8 <__kernel_sinf+0x54>
 800c7ea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c82c <__kernel_sinf+0x88>
 800c7ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c7f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c7f6:	4770      	bx	lr
 800c7f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c7fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c800:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c804:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c808:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c830 <__kernel_sinf+0x8c>
 800c80c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c810:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	2f2ec9d3 	.word	0x2f2ec9d3
 800c81c:	b2d72f34 	.word	0xb2d72f34
 800c820:	3638ef1b 	.word	0x3638ef1b
 800c824:	b9500d01 	.word	0xb9500d01
 800c828:	3c088889 	.word	0x3c088889
 800c82c:	be2aaaab 	.word	0xbe2aaaab
 800c830:	3e2aaaab 	.word	0x3e2aaaab

0800c834 <__ieee754_atan2f>:
 800c834:	ee10 2a90 	vmov	r2, s1
 800c838:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c83c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c840:	b510      	push	{r4, lr}
 800c842:	eef0 7a40 	vmov.f32	s15, s0
 800c846:	d806      	bhi.n	800c856 <__ieee754_atan2f+0x22>
 800c848:	ee10 0a10 	vmov	r0, s0
 800c84c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c850:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c854:	d904      	bls.n	800c860 <__ieee754_atan2f+0x2c>
 800c856:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c85a:	eeb0 0a67 	vmov.f32	s0, s15
 800c85e:	bd10      	pop	{r4, pc}
 800c860:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c864:	d103      	bne.n	800c86e <__ieee754_atan2f+0x3a>
 800c866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c86a:	f000 b9b3 	b.w	800cbd4 <atanf>
 800c86e:	1794      	asrs	r4, r2, #30
 800c870:	f004 0402 	and.w	r4, r4, #2
 800c874:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c878:	b943      	cbnz	r3, 800c88c <__ieee754_atan2f+0x58>
 800c87a:	2c02      	cmp	r4, #2
 800c87c:	d05e      	beq.n	800c93c <__ieee754_atan2f+0x108>
 800c87e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c950 <__ieee754_atan2f+0x11c>
 800c882:	2c03      	cmp	r4, #3
 800c884:	bf08      	it	eq
 800c886:	eef0 7a47 	vmoveq.f32	s15, s14
 800c88a:	e7e6      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c88c:	b941      	cbnz	r1, 800c8a0 <__ieee754_atan2f+0x6c>
 800c88e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c954 <__ieee754_atan2f+0x120>
 800c892:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c958 <__ieee754_atan2f+0x124>
 800c896:	2800      	cmp	r0, #0
 800c898:	bfa8      	it	ge
 800c89a:	eef0 7a47 	vmovge.f32	s15, s14
 800c89e:	e7dc      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c8a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c8a4:	d110      	bne.n	800c8c8 <__ieee754_atan2f+0x94>
 800c8a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8ae:	d107      	bne.n	800c8c0 <__ieee754_atan2f+0x8c>
 800c8b0:	2c02      	cmp	r4, #2
 800c8b2:	d846      	bhi.n	800c942 <__ieee754_atan2f+0x10e>
 800c8b4:	4b29      	ldr	r3, [pc, #164]	@ (800c95c <__ieee754_atan2f+0x128>)
 800c8b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c8ba:	edd3 7a00 	vldr	s15, [r3]
 800c8be:	e7cc      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c8c0:	2c02      	cmp	r4, #2
 800c8c2:	d841      	bhi.n	800c948 <__ieee754_atan2f+0x114>
 800c8c4:	4b26      	ldr	r3, [pc, #152]	@ (800c960 <__ieee754_atan2f+0x12c>)
 800c8c6:	e7f6      	b.n	800c8b6 <__ieee754_atan2f+0x82>
 800c8c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8cc:	d0df      	beq.n	800c88e <__ieee754_atan2f+0x5a>
 800c8ce:	1a5b      	subs	r3, r3, r1
 800c8d0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c8d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c8d8:	da1a      	bge.n	800c910 <__ieee754_atan2f+0xdc>
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	da01      	bge.n	800c8e2 <__ieee754_atan2f+0xae>
 800c8de:	313c      	adds	r1, #60	@ 0x3c
 800c8e0:	db19      	blt.n	800c916 <__ieee754_atan2f+0xe2>
 800c8e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c8e6:	f000 fa49 	bl	800cd7c <fabsf>
 800c8ea:	f000 f973 	bl	800cbd4 <atanf>
 800c8ee:	eef0 7a40 	vmov.f32	s15, s0
 800c8f2:	2c01      	cmp	r4, #1
 800c8f4:	d012      	beq.n	800c91c <__ieee754_atan2f+0xe8>
 800c8f6:	2c02      	cmp	r4, #2
 800c8f8:	d017      	beq.n	800c92a <__ieee754_atan2f+0xf6>
 800c8fa:	2c00      	cmp	r4, #0
 800c8fc:	d0ad      	beq.n	800c85a <__ieee754_atan2f+0x26>
 800c8fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c964 <__ieee754_atan2f+0x130>
 800c902:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c906:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c968 <__ieee754_atan2f+0x134>
 800c90a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c90e:	e7a4      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c910:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c958 <__ieee754_atan2f+0x124>
 800c914:	e7ed      	b.n	800c8f2 <__ieee754_atan2f+0xbe>
 800c916:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c96c <__ieee754_atan2f+0x138>
 800c91a:	e7ea      	b.n	800c8f2 <__ieee754_atan2f+0xbe>
 800c91c:	ee17 3a90 	vmov	r3, s15
 800c920:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c924:	ee07 3a90 	vmov	s15, r3
 800c928:	e797      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c92a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c964 <__ieee754_atan2f+0x130>
 800c92e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c932:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c968 <__ieee754_atan2f+0x134>
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c93a:	e78e      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c93c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c968 <__ieee754_atan2f+0x134>
 800c940:	e78b      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c942:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c970 <__ieee754_atan2f+0x13c>
 800c946:	e788      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c948:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c96c <__ieee754_atan2f+0x138>
 800c94c:	e785      	b.n	800c85a <__ieee754_atan2f+0x26>
 800c94e:	bf00      	nop
 800c950:	c0490fdb 	.word	0xc0490fdb
 800c954:	bfc90fdb 	.word	0xbfc90fdb
 800c958:	3fc90fdb 	.word	0x3fc90fdb
 800c95c:	0801a16c 	.word	0x0801a16c
 800c960:	0801a160 	.word	0x0801a160
 800c964:	33bbbd2e 	.word	0x33bbbd2e
 800c968:	40490fdb 	.word	0x40490fdb
 800c96c:	00000000 	.word	0x00000000
 800c970:	3f490fdb 	.word	0x3f490fdb

0800c974 <__ieee754_rem_pio2f>:
 800c974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c976:	ee10 6a10 	vmov	r6, s0
 800c97a:	4b88      	ldr	r3, [pc, #544]	@ (800cb9c <__ieee754_rem_pio2f+0x228>)
 800c97c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c980:	429d      	cmp	r5, r3
 800c982:	b087      	sub	sp, #28
 800c984:	4604      	mov	r4, r0
 800c986:	d805      	bhi.n	800c994 <__ieee754_rem_pio2f+0x20>
 800c988:	2300      	movs	r3, #0
 800c98a:	ed80 0a00 	vstr	s0, [r0]
 800c98e:	6043      	str	r3, [r0, #4]
 800c990:	2000      	movs	r0, #0
 800c992:	e022      	b.n	800c9da <__ieee754_rem_pio2f+0x66>
 800c994:	4b82      	ldr	r3, [pc, #520]	@ (800cba0 <__ieee754_rem_pio2f+0x22c>)
 800c996:	429d      	cmp	r5, r3
 800c998:	d83a      	bhi.n	800ca10 <__ieee754_rem_pio2f+0x9c>
 800c99a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c99e:	2e00      	cmp	r6, #0
 800c9a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800cba4 <__ieee754_rem_pio2f+0x230>
 800c9a4:	4a80      	ldr	r2, [pc, #512]	@ (800cba8 <__ieee754_rem_pio2f+0x234>)
 800c9a6:	f023 030f 	bic.w	r3, r3, #15
 800c9aa:	dd18      	ble.n	800c9de <__ieee754_rem_pio2f+0x6a>
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c9b2:	bf09      	itett	eq
 800c9b4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800cbac <__ieee754_rem_pio2f+0x238>
 800c9b8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800cbb0 <__ieee754_rem_pio2f+0x23c>
 800c9bc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800cbb4 <__ieee754_rem_pio2f+0x240>
 800c9c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c9c4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c9c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9cc:	ed80 7a00 	vstr	s14, [r0]
 800c9d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c9d4:	edc0 7a01 	vstr	s15, [r0, #4]
 800c9d8:	2001      	movs	r0, #1
 800c9da:	b007      	add	sp, #28
 800c9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c9e4:	bf09      	itett	eq
 800c9e6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800cbac <__ieee754_rem_pio2f+0x238>
 800c9ea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800cbb0 <__ieee754_rem_pio2f+0x23c>
 800c9ee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800cbb4 <__ieee754_rem_pio2f+0x240>
 800c9f2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c9f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9fe:	ed80 7a00 	vstr	s14, [r0]
 800ca02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca06:	edc0 7a01 	vstr	s15, [r0, #4]
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0e:	e7e4      	b.n	800c9da <__ieee754_rem_pio2f+0x66>
 800ca10:	4b69      	ldr	r3, [pc, #420]	@ (800cbb8 <__ieee754_rem_pio2f+0x244>)
 800ca12:	429d      	cmp	r5, r3
 800ca14:	d873      	bhi.n	800cafe <__ieee754_rem_pio2f+0x18a>
 800ca16:	f000 f9b1 	bl	800cd7c <fabsf>
 800ca1a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cbbc <__ieee754_rem_pio2f+0x248>
 800ca1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ca22:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ca26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca2e:	ee17 0a90 	vmov	r0, s15
 800ca32:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cba4 <__ieee754_rem_pio2f+0x230>
 800ca36:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ca3a:	281f      	cmp	r0, #31
 800ca3c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cbb0 <__ieee754_rem_pio2f+0x23c>
 800ca40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca44:	eeb1 6a47 	vneg.f32	s12, s14
 800ca48:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ca4c:	ee16 1a90 	vmov	r1, s13
 800ca50:	dc09      	bgt.n	800ca66 <__ieee754_rem_pio2f+0xf2>
 800ca52:	4a5b      	ldr	r2, [pc, #364]	@ (800cbc0 <__ieee754_rem_pio2f+0x24c>)
 800ca54:	1e47      	subs	r7, r0, #1
 800ca56:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ca5a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ca5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d107      	bne.n	800ca76 <__ieee754_rem_pio2f+0x102>
 800ca66:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ca6a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ca6e:	2a08      	cmp	r2, #8
 800ca70:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ca74:	dc14      	bgt.n	800caa0 <__ieee754_rem_pio2f+0x12c>
 800ca76:	6021      	str	r1, [r4, #0]
 800ca78:	ed94 7a00 	vldr	s14, [r4]
 800ca7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca86:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca8a:	daa6      	bge.n	800c9da <__ieee754_rem_pio2f+0x66>
 800ca8c:	eeb1 7a47 	vneg.f32	s14, s14
 800ca90:	eeb1 0a40 	vneg.f32	s0, s0
 800ca94:	ed84 7a00 	vstr	s14, [r4]
 800ca98:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca9c:	4240      	negs	r0, r0
 800ca9e:	e79c      	b.n	800c9da <__ieee754_rem_pio2f+0x66>
 800caa0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800cbac <__ieee754_rem_pio2f+0x238>
 800caa4:	eef0 6a40 	vmov.f32	s13, s0
 800caa8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800caac:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cab0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cab4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cbb4 <__ieee754_rem_pio2f+0x240>
 800cab8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cabc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cac0:	ee15 2a90 	vmov	r2, s11
 800cac4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cac8:	1a5b      	subs	r3, r3, r1
 800caca:	2b19      	cmp	r3, #25
 800cacc:	dc04      	bgt.n	800cad8 <__ieee754_rem_pio2f+0x164>
 800cace:	edc4 5a00 	vstr	s11, [r4]
 800cad2:	eeb0 0a66 	vmov.f32	s0, s13
 800cad6:	e7cf      	b.n	800ca78 <__ieee754_rem_pio2f+0x104>
 800cad8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800cbc4 <__ieee754_rem_pio2f+0x250>
 800cadc:	eeb0 0a66 	vmov.f32	s0, s13
 800cae0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cae4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cae8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800cbc8 <__ieee754_rem_pio2f+0x254>
 800caec:	eee6 7a25 	vfma.f32	s15, s12, s11
 800caf0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800caf4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800caf8:	ed84 7a00 	vstr	s14, [r4]
 800cafc:	e7bc      	b.n	800ca78 <__ieee754_rem_pio2f+0x104>
 800cafe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800cb02:	d306      	bcc.n	800cb12 <__ieee754_rem_pio2f+0x19e>
 800cb04:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cb08:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb0c:	edc0 7a00 	vstr	s15, [r0]
 800cb10:	e73e      	b.n	800c990 <__ieee754_rem_pio2f+0x1c>
 800cb12:	15ea      	asrs	r2, r5, #23
 800cb14:	3a86      	subs	r2, #134	@ 0x86
 800cb16:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cb22:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800cbcc <__ieee754_rem_pio2f+0x258>
 800cb26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cb32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cb3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb42:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cb46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb52:	edcd 7a05 	vstr	s15, [sp, #20]
 800cb56:	d11e      	bne.n	800cb96 <__ieee754_rem_pio2f+0x222>
 800cb58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb60:	bf0c      	ite	eq
 800cb62:	2301      	moveq	r3, #1
 800cb64:	2302      	movne	r3, #2
 800cb66:	491a      	ldr	r1, [pc, #104]	@ (800cbd0 <__ieee754_rem_pio2f+0x25c>)
 800cb68:	9101      	str	r1, [sp, #4]
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	9100      	str	r1, [sp, #0]
 800cb6e:	a803      	add	r0, sp, #12
 800cb70:	4621      	mov	r1, r4
 800cb72:	f000 f971 	bl	800ce58 <__kernel_rem_pio2f>
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	f6bf af2f 	bge.w	800c9da <__ieee754_rem_pio2f+0x66>
 800cb7c:	edd4 7a00 	vldr	s15, [r4]
 800cb80:	eef1 7a67 	vneg.f32	s15, s15
 800cb84:	edc4 7a00 	vstr	s15, [r4]
 800cb88:	edd4 7a01 	vldr	s15, [r4, #4]
 800cb8c:	eef1 7a67 	vneg.f32	s15, s15
 800cb90:	edc4 7a01 	vstr	s15, [r4, #4]
 800cb94:	e782      	b.n	800ca9c <__ieee754_rem_pio2f+0x128>
 800cb96:	2303      	movs	r3, #3
 800cb98:	e7e5      	b.n	800cb66 <__ieee754_rem_pio2f+0x1f2>
 800cb9a:	bf00      	nop
 800cb9c:	3f490fd8 	.word	0x3f490fd8
 800cba0:	4016cbe3 	.word	0x4016cbe3
 800cba4:	3fc90f80 	.word	0x3fc90f80
 800cba8:	3fc90fd0 	.word	0x3fc90fd0
 800cbac:	37354400 	.word	0x37354400
 800cbb0:	37354443 	.word	0x37354443
 800cbb4:	2e85a308 	.word	0x2e85a308
 800cbb8:	43490f80 	.word	0x43490f80
 800cbbc:	3f22f984 	.word	0x3f22f984
 800cbc0:	0801a178 	.word	0x0801a178
 800cbc4:	2e85a300 	.word	0x2e85a300
 800cbc8:	248d3132 	.word	0x248d3132
 800cbcc:	43800000 	.word	0x43800000
 800cbd0:	0801a1f8 	.word	0x0801a1f8

0800cbd4 <atanf>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	ee10 5a10 	vmov	r5, s0
 800cbda:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cbde:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cbe2:	eef0 7a40 	vmov.f32	s15, s0
 800cbe6:	d310      	bcc.n	800cc0a <atanf+0x36>
 800cbe8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cbec:	d904      	bls.n	800cbf8 <atanf+0x24>
 800cbee:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cbf2:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf6:	bd38      	pop	{r3, r4, r5, pc}
 800cbf8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cd30 <atanf+0x15c>
 800cbfc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cd34 <atanf+0x160>
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	bfc8      	it	gt
 800cc04:	eef0 7a47 	vmovgt.f32	s15, s14
 800cc08:	e7f3      	b.n	800cbf2 <atanf+0x1e>
 800cc0a:	4b4b      	ldr	r3, [pc, #300]	@ (800cd38 <atanf+0x164>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	d810      	bhi.n	800cc32 <atanf+0x5e>
 800cc10:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cc14:	d20a      	bcs.n	800cc2c <atanf+0x58>
 800cc16:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800cd3c <atanf+0x168>
 800cc1a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cc1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	dce2      	bgt.n	800cbf2 <atanf+0x1e>
 800cc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc30:	e013      	b.n	800cc5a <atanf+0x86>
 800cc32:	f000 f8a3 	bl	800cd7c <fabsf>
 800cc36:	4b42      	ldr	r3, [pc, #264]	@ (800cd40 <atanf+0x16c>)
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	d84f      	bhi.n	800ccdc <atanf+0x108>
 800cc3c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cc40:	429c      	cmp	r4, r3
 800cc42:	d841      	bhi.n	800ccc8 <atanf+0xf4>
 800cc44:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cc48:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cc4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc50:	2300      	movs	r3, #0
 800cc52:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cc60:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cd44 <atanf+0x170>
 800cc64:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800cd48 <atanf+0x174>
 800cc68:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800cd4c <atanf+0x178>
 800cc6c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cc70:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cc74:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800cd50 <atanf+0x17c>
 800cc78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc7c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800cd54 <atanf+0x180>
 800cc80:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc84:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cd58 <atanf+0x184>
 800cc88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc8c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cd5c <atanf+0x188>
 800cc90:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc94:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800cd60 <atanf+0x18c>
 800cc98:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cc9c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cd64 <atanf+0x190>
 800cca0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cca4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800cd68 <atanf+0x194>
 800cca8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ccac:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800cd6c <atanf+0x198>
 800ccb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ccb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccb8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ccbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ccc0:	d121      	bne.n	800cd06 <atanf+0x132>
 800ccc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccc6:	e794      	b.n	800cbf2 <atanf+0x1e>
 800ccc8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cccc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ccd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ccda:	e7be      	b.n	800cc5a <atanf+0x86>
 800ccdc:	4b24      	ldr	r3, [pc, #144]	@ (800cd70 <atanf+0x19c>)
 800ccde:	429c      	cmp	r4, r3
 800cce0:	d80b      	bhi.n	800ccfa <atanf+0x126>
 800cce2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccea:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ccee:	2302      	movs	r3, #2
 800ccf0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ccf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf8:	e7af      	b.n	800cc5a <atanf+0x86>
 800ccfa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ccfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cd02:	2303      	movs	r3, #3
 800cd04:	e7a9      	b.n	800cc5a <atanf+0x86>
 800cd06:	4a1b      	ldr	r2, [pc, #108]	@ (800cd74 <atanf+0x1a0>)
 800cd08:	491b      	ldr	r1, [pc, #108]	@ (800cd78 <atanf+0x1a4>)
 800cd0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cd12:	edd3 6a00 	vldr	s13, [r3]
 800cd16:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd20:	edd2 7a00 	vldr	s15, [r2]
 800cd24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd28:	bfb8      	it	lt
 800cd2a:	eef1 7a67 	vneglt.f32	s15, s15
 800cd2e:	e760      	b.n	800cbf2 <atanf+0x1e>
 800cd30:	bfc90fdb 	.word	0xbfc90fdb
 800cd34:	3fc90fdb 	.word	0x3fc90fdb
 800cd38:	3edfffff 	.word	0x3edfffff
 800cd3c:	7149f2ca 	.word	0x7149f2ca
 800cd40:	3f97ffff 	.word	0x3f97ffff
 800cd44:	3c8569d7 	.word	0x3c8569d7
 800cd48:	3d4bda59 	.word	0x3d4bda59
 800cd4c:	bd6ef16b 	.word	0xbd6ef16b
 800cd50:	3d886b35 	.word	0x3d886b35
 800cd54:	3dba2e6e 	.word	0x3dba2e6e
 800cd58:	3e124925 	.word	0x3e124925
 800cd5c:	3eaaaaab 	.word	0x3eaaaaab
 800cd60:	bd15a221 	.word	0xbd15a221
 800cd64:	bd9d8795 	.word	0xbd9d8795
 800cd68:	bde38e38 	.word	0xbde38e38
 800cd6c:	be4ccccd 	.word	0xbe4ccccd
 800cd70:	401bffff 	.word	0x401bffff
 800cd74:	0801a520 	.word	0x0801a520
 800cd78:	0801a510 	.word	0x0801a510

0800cd7c <fabsf>:
 800cd7c:	ee10 3a10 	vmov	r3, s0
 800cd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd84:	ee00 3a10 	vmov	s0, r3
 800cd88:	4770      	bx	lr
	...

0800cd8c <scalbnf>:
 800cd8c:	ee10 3a10 	vmov	r3, s0
 800cd90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cd94:	d02b      	beq.n	800cdee <scalbnf+0x62>
 800cd96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cd9a:	d302      	bcc.n	800cda2 <scalbnf+0x16>
 800cd9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cda0:	4770      	bx	lr
 800cda2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cda6:	d123      	bne.n	800cdf0 <scalbnf+0x64>
 800cda8:	4b24      	ldr	r3, [pc, #144]	@ (800ce3c <scalbnf+0xb0>)
 800cdaa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ce40 <scalbnf+0xb4>
 800cdae:	4298      	cmp	r0, r3
 800cdb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cdb4:	db17      	blt.n	800cde6 <scalbnf+0x5a>
 800cdb6:	ee10 3a10 	vmov	r3, s0
 800cdba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cdbe:	3a19      	subs	r2, #25
 800cdc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cdc4:	4288      	cmp	r0, r1
 800cdc6:	dd15      	ble.n	800cdf4 <scalbnf+0x68>
 800cdc8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ce44 <scalbnf+0xb8>
 800cdcc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ce48 <scalbnf+0xbc>
 800cdd0:	ee10 3a10 	vmov	r3, s0
 800cdd4:	eeb0 7a67 	vmov.f32	s14, s15
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	bfb8      	it	lt
 800cddc:	eef0 7a66 	vmovlt.f32	s15, s13
 800cde0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cde4:	4770      	bx	lr
 800cde6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ce4c <scalbnf+0xc0>
 800cdea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cdee:	4770      	bx	lr
 800cdf0:	0dd2      	lsrs	r2, r2, #23
 800cdf2:	e7e5      	b.n	800cdc0 <scalbnf+0x34>
 800cdf4:	4410      	add	r0, r2
 800cdf6:	28fe      	cmp	r0, #254	@ 0xfe
 800cdf8:	dce6      	bgt.n	800cdc8 <scalbnf+0x3c>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	dd06      	ble.n	800ce0c <scalbnf+0x80>
 800cdfe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ce06:	ee00 3a10 	vmov	s0, r3
 800ce0a:	4770      	bx	lr
 800ce0c:	f110 0f16 	cmn.w	r0, #22
 800ce10:	da09      	bge.n	800ce26 <scalbnf+0x9a>
 800ce12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ce4c <scalbnf+0xc0>
 800ce16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ce50 <scalbnf+0xc4>
 800ce1a:	ee10 3a10 	vmov	r3, s0
 800ce1e:	eeb0 7a67 	vmov.f32	s14, s15
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	e7d9      	b.n	800cdda <scalbnf+0x4e>
 800ce26:	3019      	adds	r0, #25
 800ce28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ce30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ce54 <scalbnf+0xc8>
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	e7d7      	b.n	800cdea <scalbnf+0x5e>
 800ce3a:	bf00      	nop
 800ce3c:	ffff3cb0 	.word	0xffff3cb0
 800ce40:	4c000000 	.word	0x4c000000
 800ce44:	7149f2ca 	.word	0x7149f2ca
 800ce48:	f149f2ca 	.word	0xf149f2ca
 800ce4c:	0da24260 	.word	0x0da24260
 800ce50:	8da24260 	.word	0x8da24260
 800ce54:	33000000 	.word	0x33000000

0800ce58 <__kernel_rem_pio2f>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	ed2d 8b04 	vpush	{d8-d9}
 800ce60:	b0d9      	sub	sp, #356	@ 0x164
 800ce62:	4690      	mov	r8, r2
 800ce64:	9001      	str	r0, [sp, #4]
 800ce66:	4ab6      	ldr	r2, [pc, #728]	@ (800d140 <__kernel_rem_pio2f+0x2e8>)
 800ce68:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ce6a:	f118 0f04 	cmn.w	r8, #4
 800ce6e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ce72:	460f      	mov	r7, r1
 800ce74:	f103 3bff 	add.w	fp, r3, #4294967295
 800ce78:	db26      	blt.n	800cec8 <__kernel_rem_pio2f+0x70>
 800ce7a:	f1b8 0203 	subs.w	r2, r8, #3
 800ce7e:	bf48      	it	mi
 800ce80:	f108 0204 	addmi.w	r2, r8, #4
 800ce84:	10d2      	asrs	r2, r2, #3
 800ce86:	1c55      	adds	r5, r2, #1
 800ce88:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ce8a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800ce8e:	00e8      	lsls	r0, r5, #3
 800ce90:	eba2 060b 	sub.w	r6, r2, fp
 800ce94:	9002      	str	r0, [sp, #8]
 800ce96:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ce9a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ce9e:	ac1c      	add	r4, sp, #112	@ 0x70
 800cea0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800cea4:	2000      	movs	r0, #0
 800cea6:	4560      	cmp	r0, ip
 800cea8:	dd10      	ble.n	800cecc <__kernel_rem_pio2f+0x74>
 800ceaa:	a91c      	add	r1, sp, #112	@ 0x70
 800ceac:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ceb0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ceb4:	2600      	movs	r6, #0
 800ceb6:	4556      	cmp	r6, sl
 800ceb8:	dc24      	bgt.n	800cf04 <__kernel_rem_pio2f+0xac>
 800ceba:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cebe:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800cec2:	4684      	mov	ip, r0
 800cec4:	2400      	movs	r4, #0
 800cec6:	e016      	b.n	800cef6 <__kernel_rem_pio2f+0x9e>
 800cec8:	2200      	movs	r2, #0
 800ceca:	e7dc      	b.n	800ce86 <__kernel_rem_pio2f+0x2e>
 800cecc:	42c6      	cmn	r6, r0
 800cece:	bf5d      	ittte	pl
 800ced0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ced4:	ee07 1a90 	vmovpl	s15, r1
 800ced8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cedc:	eef0 7a47 	vmovmi.f32	s15, s14
 800cee0:	ece4 7a01 	vstmia	r4!, {s15}
 800cee4:	3001      	adds	r0, #1
 800cee6:	e7de      	b.n	800cea6 <__kernel_rem_pio2f+0x4e>
 800cee8:	ecfe 6a01 	vldmia	lr!, {s13}
 800ceec:	ed3c 7a01 	vldmdb	ip!, {s14}
 800cef0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cef4:	3401      	adds	r4, #1
 800cef6:	455c      	cmp	r4, fp
 800cef8:	ddf6      	ble.n	800cee8 <__kernel_rem_pio2f+0x90>
 800cefa:	ece9 7a01 	vstmia	r9!, {s15}
 800cefe:	3601      	adds	r6, #1
 800cf00:	3004      	adds	r0, #4
 800cf02:	e7d8      	b.n	800ceb6 <__kernel_rem_pio2f+0x5e>
 800cf04:	a908      	add	r1, sp, #32
 800cf06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf0a:	9104      	str	r1, [sp, #16]
 800cf0c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800cf0e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d14c <__kernel_rem_pio2f+0x2f4>
 800cf12:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d148 <__kernel_rem_pio2f+0x2f0>
 800cf16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cf1a:	9203      	str	r2, [sp, #12]
 800cf1c:	4654      	mov	r4, sl
 800cf1e:	00a2      	lsls	r2, r4, #2
 800cf20:	9205      	str	r2, [sp, #20]
 800cf22:	aa58      	add	r2, sp, #352	@ 0x160
 800cf24:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cf28:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800cf2c:	a944      	add	r1, sp, #272	@ 0x110
 800cf2e:	aa08      	add	r2, sp, #32
 800cf30:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800cf34:	4694      	mov	ip, r2
 800cf36:	4626      	mov	r6, r4
 800cf38:	2e00      	cmp	r6, #0
 800cf3a:	dc4c      	bgt.n	800cfd6 <__kernel_rem_pio2f+0x17e>
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf42:	f7ff ff23 	bl	800cd8c <scalbnf>
 800cf46:	eeb0 8a40 	vmov.f32	s16, s0
 800cf4a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800cf4e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cf52:	f000 f9e9 	bl	800d328 <floorf>
 800cf56:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800cf5a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cf5e:	2d00      	cmp	r5, #0
 800cf60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf64:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cf68:	ee17 9a90 	vmov	r9, s15
 800cf6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf70:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cf74:	dd41      	ble.n	800cffa <__kernel_rem_pio2f+0x1a2>
 800cf76:	f104 3cff 	add.w	ip, r4, #4294967295
 800cf7a:	a908      	add	r1, sp, #32
 800cf7c:	f1c5 0e08 	rsb	lr, r5, #8
 800cf80:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800cf84:	fa46 f00e 	asr.w	r0, r6, lr
 800cf88:	4481      	add	r9, r0
 800cf8a:	fa00 f00e 	lsl.w	r0, r0, lr
 800cf8e:	1a36      	subs	r6, r6, r0
 800cf90:	f1c5 0007 	rsb	r0, r5, #7
 800cf94:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800cf98:	4106      	asrs	r6, r0
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	dd3c      	ble.n	800d018 <__kernel_rem_pio2f+0x1c0>
 800cf9e:	f04f 0e00 	mov.w	lr, #0
 800cfa2:	f109 0901 	add.w	r9, r9, #1
 800cfa6:	4670      	mov	r0, lr
 800cfa8:	4574      	cmp	r4, lr
 800cfaa:	dc68      	bgt.n	800d07e <__kernel_rem_pio2f+0x226>
 800cfac:	2d00      	cmp	r5, #0
 800cfae:	dd03      	ble.n	800cfb8 <__kernel_rem_pio2f+0x160>
 800cfb0:	2d01      	cmp	r5, #1
 800cfb2:	d074      	beq.n	800d09e <__kernel_rem_pio2f+0x246>
 800cfb4:	2d02      	cmp	r5, #2
 800cfb6:	d07d      	beq.n	800d0b4 <__kernel_rem_pio2f+0x25c>
 800cfb8:	2e02      	cmp	r6, #2
 800cfba:	d12d      	bne.n	800d018 <__kernel_rem_pio2f+0x1c0>
 800cfbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cfc0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cfc4:	b340      	cbz	r0, 800d018 <__kernel_rem_pio2f+0x1c0>
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	9306      	str	r3, [sp, #24]
 800cfca:	f7ff fedf 	bl	800cd8c <scalbnf>
 800cfce:	9b06      	ldr	r3, [sp, #24]
 800cfd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cfd4:	e020      	b.n	800d018 <__kernel_rem_pio2f+0x1c0>
 800cfd6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cfda:	3e01      	subs	r6, #1
 800cfdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfe4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cfe8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cfec:	ecac 0a01 	vstmia	ip!, {s0}
 800cff0:	ed30 0a01 	vldmdb	r0!, {s0}
 800cff4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cff8:	e79e      	b.n	800cf38 <__kernel_rem_pio2f+0xe0>
 800cffa:	d105      	bne.n	800d008 <__kernel_rem_pio2f+0x1b0>
 800cffc:	1e60      	subs	r0, r4, #1
 800cffe:	a908      	add	r1, sp, #32
 800d000:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d004:	11f6      	asrs	r6, r6, #7
 800d006:	e7c8      	b.n	800cf9a <__kernel_rem_pio2f+0x142>
 800d008:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d00c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d014:	da31      	bge.n	800d07a <__kernel_rem_pio2f+0x222>
 800d016:	2600      	movs	r6, #0
 800d018:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d020:	f040 8098 	bne.w	800d154 <__kernel_rem_pio2f+0x2fc>
 800d024:	1e60      	subs	r0, r4, #1
 800d026:	2200      	movs	r2, #0
 800d028:	4550      	cmp	r0, sl
 800d02a:	da4b      	bge.n	800d0c4 <__kernel_rem_pio2f+0x26c>
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	d065      	beq.n	800d0fc <__kernel_rem_pio2f+0x2a4>
 800d030:	3c01      	subs	r4, #1
 800d032:	ab08      	add	r3, sp, #32
 800d034:	3d08      	subs	r5, #8
 800d036:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0f8      	beq.n	800d030 <__kernel_rem_pio2f+0x1d8>
 800d03e:	4628      	mov	r0, r5
 800d040:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d044:	f7ff fea2 	bl	800cd8c <scalbnf>
 800d048:	1c63      	adds	r3, r4, #1
 800d04a:	aa44      	add	r2, sp, #272	@ 0x110
 800d04c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d14c <__kernel_rem_pio2f+0x2f4>
 800d050:	0099      	lsls	r1, r3, #2
 800d052:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d056:	4623      	mov	r3, r4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f280 80a9 	bge.w	800d1b0 <__kernel_rem_pio2f+0x358>
 800d05e:	4623      	mov	r3, r4
 800d060:	2b00      	cmp	r3, #0
 800d062:	f2c0 80c7 	blt.w	800d1f4 <__kernel_rem_pio2f+0x39c>
 800d066:	aa44      	add	r2, sp, #272	@ 0x110
 800d068:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d06c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d144 <__kernel_rem_pio2f+0x2ec>
 800d070:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800d074:	2000      	movs	r0, #0
 800d076:	1ae2      	subs	r2, r4, r3
 800d078:	e0b1      	b.n	800d1de <__kernel_rem_pio2f+0x386>
 800d07a:	2602      	movs	r6, #2
 800d07c:	e78f      	b.n	800cf9e <__kernel_rem_pio2f+0x146>
 800d07e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d082:	b948      	cbnz	r0, 800d098 <__kernel_rem_pio2f+0x240>
 800d084:	b121      	cbz	r1, 800d090 <__kernel_rem_pio2f+0x238>
 800d086:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d08a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d08e:	2101      	movs	r1, #1
 800d090:	f10e 0e01 	add.w	lr, lr, #1
 800d094:	4608      	mov	r0, r1
 800d096:	e787      	b.n	800cfa8 <__kernel_rem_pio2f+0x150>
 800d098:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d09c:	e7f5      	b.n	800d08a <__kernel_rem_pio2f+0x232>
 800d09e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d0a2:	aa08      	add	r2, sp, #32
 800d0a4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d0a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d0ac:	a908      	add	r1, sp, #32
 800d0ae:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d0b2:	e781      	b.n	800cfb8 <__kernel_rem_pio2f+0x160>
 800d0b4:	f104 3cff 	add.w	ip, r4, #4294967295
 800d0b8:	aa08      	add	r2, sp, #32
 800d0ba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d0be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d0c2:	e7f3      	b.n	800d0ac <__kernel_rem_pio2f+0x254>
 800d0c4:	a908      	add	r1, sp, #32
 800d0c6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d0ca:	3801      	subs	r0, #1
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	e7ab      	b.n	800d028 <__kernel_rem_pio2f+0x1d0>
 800d0d0:	3201      	adds	r2, #1
 800d0d2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	d0fa      	beq.n	800d0d0 <__kernel_rem_pio2f+0x278>
 800d0da:	9905      	ldr	r1, [sp, #20]
 800d0dc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d0e0:	eb0d 0001 	add.w	r0, sp, r1
 800d0e4:	18e6      	adds	r6, r4, r3
 800d0e6:	a91c      	add	r1, sp, #112	@ 0x70
 800d0e8:	f104 0c01 	add.w	ip, r4, #1
 800d0ec:	384c      	subs	r0, #76	@ 0x4c
 800d0ee:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d0f2:	4422      	add	r2, r4
 800d0f4:	4562      	cmp	r2, ip
 800d0f6:	da04      	bge.n	800d102 <__kernel_rem_pio2f+0x2aa>
 800d0f8:	4614      	mov	r4, r2
 800d0fa:	e710      	b.n	800cf1e <__kernel_rem_pio2f+0xc6>
 800d0fc:	9804      	ldr	r0, [sp, #16]
 800d0fe:	2201      	movs	r2, #1
 800d100:	e7e7      	b.n	800d0d2 <__kernel_rem_pio2f+0x27a>
 800d102:	9903      	ldr	r1, [sp, #12]
 800d104:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d108:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d10c:	9105      	str	r1, [sp, #20]
 800d10e:	ee07 1a90 	vmov	s15, r1
 800d112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d116:	2400      	movs	r4, #0
 800d118:	ece6 7a01 	vstmia	r6!, {s15}
 800d11c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800d120:	46b1      	mov	r9, r6
 800d122:	455c      	cmp	r4, fp
 800d124:	dd04      	ble.n	800d130 <__kernel_rem_pio2f+0x2d8>
 800d126:	ece0 7a01 	vstmia	r0!, {s15}
 800d12a:	f10c 0c01 	add.w	ip, ip, #1
 800d12e:	e7e1      	b.n	800d0f4 <__kernel_rem_pio2f+0x29c>
 800d130:	ecfe 6a01 	vldmia	lr!, {s13}
 800d134:	ed39 7a01 	vldmdb	r9!, {s14}
 800d138:	3401      	adds	r4, #1
 800d13a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d13e:	e7f0      	b.n	800d122 <__kernel_rem_pio2f+0x2ca>
 800d140:	0801a55c 	.word	0x0801a55c
 800d144:	0801a530 	.word	0x0801a530
 800d148:	43800000 	.word	0x43800000
 800d14c:	3b800000 	.word	0x3b800000
 800d150:	00000000 	.word	0x00000000
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	eeb0 0a48 	vmov.f32	s0, s16
 800d15a:	eba3 0008 	sub.w	r0, r3, r8
 800d15e:	f7ff fe15 	bl	800cd8c <scalbnf>
 800d162:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d148 <__kernel_rem_pio2f+0x2f0>
 800d166:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16e:	db19      	blt.n	800d1a4 <__kernel_rem_pio2f+0x34c>
 800d170:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d14c <__kernel_rem_pio2f+0x2f4>
 800d174:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d178:	aa08      	add	r2, sp, #32
 800d17a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d17e:	3508      	adds	r5, #8
 800d180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d184:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d18c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d190:	ee10 3a10 	vmov	r3, s0
 800d194:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d198:	ee17 3a90 	vmov	r3, s15
 800d19c:	3401      	adds	r4, #1
 800d19e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d1a2:	e74c      	b.n	800d03e <__kernel_rem_pio2f+0x1e6>
 800d1a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d1a8:	aa08      	add	r2, sp, #32
 800d1aa:	ee10 3a10 	vmov	r3, s0
 800d1ae:	e7f6      	b.n	800d19e <__kernel_rem_pio2f+0x346>
 800d1b0:	a808      	add	r0, sp, #32
 800d1b2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d1b6:	9001      	str	r0, [sp, #4]
 800d1b8:	ee07 0a90 	vmov	s15, r0
 800d1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d1c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d1ca:	ed62 7a01 	vstmdb	r2!, {s15}
 800d1ce:	e743      	b.n	800d058 <__kernel_rem_pio2f+0x200>
 800d1d0:	ecfc 6a01 	vldmia	ip!, {s13}
 800d1d4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d1d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d1dc:	3001      	adds	r0, #1
 800d1de:	4550      	cmp	r0, sl
 800d1e0:	dc01      	bgt.n	800d1e6 <__kernel_rem_pio2f+0x38e>
 800d1e2:	4290      	cmp	r0, r2
 800d1e4:	ddf4      	ble.n	800d1d0 <__kernel_rem_pio2f+0x378>
 800d1e6:	a858      	add	r0, sp, #352	@ 0x160
 800d1e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d1ec:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	e735      	b.n	800d060 <__kernel_rem_pio2f+0x208>
 800d1f4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	dc09      	bgt.n	800d20e <__kernel_rem_pio2f+0x3b6>
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	dc27      	bgt.n	800d24e <__kernel_rem_pio2f+0x3f6>
 800d1fe:	d040      	beq.n	800d282 <__kernel_rem_pio2f+0x42a>
 800d200:	f009 0007 	and.w	r0, r9, #7
 800d204:	b059      	add	sp, #356	@ 0x164
 800d206:	ecbd 8b04 	vpop	{d8-d9}
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d210:	2b03      	cmp	r3, #3
 800d212:	d1f5      	bne.n	800d200 <__kernel_rem_pio2f+0x3a8>
 800d214:	aa30      	add	r2, sp, #192	@ 0xc0
 800d216:	1f0b      	subs	r3, r1, #4
 800d218:	4413      	add	r3, r2
 800d21a:	461a      	mov	r2, r3
 800d21c:	4620      	mov	r0, r4
 800d21e:	2800      	cmp	r0, #0
 800d220:	dc50      	bgt.n	800d2c4 <__kernel_rem_pio2f+0x46c>
 800d222:	4622      	mov	r2, r4
 800d224:	2a01      	cmp	r2, #1
 800d226:	dc5d      	bgt.n	800d2e4 <__kernel_rem_pio2f+0x48c>
 800d228:	ab30      	add	r3, sp, #192	@ 0xc0
 800d22a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800d22e:	440b      	add	r3, r1
 800d230:	2c01      	cmp	r4, #1
 800d232:	dc67      	bgt.n	800d304 <__kernel_rem_pio2f+0x4ac>
 800d234:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d238:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d23c:	2e00      	cmp	r6, #0
 800d23e:	d167      	bne.n	800d310 <__kernel_rem_pio2f+0x4b8>
 800d240:	edc7 6a00 	vstr	s13, [r7]
 800d244:	ed87 7a01 	vstr	s14, [r7, #4]
 800d248:	edc7 7a02 	vstr	s15, [r7, #8]
 800d24c:	e7d8      	b.n	800d200 <__kernel_rem_pio2f+0x3a8>
 800d24e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d250:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800d254:	440b      	add	r3, r1
 800d256:	4622      	mov	r2, r4
 800d258:	2a00      	cmp	r2, #0
 800d25a:	da24      	bge.n	800d2a6 <__kernel_rem_pio2f+0x44e>
 800d25c:	b34e      	cbz	r6, 800d2b2 <__kernel_rem_pio2f+0x45a>
 800d25e:	eef1 7a47 	vneg.f32	s15, s14
 800d262:	edc7 7a00 	vstr	s15, [r7]
 800d266:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d26a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d26e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d270:	2301      	movs	r3, #1
 800d272:	429c      	cmp	r4, r3
 800d274:	da20      	bge.n	800d2b8 <__kernel_rem_pio2f+0x460>
 800d276:	b10e      	cbz	r6, 800d27c <__kernel_rem_pio2f+0x424>
 800d278:	eef1 7a67 	vneg.f32	s15, s15
 800d27c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d280:	e7be      	b.n	800d200 <__kernel_rem_pio2f+0x3a8>
 800d282:	ab30      	add	r3, sp, #192	@ 0xc0
 800d284:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d150 <__kernel_rem_pio2f+0x2f8>
 800d288:	440b      	add	r3, r1
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	da05      	bge.n	800d29a <__kernel_rem_pio2f+0x442>
 800d28e:	b10e      	cbz	r6, 800d294 <__kernel_rem_pio2f+0x43c>
 800d290:	eef1 7a67 	vneg.f32	s15, s15
 800d294:	edc7 7a00 	vstr	s15, [r7]
 800d298:	e7b2      	b.n	800d200 <__kernel_rem_pio2f+0x3a8>
 800d29a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d29e:	3c01      	subs	r4, #1
 800d2a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2a4:	e7f1      	b.n	800d28a <__kernel_rem_pio2f+0x432>
 800d2a6:	ed73 7a01 	vldmdb	r3!, {s15}
 800d2aa:	3a01      	subs	r2, #1
 800d2ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2b0:	e7d2      	b.n	800d258 <__kernel_rem_pio2f+0x400>
 800d2b2:	eef0 7a47 	vmov.f32	s15, s14
 800d2b6:	e7d4      	b.n	800d262 <__kernel_rem_pio2f+0x40a>
 800d2b8:	ecb2 7a01 	vldmia	r2!, {s14}
 800d2bc:	3301      	adds	r3, #1
 800d2be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2c2:	e7d6      	b.n	800d272 <__kernel_rem_pio2f+0x41a>
 800d2c4:	ed72 7a01 	vldmdb	r2!, {s15}
 800d2c8:	edd2 6a01 	vldr	s13, [r2, #4]
 800d2cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d2d0:	3801      	subs	r0, #1
 800d2d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2d6:	ed82 7a00 	vstr	s14, [r2]
 800d2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2de:	edc2 7a01 	vstr	s15, [r2, #4]
 800d2e2:	e79c      	b.n	800d21e <__kernel_rem_pio2f+0x3c6>
 800d2e4:	ed73 7a01 	vldmdb	r3!, {s15}
 800d2e8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d2ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d2f0:	3a01      	subs	r2, #1
 800d2f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2f6:	ed83 7a00 	vstr	s14, [r3]
 800d2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2fe:	edc3 7a01 	vstr	s15, [r3, #4]
 800d302:	e78f      	b.n	800d224 <__kernel_rem_pio2f+0x3cc>
 800d304:	ed33 7a01 	vldmdb	r3!, {s14}
 800d308:	3c01      	subs	r4, #1
 800d30a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d30e:	e78f      	b.n	800d230 <__kernel_rem_pio2f+0x3d8>
 800d310:	eef1 6a66 	vneg.f32	s13, s13
 800d314:	eeb1 7a47 	vneg.f32	s14, s14
 800d318:	edc7 6a00 	vstr	s13, [r7]
 800d31c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d320:	eef1 7a67 	vneg.f32	s15, s15
 800d324:	e790      	b.n	800d248 <__kernel_rem_pio2f+0x3f0>
 800d326:	bf00      	nop

0800d328 <floorf>:
 800d328:	ee10 3a10 	vmov	r3, s0
 800d32c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d330:	3a7f      	subs	r2, #127	@ 0x7f
 800d332:	2a16      	cmp	r2, #22
 800d334:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d338:	dc2b      	bgt.n	800d392 <floorf+0x6a>
 800d33a:	2a00      	cmp	r2, #0
 800d33c:	da12      	bge.n	800d364 <floorf+0x3c>
 800d33e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d3a4 <floorf+0x7c>
 800d342:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34e:	dd06      	ble.n	800d35e <floorf+0x36>
 800d350:	2b00      	cmp	r3, #0
 800d352:	da24      	bge.n	800d39e <floorf+0x76>
 800d354:	2900      	cmp	r1, #0
 800d356:	4b14      	ldr	r3, [pc, #80]	@ (800d3a8 <floorf+0x80>)
 800d358:	bf08      	it	eq
 800d35a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d35e:	ee00 3a10 	vmov	s0, r3
 800d362:	4770      	bx	lr
 800d364:	4911      	ldr	r1, [pc, #68]	@ (800d3ac <floorf+0x84>)
 800d366:	4111      	asrs	r1, r2
 800d368:	420b      	tst	r3, r1
 800d36a:	d0fa      	beq.n	800d362 <floorf+0x3a>
 800d36c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d3a4 <floorf+0x7c>
 800d370:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d374:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	ddef      	ble.n	800d35e <floorf+0x36>
 800d37e:	2b00      	cmp	r3, #0
 800d380:	bfbe      	ittt	lt
 800d382:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d386:	fa40 f202 	asrlt.w	r2, r0, r2
 800d38a:	189b      	addlt	r3, r3, r2
 800d38c:	ea23 0301 	bic.w	r3, r3, r1
 800d390:	e7e5      	b.n	800d35e <floorf+0x36>
 800d392:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d396:	d3e4      	bcc.n	800d362 <floorf+0x3a>
 800d398:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d39c:	4770      	bx	lr
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e7dd      	b.n	800d35e <floorf+0x36>
 800d3a2:	bf00      	nop
 800d3a4:	7149f2ca 	.word	0x7149f2ca
 800d3a8:	bf800000 	.word	0xbf800000
 800d3ac:	007fffff 	.word	0x007fffff

0800d3b0 <_init>:
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	bf00      	nop
 800d3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b6:	bc08      	pop	{r3}
 800d3b8:	469e      	mov	lr, r3
 800d3ba:	4770      	bx	lr

0800d3bc <_fini>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr
