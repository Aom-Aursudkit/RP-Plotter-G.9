
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d190  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016658  0800d368  0800d368  0000e368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080239c0  080239c0  0002528c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080239c0  080239c0  000249c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080239c8  080239c8  0002528c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080239c8  080239c8  000249c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080239cc  080239cc  000249cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  080239d0  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000290  08023c5c  00025290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000157c  08023c5c  0002557c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002528c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183a3  00000000  00000000  000252bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  0003d65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00040448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed3  00000000  00000000  00041740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747f  00000000  00000000  00042613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c4f  00000000  00000000  00069a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001001e5  00000000  00000000  000806e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001808c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  0018090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00185f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d350 	.word	0x0800d350

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800d350 	.word	0x0800d350

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002ac 	.word	0x200002ac

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002ac 	.word	0x200002ac

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a f855 	bl	800b204 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f853 	bl	8009238 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 ffdd 	bl	800b158 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fff4 	bl	800b190 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fa9b 	bl	800a6ec <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 fbc3 	bl	800a960 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fdad 	bl	8007d50 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 f96e 	bl	80084e0 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002ac 	.word	0x200002ac
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET(int8_t slot, float dist, float ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dc04      	bgt.n	80012c2 <SET_TARGET+0x3a>
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	3310      	adds	r3, #16
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <SET_TARGET+0x42>
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	3313      	adds	r3, #19
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SET_TARGET+0x94>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dc05      	bgt.n	80012fc <SET_TARGET+0x74>
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	3310      	adds	r3, #16
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3301      	adds	r3, #1
 80012fa:	e004      	b.n	8001306 <SET_TARGET+0x7e>
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	3313      	adds	r3, #19
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3301      	adds	r3, #1
 8001306:	b291      	uxth	r1, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SET_TARGET+0x94>)
 800130a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000112c 	.word	0x2000112c

08001320 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08b      	sub	sp, #44	@ 0x2c
 8001324:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001326:	4bae      	ldr	r3, [pc, #696]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001328:	f645 1261 	movw	r2, #22881	@ 0x5961
 800132c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800132e:	4bad      	ldr	r3, [pc, #692]	@ (80015e4 <Modbus_Protocal_Worker+0x2c4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <Modbus_Protocal_Worker+0x1a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <Modbus_Protocal_Worker+0x1c>
 800133a:	2201      	movs	r2, #1
 800133c:	4ba8      	ldr	r3, [pc, #672]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 800133e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001340:	4ba7      	ldr	r3, [pc, #668]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4ba5      	ldr	r3, [pc, #660]	@ (80015e8 <Modbus_Protocal_Worker+0x2c8>)
 8001352:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001354:	4ba2      	ldr	r3, [pc, #648]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001356:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80015ec <Modbus_Protocal_Worker+0x2cc>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4ba1      	ldr	r3, [pc, #644]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = (DEG_TO_RED01(REG16(REG_TARGET_GOAL_THETA)));
 8001370:	4b9b      	ldr	r3, [pc, #620]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001372:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8a0 	bl	80004bc <__aeabi_i2d>
 800137c:	a394      	add	r3, pc, #592	@ (adr r3, 80015d0 <Modbus_Protocal_Worker+0x2b0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f905 	bl	8000590 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fbb9 	bl	8000b04 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	4a97      	ldr	r2, [pc, #604]	@ (80015f4 <Modbus_Protocal_Worker+0x2d4>)
 8001396:	6013      	str	r3, [r2, #0]
//	TargetP_BaseSystem = (DEG_TO_RED01(REG16(REG_TARGET_GOAL_THETA)) - (M_PI / 2.0f));

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 8001398:	f107 040c 	add.w	r4, r7, #12
 800139c:	f107 0210 	add.w	r2, r7, #16
 80013a0:	f107 0114 	add.w	r1, r7, #20
 80013a4:	f107 0018 	add.w	r0, r7, #24
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4623      	mov	r3, r4
 80013b4:	f003 fdee 	bl	8004f94 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
//	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
	float mappedDeg = RAD_TO_DEG(RadPosition);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f890 	bl	80004e0 <__aeabi_f2d>
 80013c0:	a385      	add	r3, pc, #532	@ (adr r3, 80015d8 <Modbus_Protocal_Worker+0x2b8>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f8e3 	bl	8000590 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fb97 	bl	8000b04 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 80013da:	edd7 7a07 	vldr	s15, [r7, #28]
 80013de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	ee17 3a90 	vmov	r3, s15
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b7b      	ldr	r3, [pc, #492]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 80013f4:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f871 	bl	80004e0 <__aeabi_f2d>
 80013fe:	a376      	add	r3, pc, #472	@ (adr r3, 80015d8 <Modbus_Protocal_Worker+0x2b8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f8c4 	bl	8000590 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fb78 	bl	8000b04 <__aeabi_d2f>
 8001414:	ee07 0a90 	vmov	s15, r0
 8001418:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 800141c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b21b      	sxth	r3, r3
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001432:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f852 	bl	80004e0 <__aeabi_f2d>
 800143c:	a366      	add	r3, pc, #408	@ (adr r3, 80015d8 <Modbus_Protocal_Worker+0x2b8>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8a5 	bl	8000590 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb59 	bl	8000b04 <__aeabi_d2f>
 8001452:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001456:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800145a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 3a90 	vmov	r3, s15
 800146a:	b21b      	sxth	r3, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001470:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 8001472:	edd7 7a06 	vldr	s15, [r7, #24]
 8001476:	eef0 7ae7 	vabs.f32	s15, s15
 800147a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b54      	ldr	r3, [pc, #336]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 8001490:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 8001492:	edd7 7a05 	vldr	s15, [r7, #20]
 8001496:	eef0 7ae7 	vabs.f32	s15, s15
 800149a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a6:	ee17 3a90 	vmov	r3, s15
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b4c      	ldr	r3, [pc, #304]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 80014b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 80014b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <Modbus_Protocal_Worker+0x2c0>)
 80014cc:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 80014ce:	4b4a      	ldr	r3, [pc, #296]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	7ddb      	ldrb	r3, [r3, #23]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d80a      	bhi.n	80014f0 <Modbus_Protocal_Worker+0x1d0>
 80014da:	a201      	add	r2, pc, #4	@ (adr r2, 80014e0 <Modbus_Protocal_Worker+0x1c0>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080014fb 	.word	0x080014fb
 80014e4:	080016c1 	.word	0x080016c1
 80014e8:	08001587 	.word	0x08001587
 80014ec:	080015fd 	.word	0x080015fd
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	75da      	strb	r2, [r3, #23]
		break;
 80014f8:	e0fa      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80014fa:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <Modbus_Protocal_Worker+0x1f4>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2202      	movs	r2, #2
 800150c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800150e:	f000 f9e5 	bl	80018dc <Modbus_Emission>
 8001512:	e018      	b.n	8001546 <Modbus_Protocal_Worker+0x226>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001514:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800151e:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001528:	b29b      	uxth	r3, r3
 800152a:	429a      	cmp	r2, r3
 800152c:	d00b      	beq.n	8001546 <Modbus_Protocal_Worker+0x226>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800152e:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001536:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 800153e:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2203      	movs	r2, #3
 8001544:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001546:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001550:	2b20      	cmp	r3, #32
 8001552:	f040 80c6 	bne.w	80016e2 <Modbus_Protocal_Worker+0x3c2>
			hModbus->modbusUartStructure.RxTail = 0;
 8001556:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001572:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001576:	4413      	add	r3, r2
 8001578:	3302      	adds	r3, #2
 800157a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800157e:	4619      	mov	r1, r3
 8001580:	f009 f9ee 	bl	800a960 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 8001584:	e0ad      	b.n	80016e2 <Modbus_Protocal_Worker+0x3c2>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	7d1b      	ldrb	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80aa 	beq.w	80016e6 <Modbus_Protocal_Worker+0x3c6>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	22fe      	movs	r2, #254	@ 0xfe
 8001598:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015b8:	1a8a      	subs	r2, r1, r2
 80015ba:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015bc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2204      	movs	r2, #4
 80015c6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015c8:	e08d      	b.n	80016e6 <Modbus_Protocal_Worker+0x3c6>
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	03b761f5 	.word	0x03b761f5
 80015d4:	3f5c9871 	.word	0x3f5c9871
 80015d8:	1a63c1f8 	.word	0x1a63c1f8
 80015dc:	404ca5dc 	.word	0x404ca5dc
 80015e0:	2000112c 	.word	0x2000112c
 80015e4:	20000bcf 	.word	0x20000bcf
 80015e8:	20000c44 	.word	0x20000c44
 80015ec:	3dcccccd 	.word	0x3dcccccd
 80015f0:	20000c3c 	.word	0x20000c3c
 80015f4:	20000c40 	.word	0x20000c40
 80015f8:	200002ac 	.word	0x200002ac
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80015fc:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001604:	f113 0f02 	cmn.w	r3, #2
 8001608:	d150      	bne.n	80016ac <Modbus_Protocal_Worker+0x38c>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800160a:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 8001612:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 8001622:	3b02      	subs	r3, #2
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff fdf6 	bl	8001218 <CRC16>
 800162c:	4603      	mov	r3, r0
 800162e:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 8001630:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 800163e:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001640:	440b      	add	r3, r1
 8001642:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d10c      	bne.n	8001664 <Modbus_Protocal_Worker+0x344>
					&& CalculateCRC.U8[1]
 800164a:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001658:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800165a:	440b      	add	r3, r1
 800165c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d004      	beq.n	800166e <Modbus_Protocal_Worker+0x34e>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	22ff      	movs	r2, #255	@ 0xff
 800166a:	759a      	strb	r2, [r3, #22]
				break;
 800166c:	e040      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d113      	bne.n	80016a8 <Modbus_Protocal_Worker+0x388>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001690:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800169a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800169c:	461a      	mov	r2, r3
 800169e:	f00a ff3d 	bl	800c51c <memcpy>

			//execute command
			Modbus_frame_response();
 80016a2:	f000 f903 	bl	80018ac <Modbus_frame_response>
 80016a6:	e001      	b.n	80016ac <Modbus_Protocal_Worker+0x38c>
				break;
 80016a8:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80016aa:	e021      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
		if (hModbus->Flag_T35TimeOut) {
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	7d5b      	ldrb	r3, [r3, #21]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d019      	beq.n	80016ea <Modbus_Protocal_Worker+0x3ca>
			hModbus->Mstatus = Modbus_state_Idle;
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	75da      	strb	r2, [r3, #23]
		break;
 80016be:	e014      	b.n	80016ea <Modbus_Protocal_Worker+0x3ca>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d10f      	bne.n	80016ee <Modbus_Protocal_Worker+0x3ce>
			hModbus->TxCount = 0;
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <Modbus_Protocal_Worker+0x3d8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	75da      	strb	r2, [r3, #23]
		break;
 80016e0:	e005      	b.n	80016ee <Modbus_Protocal_Worker+0x3ce>
		break;
 80016e2:	bf00      	nop
 80016e4:	e004      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
		break;
 80016e6:	bf00      	nop
 80016e8:	e002      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
		break;
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <Modbus_Protocal_Worker+0x3d0>
		break;
 80016ee:	bf00      	nop
}
 80016f0:	bf00      	nop
 80016f2:	3724      	adds	r7, #36	@ 0x24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	200002ac 	.word	0x200002ac

080016fc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001702:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <modbusWrite1Register+0x7c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	7e5b      	ldrb	r3, [r3, #25]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <modbusWrite1Register+0x7c>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	7e92      	ldrb	r2, [r2, #26]
 8001712:	4413      	add	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <modbusWrite1Register+0x7c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d903      	bls.n	800172a <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001722:	2002      	movs	r0, #2
 8001724:	f000 f8a0 	bl	8001868 <ModbusErrorReply>
		return;
 8001728:	e023      	b.n	8001772 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <modbusWrite1Register+0x7c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <modbusWrite1Register+0x7c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	7ed2      	ldrb	r2, [r2, #27]
 800173c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <modbusWrite1Register+0x7c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <modbusWrite1Register+0x7c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	440b      	add	r3, r1
 800174e:	7f12      	ldrb	r2, [r2, #28]
 8001750:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <modbusWrite1Register+0x7c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800175a:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <modbusWrite1Register+0x7c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3318      	adds	r3, #24
 8001760:	2208      	movs	r2, #8
 8001762:	4619      	mov	r1, r3
 8001764:	f00a feda 	bl	800c51c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <modbusWrite1Register+0x7c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2205      	movs	r2, #5
 800176e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200002ac 	.word	0x200002ac

0800177c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001782:	4b38      	ldr	r3, [pc, #224]	@ (8001864 <modbusRead1Register+0xe8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7edb      	ldrb	r3, [r3, #27]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 800178c:	4a35      	ldr	r2, [pc, #212]	@ (8001864 <modbusRead1Register+0xe8>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001792:	4413      	add	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <modbusRead1Register+0xe8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	7e5b      	ldrb	r3, [r3, #25]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4a30      	ldr	r2, [pc, #192]	@ (8001864 <modbusRead1Register+0xe8>)
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	7e92      	ldrb	r2, [r2, #26]
 80017a6:	4413      	add	r3, r2
 80017a8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <modbusRead1Register+0x3a>
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	2b7d      	cmp	r3, #125	@ 0x7d
 80017b4:	d903      	bls.n	80017be <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80017b6:	2003      	movs	r0, #3
 80017b8:	f000 f856 	bl	8001868 <ModbusErrorReply>
		return;
 80017bc:	e04e      	b.n	800185c <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80017be:	88ba      	ldrh	r2, [r7, #4]
 80017c0:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <modbusRead1Register+0xe8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d808      	bhi.n	80017dc <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80017ca:	88ba      	ldrh	r2, [r7, #4]
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <modbusRead1Register+0xe8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d903      	bls.n	80017e4 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017dc:	2002      	movs	r0, #2
 80017de:	f000 f843 	bl	8001868 <ModbusErrorReply>
		return;
 80017e2:	e03b      	b.n	800185c <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <modbusRead1Register+0xe8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <modbusRead1Register+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0052      	lsls	r2, r2, #1
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80017fe:	2400      	movs	r4, #0
 8001800:	e020      	b.n	8001844 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <modbusRead1Register+0xe8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	4423      	add	r3, r4
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <modbusRead1Register+0xe8>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	1c63      	adds	r3, r4, #1
 8001816:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001818:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 800181a:	4413      	add	r3, r2
 800181c:	460a      	mov	r2, r1
 800181e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <modbusRead1Register+0xe8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	4423      	add	r3, r4
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <modbusRead1Register+0xe8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	0063      	lsls	r3, r4, #1
 8001836:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001838:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 800183a:	4413      	add	r3, r2
 800183c:	460a      	mov	r2, r1
 800183e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001842:	3401      	adds	r4, #1
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	429c      	cmp	r4, r3
 8001848:	dbdb      	blt.n	8001802 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	3301      	adds	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <modbusRead1Register+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0052      	lsls	r2, r2, #1
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
 8001862:	bf00      	nop
 8001864:	200002ac 	.word	0x200002ac

08001868 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <ModbusErrorReply+0x40>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	7e1a      	ldrb	r2, [r3, #24]
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <ModbusErrorReply+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <ModbusErrorReply+0x40>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <ModbusErrorReply+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200002ac 	.word	0x200002ac

080018ac <Modbus_frame_response>:

void Modbus_frame_response() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <Modbus_frame_response+0x2c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d004      	beq.n	80018c4 <Modbus_frame_response+0x18>
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d105      	bne.n	80018ca <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80018be:	f7ff ff1d 	bl	80016fc <modbusWrite1Register>
		break;
 80018c2:	e006      	b.n	80018d2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80018c4:	f7ff ff5a 	bl	800177c <modbusRead1Register>
		break;
 80018c8:	e003      	b.n	80018d2 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff ffcc 	bl	8001868 <ModbusErrorReply>
		break;
 80018d0:	bf00      	nop

	}
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002ac 	.word	0x200002ac

080018dc <Modbus_Emission>:

void Modbus_Emission() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <Modbus_Emission+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d15d      	bne.n	80019ac <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80018f0:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <Modbus_Emission+0xe8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <Modbus_Emission+0xe8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001906:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <Modbus_Emission+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 8001910:	4b2c      	ldr	r3, [pc, #176]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001918:	461a      	mov	r2, r3
 800191a:	f00a fdff 	bl	800c51c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001926:	461a      	mov	r2, r3
 8001928:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <Modbus_Emission+0xe8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3203      	adds	r2, #3
 800192e:	b292      	uxth	r2, r2
 8001930:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001944:	3b02      	subs	r3, #2
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fc65 	bl	8001218 <CRC16>
 800194e:	4603      	mov	r3, r0
 8001950:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 800195e:	3b02      	subs	r3, #2
 8001960:	7939      	ldrb	r1, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <Modbus_Emission+0xe8>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 8001976:	3b01      	subs	r3, #1
 8001978:	7979      	ldrb	r1, [r7, #5]
 800197a:	4413      	add	r3, r2
 800197c:	460a      	mov	r2, r1
 800197e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198c:	2b20      	cmp	r3, #32
 800198e:	d10d      	bne.n	80019ac <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <Modbus_Emission+0xe8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <Modbus_Emission+0xe8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019a6:	461a      	mov	r2, r3
 80019a8:	f008 ff5a 	bl	800a860 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <Modbus_Emission+0xe8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <Modbus_Emission+0xe8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	755a      	strb	r2, [r3, #21]

}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200002ac 	.word	0x200002ac

080019c8 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80019d8:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 80019dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e0:	eef0 7ae7 	vabs.f32	s15, s15
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 80019ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ee:	eef0 7ae7 	vabs.f32	s15, s15
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 80019f8:	edd7 7a00 	vldr	s15, [r7]
 80019fc:	eef0 7ae7 	vabs.f32	s15, s15
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	db02      	blt.n	8001a30 <Trapezoidal_Init+0x68>
 8001a2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a2e:	e000      	b.n	8001a32 <Trapezoidal_Init+0x6a>
 8001a30:	4a49      	ldr	r2, [pc, #292]	@ (8001b58 <Trapezoidal_Init+0x190>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a50:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	dd14      	ble.n	8001aa0 <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	f00a fd54 	bl	800c53c <sqrtf>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	edc3 7a03 	vstr	s15, [r3, #12]
 8001a9e:	e006      	b.n	8001aae <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b04:	e017      	b.n	8001b36 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	bf800000 	.word	0xbf800000

08001b5c <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b095      	sub	sp, #84	@ 0x54
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 812c 	bne.w	8001dca <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001b78:	edd7 7a00 	vldr	s15, [r7]
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001b9e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001ba2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001bae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d111      	bne.n	8001c06 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001be2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001be6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001bf6:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001bfa:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c02:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c08:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c0a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c0e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c1a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c1e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001c44:	4b64      	ldr	r3, [pc, #400]	@ (8001dd8 <Trapezoidal_Update+0x27c>)
 8001c46:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001c48:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c54:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d51a      	bpl.n	8001c98 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c62:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001c82:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c86:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c96:	e079      	b.n	8001d8c <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d519      	bpl.n	8001ce6 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001cb2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001cc2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cdc:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce4:	e052      	b.n	8001d8c <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001ce6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d53a      	bpl.n	8001d76 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d00:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d10:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d14:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d30:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d34:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001d50:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d6c:	eef1 7a67 	vneg.f32	s15, s15
 8001d70:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001d74:	e00a      	b.n	8001d8c <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d78:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d92:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001da6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edc3 7a06 	vstr	s15, [r3, #24]
 8001dc8:	e000      	b.n	8001dcc <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001dca:	bf00      	nop
}
 8001dcc:	3754      	adds	r7, #84	@ 0x54
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	358637bd 	.word	0x358637bd
 8001ddc:	00000000 	.word	0x00000000

08001de0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de4:	ed2d 8b02 	vpush	{d8}
 8001de8:	b0b1      	sub	sp, #196	@ 0xc4
 8001dea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dec:	f004 f82f 	bl	8005e4e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001df0:	f001 fdc0 	bl	8003974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001df4:	f002 fa1a 	bl	800422c <MX_GPIO_Init>
	MX_DMA_Init();
 8001df8:	f002 f9e6 	bl	80041c8 <MX_DMA_Init>
	MX_TIM4_Init();
 8001dfc:	f001 ff62 	bl	8003cc4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e00:	f001 ffb6 	bl	8003d70 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e04:	f001 ff08 	bl	8003c18 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e08:	f002 f800 	bl	8003e0c <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e0c:	f002 f8ba 	bl	8003f84 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e10:	f001 fdfc 	bl	8003a0c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e14:	f001 fe80 	bl	8003b18 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e18:	f002 f958 	bl	80040cc <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e1c:	f002 f986 	bl	800412c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e20:	484c      	ldr	r0, [pc, #304]	@ (8001f54 <main+0x174>)
 8001e22:	f005 ff25 	bl	8007c70 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e26:	2100      	movs	r1, #0
 8001e28:	484a      	ldr	r0, [pc, #296]	@ (8001f54 <main+0x174>)
 8001e2a:	f006 f9ed 	bl	8008208 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4848      	ldr	r0, [pc, #288]	@ (8001f54 <main+0x174>)
 8001e32:	f006 f9e9 	bl	8008208 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e36:	4848      	ldr	r0, [pc, #288]	@ (8001f58 <main+0x178>)
 8001e38:	f005 ff1a 	bl	8007c70 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4846      	ldr	r0, [pc, #280]	@ (8001f58 <main+0x178>)
 8001e40:	f006 f9e2 	bl	8008208 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e44:	2104      	movs	r1, #4
 8001e46:	4844      	ldr	r0, [pc, #272]	@ (8001f58 <main+0x178>)
 8001e48:	f006 f9de 	bl	8008208 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e4c:	213c      	movs	r1, #60	@ 0x3c
 8001e4e:	4843      	ldr	r0, [pc, #268]	@ (8001f5c <main+0x17c>)
 8001e50:	f006 fc88 	bl	8008764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e54:	213c      	movs	r1, #60	@ 0x3c
 8001e56:	4842      	ldr	r0, [pc, #264]	@ (8001f60 <main+0x180>)
 8001e58:	f006 fc84 	bl	8008764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e5c:	4841      	ldr	r0, [pc, #260]	@ (8001f64 <main+0x184>)
 8001e5e:	f005 ff77 	bl	8007d50 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e62:	4841      	ldr	r0, [pc, #260]	@ (8001f68 <main+0x188>)
 8001e64:	f005 ff04 	bl	8007c70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e68:	2108      	movs	r1, #8
 8001e6a:	483f      	ldr	r0, [pc, #252]	@ (8001f68 <main+0x188>)
 8001e6c:	f006 f856 	bl	8007f1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001e70:	210c      	movs	r1, #12
 8001e72:	483d      	ldr	r0, [pc, #244]	@ (8001f68 <main+0x188>)
 8001e74:	f006 f852 	bl	8007f1c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001e78:	483c      	ldr	r0, [pc, #240]	@ (8001f6c <main+0x18c>)
 8001e7a:	f005 fef9 	bl	8007c70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	483a      	ldr	r0, [pc, #232]	@ (8001f6c <main+0x18c>)
 8001e82:	f006 f84b 	bl	8007f1c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001e86:	f002 fb9d 	bl	80045c4 <DWT_Init>

	PID.Kp = 0.1;
 8001e8a:	4a39      	ldr	r2, [pc, #228]	@ (8001f70 <main+0x190>)
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <main+0x194>)
 8001e8e:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001e90:	4a37      	ldr	r2, [pc, #220]	@ (8001f70 <main+0x190>)
 8001e92:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <main+0x198>)
 8001e94:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001e96:	4a36      	ldr	r2, [pc, #216]	@ (8001f70 <main+0x190>)
 8001e98:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <main+0x194>)
 8001e9a:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4834      	ldr	r0, [pc, #208]	@ (8001f70 <main+0x190>)
 8001ea0:	f00a fad4 	bl	800c44c <arm_pid_init_f32>

	Reset_R();
 8001ea4:	f002 ffde 	bl	8004e64 <Reset_R>
	Reset_P();
 8001ea8:	f002 ffec 	bl	8004e84 <Reset_P>
	calibState = CALIB_IDLE;
 8001eac:	4a33      	ldr	r2, [pc, #204]	@ (8001f7c <main+0x19c>)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f002 ffac 	bl	8004e10 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001eb8:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <main+0x1a0>)
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <main+0x1a4>)
 8001ebc:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001ebe:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <main+0x1a0>)
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <main+0x1a8>)
 8001ec2:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8001f80 <main+0x1a0>)
 8001ec6:	2315      	movs	r3, #21
 8001ec8:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001eca:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <main+0x1a0>)
 8001ecc:	23c8      	movs	r3, #200	@ 0xc8
 8001ece:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001ed0:	492e      	ldr	r1, [pc, #184]	@ (8001f8c <main+0x1ac>)
 8001ed2:	482b      	ldr	r0, [pc, #172]	@ (8001f80 <main+0x1a0>)
 8001ed4:	f7ff f94a 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <main+0x1ac>)
 8001eda:	2300      	movs	r3, #0
 8001edc:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001ede:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001f90 <main+0x1b0>
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f002 ff16 	bl	8004d14 <Set_Motor>
	Set_Motor(1, 0);
 8001ee8:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001f90 <main+0x1b0>
 8001eec:	2001      	movs	r0, #1
 8001eee:	f002 ff11 	bl	8004d14 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (!Test_no_BaseSystem && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001ef2:	4b28      	ldr	r3, [pc, #160]	@ (8001f94 <main+0x1b4>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <main+0x136>
 8001f00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f04:	4824      	ldr	r0, [pc, #144]	@ (8001f98 <main+0x1b8>)
 8001f06:	f004 fdd7 	bl	8006ab8 <HAL_GPIO_ReadPin>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <main+0x136>
			Test_no_BaseSystem = true;
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <main+0x1b4>)
 8001f12:	2301      	movs	r3, #1
 8001f14:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <main+0x1ac>)
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <main+0x1bc>)
 8001f1c:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <main+0x1c0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d177      	bne.n	8002016 <main+0x236>
			switch (base_status) {
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <main+0x1bc>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d00e      	beq.n	8001f4c <main+0x16c>
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	dc38      	bgt.n	8001fa4 <main+0x1c4>
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <main+0x15c>
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d004      	beq.n	8001f44 <main+0x164>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f3a:	e033      	b.n	8001fa4 <main+0x1c4>
				REG16(REG_MOTION_STATUS) = 1;
 8001f3c:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <main+0x1ac>)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	8413      	strh	r3, [r2, #32]
				break;
 8001f42:	e030      	b.n	8001fa6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 2;
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <main+0x1ac>)
 8001f46:	2302      	movs	r3, #2
 8001f48:	8413      	strh	r3, [r2, #32]
				break;
 8001f4a:	e02c      	b.n	8001fa6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 4;
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f8c <main+0x1ac>)
 8001f4e:	2304      	movs	r3, #4
 8001f50:	8413      	strh	r3, [r2, #32]
				break;
 8001f52:	e028      	b.n	8001fa6 <main+0x1c6>
 8001f54:	200002b0 	.word	0x200002b0
 8001f58:	2000037c 	.word	0x2000037c
 8001f5c:	20000448 	.word	0x20000448
 8001f60:	20000514 	.word	0x20000514
 8001f64:	200005e0 	.word	0x200005e0
 8001f68:	200006ac 	.word	0x200006ac
 8001f6c:	20000778 	.word	0x20000778
 8001f70:	20000bd4 	.word	0x20000bd4
 8001f74:	3dcccccd 	.word	0x3dcccccd
 8001f78:	3727c5ac 	.word	0x3727c5ac
 8001f7c:	20000c1c 	.word	0x20000c1c
 8001f80:	20000c54 	.word	0x20000c54
 8001f84:	20000910 	.word	0x20000910
 8001f88:	20000844 	.word	0x20000844
 8001f8c:	2000112c 	.word	0x2000112c
 8001f90:	00000000 	.word	0x00000000
 8001f94:	20000c3b 	.word	0x20000c3b
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	200012bc 	.word	0x200012bc
 8001fa0:	20000bcd 	.word	0x20000bcd
				break;
 8001fa4:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem) {
 8001fa6:	4bb1      	ldr	r3, [pc, #708]	@ (800226c <main+0x48c>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	4bb0      	ldr	r3, [pc, #704]	@ (8002270 <main+0x490>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	d007      	beq.n	8001fcc <main+0x1ec>
				TargetR = TargetR_BaseSystem;
 8001fbc:	4bab      	ldr	r3, [pc, #684]	@ (800226c <main+0x48c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4bac      	ldr	r3, [pc, #688]	@ (8002274 <main+0x494>)
 8001fc2:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001fc4:	4ba9      	ldr	r3, [pc, #676]	@ (800226c <main+0x48c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002270 <main+0x490>)
 8001fca:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem) {
 8001fcc:	4baa      	ldr	r3, [pc, #680]	@ (8002278 <main+0x498>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd8:	4ba8      	ldr	r3, [pc, #672]	@ (800227c <main+0x49c>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d007      	beq.n	8001ff8 <main+0x218>
				TargetP = TargetP_BaseSystem;
 8001fe8:	4ba4      	ldr	r3, [pc, #656]	@ (800227c <main+0x49c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4ba4      	ldr	r3, [pc, #656]	@ (8002280 <main+0x4a0>)
 8001fee:	601a      	str	r2, [r3, #0]
				Last_TargetP_BaseSystem = TargetP_BaseSystem;
 8001ff0:	4ba2      	ldr	r3, [pc, #648]	@ (800227c <main+0x49c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4ba3      	ldr	r3, [pc, #652]	@ (8002284 <main+0x4a4>)
 8001ff6:	601a      	str	r2, [r3, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 8001ff8:	4ba3      	ldr	r3, [pc, #652]	@ (8002288 <main+0x4a8>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8002278 <main+0x498>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d008      	beq.n	8002016 <main+0x236>
				Set_Servo(Pen_BaseSystem);
 8002004:	4ba0      	ldr	r3, [pc, #640]	@ (8002288 <main+0x4a8>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 ff01 	bl	8004e10 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 800200e:	4b9e      	ldr	r3, [pc, #632]	@ (8002288 <main+0x4a8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4a99      	ldr	r2, [pc, #612]	@ (8002278 <main+0x498>)
 8002014:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8002016:	f7ff f983 	bl	8001320 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 800201a:	4b9c      	ldr	r3, [pc, #624]	@ (800228c <main+0x4ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002020:	4b9b      	ldr	r3, [pc, #620]	@ (8002290 <main+0x4b0>)
 8002022:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8002024:	4b9b      	ldr	r3, [pc, #620]	@ (8002294 <main+0x4b4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800202a:	4b9b      	ldr	r3, [pc, #620]	@ (8002298 <main+0x4b8>)
 800202c:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 800202e:	f002 fbbf 	bl	80047b0 <micros>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (currentTime > timestamp) {
 800203a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800203e:	4b97      	ldr	r3, [pc, #604]	@ (800229c <main+0x4bc>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	4282      	cmp	r2, r0
 8002046:	418b      	sbcs	r3, r1
 8002048:	d210      	bcs.n	800206c <main+0x28c>
			timestamp = currentTime + 1000; // us
 800204a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800204e:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002052:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002054:	f143 0300 	adc.w	r3, r3, #0
 8002058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800205a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800205e:	4b8f      	ldr	r3, [pc, #572]	@ (800229c <main+0x4bc>)
 8002060:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8002064:	f002 fc88 	bl	8004978 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 8002068:	f002 fd90 	bl	8004b8c <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 800206c:	f002 fba0 	bl	80047b0 <micros>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		if (currentTime1 > timestamp1) {
 8002078:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800207c:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <main+0x4c0>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4282      	cmp	r2, r0
 8002084:	418b      	sbcs	r3, r1
 8002086:	d20d      	bcs.n	80020a4 <main+0x2c4>
			timestamp1 = currentTime1 + 10000; // us
 8002088:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800208c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002090:	1851      	adds	r1, r2, r1
 8002092:	6439      	str	r1, [r7, #64]	@ 0x40
 8002094:	f143 0300 	adc.w	r3, r3, #0
 8002098:	647b      	str	r3, [r7, #68]	@ 0x44
 800209a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800209e:	4b80      	ldr	r3, [pc, #512]	@ (80022a0 <main+0x4c0>)
 80020a0:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020a4:	f002 fb84 	bl	80047b0 <micros>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if (currentTime2 > timestamp2) {
 80020b0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020b4:	4b7b      	ldr	r3, [pc, #492]	@ (80022a4 <main+0x4c4>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	4282      	cmp	r2, r0
 80020bc:	418b      	sbcs	r3, r1
 80020be:	d20c      	bcs.n	80020da <main+0x2fa>
			timestamp2 = currentTime2 + 100000; // us
 80020c0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80020c4:	4978      	ldr	r1, [pc, #480]	@ (80022a8 <main+0x4c8>)
 80020c6:	1851      	adds	r1, r2, r1
 80020c8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020ca:	f143 0300 	adc.w	r3, r3, #0
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020d4:	4b73      	ldr	r3, [pc, #460]	@ (80022a4 <main+0x4c4>)
 80020d6:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 80020da:	4b74      	ldr	r3, [pc, #464]	@ (80022ac <main+0x4cc>)
 80020dc:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 80020e0:	4b73      	ldr	r3, [pc, #460]	@ (80022b0 <main+0x4d0>)
 80020e2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020e6:	eef1 7a67 	vneg.f32	s15, s15
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	f00a fa43 	bl	800c578 <cosf>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 80020fa:	4b6e      	ldr	r3, [pc, #440]	@ (80022b4 <main+0x4d4>)
 80020fc:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8002100:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <main+0x4cc>)
 8002102:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 8002106:	4b6a      	ldr	r3, [pc, #424]	@ (80022b0 <main+0x4d0>)
 8002108:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	f00a fa76 	bl	800c600 <sinf>
 8002114:	eef0 7a40 	vmov.f32	s15, s0
 8002118:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 800211c:	4b66      	ldr	r3, [pc, #408]	@ (80022b8 <main+0x4d8>)
 800211e:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002126:	4865      	ldr	r0, [pc, #404]	@ (80022bc <main+0x4dc>)
 8002128:	f004 fcc6 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <main+0x370>
			Mode = 0;
 8002132:	4a63      	ldr	r2, [pc, #396]	@ (80022c0 <main+0x4e0>)
 8002134:	2300      	movs	r3, #0
 8002136:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8002138:	4a62      	ldr	r2, [pc, #392]	@ (80022c4 <main+0x4e4>)
 800213a:	2301      	movs	r3, #1
 800213c:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 800213e:	2000      	movs	r0, #0
 8002140:	f002 fe66 	bl	8004e10 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800214a:	485c      	ldr	r0, [pc, #368]	@ (80022bc <main+0x4dc>)
 800214c:	f004 fccc 	bl	8006ae8 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8002150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002154:	485c      	ldr	r0, [pc, #368]	@ (80022c8 <main+0x4e8>)
 8002156:	f004 fcaf 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <main+0x392>
			EmergencyState = 0;
 8002160:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <main+0x4e4>)
 8002162:	2300      	movs	r3, #0
 8002164:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800216c:	4853      	ldr	r0, [pc, #332]	@ (80022bc <main+0x4dc>)
 800216e:	f004 fcbb 	bl	8006ae8 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8002172:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002176:	4854      	ldr	r0, [pc, #336]	@ (80022c8 <main+0x4e8>)
 8002178:	f004 fc9e 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <main+0x3a8>
			Pen_Status = 0;
 8002182:	4a52      	ldr	r2, [pc, #328]	@ (80022cc <main+0x4ec>)
 8002184:	2300      	movs	r3, #0
 8002186:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 8002188:	2104      	movs	r1, #4
 800218a:	484f      	ldr	r0, [pc, #316]	@ (80022c8 <main+0x4e8>)
 800218c:	f004 fc94 	bl	8006ab8 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <main+0x3bc>
			Pen_Status = 1;
 8002196:	4a4d      	ldr	r2, [pc, #308]	@ (80022cc <main+0x4ec>)
 8002198:	2301      	movs	r3, #1
 800219a:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 800219c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a4:	f004 fc88 	bl	8006ab8 <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d103      	bne.n	80021b6 <main+0x3d6>
			z_temp = 1;
 80021ae:	4a48      	ldr	r2, [pc, #288]	@ (80022d0 <main+0x4f0>)
 80021b0:	2301      	movs	r3, #1
 80021b2:	7013      	strb	r3, [r2, #0]
 80021b4:	e00b      	b.n	80021ce <main+0x3ee>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 80021b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f004 fc7b 	bl	8006ab8 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <main+0x3ee>
			z_temp = 0;
 80021c8:	4a41      	ldr	r2, [pc, #260]	@ (80022d0 <main+0x4f0>)
 80021ca:	2300      	movs	r3, #0
 80021cc:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 80021ce:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <main+0x4e4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <main+0x3fc>
			REG16(REG_MOTION_STATUS) = 0;
 80021d6:	4a3f      	ldr	r2, [pc, #252]	@ (80022d4 <main+0x4f4>)
 80021d8:	2300      	movs	r3, #0
 80021da:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem))
 80021dc:	4b38      	ldr	r3, [pc, #224]	@ (80022c0 <main+0x4e0>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d107      	bne.n	80021f4 <main+0x414>
 80021e4:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <main+0x4f8>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d008      	beq.n	80021fe <main+0x41e>
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <main+0x4fc>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <main+0x41e>
				|| base_status == 8) {
 80021f4:	4b38      	ldr	r3, [pc, #224]	@ (80022d8 <main+0x4f8>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f040 8084 	bne.w	8002306 <main+0x526>
			REG16(REG_MOTION_STATUS) = 8;
 80021fe:	4a35      	ldr	r2, [pc, #212]	@ (80022d4 <main+0x4f4>)
 8002200:	2308      	movs	r3, #8
 8002202:	8413      	strh	r3, [r2, #32]

			if (TenPointMode) {
 8002204:	4b36      	ldr	r3, [pc, #216]	@ (80022e0 <main+0x500>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <main+0x452>
				TargetR = TenPointArray[(counter * 2) + 1];
 800220c:	4b35      	ldr	r3, [pc, #212]	@ (80022e4 <main+0x504>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	3301      	adds	r3, #1
 8002214:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <main+0x508>)
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <main+0x494>)
 800221e:	601a      	str	r2, [r3, #0]
				TargetP = TenPointArray[counter * 2];
 8002220:	4b30      	ldr	r3, [pc, #192]	@ (80022e4 <main+0x504>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <main+0x508>)
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <main+0x4a0>)
 8002230:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 8002232:	f003 f9f1 	bl	8005618 <CascadeControl_Step>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d064      	beq.n	8002306 <main+0x526>
				if (PenDelay()) {
 800223c:	f002 f8fc 	bl	8004438 <PenDelay>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d05f      	beq.n	8002306 <main+0x526>
					if (TenPointMode) {
 8002246:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <main+0x500>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d054      	beq.n	80022f8 <main+0x518>
						if (counter == 9) {
 800224e:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <main+0x504>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d14a      	bne.n	80022ec <main+0x50c>
							TenPointMode = false;
 8002256:	4a22      	ldr	r2, [pc, #136]	@ (80022e0 <main+0x500>)
 8002258:	2300      	movs	r3, #0
 800225a:	7013      	strb	r3, [r2, #0]
							counter = 0;
 800225c:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <main+0x504>)
 800225e:	2300      	movs	r3, #0
 8002260:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <main+0x4e0>)
 8002264:	2301      	movs	r3, #1
 8002266:	7013      	strb	r3, [r2, #0]
 8002268:	e046      	b.n	80022f8 <main+0x518>
 800226a:	bf00      	nop
 800226c:	20000c3c 	.word	0x20000c3c
 8002270:	20000c48 	.word	0x20000c48
 8002274:	20000b94 	.word	0x20000b94
 8002278:	20000c50 	.word	0x20000c50
 800227c:	20000c40 	.word	0x20000c40
 8002280:	20000b98 	.word	0x20000b98
 8002284:	20000c4c 	.word	0x20000c4c
 8002288:	20000c44 	.word	0x20000c44
 800228c:	20000514 	.word	0x20000514
 8002290:	20000af0 	.word	0x20000af0
 8002294:	20000448 	.word	0x20000448
 8002298:	20000af4 	.word	0x20000af4
 800229c:	200013c0 	.word	0x200013c0
 80022a0:	200013c8 	.word	0x200013c8
 80022a4:	200013d0 	.word	0x200013d0
 80022a8:	000186a0 	.word	0x000186a0
 80022ac:	20000b38 	.word	0x20000b38
 80022b0:	20000af8 	.word	0x20000af8
 80022b4:	20000b84 	.word	0x20000b84
 80022b8:	20000b88 	.word	0x20000b88
 80022bc:	48000800 	.word	0x48000800
 80022c0:	20000bcc 	.word	0x20000bcc
 80022c4:	20000bcd 	.word	0x20000bcd
 80022c8:	48000400 	.word	0x48000400
 80022cc:	20000bcf 	.word	0x20000bcf
 80022d0:	20000b79 	.word	0x20000b79
 80022d4:	2000112c 	.word	0x2000112c
 80022d8:	200012bc 	.word	0x200012bc
 80022dc:	20000c3b 	.word	0x20000c3b
 80022e0:	20000c3a 	.word	0x20000c3a
 80022e4:	20000c39 	.word	0x20000c39
 80022e8:	200012c0 	.word	0x200012c0
						} else {
							counter++;
 80022ec:	4bc3      	ldr	r3, [pc, #780]	@ (80025fc <main+0x81c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4ac1      	ldr	r2, [pc, #772]	@ (80025fc <main+0x81c>)
 80022f6:	7013      	strb	r3, [r2, #0]
						}
					}
					if (base_status == 8) {
 80022f8:	4bc1      	ldr	r3, [pc, #772]	@ (8002600 <main+0x820>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d102      	bne.n	8002306 <main+0x526>
						REG16(REG_MOTION_STATUS) = 0;
 8002300:	4ac0      	ldr	r2, [pc, #768]	@ (8002604 <main+0x824>)
 8002302:	2300      	movs	r3, #0
 8002304:	8413      	strh	r3, [r2, #32]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem))
 8002306:	4bc0      	ldr	r3, [pc, #768]	@ (8002608 <main+0x828>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d107      	bne.n	800231e <main+0x53e>
 800230e:	4bbc      	ldr	r3, [pc, #752]	@ (8002600 <main+0x820>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d008      	beq.n	8002328 <main+0x548>
 8002316:	4bbd      	ldr	r3, [pc, #756]	@ (800260c <main+0x82c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <main+0x548>
				|| base_status == 1) {
 800231e:	4bb8      	ldr	r3, [pc, #736]	@ (8002600 <main+0x820>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 8256 	bne.w	80027d4 <main+0x9f4>
			switch (calibState) {
 8002328:	4bb9      	ldr	r3, [pc, #740]	@ (8002610 <main+0x830>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	f200 8251 	bhi.w	80027d4 <main+0x9f4>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <main+0x558>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	0800236d 	.word	0x0800236d
 800233c:	080023a3 	.word	0x080023a3
 8002340:	080023e9 	.word	0x080023e9
 8002344:	08002433 	.word	0x08002433
 8002348:	0800247d 	.word	0x0800247d
 800234c:	080024cb 	.word	0x080024cb
 8002350:	08002517 	.word	0x08002517
 8002354:	08002557 	.word	0x08002557
 8002358:	080025b5 	.word	0x080025b5
 800235c:	08002663 	.word	0x08002663
 8002360:	080026cf 	.word	0x080026cf
 8002364:	0800273f 	.word	0x0800273f
 8002368:	08002781 	.word	0x08002781
			case CALIB_IDLE:
				Set_Motor(0, 0);
 800236c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8002614 <main+0x834>
 8002370:	2000      	movs	r0, #0
 8002372:	f002 fccf 	bl	8004d14 <Set_Motor>
				Set_Motor(1, 0);
 8002376:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8002614 <main+0x834>
 800237a:	2001      	movs	r0, #1
 800237c:	f002 fcca 	bl	8004d14 <Set_Motor>
				P_Limit = 0;
 8002380:	4aa5      	ldr	r2, [pc, #660]	@ (8002618 <main+0x838>)
 8002382:	2300      	movs	r3, #0
 8002384:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002386:	4aa5      	ldr	r2, [pc, #660]	@ (800261c <main+0x83c>)
 8002388:	2300      	movs	r3, #0
 800238a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 800238c:	4aa0      	ldr	r2, [pc, #640]	@ (8002610 <main+0x830>)
 800238e:	2301      	movs	r3, #1
 8002390:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002392:	f002 fa0d 	bl	80047b0 <micros>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	49a1      	ldr	r1, [pc, #644]	@ (8002620 <main+0x840>)
 800239c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023a0:	e218      	b.n	80027d4 <main+0x9f4>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80023a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002624 <main+0x844>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8002628 <main+0x848>
 80023ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	dd06      	ble.n	80023c4 <main+0x5e4>
					Cal_Side = 1;
 80023b6:	4a9d      	ldr	r2, [pc, #628]	@ (800262c <main+0x84c>)
 80023b8:	2301      	movs	r3, #1
 80023ba:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023bc:	4a94      	ldr	r2, [pc, #592]	@ (8002610 <main+0x830>)
 80023be:	2302      	movs	r3, #2
 80023c0:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80023c2:	e207      	b.n	80027d4 <main+0x9f4>
				} else if (Receiver[0] < -80) {
 80023c4:	4b97      	ldr	r3, [pc, #604]	@ (8002624 <main+0x844>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002630 <main+0x850>
 80023ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d6:	d400      	bmi.n	80023da <main+0x5fa>
				break;
 80023d8:	e1fc      	b.n	80027d4 <main+0x9f4>
					Cal_Side = 2;
 80023da:	4a94      	ldr	r2, [pc, #592]	@ (800262c <main+0x84c>)
 80023dc:	2302      	movs	r3, #2
 80023de:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002610 <main+0x830>)
 80023e2:	2302      	movs	r3, #2
 80023e4:	7013      	strb	r3, [r2, #0]
				break;
 80023e6:	e1f5      	b.n	80027d4 <main+0x9f4>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 80023e8:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 80023ec:	2001      	movs	r0, #1
 80023ee:	f002 fc91 	bl	8004d14 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80023f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023f6:	488f      	ldr	r0, [pc, #572]	@ (8002634 <main+0x854>)
 80023f8:	f004 fb5e 	bl	8006ab8 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d004      	beq.n	800240c <main+0x62c>
 8002402:	4b85      	ldr	r3, [pc, #532]	@ (8002618 <main+0x838>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 81d1 	beq.w	80027ae <main+0x9ce>
					Set_Motor(1, 0);
 800240c:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8002614 <main+0x834>
 8002410:	2001      	movs	r0, #1
 8002412:	f002 fc7f 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 8002416:	f002 f9cb 	bl	80047b0 <micros>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4980      	ldr	r1, [pc, #512]	@ (8002620 <main+0x840>)
 8002420:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002424:	4a7c      	ldr	r2, [pc, #496]	@ (8002618 <main+0x838>)
 8002426:	2300      	movs	r3, #0
 8002428:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800242a:	4a79      	ldr	r2, [pc, #484]	@ (8002610 <main+0x830>)
 800242c:	2303      	movs	r3, #3
 800242e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002430:	e1bd      	b.n	80027ae <main+0x9ce>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002432:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8002614 <main+0x834>
 8002436:	2001      	movs	r0, #1
 8002438:	f002 fc6c 	bl	8004d14 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800243c:	f002 f9b8 	bl	80047b0 <micros>
 8002440:	4b77      	ldr	r3, [pc, #476]	@ (8002620 <main+0x840>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	ebb0 0802 	subs.w	r8, r0, r2
 800244a:	eb61 0903 	sbc.w	r9, r1, r3
 800244e:	4b7a      	ldr	r3, [pc, #488]	@ (8002638 <main+0x858>)
 8002450:	4598      	cmp	r8, r3
 8002452:	f179 0300 	sbcs.w	r3, r9, #0
 8002456:	d311      	bcc.n	800247c <main+0x69c>
					Set_Motor(1, 15);
 8002458:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800245c:	2001      	movs	r0, #1
 800245e:	f002 fc59 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 8002462:	f002 f9a5 	bl	80047b0 <micros>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	496d      	ldr	r1, [pc, #436]	@ (8002620 <main+0x840>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002470:	4a69      	ldr	r2, [pc, #420]	@ (8002618 <main+0x838>)
 8002472:	2300      	movs	r3, #0
 8002474:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002476:	4a66      	ldr	r2, [pc, #408]	@ (8002610 <main+0x830>)
 8002478:	2304      	movs	r3, #4
 800247a:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 800247c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002480:	2001      	movs	r0, #1
 8002482:	f002 fc47 	bl	8004d14 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002486:	f002 f993 	bl	80047b0 <micros>
 800248a:	4b65      	ldr	r3, [pc, #404]	@ (8002620 <main+0x840>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	ebb0 0a02 	subs.w	sl, r0, r2
 8002494:	eb61 0b03 	sbc.w	fp, r1, r3
 8002498:	4b67      	ldr	r3, [pc, #412]	@ (8002638 <main+0x858>)
 800249a:	459a      	cmp	sl, r3
 800249c:	f17b 0300 	sbcs.w	r3, fp, #0
 80024a0:	f0c0 8187 	bcc.w	80027b2 <main+0x9d2>
					Set_Motor(1, 0);
 80024a4:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8002614 <main+0x834>
 80024a8:	2001      	movs	r0, #1
 80024aa:	f002 fc33 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 80024ae:	f002 f97f 	bl	80047b0 <micros>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	495a      	ldr	r1, [pc, #360]	@ (8002620 <main+0x840>)
 80024b8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024bc:	4a56      	ldr	r2, [pc, #344]	@ (8002618 <main+0x838>)
 80024be:	2300      	movs	r3, #0
 80024c0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80024c2:	4a53      	ldr	r2, [pc, #332]	@ (8002610 <main+0x830>)
 80024c4:	2305      	movs	r3, #5
 80024c6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80024c8:	e173      	b.n	80027b2 <main+0x9d2>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80024ca:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8002614 <main+0x834>
 80024ce:	2001      	movs	r0, #1
 80024d0:	f002 fc20 	bl	8004d14 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024d4:	f002 f96c 	bl	80047b0 <micros>
 80024d8:	4b51      	ldr	r3, [pc, #324]	@ (8002620 <main+0x840>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	1a85      	subs	r5, r0, r2
 80024e0:	eb61 0603 	sbc.w	r6, r1, r3
 80024e4:	4b54      	ldr	r3, [pc, #336]	@ (8002638 <main+0x858>)
 80024e6:	429d      	cmp	r5, r3
 80024e8:	f176 0300 	sbcs.w	r3, r6, #0
 80024ec:	f0c0 8163 	bcc.w	80027b6 <main+0x9d6>
					Set_Motor(1, -5);
 80024f0:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80024f4:	2001      	movs	r0, #1
 80024f6:	f002 fc0d 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 80024fa:	f002 f959 	bl	80047b0 <micros>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4947      	ldr	r1, [pc, #284]	@ (8002620 <main+0x840>)
 8002504:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002508:	4a43      	ldr	r2, [pc, #268]	@ (8002618 <main+0x838>)
 800250a:	2300      	movs	r3, #0
 800250c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800250e:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <main+0x830>)
 8002510:	2306      	movs	r3, #6
 8002512:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002514:	e14f      	b.n	80027b6 <main+0x9d6>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002516:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 800251a:	2001      	movs	r0, #1
 800251c:	f002 fbfa 	bl	8004d14 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002520:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002524:	4843      	ldr	r0, [pc, #268]	@ (8002634 <main+0x854>)
 8002526:	f004 fac7 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d004      	beq.n	800253a <main+0x75a>
 8002530:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <main+0x838>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8140 	beq.w	80027ba <main+0x9da>
					Set_Motor(1, 0);
 800253a:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002614 <main+0x834>
 800253e:	2001      	movs	r0, #1
 8002540:	f002 fbe8 	bl	8004d14 <Set_Motor>
					Reset_P();
 8002544:	f002 fc9e 	bl	8004e84 <Reset_P>
					P_Limit = 0;
 8002548:	4a33      	ldr	r2, [pc, #204]	@ (8002618 <main+0x838>)
 800254a:	2300      	movs	r3, #0
 800254c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 800254e:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <main+0x830>)
 8002550:	2307      	movs	r3, #7
 8002552:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002554:	e131      	b.n	80027ba <main+0x9da>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002556:	4b35      	ldr	r3, [pc, #212]	@ (800262c <main+0x84c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <main+0x78a>
					Set_Motor(0, -30);
 800255e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002562:	2000      	movs	r0, #0
 8002564:	f002 fbd6 	bl	8004d14 <Set_Motor>
 8002568:	e004      	b.n	8002574 <main+0x794>
				else
					Set_Motor(0, 30);
 800256a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800256e:	2000      	movs	r0, #0
 8002570:	f002 fbd0 	bl	8004d14 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002574:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002578:	482e      	ldr	r0, [pc, #184]	@ (8002634 <main+0x854>)
 800257a:	f004 fa9d 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d004      	beq.n	800258e <main+0x7ae>
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <main+0x83c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8118 	beq.w	80027be <main+0x9de>
					Set_Motor(0, 0);
 800258e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002614 <main+0x834>
 8002592:	2000      	movs	r0, #0
 8002594:	f002 fbbe 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 8002598:	f002 f90a 	bl	80047b0 <micros>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	491f      	ldr	r1, [pc, #124]	@ (8002620 <main+0x840>)
 80025a2:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80025a6:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <main+0x83c>)
 80025a8:	2300      	movs	r3, #0
 80025aa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 80025ac:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <main+0x830>)
 80025ae:	2308      	movs	r3, #8
 80025b0:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025b2:	e104      	b.n	80027be <main+0x9de>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 80025b4:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002614 <main+0x834>
 80025b8:	2000      	movs	r0, #0
 80025ba:	f002 fbab 	bl	8004d14 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80025be:	f002 f8f7 	bl	80047b0 <micros>
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <main+0x840>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	1a84      	subs	r4, r0, r2
 80025ca:	633c      	str	r4, [r7, #48]	@ 0x30
 80025cc:	eb61 0303 	sbc.w	r3, r1, r3
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d2:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <main+0x858>)
 80025d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80025d8:	4602      	mov	r2, r0
 80025da:	429a      	cmp	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	f173 0300 	sbcs.w	r3, r3, #0
 80025e2:	f0c0 80ee 	bcc.w	80027c2 <main+0x9e2>
					if (Cal_Side == 1)
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <main+0x84c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d126      	bne.n	800263c <main+0x85c>
						Set_Motor(0, 30);
 80025ee:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f002 fb8e 	bl	8004d14 <Set_Motor>
 80025f8:	e025      	b.n	8002646 <main+0x866>
 80025fa:	bf00      	nop
 80025fc:	20000c39 	.word	0x20000c39
 8002600:	200012bc 	.word	0x200012bc
 8002604:	2000112c 	.word	0x2000112c
 8002608:	20000bcc 	.word	0x20000bcc
 800260c:	20000c3b 	.word	0x20000c3b
 8002610:	20000c1c 	.word	0x20000c1c
 8002614:	00000000 	.word	0x00000000
 8002618:	20000bd1 	.word	0x20000bd1
 800261c:	20000bd2 	.word	0x20000bd2
 8002620:	20000c20 	.word	0x20000c20
 8002624:	20000ab0 	.word	0x20000ab0
 8002628:	42a00000 	.word	0x42a00000
 800262c:	20000c28 	.word	0x20000c28
 8002630:	c2a00000 	.word	0xc2a00000
 8002634:	48000400 	.word	0x48000400
 8002638:	000186a1 	.word	0x000186a1
					else
						Set_Motor(0, -30);
 800263c:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002640:	2000      	movs	r0, #0
 8002642:	f002 fb67 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 8002646:	f002 f8b3 	bl	80047b0 <micros>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	49ba      	ldr	r1, [pc, #744]	@ (8002938 <main+0xb58>)
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002654:	4ab9      	ldr	r2, [pc, #740]	@ (800293c <main+0xb5c>)
 8002656:	2300      	movs	r3, #0
 8002658:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 800265a:	4ab9      	ldr	r2, [pc, #740]	@ (8002940 <main+0xb60>)
 800265c:	2309      	movs	r3, #9
 800265e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002660:	e0af      	b.n	80027c2 <main+0x9e2>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002662:	4bb8      	ldr	r3, [pc, #736]	@ (8002944 <main+0xb64>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <main+0x896>
					Set_Motor(0, 30);
 800266a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800266e:	2000      	movs	r0, #0
 8002670:	f002 fb50 	bl	8004d14 <Set_Motor>
 8002674:	e004      	b.n	8002680 <main+0x8a0>
				else
					Set_Motor(0, -30);
 8002676:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 800267a:	2000      	movs	r0, #0
 800267c:	f002 fb4a 	bl	8004d14 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002680:	f002 f896 	bl	80047b0 <micros>
 8002684:	4bac      	ldr	r3, [pc, #688]	@ (8002938 <main+0xb58>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	1a84      	subs	r4, r0, r2
 800268c:	62bc      	str	r4, [r7, #40]	@ 0x28
 800268e:	eb61 0303 	sbc.w	r3, r1, r3
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002694:	4bac      	ldr	r3, [pc, #688]	@ (8002948 <main+0xb68>)
 8002696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800269a:	4602      	mov	r2, r0
 800269c:	429a      	cmp	r2, r3
 800269e:	460b      	mov	r3, r1
 80026a0:	f173 0300 	sbcs.w	r3, r3, #0
 80026a4:	f0c0 808f 	bcc.w	80027c6 <main+0x9e6>
					Set_Motor(0, 0);
 80026a8:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 800294c <main+0xb6c>
 80026ac:	2000      	movs	r0, #0
 80026ae:	f002 fb31 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 80026b2:	f002 f87d 	bl	80047b0 <micros>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	499f      	ldr	r1, [pc, #636]	@ (8002938 <main+0xb58>)
 80026bc:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026c0:	4a9e      	ldr	r2, [pc, #632]	@ (800293c <main+0xb5c>)
 80026c2:	2300      	movs	r3, #0
 80026c4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80026c6:	4a9e      	ldr	r2, [pc, #632]	@ (8002940 <main+0xb60>)
 80026c8:	230a      	movs	r3, #10
 80026ca:	7013      	strb	r3, [r2, #0]
				}
				break;
 80026cc:	e07b      	b.n	80027c6 <main+0x9e6>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 80026ce:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 800294c <main+0xb6c>
 80026d2:	2000      	movs	r0, #0
 80026d4:	f002 fb1e 	bl	8004d14 <Set_Motor>
				Z_index_R = 0;
 80026d8:	4a9d      	ldr	r2, [pc, #628]	@ (8002950 <main+0xb70>)
 80026da:	2300      	movs	r3, #0
 80026dc:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 80026de:	f002 f867 	bl	80047b0 <micros>
 80026e2:	4b95      	ldr	r3, [pc, #596]	@ (8002938 <main+0xb58>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	1a84      	subs	r4, r0, r2
 80026ea:	623c      	str	r4, [r7, #32]
 80026ec:	eb61 0303 	sbc.w	r3, r1, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	4b98      	ldr	r3, [pc, #608]	@ (8002954 <main+0xb74>)
 80026f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026f8:	4602      	mov	r2, r0
 80026fa:	429a      	cmp	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	f173 0300 	sbcs.w	r3, r3, #0
 8002702:	d362      	bcc.n	80027ca <main+0x9ea>
					if (Cal_Side == 1)
 8002704:	4b8f      	ldr	r3, [pc, #572]	@ (8002944 <main+0xb64>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <main+0x938>
						Set_Motor(0, -25);
 800270c:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002710:	2000      	movs	r0, #0
 8002712:	f002 faff 	bl	8004d14 <Set_Motor>
 8002716:	e004      	b.n	8002722 <main+0x942>
					else
						Set_Motor(0, 25);
 8002718:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800271c:	2000      	movs	r0, #0
 800271e:	f002 faf9 	bl	8004d14 <Set_Motor>
					calib_timer = micros();
 8002722:	f002 f845 	bl	80047b0 <micros>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4983      	ldr	r1, [pc, #524]	@ (8002938 <main+0xb58>)
 800272c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002730:	4a82      	ldr	r2, [pc, #520]	@ (800293c <main+0xb5c>)
 8002732:	2300      	movs	r3, #0
 8002734:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002736:	4a82      	ldr	r2, [pc, #520]	@ (8002940 <main+0xb60>)
 8002738:	230b      	movs	r3, #11
 800273a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800273c:	e045      	b.n	80027ca <main+0x9ea>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 800273e:	4b81      	ldr	r3, [pc, #516]	@ (8002944 <main+0xb64>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <main+0x972>
					Set_Motor(0, -25);
 8002746:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 800274a:	2000      	movs	r0, #0
 800274c:	f002 fae2 	bl	8004d14 <Set_Motor>
 8002750:	e004      	b.n	800275c <main+0x97c>
				else
					Set_Motor(0, 25);
 8002752:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002756:	2000      	movs	r0, #0
 8002758:	f002 fadc 	bl	8004d14 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 800275c:	4b7c      	ldr	r3, [pc, #496]	@ (8002950 <main+0xb70>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d034      	beq.n	80027ce <main+0x9ee>
					Set_Motor(0, 0);
 8002764:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 800294c <main+0xb6c>
 8002768:	2000      	movs	r0, #0
 800276a:	f002 fad3 	bl	8004d14 <Set_Motor>
					Reset_R();
 800276e:	f002 fb79 	bl	8004e64 <Reset_R>
					R_Limit = 0;
 8002772:	4a72      	ldr	r2, [pc, #456]	@ (800293c <main+0xb5c>)
 8002774:	2300      	movs	r3, #0
 8002776:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002778:	4a71      	ldr	r2, [pc, #452]	@ (8002940 <main+0xb60>)
 800277a:	230c      	movs	r3, #12
 800277c:	7013      	strb	r3, [r2, #0]
				}
				break;
 800277e:	e026      	b.n	80027ce <main+0x9ee>

			case CALIB_DONE:
				Cal_Side = 0;
 8002780:	4a70      	ldr	r2, [pc, #448]	@ (8002944 <main+0xb64>)
 8002782:	2300      	movs	r3, #0
 8002784:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002786:	4a74      	ldr	r2, [pc, #464]	@ (8002958 <main+0xb78>)
 8002788:	2300      	movs	r3, #0
 800278a:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 800278c:	4a73      	ldr	r2, [pc, #460]	@ (800295c <main+0xb7c>)
 800278e:	2300      	movs	r3, #0
 8002790:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002792:	4a6a      	ldr	r2, [pc, #424]	@ (800293c <main+0xb5c>)
 8002794:	2300      	movs	r3, #0
 8002796:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002798:	4a69      	ldr	r2, [pc, #420]	@ (8002940 <main+0xb60>)
 800279a:	2300      	movs	r3, #0
 800279c:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 800279e:	4b70      	ldr	r3, [pc, #448]	@ (8002960 <main+0xb80>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d115      	bne.n	80027d2 <main+0x9f2>
					REG16(REG_MOTION_STATUS) = 0;
 80027a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002964 <main+0xb84>)
 80027a8:	2300      	movs	r3, #0
 80027aa:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 80027ac:	e011      	b.n	80027d2 <main+0x9f2>
				break;
 80027ae:	bf00      	nop
 80027b0:	e010      	b.n	80027d4 <main+0x9f4>
				break;
 80027b2:	bf00      	nop
 80027b4:	e00e      	b.n	80027d4 <main+0x9f4>
				break;
 80027b6:	bf00      	nop
 80027b8:	e00c      	b.n	80027d4 <main+0x9f4>
				break;
 80027ba:	bf00      	nop
 80027bc:	e00a      	b.n	80027d4 <main+0x9f4>
				break;
 80027be:	bf00      	nop
 80027c0:	e008      	b.n	80027d4 <main+0x9f4>
				break;
 80027c2:	bf00      	nop
 80027c4:	e006      	b.n	80027d4 <main+0x9f4>
				break;
 80027c6:	bf00      	nop
 80027c8:	e004      	b.n	80027d4 <main+0x9f4>
				break;
 80027ca:	bf00      	nop
 80027cc:	e002      	b.n	80027d4 <main+0x9f4>
				break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <main+0x9f4>
				break;
 80027d2:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem) {
 80027d4:	4b62      	ldr	r3, [pc, #392]	@ (8002960 <main+0xb80>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d004      	beq.n	80027e6 <main+0xa06>
 80027dc:	4b62      	ldr	r3, [pc, #392]	@ (8002968 <main+0xb88>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f43f ab86 	beq.w	8001ef2 <main+0x112>
			currentTimer = micros(); // Current time in microseconds
 80027e6:	f001 ffe3 	bl	80047b0 <micros>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	495f      	ldr	r1, [pc, #380]	@ (800296c <main+0xb8c>)
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 80027f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002970 <main+0xb90>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002974 <main+0xb94>)
 80027fe:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002800:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <main+0xb98>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	461a      	mov	r2, r3
 8002808:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <main+0xb94>)
 800280a:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800280c:	4b58      	ldr	r3, [pc, #352]	@ (8002970 <main+0xb90>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe42 	bl	800049c <__aeabi_ui2d>
 8002818:	a343      	add	r3, pc, #268	@ (adr r3, 8002928 <main+0xb48>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fcff 	bl	8000220 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
			float RX_temp = map(
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f96b 	bl	8000b04 <__aeabi_d2f>
 800282e:	4603      	mov	r3, r0
 8002830:	ed9f 2a58 	vldr	s4, [pc, #352]	@ 8002994 <main+0xbb4>
 8002834:	eddf 1a51 	vldr	s3, [pc, #324]	@ 800297c <main+0xb9c>
 8002838:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8002980 <main+0xba0>
 800283c:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8002984 <main+0xba4>
 8002840:	ee00 3a10 	vmov	s0, r3
 8002844:	f001 fe90 	bl	8004568 <map>
 8002848:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 800284c:	4b4a      	ldr	r3, [pc, #296]	@ (8002978 <main+0xb98>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe22 	bl	800049c <__aeabi_ui2d>
 8002858:	a335      	add	r3, pc, #212	@ (adr r3, 8002930 <main+0xb50>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fcdf 	bl	8000220 <__aeabi_dsub>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
			float RY_temp = map(
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f94b 	bl	8000b04 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8002994 <main+0xbb4>
 8002874:	eddf 1a41 	vldr	s3, [pc, #260]	@ 800297c <main+0xb9c>
 8002878:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 8002980 <main+0xba0>
 800287c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8002984 <main+0xba4>
 8002880:	ee00 3a10 	vmov	s0, r3
 8002884:	f001 fe70 	bl	8004568 <map>
 8002888:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 800288c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002890:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	db0d      	blt.n	80028ba <main+0xada>
 800289e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028a2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d804      	bhi.n	80028ba <main+0xada>
				Receiver[0] = 0.00;
 80028b0:	4a35      	ldr	r2, [pc, #212]	@ (8002988 <main+0xba8>)
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e01d      	b.n	80028f6 <main+0xb16>
			else if (RX_temp > 100)
 80028ba:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028be:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002994 <main+0xbb4>
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	dd03      	ble.n	80028d4 <main+0xaf4>
				Receiver[0] = 100.00;
 80028cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <main+0xba8>)
 80028ce:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <main+0xbac>)
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e010      	b.n	80028f6 <main+0xb16>
			else if (RX_temp < -100)
 80028d4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028d8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800297c <main+0xb9c>
 80028dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d503      	bpl.n	80028ee <main+0xb0e>
				Receiver[0] = -100.00;
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <main+0xba8>)
 80028e8:	4b29      	ldr	r3, [pc, #164]	@ (8002990 <main+0xbb0>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e003      	b.n	80028f6 <main+0xb16>
			else
				Receiver[0] = RX_temp;
 80028ee:	4a26      	ldr	r2, [pc, #152]	@ (8002988 <main+0xba8>)
 80028f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f4:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 80028f6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80028fa:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80028fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	db47      	blt.n	8002998 <main+0xbb8>
 8002908:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800290c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002918:	d83e      	bhi.n	8002998 <main+0xbb8>
				Receiver[1] = 0.00;
 800291a:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <main+0xba8>)
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	e057      	b.n	80029d4 <main+0xbf4>
 8002924:	f3af 8000 	nop.w
 8002928:	00000000 	.word	0x00000000
 800292c:	40977000 	.word	0x40977000
 8002930:	00000000 	.word	0x00000000
 8002934:	40d21880 	.word	0x40d21880
 8002938:	20000c20 	.word	0x20000c20
 800293c:	20000bd2 	.word	0x20000bd2
 8002940:	20000c1c 	.word	0x20000c1c
 8002944:	20000c28 	.word	0x20000c28
 8002948:	00030d41 	.word	0x00030d41
 800294c:	00000000 	.word	0x00000000
 8002950:	20000b78 	.word	0x20000b78
 8002954:	000186a1 	.word	0x000186a1
 8002958:	20000bcc 	.word	0x20000bcc
 800295c:	20000bd1 	.word	0x20000bd1
 8002960:	200012bc 	.word	0x200012bc
 8002964:	2000112c 	.word	0x2000112c
 8002968:	20000c3b 	.word	0x20000c3b
 800296c:	20001318 	.word	0x20001318
 8002970:	2000037c 	.word	0x2000037c
 8002974:	20000ac4 	.word	0x20000ac4
 8002978:	200002b0 	.word	0x200002b0
 800297c:	c2c80000 	.word	0xc2c80000
 8002980:	43fa0000 	.word	0x43fa0000
 8002984:	c3fa0000 	.word	0xc3fa0000
 8002988:	20000ab0 	.word	0x20000ab0
 800298c:	42c80000 	.word	0x42c80000
 8002990:	c2c80000 	.word	0xc2c80000
 8002994:	42c80000 	.word	0x42c80000
			else if (RY_temp > 100)
 8002998:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800299c:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8002994 <main+0xbb4>
 80029a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	dd03      	ble.n	80029b2 <main+0xbd2>
				Receiver[1] = 100.00;
 80029aa:	4ab9      	ldr	r2, [pc, #740]	@ (8002c90 <main+0xeb0>)
 80029ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002c94 <main+0xeb4>)
 80029ae:	6053      	str	r3, [r2, #4]
 80029b0:	e010      	b.n	80029d4 <main+0xbf4>
			else if (RY_temp < -100)
 80029b2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029b6:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002c98 <main+0xeb8>
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d503      	bpl.n	80029cc <main+0xbec>
				Receiver[1] = -100.00;
 80029c4:	4ab2      	ldr	r2, [pc, #712]	@ (8002c90 <main+0xeb0>)
 80029c6:	4bb5      	ldr	r3, [pc, #724]	@ (8002c9c <main+0xebc>)
 80029c8:	6053      	str	r3, [r2, #4]
 80029ca:	e003      	b.n	80029d4 <main+0xbf4>
			else
				Receiver[1] = RY_temp;
 80029cc:	4ab0      	ldr	r2, [pc, #704]	@ (8002c90 <main+0xeb0>)
 80029ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029d2:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 80029d4:	4bb2      	ldr	r3, [pc, #712]	@ (8002ca0 <main+0xec0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80029dc:	d912      	bls.n	8002a04 <main+0xc24>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 80029de:	4bb0      	ldr	r3, [pc, #704]	@ (8002ca0 <main+0xec0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd5a 	bl	800049c <__aeabi_ui2d>
 80029e8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002c80 <main+0xea0>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fc17 	bl	8000220 <__aeabi_dsub>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f863 	bl	8000ac4 <__aeabi_d2uiz>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4ba7      	ldr	r3, [pc, #668]	@ (8002ca0 <main+0xec0>)
 8002a02:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a04:	4ba6      	ldr	r3, [pc, #664]	@ (8002ca0 <main+0xec0>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a0c:	d912      	bls.n	8002a34 <main+0xc54>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a0e:	4ba4      	ldr	r3, [pc, #656]	@ (8002ca0 <main+0xec0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fd42 	bl	800049c <__aeabi_ui2d>
 8002a18:	a399      	add	r3, pc, #612	@ (adr r3, 8002c80 <main+0xea0>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fbff 	bl	8000220 <__aeabi_dsub>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7fe f84b 	bl	8000ac4 <__aeabi_d2uiz>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b9b      	ldr	r3, [pc, #620]	@ (8002ca0 <main+0xec0>)
 8002a32:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a34:	4b9a      	ldr	r3, [pc, #616]	@ (8002ca0 <main+0xec0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a3c:	d912      	bls.n	8002a64 <main+0xc84>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002a3e:	4b98      	ldr	r3, [pc, #608]	@ (8002ca0 <main+0xec0>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd2a 	bl	800049c <__aeabi_ui2d>
 8002a48:	a38d      	add	r3, pc, #564	@ (adr r3, 8002c80 <main+0xea0>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	f7fd fbe7 	bl	8000220 <__aeabi_dsub>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f833 	bl	8000ac4 <__aeabi_d2uiz>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca0 <main+0xec0>)
 8002a62:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002a64:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca0 <main+0xec0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	ee17 0a90 	vmov	r0, s15
 8002a74:	f7fd fd34 	bl	80004e0 <__aeabi_f2d>
 8002a78:	a383      	add	r3, pc, #524	@ (adr r3, 8002c88 <main+0xea8>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fbcf 	bl	8000220 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f83b 	bl	8000b04 <__aeabi_d2f>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 8002ca4 <main+0xec4>
 8002a94:	eddf 1a80 	vldr	s3, [pc, #512]	@ 8002c98 <main+0xeb8>
 8002a98:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8002ca8 <main+0xec8>
 8002a9c:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8002cac <main+0xecc>
 8002aa0:	ee00 3a10 	vmov	s0, r3
 8002aa4:	f001 fd60 	bl	8004568 <map>
 8002aa8:	eef0 7a40 	vmov.f32	s15, s0
 8002aac:	4b78      	ldr	r3, [pc, #480]	@ (8002c90 <main+0xeb0>)
 8002aae:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <main+0xec0>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abe:	ee17 0a90 	vmov	r0, s15
 8002ac2:	f7fd fd0d 	bl	80004e0 <__aeabi_f2d>
 8002ac6:	a370      	add	r3, pc, #448	@ (adr r3, 8002c88 <main+0xea8>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fba8 	bl	8000220 <__aeabi_dsub>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f814 	bl	8000b04 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 8002ca4 <main+0xec4>
 8002ae2:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 8002c98 <main+0xeb8>
 8002ae6:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8002ca8 <main+0xec8>
 8002aea:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8002cac <main+0xecc>
 8002aee:	ee00 3a10 	vmov	s0, r3
 8002af2:	f001 fd39 	bl	8004568 <map>
 8002af6:	eef0 7a40 	vmov.f32	s15, s0
 8002afa:	4b65      	ldr	r3, [pc, #404]	@ (8002c90 <main+0xeb0>)
 8002afc:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b00:	4b67      	ldr	r3, [pc, #412]	@ (8002ca0 <main+0xec0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fce6 	bl	80004e0 <__aeabi_f2d>
 8002b14:	a35c      	add	r3, pc, #368	@ (adr r3, 8002c88 <main+0xea8>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fb81 	bl	8000220 <__aeabi_dsub>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fd ffed 	bl	8000b04 <__aeabi_d2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 8002ca4 <main+0xec4>
 8002b30:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8002c98 <main+0xeb8>
 8002b34:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8002ca8 <main+0xec8>
 8002b38:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8002cac <main+0xecc>
 8002b3c:	ee00 3a10 	vmov	s0, r3
 8002b40:	f001 fd12 	bl	8004568 <map>
 8002b44:	eef0 7a40 	vmov.f32	s15, s0
 8002b48:	4b51      	ldr	r3, [pc, #324]	@ (8002c90 <main+0xeb0>)
 8002b4a:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002b4e:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <main+0xeb0>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 8002cb0 <main+0xed0>
 8002b58:	eddf 1a56 	vldr	s3, [pc, #344]	@ 8002cb4 <main+0xed4>
 8002b5c:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8002ca4 <main+0xec4>
 8002b60:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002c98 <main+0xeb8>
 8002b64:	eeb0 0a67 	vmov.f32	s0, s15
 8002b68:	f001 fcfe 	bl	8004568 <map>
 8002b6c:	eef0 7a40 	vmov.f32	s15, s0
 8002b70:	4b51      	ldr	r3, [pc, #324]	@ (8002cb8 <main+0xed8>)
 8002b72:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002b76:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <main+0xeb0>)
 8002b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b7c:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 8002cb0 <main+0xed0>
 8002b80:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8002cb4 <main+0xed4>
 8002b84:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8002ca4 <main+0xec4>
 8002b88:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002c98 <main+0xeb8>
 8002b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b90:	f001 fcea 	bl	8004568 <map>
 8002b94:	eef0 7a40 	vmov.f32	s15, s0
 8002b98:	4b48      	ldr	r3, [pc, #288]	@ (8002cbc <main+0xedc>)
 8002b9a:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002b9e:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <main+0xee0>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d103      	bne.n	8002bae <main+0xdce>
				Mode = 0;
 8002ba6:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <main+0xee4>)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	7013      	strb	r3, [r2, #0]
 8002bac:	e1a5      	b.n	8002efa <main+0x111a>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002bae:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <main+0xeb0>)
 8002bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bb4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	d513      	bpl.n	8002bea <main+0xe0a>
 8002bc2:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <main+0xeb0>)
 8002bc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	d509      	bpl.n	8002bea <main+0xe0a>
				Mode = 0;
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc4 <main+0xee4>)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002be2:	4839      	ldr	r0, [pc, #228]	@ (8002cc8 <main+0xee8>)
 8002be4:	f003 ff80 	bl	8006ae8 <HAL_GPIO_WritePin>
 8002be8:	e187      	b.n	8002efa <main+0x111a>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002bea:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <main+0xeb0>)
 8002bec:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	f340 817c 	ble.w	8002ef4 <main+0x1114>
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <main+0xeec>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8177 	bne.w	8002ef4 <main+0x1114>
				IsPress = 1;
 8002c06:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <main+0xeec>)
 8002c08:	2301      	movs	r3, #1
 8002c0a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c0c:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <main+0xef0>)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002c12:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <main+0xeb0>)
 8002c14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c18:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	dd66      	ble.n	8002cf4 <main+0xf14>
 8002c26:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <main+0xeb0>)
 8002c28:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	d55c      	bpl.n	8002cf4 <main+0xf14>
						&& Receiver[4] < -30) {
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <main+0xeb0>)
 8002c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c40:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d552      	bpl.n	8002cf4 <main+0xf14>
					if (Mode != 1) {
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <main+0xee4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d003      	beq.n	8002c5e <main+0xe7e>
						Mode = 1;
 8002c56:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <main+0xee4>)
 8002c58:	2301      	movs	r3, #1
 8002c5a:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002c5c:	e138      	b.n	8002ed0 <main+0x10f0>
					} else {
						TargetX = End_x;
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <main+0xef4>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <main+0xef8>)
 8002c64:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <main+0xefc>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <main+0xf00>)
 8002c6c:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <main+0xf04>)
 8002c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <main+0xf08>)
 8002c74:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002c76:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <main+0xf0c>)
 8002c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <main+0xf10>)
 8002c7c:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002c7e:	e127      	b.n	8002ed0 <main+0x10f0>
 8002c80:	00000000 	.word	0x00000000
 8002c84:	40b32400 	.word	0x40b32400
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	40977000 	.word	0x40977000
 8002c90:	20000ab0 	.word	0x20000ab0
 8002c94:	42c80000 	.word	0x42c80000
 8002c98:	c2c80000 	.word	0xc2c80000
 8002c9c:	c2c80000 	.word	0xc2c80000
 8002ca0:	20000ae4 	.word	0x20000ae4
 8002ca4:	42c80000 	.word	0x42c80000
 8002ca8:	43fa0000 	.word	0x43fa0000
 8002cac:	c3fa0000 	.word	0xc3fa0000
 8002cb0:	43960000 	.word	0x43960000
 8002cb4:	c3960000 	.word	0xc3960000
 8002cb8:	20000b7c 	.word	0x20000b7c
 8002cbc:	20000b80 	.word	0x20000b80
 8002cc0:	20000bcd 	.word	0x20000bcd
 8002cc4:	20000bcc 	.word	0x20000bcc
 8002cc8:	48000800 	.word	0x48000800
 8002ccc:	20000bce 	.word	0x20000bce
 8002cd0:	20000c1c 	.word	0x20000c1c
 8002cd4:	20000b84 	.word	0x20000b84
 8002cd8:	20000b8c 	.word	0x20000b8c
 8002cdc:	20000b88 	.word	0x20000b88
 8002ce0:	20000b90 	.word	0x20000b90
 8002ce4:	20000af8 	.word	0x20000af8
 8002ce8:	20000b94 	.word	0x20000b94
 8002cec:	20000b38 	.word	0x20000b38
 8002cf0:	20000b98 	.word	0x20000b98
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002cf4:	4b77      	ldr	r3, [pc, #476]	@ (8002ed4 <main+0x10f4>)
 8002cf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cfa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	dd13      	ble.n	8002d30 <main+0xf50>
 8002d08:	4b72      	ldr	r3, [pc, #456]	@ (8002ed4 <main+0x10f4>)
 8002d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d0e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d509      	bpl.n	8002d30 <main+0xf50>
					revolute.finished = 0;
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <main+0x10f8>)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002d22:	4a6e      	ldr	r2, [pc, #440]	@ (8002edc <main+0x10fc>)
 8002d24:	2300      	movs	r3, #0
 8002d26:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002d28:	4a6d      	ldr	r2, [pc, #436]	@ (8002ee0 <main+0x1100>)
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	7013      	strb	r3, [r2, #0]
 8002d2e:	e0cf      	b.n	8002ed0 <main+0x10f0>
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d30:	4b68      	ldr	r3, [pc, #416]	@ (8002ed4 <main+0x10f4>)
 8002d32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d36:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	d517      	bpl.n	8002d74 <main+0xf94>
 8002d44:	4b63      	ldr	r3, [pc, #396]	@ (8002ed4 <main+0x10f4>)
 8002d46:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d4a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	dd0d      	ble.n	8002d74 <main+0xf94>
						&& Receiver[4] < 30) {
 8002d58:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed4 <main+0x10f4>)
 8002d5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d5e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	d503      	bpl.n	8002d74 <main+0xf94>
					Mode = 3;
 8002d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <main+0x1100>)
 8002d6e:	2303      	movs	r3, #3
 8002d70:	7013      	strb	r3, [r2, #0]
 8002d72:	e0ad      	b.n	8002ed0 <main+0x10f0>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002d74:	4b57      	ldr	r3, [pc, #348]	@ (8002ed4 <main+0x10f4>)
 8002d76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d7a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	dd27      	ble.n	8002dd8 <main+0xff8>
 8002d88:	4b52      	ldr	r3, [pc, #328]	@ (8002ed4 <main+0x10f4>)
 8002d8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d8e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d51d      	bpl.n	8002dd8 <main+0xff8>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed4 <main+0x10f4>)
 8002d9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	dd13      	ble.n	8002dd8 <main+0xff8>
 8002db0:	4b48      	ldr	r3, [pc, #288]	@ (8002ed4 <main+0x10f4>)
 8002db2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d509      	bpl.n	8002dd8 <main+0xff8>
					revolute.finished = 0;
 8002dc4:	4a44      	ldr	r2, [pc, #272]	@ (8002ed8 <main+0x10f8>)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002dca:	4a44      	ldr	r2, [pc, #272]	@ (8002edc <main+0x10fc>)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002dd0:	4a43      	ldr	r2, [pc, #268]	@ (8002ee0 <main+0x1100>)
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	7013      	strb	r3, [r2, #0]
 8002dd6:	e07b      	b.n	8002ed0 <main+0x10f0>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed4 <main+0x10f4>)
 8002dda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dde:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dd17      	ble.n	8002e1c <main+0x103c>
 8002dec:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <main+0x10f4>)
 8002dee:	edd3 7a04 	vldr	s15, [r3, #16]
 8002df2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	dd0d      	ble.n	8002e1c <main+0x103c>
						&& Receiver[4] < 30) {
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <main+0x10f4>)
 8002e02:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e06:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d503      	bpl.n	8002e1c <main+0x103c>
					Mode = 5;
 8002e14:	4a32      	ldr	r2, [pc, #200]	@ (8002ee0 <main+0x1100>)
 8002e16:	2305      	movs	r3, #5
 8002e18:	7013      	strb	r3, [r2, #0]
 8002e1a:	e059      	b.n	8002ed0 <main+0x10f0>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <main+0x10f4>)
 8002e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e22:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d50d      	bpl.n	8002e4c <main+0x106c>
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <main+0x10f4>)
 8002e32:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e36:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	dd03      	ble.n	8002e4c <main+0x106c>
//					if (TenPointMode) {
//						Mode = 2;
//					} else {
						Mode = 6;
 8002e44:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <main+0x1100>)
 8002e46:	2306      	movs	r3, #6
 8002e48:	7013      	strb	r3, [r2, #0]
 8002e4a:	e041      	b.n	8002ed0 <main+0x10f0>
//					}
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002e4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <main+0x10f4>)
 8002e4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e52:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	dd17      	ble.n	8002e90 <main+0x10b0>
 8002e60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <main+0x10f4>)
 8002e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e66:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d50d      	bpl.n	8002e90 <main+0x10b0>
						&& Receiver[4] > 30) {
 8002e74:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <main+0x10f4>)
 8002e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e7a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	dd03      	ble.n	8002e90 <main+0x10b0>
					Mode = 7;
 8002e88:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <main+0x1100>)
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	7013      	strb	r3, [r2, #0]
 8002e8e:	e01f      	b.n	8002ed0 <main+0x10f0>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002e90:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <main+0x10f4>)
 8002e92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e96:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	dc00      	bgt.n	8002ea6 <main+0x10c6>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002ea4:	e029      	b.n	8002efa <main+0x111a>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <main+0x10f4>)
 8002ea8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dc00      	bgt.n	8002ebc <main+0x10dc>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002eba:	e01e      	b.n	8002efa <main+0x111a>
					// loop_counter = 0;
					TargetR = 4.18879;
 8002ebc:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <main+0x1104>)
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <main+0x1108>)
 8002ec0:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <main+0x110c>)
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <main+0x1110>)
 8002ec6:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002ec8:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <main+0x1100>)
 8002eca:	2308      	movs	r3, #8
 8002ecc:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002ece:	e014      	b.n	8002efa <main+0x111a>
 8002ed0:	e013      	b.n	8002efa <main+0x111a>
 8002ed2:	bf00      	nop
 8002ed4:	20000ab0 	.word	0x20000ab0
 8002ed8:	20001334 	.word	0x20001334
 8002edc:	20001378 	.word	0x20001378
 8002ee0:	20000bcc 	.word	0x20000bcc
 8002ee4:	20000b94 	.word	0x20000b94
 8002ee8:	40860a91 	.word	0x40860a91
 8002eec:	20000b98 	.word	0x20000b98
 8002ef0:	42480000 	.word	0x42480000
				}
			} else {
				IsPress = 0;
 8002ef4:	4ac4      	ldr	r2, [pc, #784]	@ (8003208 <main+0x1428>)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002efa:	4bc4      	ldr	r3, [pc, #784]	@ (800320c <main+0x142c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <main+0x113c>
				Set_Motor(0, 0);
 8002f02:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8003210 <main+0x1430>
 8002f06:	2000      	movs	r0, #0
 8002f08:	f001 ff04 	bl	8004d14 <Set_Motor>
				Set_Motor(1, 0);
 8002f0c:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8003210 <main+0x1430>
 8002f10:	2001      	movs	r0, #1
 8002f12:	f001 feff 	bl	8004d14 <Set_Motor>
				Set_Servo(0);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f001 ff7a 	bl	8004e10 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002f1c:	4bbb      	ldr	r3, [pc, #748]	@ (800320c <main+0x142c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 80af 	bne.w	8003084 <main+0x12a4>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002f26:	4bbb      	ldr	r3, [pc, #748]	@ (8003214 <main+0x1434>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f30:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002f34:	ed9f 1ab8 	vldr	s2, [pc, #736]	@ 8003218 <main+0x1438>
 8002f38:	eddf 0ab8 	vldr	s1, [pc, #736]	@ 800321c <main+0x143c>
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f001 fb12 	bl	8004568 <map>
 8002f44:	eef0 7a40 	vmov.f32	s15, s0
 8002f48:	4bb5      	ldr	r3, [pc, #724]	@ (8003220 <main+0x1440>)
 8002f4a:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002f4e:	4bb1      	ldr	r3, [pc, #708]	@ (8003214 <main+0x1434>)
 8002f50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f54:	ed9f 2ab3 	vldr	s4, [pc, #716]	@ 8003224 <main+0x1444>
 8002f58:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 8003228 <main+0x1448>
 8002f5c:	ed9f 1aae 	vldr	s2, [pc, #696]	@ 8003218 <main+0x1438>
 8002f60:	eddf 0aae 	vldr	s1, [pc, #696]	@ 800321c <main+0x143c>
 8002f64:	eeb0 0a67 	vmov.f32	s0, s15
 8002f68:	f001 fafe 	bl	8004568 <map>
 8002f6c:	eef0 7a40 	vmov.f32	s15, s0
 8002f70:	4bae      	ldr	r3, [pc, #696]	@ (800322c <main+0x144c>)
 8002f72:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002f76:	4baa      	ldr	r3, [pc, #680]	@ (8003220 <main+0x1440>)
 8002f78:	ed93 7a00 	vldr	s14, [r3]
 8002f7c:	4bac      	ldr	r3, [pc, #688]	@ (8003230 <main+0x1450>)
 8002f7e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	4bab      	ldr	r3, [pc, #684]	@ (8003234 <main+0x1454>)
 8002f88:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002f8c:	4ba7      	ldr	r3, [pc, #668]	@ (800322c <main+0x144c>)
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	4ba9      	ldr	r3, [pc, #676]	@ (8003238 <main+0x1458>)
 8002f94:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9c:	4ba7      	ldr	r3, [pc, #668]	@ (800323c <main+0x145c>)
 8002f9e:	edc3 7a00 	vstr	s15, [r3]

				//Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8002fa2:	f001 fc05 	bl	80047b0 <micros>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				if (currentTimeState1 > timestampState1) {
 8002fae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fb2:	4ba3      	ldr	r3, [pc, #652]	@ (8003240 <main+0x1460>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	4282      	cmp	r2, r0
 8002fba:	418b      	sbcs	r3, r1
 8002fbc:	d250      	bcs.n	8003060 <main+0x1280>
					timestampState1 = currentTimeState1 + 1000;		//us
 8002fbe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002fc2:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002fc6:	61b9      	str	r1, [r7, #24]
 8002fc8:	f143 0300 	adc.w	r3, r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8003240 <main+0x1460>)
 8002fd4:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8002fd8:	4b96      	ldr	r3, [pc, #600]	@ (8003234 <main+0x1454>)
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	4b99      	ldr	r3, [pc, #612]	@ (8003244 <main+0x1464>)
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	4b98      	ldr	r3, [pc, #608]	@ (8003248 <main+0x1468>)
 8002fe6:	edd3 6a00 	vldr	s13, [r3]
 8002fea:	4b98      	ldr	r3, [pc, #608]	@ (800324c <main+0x146c>)
 8002fec:	ed93 6a00 	vldr	s12, [r3]
 8002ff0:	4897      	ldr	r0, [pc, #604]	@ (8003250 <main+0x1470>)
 8002ff2:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8003218 <main+0x1438>
 8002ff6:	eddf 2a89 	vldr	s5, [pc, #548]	@ 800321c <main+0x143c>
 8002ffa:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8003254 <main+0x1474>
 8002ffe:	eef0 1a46 	vmov.f32	s3, s12
 8003002:	eeb0 1a66 	vmov.f32	s2, s13
 8003006:	eef0 0a47 	vmov.f32	s1, s14
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	f001 fbe9 	bl	80047e4 <PID_Update>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	4b90      	ldr	r3, [pc, #576]	@ (8003258 <main+0x1478>)
 8003018:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 800301c:	4b87      	ldr	r3, [pc, #540]	@ (800323c <main+0x145c>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	4b8e      	ldr	r3, [pc, #568]	@ (800325c <main+0x147c>)
 8003024:	ed93 7a00 	vldr	s14, [r3]
 8003028:	4b8d      	ldr	r3, [pc, #564]	@ (8003260 <main+0x1480>)
 800302a:	edd3 6a00 	vldr	s13, [r3]
 800302e:	4b8d      	ldr	r3, [pc, #564]	@ (8003264 <main+0x1484>)
 8003030:	ed93 6a00 	vldr	s12, [r3]
 8003034:	488c      	ldr	r0, [pc, #560]	@ (8003268 <main+0x1488>)
 8003036:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8003218 <main+0x1438>
 800303a:	eddf 2a78 	vldr	s5, [pc, #480]	@ 800321c <main+0x143c>
 800303e:	ed9f 2a85 	vldr	s4, [pc, #532]	@ 8003254 <main+0x1474>
 8003042:	eef0 1a46 	vmov.f32	s3, s12
 8003046:	eeb0 1a66 	vmov.f32	s2, s13
 800304a:	eef0 0a47 	vmov.f32	s1, s14
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	f001 fbc7 	bl	80047e4 <PID_Update>
 8003056:	eef0 7a40 	vmov.f32	s15, s0
 800305a:	4b84      	ldr	r3, [pc, #528]	@ (800326c <main+0x148c>)
 800305c:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 8003060:	f001 ff22 	bl	8004ea8 <Workspace_limit>

				Set_Motor(0, R_PWM);
 8003064:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <main+0x1478>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	2000      	movs	r0, #0
 8003070:	f001 fe50 	bl	8004d14 <Set_Motor>
				Set_Motor(1, P_PWM);
 8003074:	4b7d      	ldr	r3, [pc, #500]	@ (800326c <main+0x148c>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eeb0 0a67 	vmov.f32	s0, s15
 800307e:	2001      	movs	r0, #1
 8003080:	f001 fe48 	bl	8004d14 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 8003084:	4b61      	ldr	r3, [pc, #388]	@ (800320c <main+0x142c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b04      	cmp	r3, #4
 800308a:	f040 812f 	bne.w	80032ec <main+0x150c>
				static bool sequence_active = false;
				static bool waiting_for_up = false;
				static uint64_t pen_timestamp = 0;
				const uint64_t pen_delay = 200000; // 200 ms
 800308e:	4a78      	ldr	r2, [pc, #480]	@ (8003270 <main+0x1490>)
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				static float last_TargetX = 0.0f;
				static float last_TargetY = 0.0f;
				static bool new_target = true;

				// Detect change in target (with small tolerance to avoid float jitter)
				if (fabsf(TargetX - last_TargetX) > 1e-3f
 8003098:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <main+0x1494>)
 800309a:	ed93 7a00 	vldr	s14, [r3]
 800309e:	4b76      	ldr	r3, [pc, #472]	@ (8003278 <main+0x1498>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	eef0 7ae7 	vabs.f32	s15, s15
 80030ac:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800327c <main+0x149c>
 80030b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	dc10      	bgt.n	80030dc <main+0x12fc>
						|| fabsf(TargetY - last_TargetY) > 1e-3f) {
 80030ba:	4b71      	ldr	r3, [pc, #452]	@ (8003280 <main+0x14a0>)
 80030bc:	ed93 7a00 	vldr	s14, [r3]
 80030c0:	4b70      	ldr	r3, [pc, #448]	@ (8003284 <main+0x14a4>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ca:	eef0 7ae7 	vabs.f32	s15, s15
 80030ce:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800327c <main+0x149c>
 80030d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	dd0a      	ble.n	80030f2 <main+0x1312>
					last_TargetX = TargetX;
 80030dc:	4b65      	ldr	r3, [pc, #404]	@ (8003274 <main+0x1494>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <main+0x1498>)
 80030e2:	601a      	str	r2, [r3, #0]
					last_TargetY = TargetY;
 80030e4:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <main+0x14a0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b66      	ldr	r3, [pc, #408]	@ (8003284 <main+0x14a4>)
 80030ea:	601a      	str	r2, [r3, #0]
					new_target = true;
 80030ec:	4a66      	ldr	r2, [pc, #408]	@ (8003288 <main+0x14a8>)
 80030ee:	2301      	movs	r3, #1
 80030f0:	7013      	strb	r3, [r2, #0]
				}

				InverseKinematics(TargetX, TargetY, &TargetR, &TargetP);
 80030f2:	4b60      	ldr	r3, [pc, #384]	@ (8003274 <main+0x1494>)
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	4b61      	ldr	r3, [pc, #388]	@ (8003280 <main+0x14a0>)
 80030fa:	ed93 7a00 	vldr	s14, [r3]
 80030fe:	4963      	ldr	r1, [pc, #396]	@ (800328c <main+0x14ac>)
 8003100:	4863      	ldr	r0, [pc, #396]	@ (8003290 <main+0x14b0>)
 8003102:	eef0 0a47 	vmov.f32	s1, s14
 8003106:	eeb0 0a67 	vmov.f32	s0, s15
 800310a:	f002 f839 	bl	8005180 <InverseKinematics>
				TargetR_Deg = TargetR * 180.0f / M_PI;
 800310e:	4b60      	ldr	r3, [pc, #384]	@ (8003290 <main+0x14b0>)
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003294 <main+0x14b4>
 8003118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd f9de 	bl	80004e0 <__aeabi_f2d>
 8003124:	a336      	add	r3, pc, #216	@ (adr r3, 8003200 <main+0x1420>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd fb5b 	bl	80007e4 <__aeabi_ddiv>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fce5 	bl	8000b04 <__aeabi_d2f>
 800313a:	4602      	mov	r2, r0
 800313c:	4b56      	ldr	r3, [pc, #344]	@ (8003298 <main+0x14b8>)
 800313e:	601a      	str	r2, [r3, #0]

				// Only start when there's a new target AND we're at the target
				if (!sequence_active && new_target && Pen_Status == 1
 8003140:	4b56      	ldr	r3, [pc, #344]	@ (800329c <main+0x14bc>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	f083 0301 	eor.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01f      	beq.n	800318e <main+0x13ae>
 800314e:	4b4e      	ldr	r3, [pc, #312]	@ (8003288 <main+0x14a8>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01b      	beq.n	800318e <main+0x13ae>
 8003156:	4b52      	ldr	r3, [pc, #328]	@ (80032a0 <main+0x14c0>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d117      	bne.n	800318e <main+0x13ae>
						&& CascadeControl_Step()) {
 800315e:	f002 fa5b 	bl	8005618 <CascadeControl_Step>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d012      	beq.n	800318e <main+0x13ae>
					Set_Servo(1); // Tell pen to press
 8003168:	2001      	movs	r0, #1
 800316a:	f001 fe51 	bl	8004e10 <Set_Servo>
					pen_timestamp = micros();
 800316e:	f001 fb1f 	bl	80047b0 <micros>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	494b      	ldr	r1, [pc, #300]	@ (80032a4 <main+0x14c4>)
 8003178:	e9c1 2300 	strd	r2, r3, [r1]
					sequence_active = true;
 800317c:	4a47      	ldr	r2, [pc, #284]	@ (800329c <main+0x14bc>)
 800317e:	2301      	movs	r3, #1
 8003180:	7013      	strb	r3, [r2, #0]
					waiting_for_up = true;
 8003182:	4a49      	ldr	r2, [pc, #292]	@ (80032a8 <main+0x14c8>)
 8003184:	2301      	movs	r3, #1
 8003186:	7013      	strb	r3, [r2, #0]
					new_target = false; // consume the new target
 8003188:	4a3f      	ldr	r2, [pc, #252]	@ (8003288 <main+0x14a8>)
 800318a:	2300      	movs	r3, #0
 800318c:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && waiting_for_up
 800318e:	4b43      	ldr	r3, [pc, #268]	@ (800329c <main+0x14bc>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <main+0x13fc>
 8003196:	4b44      	ldr	r3, [pc, #272]	@ (80032a8 <main+0x14c8>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01e      	beq.n	80031dc <main+0x13fc>
						&& micros() - pen_timestamp >= pen_delay) {
 800319e:	f001 fb07 	bl	80047b0 <micros>
 80031a2:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <main+0x14c4>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	1a84      	subs	r4, r0, r2
 80031aa:	65bc      	str	r4, [r7, #88]	@ 0x58
 80031ac:	eb61 0303 	sbc.w	r3, r1, r3
 80031b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80031b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80031b8:	4291      	cmp	r1, r2
 80031ba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80031bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80031c0:	d30c      	bcc.n	80031dc <main+0x13fc>
					Set_Servo(0); // Tell pen to lift
 80031c2:	2000      	movs	r0, #0
 80031c4:	f001 fe24 	bl	8004e10 <Set_Servo>
					pen_timestamp = micros();
 80031c8:	f001 faf2 	bl	80047b0 <micros>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4934      	ldr	r1, [pc, #208]	@ (80032a4 <main+0x14c4>)
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
					waiting_for_up = false;
 80031d6:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <main+0x14c8>)
 80031d8:	2300      	movs	r3, #0
 80031da:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && !waiting_for_up && Pen_Status == 1
 80031dc:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <main+0x14bc>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8083 	beq.w	80032ec <main+0x150c>
 80031e6:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <main+0x14c8>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d07b      	beq.n	80032ec <main+0x150c>
 80031f4:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <main+0x14c0>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	e057      	b.n	80032ac <main+0x14cc>
 80031fc:	f3af 8000 	nop.w
 8003200:	54442d18 	.word	0x54442d18
 8003204:	400921fb 	.word	0x400921fb
 8003208:	20000bce 	.word	0x20000bce
 800320c:	20000bcc 	.word	0x20000bcc
 8003210:	00000000 	.word	0x00000000
 8003214:	20000ab0 	.word	0x20000ab0
 8003218:	42c80000 	.word	0x42c80000
 800321c:	c2c80000 	.word	0xc2c80000
 8003220:	20000ba4 	.word	0x20000ba4
 8003224:	43fa0000 	.word	0x43fa0000
 8003228:	c3fa0000 	.word	0xc3fa0000
 800322c:	20000ba8 	.word	0x20000ba8
 8003230:	20000af8 	.word	0x20000af8
 8003234:	20000bbc 	.word	0x20000bbc
 8003238:	20000b38 	.word	0x20000b38
 800323c:	20000bc0 	.word	0x20000bc0
 8003240:	200013d8 	.word	0x200013d8
 8003244:	20000200 	.word	0x20000200
 8003248:	20000204 	.word	0x20000204
 800324c:	20000208 	.word	0x20000208
 8003250:	20000c08 	.word	0x20000c08
 8003254:	3c23d70a 	.word	0x3c23d70a
 8003258:	20000bc4 	.word	0x20000bc4
 800325c:	20000218 	.word	0x20000218
 8003260:	2000021c 	.word	0x2000021c
 8003264:	20000c18 	.word	0x20000c18
 8003268:	20000c10 	.word	0x20000c10
 800326c:	20000bc8 	.word	0x20000bc8
 8003270:	00030d40 	.word	0x00030d40
 8003274:	20000b8c 	.word	0x20000b8c
 8003278:	200013e0 	.word	0x200013e0
 800327c:	3a83126f 	.word	0x3a83126f
 8003280:	20000b90 	.word	0x20000b90
 8003284:	200013e4 	.word	0x200013e4
 8003288:	2000022d 	.word	0x2000022d
 800328c:	20000b98 	.word	0x20000b98
 8003290:	20000b94 	.word	0x20000b94
 8003294:	43340000 	.word	0x43340000
 8003298:	20000aa8 	.word	0x20000aa8
 800329c:	200013e8 	.word	0x200013e8
 80032a0:	20000bcf 	.word	0x20000bcf
 80032a4:	200013f0 	.word	0x200013f0
 80032a8:	200013f8 	.word	0x200013f8
 80032ac:	d11e      	bne.n	80032ec <main+0x150c>
						&& micros() - pen_timestamp >= pen_delay) {
 80032ae:	f001 fa7f 	bl	80047b0 <micros>
 80032b2:	4b9b      	ldr	r3, [pc, #620]	@ (8003520 <main+0x1740>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	1a84      	subs	r4, r0, r2
 80032ba:	653c      	str	r4, [r7, #80]	@ 0x50
 80032bc:	eb61 0303 	sbc.w	r3, r1, r3
 80032c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80032c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032c8:	4291      	cmp	r1, r2
 80032ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032cc:	eb71 0303 	sbcs.w	r3, r1, r3
 80032d0:	d30c      	bcc.n	80032ec <main+0x150c>
					Set_Motor(0, 0);
 80032d2:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8003524 <main+0x1744>
 80032d6:	2000      	movs	r0, #0
 80032d8:	f001 fd1c 	bl	8004d14 <Set_Motor>
					Set_Motor(1, 0);
 80032dc:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8003524 <main+0x1744>
 80032e0:	2001      	movs	r0, #1
 80032e2:	f001 fd17 	bl	8004d14 <Set_Motor>
					sequence_active = false;
 80032e6:	4a90      	ldr	r2, [pc, #576]	@ (8003528 <main+0x1748>)
 80032e8:	2300      	movs	r3, #0
 80032ea:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 80032ec:	4b8f      	ldr	r3, [pc, #572]	@ (800352c <main+0x174c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	f040 81ed 	bne.w	80036d0 <main+0x18f0>
				static uint64_t timestampState5 = 0;
				int64_t currentTimeState5 = micros();
 80032f6:	f001 fa5b 	bl	80047b0 <micros>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
				if (currentTimeState5 > timestampState5) {
 8003302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003306:	4b8a      	ldr	r3, [pc, #552]	@ (8003530 <main+0x1750>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	4282      	cmp	r2, r0
 800330e:	418b      	sbcs	r3, r1
 8003310:	f080 81de 	bcs.w	80036d0 <main+0x18f0>
					timestampState5 = currentTimeState5 + 1000; // us
 8003314:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003318:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 800331c:	6139      	str	r1, [r7, #16]
 800331e:	f143 0300 	adc.w	r3, r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003328:	4b81      	ldr	r3, [pc, #516]	@ (8003530 <main+0x1750>)
 800332a:	e9c3 0100 	strd	r0, r1, [r3]

					P_kP_vel = 1.05845642f;
 800332e:	4a81      	ldr	r2, [pc, #516]	@ (8003534 <main+0x1754>)
 8003330:	4b81      	ldr	r3, [pc, #516]	@ (8003538 <main+0x1758>)
 8003332:	6013      	str	r3, [r2, #0]
					P_kI_vel = 0.0496f;
 8003334:	4a81      	ldr	r2, [pc, #516]	@ (800353c <main+0x175c>)
 8003336:	4b82      	ldr	r3, [pc, #520]	@ (8003540 <main+0x1760>)
 8003338:	6013      	str	r3, [r2, #0]
					P_kD_vel = 0.00f;
 800333a:	4a82      	ldr	r2, [pc, #520]	@ (8003544 <main+0x1764>)
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	6013      	str	r3, [r2, #0]

					P_kP_pos = 3.0367f;
 8003342:	4a81      	ldr	r2, [pc, #516]	@ (8003548 <main+0x1768>)
 8003344:	4b81      	ldr	r3, [pc, #516]	@ (800354c <main+0x176c>)
 8003346:	6013      	str	r3, [r2, #0]
					P_kI_pos = 0.10198f;
 8003348:	4a81      	ldr	r2, [pc, #516]	@ (8003550 <main+0x1770>)
 800334a:	4b82      	ldr	r3, [pc, #520]	@ (8003554 <main+0x1774>)
 800334c:	6013      	str	r3, [r2, #0]
					P_kD_pos = 0.0047f;
 800334e:	4a82      	ldr	r2, [pc, #520]	@ (8003558 <main+0x1778>)
 8003350:	4b82      	ldr	r3, [pc, #520]	@ (800355c <main+0x177c>)
 8003352:	6013      	str	r3, [r2, #0]

					bool reachedR = fabsf(
							TargetR - Revolute_QEIdata.RadPosition) < 0.068;
 8003354:	4b82      	ldr	r3, [pc, #520]	@ (8003560 <main+0x1780>)
 8003356:	ed93 7a00 	vldr	s14, [r3]
 800335a:	4b82      	ldr	r3, [pc, #520]	@ (8003564 <main+0x1784>)
 800335c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedR = fabsf(
 8003364:	eef0 7ae7 	vabs.f32	s15, s15
 8003368:	ee17 0a90 	vmov	r0, s15
 800336c:	f7fd f8b8 	bl	80004e0 <__aeabi_f2d>
 8003370:	2301      	movs	r3, #1
 8003372:	461c      	mov	r4, r3
 8003374:	a368      	add	r3, pc, #416	@ (adr r3, 8003518 <main+0x1738>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd fb7b 	bl	8000a74 <__aeabi_dcmplt>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <main+0x15a8>
 8003384:	2300      	movs	r3, #0
 8003386:	461c      	mov	r4, r3
 8003388:	f887 407f 	strb.w	r4, [r7, #127]	@ 0x7f
					bool reachedP = fabsf(
							TargetP - Prismatic_QEIdata.mmPosition) < 0.5;
 800338c:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <main+0x1788>)
 800338e:	ed93 7a00 	vldr	s14, [r3]
 8003392:	4b76      	ldr	r3, [pc, #472]	@ (800356c <main+0x178c>)
 8003394:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedP = fabsf(
 800339c:	eef0 7ae7 	vabs.f32	s15, s15
 80033a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	bf4c      	ite	mi
 80033ae:	2301      	movmi	r3, #1
 80033b0:	2300      	movpl	r3, #0
 80033b2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
					bool all_reached = revolute.finished && prismatic.finished
 80033b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003570 <main+0x1790>)
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
							&& reachedR && reachedP;
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <main+0x15fa>
					bool all_reached = revolute.finished && prismatic.finished
 80033be:	4b6d      	ldr	r3, [pc, #436]	@ (8003574 <main+0x1794>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <main+0x15fa>
							&& reachedR && reachedP;
 80033c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <main+0x15fa>
 80033ce:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <main+0x15fa>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <main+0x15fc>
 80033da:	2300      	movs	r3, #0
					bool all_reached = revolute.finished && prismatic.finished
 80033dc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80033e0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

					int path_len = path_FIBO_length;
 80033ec:	4b62      	ldr	r3, [pc, #392]	@ (8003578 <main+0x1798>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (current_index >= path_len) {
 80033f2:	4b62      	ldr	r3, [pc, #392]	@ (800357c <main+0x179c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033f8:	4293      	cmp	r3, r2
 80033fa:	dc11      	bgt.n	8003420 <main+0x1640>
						if (all_reached) {
 80033fc:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <main+0x1652>
							Set_Servo(0);
 8003404:	2000      	movs	r0, #0
 8003406:	f001 fd03 	bl	8004e10 <Set_Servo>
							Set_Motor(0, 0);
 800340a:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8003524 <main+0x1744>
 800340e:	2000      	movs	r0, #0
 8003410:	f001 fc80 	bl	8004d14 <Set_Motor>
							Set_Motor(1, 0);
 8003414:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8003524 <main+0x1744>
 8003418:	2001      	movs	r0, #1
 800341a:	f001 fc7b 	bl	8004d14 <Set_Motor>
 800341e:	e008      	b.n	8003432 <main+0x1652>
						}
					} else {
						if (all_reached) {
 8003420:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <main+0x1652>
							current_index++;
 8003428:	4b54      	ldr	r3, [pc, #336]	@ (800357c <main+0x179c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	4b53      	ldr	r3, [pc, #332]	@ (800357c <main+0x179c>)
 8003430:	601a      	str	r2, [r3, #0]
						}
					}

					Point target_point = path_FIBO[current_index];
 8003432:	4b52      	ldr	r3, [pc, #328]	@ (800357c <main+0x179c>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4952      	ldr	r1, [pc, #328]	@ (8003580 <main+0x17a0>)
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8003446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800344a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

					InverseKinematics(target_point.x, target_point.y, &TargetR, &TargetP);
 800344e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003452:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003456:	4944      	ldr	r1, [pc, #272]	@ (8003568 <main+0x1788>)
 8003458:	4841      	ldr	r0, [pc, #260]	@ (8003560 <main+0x1780>)
 800345a:	eef0 0a47 	vmov.f32	s1, s14
 800345e:	eeb0 0a67 	vmov.f32	s0, s15
 8003462:	f001 fe8d 	bl	8005180 <InverseKinematics>
					Set_Servo(target_point.p);
 8003466:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800346a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346e:	ee17 0a90 	vmov	r0, s15
 8003472:	f001 fccd 	bl	8004e10 <Set_Servo>

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003476:	4b3a      	ldr	r3, [pc, #232]	@ (8003560 <main+0x1780>)
 8003478:	ed93 7a00 	vldr	s14, [r3]
 800347c:	4b39      	ldr	r3, [pc, #228]	@ (8003564 <main+0x1784>)
 800347e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003486:	4b3f      	ldr	r3, [pc, #252]	@ (8003584 <main+0x17a4>)
 8003488:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800348c:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <main+0x1788>)
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	4b36      	ldr	r3, [pc, #216]	@ (800356c <main+0x178c>)
 8003494:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349c:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <main+0x17a8>)
 800349e:	edc3 7a00 	vstr	s15, [r3]
					float R_Time = Trapezoidal_CalcTotalTime(R_Pos_Error, 1.4f,
 80034a2:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <main+0x17a4>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80034ac:	eddf 0a37 	vldr	s1, [pc, #220]	@ 800358c <main+0x17ac>
 80034b0:	eeb0 0a67 	vmov.f32	s0, s15
 80034b4:	f001 fdaa 	bl	800500c <Trapezoidal_CalcTotalTime>
 80034b8:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
							9.0f);
					float P_Time = Trapezoidal_CalcTotalTime(P_Pos_Error,
 80034bc:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <main+0x17a8>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8003590 <main+0x17b0>
 80034c6:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8003594 <main+0x17b4>
 80034ca:	eeb0 0a67 	vmov.f32	s0, s15
 80034ce:	f001 fd9d 	bl	800500c <Trapezoidal_CalcTotalTime>
 80034d2:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
							300.0f, 1500.0f);
					float new_R_vmax = 1.4f;
 80034d6:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <main+0x17b8>)
 80034d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float new_P_vmax = 300.0f;
 80034dc:	4b2f      	ldr	r3, [pc, #188]	@ (800359c <main+0x17bc>)
 80034de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					if (R_Time > P_Time) {
 80034e2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80034e6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	dd55      	ble.n	80035a0 <main+0x17c0>
						// Revolute is slower -> reduce Prismatic vmax
						new_P_vmax = Trapezoidal_CalcVmaxFromTime(P_Pos_Error,
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <main+0x17a8>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	ed97 1a1d 	vldr	s2, [r7, #116]	@ 0x74
 80034fe:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8003590 <main+0x17b0>
 8003502:	eeb0 0a67 	vmov.f32	s0, s15
 8003506:	f001 fddd 	bl	80050c4 <Trapezoidal_CalcVmaxFromTime>
 800350a:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
								1500.0f, R_Time);
						P_Time = R_Time;
 800350e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003510:	673b      	str	r3, [r7, #112]	@ 0x70
 8003512:	e05d      	b.n	80035d0 <main+0x17f0>
 8003514:	f3af 8000 	nop.w
 8003518:	b020c49c 	.word	0xb020c49c
 800351c:	3fb16872 	.word	0x3fb16872
 8003520:	200013f0 	.word	0x200013f0
 8003524:	00000000 	.word	0x00000000
 8003528:	200013e8 	.word	0x200013e8
 800352c:	20000bcc 	.word	0x20000bcc
 8003530:	20001400 	.word	0x20001400
 8003534:	20000218 	.word	0x20000218
 8003538:	3f877b80 	.word	0x3f877b80
 800353c:	2000021c 	.word	0x2000021c
 8003540:	3d4b295f 	.word	0x3d4b295f
 8003544:	20000c18 	.word	0x20000c18
 8003548:	20000220 	.word	0x20000220
 800354c:	4042594b 	.word	0x4042594b
 8003550:	20000224 	.word	0x20000224
 8003554:	3dd0dae4 	.word	0x3dd0dae4
 8003558:	20000228 	.word	0x20000228
 800355c:	3b9a0275 	.word	0x3b9a0275
 8003560:	20000b94 	.word	0x20000b94
 8003564:	20000af8 	.word	0x20000af8
 8003568:	20000b98 	.word	0x20000b98
 800356c:	20000b38 	.word	0x20000b38
 8003570:	20001334 	.word	0x20001334
 8003574:	20001378 	.word	0x20001378
 8003578:	08023574 	.word	0x08023574
 800357c:	200013bc 	.word	0x200013bc
 8003580:	0800d368 	.word	0x0800d368
 8003584:	20000bb4 	.word	0x20000bb4
 8003588:	20000bb8 	.word	0x20000bb8
 800358c:	3fb33333 	.word	0x3fb33333
 8003590:	44bb8000 	.word	0x44bb8000
 8003594:	43960000 	.word	0x43960000
 8003598:	3fb33333 	.word	0x3fb33333
 800359c:	43960000 	.word	0x43960000
					} else if (P_Time > R_Time) {
 80035a0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80035a4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80035a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd0e      	ble.n	80035d0 <main+0x17f0>
						// Prismatic is slower -> reduce Revolute vmax
						new_R_vmax = Trapezoidal_CalcVmaxFromTime(R_Pos_Error,
 80035b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003854 <main+0x1a74>)
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 80035bc:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	f001 fd7e 	bl	80050c4 <Trapezoidal_CalcVmaxFromTime>
 80035c8:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
								9.0f, P_Time);
						R_Time = P_Time;
 80035cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ce:	677b      	str	r3, [r7, #116]	@ 0x74
					}
					if (revolute.finished
 80035d0:	4ba1      	ldr	r3, [pc, #644]	@ (8003858 <main+0x1a78>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <main+0x183a>
							&& fabsf(TargetR - last_TargetR) > 0.001f) {
 80035d8:	4ba0      	ldr	r3, [pc, #640]	@ (800385c <main+0x1a7c>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	4ba0      	ldr	r3, [pc, #640]	@ (8003860 <main+0x1a80>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e8:	eef0 7ae7 	vabs.f32	s15, s15
 80035ec:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003864 <main+0x1a84>
 80035f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	dd0f      	ble.n	800361a <main+0x183a>
						Trapezoidal_Init(&revolute, R_Pos_Error, new_R_vmax,
 80035fa:	4b96      	ldr	r3, [pc, #600]	@ (8003854 <main+0x1a74>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003604:	edd7 0a2f 	vldr	s1, [r7, #188]	@ 0xbc
 8003608:	eeb0 0a67 	vmov.f32	s0, s15
 800360c:	4892      	ldr	r0, [pc, #584]	@ (8003858 <main+0x1a78>)
 800360e:	f7fe f9db 	bl	80019c8 <Trapezoidal_Init>
								9.0f);
						last_TargetR = TargetR;
 8003612:	4b92      	ldr	r3, [pc, #584]	@ (800385c <main+0x1a7c>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b92      	ldr	r3, [pc, #584]	@ (8003860 <main+0x1a80>)
 8003618:	601a      	str	r2, [r3, #0]
					}
					if (prismatic.finished
 800361a:	4b93      	ldr	r3, [pc, #588]	@ (8003868 <main+0x1a88>)
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <main+0x1884>
							&& fabsf(TargetP - last_TargetP) > 0.01f) {
 8003622:	4b92      	ldr	r3, [pc, #584]	@ (800386c <main+0x1a8c>)
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	4b91      	ldr	r3, [pc, #580]	@ (8003870 <main+0x1a90>)
 800362a:	edd3 7a00 	vldr	s15, [r3]
 800362e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003632:	eef0 7ae7 	vabs.f32	s15, s15
 8003636:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003874 <main+0x1a94>
 800363a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	dd0f      	ble.n	8003664 <main+0x1884>
						Trapezoidal_Init(&prismatic, P_Pos_Error, new_P_vmax,
 8003644:	4b8c      	ldr	r3, [pc, #560]	@ (8003878 <main+0x1a98>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 800387c <main+0x1a9c>
 800364e:	edd7 0a2e 	vldr	s1, [r7, #184]	@ 0xb8
 8003652:	eeb0 0a67 	vmov.f32	s0, s15
 8003656:	4884      	ldr	r0, [pc, #528]	@ (8003868 <main+0x1a88>)
 8003658:	f7fe f9b6 	bl	80019c8 <Trapezoidal_Init>
								1500.0f);
						last_TargetP = TargetP;
 800365c:	4b83      	ldr	r3, [pc, #524]	@ (800386c <main+0x1a8c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b83      	ldr	r3, [pc, #524]	@ (8003870 <main+0x1a90>)
 8003662:	601a      	str	r2, [r3, #0]
					}
					Trapezoidal_Update(&revolute, 0.001f);
 8003664:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8003864 <main+0x1a84>
 8003668:	487b      	ldr	r0, [pc, #492]	@ (8003858 <main+0x1a78>)
 800366a:	f7fe fa77 	bl	8001b5c <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 800366e:	4b7a      	ldr	r3, [pc, #488]	@ (8003858 <main+0x1a78>)
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	4b83      	ldr	r3, [pc, #524]	@ (8003880 <main+0x1aa0>)
 8003674:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 8003676:	4b78      	ldr	r3, [pc, #480]	@ (8003858 <main+0x1a78>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <main+0x1aa4>)
 800367c:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 800367e:	4b76      	ldr	r3, [pc, #472]	@ (8003858 <main+0x1a78>)
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	4b81      	ldr	r3, [pc, #516]	@ (8003888 <main+0x1aa8>)
 8003684:	601a      	str	r2, [r3, #0]
					Trapezoidal_Update(&prismatic, 0.001f);
 8003686:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8003864 <main+0x1a84>
 800368a:	4877      	ldr	r0, [pc, #476]	@ (8003868 <main+0x1a88>)
 800368c:	f7fe fa66 	bl	8001b5c <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 8003690:	4b75      	ldr	r3, [pc, #468]	@ (8003868 <main+0x1a88>)
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	4b7d      	ldr	r3, [pc, #500]	@ (800388c <main+0x1aac>)
 8003696:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 8003698:	4b73      	ldr	r3, [pc, #460]	@ (8003868 <main+0x1a88>)
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	4b7c      	ldr	r3, [pc, #496]	@ (8003890 <main+0x1ab0>)
 800369e:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 80036a0:	4b71      	ldr	r3, [pc, #452]	@ (8003868 <main+0x1a88>)
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003894 <main+0x1ab4>)
 80036a6:	601a      	str	r2, [r3, #0]
					PIDStep();
 80036a8:	f001 fe48 	bl	800533c <PIDStep>
					Workspace_limit();
 80036ac:	f001 fbfc 	bl	8004ea8 <Workspace_limit>
					Set_Motor(0, R_PWM);
 80036b0:	4b79      	ldr	r3, [pc, #484]	@ (8003898 <main+0x1ab8>)
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ba:	2000      	movs	r0, #0
 80036bc:	f001 fb2a 	bl	8004d14 <Set_Motor>
					Set_Motor(1, P_PWM);
 80036c0:	4b76      	ldr	r3, [pc, #472]	@ (800389c <main+0x1abc>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ca:	2001      	movs	r0, #1
 80036cc:	f001 fb22 	bl	8004d14 <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 6) {
 80036d0:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <main+0x1ac0>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d177      	bne.n	80037c8 <main+0x19e8>
				static bool PenIsNotDelay = true;
				static uint64_t lastPressTime6 = 0;
				if (PenIsNotDelay) {
 80036d8:	4b72      	ldr	r3, [pc, #456]	@ (80038a4 <main+0x1ac4>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d06c      	beq.n	80037ba <main+0x19da>
					if (IsPress && currentTimer - lastPressTime6 >= 2000000) {
 80036e0:	4b71      	ldr	r3, [pc, #452]	@ (80038a8 <main+0x1ac8>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05d      	beq.n	80037a4 <main+0x19c4>
 80036e8:	4b70      	ldr	r3, [pc, #448]	@ (80038ac <main+0x1acc>)
 80036ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ee:	4b70      	ldr	r3, [pc, #448]	@ (80038b0 <main+0x1ad0>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	1a84      	subs	r4, r0, r2
 80036f6:	60bc      	str	r4, [r7, #8]
 80036f8:	eb61 0303 	sbc.w	r3, r1, r3
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b6d      	ldr	r3, [pc, #436]	@ (80038b4 <main+0x1ad4>)
 8003700:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003704:	4602      	mov	r2, r0
 8003706:	429a      	cmp	r2, r3
 8003708:	460b      	mov	r3, r1
 800370a:	f173 0300 	sbcs.w	r3, r3, #0
 800370e:	d349      	bcc.n	80037a4 <main+0x19c4>
						lastPressTime6 = currentTimer;
 8003710:	4b66      	ldr	r3, [pc, #408]	@ (80038ac <main+0x1acc>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	4966      	ldr	r1, [pc, #408]	@ (80038b0 <main+0x1ad0>)
 8003718:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode) {
 800371c:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <main+0x1ad8>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <main+0x194c>
							Mode = 2;
 8003724:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <main+0x1ac0>)
 8003726:	2302      	movs	r3, #2
 8003728:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 800372a:	e04c      	b.n	80037c6 <main+0x19e6>
						} else {
							TenPointArray[counter * 2] =
 800372c:	4b63      	ldr	r3, [pc, #396]	@ (80038bc <main+0x1adc>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0058      	lsls	r0, r3, #1
									Prismatic_QEIdata.mmPosition;
 8003732:	4b63      	ldr	r3, [pc, #396]	@ (80038c0 <main+0x1ae0>)
 8003734:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[counter * 2] =
 8003736:	4a63      	ldr	r2, [pc, #396]	@ (80038c4 <main+0x1ae4>)
 8003738:	0083      	lsls	r3, r0, #2
 800373a:	4413      	add	r3, r2
 800373c:	6019      	str	r1, [r3, #0]
							TenPointArray[(counter * 2) + 1] =
 800373e:	4b5f      	ldr	r3, [pc, #380]	@ (80038bc <main+0x1adc>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	1c58      	adds	r0, r3, #1
									Revolute_QEIdata.RadPosition;
 8003746:	4b60      	ldr	r3, [pc, #384]	@ (80038c8 <main+0x1ae8>)
 8003748:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[(counter * 2) + 1] =
 800374a:	4a5e      	ldr	r2, [pc, #376]	@ (80038c4 <main+0x1ae4>)
 800374c:	0083      	lsls	r3, r0, #2
 800374e:	4413      	add	r3, r2
 8003750:	6019      	str	r1, [r3, #0]
							SET_TARGET(counter, Prismatic_QEIdata.mmPosition,
 8003752:	4b5a      	ldr	r3, [pc, #360]	@ (80038bc <main+0x1adc>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b25a      	sxtb	r2, r3
 8003758:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <main+0x1ae0>)
 800375a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800375e:	4b5a      	ldr	r3, [pc, #360]	@ (80038c8 <main+0x1ae8>)
 8003760:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003764:	eef0 0a47 	vmov.f32	s1, s14
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	4610      	mov	r0, r2
 800376e:	f7fd fd8b 	bl	8001288 <SET_TARGET>
									Revolute_QEIdata.RadPosition);
							PenIsNotDelay = PenDelay();
 8003772:	f000 fe61 	bl	8004438 <PenDelay>
 8003776:	4603      	mov	r3, r0
 8003778:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <main+0x1ac4>)
 800377a:	7013      	strb	r3, [r2, #0]

							counter++;
 800377c:	4b4f      	ldr	r3, [pc, #316]	@ (80038bc <main+0x1adc>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4a4d      	ldr	r2, [pc, #308]	@ (80038bc <main+0x1adc>)
 8003786:	7013      	strb	r3, [r2, #0]
							if (counter >= 10) {
 8003788:	4b4c      	ldr	r3, [pc, #304]	@ (80038bc <main+0x1adc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b09      	cmp	r3, #9
 800378e:	d91a      	bls.n	80037c6 <main+0x19e6>
								counter = 0;
 8003790:	4a4a      	ldr	r2, [pc, #296]	@ (80038bc <main+0x1adc>)
 8003792:	2300      	movs	r3, #0
 8003794:	7013      	strb	r3, [r2, #0]
								testArraydone = true;
 8003796:	4a4d      	ldr	r2, [pc, #308]	@ (80038cc <main+0x1aec>)
 8003798:	2301      	movs	r3, #1
 800379a:	7013      	strb	r3, [r2, #0]
								TenPointMode = true;
 800379c:	4a46      	ldr	r2, [pc, #280]	@ (80038b8 <main+0x1ad8>)
 800379e:	2301      	movs	r3, #1
 80037a0:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 80037a2:	e010      	b.n	80037c6 <main+0x19e6>
							}
						}
					} else if (!TenPointMode) {
 80037a4:	4b44      	ldr	r3, [pc, #272]	@ (80038b8 <main+0x1ad8>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <main+0x19e8>
						Mode = 1;
 80037b2:	4a3b      	ldr	r2, [pc, #236]	@ (80038a0 <main+0x1ac0>)
 80037b4:	2301      	movs	r3, #1
 80037b6:	7013      	strb	r3, [r2, #0]
 80037b8:	e006      	b.n	80037c8 <main+0x19e8>
					}
				} else {
					PenIsNotDelay = PenDelay();
 80037ba:	f000 fe3d 	bl	8004438 <PenDelay>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a38      	ldr	r2, [pc, #224]	@ (80038a4 <main+0x1ac4>)
 80037c2:	7013      	strb	r3, [r2, #0]
 80037c4:	e000      	b.n	80037c8 <main+0x19e8>
						if (TenPointMode) {
 80037c6:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7) {
 80037c8:	4b35      	ldr	r3, [pc, #212]	@ (80038a0 <main+0x1ac0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	d128      	bne.n	8003822 <main+0x1a42>
				static uint64_t lastPressTime7 = 0;
				if (testArraydone && IsPress
 80037d0:	4b3e      	ldr	r3, [pc, #248]	@ (80038cc <main+0x1aec>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d021      	beq.n	800381c <main+0x1a3c>
 80037d8:	4b33      	ldr	r3, [pc, #204]	@ (80038a8 <main+0x1ac8>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01d      	beq.n	800381c <main+0x1a3c>
						&& currentTimer - lastPressTime7 >= 2000000) {
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <main+0x1acc>)
 80037e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037e6:	4b3a      	ldr	r3, [pc, #232]	@ (80038d0 <main+0x1af0>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	1a84      	subs	r4, r0, r2
 80037ee:	603c      	str	r4, [r7, #0]
 80037f0:	eb61 0303 	sbc.w	r3, r1, r3
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	4b2f      	ldr	r3, [pc, #188]	@ (80038b4 <main+0x1ad4>)
 80037f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037fc:	4602      	mov	r2, r0
 80037fe:	429a      	cmp	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	f173 0300 	sbcs.w	r3, r3, #0
 8003806:	d309      	bcc.n	800381c <main+0x1a3c>
					lastPressTime7 = currentTimer;
 8003808:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <main+0x1acc>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	4930      	ldr	r1, [pc, #192]	@ (80038d0 <main+0x1af0>)
 8003810:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = true;
 8003814:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <main+0x1ad8>)
 8003816:	2301      	movs	r3, #1
 8003818:	7013      	strb	r3, [r2, #0]
 800381a:	e002      	b.n	8003822 <main+0x1a42>
				} else {
					Mode = 2;
 800381c:	4a20      	ldr	r2, [pc, #128]	@ (80038a0 <main+0x1ac0>)
 800381e:	2302      	movs	r3, #2
 8003820:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 8003822:	4b1f      	ldr	r3, [pc, #124]	@ (80038a0 <main+0x1ac0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b08      	cmp	r3, #8
 8003828:	f47e ab63 	bne.w	8001ef2 <main+0x112>
				if (counter8 < 10) {
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <main+0x1af4>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b09      	cmp	r3, #9
 8003832:	f200 8082 	bhi.w	800393a <main+0x1b5a>
					goCenter8 = true;
 8003836:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <main+0x1af8>)
 8003838:	2301      	movs	r3, #1
 800383a:	7013      	strb	r3, [r2, #0]

					if (goCenter8) {
 800383c:	4b26      	ldr	r3, [pc, #152]	@ (80038d8 <main+0x1af8>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d04d      	beq.n	80038e0 <main+0x1b00>
						TargetR = M_PI_2;
 8003844:	4a05      	ldr	r2, [pc, #20]	@ (800385c <main+0x1a7c>)
 8003846:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <main+0x1afc>)
 8003848:	6013      	str	r3, [r2, #0]
						TargetP = 0;
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <main+0x1a8c>)
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e04b      	b.n	80038ec <main+0x1b0c>
 8003854:	20000bb4 	.word	0x20000bb4
 8003858:	20001334 	.word	0x20001334
 800385c:	20000b94 	.word	0x20000b94
 8003860:	20001320 	.word	0x20001320
 8003864:	3a83126f 	.word	0x3a83126f
 8003868:	20001378 	.word	0x20001378
 800386c:	20000b98 	.word	0x20000b98
 8003870:	20001324 	.word	0x20001324
 8003874:	3c23d70a 	.word	0x3c23d70a
 8003878:	20000bb8 	.word	0x20000bb8
 800387c:	44bb8000 	.word	0x44bb8000
 8003880:	20000b9c 	.word	0x20000b9c
 8003884:	20000ba4 	.word	0x20000ba4
 8003888:	20000bac 	.word	0x20000bac
 800388c:	20000ba0 	.word	0x20000ba0
 8003890:	20000ba8 	.word	0x20000ba8
 8003894:	20000bb0 	.word	0x20000bb0
 8003898:	20000bc4 	.word	0x20000bc4
 800389c:	20000bc8 	.word	0x20000bc8
 80038a0:	20000bcc 	.word	0x20000bcc
 80038a4:	2000022e 	.word	0x2000022e
 80038a8:	20000bce 	.word	0x20000bce
 80038ac:	20001318 	.word	0x20001318
 80038b0:	20001408 	.word	0x20001408
 80038b4:	001e8480 	.word	0x001e8480
 80038b8:	20000c3a 	.word	0x20000c3a
 80038bc:	20000c39 	.word	0x20000c39
 80038c0:	20000b38 	.word	0x20000b38
 80038c4:	200012c0 	.word	0x200012c0
 80038c8:	20000af8 	.word	0x20000af8
 80038cc:	20001310 	.word	0x20001310
 80038d0:	20001410 	.word	0x20001410
 80038d4:	20000c38 	.word	0x20000c38
 80038d8:	2000022c 	.word	0x2000022c
 80038dc:	3fc90fdb 	.word	0x3fc90fdb
					} else {
						TargetR = M_PI_4;
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <main+0x1b78>)
 80038e2:	4b1e      	ldr	r3, [pc, #120]	@ (800395c <main+0x1b7c>)
 80038e4:	6013      	str	r3, [r2, #0]
						TargetP = 150;
 80038e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <main+0x1b80>)
 80038e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <main+0x1b84>)
 80038ea:	6013      	str	r3, [r2, #0]
					}

					if (CascadeControl_Step()) {
 80038ec:	f001 fe94 	bl	8005618 <CascadeControl_Step>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f43e aafd 	beq.w	8001ef2 <main+0x112>
						if (PenDelay()) {
 80038f8:	f000 fd9e 	bl	8004438 <PenDelay>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f43e aaf7 	beq.w	8001ef2 <main+0x112>
							if (goCenter8) {
 8003904:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <main+0x1b88>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <main+0x1b38>
								counter8++;
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <main+0x1b8c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4a15      	ldr	r2, [pc, #84]	@ (800396c <main+0x1b8c>)
 8003916:	7013      	strb	r3, [r2, #0]
							}
							goCenter8 = !goCenter8;
 8003918:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <main+0x1b88>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	4a0d      	ldr	r2, [pc, #52]	@ (8003968 <main+0x1b88>)
 8003934:	7013      	strb	r3, [r2, #0]
 8003936:	f7fe badc 	b.w	8001ef2 <main+0x112>
						}
					}
				} else if (counter8 >= 10 && IsPress) {
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <main+0x1b8c>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b09      	cmp	r3, #9
 8003940:	f67e aad7 	bls.w	8001ef2 <main+0x112>
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <main+0x1b90>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f43e aad2 	beq.w	8001ef2 <main+0x112>
					counter8 = 0;
 800394e:	4a07      	ldr	r2, [pc, #28]	@ (800396c <main+0x1b8c>)
 8003950:	2300      	movs	r3, #0
 8003952:	7013      	strb	r3, [r2, #0]
	while (1) {
 8003954:	f7fe bacd 	b.w	8001ef2 <main+0x112>
 8003958:	20000b94 	.word	0x20000b94
 800395c:	3f490fdb 	.word	0x3f490fdb
 8003960:	20000b98 	.word	0x20000b98
 8003964:	43160000 	.word	0x43160000
 8003968:	2000022c 	.word	0x2000022c
 800396c:	20000c38 	.word	0x20000c38
 8003970:	20000bce 	.word	0x20000bce

08003974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b094      	sub	sp, #80	@ 0x50
 8003978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	2238      	movs	r2, #56	@ 0x38
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f008 fd98 	bl	800c4b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003996:	2000      	movs	r0, #0
 8003998:	f003 f8d6 	bl	8006b48 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800399c:	2302      	movs	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a6:	2340      	movs	r3, #64	@ 0x40
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039aa:	2302      	movs	r3, #2
 80039ac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ae:	2302      	movs	r3, #2
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039b2:	2304      	movs	r3, #4
 80039b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80039b6:	2355      	movs	r3, #85	@ 0x55
 80039b8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ba:	2302      	movs	r3, #2
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039be:	2302      	movs	r3, #2
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039c2:	2302      	movs	r3, #2
 80039c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039c6:	f107 0318 	add.w	r3, r7, #24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 f970 	bl	8006cb0 <HAL_RCC_OscConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SystemClock_Config+0x66>
		Error_Handler();
 80039d6:	f001 fea1 	bl	800571c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80039da:	230f      	movs	r3, #15
 80039dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039de:	2303      	movs	r3, #3
 80039e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	2104      	movs	r1, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fc6e 	bl	80072d4 <HAL_RCC_ClockConfig>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <SystemClock_Config+0x8e>
		Error_Handler();
 80039fe:	f001 fe8d 	bl	800571c <Error_Handler>
	}
}
 8003a02:	bf00      	nop
 8003a04:	3750      	adds	r7, #80	@ 0x50
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	@ 0x30
 8003a10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a30:	463b      	mov	r3, r7
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003a3a:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a3c:	4a35      	ldr	r2, [pc, #212]	@ (8003b14 <MX_TIM1_Init+0x108>)
 8003a3e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003a40:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a42:	22a9      	movs	r2, #169	@ 0xa9
 8003a44:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a46:	4b32      	ldr	r3, [pc, #200]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a52:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a54:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003a66:	482a      	ldr	r0, [pc, #168]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a68:	f004 fb6a 	bl	8008140 <HAL_TIM_IC_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003a72:	f001 fe53 	bl	800571c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003a76:	2304      	movs	r3, #4
 8003a78:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003a7a:	2360      	movs	r3, #96	@ 0x60
 8003a7c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481f      	ldr	r0, [pc, #124]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a92:	f005 fb35 	bl	8009100 <HAL_TIM_SlaveConfigSynchro>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM1_Init+0x94>
		Error_Handler();
 8003a9c:	f001 fe3e 	bl	800571c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4815      	ldr	r0, [pc, #84]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003aba:	f005 f85a 	bl	8008b72 <HAL_TIM_IC_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003ac4:	f001 fe2a 	bl	800571c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003acc:	2301      	movs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480d      	ldr	r0, [pc, #52]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003ada:	f005 f84a 	bl	8008b72 <HAL_TIM_IC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003ae4:	f001 fe1a 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003af4:	463b      	mov	r3, r7
 8003af6:	4619      	mov	r1, r3
 8003af8:	4805      	ldr	r0, [pc, #20]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003afa:	f006 fc1d 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003b04:	f001 fe0a 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003b08:	bf00      	nop
 8003b0a:	3730      	adds	r7, #48	@ 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200002b0 	.word	0x200002b0
 8003b14:	40012c00 	.word	0x40012c00

08003b18 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	@ 0x30
 8003b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b46:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b4c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b50:	22a9      	movs	r2, #169	@ 0xa9
 8003b52:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b54:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b62:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b68:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003b6e:	4829      	ldr	r0, [pc, #164]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b70:	f004 fae6 	bl	8008140 <HAL_TIM_IC_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM2_Init+0x66>
		Error_Handler();
 8003b7a:	f001 fdcf 	bl	800571c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003b7e:	2304      	movs	r3, #4
 8003b80:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003b82:	2350      	movs	r3, #80	@ 0x50
 8003b84:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003b92:	f107 031c 	add.w	r3, r7, #28
 8003b96:	4619      	mov	r1, r3
 8003b98:	481e      	ldr	r0, [pc, #120]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b9a:	f005 fab1 	bl	8009100 <HAL_TIM_SlaveConfigSynchro>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003ba4:	f001 fdba 	bl	800571c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4814      	ldr	r0, [pc, #80]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003bc2:	f004 ffd6 	bl	8008b72 <HAL_TIM_IC_ConfigChannel>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003bcc:	f001 fda6 	bl	800571c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	480c      	ldr	r0, [pc, #48]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003be2:	f004 ffc6 	bl	8008b72 <HAL_TIM_IC_ConfigChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003bec:	f001 fd96 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4805      	ldr	r0, [pc, #20]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003bfe:	f006 fb9b 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003c08:	f001 fd88 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003c0c:	bf00      	nop
 8003c0e:	3730      	adds	r7, #48	@ 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	2000037c 	.word	0x2000037c

08003c18 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	@ 0x30
 8003c1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	2224      	movs	r2, #36	@ 0x24
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f008 fc46 	bl	800c4b8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <MX_TIM3_Init+0xa8>)
 8003c3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c56:	4b19      	ldr	r3, [pc, #100]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4619      	mov	r1, r3
 8003c86:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c88:	f004 fcb8 	bl	80085fc <HAL_TIM_Encoder_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c92:	f001 fd43 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4806      	ldr	r0, [pc, #24]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003ca4:	f006 fb48 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003cae:	f001 fd35 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003cb2:	bf00      	nop
 8003cb4:	3730      	adds	r7, #48	@ 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000448 	.word	0x20000448
 8003cc0:	40000400 	.word	0x40000400

08003cc4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	@ 0x30
 8003cc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f008 fbf0 	bl	800c4b8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cd8:	463b      	mov	r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003ce4:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <MX_TIM4_Init+0xa8>)
 8003ce6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cfa:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d20:	2301      	movs	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d34:	f004 fc62 	bl	80085fc <HAL_TIM_Encoder_Init>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003d3e:	f001 fced 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4806      	ldr	r0, [pc, #24]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d50:	f006 faf2 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003d5a:	f001 fcdf 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003d5e:	bf00      	nop
 8003d60:	3730      	adds	r7, #48	@ 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000514 	.word	0x20000514
 8003d6c:	40000800 	.word	0x40000800

08003d70 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <MX_TIM5_Init+0x98>)
 8003d92:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d96:	22a9      	movs	r2, #169	@ 0xa9
 8003d98:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	4b16      	ldr	r3, [pc, #88]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003db4:	4813      	ldr	r0, [pc, #76]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003db6:	f003 fef7 	bl	8007ba8 <HAL_TIM_Base_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003dc0:	f001 fcac 	bl	800571c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480c      	ldr	r0, [pc, #48]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003dd2:	f005 f87f 	bl	8008ed4 <HAL_TIM_ConfigClockSource>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM5_Init+0x70>
		Error_Handler();
 8003ddc:	f001 fc9e 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003dee:	f006 faa3 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003df8:	f001 fc90 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200005e0 	.word	0x200005e0
 8003e08:	40000c00 	.word	0x40000c00

08003e0c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b09c      	sub	sp, #112	@ 0x70
 8003e10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
 8003e3c:	615a      	str	r2, [r3, #20]
 8003e3e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2234      	movs	r2, #52	@ 0x34
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 fb36 	bl	800c4b8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003f80 <MX_TIM8_Init+0x174>)
 8003e50:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e54:	22a9      	movs	r2, #169	@ 0xa9
 8003e56:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e58:	4b48      	ldr	r3, [pc, #288]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e60:	2264      	movs	r2, #100	@ 0x64
 8003e62:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e64:	4b45      	ldr	r3, [pc, #276]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e70:	4b42      	ldr	r3, [pc, #264]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003e76:	4841      	ldr	r0, [pc, #260]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e78:	f003 fe96 	bl	8007ba8 <HAL_TIM_Base_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003e82:	f001 fc4b 	bl	800571c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e8a:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003e8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e90:	4619      	mov	r1, r3
 8003e92:	483a      	ldr	r0, [pc, #232]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e94:	f005 f81e 	bl	8008ed4 <HAL_TIM_ConfigClockSource>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM8_Init+0x96>
		Error_Handler();
 8003e9e:	f001 fc3d 	bl	800571c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003ea2:	4836      	ldr	r0, [pc, #216]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003ea4:	f003 ffcc 	bl	8007e40 <HAL_TIM_PWM_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003eae:	f001 fc35 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003ebe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	482d      	ldr	r0, [pc, #180]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003ec6:	f006 fa37 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003ed0:	f001 fc24 	bl	800571c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed4:	2360      	movs	r3, #96	@ 0x60
 8003ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003ed8:	2364      	movs	r3, #100	@ 0x64
 8003eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003edc:	2300      	movs	r3, #0
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003ef0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4820      	ldr	r0, [pc, #128]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003efa:	f004 fed7 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003f04:	f001 fc0a 	bl	800571c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003f08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481a      	ldr	r0, [pc, #104]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f12:	f004 fecb 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003f1c:	f001 fbfe 	bl	800571c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f38:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f50:	2300      	movs	r3, #0
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4807      	ldr	r0, [pc, #28]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f5e:	f006 fa81 	bl	800a464 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003f68:	f001 fbd8 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f6e:	f001 fd69 	bl	8005a44 <HAL_TIM_MspPostInit>

}
 8003f72:	bf00      	nop
 8003f74:	3770      	adds	r7, #112	@ 0x70
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200006ac 	.word	0x200006ac
 8003f80:	40013400 	.word	0x40013400

08003f84 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b09c      	sub	sp, #112	@ 0x70
 8003f88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003f8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003fa4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
 8003fb4:	615a      	str	r2, [r3, #20]
 8003fb6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	2234      	movs	r2, #52	@ 0x34
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f008 fa7a 	bl	800c4b8 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fc6:	4a40      	ldr	r2, [pc, #256]	@ (80040c8 <MX_TIM15_Init+0x144>)
 8003fc8:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003fca:	4b3e      	ldr	r3, [pc, #248]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fcc:	22a9      	movs	r2, #169	@ 0xa9
 8003fce:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fd8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003fdc:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fde:	4b39      	ldr	r3, [pc, #228]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003fe4:	4b37      	ldr	r3, [pc, #220]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ff0:	4834      	ldr	r0, [pc, #208]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003ff2:	f003 fdd9 	bl	8007ba8 <HAL_TIM_Base_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003ffc:	f001 fb8e 	bl	800571c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8004006:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800400a:	4619      	mov	r1, r3
 800400c:	482d      	ldr	r0, [pc, #180]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800400e:	f004 ff61 	bl	8008ed4 <HAL_TIM_ConfigClockSource>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM15_Init+0x98>
		Error_Handler();
 8004018:	f001 fb80 	bl	800571c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800401c:	4829      	ldr	r0, [pc, #164]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800401e:	f003 ff0f 	bl	8007e40 <HAL_TIM_PWM_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM15_Init+0xa8>
		Error_Handler();
 8004028:	f001 fb78 	bl	800571c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402c:	2300      	movs	r3, #0
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8004034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004038:	4619      	mov	r1, r3
 800403a:	4822      	ldr	r0, [pc, #136]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800403c:	f006 f97c 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8004046:	f001 fb69 	bl	800571c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800404a:	2360      	movs	r3, #96	@ 0x60
 800404c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004052:	2300      	movs	r3, #0
 8004054:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004056:	2300      	movs	r3, #0
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8004066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800406a:	2200      	movs	r2, #0
 800406c:	4619      	mov	r1, r3
 800406e:	4815      	ldr	r0, [pc, #84]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8004070:	f004 fe1c 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800407a:	f001 fb4f 	bl	800571c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004096:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <MX_TIM15_Init+0x140>)
 80040a6:	f006 f9dd 	bl	800a464 <HAL_TIMEx_ConfigBreakDeadTime>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 80040b0:	f001 fb34 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80040b4:	4803      	ldr	r0, [pc, #12]	@ (80040c4 <MX_TIM15_Init+0x140>)
 80040b6:	f001 fcc5 	bl	8005a44 <HAL_TIM_MspPostInit>

}
 80040ba:	bf00      	nop
 80040bc:	3770      	adds	r7, #112	@ 0x70
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000778 	.word	0x20000778
 80040c8:	40014000 	.word	0x40014000

080040cc <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <MX_TIM16_Init+0x5c>)
 80040d4:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 80040d6:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040d8:	22a9      	movs	r2, #169	@ 0xa9
 80040da:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040e4:	f240 4279 	movw	r2, #1145	@ 0x479
 80040e8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80040fc:	4809      	ldr	r0, [pc, #36]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040fe:	f003 fd53 	bl	8007ba8 <HAL_TIM_Base_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM16_Init+0x40>
		Error_Handler();
 8004108:	f001 fb08 	bl	800571c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 800410c:	2108      	movs	r1, #8
 800410e:	4805      	ldr	r0, [pc, #20]	@ (8004124 <MX_TIM16_Init+0x58>)
 8004110:	f004 f97e 	bl	8008410 <HAL_TIM_OnePulse_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM16_Init+0x52>
		Error_Handler();
 800411a:	f001 faff 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000844 	.word	0x20000844
 8004128:	40014400 	.word	0x40014400

0800412c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004130:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004132:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <MX_USART2_UART_Init+0x98>)
 8004134:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004136:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800413c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004144:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004146:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004148:	2200      	movs	r2, #0
 800414a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 800414c:	4b1c      	ldr	r3, [pc, #112]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004156:	220c      	movs	r2, #12
 8004158:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415a:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004166:	4b16      	ldr	r3, [pc, #88]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004174:	2200      	movs	r2, #0
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004178:	4811      	ldr	r0, [pc, #68]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800417a:	f006 fa57 	bl	800a62c <HAL_UART_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8004184:	f001 faca 	bl	800571c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8004188:	2100      	movs	r1, #0
 800418a:	480d      	ldr	r0, [pc, #52]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800418c:	f008 f893 	bl	800c2b6 <HAL_UARTEx_SetTxFifoThreshold>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8004196:	f001 fac1 	bl	800571c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800419a:	2100      	movs	r1, #0
 800419c:	4808      	ldr	r0, [pc, #32]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800419e:	f008 f8c8 	bl	800c332 <HAL_UARTEx_SetRxFifoThreshold>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 80041a8:	f001 fab8 	bl	800571c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80041ac:	4804      	ldr	r0, [pc, #16]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 80041ae:	f008 f849 	bl	800c244 <HAL_UARTEx_DisableFifoMode>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USART2_UART_Init+0x90>
		Error_Handler();
 80041b8:	f001 fab0 	bl	800571c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000910 	.word	0x20000910
 80041c4:	40004400 	.word	0x40004400

080041c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80041ce:	4b16      	ldr	r3, [pc, #88]	@ (8004228 <MX_DMA_Init+0x60>)
 80041d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d2:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <MX_DMA_Init+0x60>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80041da:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <MX_DMA_Init+0x60>)
 80041dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <MX_DMA_Init+0x60>)
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <MX_DMA_Init+0x60>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <MX_DMA_Init+0x60>)
 80041f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	200b      	movs	r0, #11
 8004204:	f001 ff6f 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004208:	200b      	movs	r0, #11
 800420a:	f001 ff86 	bl	800611a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	200c      	movs	r0, #12
 8004214:	f001 ff67 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004218:	200c      	movs	r0, #12
 800421a:	f001 ff7e 	bl	800611a <HAL_NVIC_EnableIRQ>

}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000

0800422c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	@ 0x28
 8004230:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004242:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <MX_GPIO_Init+0x200>)
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	4a79      	ldr	r2, [pc, #484]	@ (800442c <MX_GPIO_Init+0x200>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424e:	4b77      	ldr	r3, [pc, #476]	@ (800442c <MX_GPIO_Init+0x200>)
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800425a:	4b74      	ldr	r3, [pc, #464]	@ (800442c <MX_GPIO_Init+0x200>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425e:	4a73      	ldr	r2, [pc, #460]	@ (800442c <MX_GPIO_Init+0x200>)
 8004260:	f043 0320 	orr.w	r3, r3, #32
 8004264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004266:	4b71      	ldr	r3, [pc, #452]	@ (800442c <MX_GPIO_Init+0x200>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	4b6e      	ldr	r3, [pc, #440]	@ (800442c <MX_GPIO_Init+0x200>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	4a6d      	ldr	r2, [pc, #436]	@ (800442c <MX_GPIO_Init+0x200>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800427e:	4b6b      	ldr	r3, [pc, #428]	@ (800442c <MX_GPIO_Init+0x200>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800428a:	4b68      	ldr	r3, [pc, #416]	@ (800442c <MX_GPIO_Init+0x200>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	4a67      	ldr	r2, [pc, #412]	@ (800442c <MX_GPIO_Init+0x200>)
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004296:	4b65      	ldr	r3, [pc, #404]	@ (800442c <MX_GPIO_Init+0x200>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2120      	movs	r1, #32
 80042a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042aa:	f002 fc1d 	bl	8006ae8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 80042ae:	2200      	movs	r2, #0
 80042b0:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 80042b4:	485e      	ldr	r0, [pc, #376]	@ (8004430 <MX_GPIO_Init+0x204>)
 80042b6:	f002 fc17 	bl	8006ae8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4858      	ldr	r0, [pc, #352]	@ (8004430 <MX_GPIO_Init+0x204>)
 80042d0:	f002 fa70 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 80042d4:	230d      	movs	r3, #13
 80042d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80042d8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80042dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e2:	f107 0314 	add.w	r3, r7, #20
 80042e6:	4619      	mov	r1, r3
 80042e8:	4851      	ldr	r0, [pc, #324]	@ (8004430 <MX_GPIO_Init+0x204>)
 80042ea:	f002 fa63 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80042ee:	2320      	movs	r3, #32
 80042f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004308:	f002 fa54 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 800430c:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8004310:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	4842      	ldr	r0, [pc, #264]	@ (8004430 <MX_GPIO_Init+0x204>)
 8004326:	f002 fa45 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 800432a:	f640 0304 	movw	r3, #2052	@ 0x804
 800432e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	4619      	mov	r1, r3
 800433e:	483d      	ldr	r0, [pc, #244]	@ (8004434 <MX_GPIO_Init+0x208>)
 8004340:	f002 fa38 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8004344:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004348:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800434a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800434e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004350:	2302      	movs	r3, #2
 8004352:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4619      	mov	r1, r3
 800435a:	4836      	ldr	r0, [pc, #216]	@ (8004434 <MX_GPIO_Init+0x208>)
 800435c:	f002 fa2a 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004366:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800436a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800436c:	2302      	movs	r3, #2
 800436e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4619      	mov	r1, r3
 8004376:	482f      	ldr	r0, [pc, #188]	@ (8004434 <MX_GPIO_Init+0x208>)
 8004378:	f002 fa1c 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800437c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004380:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004382:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004386:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	4619      	mov	r1, r3
 8004392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004396:	f002 fa0d 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800439a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800439e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043a6:	2302      	movs	r3, #2
 80043a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	4619      	mov	r1, r3
 80043b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043b4:	f002 f9fe 	bl	80067b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043c4:	2302      	movs	r3, #2
 80043c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	4619      	mov	r1, r3
 80043ce:	4818      	ldr	r0, [pc, #96]	@ (8004430 <MX_GPIO_Init+0x204>)
 80043d0:	f002 f9f0 	bl	80067b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	2006      	movs	r0, #6
 80043da:	f001 fe84 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80043de:	2006      	movs	r0, #6
 80043e0:	f001 fe9b 	bl	800611a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	2100      	movs	r1, #0
 80043e8:	2008      	movs	r0, #8
 80043ea:	f001 fe7c 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80043ee:	2008      	movs	r0, #8
 80043f0:	f001 fe93 	bl	800611a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	2009      	movs	r0, #9
 80043fa:	f001 fe74 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80043fe:	2009      	movs	r0, #9
 8004400:	f001 fe8b 	bl	800611a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004404:	2200      	movs	r2, #0
 8004406:	2100      	movs	r1, #0
 8004408:	2017      	movs	r0, #23
 800440a:	f001 fe6c 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800440e:	2017      	movs	r0, #23
 8004410:	f001 fe83 	bl	800611a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004414:	2200      	movs	r2, #0
 8004416:	2100      	movs	r1, #0
 8004418:	2028      	movs	r0, #40	@ 0x28
 800441a:	f001 fe64 	bl	80060e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800441e:	2028      	movs	r0, #40	@ 0x28
 8004420:	f001 fe7b 	bl	800611a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	48000800 	.word	0x48000800
 8004434:	48000400 	.word	0x48000400

08004438 <PenDelay>:

/* USER CODE BEGIN 4 */
bool PenDelay(void) {
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b08e      	sub	sp, #56	@ 0x38
 800443e:	af00      	add	r7, sp, #0
	static int state = 0;
	unsigned long now = micros();
 8004440:	f000 f9b6 	bl	80047b0 <micros>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34

	switch (state) {
 800444c:	4b43      	ldr	r3, [pc, #268]	@ (800455c <PenDelay+0x124>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d87d      	bhi.n	8004550 <PenDelay+0x118>
 8004454:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <PenDelay+0x24>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	08004487 	.word	0x08004487
 8004464:	080044cf 	.word	0x080044cf
 8004468:	08004517 	.word	0x08004517
	case 0: // Start sequence with initial wait
		pen_delay_timer = now;
 800446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446e:	2200      	movs	r2, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004474:	4b3a      	ldr	r3, [pc, #232]	@ (8004560 <PenDelay+0x128>)
 8004476:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800447a:	e9c3 1200 	strd	r1, r2, [r3]
		state = 1;
 800447e:	4b37      	ldr	r3, [pc, #220]	@ (800455c <PenDelay+0x124>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
		break;
 8004484:	e064      	b.n	8004550 <PenDelay+0x118>
	case 1: // Waiting for first 500ms
		if (now - pen_delay_timer >= 500000UL) {
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	2200      	movs	r2, #0
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	627a      	str	r2, [r7, #36]	@ 0x24
 800448e:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <PenDelay+0x128>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004498:	4621      	mov	r1, r4
 800449a:	ebb1 0a02 	subs.w	sl, r1, r2
 800449e:	4629      	mov	r1, r5
 80044a0:	eb61 0b03 	sbc.w	fp, r1, r3
 80044a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004564 <PenDelay+0x12c>)
 80044a6:	459a      	cmp	sl, r3
 80044a8:	f17b 0300 	sbcs.w	r3, fp, #0
 80044ac:	d34b      	bcc.n	8004546 <PenDelay+0x10e>
			Set_Servo(1);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f000 fcae 	bl	8004e10 <Set_Servo>
			pen_delay_timer = now;
 80044b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b6:	2200      	movs	r2, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	61fa      	str	r2, [r7, #28]
 80044bc:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <PenDelay+0x128>)
 80044be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044c2:	e9c3 1200 	strd	r1, r2, [r3]
			state = 2;
 80044c6:	4b25      	ldr	r3, [pc, #148]	@ (800455c <PenDelay+0x124>)
 80044c8:	2202      	movs	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]
		}
		break;
 80044cc:	e03b      	b.n	8004546 <PenDelay+0x10e>
	case 2: // Waiting for second 500ms after servo set to 1
		if (now - pen_delay_timer >= 500000UL) {
 80044ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d0:	2200      	movs	r2, #0
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	617a      	str	r2, [r7, #20]
 80044d6:	4b22      	ldr	r3, [pc, #136]	@ (8004560 <PenDelay+0x128>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044e0:	4621      	mov	r1, r4
 80044e2:	ebb1 0802 	subs.w	r8, r1, r2
 80044e6:	4629      	mov	r1, r5
 80044e8:	eb61 0903 	sbc.w	r9, r1, r3
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <PenDelay+0x12c>)
 80044ee:	4598      	cmp	r8, r3
 80044f0:	f179 0300 	sbcs.w	r3, r9, #0
 80044f4:	d329      	bcc.n	800454a <PenDelay+0x112>
			Set_Servo(0);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f000 fc8a 	bl	8004e10 <Set_Servo>
			pen_delay_timer = now;
 80044fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fe:	2200      	movs	r2, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	60fa      	str	r2, [r7, #12]
 8004504:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <PenDelay+0x128>)
 8004506:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800450a:	e9c3 1200 	strd	r1, r2, [r3]
			state = 3;
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <PenDelay+0x124>)
 8004510:	2203      	movs	r2, #3
 8004512:	601a      	str	r2, [r3, #0]
		}
		break;
 8004514:	e019      	b.n	800454a <PenDelay+0x112>
	case 3: // Waiting for third 500ms after servo set to 0
		if (now - pen_delay_timer >= 500000UL) {
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	2200      	movs	r2, #0
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <PenDelay+0x128>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004528:	4641      	mov	r1, r8
 800452a:	1a8c      	subs	r4, r1, r2
 800452c:	4649      	mov	r1, r9
 800452e:	eb61 0503 	sbc.w	r5, r1, r3
 8004532:	4b0c      	ldr	r3, [pc, #48]	@ (8004564 <PenDelay+0x12c>)
 8004534:	429c      	cmp	r4, r3
 8004536:	f175 0300 	sbcs.w	r3, r5, #0
 800453a:	d308      	bcc.n	800454e <PenDelay+0x116>
			state = 0;
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <PenDelay+0x124>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
			return true;
 8004542:	2301      	movs	r3, #1
 8004544:	e005      	b.n	8004552 <PenDelay+0x11a>
		break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <PenDelay+0x118>
		break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <PenDelay+0x118>
		}
		break;
 800454e:	bf00      	nop
	}
	return false;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3738      	adds	r7, #56	@ 0x38
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455c:	20001418 	.word	0x20001418
 8004560:	20001328 	.word	0x20001328
 8004564:	0007a120 	.word	0x0007a120

08004568 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004572:	edc7 0a04 	vstr	s1, [r7, #16]
 8004576:	ed87 1a03 	vstr	s2, [r7, #12]
 800457a:	edc7 1a02 	vstr	s3, [r7, #8]
 800457e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004582:	ed97 7a05 	vldr	s14, [r7, #20]
 8004586:	edd7 7a04 	vldr	s15, [r7, #16]
 800458a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800458e:	edd7 6a01 	vldr	s13, [r7, #4]
 8004592:	edd7 7a02 	vldr	s15, [r7, #8]
 8004596:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800459a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800459e:	ed97 7a03 	vldr	s14, [r7, #12]
 80045a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80045b6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <DWT_Init>:

void DWT_Init(void) {
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <DWT_Init+0x28>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a07      	ldr	r2, [pc, #28]	@ (80045ec <DWT_Init+0x28>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <DWT_Init+0x2c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a05      	ldr	r2, [pc, #20]	@ (80045f0 <DWT_Init+0x2c>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000edf0 	.word	0xe000edf0
 80045f0:	e0001000 	.word	0xe0001000

080045f4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004604:	d10e      	bne.n	8004624 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8004606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800460a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800460e:	f002 fa53 	bl	8006ab8 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004618:	4b4b      	ldr	r3, [pc, #300]	@ (8004748 <HAL_GPIO_EXTI_Callback+0x154>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b49      	ldr	r3, [pc, #292]	@ (8004748 <HAL_GPIO_EXTI_Callback+0x154>)
 8004622:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462a:	d10d      	bne.n	8004648 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 800462c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004630:	4846      	ldr	r0, [pc, #280]	@ (800474c <HAL_GPIO_EXTI_Callback+0x158>)
 8004632:	f002 fa41 	bl	8006ab8 <HAL_GPIO_ReadPin>
 8004636:	4603      	mov	r3, r0
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 800463c:	4b44      	ldr	r3, [pc, #272]	@ (8004750 <HAL_GPIO_EXTI_Callback+0x15c>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8004642:	4b44      	ldr	r3, [pc, #272]	@ (8004754 <HAL_GPIO_EXTI_Callback+0x160>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	d10e      	bne.n	800466e <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8004650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004654:	4840      	ldr	r0, [pc, #256]	@ (8004758 <HAL_GPIO_EXTI_Callback+0x164>)
 8004656:	f002 fa2f 	bl	8006ab8 <HAL_GPIO_ReadPin>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d103      	bne.n	8004668 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 8004660:	4b3e      	ldr	r3, [pc, #248]	@ (800475c <HAL_GPIO_EXTI_Callback+0x168>)
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e002      	b.n	800466e <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 8004668:	4b3c      	ldr	r3, [pc, #240]	@ (800475c <HAL_GPIO_EXTI_Callback+0x168>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004674:	d10e      	bne.n	8004694 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8004676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800467a:	4837      	ldr	r0, [pc, #220]	@ (8004758 <HAL_GPIO_EXTI_Callback+0x164>)
 800467c:	f002 fa1c 	bl	8006ab8 <HAL_GPIO_ReadPin>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d103      	bne.n	800468e <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 8004686:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e002      	b.n	8004694 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800469a:	d102      	bne.n	80046a2 <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 800469c:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_GPIO_EXTI_Callback+0x160>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 80046a2:	4b30      	ldr	r3, [pc, #192]	@ (8004764 <HAL_GPIO_EXTI_Callback+0x170>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d102      	bne.n	80046b4 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e00a      	b.n	80046ca <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d102      	bne.n	80046c0 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 80046ba:	2301      	movs	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e004      	b.n	80046ca <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d13b      	bne.n	800473e <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 80046c6:	2302      	movs	r3, #2
 80046c8:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 80046ca:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <HAL_GPIO_EXTI_Callback+0x174>)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 80046d6:	4925      	ldr	r1, [pc, #148]	@ (800476c <HAL_GPIO_EXTI_Callback+0x178>)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 80046e0:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_GPIO_EXTI_Callback+0x174>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e029      	b.n	8004740 <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 80046ec:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <HAL_GPIO_EXTI_Callback+0x178>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d306      	bcc.n	8004708 <HAL_GPIO_EXTI_Callback+0x114>
 80046fa:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <HAL_GPIO_EXTI_Callback+0x178>)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	e006      	b.n	8004716 <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004708:	4a18      	ldr	r2, [pc, #96]	@ (800476c <HAL_GPIO_EXTI_Callback+0x178>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8004714:	3b01      	subs	r3, #1
		uint32_t delta =
 8004716:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004718:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_GPIO_EXTI_Callback+0x17c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <HAL_GPIO_EXTI_Callback+0x180>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	0c9b      	lsrs	r3, r3, #18
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	fbb2 f2f3 	udiv	r2, r2, r3
 800472a:	4913      	ldr	r1, [pc, #76]	@ (8004778 <HAL_GPIO_EXTI_Callback+0x184>)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8004732:	4a0d      	ldr	r2, [pc, #52]	@ (8004768 <HAL_GPIO_EXTI_Callback+0x174>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4413      	add	r3, r2
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e000      	b.n	8004740 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 800473e:	bf00      	nop
	}
}
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000b78 	.word	0x20000b78
 800474c:	48000800 	.word	0x48000800
 8004750:	20000bcc 	.word	0x20000bcc
 8004754:	20000bcd 	.word	0x20000bcd
 8004758:	48000400 	.word	0x48000400
 800475c:	20000bd1 	.word	0x20000bd1
 8004760:	20000bd2 	.word	0x20000bd2
 8004764:	e0001000 	.word	0xe0001000
 8004768:	2000141c 	.word	0x2000141c
 800476c:	20000ad8 	.word	0x20000ad8
 8004770:	20000230 	.word	0x20000230
 8004774:	431bde83 	.word	0x431bde83
 8004778:	20000ae4 	.word	0x20000ae4

0800477c <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800477c:	b4b0      	push	{r4, r5, r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d108      	bne.n	800479e <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	1e54      	subs	r4, r2, #1
 8004794:	f143 0500 	adc.w	r5, r3, #0
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800479a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bcb0      	pop	{r4, r5, r7}
 80047a6:	4770      	bx	lr
 80047a8:	200005e0 	.word	0x200005e0
 80047ac:	20000aa0 	.word	0x20000aa0

080047b0 <micros>:
uint64_t micros() {
 80047b0:	b4b0      	push	{r4, r5, r7}
 80047b2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <micros+0x2c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	2200      	movs	r2, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	4611      	mov	r1, r2
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <micros+0x30>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	1884      	adds	r4, r0, r2
 80047c8:	eb41 0503 	adc.w	r5, r1, r3
 80047cc:	4622      	mov	r2, r4
 80047ce:	462b      	mov	r3, r5
}
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bcb0      	pop	{r4, r5, r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200005e0 	.word	0x200005e0
 80047e0:	20000aa0 	.word	0x20000aa0

080047e4 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 80047e4:	b480      	push	{r7}
 80047e6:	b08f      	sub	sp, #60	@ 0x3c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	ed87 0a07 	vstr	s0, [r7, #28]
 80047ee:	edc7 0a06 	vstr	s1, [r7, #24]
 80047f2:	ed87 1a05 	vstr	s2, [r7, #20]
 80047f6:	edc7 1a04 	vstr	s3, [r7, #16]
 80047fa:	ed87 2a03 	vstr	s4, [r7, #12]
 80047fe:	edc7 2a02 	vstr	s5, [r7, #8]
 8004802:	ed87 3a01 	vstr	s6, [r7, #4]
 8004806:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004808:	ed97 7a06 	vldr	s14, [r7, #24]
 800480c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004814:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	ed93 7a00 	vldr	s14, [r3]
 800481e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004822:	edd7 7a03 	vldr	s15, [r7, #12]
 8004826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	ed97 6a01 	vldr	s12, [r7, #4]
 800483e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004842:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	dd08      	ble.n	8004862 <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004850:	edd7 6a01 	vldr	s13, [r7, #4]
 8004854:	ed97 7a05 	vldr	s14, [r7, #20]
 8004858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	ed93 7a00 	vldr	s14, [r3]
 8004868:	ed97 6a02 	vldr	s12, [r7, #8]
 800486c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004870:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d508      	bpl.n	8004890 <PID_Update+0xac>
		state->integ = outMin / kI;
 800487e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004882:	ed97 7a05 	vldr	s14, [r7, #20]
 8004886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004890:	edd7 7a07 	vldr	s15, [r7, #28]
 8004894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	dd0b      	ble.n	80048b6 <PID_Update+0xd2>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ac:	d503      	bpl.n	80048b6 <PID_Update+0xd2>
		state->integ = 0;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 80048b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80048ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d50b      	bpl.n	80048dc <PID_Update+0xf8>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	edd3 7a00 	vldr	s15, [r3]
 80048ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	dd03      	ble.n	80048dc <PID_Update+0xf8>
		state->integ = 0;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80048f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80048f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80048fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004904:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004908:	ed97 7a04 	vldr	s14, [r7, #16]
 800490c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 800491e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004922:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800492a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800492e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004932:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004936:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800493a:	edd7 7a01 	vldr	s15, [r7, #4]
 800493e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	dd01      	ble.n	800494c <PID_Update+0x168>
		out = outMax;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 800494c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004950:	edd7 7a02 	vldr	s15, [r7, #8]
 8004954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	d501      	bpl.n	8004962 <PID_Update+0x17e>
		out = outMin;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8004962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004964:	ee07 3a90 	vmov	s15, r3
}
 8004968:	eeb0 0a67 	vmov.f32	s0, s15
 800496c:	373c      	adds	r7, #60	@ 0x3c
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004980:	f7ff ff16 	bl	80047b0 <micros>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	497b      	ldr	r1, [pc, #492]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 800498a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 800498e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b7c <Revolute_PosVel_Update+0x204>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	4a78      	ldr	r2, [pc, #480]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004996:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004998:	4b77      	ldr	r3, [pc, #476]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a8:	4b73      	ldr	r3, [pc, #460]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 80049aa:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 80049ae:	4b72      	ldr	r3, [pc, #456]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 80049b0:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 80049b2:	4b71      	ldr	r3, [pc, #452]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 80049b8:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	dd04      	ble.n	80049cc <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e007      	b.n	80049dc <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80049d2:	da03      	bge.n	80049dc <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80049da:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 80049dc:	4b66      	ldr	r3, [pc, #408]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 80049de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80049e2:	4b65      	ldr	r3, [pc, #404]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 80049e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80049e8:	ebb0 0a02 	subs.w	sl, r0, r2
 80049ec:	eb61 0b03 	sbc.w	fp, r1, r3
 80049f0:	4650      	mov	r0, sl
 80049f2:	4659      	mov	r1, fp
 80049f4:	f7fc f99e 	bl	8000d34 <__aeabi_ul2f>
 80049f8:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 80049fc:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004b80 <Revolute_PosVel_Update+0x208>
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	f000 80a0 	beq.w	8004b58 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a22:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004a2e:	4b52      	ldr	r3, [pc, #328]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a30:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a34:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 8004a44:	4b4c      	ldr	r3, [pc, #304]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a46:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fb fd45 	bl	80004e0 <__aeabi_f2d>
 8004a56:	a344      	add	r3, pc, #272	@ (adr r3, 8004b68 <Revolute_PosVel_Update+0x1f0>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f7fb fd98 	bl	8000590 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	f7fc f84c 	bl	8000b04 <__aeabi_d2f>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a42      	ldr	r2, [pc, #264]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a70:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004a72:	4b44      	ldr	r3, [pc, #272]	@ (8004b84 <Revolute_PosVel_Update+0x20c>)
 8004a74:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004a76:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a78:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004a7c:	edd7 7a00 	vldr	s15, [r7]
 8004a80:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004a84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a88:	edd7 7a00 	vldr	s15, [r7]
 8004a8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a90:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004a92:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004a9e:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004aa0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004aa4:	4b34      	ldr	r3, [pc, #208]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fd19 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004aae:	a32e      	add	r3, pc, #184	@ (adr r3, 8004b68 <Revolute_PosVel_Update+0x1f0>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fd6c 	bl	8000590 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f7fc f820 	bl	8000b04 <__aeabi_d2f>
 8004ac4:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004aca:	4b2b      	ldr	r3, [pc, #172]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004acc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	17c8      	asrs	r0, r1, #31
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	eb12 0804 	adds.w	r8, r2, r4
 8004adc:	eb43 0905 	adc.w	r9, r3, r5
 8004ae0:	4b25      	ldr	r3, [pc, #148]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004ae2:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004ae6:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004ae8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	f7fb fd20 	bl	8000534 <__aeabi_l2d>
 8004af4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004b68 <Revolute_PosVel_Update+0x1f0>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fd49 	bl	8000590 <__aeabi_dmul>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	f7fb fffd 	bl	8000b04 <__aeabi_d2f>
 8004b0a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b0e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b12:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b16:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004b88 <Revolute_PosVel_Update+0x210>
 8004b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b1e:	ee17 0a90 	vmov	r0, s15
 8004b22:	f7fb fcdd 	bl	80004e0 <__aeabi_f2d>
 8004b26:	a312      	add	r3, pc, #72	@ (adr r3, 8004b70 <Revolute_PosVel_Update+0x1f8>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f7fb fe5a 	bl	80007e4 <__aeabi_ddiv>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7fb ffe4 	bl	8000b04 <__aeabi_d2f>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b40:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a0c      	ldr	r2, [pc, #48]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b48:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b50:	4909      	ldr	r1, [pc, #36]	@ (8004b78 <Revolute_PosVel_Update+0x200>)
 8004b52:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004b56:	e000      	b.n	8004b5a <Revolute_PosVel_Update+0x1e2>
		return;
 8004b58:	bf00      	nop
}
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	f3af 8000 	nop.w
 8004b68:	54442d18 	.word	0x54442d18
 8004b6c:	3f3921fb 	.word	0x3f3921fb
 8004b70:	54442d18 	.word	0x54442d18
 8004b74:	400921fb 	.word	0x400921fb
 8004b78:	20000af8 	.word	0x20000af8
 8004b7c:	20000514 	.word	0x20000514
 8004b80:	358637bd 	.word	0x358637bd
 8004b84:	3ecccccd 	.word	0x3ecccccd
 8004b88:	43340000 	.word	0x43340000

08004b8c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004b94:	f7ff fe0c 	bl	80047b0 <micros>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4958      	ldr	r1, [pc, #352]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004b9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004ba2:	4b58      	ldr	r3, [pc, #352]	@ (8004d04 <Prismatic_PosVel_Update+0x178>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	4a55      	ldr	r2, [pc, #340]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004baa:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004bac:	4b54      	ldr	r3, [pc, #336]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004bae:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004bb0:	4b53      	ldr	r3, [pc, #332]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004bb6:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bbe:	dd04      	ble.n	8004bca <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e007      	b.n	8004bda <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004bd0:	da03      	bge.n	8004bda <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004bd8:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004bda:	4b49      	ldr	r3, [pc, #292]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004bdc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004be0:	4b47      	ldr	r3, [pc, #284]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004be2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004be6:	ebb0 0a02 	subs.w	sl, r0, r2
 8004bea:	eb61 0b03 	sbc.w	fp, r1, r3
 8004bee:	4650      	mov	r0, sl
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	f7fc f89f 	bl	8000d34 <__aeabi_ul2f>
 8004bf6:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004bfa:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004d08 <Prismatic_PosVel_Update+0x17c>
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d070      	beq.n	8004cf6 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004c2a:	4b35      	ldr	r3, [pc, #212]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c30:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004c38:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004c40:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c42:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004c46:	4a2e      	ldr	r2, [pc, #184]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c50:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004d0c <Prismatic_PosVel_Update+0x180>
 8004c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c58:	4b29      	ldr	r3, [pc, #164]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c5a:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d10 <Prismatic_PosVel_Update+0x184>)
 8004c60:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004c62:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c64:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c68:	edd7 7a00 	vldr	s15, [r7]
 8004c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004c70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c74:	edd7 7a00 	vldr	s15, [r7]
 8004c78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004c7c:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c7e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c86:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004c92:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004c96:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d0c <Prismatic_PosVel_Update+0x180>
 8004c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004c9e:	4b18      	ldr	r3, [pc, #96]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004ca0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004ca6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	17c8      	asrs	r0, r1, #31
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	eb12 0804 	adds.w	r8, r2, r4
 8004cb6:	eb43 0905 	adc.w	r9, r3, r5
 8004cba:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004cbc:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004cc2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f7fc f83b 	bl	8000d44 <__aeabi_l2f>
 8004cce:	ee07 0a10 	vmov	s14, r0
 8004cd2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004d0c <Prismatic_PosVel_Update+0x180>
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004cdc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004ce0:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a06      	ldr	r2, [pc, #24]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004ce6:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004ce8:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004cea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cee:	4904      	ldr	r1, [pc, #16]	@ (8004d00 <Prismatic_PosVel_Update+0x174>)
 8004cf0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004cf4:	e000      	b.n	8004cf8 <Prismatic_PosVel_Update+0x16c>
		return;
 8004cf6:	bf00      	nop
}
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d00:	20000b38 	.word	0x20000b38
 8004d04:	20000448 	.word	0x20000448
 8004d08:	358637bd 	.word	0x358637bd
 8004d0c:	3aa00000 	.word	0x3aa00000
 8004d10:	3ecccccd 	.word	0x3ecccccd

08004d14 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004d20:	edd7 7a00 	vldr	s15, [r7]
 8004d24:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004df8 <Set_Motor+0xe4>
 8004d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d30:	dd01      	ble.n	8004d36 <Set_Motor+0x22>
		speed = 100.0f;
 8004d32:	4b32      	ldr	r3, [pc, #200]	@ (8004dfc <Set_Motor+0xe8>)
 8004d34:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004d36:	edd7 7a00 	vldr	s15, [r7]
 8004d3a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004e00 <Set_Motor+0xec>
 8004d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	d501      	bpl.n	8004d4c <Set_Motor+0x38>
		speed = -100.0f;
 8004d48:	4b2e      	ldr	r3, [pc, #184]	@ (8004e04 <Set_Motor+0xf0>)
 8004d4a:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004d4c:	edd7 7a00 	vldr	s15, [r7]
 8004d50:	eef0 7ae7 	vabs.f32	s15, s15
 8004d54:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004df8 <Set_Motor+0xe4>
 8004d58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d5c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004df8 <Set_Motor+0xe4>
 8004d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d68:	ee17 3a90 	vmov	r3, s15
 8004d6c:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11d      	bne.n	8004db0 <Set_Motor+0x9c>
		if (speed > 0) {
 8004d74:	edd7 7a00 	vldr	s15, [r7]
 8004d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d80:	dd05      	ble.n	8004d8e <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004d82:	2200      	movs	r2, #0
 8004d84:	2120      	movs	r1, #32
 8004d86:	4820      	ldr	r0, [pc, #128]	@ (8004e08 <Set_Motor+0xf4>)
 8004d88:	f001 feae 	bl	8006ae8 <HAL_GPIO_WritePin>
 8004d8c:	e00b      	b.n	8004da6 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004d8e:	edd7 7a00 	vldr	s15, [r7]
 8004d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d504      	bpl.n	8004da6 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	2120      	movs	r1, #32
 8004da0:	4819      	ldr	r0, [pc, #100]	@ (8004e08 <Set_Motor+0xf4>)
 8004da2:	f001 fea1 	bl	8006ae8 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004da6:	4b19      	ldr	r3, [pc, #100]	@ (8004e0c <Set_Motor+0xf8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004dae:	e01f      	b.n	8004df0 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d11c      	bne.n	8004df0 <Set_Motor+0xdc>
		if (speed > 0) {
 8004db6:	edd7 7a00 	vldr	s15, [r7]
 8004dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	dd05      	ble.n	8004dd0 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2140      	movs	r1, #64	@ 0x40
 8004dc8:	480f      	ldr	r0, [pc, #60]	@ (8004e08 <Set_Motor+0xf4>)
 8004dca:	f001 fe8d 	bl	8006ae8 <HAL_GPIO_WritePin>
 8004dce:	e00b      	b.n	8004de8 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004dd0:	edd7 7a00 	vldr	s15, [r7]
 8004dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ddc:	d504      	bpl.n	8004de8 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004dde:	2201      	movs	r2, #1
 8004de0:	2140      	movs	r1, #64	@ 0x40
 8004de2:	4809      	ldr	r0, [pc, #36]	@ (8004e08 <Set_Motor+0xf4>)
 8004de4:	f001 fe80 	bl	8006ae8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004de8:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <Set_Motor+0xf8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	42c80000 	.word	0x42c80000
 8004dfc:	42c80000 	.word	0x42c80000
 8004e00:	c2c80000 	.word	0xc2c80000
 8004e04:	c2c80000 	.word	0xc2c80000
 8004e08:	48000800 	.word	0x48000800
 8004e0c:	200006ac 	.word	0x200006ac

08004e10 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <Set_Servo+0x48>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004e26:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004e28:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <Set_Servo+0x4c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004e2e:	f7ff fcbf 	bl	80047b0 <micros>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	490a      	ldr	r1, [pc, #40]	@ (8004e60 <Set_Servo+0x50>)
 8004e38:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004e3c:	e007      	b.n	8004e4e <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <Set_Servo+0x48>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e46:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004e48:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <Set_Servo+0x4c>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000778 	.word	0x20000778
 8004e5c:	20000bd0 	.word	0x20000bd0
 8004e60:	20000c30 	.word	0x20000c30

08004e64 <Reset_R>:

void Reset_R() {
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004e68:	4905      	ldr	r1, [pc, #20]	@ (8004e80 <Reset_R+0x1c>)
 8004e6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004e76:	bf00      	nop
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	20000af8 	.word	0x20000af8

08004e84 <Reset_P>:
void Reset_P() {
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004e88:	4905      	ldr	r1, [pc, #20]	@ (8004ea0 <Reset_P+0x1c>)
 8004e8a:	4a06      	ldr	r2, [pc, #24]	@ (8004ea4 <Reset_P+0x20>)
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000b38 	.word	0x20000b38
 8004ea4:	fffff99a 	.word	0xfffff99a

08004ea8 <Workspace_limit>:

void Workspace_limit() {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 8004eac:	4b34      	ldr	r3, [pc, #208]	@ (8004f80 <Workspace_limit+0xd8>)
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fb fb15 	bl	80004e0 <__aeabi_f2d>
 8004eb6:	a32e      	add	r3, pc, #184	@ (adr r3, 8004f70 <Workspace_limit+0xc8>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb fdda 	bl	8000a74 <__aeabi_dcmplt>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <Workspace_limit+0x36>
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f84 <Workspace_limit+0xdc>)
 8004ec8:	edd3 7a00 	vldr	s15, [r3]
 8004ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed4:	dd03      	ble.n	8004ede <Workspace_limit+0x36>
		R_PWM = 0;
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <Workspace_limit+0xdc>)
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 8004ede:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <Workspace_limit+0xd8>)
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fafc 	bl	80004e0 <__aeabi_f2d>
 8004ee8:	a323      	add	r3, pc, #140	@ (adr r3, 8004f78 <Workspace_limit+0xd0>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb fddf 	bl	8000ab0 <__aeabi_dcmpgt>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <Workspace_limit+0x68>
 8004ef8:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <Workspace_limit+0xdc>)
 8004efa:	edd3 7a00 	vldr	s15, [r3]
 8004efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	d503      	bpl.n	8004f10 <Workspace_limit+0x68>
		R_PWM = 0;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <Workspace_limit+0xdc>)
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <Workspace_limit+0xe0>)
 8004f12:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004f16:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004f8c <Workspace_limit+0xe4>
 8004f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	dd0b      	ble.n	8004f3c <Workspace_limit+0x94>
 8004f24:	4b1a      	ldr	r3, [pc, #104]	@ (8004f90 <Workspace_limit+0xe8>)
 8004f26:	edd3 7a00 	vldr	s15, [r3]
 8004f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	dd03      	ble.n	8004f3c <Workspace_limit+0x94>
		P_PWM = 0;
 8004f34:	4b16      	ldr	r3, [pc, #88]	@ (8004f90 <Workspace_limit+0xe8>)
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004f3c:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <Workspace_limit+0xe0>)
 8004f3e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004f42:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	d400      	bmi.n	8004f52 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 8004f50:	e00c      	b.n	8004f6c <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004f52:	4b0f      	ldr	r3, [pc, #60]	@ (8004f90 <Workspace_limit+0xe8>)
 8004f54:	edd3 7a00 	vldr	s15, [r3]
 8004f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	d400      	bmi.n	8004f64 <Workspace_limit+0xbc>
}
 8004f62:	e003      	b.n	8004f6c <Workspace_limit+0xc4>
		P_PWM = 0;
 8004f64:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <Workspace_limit+0xe8>)
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	1e8e6080 	.word	0x1e8e6080
 8004f74:	bffeb7bf 	.word	0xbffeb7bf
 8004f78:	bfb15b57 	.word	0xbfb15b57
 8004f7c:	40143eec 	.word	0x40143eec
 8004f80:	20000af8 	.word	0x20000af8
 8004f84:	20000bc4 	.word	0x20000bc4
 8004f88:	20000b38 	.word	0x20000b38
 8004f8c:	43988000 	.word	0x43988000
 8004f90:	20000bc8 	.word	0x20000bc8

08004f94 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8004fa8:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <Get_QRIdata+0x70>)
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <Get_QRIdata+0x70>)
 8004fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <Get_QRIdata+0x70>)
 8004fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <Get_QRIdata+0x74>)
 8004fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <Get_QRIdata+0x74>)
 8004fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <Get_QRIdata+0x74>)
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000b38 	.word	0x20000b38
 8005008:	20000af8 	.word	0x20000af8

0800500c <Trapezoidal_CalcTotalTime>:

float Trapezoidal_CalcTotalTime(float distance, float vmax, float amax) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	ed87 0a03 	vstr	s0, [r7, #12]
 8005016:	edc7 0a02 	vstr	s1, [r7, #8]
 800501a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_acc = vmax / amax;
 800501e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005022:	ed97 7a01 	vldr	s14, [r7, #4]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_acc = 0.5f * amax * t_acc * t_acc;
 800502e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005032:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005036:	ee27 7a87 	vmul.f32	s14, s15, s14
 800503a:	edd7 7a07 	vldr	s15, [r7, #28]
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	ed97 7a07 	vldr	s14, [r7, #28]
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a06 	vstr	s15, [r7, #24]
	if (2 * d_acc > distance) {
 800504e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005052:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005056:	ed97 7a03 	vldr	s14, [r7, #12]
 800505a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d510      	bpl.n	8005086 <Trapezoidal_CalcTotalTime+0x7a>
		t_acc = sqrtf(distance / amax);
 8005064:	ed97 7a03 	vldr	s14, [r7, #12]
 8005068:	edd7 7a01 	vldr	s15, [r7, #4]
 800506c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005070:	eeb0 0a66 	vmov.f32	s0, s13
 8005074:	f007 fa62 	bl	800c53c <sqrtf>
 8005078:	ed87 0a07 	vstr	s0, [r7, #28]
		return 2 * t_acc;
 800507c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005080:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005084:	e019      	b.n	80050ba <Trapezoidal_CalcTotalTime+0xae>
	}
	float d_const = distance - 2 * d_acc;
 8005086:	edd7 7a06 	vldr	s15, [r7, #24]
 800508a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800508e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005096:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_const = d_const / vmax;
 800509a:	edd7 6a05 	vldr	s13, [r7, #20]
 800509e:	ed97 7a02 	vldr	s14, [r7, #8]
 80050a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a6:	edc7 7a04 	vstr	s15, [r7, #16]
	return 2 * t_acc + t_const;
 80050aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80050ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80050b6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80050ba:	eeb0 0a67 	vmov.f32	s0, s15
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <Trapezoidal_CalcVmaxFromTime>:

float Trapezoidal_CalcVmaxFromTime(float distance, float amax, float total_time) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80050ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80050d2:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_half = total_time / 2.0f;
 80050d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80050da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80050de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_half = distance / 2.0f;
 80050e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80050ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80050ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f2:	edc7 7a06 	vstr	s15, [r7, #24]

	float v_peak = amax * t_half;
 80050f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a05 	vstr	s15, [r7, #20]
	if (0.5f * v_peak * t_half >= d_half) {
 8005106:	edd7 7a05 	vldr	s15, [r7, #20]
 800510a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800510e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005112:	edd7 7a07 	vldr	s15, [r7, #28]
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	ed97 7a06 	vldr	s14, [r7, #24]
 800511e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	d80c      	bhi.n	8005142 <Trapezoidal_CalcVmaxFromTime+0x7e>
		return sqrtf(distance * amax);
 8005128:	ed97 7a03 	vldr	s14, [r7, #12]
 800512c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005134:	eeb0 0a67 	vmov.f32	s0, s15
 8005138:	f007 fa00 	bl	800c53c <sqrtf>
 800513c:	eef0 6a40 	vmov.f32	s13, s0
 8005140:	e015      	b.n	800516e <Trapezoidal_CalcVmaxFromTime+0xaa>
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
 8005142:	edd7 7a02 	vldr	s15, [r7, #8]
 8005146:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800514a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800514e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005156:	edd7 7a07 	vldr	s15, [r7, #28]
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005166:	edd7 7a07 	vldr	s15, [r7, #28]
 800516a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800516e:	eef0 7a66 	vmov.f32	s15, s13
 8005172:	eeb0 0a67 	vmov.f32	s0, s15
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	0000      	movs	r0, r0
	...

08005180 <InverseKinematics>:

void InverseKinematics(float x, float y, float *r, float *p) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	ed87 0a03 	vstr	s0, [r7, #12]
 800518a:	edc7 0a02 	vstr	s1, [r7, #8]
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
	*r = atan2f(x * -1, y) + M_PI_2;
 8005192:	edd7 7a03 	vldr	s15, [r7, #12]
 8005196:	eef1 7a67 	vneg.f32	s15, s15
 800519a:	edd7 0a02 	vldr	s1, [r7, #8]
 800519e:	eeb0 0a67 	vmov.f32	s0, s15
 80051a2:	f007 f9c9 	bl	800c538 <atan2f>
 80051a6:	ee10 3a10 	vmov	r3, s0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f998 	bl	80004e0 <__aeabi_f2d>
 80051b0:	a313      	add	r3, pc, #76	@ (adr r3, 8005200 <InverseKinematics+0x80>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f835 	bl	8000224 <__adddf3>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fb fc9f 	bl	8000b04 <__aeabi_d2f>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
	*p = sqrtf(x * x + y * y);
 80051cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80051d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80051d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80051d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80051dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e0:	eeb0 0a67 	vmov.f32	s0, s15
 80051e4:	f007 f9aa 	bl	800c53c <sqrtf>
 80051e8:	eef0 7a40 	vmov.f32	s15, s0
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	edc3 7a00 	vstr	s15, [r3]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w
 8005200:	54442d18 	.word	0x54442d18
 8005204:	3ff921fb 	.word	0x3ff921fb

08005208 <TrapezoidStep>:

void TrapezoidStep(void) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
//	static float last_TargetR = 0.0f;
//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 800520e:	4b38      	ldr	r3, [pc, #224]	@ (80052f0 <TrapezoidStep+0xe8>)
 8005210:	ed93 7a00 	vldr	s14, [r3]
 8005214:	4b37      	ldr	r3, [pc, #220]	@ (80052f4 <TrapezoidStep+0xec>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521e:	eef0 7ae7 	vabs.f32	s15, s15
 8005222:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 8005226:	edd7 7a01 	vldr	s15, [r7, #4]
 800522a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80052f8 <TrapezoidStep+0xf0>
 800522e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	dd0f      	ble.n	8005258 <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 8005238:	4b30      	ldr	r3, [pc, #192]	@ (80052fc <TrapezoidStep+0xf4>)
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8005242:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8005300 <TrapezoidStep+0xf8>
 8005246:	eeb0 0a67 	vmov.f32	s0, s15
 800524a:	482e      	ldr	r0, [pc, #184]	@ (8005304 <TrapezoidStep+0xfc>)
 800524c:	f7fc fbbc 	bl	80019c8 <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 8005250:	4b27      	ldr	r3, [pc, #156]	@ (80052f0 <TrapezoidStep+0xe8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a27      	ldr	r2, [pc, #156]	@ (80052f4 <TrapezoidStep+0xec>)
 8005256:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 8005258:	4b2b      	ldr	r3, [pc, #172]	@ (8005308 <TrapezoidStep+0x100>)
 800525a:	ed93 7a00 	vldr	s14, [r3]
 800525e:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <TrapezoidStep+0x104>)
 8005260:	edd3 7a00 	vldr	s15, [r3]
 8005264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005268:	eef0 7ae7 	vabs.f32	s15, s15
 800526c:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 8005270:	edd7 7a00 	vldr	s15, [r7]
 8005274:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005310 <TrapezoidStep+0x108>
 8005278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005280:	dd0f      	ble.n	80052a2 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <TrapezoidStep+0x10c>)
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005318 <TrapezoidStep+0x110>
 800528c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800531c <TrapezoidStep+0x114>
 8005290:	eeb0 0a67 	vmov.f32	s0, s15
 8005294:	4822      	ldr	r0, [pc, #136]	@ (8005320 <TrapezoidStep+0x118>)
 8005296:	f7fc fb97 	bl	80019c8 <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 800529a:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <TrapezoidStep+0x100>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1b      	ldr	r2, [pc, #108]	@ (800530c <TrapezoidStep+0x104>)
 80052a0:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 80052a2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80052f8 <TrapezoidStep+0xf0>
 80052a6:	4817      	ldr	r0, [pc, #92]	@ (8005304 <TrapezoidStep+0xfc>)
 80052a8:	f7fc fc58 	bl	8001b5c <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 80052ac:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <TrapezoidStep+0xfc>)
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <TrapezoidStep+0x11c>)
 80052b2:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 80052b4:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <TrapezoidStep+0xfc>)
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <TrapezoidStep+0x120>)
 80052ba:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 80052bc:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <TrapezoidStep+0xfc>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4a1a      	ldr	r2, [pc, #104]	@ (800532c <TrapezoidStep+0x124>)
 80052c2:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 80052c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80052f8 <TrapezoidStep+0xf0>
 80052c8:	4815      	ldr	r0, [pc, #84]	@ (8005320 <TrapezoidStep+0x118>)
 80052ca:	f7fc fc47 	bl	8001b5c <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <TrapezoidStep+0x118>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TrapezoidStep+0x128>)
 80052d4:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 80052d6:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <TrapezoidStep+0x118>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4a16      	ldr	r2, [pc, #88]	@ (8005334 <TrapezoidStep+0x12c>)
 80052dc:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 80052de:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <TrapezoidStep+0x118>)
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <TrapezoidStep+0x130>)
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000b94 	.word	0x20000b94
 80052f4:	20001320 	.word	0x20001320
 80052f8:	3a83126f 	.word	0x3a83126f
 80052fc:	20000bb4 	.word	0x20000bb4
 8005300:	3fb33333 	.word	0x3fb33333
 8005304:	20001334 	.word	0x20001334
 8005308:	20000b98 	.word	0x20000b98
 800530c:	20001324 	.word	0x20001324
 8005310:	3c23d70a 	.word	0x3c23d70a
 8005314:	20000bb8 	.word	0x20000bb8
 8005318:	453b8000 	.word	0x453b8000
 800531c:	44160000 	.word	0x44160000
 8005320:	20001378 	.word	0x20001378
 8005324:	20000b9c 	.word	0x20000b9c
 8005328:	20000ba4 	.word	0x20000ba4
 800532c:	20000bac 	.word	0x20000bac
 8005330:	20000ba0 	.word	0x20000ba0
 8005334:	20000ba8 	.word	0x20000ba8
 8005338:	20000bb0 	.word	0x20000bb0

0800533c <PIDStep>:

void PIDStep(void) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 8005342:	4b65      	ldr	r3, [pc, #404]	@ (80054d8 <PIDStep+0x19c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a63      	ldr	r2, [pc, #396]	@ (80054d8 <PIDStep+0x19c>)
 800534a:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 800534c:	4b62      	ldr	r3, [pc, #392]	@ (80054d8 <PIDStep+0x19c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b09      	cmp	r3, #9
 8005352:	dd62      	ble.n	800541a <PIDStep+0xde>
		loop_counter1 = 0;
 8005354:	4b60      	ldr	r3, [pc, #384]	@ (80054d8 <PIDStep+0x19c>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 800535a:	4b60      	ldr	r3, [pc, #384]	@ (80054dc <PIDStep+0x1a0>)
 800535c:	ed93 7a00 	vldr	s14, [r3]
 8005360:	4b5f      	ldr	r3, [pc, #380]	@ (80054e0 <PIDStep+0x1a4>)
 8005362:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536a:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 800536e:	4b5d      	ldr	r3, [pc, #372]	@ (80054e4 <PIDStep+0x1a8>)
 8005370:	ed93 7a00 	vldr	s14, [r3]
 8005374:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <PIDStep+0x1ac>)
 8005376:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800537a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 8005382:	4b5a      	ldr	r3, [pc, #360]	@ (80054ec <PIDStep+0x1b0>)
 8005384:	edd3 7a00 	vldr	s15, [r3]
 8005388:	4b59      	ldr	r3, [pc, #356]	@ (80054f0 <PIDStep+0x1b4>)
 800538a:	ed93 7a00 	vldr	s14, [r3]
 800538e:	4b59      	ldr	r3, [pc, #356]	@ (80054f4 <PIDStep+0x1b8>)
 8005390:	edd3 6a00 	vldr	s13, [r3]
 8005394:	4858      	ldr	r0, [pc, #352]	@ (80054f8 <PIDStep+0x1bc>)
 8005396:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 80054fc <PIDStep+0x1c0>
 800539a:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8005500 <PIDStep+0x1c4>
 800539e:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8005504 <PIDStep+0x1c8>
 80053a2:	eef0 1a66 	vmov.f32	s3, s13
 80053a6:	eeb0 1a47 	vmov.f32	s2, s14
 80053aa:	eef0 0a67 	vmov.f32	s1, s15
 80053ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80053b2:	f7ff fa17 	bl	80047e4 <PID_Update>
 80053b6:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 80053ba:	4b53      	ldr	r3, [pc, #332]	@ (8005508 <PIDStep+0x1cc>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	4b52      	ldr	r3, [pc, #328]	@ (800550c <PIDStep+0x1d0>)
 80053c2:	ed93 7a00 	vldr	s14, [r3]
 80053c6:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <PIDStep+0x1d4>)
 80053c8:	edd3 6a00 	vldr	s13, [r3]
 80053cc:	4851      	ldr	r0, [pc, #324]	@ (8005514 <PIDStep+0x1d8>)
 80053ce:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 80054fc <PIDStep+0x1c0>
 80053d2:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8005500 <PIDStep+0x1c4>
 80053d6:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8005504 <PIDStep+0x1c8>
 80053da:	eef0 1a66 	vmov.f32	s3, s13
 80053de:	eeb0 1a47 	vmov.f32	s2, s14
 80053e2:	eef0 0a67 	vmov.f32	s1, s15
 80053e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80053ea:	f7ff f9fb 	bl	80047e4 <PID_Update>
 80053ee:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 80053f2:	4b49      	ldr	r3, [pc, #292]	@ (8005518 <PIDStep+0x1dc>)
 80053f4:	ed93 7a00 	vldr	s14, [r3]
 80053f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80053fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005400:	4b46      	ldr	r3, [pc, #280]	@ (800551c <PIDStep+0x1e0>)
 8005402:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8005406:	4b46      	ldr	r3, [pc, #280]	@ (8005520 <PIDStep+0x1e4>)
 8005408:	ed93 7a00 	vldr	s14, [r3]
 800540c:	edd7 7a00 	vldr	s15, [r7]
 8005410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005414:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <PIDStep+0x1e8>)
 8005416:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 800541a:	4b40      	ldr	r3, [pc, #256]	@ (800551c <PIDStep+0x1e0>)
 800541c:	ed93 7a00 	vldr	s14, [r3]
 8005420:	4b2f      	ldr	r3, [pc, #188]	@ (80054e0 <PIDStep+0x1a4>)
 8005422:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542a:	4b3f      	ldr	r3, [pc, #252]	@ (8005528 <PIDStep+0x1ec>)
 800542c:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 8005430:	4b3d      	ldr	r3, [pc, #244]	@ (8005528 <PIDStep+0x1ec>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	4b3d      	ldr	r3, [pc, #244]	@ (800552c <PIDStep+0x1f0>)
 8005438:	ed93 7a00 	vldr	s14, [r3]
 800543c:	4b3c      	ldr	r3, [pc, #240]	@ (8005530 <PIDStep+0x1f4>)
 800543e:	edd3 6a00 	vldr	s13, [r3]
 8005442:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <PIDStep+0x1f8>)
 8005444:	ed93 6a00 	vldr	s12, [r3]
 8005448:	483b      	ldr	r0, [pc, #236]	@ (8005538 <PIDStep+0x1fc>)
 800544a:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 80054fc <PIDStep+0x1c0>
 800544e:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8005500 <PIDStep+0x1c4>
 8005452:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 800553c <PIDStep+0x200>
 8005456:	eef0 1a46 	vmov.f32	s3, s12
 800545a:	eeb0 1a66 	vmov.f32	s2, s13
 800545e:	eef0 0a47 	vmov.f32	s1, s14
 8005462:	eeb0 0a67 	vmov.f32	s0, s15
 8005466:	f7ff f9bd 	bl	80047e4 <PID_Update>
 800546a:	eef0 7a40 	vmov.f32	s15, s0
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <PIDStep+0x204>)
 8005470:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 8005474:	4b2b      	ldr	r3, [pc, #172]	@ (8005524 <PIDStep+0x1e8>)
 8005476:	ed93 7a00 	vldr	s14, [r3]
 800547a:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <PIDStep+0x1ac>)
 800547c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005484:	4b2f      	ldr	r3, [pc, #188]	@ (8005544 <PIDStep+0x208>)
 8005486:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 800548a:	4b2e      	ldr	r3, [pc, #184]	@ (8005544 <PIDStep+0x208>)
 800548c:	edd3 7a00 	vldr	s15, [r3]
 8005490:	4b2d      	ldr	r3, [pc, #180]	@ (8005548 <PIDStep+0x20c>)
 8005492:	ed93 7a00 	vldr	s14, [r3]
 8005496:	4b2d      	ldr	r3, [pc, #180]	@ (800554c <PIDStep+0x210>)
 8005498:	edd3 6a00 	vldr	s13, [r3]
 800549c:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <PIDStep+0x214>)
 800549e:	ed93 6a00 	vldr	s12, [r3]
 80054a2:	482c      	ldr	r0, [pc, #176]	@ (8005554 <PIDStep+0x218>)
 80054a4:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 80054fc <PIDStep+0x1c0>
 80054a8:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8005500 <PIDStep+0x1c4>
 80054ac:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800553c <PIDStep+0x200>
 80054b0:	eef0 1a46 	vmov.f32	s3, s12
 80054b4:	eeb0 1a66 	vmov.f32	s2, s13
 80054b8:	eef0 0a47 	vmov.f32	s1, s14
 80054bc:	eeb0 0a67 	vmov.f32	s0, s15
 80054c0:	f7ff f990 	bl	80047e4 <PID_Update>
 80054c4:	eef0 7a40 	vmov.f32	s15, s0
 80054c8:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <PIDStep+0x21c>)
 80054ca:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20001420 	.word	0x20001420
 80054dc:	20000b94 	.word	0x20000b94
 80054e0:	20000af8 	.word	0x20000af8
 80054e4:	20000b98 	.word	0x20000b98
 80054e8:	20000b38 	.word	0x20000b38
 80054ec:	2000020c 	.word	0x2000020c
 80054f0:	20000210 	.word	0x20000210
 80054f4:	20000214 	.word	0x20000214
 80054f8:	20000bf8 	.word	0x20000bf8
 80054fc:	42c80000 	.word	0x42c80000
 8005500:	c2c80000 	.word	0xc2c80000
 8005504:	3c23d70a 	.word	0x3c23d70a
 8005508:	20000220 	.word	0x20000220
 800550c:	20000224 	.word	0x20000224
 8005510:	20000228 	.word	0x20000228
 8005514:	20000c00 	.word	0x20000c00
 8005518:	20000ba4 	.word	0x20000ba4
 800551c:	20001424 	.word	0x20001424
 8005520:	20000ba8 	.word	0x20000ba8
 8005524:	20001428 	.word	0x20001428
 8005528:	20000bbc 	.word	0x20000bbc
 800552c:	20000200 	.word	0x20000200
 8005530:	20000204 	.word	0x20000204
 8005534:	20000208 	.word	0x20000208
 8005538:	20000c08 	.word	0x20000c08
 800553c:	3a83126f 	.word	0x3a83126f
 8005540:	20000bc4 	.word	0x20000bc4
 8005544:	20000bc0 	.word	0x20000bc0
 8005548:	20000218 	.word	0x20000218
 800554c:	2000021c 	.word	0x2000021c
 8005550:	20000c18 	.word	0x20000c18
 8005554:	20000c10 	.word	0x20000c10
 8005558:	20000bc8 	.word	0x20000bc8

0800555c <ToleranceCheck>:

int ToleranceCheck(void) {
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 8005560:	4b24      	ldr	r3, [pc, #144]	@ (80055f4 <ToleranceCheck+0x98>)
 8005562:	ed93 7a00 	vldr	s14, [r3]
 8005566:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <ToleranceCheck+0x9c>)
 8005568:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800556c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005570:	eef0 7ae7 	vabs.f32	s15, s15
 8005574:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80055fc <ToleranceCheck+0xa0>
 8005578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d52c      	bpl.n	80055dc <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 8005582:	4b1f      	ldr	r3, [pc, #124]	@ (8005600 <ToleranceCheck+0xa4>)
 8005584:	ed93 7a00 	vldr	s14, [r3]
 8005588:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <ToleranceCheck+0xa8>)
 800558a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800558e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005592:	eef0 7ae7 	vabs.f32	s15, s15
 8005596:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005608 <ToleranceCheck+0xac>
 800559a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a2:	d51b      	bpl.n	80055dc <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 80055a4:	4b19      	ldr	r3, [pc, #100]	@ (800560c <ToleranceCheck+0xb0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d107      	bne.n	80055be <ToleranceCheck+0x62>
			lock_timer_us = micros();
 80055ae:	f7ff f8ff 	bl	80047b0 <micros>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4915      	ldr	r1, [pc, #84]	@ (800560c <ToleranceCheck+0xb0>)
 80055b8:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 80055bc:	e016      	b.n	80055ec <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 80055be:	f7ff f8f7 	bl	80047b0 <micros>
 80055c2:	4b12      	ldr	r3, [pc, #72]	@ (800560c <ToleranceCheck+0xb0>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	1a84      	subs	r4, r0, r2
 80055ca:	eb61 0503 	sbc.w	r5, r1, r3
 80055ce:	4b10      	ldr	r3, [pc, #64]	@ (8005610 <ToleranceCheck+0xb4>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	f175 0300 	sbcs.w	r3, r5, #0
 80055d6:	d309      	bcc.n	80055ec <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	e009      	b.n	80055f0 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 80055dc:	490b      	ldr	r1, [pc, #44]	@ (800560c <ToleranceCheck+0xb0>)
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9c1 2300 	strd	r2, r3, [r1]
 80055ea:	e000      	b.n	80055ee <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 80055ec:	bf00      	nop
	}

	return 0;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}
 80055f4:	20000b94 	.word	0x20000b94
 80055f8:	20000af8 	.word	0x20000af8
 80055fc:	3bded289 	.word	0x3bded289
 8005600:	20000b98 	.word	0x20000b98
 8005604:	20000b38 	.word	0x20000b38
 8005608:	3ecccccd 	.word	0x3ecccccd
 800560c:	20001430 	.word	0x20001430
 8005610:	000f4240 	.word	0x000f4240
 8005614:	00000000 	.word	0x00000000

08005618 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8005618:	b5b0      	push	{r4, r5, r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 800561e:	4b34      	ldr	r3, [pc, #208]	@ (80056f0 <CascadeControl_Step+0xd8>)
 8005620:	ed93 7a00 	vldr	s14, [r3]
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <CascadeControl_Step+0xdc>)
 8005626:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800562a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562e:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <CascadeControl_Step+0xe0>)
 8005630:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8005634:	4b31      	ldr	r3, [pc, #196]	@ (80056fc <CascadeControl_Step+0xe4>)
 8005636:	ed93 7a00 	vldr	s14, [r3]
 800563a:	4b31      	ldr	r3, [pc, #196]	@ (8005700 <CascadeControl_Step+0xe8>)
 800563c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005644:	4b2f      	ldr	r3, [pc, #188]	@ (8005704 <CascadeControl_Step+0xec>)
 8005646:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 800564a:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <CascadeControl_Step+0xe0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ff46 	bl	80004e0 <__aeabi_f2d>
 8005654:	a324      	add	r3, pc, #144	@ (adr r3, 80056e8 <CascadeControl_Step+0xd0>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa ff99 	bl	8000590 <__aeabi_dmul>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	f7fb fa4d 	bl	8000b04 <__aeabi_d2f>
 800566a:	4603      	mov	r3, r0
 800566c:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <CascadeControl_Step+0xf0>)
 800566e:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 8005670:	f7ff f89e 	bl	80047b0 <micros>
 8005674:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 8005678:	4b24      	ldr	r3, [pc, #144]	@ (800570c <CascadeControl_Step+0xf4>)
 800567a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800567e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005682:	4290      	cmp	r0, r2
 8005684:	eb71 0303 	sbcs.w	r3, r1, r3
 8005688:	d301      	bcc.n	800568e <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 800568a:	2300      	movs	r3, #0
 800568c:	e026      	b.n	80056dc <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 800568e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005692:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8005696:	f143 0500 	adc.w	r5, r3, #0
 800569a:	4b1c      	ldr	r3, [pc, #112]	@ (800570c <CascadeControl_Step+0xf4>)
 800569c:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 80056a0:	f7ff fdb2 	bl	8005208 <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 80056a4:	f7ff fe4a 	bl	800533c <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 80056a8:	f7ff fbfe 	bl	8004ea8 <Workspace_limit>
	Set_Motor(0, R_PWM);
 80056ac:	4b18      	ldr	r3, [pc, #96]	@ (8005710 <CascadeControl_Step+0xf8>)
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	eeb0 0a67 	vmov.f32	s0, s15
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7ff fb2c 	bl	8004d14 <Set_Motor>
	Set_Motor(1, P_PWM);
 80056bc:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <CascadeControl_Step+0xfc>)
 80056be:	edd3 7a00 	vldr	s15, [r3]
 80056c2:	eeb0 0a67 	vmov.f32	s0, s15
 80056c6:	2001      	movs	r0, #1
 80056c8:	f7ff fb24 	bl	8004d14 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 80056cc:	f7ff ff46 	bl	800555c <ToleranceCheck>
 80056d0:	4603      	mov	r3, r0
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <CascadeControl_Step+0x100>)
 80056d6:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 80056d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <CascadeControl_Step+0x100>)
 80056da:	781b      	ldrb	r3, [r3, #0]
//	return ToleranceCheck();
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdb0      	pop	{r4, r5, r7, pc}
 80056e4:	f3af 8000 	nop.w
 80056e8:	1a63c1f8 	.word	0x1a63c1f8
 80056ec:	404ca5dc 	.word	0x404ca5dc
 80056f0:	20000b94 	.word	0x20000b94
 80056f4:	20000af8 	.word	0x20000af8
 80056f8:	20000bb4 	.word	0x20000bb4
 80056fc:	20000b98 	.word	0x20000b98
 8005700:	20000b38 	.word	0x20000b38
 8005704:	20000bb8 	.word	0x20000bb8
 8005708:	20000aac 	.word	0x20000aac
 800570c:	20001438 	.word	0x20001438
 8005710:	20000bc4 	.word	0x20000bc4
 8005714:	20000bc8 	.word	0x20000bc8
 8005718:	20001330 	.word	0x20001330

0800571c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005720:	b672      	cpsid	i
}
 8005722:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <Error_Handler+0x8>

08005728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <HAL_MspInit+0x44>)
 8005730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005732:	4a0e      	ldr	r2, [pc, #56]	@ (800576c <HAL_MspInit+0x44>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6613      	str	r3, [r2, #96]	@ 0x60
 800573a:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <HAL_MspInit+0x44>)
 800573c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	4b09      	ldr	r3, [pc, #36]	@ (800576c <HAL_MspInit+0x44>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	4a08      	ldr	r2, [pc, #32]	@ (800576c <HAL_MspInit+0x44>)
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005750:	6593      	str	r3, [r2, #88]	@ 0x58
 8005752:	4b06      	ldr	r3, [pc, #24]	@ (800576c <HAL_MspInit+0x44>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800575e:	f001 fa97 	bl	8006c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000

08005770 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08c      	sub	sp, #48	@ 0x30
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005778:	f107 031c 	add.w	r3, r7, #28
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a32      	ldr	r2, [pc, #200]	@ (8005858 <HAL_TIM_IC_MspInit+0xe8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d130      	bne.n	80057f4 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005792:	4b32      	ldr	r3, [pc, #200]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005796:	4a31      	ldr	r2, [pc, #196]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005798:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800579c:	6613      	str	r3, [r2, #96]	@ 0x60
 800579e:	4b2f      	ldr	r3, [pc, #188]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 80057a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057aa:	4b2c      	ldr	r3, [pc, #176]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 80057ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ae:	4a2b      	ldr	r2, [pc, #172]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 80057b0:	f043 0304 	orr.w	r3, r3, #4
 80057b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057b6:	4b29      	ldr	r3, [pc, #164]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80057c2:	2302      	movs	r3, #2
 80057c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c6:	2302      	movs	r3, #2
 80057c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ce:	2300      	movs	r3, #0
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80057d2:	2302      	movs	r3, #2
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057d6:	f107 031c 	add.w	r3, r7, #28
 80057da:	4619      	mov	r1, r3
 80057dc:	4820      	ldr	r0, [pc, #128]	@ (8005860 <HAL_TIM_IC_MspInit+0xf0>)
 80057de:	f000 ffe9 	bl	80067b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2100      	movs	r1, #0
 80057e6:	2019      	movs	r0, #25
 80057e8:	f000 fc7d 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057ec:	2019      	movs	r0, #25
 80057ee:	f000 fc94 	bl	800611a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80057f2:	e02d      	b.n	8005850 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fc:	d128      	bne.n	8005850 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057fe:	4b17      	ldr	r3, [pc, #92]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	4a16      	ldr	r2, [pc, #88]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	6593      	str	r3, [r2, #88]	@ 0x58
 800580a:	4b14      	ldr	r3, [pc, #80]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005816:	4b11      	ldr	r3, [pc, #68]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581a:	4a10      	ldr	r2, [pc, #64]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005822:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <HAL_TIM_IC_MspInit+0xec>)
 8005824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800582e:	2301      	movs	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005832:	2302      	movs	r3, #2
 8005834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583a:	2300      	movs	r3, #0
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800583e:	2301      	movs	r3, #1
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005842:	f107 031c 	add.w	r3, r7, #28
 8005846:	4619      	mov	r1, r3
 8005848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800584c:	f000 ffb2 	bl	80067b4 <HAL_GPIO_Init>
}
 8005850:	bf00      	nop
 8005852:	3730      	adds	r7, #48	@ 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40021000 	.word	0x40021000
 8005860:	48000800 	.word	0x48000800

08005864 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08c      	sub	sp, #48	@ 0x30
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	f107 031c 	add.w	r3, r7, #28
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a37      	ldr	r2, [pc, #220]	@ (8005960 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d130      	bne.n	80058e8 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005886:	4b37      	ldr	r3, [pc, #220]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	4a36      	ldr	r2, [pc, #216]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	6593      	str	r3, [r2, #88]	@ 0x58
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589e:	4b31      	ldr	r3, [pc, #196]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	4a30      	ldr	r2, [pc, #192]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 80058a4:	f043 0302 	orr.w	r3, r3, #2
 80058a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80058b6:	2330      	movs	r3, #48	@ 0x30
 80058b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ba:	2302      	movs	r3, #2
 80058bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058c2:	2300      	movs	r3, #0
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80058c6:	2302      	movs	r3, #2
 80058c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ca:	f107 031c 	add.w	r3, r7, #28
 80058ce:	4619      	mov	r1, r3
 80058d0:	4825      	ldr	r0, [pc, #148]	@ (8005968 <HAL_TIM_Encoder_MspInit+0x104>)
 80058d2:	f000 ff6f 	bl	80067b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80058d6:	2200      	movs	r2, #0
 80058d8:	2100      	movs	r1, #0
 80058da:	201d      	movs	r0, #29
 80058dc:	f000 fc03 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80058e0:	201d      	movs	r0, #29
 80058e2:	f000 fc1a 	bl	800611a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058e6:	e036      	b.n	8005956 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <HAL_TIM_Encoder_MspInit+0x108>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d131      	bne.n	8005956 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80058fe:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005916:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <HAL_TIM_Encoder_MspInit+0x100>)
 8005918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005922:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005930:	2300      	movs	r3, #0
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005934:	230a      	movs	r3, #10
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005938:	f107 031c 	add.w	r3, r7, #28
 800593c:	4619      	mov	r1, r3
 800593e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005942:	f000 ff37 	bl	80067b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005946:	2200      	movs	r2, #0
 8005948:	2100      	movs	r1, #0
 800594a:	201e      	movs	r0, #30
 800594c:	f000 fbcb 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005950:	201e      	movs	r0, #30
 8005952:	f000 fbe2 	bl	800611a <HAL_NVIC_EnableIRQ>
}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	@ 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40000400 	.word	0x40000400
 8005964:	40021000 	.word	0x40021000
 8005968:	48000400 	.word	0x48000400
 800596c:	40000800 	.word	0x40000800

08005970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a30 <HAL_TIM_Base_MspInit+0xc0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d114      	bne.n	80059ac <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005982:	4b2c      	ldr	r3, [pc, #176]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	4a2b      	ldr	r2, [pc, #172]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005988:	f043 0308 	orr.w	r3, r3, #8
 800598c:	6593      	str	r3, [r2, #88]	@ 0x58
 800598e:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	2032      	movs	r0, #50	@ 0x32
 80059a0:	f000 fba1 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80059a4:	2032      	movs	r0, #50	@ 0x32
 80059a6:	f000 fbb8 	bl	800611a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 80059aa:	e03c      	b.n	8005a26 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <HAL_TIM_Base_MspInit+0xc8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10c      	bne.n	80059d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80059b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80059c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
}
 80059ce:	e02a      	b.n	8005a26 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a19      	ldr	r2, [pc, #100]	@ (8005a3c <HAL_TIM_Base_MspInit+0xcc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80059da:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059de:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80059e6:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 80059e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	e018      	b.n	8005a26 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a11      	ldr	r2, [pc, #68]	@ (8005a40 <HAL_TIM_Base_MspInit+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d113      	bne.n	8005a26 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80059fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a02:	4a0c      	ldr	r2, [pc, #48]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_TIM_Base_MspInit+0xc4>)
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2019      	movs	r0, #25
 8005a1c:	f000 fb63 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005a20:	2019      	movs	r0, #25
 8005a22:	f000 fb7a 	bl	800611a <HAL_NVIC_EnableIRQ>
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40021000 	.word	0x40021000
 8005a38:	40013400 	.word	0x40013400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400

08005a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	@ 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_TIM_MspPostInit+0xac>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d11d      	bne.n	8005aa2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a66:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6a:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a84:	2302      	movs	r3, #2
 8005a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005a90:	2304      	movs	r3, #4
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4817      	ldr	r0, [pc, #92]	@ (8005af8 <HAL_TIM_MspPostInit+0xb4>)
 8005a9c:	f000 fe8a 	bl	80067b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005aa0:	e021      	b.n	8005ae6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	@ (8005afc <HAL_TIM_MspPostInit+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d11c      	bne.n	8005ae6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aac:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab0:	4a10      	ldr	r2, [pc, #64]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <HAL_TIM_MspPostInit+0xb0>)
 8005aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aca:	2302      	movs	r3, #2
 8005acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ada:	f107 0314 	add.w	r3, r7, #20
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4807      	ldr	r0, [pc, #28]	@ (8005b00 <HAL_TIM_MspPostInit+0xbc>)
 8005ae2:	f000 fe67 	bl	80067b4 <HAL_GPIO_Init>
}
 8005ae6:	bf00      	nop
 8005ae8:	3728      	adds	r7, #40	@ 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40021000 	.word	0x40021000
 8005af8:	48000800 	.word	0x48000800
 8005afc:	40014000 	.word	0x40014000
 8005b00:	48000400 	.word	0x48000400

08005b04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b09e      	sub	sp, #120	@ 0x78
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	609a      	str	r2, [r3, #8]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	2254      	movs	r2, #84	@ 0x54
 8005b22:	2100      	movs	r1, #0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f006 fcc7 	bl	800c4b8 <memset>
  if(huart->Instance==USART2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8005c64 <HAL_UART_MspInit+0x160>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	f040 8092 	bne.w	8005c5a <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b36:	2302      	movs	r3, #2
 8005b38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b3e:	f107 0310 	add.w	r3, r7, #16
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fde2 	bl	800770c <HAL_RCCEx_PeriphCLKConfig>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005b4e:	f7ff fde5 	bl	800571c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b52:	4b45      	ldr	r3, [pc, #276]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b56:	4a44      	ldr	r2, [pc, #272]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5e:	4b42      	ldr	r3, [pc, #264]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b76:	4b3c      	ldr	r3, [pc, #240]	@ (8005c68 <HAL_UART_MspInit+0x164>)
 8005b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b82:	230c      	movs	r3, #12
 8005b84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b86:	2302      	movs	r3, #2
 8005b88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b92:	2307      	movs	r3, #7
 8005b94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ba0:	f000 fe08 	bl	80067b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005ba4:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005ba6:	4a32      	ldr	r2, [pc, #200]	@ (8005c70 <HAL_UART_MspInit+0x16c>)
 8005ba8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005baa:	4b30      	ldr	r3, [pc, #192]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bac:	221a      	movs	r2, #26
 8005bae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bc8:	4b28      	ldr	r3, [pc, #160]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005bce:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bd4:	4b25      	ldr	r3, [pc, #148]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005bda:	4824      	ldr	r0, [pc, #144]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bdc:	f000 fab8 	bl	8006150 <HAL_DMA_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005be6:	f7ff fd99 	bl	800571c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c6c <HAL_UART_MspInit+0x168>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005c78 <HAL_UART_MspInit+0x174>)
 8005bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c00:	221b      	movs	r2, #27
 8005c02:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c06:	2210      	movs	r2, #16
 8005c08:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c10:	4b18      	ldr	r3, [pc, #96]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c16:	4b17      	ldr	r3, [pc, #92]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c1c:	4b15      	ldr	r3, [pc, #84]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c22:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c2e:	4811      	ldr	r0, [pc, #68]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c30:	f000 fa8e 	bl	8006150 <HAL_DMA_Init>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005c3a:	f7ff fd6f 	bl	800571c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a0c      	ldr	r2, [pc, #48]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c42:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005c44:	4a0b      	ldr	r2, [pc, #44]	@ (8005c74 <HAL_UART_MspInit+0x170>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	2026      	movs	r0, #38	@ 0x26
 8005c50:	f000 fa49 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c54:	2026      	movs	r0, #38	@ 0x26
 8005c56:	f000 fa60 	bl	800611a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005c5a:	bf00      	nop
 8005c5c:	3778      	adds	r7, #120	@ 0x78
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40004400 	.word	0x40004400
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	200009dc 	.word	0x200009dc
 8005c70:	40020008 	.word	0x40020008
 8005c74:	20000a3c 	.word	0x20000a3c
 8005c78:	4002001c 	.word	0x4002001c

08005c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <NMI_Handler+0x4>

08005c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <HardFault_Handler+0x4>

08005c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <MemManage_Handler+0x4>

08005c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <BusFault_Handler+0x4>

08005c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ca0:	bf00      	nop
 8005ca2:	e7fd      	b.n	8005ca0 <UsageFault_Handler+0x4>

08005ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cd2:	f000 f90f 	bl	8005ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f000 ff1a 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005cec:	2004      	movs	r0, #4
 8005cee:	f000 ff13 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005cfa:	2008      	movs	r0, #8
 8005cfc:	f000 ff0c 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005d08:	4802      	ldr	r0, [pc, #8]	@ (8005d14 <DMA1_Channel1_IRQHandler+0x10>)
 8005d0a:	f000 fc04 	bl	8006516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200009dc 	.word	0x200009dc

08005d18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005d1c:	4802      	ldr	r0, [pc, #8]	@ (8005d28 <DMA1_Channel2_IRQHandler+0x10>)
 8005d1e:	f000 fbfa 	bl	8006516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000a3c 	.word	0x20000a3c

08005d2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005d30:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d34:	f000 fef0 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005d38:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005d3c:	f000 feec 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d40:	bf00      	nop
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d48:	4803      	ldr	r0, [pc, #12]	@ (8005d58 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005d4a:	f002 fd99 	bl	8008880 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005d4e:	4803      	ldr	r0, [pc, #12]	@ (8005d5c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005d50:	f002 fd96 	bl	8008880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200002b0 	.word	0x200002b0
 8005d5c:	20000844 	.word	0x20000844

08005d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d64:	4802      	ldr	r0, [pc, #8]	@ (8005d70 <TIM3_IRQHandler+0x10>)
 8005d66:	f002 fd8b 	bl	8008880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000448 	.word	0x20000448

08005d74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d78:	4802      	ldr	r0, [pc, #8]	@ (8005d84 <TIM4_IRQHandler+0x10>)
 8005d7a:	f002 fd81 	bl	8008880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000514 	.word	0x20000514

08005d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d8c:	4802      	ldr	r0, [pc, #8]	@ (8005d98 <USART2_IRQHandler+0x10>)
 8005d8e:	f004 fe33 	bl	800a9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000910 	.word	0x20000910

08005d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005da0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005da4:	f000 feb8 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005da8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005dac:	f000 feb4 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005db0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005db4:	f000 feb0 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005db8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005dbc:	f000 feac 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005dc8:	4802      	ldr	r0, [pc, #8]	@ (8005dd4 <TIM5_IRQHandler+0x10>)
 8005dca:	f002 fd59 	bl	8008880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200005e0 	.word	0x200005e0

08005dd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ddc:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <SystemInit+0x20>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	4a05      	ldr	r2, [pc, #20]	@ (8005df8 <SystemInit+0x20>)
 8005de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dfc:	480d      	ldr	r0, [pc, #52]	@ (8005e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e00:	f7ff ffea 	bl	8005dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e04:	480c      	ldr	r0, [pc, #48]	@ (8005e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e06:	490d      	ldr	r1, [pc, #52]	@ (8005e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e08:	4a0d      	ldr	r2, [pc, #52]	@ (8005e40 <LoopForever+0xe>)
  movs r3, #0
 8005e0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e0c:	e002      	b.n	8005e14 <LoopCopyDataInit>

08005e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e12:	3304      	adds	r3, #4

08005e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e18:	d3f9      	bcc.n	8005e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8005e48 <LoopForever+0x16>)
  movs r3, #0
 8005e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e20:	e001      	b.n	8005e26 <LoopFillZerobss>

08005e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e24:	3204      	adds	r2, #4

08005e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e28:	d3fb      	bcc.n	8005e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e2a:	f006 fb53 	bl	800c4d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e2e:	f7fb ffd7 	bl	8001de0 <main>

08005e32 <LoopForever>:

LoopForever:
    b LoopForever
 8005e32:	e7fe      	b.n	8005e32 <LoopForever>
  ldr   r0, =_estack
 8005e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e3c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8005e40:	080239d0 	.word	0x080239d0
  ldr r2, =_sbss
 8005e44:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005e48:	2000157c 	.word	0x2000157c

08005e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e4c:	e7fe      	b.n	8005e4c <ADC1_2_IRQHandler>

08005e4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e58:	2003      	movs	r0, #3
 8005e5a:	f000 f939 	bl	80060d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f000 f80e 	bl	8005e80 <HAL_InitTick>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	71fb      	strb	r3, [r7, #7]
 8005e6e:	e001      	b.n	8005e74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e70:	f7ff fc5a 	bl	8005728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e74:	79fb      	ldrb	r3, [r7, #7]

}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <HAL_InitTick+0x68>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d022      	beq.n	8005eda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <HAL_InitTick+0x6c>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <HAL_InitTick+0x68>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f944 	bl	8006136 <HAL_SYSTICK_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10f      	bne.n	8005ed4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d809      	bhi.n	8005ece <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	f000 f910 	bl	80060e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef0 <HAL_InitTick+0x70>)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	e007      	b.n	8005ede <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	e004      	b.n	8005ede <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	e001      	b.n	8005ede <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20000238 	.word	0x20000238
 8005eec:	20000230 	.word	0x20000230
 8005ef0:	20000234 	.word	0x20000234

08005ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <HAL_IncTick+0x1c>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_IncTick+0x20>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	4a03      	ldr	r2, [pc, #12]	@ (8005f10 <HAL_IncTick+0x1c>)
 8005f04:	6013      	str	r3, [r2, #0]
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20001440 	.word	0x20001440
 8005f14:	20000238 	.word	0x20000238

08005f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <HAL_GetTick+0x14>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20001440 	.word	0x20001440

08005f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f40:	4b0c      	ldr	r3, [pc, #48]	@ (8005f74 <__NVIC_SetPriorityGrouping+0x44>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f62:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <__NVIC_SetPriorityGrouping+0x44>)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	60d3      	str	r3, [r2, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f7c:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <__NVIC_GetPriorityGrouping+0x18>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	f003 0307 	and.w	r3, r3, #7
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	db0b      	blt.n	8005fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	f003 021f 	and.w	r2, r3, #31
 8005fac:	4907      	ldr	r1, [pc, #28]	@ (8005fcc <__NVIC_EnableIRQ+0x38>)
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000e100 	.word	0xe000e100

08005fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	6039      	str	r1, [r7, #0]
 8005fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db0a      	blt.n	8005ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	490c      	ldr	r1, [pc, #48]	@ (800601c <__NVIC_SetPriority+0x4c>)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	0112      	lsls	r2, r2, #4
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff8:	e00a      	b.n	8006010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4908      	ldr	r1, [pc, #32]	@ (8006020 <__NVIC_SetPriority+0x50>)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	3b04      	subs	r3, #4
 8006008:	0112      	lsls	r2, r2, #4
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	440b      	add	r3, r1
 800600e:	761a      	strb	r2, [r3, #24]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000e100 	.word	0xe000e100
 8006020:	e000ed00 	.word	0xe000ed00

08006024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	@ 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f1c3 0307 	rsb	r3, r3, #7
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf28      	it	cs
 8006042:	2304      	movcs	r3, #4
 8006044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3304      	adds	r3, #4
 800604a:	2b06      	cmp	r3, #6
 800604c:	d902      	bls.n	8006054 <NVIC_EncodePriority+0x30>
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3b03      	subs	r3, #3
 8006052:	e000      	b.n	8006056 <NVIC_EncodePriority+0x32>
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	401a      	ands	r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800606c:	f04f 31ff 	mov.w	r1, #4294967295
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	43d9      	mvns	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800607c:	4313      	orrs	r3, r2
         );
}
 800607e:	4618      	mov	r0, r3
 8006080:	3724      	adds	r7, #36	@ 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800609c:	d301      	bcc.n	80060a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609e:	2301      	movs	r3, #1
 80060a0:	e00f      	b.n	80060c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060a2:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <SysTick_Config+0x40>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060aa:	210f      	movs	r1, #15
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	f7ff ff8e 	bl	8005fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b4:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <SysTick_Config+0x40>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ba:	4b04      	ldr	r3, [pc, #16]	@ (80060cc <SysTick_Config+0x40>)
 80060bc:	2207      	movs	r2, #7
 80060be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	e000e010 	.word	0xe000e010

080060d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ff29 	bl	8005f30 <__NVIC_SetPriorityGrouping>
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	4603      	mov	r3, r0
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060f4:	f7ff ff40 	bl	8005f78 <__NVIC_GetPriorityGrouping>
 80060f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f7ff ff90 	bl	8006024 <NVIC_EncodePriority>
 8006104:	4602      	mov	r2, r0
 8006106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff5f 	bl	8005fd0 <__NVIC_SetPriority>
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	4603      	mov	r3, r0
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff33 	bl	8005f94 <__NVIC_EnableIRQ>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ffa4 	bl	800608c <SysTick_Config>
 8006144:	4603      	mov	r3, r0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e08d      	b.n	800627e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	4b47      	ldr	r3, [pc, #284]	@ (8006288 <HAL_DMA_Init+0x138>)
 800616a:	429a      	cmp	r2, r3
 800616c:	d80f      	bhi.n	800618e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	4b45      	ldr	r3, [pc, #276]	@ (800628c <HAL_DMA_Init+0x13c>)
 8006176:	4413      	add	r3, r2
 8006178:	4a45      	ldr	r2, [pc, #276]	@ (8006290 <HAL_DMA_Init+0x140>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	009a      	lsls	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a42      	ldr	r2, [pc, #264]	@ (8006294 <HAL_DMA_Init+0x144>)
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40
 800618c:	e00e      	b.n	80061ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	4b40      	ldr	r3, [pc, #256]	@ (8006298 <HAL_DMA_Init+0x148>)
 8006196:	4413      	add	r3, r2
 8006198:	4a3d      	ldr	r2, [pc, #244]	@ (8006290 <HAL_DMA_Init+0x140>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	009a      	lsls	r2, r3, #2
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a3c      	ldr	r2, [pc, #240]	@ (800629c <HAL_DMA_Init+0x14c>)
 80061aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80061d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa76 	bl	80066f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800620c:	d102      	bne.n	8006214 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006228:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <HAL_DMA_Init+0x104>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d80c      	bhi.n	8006254 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa96 	bl	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	e008      	b.n	8006266 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40020407 	.word	0x40020407
 800628c:	bffdfff8 	.word	0xbffdfff8
 8006290:	cccccccd 	.word	0xcccccccd
 8006294:	40020000 	.word	0x40020000
 8006298:	bffdfbf8 	.word	0xbffdfbf8
 800629c:	40020400 	.word	0x40020400

080062a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_DMA_Start_IT+0x20>
 80062bc:	2302      	movs	r3, #2
 80062be:	e066      	b.n	800638e <HAL_DMA_Start_IT+0xee>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d155      	bne.n	8006380 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f9bb 	bl	8006674 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 020e 	orr.w	r2, r2, #14
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e00f      	b.n	8006338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 020a 	orr.w	r2, r2, #10
 8006336:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006354:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800636c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e005      	b.n	800638c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006388:	2302      	movs	r3, #2
 800638a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d005      	beq.n	80063ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2204      	movs	r2, #4
 80063b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e037      	b.n	800642a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 020e 	bic.w	r2, r2, #14
 80063c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	f003 021f 	and.w	r2, r3, #31
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f202 	lsl.w	r2, r1, r2
 80063fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006406:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800641e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006428:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d00d      	beq.n	800647c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2204      	movs	r2, #4
 8006464:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e047      	b.n	800650c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 020e 	bic.w	r2, r2, #14
 800648a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	f003 021f 	and.w	r2, r3, #31
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f202 	lsl.w	r2, r1, r2
 80064be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
    }
  }
  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2204      	movs	r2, #4
 8006538:	409a      	lsls	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d026      	beq.n	8006590 <HAL_DMA_IRQHandler+0x7a>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0204 	bic.w	r2, r2, #4
 8006568:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	f003 021f 	and.w	r2, r3, #31
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2104      	movs	r1, #4
 8006578:	fa01 f202 	lsl.w	r2, r1, r2
 800657c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	2b00      	cmp	r3, #0
 8006584:	d071      	beq.n	800666a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800658e:	e06c      	b.n	800666a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2202      	movs	r2, #2
 800659a:	409a      	lsls	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02e      	beq.n	8006602 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d029      	beq.n	8006602 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 020a 	bic.w	r2, r2, #10
 80065ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	2102      	movs	r1, #2
 80065e2:	fa01 f202 	lsl.w	r2, r1, r2
 80065e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d038      	beq.n	800666a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006600:	e033      	b.n	800666a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2208      	movs	r2, #8
 800660c:	409a      	lsls	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02a      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d025      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 020e 	bic.w	r2, r2, #14
 800662e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006634:	f003 021f 	and.w	r2, r3, #31
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	2101      	movs	r1, #1
 800663e:	fa01 f202 	lsl.w	r2, r1, r2
 8006642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800666a:	bf00      	nop
 800666c:	bf00      	nop
}
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800668a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	f003 021f 	and.w	r2, r3, #31
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2101      	movs	r1, #1
 80066ac:	fa01 f202 	lsl.w	r2, r1, r2
 80066b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d108      	bne.n	80066d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066d2:	e007      	b.n	80066e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b16      	ldr	r3, [pc, #88]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d802      	bhi.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006704:	4b15      	ldr	r3, [pc, #84]	@ (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e001      	b.n	800670e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800670c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	3b08      	subs	r3, #8
 800671a:	4a12      	ldr	r2, [pc, #72]	@ (8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800671c:	fba2 2303 	umull	r2, r3, r2, r3
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	009a      	lsls	r2, r3, #2
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a0b      	ldr	r2, [pc, #44]	@ (8006768 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800673a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	409a      	lsls	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40020407 	.word	0x40020407
 800675c:	40020800 	.word	0x40020800
 8006760:	40020820 	.word	0x40020820
 8006764:	cccccccd 	.word	0xcccccccd
 8006768:	40020880 	.word	0x40020880

0800676c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800678e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b01      	subs	r3, #1
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2201      	movs	r2, #1
 800679a:	409a      	lsls	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	1000823f 	.word	0x1000823f
 80067b0:	40020940 	.word	0x40020940

080067b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067c2:	e15a      	b.n	8006a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	2101      	movs	r1, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 814c 	beq.w	8006a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d005      	beq.n	80067f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d130      	bne.n	8006856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2203      	movs	r2, #3
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4013      	ands	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800682a:	2201      	movs	r2, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 0201 	and.w	r2, r3, #1
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d017      	beq.n	8006892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2203      	movs	r2, #3
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4013      	ands	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d123      	bne.n	80068e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	08da      	lsrs	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3208      	adds	r2, #8
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	220f      	movs	r2, #15
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4013      	ands	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	08da      	lsrs	r2, r3, #3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3208      	adds	r2, #8
 80068e0:	6939      	ldr	r1, [r7, #16]
 80068e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	2203      	movs	r2, #3
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a6 	beq.w	8006a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006928:	4b5b      	ldr	r3, [pc, #364]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 800692a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692c:	4a5a      	ldr	r2, [pc, #360]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	6613      	str	r3, [r2, #96]	@ 0x60
 8006934:	4b58      	ldr	r3, [pc, #352]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 8006936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006940:	4a56      	ldr	r2, [pc, #344]	@ (8006a9c <HAL_GPIO_Init+0x2e8>)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	089b      	lsrs	r3, r3, #2
 8006946:	3302      	adds	r3, #2
 8006948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	220f      	movs	r2, #15
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800696a:	d01f      	beq.n	80069ac <HAL_GPIO_Init+0x1f8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a4c      	ldr	r2, [pc, #304]	@ (8006aa0 <HAL_GPIO_Init+0x2ec>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d019      	beq.n	80069a8 <HAL_GPIO_Init+0x1f4>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a4b      	ldr	r2, [pc, #300]	@ (8006aa4 <HAL_GPIO_Init+0x2f0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_GPIO_Init+0x1f0>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa8 <HAL_GPIO_Init+0x2f4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00d      	beq.n	80069a0 <HAL_GPIO_Init+0x1ec>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a49      	ldr	r2, [pc, #292]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <HAL_GPIO_Init+0x1e8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a48      	ldr	r2, [pc, #288]	@ (8006ab0 <HAL_GPIO_Init+0x2fc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_GPIO_Init+0x1e4>
 8006994:	2305      	movs	r3, #5
 8006996:	e00a      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 8006998:	2306      	movs	r3, #6
 800699a:	e008      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 800699c:	2304      	movs	r3, #4
 800699e:	e006      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a0:	2303      	movs	r3, #3
 80069a2:	e004      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e002      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069ac:	2300      	movs	r3, #0
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	f002 0203 	and.w	r2, r2, #3
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	4093      	lsls	r3, r2
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069be:	4937      	ldr	r1, [pc, #220]	@ (8006a9c <HAL_GPIO_Init+0x2e8>)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	3302      	adds	r3, #2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069cc:	4b39      	ldr	r3, [pc, #228]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4013      	ands	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069f0:	4a30      	ldr	r2, [pc, #192]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069f6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	43db      	mvns	r3, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4013      	ands	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a1a:	4a26      	ldr	r2, [pc, #152]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a20:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a44:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a6e:	4a11      	ldr	r2, [pc, #68]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3301      	adds	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f47f ae9d 	bne.w	80067c4 <HAL_GPIO_Init+0x10>
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	48000400 	.word	0x48000400
 8006aa4:	48000800 	.word	0x48000800
 8006aa8:	48000c00 	.word	0x48000c00
 8006aac:	48001000 	.word	0x48001000
 8006ab0:	48001400 	.word	0x48001400
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	887b      	ldrh	r3, [r7, #2]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	e001      	b.n	8006ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	807b      	strh	r3, [r7, #2]
 8006af4:	4613      	mov	r3, r2
 8006af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006af8:	787b      	ldrb	r3, [r7, #1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006afe:	887a      	ldrh	r2, [r7, #2]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b04:	e002      	b.n	8006b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b22:	4b08      	ldr	r3, [pc, #32]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b2e:	4a05      	ldr	r2, [pc, #20]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd fd5c 	bl	80045f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40010400 	.word	0x40010400

08006b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d141      	bne.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b56:	4b4b      	ldr	r3, [pc, #300]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b62:	d131      	bne.n	8006bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b64:	4b47      	ldr	r3, [pc, #284]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b6a:	4a46      	ldr	r2, [pc, #280]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b74:	4b43      	ldr	r3, [pc, #268]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b7c:	4a41      	ldr	r2, [pc, #260]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b84:	4b40      	ldr	r3, [pc, #256]	@ (8006c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2232      	movs	r2, #50	@ 0x32
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b90:	fba2 2303 	umull	r2, r3, r2, r3
 8006b94:	0c9b      	lsrs	r3, r3, #18
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b9a:	e002      	b.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ba2:	4b38      	ldr	r3, [pc, #224]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bae:	d102      	bne.n	8006bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f2      	bne.n	8006b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bb6:	4b33      	ldr	r3, [pc, #204]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc2:	d158      	bne.n	8006c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e057      	b.n	8006c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bce:	4a2d      	ldr	r2, [pc, #180]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006bd8:	e04d      	b.n	8006c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be0:	d141      	bne.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006be2:	4b28      	ldr	r3, [pc, #160]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bee:	d131      	bne.n	8006c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bf0:	4b24      	ldr	r3, [pc, #144]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf6:	4a23      	ldr	r2, [pc, #140]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c00:	4b20      	ldr	r3, [pc, #128]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c08:	4a1e      	ldr	r2, [pc, #120]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c10:	4b1d      	ldr	r3, [pc, #116]	@ (8006c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2232      	movs	r2, #50	@ 0x32
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	0c9b      	lsrs	r3, r3, #18
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c26:	e002      	b.n	8006c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c2e:	4b15      	ldr	r3, [pc, #84]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3a:	d102      	bne.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f2      	bne.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c4e:	d112      	bne.n	8006c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e011      	b.n	8006c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c54:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c64:	e007      	b.n	8006c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c66:	4b07      	ldr	r3, [pc, #28]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c6e:	4a05      	ldr	r2, [pc, #20]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40007000 	.word	0x40007000
 8006c88:	20000230 	.word	0x20000230
 8006c8c:	431bde83 	.word	0x431bde83

08006c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c94:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c9e:	6093      	str	r3, [r2, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40007000 	.word	0x40007000

08006cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e2fe      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d075      	beq.n	8006dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cce:	4b97      	ldr	r3, [pc, #604]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cd8:	4b94      	ldr	r3, [pc, #592]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d102      	bne.n	8006cee <HAL_RCC_OscConfig+0x3e>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d002      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x44>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d10b      	bne.n	8006d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05b      	beq.n	8006db8 <HAL_RCC_OscConfig+0x108>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d157      	bne.n	8006db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e2d9      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d14:	d106      	bne.n	8006d24 <HAL_RCC_OscConfig+0x74>
 8006d16:	4b85      	ldr	r3, [pc, #532]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a84      	ldr	r2, [pc, #528]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e01d      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d2c:	d10c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x98>
 8006d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a7e      	ldr	r2, [pc, #504]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e00b      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d48:	4b78      	ldr	r3, [pc, #480]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a77      	ldr	r2, [pc, #476]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b75      	ldr	r3, [pc, #468]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a74      	ldr	r2, [pc, #464]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7ff f8d6 	bl	8005f18 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d70:	f7ff f8d2 	bl	8005f18 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	@ 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e29e      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d82:	4b6a      	ldr	r3, [pc, #424]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0xc0>
 8006d8e:	e014      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7ff f8c2 	bl	8005f18 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d98:	f7ff f8be 	bl	8005f18 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b64      	cmp	r3, #100	@ 0x64
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e28a      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006daa:	4b60      	ldr	r3, [pc, #384]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0xe8>
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d075      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc6:	4b59      	ldr	r3, [pc, #356]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dd0:	4b56      	ldr	r3, [pc, #344]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d102      	bne.n	8006de6 <HAL_RCC_OscConfig+0x136>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d002      	beq.n	8006dec <HAL_RCC_OscConfig+0x13c>
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d11f      	bne.n	8006e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dec:	4b4f      	ldr	r3, [pc, #316]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_RCC_OscConfig+0x154>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e25d      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e04:	4b49      	ldr	r3, [pc, #292]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	061b      	lsls	r3, r3, #24
 8006e12:	4946      	ldr	r1, [pc, #280]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e18:	4b45      	ldr	r3, [pc, #276]	@ (8006f30 <HAL_RCC_OscConfig+0x280>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff f82f 	bl	8005e80 <HAL_InitTick>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d043      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e249      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d023      	beq.n	8006e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e34:	4b3d      	ldr	r3, [pc, #244]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a3c      	ldr	r2, [pc, #240]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7ff f86a 	bl	8005f18 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e48:	f7ff f866 	bl	8005f18 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e232      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e5a:	4b34      	ldr	r3, [pc, #208]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e66:	4b31      	ldr	r3, [pc, #196]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	061b      	lsls	r3, r3, #24
 8006e74:	492d      	ldr	r1, [pc, #180]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	604b      	str	r3, [r1, #4]
 8006e7a:	e01a      	b.n	8006eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006e82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7ff f846 	bl	8005f18 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e90:	f7ff f842 	bl	8005f18 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e20e      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ea2:	4b22      	ldr	r3, [pc, #136]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x1e0>
 8006eae:	e000      	b.n	8006eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d041      	beq.n	8006f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01c      	beq.n	8006f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ec6:	4b19      	ldr	r3, [pc, #100]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ecc:	4a17      	ldr	r2, [pc, #92]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed6:	f7ff f81f 	bl	8005f18 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ede:	f7ff f81b 	bl	8005f18 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e1e7      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ef      	beq.n	8006ede <HAL_RCC_OscConfig+0x22e>
 8006efe:	e020      	b.n	8006f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f00:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f06:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7ff f802 	bl	8005f18 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f16:	e00d      	b.n	8006f34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f18:	f7fe fffe 	bl	8005f18 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d906      	bls.n	8006f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e1ca      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
 8006f2a:	bf00      	nop
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f34:	4b8c      	ldr	r3, [pc, #560]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ea      	bne.n	8006f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80a6 	beq.w	800709c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f50:	2300      	movs	r3, #0
 8006f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f54:	4b84      	ldr	r3, [pc, #528]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_RCC_OscConfig+0x2b4>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <HAL_RCC_OscConfig+0x2b6>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00d      	beq.n	8006f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f76:	4b7c      	ldr	r3, [pc, #496]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f82:	2301      	movs	r3, #1
 8006f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f86:	4b79      	ldr	r3, [pc, #484]	@ (800716c <HAL_RCC_OscConfig+0x4bc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d118      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f92:	4b76      	ldr	r3, [pc, #472]	@ (800716c <HAL_RCC_OscConfig+0x4bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a75      	ldr	r2, [pc, #468]	@ (800716c <HAL_RCC_OscConfig+0x4bc>)
 8006f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f9e:	f7fe ffbb 	bl	8005f18 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa6:	f7fe ffb7 	bl	8005f18 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e183      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800716c <HAL_RCC_OscConfig+0x4bc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d108      	bne.n	8006fde <HAL_RCC_OscConfig+0x32e>
 8006fcc:	4b66      	ldr	r3, [pc, #408]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	4a65      	ldr	r2, [pc, #404]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006fd4:	f043 0301 	orr.w	r3, r3, #1
 8006fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fdc:	e024      	b.n	8007028 <HAL_RCC_OscConfig+0x378>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d110      	bne.n	8007008 <HAL_RCC_OscConfig+0x358>
 8006fe6:	4b60      	ldr	r3, [pc, #384]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fec:	4a5e      	ldr	r2, [pc, #376]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006fee:	f043 0304 	orr.w	r3, r3, #4
 8006ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007006:	e00f      	b.n	8007028 <HAL_RCC_OscConfig+0x378>
 8007008:	4b57      	ldr	r3, [pc, #348]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700e:	4a56      	ldr	r2, [pc, #344]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007018:	4b53      	ldr	r3, [pc, #332]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701e:	4a52      	ldr	r2, [pc, #328]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007020:	f023 0304 	bic.w	r3, r3, #4
 8007024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d016      	beq.n	800705e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007030:	f7fe ff72 	bl	8005f18 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007036:	e00a      	b.n	800704e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007038:	f7fe ff6e 	bl	8005f18 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e138      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800704e:	4b46      	ldr	r3, [pc, #280]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0ed      	beq.n	8007038 <HAL_RCC_OscConfig+0x388>
 800705c:	e015      	b.n	800708a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705e:	f7fe ff5b 	bl	8005f18 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007064:	e00a      	b.n	800707c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fe ff57 	bl	8005f18 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e121      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800707c:	4b3a      	ldr	r3, [pc, #232]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1ed      	bne.n	8007066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800708a:	7ffb      	ldrb	r3, [r7, #31]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d105      	bne.n	800709c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007090:	4b35      	ldr	r3, [pc, #212]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	4a34      	ldr	r2, [pc, #208]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800709a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d03c      	beq.n	8007122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01c      	beq.n	80070ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 80070b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c0:	f7fe ff2a 	bl	8005f18 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070c8:	f7fe ff26 	bl	8005f18 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e0f2      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070da:	4b23      	ldr	r3, [pc, #140]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 80070dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0ef      	beq.n	80070c8 <HAL_RCC_OscConfig+0x418>
 80070e8:	e01b      	b.n	8007122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 80070ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fa:	f7fe ff0d 	bl	8005f18 <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007102:	f7fe ff09 	bl	8005f18 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e0d5      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007114:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ef      	bne.n	8007102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80c9 	beq.w	80072be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800712c:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 030c 	and.w	r3, r3, #12
 8007134:	2b0c      	cmp	r3, #12
 8007136:	f000 8083 	beq.w	8007240 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d15e      	bne.n	8007200 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007142:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <HAL_RCC_OscConfig+0x4b8>)
 8007148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800714c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714e:	f7fe fee3 	bl	8005f18 <HAL_GetTick>
 8007152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007154:	e00c      	b.n	8007170 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007156:	f7fe fedf 	bl	8005f18 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d905      	bls.n	8007170 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e0ab      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
 8007168:	40021000 	.word	0x40021000
 800716c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007170:	4b55      	ldr	r3, [pc, #340]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1ec      	bne.n	8007156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717c:	4b52      	ldr	r3, [pc, #328]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	4b52      	ldr	r3, [pc, #328]	@ (80072cc <HAL_RCC_OscConfig+0x61c>)
 8007182:	4013      	ands	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6a11      	ldr	r1, [r2, #32]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800718c:	3a01      	subs	r2, #1
 800718e:	0112      	lsls	r2, r2, #4
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007196:	0212      	lsls	r2, r2, #8
 8007198:	4311      	orrs	r1, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800719e:	0852      	lsrs	r2, r2, #1
 80071a0:	3a01      	subs	r2, #1
 80071a2:	0552      	lsls	r2, r2, #21
 80071a4:	4311      	orrs	r1, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071aa:	0852      	lsrs	r2, r2, #1
 80071ac:	3a01      	subs	r2, #1
 80071ae:	0652      	lsls	r2, r2, #25
 80071b0:	4311      	orrs	r1, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071b6:	06d2      	lsls	r2, r2, #27
 80071b8:	430a      	orrs	r2, r1
 80071ba:	4943      	ldr	r1, [pc, #268]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c0:	4b41      	ldr	r3, [pc, #260]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a40      	ldr	r2, [pc, #256]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071cc:	4b3e      	ldr	r3, [pc, #248]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4a3d      	ldr	r2, [pc, #244]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fe fe9e 	bl	8005f18 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fe fe9a 	bl	8005f18 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e066      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071f2:	4b35      	ldr	r3, [pc, #212]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x530>
 80071fe:	e05e      	b.n	80072be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007200:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a30      	ldr	r2, [pc, #192]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800720a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fe fe84 	bl	8005f18 <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007214:	f7fe fe80 	bl	8005f18 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e04c      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007226:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007232:	4b25      	ldr	r3, [pc, #148]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	4924      	ldr	r1, [pc, #144]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 8007238:	4b25      	ldr	r3, [pc, #148]	@ (80072d0 <HAL_RCC_OscConfig+0x620>)
 800723a:	4013      	ands	r3, r2
 800723c:	60cb      	str	r3, [r1, #12]
 800723e:	e03e      	b.n	80072be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e039      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800724c:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <HAL_RCC_OscConfig+0x618>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 0203 	and.w	r2, r3, #3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	429a      	cmp	r2, r3
 800725e:	d12c      	bne.n	80072ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	3b01      	subs	r3, #1
 800726c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726e:	429a      	cmp	r2, r3
 8007270:	d123      	bne.n	80072ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d11b      	bne.n	80072ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800728e:	429a      	cmp	r2, r3
 8007290:	d113      	bne.n	80072ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	3b01      	subs	r3, #1
 80072a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d109      	bne.n	80072ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	3b01      	subs	r3, #1
 80072b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d001      	beq.n	80072be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40021000 	.word	0x40021000
 80072cc:	019f800c 	.word	0x019f800c
 80072d0:	feeefffc 	.word	0xfeeefffc

080072d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e11e      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072ec:	4b91      	ldr	r3, [pc, #580]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d910      	bls.n	800731c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fa:	4b8e      	ldr	r3, [pc, #568]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 020f 	bic.w	r2, r3, #15
 8007302:	498c      	ldr	r1, [pc, #560]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730a:	4b8a      	ldr	r3, [pc, #552]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e106      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d073      	beq.n	8007410 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d129      	bne.n	8007384 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007330:	4b81      	ldr	r3, [pc, #516]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0f4      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007340:	f000 f99e 	bl	8007680 <RCC_GetSysClockFreqFromPLLSource>
 8007344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4a7c      	ldr	r2, [pc, #496]	@ (800753c <HAL_RCC_ClockConfig+0x268>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d93f      	bls.n	80073ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800734e:	4b7a      	ldr	r3, [pc, #488]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007362:	2b00      	cmp	r3, #0
 8007364:	d033      	beq.n	80073ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800736a:	2b00      	cmp	r3, #0
 800736c:	d12f      	bne.n	80073ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800736e:	4b72      	ldr	r3, [pc, #456]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007376:	4a70      	ldr	r2, [pc, #448]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800737e:	2380      	movs	r3, #128	@ 0x80
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e024      	b.n	80073ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d107      	bne.n	800739c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800738c:	4b6a      	ldr	r3, [pc, #424]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e0c6      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800739c:	4b66      	ldr	r3, [pc, #408]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0be      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80073ac:	f000 f8ce 	bl	800754c <HAL_RCC_GetSysClockFreq>
 80073b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4a61      	ldr	r2, [pc, #388]	@ (800753c <HAL_RCC_ClockConfig+0x268>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d909      	bls.n	80073ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073c2:	4a5d      	ldr	r2, [pc, #372]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80073c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80073ca:	2380      	movs	r3, #128	@ 0x80
 80073cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f023 0203 	bic.w	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4957      	ldr	r1, [pc, #348]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e0:	f7fe fd9a 	bl	8005f18 <HAL_GetTick>
 80073e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e6:	e00a      	b.n	80073fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e8:	f7fe fd96 	bl	8005f18 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e095      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 020c 	and.w	r2, r3, #12
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	429a      	cmp	r2, r3
 800740e:	d1eb      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d023      	beq.n	8007464 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007428:	4b43      	ldr	r3, [pc, #268]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	4a42      	ldr	r2, [pc, #264]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800742e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007432:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007440:	4b3d      	ldr	r3, [pc, #244]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007448:	4a3b      	ldr	r2, [pc, #236]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800744a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800744e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007450:	4b39      	ldr	r3, [pc, #228]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4936      	ldr	r1, [pc, #216]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800745e:	4313      	orrs	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
 8007462:	e008      	b.n	8007476 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b80      	cmp	r3, #128	@ 0x80
 8007468:	d105      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800746a:	4b33      	ldr	r3, [pc, #204]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4a32      	ldr	r2, [pc, #200]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007474:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007476:	4b2f      	ldr	r3, [pc, #188]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d21d      	bcs.n	80074c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007484:	4b2b      	ldr	r3, [pc, #172]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f023 020f 	bic.w	r2, r3, #15
 800748c:	4929      	ldr	r1, [pc, #164]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007494:	f7fe fd40 	bl	8005f18 <HAL_GetTick>
 8007498:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749a:	e00a      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800749c:	f7fe fd3c 	bl	8005f18 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e03b      	b.n	800752a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b2:	4b20      	ldr	r3, [pc, #128]	@ (8007534 <HAL_RCC_ClockConfig+0x260>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d1ed      	bne.n	800749c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4917      	ldr	r1, [pc, #92]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ea:	4b13      	ldr	r3, [pc, #76]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	490f      	ldr	r1, [pc, #60]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074fe:	f000 f825 	bl	800754c <HAL_RCC_GetSysClockFreq>
 8007502:	4602      	mov	r2, r0
 8007504:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <HAL_RCC_ClockConfig+0x264>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	490c      	ldr	r1, [pc, #48]	@ (8007540 <HAL_RCC_ClockConfig+0x26c>)
 8007510:	5ccb      	ldrb	r3, [r1, r3]
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	fa22 f303 	lsr.w	r3, r2, r3
 800751a:	4a0a      	ldr	r2, [pc, #40]	@ (8007544 <HAL_RCC_ClockConfig+0x270>)
 800751c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800751e:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <HAL_RCC_ClockConfig+0x274>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fcac 	bl	8005e80 <HAL_InitTick>
 8007528:	4603      	mov	r3, r0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	40022000 	.word	0x40022000
 8007538:	40021000 	.word	0x40021000
 800753c:	04c4b400 	.word	0x04c4b400
 8007540:	08023578 	.word	0x08023578
 8007544:	20000230 	.word	0x20000230
 8007548:	20000234 	.word	0x20000234

0800754c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007552:	4b2c      	ldr	r3, [pc, #176]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b04      	cmp	r3, #4
 800755c:	d102      	bne.n	8007564 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800755e:	4b2a      	ldr	r3, [pc, #168]	@ (8007608 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	e047      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007564:	4b27      	ldr	r3, [pc, #156]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 030c 	and.w	r3, r3, #12
 800756c:	2b08      	cmp	r3, #8
 800756e:	d102      	bne.n	8007576 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007570:	4b26      	ldr	r3, [pc, #152]	@ (800760c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	e03e      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007576:	4b23      	ldr	r3, [pc, #140]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	2b0c      	cmp	r3, #12
 8007580:	d136      	bne.n	80075f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007582:	4b20      	ldr	r3, [pc, #128]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800758c:	4b1d      	ldr	r3, [pc, #116]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	091b      	lsrs	r3, r3, #4
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	3301      	adds	r3, #1
 8007598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b03      	cmp	r3, #3
 800759e:	d10c      	bne.n	80075ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075a0:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	4a16      	ldr	r2, [pc, #88]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075aa:	68d2      	ldr	r2, [r2, #12]
 80075ac:	0a12      	lsrs	r2, r2, #8
 80075ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	617b      	str	r3, [r7, #20]
      break;
 80075b8:	e00c      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075ba:	4a13      	ldr	r2, [pc, #76]	@ (8007608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	4a10      	ldr	r2, [pc, #64]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c4:	68d2      	ldr	r2, [r2, #12]
 80075c6:	0a12      	lsrs	r2, r2, #8
 80075c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075cc:	fb02 f303 	mul.w	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]
      break;
 80075d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	0e5b      	lsrs	r3, r3, #25
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	3301      	adds	r3, #1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	e001      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80075f4:	693b      	ldr	r3, [r7, #16]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40021000 	.word	0x40021000
 8007608:	00f42400 	.word	0x00f42400
 800760c:	016e3600 	.word	0x016e3600

08007610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007614:	4b03      	ldr	r3, [pc, #12]	@ (8007624 <HAL_RCC_GetHCLKFreq+0x14>)
 8007616:	681b      	ldr	r3, [r3, #0]
}
 8007618:	4618      	mov	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000230 	.word	0x20000230

08007628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800762c:	f7ff fff0 	bl	8007610 <HAL_RCC_GetHCLKFreq>
 8007630:	4602      	mov	r2, r0
 8007632:	4b06      	ldr	r3, [pc, #24]	@ (800764c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	4904      	ldr	r1, [pc, #16]	@ (8007650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800763e:	5ccb      	ldrb	r3, [r1, r3]
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40021000 	.word	0x40021000
 8007650:	08023588 	.word	0x08023588

08007654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007658:	f7ff ffda 	bl	8007610 <HAL_RCC_GetHCLKFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b06      	ldr	r3, [pc, #24]	@ (8007678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	0adb      	lsrs	r3, r3, #11
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4904      	ldr	r1, [pc, #16]	@ (800767c <HAL_RCC_GetPCLK2Freq+0x28>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40021000 	.word	0x40021000
 800767c:	08023588 	.word	0x08023588

08007680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007686:	4b1e      	ldr	r3, [pc, #120]	@ (8007700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007690:	4b1b      	ldr	r3, [pc, #108]	@ (8007700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d10c      	bne.n	80076be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076a4:	4a17      	ldr	r2, [pc, #92]	@ (8007704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ac:	4a14      	ldr	r2, [pc, #80]	@ (8007700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076ae:	68d2      	ldr	r2, [r2, #12]
 80076b0:	0a12      	lsrs	r2, r2, #8
 80076b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	617b      	str	r3, [r7, #20]
    break;
 80076bc:	e00c      	b.n	80076d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076be:	4a12      	ldr	r2, [pc, #72]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076c8:	68d2      	ldr	r2, [r2, #12]
 80076ca:	0a12      	lsrs	r2, r2, #8
 80076cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076d0:	fb02 f303 	mul.w	r3, r2, r3
 80076d4:	617b      	str	r3, [r7, #20]
    break;
 80076d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076d8:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	0e5b      	lsrs	r3, r3, #25
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	3301      	adds	r3, #1
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80076f2:	687b      	ldr	r3, [r7, #4]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40021000 	.word	0x40021000
 8007704:	016e3600 	.word	0x016e3600
 8007708:	00f42400 	.word	0x00f42400

0800770c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007714:	2300      	movs	r3, #0
 8007716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007718:	2300      	movs	r3, #0
 800771a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8098 	beq.w	800785a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800772a:	2300      	movs	r3, #0
 800772c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800772e:	4b43      	ldr	r3, [pc, #268]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10d      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800773a:	4b40      	ldr	r3, [pc, #256]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773e:	4a3f      	ldr	r2, [pc, #252]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007744:	6593      	str	r3, [r2, #88]	@ 0x58
 8007746:	4b3d      	ldr	r3, [pc, #244]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800774e:	60bb      	str	r3, [r7, #8]
 8007750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007752:	2301      	movs	r3, #1
 8007754:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007756:	4b3a      	ldr	r3, [pc, #232]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a39      	ldr	r2, [pc, #228]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800775c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007762:	f7fe fbd9 	bl	8005f18 <HAL_GetTick>
 8007766:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007768:	e009      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800776a:	f7fe fbd5 	bl	8005f18 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d902      	bls.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	74fb      	strb	r3, [r7, #19]
        break;
 800777c:	e005      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800777e:	4b30      	ldr	r3, [pc, #192]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0ef      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800778a:	7cfb      	ldrb	r3, [r7, #19]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d159      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007790:	4b2a      	ldr	r3, [pc, #168]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800779a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01e      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d019      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077ac:	4b23      	ldr	r3, [pc, #140]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077b8:	4b20      	ldr	r3, [pc, #128]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077c8:	4b1c      	ldr	r3, [pc, #112]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ce:	4a1b      	ldr	r2, [pc, #108]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077d8:	4a18      	ldr	r2, [pc, #96]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d016      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fe fb95 	bl	8005f18 <HAL_GetTick>
 80077ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077f0:	e00b      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f2:	f7fe fb91 	bl	8005f18 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007800:	4293      	cmp	r3, r2
 8007802:	d902      	bls.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	74fb      	strb	r3, [r7, #19]
            break;
 8007808:	e006      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800780a:	4b0c      	ldr	r3, [pc, #48]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0ec      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800781e:	4b07      	ldr	r3, [pc, #28]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	4903      	ldr	r1, [pc, #12]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007834:	e008      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007836:	7cfb      	ldrb	r3, [r7, #19]
 8007838:	74bb      	strb	r3, [r7, #18]
 800783a:	e005      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800783c:	40021000 	.word	0x40021000
 8007840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007848:	7c7b      	ldrb	r3, [r7, #17]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d105      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800784e:	4ba7      	ldr	r3, [pc, #668]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007852:	4aa6      	ldr	r2, [pc, #664]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007866:	4ba1      	ldr	r3, [pc, #644]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786c:	f023 0203 	bic.w	r2, r3, #3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	499d      	ldr	r1, [pc, #628]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007888:	4b98      	ldr	r3, [pc, #608]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788e:	f023 020c 	bic.w	r2, r3, #12
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4995      	ldr	r1, [pc, #596]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078aa:	4b90      	ldr	r3, [pc, #576]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	498c      	ldr	r1, [pc, #560]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078cc:	4b87      	ldr	r3, [pc, #540]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	4984      	ldr	r1, [pc, #528]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078ee:	4b7f      	ldr	r3, [pc, #508]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	497b      	ldr	r1, [pc, #492]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007910:	4b76      	ldr	r3, [pc, #472]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007916:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	4973      	ldr	r1, [pc, #460]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007920:	4313      	orrs	r3, r2
 8007922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007932:	4b6e      	ldr	r3, [pc, #440]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	496a      	ldr	r1, [pc, #424]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007954:	4b65      	ldr	r3, [pc, #404]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	4962      	ldr	r1, [pc, #392]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007976:	4b5d      	ldr	r3, [pc, #372]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	4959      	ldr	r1, [pc, #356]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007998:	4b54      	ldr	r3, [pc, #336]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800799a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800799e:	f023 0203 	bic.w	r2, r3, #3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a6:	4951      	ldr	r1, [pc, #324]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079ba:	4b4c      	ldr	r3, [pc, #304]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	4948      	ldr	r1, [pc, #288]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079dc:	4b43      	ldr	r3, [pc, #268]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	4940      	ldr	r1, [pc, #256]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079fa:	d105      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	4a3a      	ldr	r2, [pc, #232]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d015      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a14:	4b35      	ldr	r3, [pc, #212]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a22:	4932      	ldr	r1, [pc, #200]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a32:	d105      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a34:	4b2d      	ldr	r3, [pc, #180]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4a2c      	ldr	r2, [pc, #176]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a4c:	4b27      	ldr	r3, [pc, #156]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5a:	4924      	ldr	r1, [pc, #144]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d015      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a84:	4b19      	ldr	r3, [pc, #100]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a92:	4916      	ldr	r1, [pc, #88]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aa2:	d105      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa4:	4b11      	ldr	r3, [pc, #68]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a10      	ldr	r2, [pc, #64]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d019      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007abc:	4b0b      	ldr	r3, [pc, #44]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	4908      	ldr	r1, [pc, #32]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ada:	d109      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007adc:	4b03      	ldr	r3, [pc, #12]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a02      	ldr	r2, [pc, #8]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ae6:	60d3      	str	r3, [r2, #12]
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007aea:	bf00      	nop
 8007aec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d015      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007afc:	4b29      	ldr	r3, [pc, #164]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0a:	4926      	ldr	r1, [pc, #152]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b1c:	4b21      	ldr	r3, [pc, #132]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4a20      	ldr	r2, [pc, #128]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b34:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b42:	4918      	ldr	r1, [pc, #96]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b52:	d105      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b54:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	4a12      	ldr	r2, [pc, #72]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d015      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7a:	490a      	ldr	r1, [pc, #40]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4a04      	ldr	r2, [pc, #16]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40021000 	.word	0x40021000

08007ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e054      	b.n	8007c64 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d111      	bne.n	8007bea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f002 fb3c 	bl	800a24c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a23      	ldr	r2, [pc, #140]	@ (8007c6c <HAL_TIM_Base_Init+0xc4>)
 8007be0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f001 fc7b 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	08005971 	.word	0x08005971

08007c70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d001      	beq.n	8007c88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e04c      	b.n	8007d22 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a26      	ldr	r2, [pc, #152]	@ (8007d30 <HAL_TIM_Base_Start+0xc0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d022      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca2:	d01d      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a22      	ldr	r2, [pc, #136]	@ (8007d34 <HAL_TIM_Base_Start+0xc4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d018      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a21      	ldr	r2, [pc, #132]	@ (8007d38 <HAL_TIM_Base_Start+0xc8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8007d3c <HAL_TIM_Base_Start+0xcc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d40 <HAL_TIM_Base_Start+0xd0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d44 <HAL_TIM_Base_Start+0xd4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <HAL_TIM_Base_Start+0x70>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a1b      	ldr	r2, [pc, #108]	@ (8007d48 <HAL_TIM_Base_Start+0xd8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d115      	bne.n	8007d0c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	4b19      	ldr	r3, [pc, #100]	@ (8007d4c <HAL_TIM_Base_Start+0xdc>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d015      	beq.n	8007d1e <HAL_TIM_Base_Start+0xae>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf8:	d011      	beq.n	8007d1e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0a:	e008      	b.n	8007d1e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e000      	b.n	8007d20 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40000c00 	.word	0x40000c00
 8007d40:	40013400 	.word	0x40013400
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40015000 	.word	0x40015000
 8007d4c:	00010007 	.word	0x00010007

08007d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d001      	beq.n	8007d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e054      	b.n	8007e12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d022      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d92:	d01d      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a22      	ldr	r2, [pc, #136]	@ (8007e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d018      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a21      	ldr	r2, [pc, #132]	@ (8007e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1f      	ldr	r2, [pc, #124]	@ (8007e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00e      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e30 <HAL_TIM_Base_Start_IT+0xe0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d009      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e34 <HAL_TIM_Base_Start_IT+0xe4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d004      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x80>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1b      	ldr	r2, [pc, #108]	@ (8007e38 <HAL_TIM_Base_Start_IT+0xe8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d115      	bne.n	8007dfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	4b19      	ldr	r3, [pc, #100]	@ (8007e3c <HAL_TIM_Base_Start_IT+0xec>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b06      	cmp	r3, #6
 8007de0:	d015      	beq.n	8007e0e <HAL_TIM_Base_Start_IT+0xbe>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de8:	d011      	beq.n	8007e0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfa:	e008      	b.n	8007e0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	e000      	b.n	8007e10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40012c00 	.word	0x40012c00
 8007e24:	40000400 	.word	0x40000400
 8007e28:	40000800 	.word	0x40000800
 8007e2c:	40000c00 	.word	0x40000c00
 8007e30:	40013400 	.word	0x40013400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40015000 	.word	0x40015000
 8007e3c:	00010007 	.word	0x00010007

08007e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e054      	b.n	8007efc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d111      	bne.n	8007e82 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f002 f9f0 	bl	800a24c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a23      	ldr	r2, [pc, #140]	@ (8007f04 <HAL_TIM_PWM_Init+0xc4>)
 8007e78:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	4610      	mov	r0, r2
 8007e96:	f001 fb2f 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08007f09 	.word	0x08007f09

08007f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_TIM_PWM_Start+0x24>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	bf14      	ite	ne
 8007f38:	2301      	movne	r3, #1
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e03c      	b.n	8007fba <HAL_TIM_PWM_Start+0x9e>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d109      	bne.n	8007f5a <HAL_TIM_PWM_Start+0x3e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	bf14      	ite	ne
 8007f52:	2301      	movne	r3, #1
 8007f54:	2300      	moveq	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e02f      	b.n	8007fba <HAL_TIM_PWM_Start+0x9e>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d109      	bne.n	8007f74 <HAL_TIM_PWM_Start+0x58>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	bf14      	ite	ne
 8007f6c:	2301      	movne	r3, #1
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	e022      	b.n	8007fba <HAL_TIM_PWM_Start+0x9e>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b0c      	cmp	r3, #12
 8007f78:	d109      	bne.n	8007f8e <HAL_TIM_PWM_Start+0x72>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	bf14      	ite	ne
 8007f86:	2301      	movne	r3, #1
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	e015      	b.n	8007fba <HAL_TIM_PWM_Start+0x9e>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b10      	cmp	r3, #16
 8007f92:	d109      	bne.n	8007fa8 <HAL_TIM_PWM_Start+0x8c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	e008      	b.n	8007fba <HAL_TIM_PWM_Start+0x9e>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e0a6      	b.n	8008110 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <HAL_TIM_PWM_Start+0xb6>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fd0:	e023      	b.n	800801a <HAL_TIM_PWM_Start+0xfe>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d104      	bne.n	8007fe2 <HAL_TIM_PWM_Start+0xc6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fe0:	e01b      	b.n	800801a <HAL_TIM_PWM_Start+0xfe>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d104      	bne.n	8007ff2 <HAL_TIM_PWM_Start+0xd6>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ff0:	e013      	b.n	800801a <HAL_TIM_PWM_Start+0xfe>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b0c      	cmp	r3, #12
 8007ff6:	d104      	bne.n	8008002 <HAL_TIM_PWM_Start+0xe6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008000:	e00b      	b.n	800801a <HAL_TIM_PWM_Start+0xfe>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b10      	cmp	r3, #16
 8008006:	d104      	bne.n	8008012 <HAL_TIM_PWM_Start+0xf6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008010:	e003      	b.n	800801a <HAL_TIM_PWM_Start+0xfe>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f002 f8ec 	bl	800a200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a3a      	ldr	r2, [pc, #232]	@ (8008118 <HAL_TIM_PWM_Start+0x1fc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d018      	beq.n	8008064 <HAL_TIM_PWM_Start+0x148>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a39      	ldr	r2, [pc, #228]	@ (800811c <HAL_TIM_PWM_Start+0x200>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d013      	beq.n	8008064 <HAL_TIM_PWM_Start+0x148>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a37      	ldr	r2, [pc, #220]	@ (8008120 <HAL_TIM_PWM_Start+0x204>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00e      	beq.n	8008064 <HAL_TIM_PWM_Start+0x148>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a36      	ldr	r2, [pc, #216]	@ (8008124 <HAL_TIM_PWM_Start+0x208>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d009      	beq.n	8008064 <HAL_TIM_PWM_Start+0x148>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a34      	ldr	r2, [pc, #208]	@ (8008128 <HAL_TIM_PWM_Start+0x20c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIM_PWM_Start+0x148>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a33      	ldr	r2, [pc, #204]	@ (800812c <HAL_TIM_PWM_Start+0x210>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d101      	bne.n	8008068 <HAL_TIM_PWM_Start+0x14c>
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <HAL_TIM_PWM_Start+0x14e>
 8008068:	2300      	movs	r3, #0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800807c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a25      	ldr	r2, [pc, #148]	@ (8008118 <HAL_TIM_PWM_Start+0x1fc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d022      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008090:	d01d      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a26      	ldr	r2, [pc, #152]	@ (8008130 <HAL_TIM_PWM_Start+0x214>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d018      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a24      	ldr	r2, [pc, #144]	@ (8008134 <HAL_TIM_PWM_Start+0x218>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a23      	ldr	r2, [pc, #140]	@ (8008138 <HAL_TIM_PWM_Start+0x21c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00e      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a19      	ldr	r2, [pc, #100]	@ (800811c <HAL_TIM_PWM_Start+0x200>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a18      	ldr	r2, [pc, #96]	@ (8008120 <HAL_TIM_PWM_Start+0x204>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_PWM_Start+0x1b2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	@ (800812c <HAL_TIM_PWM_Start+0x210>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d115      	bne.n	80080fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	4b19      	ldr	r3, [pc, #100]	@ (800813c <HAL_TIM_PWM_Start+0x220>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b06      	cmp	r3, #6
 80080de:	d015      	beq.n	800810c <HAL_TIM_PWM_Start+0x1f0>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e6:	d011      	beq.n	800810c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f8:	e008      	b.n	800810c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e000      	b.n	800810e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40012c00 	.word	0x40012c00
 800811c:	40013400 	.word	0x40013400
 8008120:	40014000 	.word	0x40014000
 8008124:	40014400 	.word	0x40014400
 8008128:	40014800 	.word	0x40014800
 800812c:	40015000 	.word	0x40015000
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	00010007 	.word	0x00010007

08008140 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e054      	b.n	80081fc <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d111      	bne.n	8008182 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f002 f870 	bl	800a24c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a23      	ldr	r2, [pc, #140]	@ (8008204 <HAL_TIM_IC_Init+0xc4>)
 8008178:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3304      	adds	r3, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f001 f9af 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	08005771 	.word	0x08005771

08008208 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_IC_Start+0x1a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800821e:	b2db      	uxtb	r3, r3
 8008220:	e023      	b.n	800826a <HAL_TIM_IC_Start+0x62>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_IC_Start+0x2a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800822e:	b2db      	uxtb	r3, r3
 8008230:	e01b      	b.n	800826a <HAL_TIM_IC_Start+0x62>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_IC_Start+0x3a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e013      	b.n	800826a <HAL_TIM_IC_Start+0x62>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d104      	bne.n	8008252 <HAL_TIM_IC_Start+0x4a>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e00b      	b.n	800826a <HAL_TIM_IC_Start+0x62>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b10      	cmp	r3, #16
 8008256:	d104      	bne.n	8008262 <HAL_TIM_IC_Start+0x5a>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800825e:	b2db      	uxtb	r3, r3
 8008260:	e003      	b.n	800826a <HAL_TIM_IC_Start+0x62>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008268:	b2db      	uxtb	r3, r3
 800826a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <HAL_TIM_IC_Start+0x74>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008278:	b2db      	uxtb	r3, r3
 800827a:	e013      	b.n	80082a4 <HAL_TIM_IC_Start+0x9c>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d104      	bne.n	800828c <HAL_TIM_IC_Start+0x84>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008288:	b2db      	uxtb	r3, r3
 800828a:	e00b      	b.n	80082a4 <HAL_TIM_IC_Start+0x9c>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b08      	cmp	r3, #8
 8008290:	d104      	bne.n	800829c <HAL_TIM_IC_Start+0x94>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008298:	b2db      	uxtb	r3, r3
 800829a:	e003      	b.n	80082a4 <HAL_TIM_IC_Start+0x9c>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d102      	bne.n	80082b2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d001      	beq.n	80082b6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e097      	b.n	80083e6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <HAL_TIM_IC_Start+0xbe>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082c4:	e023      	b.n	800830e <HAL_TIM_IC_Start+0x106>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d104      	bne.n	80082d6 <HAL_TIM_IC_Start+0xce>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082d4:	e01b      	b.n	800830e <HAL_TIM_IC_Start+0x106>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d104      	bne.n	80082e6 <HAL_TIM_IC_Start+0xde>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082e4:	e013      	b.n	800830e <HAL_TIM_IC_Start+0x106>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b0c      	cmp	r3, #12
 80082ea:	d104      	bne.n	80082f6 <HAL_TIM_IC_Start+0xee>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082f4:	e00b      	b.n	800830e <HAL_TIM_IC_Start+0x106>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d104      	bne.n	8008306 <HAL_TIM_IC_Start+0xfe>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008304:	e003      	b.n	800830e <HAL_TIM_IC_Start+0x106>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <HAL_TIM_IC_Start+0x116>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831c:	e013      	b.n	8008346 <HAL_TIM_IC_Start+0x13e>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b04      	cmp	r3, #4
 8008322:	d104      	bne.n	800832e <HAL_TIM_IC_Start+0x126>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800832c:	e00b      	b.n	8008346 <HAL_TIM_IC_Start+0x13e>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b08      	cmp	r3, #8
 8008332:	d104      	bne.n	800833e <HAL_TIM_IC_Start+0x136>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800833c:	e003      	b.n	8008346 <HAL_TIM_IC_Start+0x13e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2201      	movs	r2, #1
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f001 ff56 	bl	800a200 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a25      	ldr	r2, [pc, #148]	@ (80083f0 <HAL_TIM_IC_Start+0x1e8>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d022      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008366:	d01d      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a21      	ldr	r2, [pc, #132]	@ (80083f4 <HAL_TIM_IC_Start+0x1ec>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d018      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a20      	ldr	r2, [pc, #128]	@ (80083f8 <HAL_TIM_IC_Start+0x1f0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1e      	ldr	r2, [pc, #120]	@ (80083fc <HAL_TIM_IC_Start+0x1f4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1d      	ldr	r2, [pc, #116]	@ (8008400 <HAL_TIM_IC_Start+0x1f8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1b      	ldr	r2, [pc, #108]	@ (8008404 <HAL_TIM_IC_Start+0x1fc>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_IC_Start+0x19c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a1a      	ldr	r2, [pc, #104]	@ (8008408 <HAL_TIM_IC_Start+0x200>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d115      	bne.n	80083d0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	4b18      	ldr	r3, [pc, #96]	@ (800840c <HAL_TIM_IC_Start+0x204>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d015      	beq.n	80083e2 <HAL_TIM_IC_Start+0x1da>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083bc:	d011      	beq.n	80083e2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	e008      	b.n	80083e2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	e000      	b.n	80083e4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	40012c00 	.word	0x40012c00
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40000c00 	.word	0x40000c00
 8008400:	40013400 	.word	0x40013400
 8008404:	40014000 	.word	0x40014000
 8008408:	40015000 	.word	0x40015000
 800840c:	00010007 	.word	0x00010007

08008410 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e04c      	b.n	80084be <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d111      	bne.n	8008454 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 ff07 	bl	800a24c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a1f      	ldr	r2, [pc, #124]	@ (80084c8 <HAL_TIM_OnePulse_Init+0xb8>)
 800844a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f001 f846 	bl	80094f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0208 	bic.w	r2, r2, #8
 800847a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6819      	ldr	r1, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	080084cd 	.word	0x080084cd

080084cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008500:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008508:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d108      	bne.n	8008522 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d105      	bne.n	8008522 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008516:	7b7b      	ldrb	r3, [r7, #13]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800851c:	7b3b      	ldrb	r3, [r7, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d001      	beq.n	8008526 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e059      	b.n	80085da <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0202 	orr.w	r2, r2, #2
 8008554:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0204 	orr.w	r2, r2, #4
 8008564:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fe46 	bl	800a200 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	2104      	movs	r1, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f001 fe3f 	bl	800a200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a17      	ldr	r2, [pc, #92]	@ (80085e4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <HAL_TIM_OnePulse_Start_IT+0xde>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <HAL_TIM_OnePulse_Start_IT+0xde>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a14      	ldr	r2, [pc, #80]	@ (80085ec <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_TIM_OnePulse_Start_IT+0xde>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a12      	ldr	r2, [pc, #72]	@ (80085f0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_TIM_OnePulse_Start_IT+0xde>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a11      	ldr	r2, [pc, #68]	@ (80085f4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_TIM_OnePulse_Start_IT+0xde>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a0f      	ldr	r2, [pc, #60]	@ (80085f8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d101      	bne.n	80085c2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80085c2:	2300      	movs	r3, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40013400 	.word	0x40013400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800
 80085f8:	40015000 	.word	0x40015000

080085fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0a2      	b.n	8008756 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d111      	bne.n	8008640 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fe11 	bl	800a24c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a4a      	ldr	r2, [pc, #296]	@ (8008760 <HAL_TIM_Encoder_Init+0x164>)
 8008636:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6812      	ldr	r2, [r2, #0]
 8008652:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f000 ff46 	bl	80094f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008694:	f023 0303 	bic.w	r3, r3, #3
 8008698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	4313      	orrs	r3, r2
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80086b2:	f023 030c 	bic.w	r3, r3, #12
 80086b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	4313      	orrs	r3, r2
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	011a      	lsls	r2, r3, #4
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	031b      	lsls	r3, r3, #12
 80086e2:	4313      	orrs	r3, r2
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80086f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80086f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	4313      	orrs	r3, r2
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08005865 	.word	0x08005865

08008764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008774:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800877c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008784:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800878c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d110      	bne.n	80087b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d102      	bne.n	80087a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800879a:	7b7b      	ldrb	r3, [r7, #13]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d001      	beq.n	80087a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e069      	b.n	8008878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b4:	e031      	b.n	800881a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d110      	bne.n	80087de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d102      	bne.n	80087c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087c2:	7b3b      	ldrb	r3, [r7, #12]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d001      	beq.n	80087cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e055      	b.n	8008878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087dc:	e01d      	b.n	800881a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d108      	bne.n	80087f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d105      	bne.n	80087f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ea:	7b7b      	ldrb	r3, [r7, #13]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d102      	bne.n	80087f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087f0:	7b3b      	ldrb	r3, [r7, #12]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d001      	beq.n	80087fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e03e      	b.n	8008878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2202      	movs	r2, #2
 800880e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2202      	movs	r2, #2
 8008816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_TIM_Encoder_Start+0xc4>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b04      	cmp	r3, #4
 8008824:	d008      	beq.n	8008838 <HAL_TIM_Encoder_Start+0xd4>
 8008826:	e00f      	b.n	8008848 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2201      	movs	r2, #1
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fce5 	bl	800a200 <TIM_CCxChannelCmd>
      break;
 8008836:	e016      	b.n	8008866 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	2104      	movs	r1, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fcdd 	bl	800a200 <TIM_CCxChannelCmd>
      break;
 8008846:	e00e      	b.n	8008866 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2201      	movs	r2, #1
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fcd5 	bl	800a200 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2201      	movs	r2, #1
 800885c:	2104      	movs	r1, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f001 fcce 	bl	800a200 <TIM_CCxChannelCmd>
      break;
 8008864:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0201 	orr.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d026      	beq.n	80088f0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d021      	beq.n	80088f0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0202 	mvn.w	r2, #2
 80088b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
 80088d4:	e009      	b.n	80088ea <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d026      	beq.n	8008948 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d021      	beq.n	8008948 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0204 	mvn.w	r2, #4
 800890c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
 800892c:	e009      	b.n	8008942 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d026      	beq.n	80089a0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b00      	cmp	r3, #0
 800895a:	d021      	beq.n	80089a0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0208 	mvn.w	r2, #8
 8008964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2204      	movs	r2, #4
 800896a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	e009      	b.n	800899a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d026      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d021      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f06f 0210 	mvn.w	r2, #16
 80089bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2208      	movs	r2, #8
 80089c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
 80089dc:	e009      	b.n	80089f2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0201 	mvn.w	r2, #1
 8008a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00e      	beq.n	8008a52 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00e      	beq.n	8008aca <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d009      	beq.n	8008aca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f06f 0220 	mvn.w	r2, #32
 8008abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00e      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e088      	b.n	8008ca2 <HAL_TIM_IC_ConfigChannel+0x130>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d11b      	bne.n	8008bd6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008bae:	f001 f961 	bl	8009e74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 020c 	bic.w	r2, r2, #12
 8008bc0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6999      	ldr	r1, [r3, #24]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	619a      	str	r2, [r3, #24]
 8008bd4:	e060      	b.n	8008c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d11c      	bne.n	8008c16 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008bec:	f001 f9e5 	bl	8009fba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6999      	ldr	r1, [r3, #24]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	021a      	lsls	r2, r3, #8
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	619a      	str	r2, [r3, #24]
 8008c14:	e040      	b.n	8008c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d11b      	bne.n	8008c54 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008c2c:	f001 fa32 	bl	800a094 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69da      	ldr	r2, [r3, #28]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 020c 	bic.w	r2, r2, #12
 8008c3e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69d9      	ldr	r1, [r3, #28]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	61da      	str	r2, [r3, #28]
 8008c52:	e021      	b.n	8008c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b0c      	cmp	r3, #12
 8008c58:	d11c      	bne.n	8008c94 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008c6a:	f001 fa4f 	bl	800a10c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69da      	ldr	r2, [r3, #28]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69d9      	ldr	r1, [r3, #28]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	021a      	lsls	r2, r3, #8
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	61da      	str	r2, [r3, #28]
 8008c92:	e001      	b.n	8008c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e0ff      	b.n	8008eca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b14      	cmp	r3, #20
 8008cd6:	f200 80f0 	bhi.w	8008eba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008cda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d35 	.word	0x08008d35
 8008ce4:	08008ebb 	.word	0x08008ebb
 8008ce8:	08008ebb 	.word	0x08008ebb
 8008cec:	08008ebb 	.word	0x08008ebb
 8008cf0:	08008d75 	.word	0x08008d75
 8008cf4:	08008ebb 	.word	0x08008ebb
 8008cf8:	08008ebb 	.word	0x08008ebb
 8008cfc:	08008ebb 	.word	0x08008ebb
 8008d00:	08008db7 	.word	0x08008db7
 8008d04:	08008ebb 	.word	0x08008ebb
 8008d08:	08008ebb 	.word	0x08008ebb
 8008d0c:	08008ebb 	.word	0x08008ebb
 8008d10:	08008df7 	.word	0x08008df7
 8008d14:	08008ebb 	.word	0x08008ebb
 8008d18:	08008ebb 	.word	0x08008ebb
 8008d1c:	08008ebb 	.word	0x08008ebb
 8008d20:	08008e39 	.word	0x08008e39
 8008d24:	08008ebb 	.word	0x08008ebb
 8008d28:	08008ebb 	.word	0x08008ebb
 8008d2c:	08008ebb 	.word	0x08008ebb
 8008d30:	08008e79 	.word	0x08008e79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fc90 	bl	8009660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699a      	ldr	r2, [r3, #24]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0208 	orr.w	r2, r2, #8
 8008d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0204 	bic.w	r2, r2, #4
 8008d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6999      	ldr	r1, [r3, #24]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	619a      	str	r2, [r3, #24]
      break;
 8008d72:	e0a5      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fd0a 	bl	8009794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699a      	ldr	r2, [r3, #24]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6999      	ldr	r1, [r3, #24]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	021a      	lsls	r2, r3, #8
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	619a      	str	r2, [r3, #24]
      break;
 8008db4:	e084      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fd7d 	bl	80098bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69da      	ldr	r2, [r3, #28]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f042 0208 	orr.w	r2, r2, #8
 8008dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0204 	bic.w	r2, r2, #4
 8008de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69d9      	ldr	r1, [r3, #28]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	61da      	str	r2, [r3, #28]
      break;
 8008df4:	e064      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fdef 	bl	80099e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69da      	ldr	r2, [r3, #28]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69da      	ldr	r2, [r3, #28]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69d9      	ldr	r1, [r3, #28]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	021a      	lsls	r2, r3, #8
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	61da      	str	r2, [r3, #28]
      break;
 8008e36:	e043      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fe62 	bl	8009b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0208 	orr.w	r2, r2, #8
 8008e52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0204 	bic.w	r2, r2, #4
 8008e62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008e76:	e023      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 feac 	bl	8009bdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ea2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	021a      	lsls	r2, r3, #8
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008eb8:	e002      	b.n	8008ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ebe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop

08008ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e0f6      	b.n	80090de <HAL_TIM_ConfigClockSource+0x20a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a6f      	ldr	r2, [pc, #444]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x214>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	f000 80c1 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f30:	4a6d      	ldr	r2, [pc, #436]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x214>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	f200 80c6 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f38:	4a6c      	ldr	r2, [pc, #432]	@ (80090ec <HAL_TIM_ConfigClockSource+0x218>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f000 80b9 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f40:	4a6a      	ldr	r2, [pc, #424]	@ (80090ec <HAL_TIM_ConfigClockSource+0x218>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f200 80be 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f48:	4a69      	ldr	r2, [pc, #420]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f000 80b1 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f50:	4a67      	ldr	r2, [pc, #412]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f200 80b6 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f58:	4a66      	ldr	r2, [pc, #408]	@ (80090f4 <HAL_TIM_ConfigClockSource+0x220>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f000 80a9 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f60:	4a64      	ldr	r2, [pc, #400]	@ (80090f4 <HAL_TIM_ConfigClockSource+0x220>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	f200 80ae 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f68:	4a63      	ldr	r2, [pc, #396]	@ (80090f8 <HAL_TIM_ConfigClockSource+0x224>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	f000 80a1 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f70:	4a61      	ldr	r2, [pc, #388]	@ (80090f8 <HAL_TIM_ConfigClockSource+0x224>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	f200 80a6 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f78:	4a60      	ldr	r2, [pc, #384]	@ (80090fc <HAL_TIM_ConfigClockSource+0x228>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	f000 8099 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f80:	4a5e      	ldr	r2, [pc, #376]	@ (80090fc <HAL_TIM_ConfigClockSource+0x228>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	f200 809e 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008f8c:	f000 8091 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008f90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008f94:	f200 8096 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f9c:	f000 8089 	beq.w	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fa4:	f200 808e 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fac:	d03e      	beq.n	800902c <HAL_TIM_ConfigClockSource+0x158>
 8008fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fb2:	f200 8087 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fba:	f000 8086 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x1f6>
 8008fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc2:	d87f      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc4:	2b70      	cmp	r3, #112	@ 0x70
 8008fc6:	d01a      	beq.n	8008ffe <HAL_TIM_ConfigClockSource+0x12a>
 8008fc8:	2b70      	cmp	r3, #112	@ 0x70
 8008fca:	d87b      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fcc:	2b60      	cmp	r3, #96	@ 0x60
 8008fce:	d050      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x19e>
 8008fd0:	2b60      	cmp	r3, #96	@ 0x60
 8008fd2:	d877      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd4:	2b50      	cmp	r3, #80	@ 0x50
 8008fd6:	d03c      	beq.n	8009052 <HAL_TIM_ConfigClockSource+0x17e>
 8008fd8:	2b50      	cmp	r3, #80	@ 0x50
 8008fda:	d873      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fdc:	2b40      	cmp	r3, #64	@ 0x40
 8008fde:	d058      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0x1be>
 8008fe0:	2b40      	cmp	r3, #64	@ 0x40
 8008fe2:	d86f      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe4:	2b30      	cmp	r3, #48	@ 0x30
 8008fe6:	d064      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008fe8:	2b30      	cmp	r3, #48	@ 0x30
 8008fea:	d86b      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d060      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d867      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d05c      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d05a      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008ffc:	e062      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800900e:	f001 f8d7 	bl	800a1c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	609a      	str	r2, [r3, #8]
      break;
 800902a:	e04f      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800903c:	f001 f8c0 	bl	800a1c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800904e:	609a      	str	r2, [r3, #8]
      break;
 8009050:	e03c      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800905e:	461a      	mov	r2, r3
 8009060:	f000 ff7c 	bl	8009f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2150      	movs	r1, #80	@ 0x50
 800906a:	4618      	mov	r0, r3
 800906c:	f001 f88b 	bl	800a186 <TIM_ITRx_SetConfig>
      break;
 8009070:	e02c      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800907e:	461a      	mov	r2, r3
 8009080:	f000 ffd8 	bl	800a034 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2160      	movs	r1, #96	@ 0x60
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f87b 	bl	800a186 <TIM_ITRx_SetConfig>
      break;
 8009090:	e01c      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800909e:	461a      	mov	r2, r3
 80090a0:	f000 ff5c 	bl	8009f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2140      	movs	r1, #64	@ 0x40
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f86b 	bl	800a186 <TIM_ITRx_SetConfig>
      break;
 80090b0:	e00c      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f001 f862 	bl	800a186 <TIM_ITRx_SetConfig>
      break;
 80090c2:	e003      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
      break;
 80090c8:	e000      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80090ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	00100070 	.word	0x00100070
 80090ec:	00100060 	.word	0x00100060
 80090f0:	00100050 	.word	0x00100050
 80090f4:	00100040 	.word	0x00100040
 80090f8:	00100030 	.word	0x00100030
 80090fc:	00100020 	.word	0x00100020

08009100 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009114:	2302      	movs	r3, #2
 8009116:	e031      	b.n	800917c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fdc2 	bl	8009cb4 <TIM_SlaveTimer_SetConfig>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e018      	b.n	800917c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009158:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009168:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	460b      	mov	r3, r1
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e14a      	b.n	80094ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 80dd 	bne.w	800941c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	2b1f      	cmp	r3, #31
 8009266:	f200 80d6 	bhi.w	8009416 <HAL_TIM_RegisterCallback+0x1de>
 800926a:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <HAL_TIM_RegisterCallback+0x38>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092f1 	.word	0x080092f1
 8009274:	080092f9 	.word	0x080092f9
 8009278:	08009301 	.word	0x08009301
 800927c:	08009309 	.word	0x08009309
 8009280:	08009311 	.word	0x08009311
 8009284:	08009319 	.word	0x08009319
 8009288:	08009321 	.word	0x08009321
 800928c:	08009329 	.word	0x08009329
 8009290:	08009331 	.word	0x08009331
 8009294:	08009339 	.word	0x08009339
 8009298:	08009341 	.word	0x08009341
 800929c:	08009349 	.word	0x08009349
 80092a0:	08009351 	.word	0x08009351
 80092a4:	08009359 	.word	0x08009359
 80092a8:	08009363 	.word	0x08009363
 80092ac:	0800936d 	.word	0x0800936d
 80092b0:	08009377 	.word	0x08009377
 80092b4:	08009381 	.word	0x08009381
 80092b8:	0800938b 	.word	0x0800938b
 80092bc:	08009395 	.word	0x08009395
 80092c0:	0800939f 	.word	0x0800939f
 80092c4:	080093a9 	.word	0x080093a9
 80092c8:	080093b3 	.word	0x080093b3
 80092cc:	080093bd 	.word	0x080093bd
 80092d0:	080093c7 	.word	0x080093c7
 80092d4:	080093d1 	.word	0x080093d1
 80092d8:	080093db 	.word	0x080093db
 80092dc:	080093e5 	.word	0x080093e5
 80092e0:	080093ef 	.word	0x080093ef
 80092e4:	080093f9 	.word	0x080093f9
 80092e8:	08009403 	.word	0x08009403
 80092ec:	0800940d 	.word	0x0800940d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80092f6:	e0f7      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80092fe:	e0f3      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009306:	e0ef      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800930e:	e0eb      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009316:	e0e7      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800931e:	e0e3      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009326:	e0df      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800932e:	e0db      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009336:	e0d7      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800933e:	e0d3      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009346:	e0cf      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800934e:	e0cb      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009356:	e0c7      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009360:	e0c2      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800936a:	e0bd      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009374:	e0b8      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800937e:	e0b3      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009388:	e0ae      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009392:	e0a9      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800939c:	e0a4      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80093a6:	e09f      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80093b0:	e09a      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80093ba:	e095      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80093c4:	e090      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093ce:	e08b      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093d8:	e086      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093e2:	e081      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80093ec:	e07c      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80093f6:	e077      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009400:	e072      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800940a:	e06d      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009414:	e068      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	75fb      	strb	r3, [r7, #23]
        break;
 800941a:	e065      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d15d      	bne.n	80094e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	2b0d      	cmp	r3, #13
 800942c:	d857      	bhi.n	80094de <HAL_TIM_RegisterCallback+0x2a6>
 800942e:	a201      	add	r2, pc, #4	@ (adr r2, 8009434 <HAL_TIM_RegisterCallback+0x1fc>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	0800946d 	.word	0x0800946d
 8009438:	08009475 	.word	0x08009475
 800943c:	0800947d 	.word	0x0800947d
 8009440:	08009485 	.word	0x08009485
 8009444:	0800948d 	.word	0x0800948d
 8009448:	08009495 	.word	0x08009495
 800944c:	0800949d 	.word	0x0800949d
 8009450:	080094a5 	.word	0x080094a5
 8009454:	080094ad 	.word	0x080094ad
 8009458:	080094b5 	.word	0x080094b5
 800945c:	080094bd 	.word	0x080094bd
 8009460:	080094c5 	.word	0x080094c5
 8009464:	080094cd 	.word	0x080094cd
 8009468:	080094d5 	.word	0x080094d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009472:	e039      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800947a:	e035      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009482:	e031      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800948a:	e02d      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009492:	e029      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800949a:	e025      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80094a2:	e021      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80094aa:	e01d      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80094b2:	e019      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80094ba:	e015      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80094c2:	e011      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80094ca:	e00d      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80094d2:	e009      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80094dc:	e004      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
        break;
 80094e2:	e001      	b.n	80094e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a4c      	ldr	r2, [pc, #304]	@ (800963c <TIM_Base_SetConfig+0x144>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d017      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009516:	d013      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a49      	ldr	r2, [pc, #292]	@ (8009640 <TIM_Base_SetConfig+0x148>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00f      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a48      	ldr	r2, [pc, #288]	@ (8009644 <TIM_Base_SetConfig+0x14c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a47      	ldr	r2, [pc, #284]	@ (8009648 <TIM_Base_SetConfig+0x150>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a46      	ldr	r2, [pc, #280]	@ (800964c <TIM_Base_SetConfig+0x154>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_Base_SetConfig+0x48>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a45      	ldr	r2, [pc, #276]	@ (8009650 <TIM_Base_SetConfig+0x158>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d108      	bne.n	8009552 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a39      	ldr	r2, [pc, #228]	@ (800963c <TIM_Base_SetConfig+0x144>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d023      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009560:	d01f      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a36      	ldr	r2, [pc, #216]	@ (8009640 <TIM_Base_SetConfig+0x148>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d01b      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a35      	ldr	r2, [pc, #212]	@ (8009644 <TIM_Base_SetConfig+0x14c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d017      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a34      	ldr	r2, [pc, #208]	@ (8009648 <TIM_Base_SetConfig+0x150>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d013      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a33      	ldr	r2, [pc, #204]	@ (800964c <TIM_Base_SetConfig+0x154>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00f      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a33      	ldr	r2, [pc, #204]	@ (8009654 <TIM_Base_SetConfig+0x15c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d00b      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a32      	ldr	r2, [pc, #200]	@ (8009658 <TIM_Base_SetConfig+0x160>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d007      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a31      	ldr	r2, [pc, #196]	@ (800965c <TIM_Base_SetConfig+0x164>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d003      	beq.n	80095a2 <TIM_Base_SetConfig+0xaa>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a2c      	ldr	r2, [pc, #176]	@ (8009650 <TIM_Base_SetConfig+0x158>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d108      	bne.n	80095b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a18      	ldr	r2, [pc, #96]	@ (800963c <TIM_Base_SetConfig+0x144>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <TIM_Base_SetConfig+0x110>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a1a      	ldr	r2, [pc, #104]	@ (800964c <TIM_Base_SetConfig+0x154>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00f      	beq.n	8009608 <TIM_Base_SetConfig+0x110>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009654 <TIM_Base_SetConfig+0x15c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00b      	beq.n	8009608 <TIM_Base_SetConfig+0x110>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <TIM_Base_SetConfig+0x160>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d007      	beq.n	8009608 <TIM_Base_SetConfig+0x110>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a18      	ldr	r2, [pc, #96]	@ (800965c <TIM_Base_SetConfig+0x164>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_Base_SetConfig+0x110>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a13      	ldr	r2, [pc, #76]	@ (8009650 <TIM_Base_SetConfig+0x158>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d103      	bne.n	8009610 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b01      	cmp	r3, #1
 8009620:	d105      	bne.n	800962e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f023 0201 	bic.w	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	611a      	str	r2, [r3, #16]
  }
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40012c00 	.word	0x40012c00
 8009640:	40000400 	.word	0x40000400
 8009644:	40000800 	.word	0x40000800
 8009648:	40000c00 	.word	0x40000c00
 800964c:	40013400 	.word	0x40013400
 8009650:	40015000 	.word	0x40015000
 8009654:	40014000 	.word	0x40014000
 8009658:	40014400 	.word	0x40014400
 800965c:	40014800 	.word	0x40014800

08009660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	f023 0201 	bic.w	r2, r3, #1
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800968e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0303 	bic.w	r3, r3, #3
 800969a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f023 0302 	bic.w	r3, r3, #2
 80096ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a30      	ldr	r2, [pc, #192]	@ (800977c <TIM_OC1_SetConfig+0x11c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d013      	beq.n	80096e8 <TIM_OC1_SetConfig+0x88>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009780 <TIM_OC1_SetConfig+0x120>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00f      	beq.n	80096e8 <TIM_OC1_SetConfig+0x88>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009784 <TIM_OC1_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00b      	beq.n	80096e8 <TIM_OC1_SetConfig+0x88>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a2d      	ldr	r2, [pc, #180]	@ (8009788 <TIM_OC1_SetConfig+0x128>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d007      	beq.n	80096e8 <TIM_OC1_SetConfig+0x88>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a2c      	ldr	r2, [pc, #176]	@ (800978c <TIM_OC1_SetConfig+0x12c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d003      	beq.n	80096e8 <TIM_OC1_SetConfig+0x88>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009790 <TIM_OC1_SetConfig+0x130>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d10c      	bne.n	8009702 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0308 	bic.w	r3, r3, #8
 80096ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f023 0304 	bic.w	r3, r3, #4
 8009700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1d      	ldr	r2, [pc, #116]	@ (800977c <TIM_OC1_SetConfig+0x11c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_OC1_SetConfig+0xd2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a1c      	ldr	r2, [pc, #112]	@ (8009780 <TIM_OC1_SetConfig+0x120>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_OC1_SetConfig+0xd2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1b      	ldr	r2, [pc, #108]	@ (8009784 <TIM_OC1_SetConfig+0x124>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_OC1_SetConfig+0xd2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1a      	ldr	r2, [pc, #104]	@ (8009788 <TIM_OC1_SetConfig+0x128>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_OC1_SetConfig+0xd2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a19      	ldr	r2, [pc, #100]	@ (800978c <TIM_OC1_SetConfig+0x12c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_OC1_SetConfig+0xd2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a18      	ldr	r2, [pc, #96]	@ (8009790 <TIM_OC1_SetConfig+0x130>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d111      	bne.n	8009756 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	621a      	str	r2, [r3, #32]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40012c00 	.word	0x40012c00
 8009780:	40013400 	.word	0x40013400
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800
 8009790:	40015000 	.word	0x40015000

08009794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	f023 0210 	bic.w	r2, r3, #16
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f023 0320 	bic.w	r3, r3, #32
 80097e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a2c      	ldr	r2, [pc, #176]	@ (80098a4 <TIM_OC2_SetConfig+0x110>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d007      	beq.n	8009808 <TIM_OC2_SetConfig+0x74>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a2b      	ldr	r2, [pc, #172]	@ (80098a8 <TIM_OC2_SetConfig+0x114>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_OC2_SetConfig+0x74>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a2a      	ldr	r2, [pc, #168]	@ (80098ac <TIM_OC2_SetConfig+0x118>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d10d      	bne.n	8009824 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800980e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009822:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a1f      	ldr	r2, [pc, #124]	@ (80098a4 <TIM_OC2_SetConfig+0x110>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d013      	beq.n	8009854 <TIM_OC2_SetConfig+0xc0>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a1e      	ldr	r2, [pc, #120]	@ (80098a8 <TIM_OC2_SetConfig+0x114>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d00f      	beq.n	8009854 <TIM_OC2_SetConfig+0xc0>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a1e      	ldr	r2, [pc, #120]	@ (80098b0 <TIM_OC2_SetConfig+0x11c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d00b      	beq.n	8009854 <TIM_OC2_SetConfig+0xc0>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a1d      	ldr	r2, [pc, #116]	@ (80098b4 <TIM_OC2_SetConfig+0x120>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d007      	beq.n	8009854 <TIM_OC2_SetConfig+0xc0>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a1c      	ldr	r2, [pc, #112]	@ (80098b8 <TIM_OC2_SetConfig+0x124>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d003      	beq.n	8009854 <TIM_OC2_SetConfig+0xc0>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a17      	ldr	r2, [pc, #92]	@ (80098ac <TIM_OC2_SetConfig+0x118>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d113      	bne.n	800987c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800985a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	621a      	str	r2, [r3, #32]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40012c00 	.word	0x40012c00
 80098a8:	40013400 	.word	0x40013400
 80098ac:	40015000 	.word	0x40015000
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800

080098bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a2b      	ldr	r2, [pc, #172]	@ (80099c8 <TIM_OC3_SetConfig+0x10c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d007      	beq.n	800992e <TIM_OC3_SetConfig+0x72>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a2a      	ldr	r2, [pc, #168]	@ (80099cc <TIM_OC3_SetConfig+0x110>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d003      	beq.n	800992e <TIM_OC3_SetConfig+0x72>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a29      	ldr	r2, [pc, #164]	@ (80099d0 <TIM_OC3_SetConfig+0x114>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d10d      	bne.n	800994a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <TIM_OC3_SetConfig+0x10c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d013      	beq.n	800997a <TIM_OC3_SetConfig+0xbe>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a1d      	ldr	r2, [pc, #116]	@ (80099cc <TIM_OC3_SetConfig+0x110>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d00f      	beq.n	800997a <TIM_OC3_SetConfig+0xbe>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <TIM_OC3_SetConfig+0x118>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00b      	beq.n	800997a <TIM_OC3_SetConfig+0xbe>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <TIM_OC3_SetConfig+0x11c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d007      	beq.n	800997a <TIM_OC3_SetConfig+0xbe>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <TIM_OC3_SetConfig+0x120>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d003      	beq.n	800997a <TIM_OC3_SetConfig+0xbe>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a16      	ldr	r2, [pc, #88]	@ (80099d0 <TIM_OC3_SetConfig+0x114>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d113      	bne.n	80099a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	4313      	orrs	r3, r2
 8009994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	621a      	str	r2, [r3, #32]
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	40013400 	.word	0x40013400
 80099d0:	40015000 	.word	0x40015000
 80099d4:	40014000 	.word	0x40014000
 80099d8:	40014400 	.word	0x40014400
 80099dc:	40014800 	.word	0x40014800

080099e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	021b      	lsls	r3, r3, #8
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	031b      	lsls	r3, r3, #12
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8009af0 <TIM_OC4_SetConfig+0x110>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d007      	beq.n	8009a54 <TIM_OC4_SetConfig+0x74>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a2b      	ldr	r2, [pc, #172]	@ (8009af4 <TIM_OC4_SetConfig+0x114>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d003      	beq.n	8009a54 <TIM_OC4_SetConfig+0x74>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009af8 <TIM_OC4_SetConfig+0x118>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d10d      	bne.n	8009a70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	031b      	lsls	r3, r3, #12
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a1f      	ldr	r2, [pc, #124]	@ (8009af0 <TIM_OC4_SetConfig+0x110>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d013      	beq.n	8009aa0 <TIM_OC4_SetConfig+0xc0>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009af4 <TIM_OC4_SetConfig+0x114>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00f      	beq.n	8009aa0 <TIM_OC4_SetConfig+0xc0>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <TIM_OC4_SetConfig+0x11c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00b      	beq.n	8009aa0 <TIM_OC4_SetConfig+0xc0>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009b00 <TIM_OC4_SetConfig+0x120>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d007      	beq.n	8009aa0 <TIM_OC4_SetConfig+0xc0>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1c      	ldr	r2, [pc, #112]	@ (8009b04 <TIM_OC4_SetConfig+0x124>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d003      	beq.n	8009aa0 <TIM_OC4_SetConfig+0xc0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a17      	ldr	r2, [pc, #92]	@ (8009af8 <TIM_OC4_SetConfig+0x118>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d113      	bne.n	8009ac8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009aa6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009aae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	019b      	lsls	r3, r3, #6
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	019b      	lsls	r3, r3, #6
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	621a      	str	r2, [r3, #32]
}
 8009ae2:	bf00      	nop
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40012c00 	.word	0x40012c00
 8009af4:	40013400 	.word	0x40013400
 8009af8:	40015000 	.word	0x40015000
 8009afc:	40014000 	.word	0x40014000
 8009b00:	40014400 	.word	0x40014400
 8009b04:	40014800 	.word	0x40014800

08009b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	041b      	lsls	r3, r3, #16
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a19      	ldr	r2, [pc, #100]	@ (8009bc4 <TIM_OC5_SetConfig+0xbc>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d013      	beq.n	8009b8a <TIM_OC5_SetConfig+0x82>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a18      	ldr	r2, [pc, #96]	@ (8009bc8 <TIM_OC5_SetConfig+0xc0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d00f      	beq.n	8009b8a <TIM_OC5_SetConfig+0x82>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a17      	ldr	r2, [pc, #92]	@ (8009bcc <TIM_OC5_SetConfig+0xc4>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00b      	beq.n	8009b8a <TIM_OC5_SetConfig+0x82>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a16      	ldr	r2, [pc, #88]	@ (8009bd0 <TIM_OC5_SetConfig+0xc8>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d007      	beq.n	8009b8a <TIM_OC5_SetConfig+0x82>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a15      	ldr	r2, [pc, #84]	@ (8009bd4 <TIM_OC5_SetConfig+0xcc>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d003      	beq.n	8009b8a <TIM_OC5_SetConfig+0x82>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a14      	ldr	r2, [pc, #80]	@ (8009bd8 <TIM_OC5_SetConfig+0xd0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d109      	bne.n	8009b9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	621a      	str	r2, [r3, #32]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	40013400 	.word	0x40013400
 8009bcc:	40014000 	.word	0x40014000
 8009bd0:	40014400 	.word	0x40014400
 8009bd4:	40014800 	.word	0x40014800
 8009bd8:	40015000 	.word	0x40015000

08009bdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	051b      	lsls	r3, r3, #20
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a1a      	ldr	r2, [pc, #104]	@ (8009c9c <TIM_OC6_SetConfig+0xc0>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d013      	beq.n	8009c60 <TIM_OC6_SetConfig+0x84>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a19      	ldr	r2, [pc, #100]	@ (8009ca0 <TIM_OC6_SetConfig+0xc4>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d00f      	beq.n	8009c60 <TIM_OC6_SetConfig+0x84>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a18      	ldr	r2, [pc, #96]	@ (8009ca4 <TIM_OC6_SetConfig+0xc8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00b      	beq.n	8009c60 <TIM_OC6_SetConfig+0x84>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ca8 <TIM_OC6_SetConfig+0xcc>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d007      	beq.n	8009c60 <TIM_OC6_SetConfig+0x84>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a16      	ldr	r2, [pc, #88]	@ (8009cac <TIM_OC6_SetConfig+0xd0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_OC6_SetConfig+0x84>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a15      	ldr	r2, [pc, #84]	@ (8009cb0 <TIM_OC6_SetConfig+0xd4>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d109      	bne.n	8009c74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	029b      	lsls	r3, r3, #10
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40012c00 	.word	0x40012c00
 8009ca0:	40013400 	.word	0x40013400
 8009ca4:	40014000 	.word	0x40014000
 8009ca8:	40014400 	.word	0x40014400
 8009cac:	40014800 	.word	0x40014800
 8009cb0:	40015000 	.word	0x40015000

08009cb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	4a56      	ldr	r2, [pc, #344]	@ (8009e5c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	f000 80a2 	beq.w	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d0a:	4a54      	ldr	r2, [pc, #336]	@ (8009e5c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f200 809b 	bhi.w	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d12:	4a53      	ldr	r2, [pc, #332]	@ (8009e60 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	f000 809a 	beq.w	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d1a:	4a51      	ldr	r2, [pc, #324]	@ (8009e60 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	f200 8093 	bhi.w	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d22:	4a50      	ldr	r2, [pc, #320]	@ (8009e64 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	f000 8092 	beq.w	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8009e64 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	f200 808b 	bhi.w	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d32:	4a4d      	ldr	r2, [pc, #308]	@ (8009e68 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	f000 808a 	beq.w	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8009e68 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	f200 8083 	bhi.w	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d42:	4a4a      	ldr	r2, [pc, #296]	@ (8009e6c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	f000 8082 	beq.w	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d4a:	4a48      	ldr	r2, [pc, #288]	@ (8009e6c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d87b      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d50:	4a47      	ldr	r2, [pc, #284]	@ (8009e70 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d07b      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d56:	4a46      	ldr	r2, [pc, #280]	@ (8009e70 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d875      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d60:	d075      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d62:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d66:	d86f      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d6c:	d06f      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d72:	d869      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d74:	2b70      	cmp	r3, #112	@ 0x70
 8009d76:	d01a      	beq.n	8009dae <TIM_SlaveTimer_SetConfig+0xfa>
 8009d78:	2b70      	cmp	r3, #112	@ 0x70
 8009d7a:	d865      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d7c:	2b60      	cmp	r3, #96	@ 0x60
 8009d7e:	d059      	beq.n	8009e34 <TIM_SlaveTimer_SetConfig+0x180>
 8009d80:	2b60      	cmp	r3, #96	@ 0x60
 8009d82:	d861      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d84:	2b50      	cmp	r3, #80	@ 0x50
 8009d86:	d04b      	beq.n	8009e20 <TIM_SlaveTimer_SetConfig+0x16c>
 8009d88:	2b50      	cmp	r3, #80	@ 0x50
 8009d8a:	d85d      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d8c:	2b40      	cmp	r3, #64	@ 0x40
 8009d8e:	d019      	beq.n	8009dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8009d90:	2b40      	cmp	r3, #64	@ 0x40
 8009d92:	d859      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d94:	2b30      	cmp	r3, #48	@ 0x30
 8009d96:	d05a      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009d98:	2b30      	cmp	r3, #48	@ 0x30
 8009d9a:	d855      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d056      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d851      	bhi.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d052      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d050      	beq.n	8009e4e <TIM_SlaveTimer_SetConfig+0x19a>
 8009dac:	e04c      	b.n	8009e48 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009dbe:	f000 f9ff 	bl	800a1c0 <TIM_ETR_SetConfig>
      break;
 8009dc2:	e045      	b.n	8009e50 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b05      	cmp	r3, #5
 8009dca:	d004      	beq.n	8009dd6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009dd0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009dd4:	d101      	bne.n	8009dda <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e03b      	b.n	8009e52 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6a1a      	ldr	r2, [r3, #32]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0201 	bic.w	r2, r2, #1
 8009df0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	621a      	str	r2, [r3, #32]
      break;
 8009e1e:	e017      	b.n	8009e50 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f000 f895 	bl	8009f5c <TIM_TI1_ConfigInputStage>
      break;
 8009e32:	e00d      	b.n	8009e50 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e40:	461a      	mov	r2, r3
 8009e42:	f000 f8f7 	bl	800a034 <TIM_TI2_ConfigInputStage>
      break;
 8009e46:	e003      	b.n	8009e50 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4c:	e000      	b.n	8009e50 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009e4e:	bf00      	nop
  }

  return status;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	00100070 	.word	0x00100070
 8009e60:	00100060 	.word	0x00100060
 8009e64:	00100050 	.word	0x00100050
 8009e68:	00100040 	.word	0x00100040
 8009e6c:	00100030 	.word	0x00100030
 8009e70:	00100020 	.word	0x00100020

08009e74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	f023 0201 	bic.w	r2, r3, #1
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4a28      	ldr	r2, [pc, #160]	@ (8009f40 <TIM_TI1_SetConfig+0xcc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d01b      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ea8:	d017      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4a25      	ldr	r2, [pc, #148]	@ (8009f44 <TIM_TI1_SetConfig+0xd0>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d013      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4a24      	ldr	r2, [pc, #144]	@ (8009f48 <TIM_TI1_SetConfig+0xd4>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00f      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4a23      	ldr	r2, [pc, #140]	@ (8009f4c <TIM_TI1_SetConfig+0xd8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00b      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4a22      	ldr	r2, [pc, #136]	@ (8009f50 <TIM_TI1_SetConfig+0xdc>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d007      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a21      	ldr	r2, [pc, #132]	@ (8009f54 <TIM_TI1_SetConfig+0xe0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d003      	beq.n	8009eda <TIM_TI1_SetConfig+0x66>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a20      	ldr	r2, [pc, #128]	@ (8009f58 <TIM_TI1_SetConfig+0xe4>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d101      	bne.n	8009ede <TIM_TI1_SetConfig+0x6a>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <TIM_TI1_SetConfig+0x6c>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e003      	b.n	8009efe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f043 0301 	orr.w	r3, r3, #1
 8009efc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f023 030a 	bic.w	r3, r3, #10
 8009f18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f003 030a 	and.w	r3, r3, #10
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40000c00 	.word	0x40000c00
 8009f50:	40013400 	.word	0x40013400
 8009f54:	40014000 	.word	0x40014000
 8009f58:	40015000 	.word	0x40015000

08009f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	f023 0201 	bic.w	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f023 030a 	bic.w	r3, r3, #10
 8009f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b087      	sub	sp, #28
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f023 0210 	bic.w	r2, r3, #16
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	031b      	lsls	r3, r3, #12
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a00c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	4313      	orrs	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	621a      	str	r2, [r3, #32]
}
 800a028:	bf00      	nop
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	f023 0210 	bic.w	r2, r3, #16
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a05e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	031b      	lsls	r3, r3, #12
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a070:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	621a      	str	r2, [r3, #32]
}
 800a088:	bf00      	nop
 800a08a:	371c      	adds	r7, #28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f023 0303 	bic.w	r3, r3, #3
 800a0c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a0e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	621a      	str	r2, [r3, #32]
}
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a138:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	021b      	lsls	r3, r3, #8
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a14a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	031b      	lsls	r3, r3, #12
 800a150:	b29b      	uxth	r3, r3
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a15e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	031b      	lsls	r3, r3, #12
 800a164:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	621a      	str	r2, [r3, #32]
}
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a19c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f043 0307 	orr.w	r3, r3, #7
 800a1ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	609a      	str	r2, [r3, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	021a      	lsls	r2, r3, #8
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	609a      	str	r2, [r3, #8]
}
 800a1f4:	bf00      	nop
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 031f 	and.w	r3, r3, #31
 800a212:	2201      	movs	r2, #1
 800a214:	fa02 f303 	lsl.w	r3, r2, r3
 800a218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a1a      	ldr	r2, [r3, #32]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	43db      	mvns	r3, r3
 800a222:	401a      	ands	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1a      	ldr	r2, [r3, #32]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f003 031f 	and.w	r3, r3, #31
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	fa01 f303 	lsl.w	r3, r1, r3
 800a238:	431a      	orrs	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	621a      	str	r2, [r3, #32]
}
 800a23e:	bf00      	nop
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
	...

0800a24c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a26      	ldr	r2, [pc, #152]	@ (800a2f0 <TIM_ResetCallback+0xa4>)
 800a258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a25      	ldr	r2, [pc, #148]	@ (800a2f4 <TIM_ResetCallback+0xa8>)
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a24      	ldr	r2, [pc, #144]	@ (800a2f8 <TIM_ResetCallback+0xac>)
 800a268:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a23      	ldr	r2, [pc, #140]	@ (800a2fc <TIM_ResetCallback+0xb0>)
 800a270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a22      	ldr	r2, [pc, #136]	@ (800a300 <TIM_ResetCallback+0xb4>)
 800a278:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a21      	ldr	r2, [pc, #132]	@ (800a304 <TIM_ResetCallback+0xb8>)
 800a280:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a20      	ldr	r2, [pc, #128]	@ (800a308 <TIM_ResetCallback+0xbc>)
 800a288:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a1f      	ldr	r2, [pc, #124]	@ (800a30c <TIM_ResetCallback+0xc0>)
 800a290:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a1e      	ldr	r2, [pc, #120]	@ (800a310 <TIM_ResetCallback+0xc4>)
 800a298:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a1d      	ldr	r2, [pc, #116]	@ (800a314 <TIM_ResetCallback+0xc8>)
 800a2a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <TIM_ResetCallback+0xcc>)
 800a2a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a31c <TIM_ResetCallback+0xd0>)
 800a2b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a320 <TIM_ResetCallback+0xd4>)
 800a2b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a19      	ldr	r2, [pc, #100]	@ (800a324 <TIM_ResetCallback+0xd8>)
 800a2c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a18      	ldr	r2, [pc, #96]	@ (800a328 <TIM_ResetCallback+0xdc>)
 800a2c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a17      	ldr	r2, [pc, #92]	@ (800a32c <TIM_ResetCallback+0xe0>)
 800a2d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a16      	ldr	r2, [pc, #88]	@ (800a330 <TIM_ResetCallback+0xe4>)
 800a2d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a15      	ldr	r2, [pc, #84]	@ (800a334 <TIM_ResetCallback+0xe8>)
 800a2e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	0800477d 	.word	0x0800477d
 800a2f4:	08009185 	.word	0x08009185
 800a2f8:	080091fd 	.word	0x080091fd
 800a2fc:	08009211 	.word	0x08009211
 800a300:	080091ad 	.word	0x080091ad
 800a304:	080091c1 	.word	0x080091c1
 800a308:	08009199 	.word	0x08009199
 800a30c:	080091d5 	.word	0x080091d5
 800a310:	080091e9 	.word	0x080091e9
 800a314:	08009225 	.word	0x08009225
 800a318:	0800a58d 	.word	0x0800a58d
 800a31c:	0800a5a1 	.word	0x0800a5a1
 800a320:	0800a5b5 	.word	0x0800a5b5
 800a324:	0800a5c9 	.word	0x0800a5c9
 800a328:	0800a5dd 	.word	0x0800a5dd
 800a32c:	0800a5f1 	.word	0x0800a5f1
 800a330:	0800a605 	.word	0x0800a605
 800a334:	0800a619 	.word	0x0800a619

0800a338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e074      	b.n	800a43a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a34      	ldr	r2, [pc, #208]	@ (800a448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d009      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a33      	ldr	r2, [pc, #204]	@ (800a44c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d004      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a31      	ldr	r2, [pc, #196]	@ (800a450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d108      	bne.n	800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a3a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a21      	ldr	r2, [pc, #132]	@ (800a448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d022      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d0:	d01d      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a1f      	ldr	r2, [pc, #124]	@ (800a454 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d018      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a458 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a45c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00e      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a15      	ldr	r2, [pc, #84]	@ (800a44c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d009      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	@ (800a460 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d004      	beq.n	800a40e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a11      	ldr	r2, [pc, #68]	@ (800a450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d10c      	bne.n	800a428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40012c00 	.word	0x40012c00
 800a44c:	40013400 	.word	0x40013400
 800a450:	40015000 	.word	0x40015000
 800a454:	40000400 	.word	0x40000400
 800a458:	40000800 	.word	0x40000800
 800a45c:	40000c00 	.word	0x40000c00
 800a460:	40014000 	.word	0x40014000

0800a464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e078      	b.n	800a572 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	4313      	orrs	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	041b      	lsls	r3, r3, #16
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1c      	ldr	r2, [pc, #112]	@ (800a580 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d009      	beq.n	800a526 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a1b      	ldr	r2, [pc, #108]	@ (800a584 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d004      	beq.n	800a526 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a19      	ldr	r2, [pc, #100]	@ (800a588 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d11c      	bne.n	800a560 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a530:	051b      	lsls	r3, r3, #20
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40012c00 	.word	0x40012c00
 800a584:	40013400 	.word	0x40013400
 800a588:	40015000 	.word	0x40015000

0800a58c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e050      	b.n	800a6e0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a644:	2b00      	cmp	r3, #0
 800a646:	d114      	bne.n	800a672 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fde5 	bl	800b220 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a21      	ldr	r2, [pc, #132]	@ (800a6e8 <HAL_UART_Init+0xbc>)
 800a664:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2224      	movs	r2, #36	@ 0x24
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0201 	bic.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 f912 	bl	800b8bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fe13 	bl	800b2c4 <UART_SetConfig>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d101      	bne.n	800a6a8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e01b      	b.n	800a6e0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f042 0201 	orr.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f991 	bl	800ba00 <UART_CheckIdleState>
 800a6de:	4603      	mov	r3, r0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	08005b05 	.word	0x08005b05

0800a6ec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a70a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e09c      	b.n	800a852 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a71e:	2b20      	cmp	r3, #32
 800a720:	d16c      	bne.n	800a7fc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a722:	7afb      	ldrb	r3, [r7, #11]
 800a724:	2b0c      	cmp	r3, #12
 800a726:	d85e      	bhi.n	800a7e6 <HAL_UART_RegisterCallback+0xfa>
 800a728:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <HAL_UART_RegisterCallback+0x44>)
 800a72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72e:	bf00      	nop
 800a730:	0800a765 	.word	0x0800a765
 800a734:	0800a76f 	.word	0x0800a76f
 800a738:	0800a779 	.word	0x0800a779
 800a73c:	0800a783 	.word	0x0800a783
 800a740:	0800a78d 	.word	0x0800a78d
 800a744:	0800a797 	.word	0x0800a797
 800a748:	0800a7a1 	.word	0x0800a7a1
 800a74c:	0800a7ab 	.word	0x0800a7ab
 800a750:	0800a7b5 	.word	0x0800a7b5
 800a754:	0800a7bf 	.word	0x0800a7bf
 800a758:	0800a7c9 	.word	0x0800a7c9
 800a75c:	0800a7d3 	.word	0x0800a7d3
 800a760:	0800a7dd 	.word	0x0800a7dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a76c:	e070      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a776:	e06b      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a780:	e066      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a78a:	e061      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a794:	e05c      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a79e:	e057      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a7a8:	e052      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a7b2:	e04d      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a7bc:	e048      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a7c6:	e043      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a7d0:	e03e      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a7da:	e039      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a7e4:	e034      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
        break;
 800a7fa:	e029      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a802:	2b00      	cmp	r3, #0
 800a804:	d11a      	bne.n	800a83c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	2b0b      	cmp	r3, #11
 800a80a:	d002      	beq.n	800a812 <HAL_UART_RegisterCallback+0x126>
 800a80c:	2b0c      	cmp	r3, #12
 800a80e:	d005      	beq.n	800a81c <HAL_UART_RegisterCallback+0x130>
 800a810:	e009      	b.n	800a826 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a81a:	e019      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a824:	e014      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
        break;
 800a83a:	e009      	b.n	800a850 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a842:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
}
 800a852:	4618      	mov	r0, r3
 800a854:	371c      	adds	r7, #28
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop

0800a860 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	@ 0x28
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4613      	mov	r3, r2
 800a86c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a874:	2b20      	cmp	r3, #32
 800a876:	d167      	bne.n	800a948 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_UART_Transmit_DMA+0x24>
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e060      	b.n	800a94a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	88fa      	ldrh	r2, [r7, #6]
 800a892:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	88fa      	ldrh	r2, [r7, #6]
 800a89a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2221      	movs	r2, #33	@ 0x21
 800a8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d028      	beq.n	800a908 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ba:	4a26      	ldr	r2, [pc, #152]	@ (800a954 <HAL_UART_Transmit_DMA+0xf4>)
 800a8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c2:	4a25      	ldr	r2, [pc, #148]	@ (800a958 <HAL_UART_Transmit_DMA+0xf8>)
 800a8c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ca:	4a24      	ldr	r2, [pc, #144]	@ (800a95c <HAL_UART_Transmit_DMA+0xfc>)
 800a8cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3328      	adds	r3, #40	@ 0x28
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	f7fb fcd9 	bl	80062a0 <HAL_DMA_Start_IT>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d009      	beq.n	800a908 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2210      	movs	r2, #16
 800a8f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2220      	movs	r2, #32
 800a900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e020      	b.n	800a94a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2240      	movs	r2, #64	@ 0x40
 800a90e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	613b      	str	r3, [r7, #16]
   return(result);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a926:	627b      	str	r3, [r7, #36]	@ 0x24
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3308      	adds	r3, #8
 800a92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a930:	623a      	str	r2, [r7, #32]
 800a932:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	69f9      	ldr	r1, [r7, #28]
 800a936:	6a3a      	ldr	r2, [r7, #32]
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e5      	bne.n	800a910 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	e000      	b.n	800a94a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a948:	2302      	movs	r3, #2
  }
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3728      	adds	r7, #40	@ 0x28
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	0800becb 	.word	0x0800becb
 800a958:	0800bf69 	.word	0x0800bf69
 800a95c:	0800c103 	.word	0x0800c103

0800a960 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	@ 0x28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a974:	2b20      	cmp	r3, #32
 800a976:	d137      	bne.n	800a9e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_UART_Receive_DMA+0x24>
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e030      	b.n	800a9ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a18      	ldr	r2, [pc, #96]	@ (800a9f4 <HAL_UART_Receive_DMA+0x94>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d01f      	beq.n	800a9d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d018      	beq.n	800a9d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	623b      	str	r3, [r7, #32]
 800a9c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	69f9      	ldr	r1, [r7, #28]
 800a9ca:	6a3a      	ldr	r2, [r7, #32]
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e6      	bne.n	800a9a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f001 f926 	bl	800bc30 <UART_Start_Receive_DMA>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	e000      	b.n	800a9ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a9e8:	2302      	movs	r3, #2
  }
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3728      	adds	r7, #40	@ 0x28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	40008000 	.word	0x40008000

0800a9f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b0ba      	sub	sp, #232	@ 0xe8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa22:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa26:	4013      	ands	r3, r2
 800aa28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d11b      	bne.n	800aa6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d015      	beq.n	800aa6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d105      	bne.n	800aa58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8312 	beq.w	800b086 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	4798      	blx	r3
      }
      return;
 800aa6a:	e30c      	b.n	800b086 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8129 	beq.w	800acc8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa7a:	4b90      	ldr	r3, [pc, #576]	@ (800acbc <HAL_UART_IRQHandler+0x2c4>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa86:	4b8e      	ldr	r3, [pc, #568]	@ (800acc0 <HAL_UART_IRQHandler+0x2c8>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 811c 	beq.w	800acc8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d011      	beq.n	800aac0 <HAL_UART_IRQHandler+0xc8>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2201      	movs	r2, #1
 800aaae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab6:	f043 0201 	orr.w	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d011      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xf8>
 800aacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2202      	movs	r2, #2
 800aade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae6:	f043 0204 	orr.w	r2, r3, #4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d011      	beq.n	800ab20 <HAL_UART_IRQHandler+0x128>
 800aafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab16:	f043 0202 	orr.w	r2, r3, #2
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab24:	f003 0308 	and.w	r3, r3, #8
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d017      	beq.n	800ab5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab3c:	4b5f      	ldr	r3, [pc, #380]	@ (800acbc <HAL_UART_IRQHandler+0x2c4>)
 800ab3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2208      	movs	r2, #8
 800ab4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab52:	f043 0208 	orr.w	r2, r3, #8
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d012      	beq.n	800ab8e <HAL_UART_IRQHandler+0x196>
 800ab68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab84:	f043 0220 	orr.w	r2, r3, #32
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 8278 	beq.w	800b08a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d013      	beq.n	800abce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d007      	beq.n	800abce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe2:	2b40      	cmp	r3, #64	@ 0x40
 800abe4:	d005      	beq.n	800abf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d058      	beq.n	800aca4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 f903 	bl	800bdfe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac02:	2b40      	cmp	r3, #64	@ 0x40
 800ac04:	d148      	bne.n	800ac98 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1d9      	bne.n	800ac06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d017      	beq.n	800ac8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac62:	4a18      	ldr	r2, [pc, #96]	@ (800acc4 <HAL_UART_IRQHandler+0x2cc>)
 800ac64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fb fbeb 	bl	8006448 <HAL_DMA_Abort_IT>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01f      	beq.n	800acb8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac86:	4610      	mov	r0, r2
 800ac88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8a:	e015      	b.n	800acb8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac96:	e00f      	b.n	800acb8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca2:	e009      	b.n	800acb8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800acb6:	e1e8      	b.n	800b08a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	bf00      	nop
    return;
 800acba:	e1e6      	b.n	800b08a <HAL_UART_IRQHandler+0x692>
 800acbc:	10000001 	.word	0x10000001
 800acc0:	04000120 	.word	0x04000120
 800acc4:	0800c187 	.word	0x0800c187

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800accc:	2b01      	cmp	r3, #1
 800acce:	f040 8176 	bne.w	800afbe <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acd6:	f003 0310 	and.w	r3, r3, #16
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 816f 	beq.w	800afbe <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ace0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace4:	f003 0310 	and.w	r3, r3, #16
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 8168 	beq.w	800afbe <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2210      	movs	r2, #16
 800acf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad00:	2b40      	cmp	r3, #64	@ 0x40
 800ad02:	f040 80dc 	bne.w	800aebe <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 80b1 	beq.w	800ae80 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	f080 80a9 	bcs.w	800ae80 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 8087 	bne.w	800ae5a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ad60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1da      	bne.n	800ad4c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ada6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3308      	adds	r3, #8
 800adb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800adba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800adbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800adcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e1      	bne.n	800ad96 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ade2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ade4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ade8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3308      	adds	r3, #8
 800adf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800adf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800adf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800adfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e3      	bne.n	800add2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae28:	f023 0310 	bic.w	r3, r3, #16
 800ae2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e4      	bne.n	800ae18 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fb fa9e 	bl	8006396 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ae72:	b292      	uxth	r2, r2
 800ae74:	1a8a      	subs	r2, r1, r2
 800ae76:	b292      	uxth	r2, r2
 800ae78:	4611      	mov	r1, r2
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ae7e:	e106      	b.n	800b08e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	f040 80ff 	bne.w	800b08e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	f040 80f5 	bne.w	800b08e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	4798      	blx	r3
      return;
 800aebc:	e0e7      	b.n	800b08e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 80d9 	beq.w	800b092 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800aee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 80d4 	beq.w	800b092 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aefe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e4      	bne.n	800aeea <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3308      	adds	r3, #8
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	e853 3f00 	ldrex	r3, [r3]
 800af2e:	623b      	str	r3, [r7, #32]
   return(result);
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af48:	633a      	str	r2, [r7, #48]	@ 0x30
 800af4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e1      	bne.n	800af20 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f023 0310 	bic.w	r3, r3, #16
 800af84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	69b9      	ldr	r1, [r7, #24]
 800af98:	69fa      	ldr	r2, [r7, #28]
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	617b      	str	r3, [r7, #20]
   return(result);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e4      	bne.n	800af70 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800afb2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800afb6:	4611      	mov	r1, r2
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afbc:	e069      	b.n	800b092 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800afbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d010      	beq.n	800afec <HAL_UART_IRQHandler+0x5f4>
 800afca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800afde:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afea:	e055      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d014      	beq.n	800b022 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800affc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b000:	2b00      	cmp	r3, #0
 800b002:	d105      	bne.n	800b010 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b014:	2b00      	cmp	r3, #0
 800b016:	d03e      	beq.n	800b096 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	4798      	blx	r3
    }
    return;
 800b020:	e039      	b.n	800b096 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d009      	beq.n	800b042 <HAL_UART_IRQHandler+0x64a>
 800b02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 f8b7 	bl	800c1ae <UART_EndTransmit_IT>
    return;
 800b040:	e02a      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <HAL_UART_IRQHandler+0x66e>
 800b04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b052:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b064:	e018      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b06a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d012      	beq.n	800b098 <HAL_UART_IRQHandler+0x6a0>
 800b072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b076:	2b00      	cmp	r3, #0
 800b078:	da0e      	bge.n	800b098 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b084:	e008      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b086:	bf00      	nop
 800b088:	e006      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b08a:	bf00      	nop
 800b08c:	e004      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b08e:	bf00      	nop
 800b090:	e002      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b092:	bf00      	nop
 800b094:	e000      	b.n	800b098 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b096:	bf00      	nop
  }
}
 800b098:	37e8      	adds	r7, #232	@ 0xe8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop

0800b0a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b0f8:	bf00      	nop
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a09      	ldr	r2, [pc, #36]	@ (800b18c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d009      	beq.n	800b180 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	615a      	str	r2, [r3, #20]
  }
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	40008000 	.word	0x40008000

0800b190 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a18      	ldr	r2, [pc, #96]	@ (800b200 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d027      	beq.n	800b1f2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d120      	bne.n	800b1ee <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d101      	bne.n	800b1ba <HAL_UART_EnableReceiverTimeout+0x2a>
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	e01c      	b.n	800b1f4 <HAL_UART_EnableReceiverTimeout+0x64>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2224      	movs	r2, #36	@ 0x24
 800b1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b1d8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e002      	b.n	800b1f4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e000      	b.n	800b1f4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
  }
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	40008000 	.word	0x40008000

0800b204 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
	...

0800b220 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a1a      	ldr	r2, [pc, #104]	@ (800b294 <UART_InitCallbacksToDefault+0x74>)
 800b22c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a19      	ldr	r2, [pc, #100]	@ (800b298 <UART_InitCallbacksToDefault+0x78>)
 800b234:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <UART_InitCallbacksToDefault+0x7c>)
 800b23c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a17      	ldr	r2, [pc, #92]	@ (800b2a0 <UART_InitCallbacksToDefault+0x80>)
 800b244:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a16      	ldr	r2, [pc, #88]	@ (800b2a4 <UART_InitCallbacksToDefault+0x84>)
 800b24c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a15      	ldr	r2, [pc, #84]	@ (800b2a8 <UART_InitCallbacksToDefault+0x88>)
 800b254:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a14      	ldr	r2, [pc, #80]	@ (800b2ac <UART_InitCallbacksToDefault+0x8c>)
 800b25c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a13      	ldr	r2, [pc, #76]	@ (800b2b0 <UART_InitCallbacksToDefault+0x90>)
 800b264:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a12      	ldr	r2, [pc, #72]	@ (800b2b4 <UART_InitCallbacksToDefault+0x94>)
 800b26c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a11      	ldr	r2, [pc, #68]	@ (800b2b8 <UART_InitCallbacksToDefault+0x98>)
 800b274:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a10      	ldr	r2, [pc, #64]	@ (800b2bc <UART_InitCallbacksToDefault+0x9c>)
 800b27c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a0f      	ldr	r2, [pc, #60]	@ (800b2c0 <UART_InitCallbacksToDefault+0xa0>)
 800b284:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	0800b0b5 	.word	0x0800b0b5
 800b298:	0800b0a1 	.word	0x0800b0a1
 800b29c:	0800b0dd 	.word	0x0800b0dd
 800b2a0:	0800b0c9 	.word	0x0800b0c9
 800b2a4:	0800b0f1 	.word	0x0800b0f1
 800b2a8:	0800b105 	.word	0x0800b105
 800b2ac:	0800b119 	.word	0x0800b119
 800b2b0:	0800b12d 	.word	0x0800b12d
 800b2b4:	0800c209 	.word	0x0800c209
 800b2b8:	0800c21d 	.word	0x0800c21d
 800b2bc:	0800c231 	.word	0x0800c231
 800b2c0:	0800b141 	.word	0x0800b141

0800b2c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c8:	b08c      	sub	sp, #48	@ 0x30
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	4baa      	ldr	r3, [pc, #680]	@ (800b59c <UART_SetConfig+0x2d8>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	430a      	orrs	r2, r1
 800b314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a9f      	ldr	r2, [pc, #636]	@ (800b5a0 <UART_SetConfig+0x2dc>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d004      	beq.n	800b330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b32c:	4313      	orrs	r3, r2
 800b32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b33a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b344:	430b      	orrs	r3, r1
 800b346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34e:	f023 010f 	bic.w	r1, r3, #15
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	430a      	orrs	r2, r1
 800b35c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a90      	ldr	r2, [pc, #576]	@ (800b5a4 <UART_SetConfig+0x2e0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d125      	bne.n	800b3b4 <UART_SetConfig+0xf0>
 800b368:	4b8f      	ldr	r3, [pc, #572]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b03      	cmp	r3, #3
 800b374:	d81a      	bhi.n	800b3ac <UART_SetConfig+0xe8>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <UART_SetConfig+0xb8>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b39d 	.word	0x0800b39d
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	2301      	movs	r3, #1
 800b38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b392:	e116      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b394:	2302      	movs	r3, #2
 800b396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b39a:	e112      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b39c:	2304      	movs	r3, #4
 800b39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3a2:	e10e      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b3a4:	2308      	movs	r3, #8
 800b3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3aa:	e10a      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b3ac:	2310      	movs	r3, #16
 800b3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3b2:	e106      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a7c      	ldr	r2, [pc, #496]	@ (800b5ac <UART_SetConfig+0x2e8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d138      	bne.n	800b430 <UART_SetConfig+0x16c>
 800b3be:	4b7a      	ldr	r3, [pc, #488]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c4:	f003 030c 	and.w	r3, r3, #12
 800b3c8:	2b0c      	cmp	r3, #12
 800b3ca:	d82d      	bhi.n	800b428 <UART_SetConfig+0x164>
 800b3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d4 <UART_SetConfig+0x110>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b409 	.word	0x0800b409
 800b3d8:	0800b429 	.word	0x0800b429
 800b3dc:	0800b429 	.word	0x0800b429
 800b3e0:	0800b429 	.word	0x0800b429
 800b3e4:	0800b419 	.word	0x0800b419
 800b3e8:	0800b429 	.word	0x0800b429
 800b3ec:	0800b429 	.word	0x0800b429
 800b3f0:	0800b429 	.word	0x0800b429
 800b3f4:	0800b411 	.word	0x0800b411
 800b3f8:	0800b429 	.word	0x0800b429
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b421 	.word	0x0800b421
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b40e:	e0d8      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b410:	2302      	movs	r3, #2
 800b412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b416:	e0d4      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b418:	2304      	movs	r3, #4
 800b41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b41e:	e0d0      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b420:	2308      	movs	r3, #8
 800b422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b426:	e0cc      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b428:	2310      	movs	r3, #16
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42e:	e0c8      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a5e      	ldr	r2, [pc, #376]	@ (800b5b0 <UART_SetConfig+0x2ec>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d125      	bne.n	800b486 <UART_SetConfig+0x1c2>
 800b43a:	4b5b      	ldr	r3, [pc, #364]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b440:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b444:	2b30      	cmp	r3, #48	@ 0x30
 800b446:	d016      	beq.n	800b476 <UART_SetConfig+0x1b2>
 800b448:	2b30      	cmp	r3, #48	@ 0x30
 800b44a:	d818      	bhi.n	800b47e <UART_SetConfig+0x1ba>
 800b44c:	2b20      	cmp	r3, #32
 800b44e:	d00a      	beq.n	800b466 <UART_SetConfig+0x1a2>
 800b450:	2b20      	cmp	r3, #32
 800b452:	d814      	bhi.n	800b47e <UART_SetConfig+0x1ba>
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <UART_SetConfig+0x19a>
 800b458:	2b10      	cmp	r3, #16
 800b45a:	d008      	beq.n	800b46e <UART_SetConfig+0x1aa>
 800b45c:	e00f      	b.n	800b47e <UART_SetConfig+0x1ba>
 800b45e:	2300      	movs	r3, #0
 800b460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b464:	e0ad      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b466:	2302      	movs	r3, #2
 800b468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b46c:	e0a9      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b46e:	2304      	movs	r3, #4
 800b470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b474:	e0a5      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b476:	2308      	movs	r3, #8
 800b478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b47c:	e0a1      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b47e:	2310      	movs	r3, #16
 800b480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b484:	e09d      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a4a      	ldr	r2, [pc, #296]	@ (800b5b4 <UART_SetConfig+0x2f0>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d125      	bne.n	800b4dc <UART_SetConfig+0x218>
 800b490:	4b45      	ldr	r3, [pc, #276]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b496:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b49a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b49c:	d016      	beq.n	800b4cc <UART_SetConfig+0x208>
 800b49e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4a0:	d818      	bhi.n	800b4d4 <UART_SetConfig+0x210>
 800b4a2:	2b80      	cmp	r3, #128	@ 0x80
 800b4a4:	d00a      	beq.n	800b4bc <UART_SetConfig+0x1f8>
 800b4a6:	2b80      	cmp	r3, #128	@ 0x80
 800b4a8:	d814      	bhi.n	800b4d4 <UART_SetConfig+0x210>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <UART_SetConfig+0x1f0>
 800b4ae:	2b40      	cmp	r3, #64	@ 0x40
 800b4b0:	d008      	beq.n	800b4c4 <UART_SetConfig+0x200>
 800b4b2:	e00f      	b.n	800b4d4 <UART_SetConfig+0x210>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ba:	e082      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4c2:	e07e      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ca:	e07a      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d2:	e076      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4da:	e072      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a35      	ldr	r2, [pc, #212]	@ (800b5b8 <UART_SetConfig+0x2f4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d12a      	bne.n	800b53c <UART_SetConfig+0x278>
 800b4e6:	4b30      	ldr	r3, [pc, #192]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4f4:	d01a      	beq.n	800b52c <UART_SetConfig+0x268>
 800b4f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4fa:	d81b      	bhi.n	800b534 <UART_SetConfig+0x270>
 800b4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b500:	d00c      	beq.n	800b51c <UART_SetConfig+0x258>
 800b502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b506:	d815      	bhi.n	800b534 <UART_SetConfig+0x270>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <UART_SetConfig+0x250>
 800b50c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b510:	d008      	beq.n	800b524 <UART_SetConfig+0x260>
 800b512:	e00f      	b.n	800b534 <UART_SetConfig+0x270>
 800b514:	2300      	movs	r3, #0
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51a:	e052      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b51c:	2302      	movs	r3, #2
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b522:	e04e      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b524:	2304      	movs	r3, #4
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e04a      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b52c:	2308      	movs	r3, #8
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e046      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b534:	2310      	movs	r3, #16
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e042      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a17      	ldr	r2, [pc, #92]	@ (800b5a0 <UART_SetConfig+0x2dc>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d13a      	bne.n	800b5bc <UART_SetConfig+0x2f8>
 800b546:	4b18      	ldr	r3, [pc, #96]	@ (800b5a8 <UART_SetConfig+0x2e4>)
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b554:	d01a      	beq.n	800b58c <UART_SetConfig+0x2c8>
 800b556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b55a:	d81b      	bhi.n	800b594 <UART_SetConfig+0x2d0>
 800b55c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b560:	d00c      	beq.n	800b57c <UART_SetConfig+0x2b8>
 800b562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b566:	d815      	bhi.n	800b594 <UART_SetConfig+0x2d0>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <UART_SetConfig+0x2b0>
 800b56c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b570:	d008      	beq.n	800b584 <UART_SetConfig+0x2c0>
 800b572:	e00f      	b.n	800b594 <UART_SetConfig+0x2d0>
 800b574:	2300      	movs	r3, #0
 800b576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57a:	e022      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b57c:	2302      	movs	r3, #2
 800b57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b582:	e01e      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b584:	2304      	movs	r3, #4
 800b586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b58a:	e01a      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b58c:	2308      	movs	r3, #8
 800b58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b592:	e016      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b594:	2310      	movs	r3, #16
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59a:	e012      	b.n	800b5c2 <UART_SetConfig+0x2fe>
 800b59c:	cfff69f3 	.word	0xcfff69f3
 800b5a0:	40008000 	.word	0x40008000
 800b5a4:	40013800 	.word	0x40013800
 800b5a8:	40021000 	.word	0x40021000
 800b5ac:	40004400 	.word	0x40004400
 800b5b0:	40004800 	.word	0x40004800
 800b5b4:	40004c00 	.word	0x40004c00
 800b5b8:	40005000 	.word	0x40005000
 800b5bc:	2310      	movs	r3, #16
 800b5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4aae      	ldr	r2, [pc, #696]	@ (800b880 <UART_SetConfig+0x5bc>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	f040 8097 	bne.w	800b6fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d823      	bhi.n	800b61e <UART_SetConfig+0x35a>
 800b5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <UART_SetConfig+0x318>)
 800b5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5dc:	0800b601 	.word	0x0800b601
 800b5e0:	0800b61f 	.word	0x0800b61f
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b61f 	.word	0x0800b61f
 800b5ec:	0800b60f 	.word	0x0800b60f
 800b5f0:	0800b61f 	.word	0x0800b61f
 800b5f4:	0800b61f 	.word	0x0800b61f
 800b5f8:	0800b61f 	.word	0x0800b61f
 800b5fc:	0800b617 	.word	0x0800b617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b600:	f7fc f812 	bl	8007628 <HAL_RCC_GetPCLK1Freq>
 800b604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b606:	e010      	b.n	800b62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b608:	4b9e      	ldr	r3, [pc, #632]	@ (800b884 <UART_SetConfig+0x5c0>)
 800b60a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b60c:	e00d      	b.n	800b62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b60e:	f7fb ff9d 	bl	800754c <HAL_RCC_GetSysClockFreq>
 800b612:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b614:	e009      	b.n	800b62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b61c:	e005      	b.n	800b62a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8130 	beq.w	800b892 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b636:	4a94      	ldr	r2, [pc, #592]	@ (800b888 <UART_SetConfig+0x5c4>)
 800b638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b640:	fbb3 f3f2 	udiv	r3, r3, r2
 800b644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	429a      	cmp	r2, r3
 800b654:	d305      	bcc.n	800b662 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d903      	bls.n	800b66a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b668:	e113      	b.n	800b892 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	2200      	movs	r2, #0
 800b66e:	60bb      	str	r3, [r7, #8]
 800b670:	60fa      	str	r2, [r7, #12]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b676:	4a84      	ldr	r2, [pc, #528]	@ (800b888 <UART_SetConfig+0x5c4>)
 800b678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	2200      	movs	r2, #0
 800b680:	603b      	str	r3, [r7, #0]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b68c:	f7f5 fb98 	bl	8000dc0 <__aeabi_uldivmod>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4610      	mov	r0, r2
 800b696:	4619      	mov	r1, r3
 800b698:	f04f 0200 	mov.w	r2, #0
 800b69c:	f04f 0300 	mov.w	r3, #0
 800b6a0:	020b      	lsls	r3, r1, #8
 800b6a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6a6:	0202      	lsls	r2, r0, #8
 800b6a8:	6979      	ldr	r1, [r7, #20]
 800b6aa:	6849      	ldr	r1, [r1, #4]
 800b6ac:	0849      	lsrs	r1, r1, #1
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	eb12 0804 	adds.w	r8, r2, r4
 800b6b8:	eb43 0905 	adc.w	r9, r3, r5
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	469a      	mov	sl, r3
 800b6c4:	4693      	mov	fp, r2
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	f7f5 fb77 	bl	8000dc0 <__aeabi_uldivmod>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6e0:	d308      	bcc.n	800b6f4 <UART_SetConfig+0x430>
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6e8:	d204      	bcs.n	800b6f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6a3a      	ldr	r2, [r7, #32]
 800b6f0:	60da      	str	r2, [r3, #12]
 800b6f2:	e0ce      	b.n	800b892 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b6fa:	e0ca      	b.n	800b892 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	69db      	ldr	r3, [r3, #28]
 800b700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b704:	d166      	bne.n	800b7d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b70a:	2b08      	cmp	r3, #8
 800b70c:	d827      	bhi.n	800b75e <UART_SetConfig+0x49a>
 800b70e:	a201      	add	r2, pc, #4	@ (adr r2, 800b714 <UART_SetConfig+0x450>)
 800b710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b714:	0800b739 	.word	0x0800b739
 800b718:	0800b741 	.word	0x0800b741
 800b71c:	0800b749 	.word	0x0800b749
 800b720:	0800b75f 	.word	0x0800b75f
 800b724:	0800b74f 	.word	0x0800b74f
 800b728:	0800b75f 	.word	0x0800b75f
 800b72c:	0800b75f 	.word	0x0800b75f
 800b730:	0800b75f 	.word	0x0800b75f
 800b734:	0800b757 	.word	0x0800b757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b738:	f7fb ff76 	bl	8007628 <HAL_RCC_GetPCLK1Freq>
 800b73c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b73e:	e014      	b.n	800b76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b740:	f7fb ff88 	bl	8007654 <HAL_RCC_GetPCLK2Freq>
 800b744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b746:	e010      	b.n	800b76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b748:	4b4e      	ldr	r3, [pc, #312]	@ (800b884 <UART_SetConfig+0x5c0>)
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b74c:	e00d      	b.n	800b76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b74e:	f7fb fefd 	bl	800754c <HAL_RCC_GetSysClockFreq>
 800b752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b754:	e009      	b.n	800b76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b75a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b75c:	e005      	b.n	800b76a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 8090 	beq.w	800b892 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b776:	4a44      	ldr	r2, [pc, #272]	@ (800b888 <UART_SetConfig+0x5c4>)
 800b778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b77c:	461a      	mov	r2, r3
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	fbb3 f3f2 	udiv	r3, r3, r2
 800b784:	005a      	lsls	r2, r3, #1
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	085b      	lsrs	r3, r3, #1
 800b78c:	441a      	add	r2, r3
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	fbb2 f3f3 	udiv	r3, r2, r3
 800b796:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	2b0f      	cmp	r3, #15
 800b79c:	d916      	bls.n	800b7cc <UART_SetConfig+0x508>
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7a4:	d212      	bcs.n	800b7cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	f023 030f 	bic.w	r3, r3, #15
 800b7ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	8bfb      	ldrh	r3, [r7, #30]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	8bfa      	ldrh	r2, [r7, #30]
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	e062      	b.n	800b892 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7d2:	e05e      	b.n	800b892 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7d8:	2b08      	cmp	r3, #8
 800b7da:	d828      	bhi.n	800b82e <UART_SetConfig+0x56a>
 800b7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e4 <UART_SetConfig+0x520>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b809 	.word	0x0800b809
 800b7e8:	0800b811 	.word	0x0800b811
 800b7ec:	0800b819 	.word	0x0800b819
 800b7f0:	0800b82f 	.word	0x0800b82f
 800b7f4:	0800b81f 	.word	0x0800b81f
 800b7f8:	0800b82f 	.word	0x0800b82f
 800b7fc:	0800b82f 	.word	0x0800b82f
 800b800:	0800b82f 	.word	0x0800b82f
 800b804:	0800b827 	.word	0x0800b827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b808:	f7fb ff0e 	bl	8007628 <HAL_RCC_GetPCLK1Freq>
 800b80c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b80e:	e014      	b.n	800b83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b810:	f7fb ff20 	bl	8007654 <HAL_RCC_GetPCLK2Freq>
 800b814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b816:	e010      	b.n	800b83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b818:	4b1a      	ldr	r3, [pc, #104]	@ (800b884 <UART_SetConfig+0x5c0>)
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b81c:	e00d      	b.n	800b83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b81e:	f7fb fe95 	bl	800754c <HAL_RCC_GetSysClockFreq>
 800b822:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b824:	e009      	b.n	800b83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b82a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b82c:	e005      	b.n	800b83a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b838:	bf00      	nop
    }

    if (pclk != 0U)
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d028      	beq.n	800b892 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b844:	4a10      	ldr	r2, [pc, #64]	@ (800b888 <UART_SetConfig+0x5c4>)
 800b846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b84a:	461a      	mov	r2, r3
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	441a      	add	r2, r3
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b862:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	2b0f      	cmp	r3, #15
 800b868:	d910      	bls.n	800b88c <UART_SetConfig+0x5c8>
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b870:	d20c      	bcs.n	800b88c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	b29a      	uxth	r2, r3
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	e009      	b.n	800b892 <UART_SetConfig+0x5ce>
 800b87e:	bf00      	nop
 800b880:	40008000 	.word	0x40008000
 800b884:	00f42400 	.word	0x00f42400
 800b888:	08023590 	.word	0x08023590
      }
      else
      {
        ret = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2201      	movs	r2, #1
 800b896:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3730      	adds	r7, #48	@ 0x30
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b8bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c8:	f003 0308 	and.w	r3, r3, #8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00a      	beq.n	800b8e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00a      	beq.n	800b92a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	430a      	orrs	r2, r1
 800b94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b950:	f003 0310 	and.w	r3, r3, #16
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00a      	beq.n	800b96e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01a      	beq.n	800b9d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9ba:	d10a      	bne.n	800b9d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	605a      	str	r2, [r3, #4]
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b098      	sub	sp, #96	@ 0x60
 800ba04:	af02      	add	r7, sp, #8
 800ba06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba10:	f7fa fa82 	bl	8005f18 <HAL_GetTick>
 800ba14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 0308 	and.w	r3, r3, #8
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d12f      	bne.n	800ba84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f88e 	bl	800bb54 <UART_WaitOnFlagUntilTimeout>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d022      	beq.n	800ba84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba52:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba64:	e841 2300 	strex	r3, r2, [r1]
 800ba68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e6      	bne.n	800ba3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2220      	movs	r2, #32
 800ba74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e063      	b.n	800bb4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0304 	and.w	r3, r3, #4
 800ba8e:	2b04      	cmp	r3, #4
 800ba90:	d149      	bne.n	800bb26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f857 	bl	800bb54 <UART_WaitOnFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d03c      	beq.n	800bb26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	e853 3f00 	ldrex	r3, [r3]
 800bab8:	623b      	str	r3, [r7, #32]
   return(result);
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bacc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad2:	e841 2300 	strex	r3, r2, [r1]
 800bad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e6      	bne.n	800baac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3308      	adds	r3, #8
 800bae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	e853 3f00 	ldrex	r3, [r3]
 800baec:	60fb      	str	r3, [r7, #12]
   return(result);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f023 0301 	bic.w	r3, r3, #1
 800baf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3308      	adds	r3, #8
 800bafc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bafe:	61fa      	str	r2, [r7, #28]
 800bb00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb02:	69b9      	ldr	r1, [r7, #24]
 800bb04:	69fa      	ldr	r2, [r7, #28]
 800bb06:	e841 2300 	strex	r3, r2, [r1]
 800bb0a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e5      	bne.n	800bade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e012      	b.n	800bb4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2220      	movs	r2, #32
 800bb32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3758      	adds	r7, #88	@ 0x58
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	4613      	mov	r3, r2
 800bb62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb64:	e04f      	b.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6c:	d04b      	beq.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6e:	f7fa f9d3 	bl	8005f18 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d302      	bcc.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e04e      	b.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 0304 	and.w	r3, r3, #4
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d037      	beq.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2b80      	cmp	r3, #128	@ 0x80
 800bb9a:	d034      	beq.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2b40      	cmp	r3, #64	@ 0x40
 800bba0:	d031      	beq.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	f003 0308 	and.w	r3, r3, #8
 800bbac:	2b08      	cmp	r3, #8
 800bbae:	d110      	bne.n	800bbd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2208      	movs	r2, #8
 800bbb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f920 	bl	800bdfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e029      	b.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbe0:	d111      	bne.n	800bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 f906 	bl	800bdfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e00f      	b.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	69da      	ldr	r2, [r3, #28]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	4013      	ands	r3, r2
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	bf0c      	ite	eq
 800bc16:	2301      	moveq	r3, #1
 800bc18:	2300      	movne	r3, #0
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d0a0      	beq.n	800bb66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b096      	sub	sp, #88	@ 0x58
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	88fa      	ldrh	r2, [r7, #6]
 800bc48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2222      	movs	r2, #34	@ 0x22
 800bc58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d02d      	beq.n	800bcc2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc6c:	4a40      	ldr	r2, [pc, #256]	@ (800bd70 <UART_Start_Receive_DMA+0x140>)
 800bc6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc76:	4a3f      	ldr	r2, [pc, #252]	@ (800bd74 <UART_Start_Receive_DMA+0x144>)
 800bc78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc80:	4a3d      	ldr	r2, [pc, #244]	@ (800bd78 <UART_Start_Receive_DMA+0x148>)
 800bc82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3324      	adds	r3, #36	@ 0x24
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca0:	461a      	mov	r2, r3
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	f7fa fafc 	bl	80062a0 <HAL_DMA_Start_IT>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2210      	movs	r2, #16
 800bcb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2220      	movs	r2, #32
 800bcba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e051      	b.n	800bd66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d018      	beq.n	800bcfc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcde:	657b      	str	r3, [r7, #84]	@ 0x54
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	461a      	mov	r2, r3
 800bce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bcee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e6      	bne.n	800bcca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3308      	adds	r3, #8
 800bd1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd1c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bd1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e5      	bne.n	800bcfc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd50:	623a      	str	r2, [r7, #32]
 800bd52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	69f9      	ldr	r1, [r7, #28]
 800bd56:	6a3a      	ldr	r2, [r7, #32]
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e5      	bne.n	800bd30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3758      	adds	r7, #88	@ 0x58
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	0800bf89 	.word	0x0800bf89
 800bd74:	0800c0bd 	.word	0x0800c0bd
 800bd78:	0800c103 	.word	0x0800c103

0800bd7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b08f      	sub	sp, #60	@ 0x3c
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bd98:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bda2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bda4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bda8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e6      	bne.n	800bd84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3308      	adds	r3, #8
 800bdbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bdcc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdd6:	61ba      	str	r2, [r7, #24]
 800bdd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdda:	6979      	ldr	r1, [r7, #20]
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	e841 2300 	strex	r3, r2, [r1]
 800bde2:	613b      	str	r3, [r7, #16]
   return(result);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1e5      	bne.n	800bdb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bdf2:	bf00      	nop
 800bdf4:	373c      	adds	r7, #60	@ 0x3c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b095      	sub	sp, #84	@ 0x54
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	461a      	mov	r2, r3
 800be22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be24:	643b      	str	r3, [r7, #64]	@ 0x40
 800be26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e6      	bne.n	800be06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3308      	adds	r3, #8
 800be3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	61fb      	str	r3, [r7, #28]
   return(result);
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be4e:	f023 0301 	bic.w	r3, r3, #1
 800be52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3308      	adds	r3, #8
 800be5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be64:	e841 2300 	strex	r3, r2, [r1]
 800be68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1e3      	bne.n	800be38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d118      	bne.n	800beaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	60bb      	str	r3, [r7, #8]
   return(result);
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f023 0310 	bic.w	r3, r3, #16
 800be8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be96:	61bb      	str	r3, [r7, #24]
 800be98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9a:	6979      	ldr	r1, [r7, #20]
 800be9c:	69ba      	ldr	r2, [r7, #24]
 800be9e:	e841 2300 	strex	r3, r2, [r1]
 800bea2:	613b      	str	r3, [r7, #16]
   return(result);
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1e6      	bne.n	800be78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2220      	movs	r2, #32
 800beae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bebe:	bf00      	nop
 800bec0:	3754      	adds	r7, #84	@ 0x54
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b090      	sub	sp, #64	@ 0x40
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 0320 	and.w	r3, r3, #32
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d137      	bne.n	800bf56 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee8:	2200      	movs	r2, #0
 800beea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800beee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3308      	adds	r3, #8
 800bef4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef8:	e853 3f00 	ldrex	r3, [r3]
 800befc:	623b      	str	r3, [r7, #32]
   return(result);
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf0e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf16:	e841 2300 	strex	r3, r2, [r1]
 800bf1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e5      	bne.n	800beee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf40:	61fb      	str	r3, [r7, #28]
 800bf42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf44:	69b9      	ldr	r1, [r7, #24]
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	e841 2300 	strex	r3, r2, [r1]
 800bf4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e6      	bne.n	800bf22 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf54:	e004      	b.n	800bf60 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bf56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf5c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bf5e:	4798      	blx	r3
}
 800bf60:	bf00      	nop
 800bf62:	3740      	adds	r7, #64	@ 0x40
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b09c      	sub	sp, #112	@ 0x70
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0320 	and.w	r3, r3, #32
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d171      	bne.n	800c088 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bfa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bfba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bfd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bfd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e6      	bne.n	800bfac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	667b      	str	r3, [r7, #100]	@ 0x64
 800bff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3308      	adds	r3, #8
 800bffc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bffe:	647a      	str	r2, [r7, #68]	@ 0x44
 800c000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c006:	e841 2300 	strex	r3, r2, [r1]
 800c00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1e5      	bne.n	800bfde <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3308      	adds	r3, #8
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	623b      	str	r3, [r7, #32]
   return(result);
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c028:	663b      	str	r3, [r7, #96]	@ 0x60
 800c02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3308      	adds	r3, #8
 800c030:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c032:	633a      	str	r2, [r7, #48]	@ 0x30
 800c034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e5      	bne.n	800c012 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c048:	2220      	movs	r2, #32
 800c04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c04e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c052:	2b01      	cmp	r3, #1
 800c054:	d118      	bne.n	800c088 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	60fb      	str	r3, [r7, #12]
   return(result);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0310 	bic.w	r3, r3, #16
 800c06a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c06c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c074:	61fb      	str	r3, [r7, #28]
 800c076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	69b9      	ldr	r1, [r7, #24]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	617b      	str	r3, [r7, #20]
   return(result);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e6      	bne.n	800c056 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c08a:	2200      	movs	r2, #0
 800c08c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c092:	2b01      	cmp	r3, #1
 800c094:	d109      	bne.n	800c0aa <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c09c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c09e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0a6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0a8:	e004      	b.n	800c0b4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c0aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c0b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0b2:	4798      	blx	r3
}
 800c0b4:	bf00      	nop
 800c0b6:	3770      	adds	r7, #112	@ 0x70
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10b      	bne.n	800c0f0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c0e4:	0852      	lsrs	r2, r2, #1
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0ee:	e004      	b.n	800c0fa <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	4798      	blx	r3
}
 800c0fa:	bf00      	nop
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b086      	sub	sp, #24
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c10e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c116:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c12a:	2b80      	cmp	r3, #128	@ 0x80
 800c12c:	d109      	bne.n	800c142 <UART_DMAError+0x40>
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2b21      	cmp	r3, #33	@ 0x21
 800c132:	d106      	bne.n	800c142 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c13c:	6978      	ldr	r0, [r7, #20]
 800c13e:	f7ff fe1d 	bl	800bd7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14c:	2b40      	cmp	r3, #64	@ 0x40
 800c14e:	d109      	bne.n	800c164 <UART_DMAError+0x62>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b22      	cmp	r3, #34	@ 0x22
 800c154:	d106      	bne.n	800c164 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2200      	movs	r2, #0
 800c15a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c15e:	6978      	ldr	r0, [r7, #20]
 800c160:	f7ff fe4d 	bl	800bdfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c16a:	f043 0210 	orr.w	r2, r3, #16
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c17e:	bf00      	nop
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b088      	sub	sp, #32
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	61bb      	str	r3, [r7, #24]
 800c1d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6979      	ldr	r1, [r7, #20]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e6      	bne.n	800c1b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c200:	bf00      	nop
 800c202:	3720      	adds	r7, #32
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c252:	2b01      	cmp	r3, #1
 800c254:	d101      	bne.n	800c25a <HAL_UARTEx_DisableFifoMode+0x16>
 800c256:	2302      	movs	r3, #2
 800c258:	e027      	b.n	800c2aa <HAL_UARTEx_DisableFifoMode+0x66>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2224      	movs	r2, #36	@ 0x24
 800c266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 0201 	bic.w	r2, r2, #1
 800c280:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2220      	movs	r2, #32
 800c29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d101      	bne.n	800c2ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e02d      	b.n	800c32a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2224      	movs	r2, #36	@ 0x24
 800c2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f022 0201 	bic.w	r2, r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	430a      	orrs	r2, r1
 800c308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f850 	bl	800c3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c346:	2302      	movs	r3, #2
 800c348:	e02d      	b.n	800c3a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2224      	movs	r2, #36	@ 0x24
 800c356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f022 0201 	bic.w	r2, r2, #1
 800c370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	430a      	orrs	r2, r1
 800c384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f812 	bl	800c3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d108      	bne.n	800c3d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3d0:	e031      	b.n	800c436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	0e5b      	lsrs	r3, r3, #25
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	f003 0307 	and.w	r3, r3, #7
 800c3e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	0f5b      	lsrs	r3, r3, #29
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f003 0307 	and.w	r3, r3, #7
 800c3f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	7b3a      	ldrb	r2, [r7, #12]
 800c3fe:	4911      	ldr	r1, [pc, #68]	@ (800c444 <UARTEx_SetNbDataToProcess+0x94>)
 800c400:	5c8a      	ldrb	r2, [r1, r2]
 800c402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c406:	7b3a      	ldrb	r2, [r7, #12]
 800c408:	490f      	ldr	r1, [pc, #60]	@ (800c448 <UARTEx_SetNbDataToProcess+0x98>)
 800c40a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c40c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c410:	b29a      	uxth	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	7b7a      	ldrb	r2, [r7, #13]
 800c41c:	4909      	ldr	r1, [pc, #36]	@ (800c444 <UARTEx_SetNbDataToProcess+0x94>)
 800c41e:	5c8a      	ldrb	r2, [r1, r2]
 800c420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c424:	7b7a      	ldrb	r2, [r7, #13]
 800c426:	4908      	ldr	r1, [pc, #32]	@ (800c448 <UARTEx_SetNbDataToProcess+0x98>)
 800c428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c42e:	b29a      	uxth	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c436:	bf00      	nop
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	080235a8 	.word	0x080235a8
 800c448:	080235b0 	.word	0x080235b0

0800c44c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	ed93 7a06 	vldr	s14, [r3, #24]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c462:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	edd3 7a08 	vldr	s15, [r3, #32]
 800c46c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	edd3 7a06 	vldr	s15, [r3, #24]
 800c47c:	eeb1 7a67 	vneg.f32	s14, s15
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	edd3 7a08 	vldr	s15, [r3, #32]
 800c486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a1a      	ldr	r2, [r3, #32]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	220c      	movs	r2, #12
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f804 	bl	800c4b8 <memset>
  }

}
 800c4b0:	bf00      	nop
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <memset>:
 800c4b8:	4402      	add	r2, r0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d100      	bne.n	800c4c2 <memset+0xa>
 800c4c0:	4770      	bx	lr
 800c4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c6:	e7f9      	b.n	800c4bc <memset+0x4>

0800c4c8 <__errno>:
 800c4c8:	4b01      	ldr	r3, [pc, #4]	@ (800c4d0 <__errno+0x8>)
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	2000023c 	.word	0x2000023c

0800c4d4 <__libc_init_array>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	4d0d      	ldr	r5, [pc, #52]	@ (800c50c <__libc_init_array+0x38>)
 800c4d8:	4c0d      	ldr	r4, [pc, #52]	@ (800c510 <__libc_init_array+0x3c>)
 800c4da:	1b64      	subs	r4, r4, r5
 800c4dc:	10a4      	asrs	r4, r4, #2
 800c4de:	2600      	movs	r6, #0
 800c4e0:	42a6      	cmp	r6, r4
 800c4e2:	d109      	bne.n	800c4f8 <__libc_init_array+0x24>
 800c4e4:	4d0b      	ldr	r5, [pc, #44]	@ (800c514 <__libc_init_array+0x40>)
 800c4e6:	4c0c      	ldr	r4, [pc, #48]	@ (800c518 <__libc_init_array+0x44>)
 800c4e8:	f000 ff32 	bl	800d350 <_init>
 800c4ec:	1b64      	subs	r4, r4, r5
 800c4ee:	10a4      	asrs	r4, r4, #2
 800c4f0:	2600      	movs	r6, #0
 800c4f2:	42a6      	cmp	r6, r4
 800c4f4:	d105      	bne.n	800c502 <__libc_init_array+0x2e>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fc:	4798      	blx	r3
 800c4fe:	3601      	adds	r6, #1
 800c500:	e7ee      	b.n	800c4e0 <__libc_init_array+0xc>
 800c502:	f855 3b04 	ldr.w	r3, [r5], #4
 800c506:	4798      	blx	r3
 800c508:	3601      	adds	r6, #1
 800c50a:	e7f2      	b.n	800c4f2 <__libc_init_array+0x1e>
 800c50c:	080239c8 	.word	0x080239c8
 800c510:	080239c8 	.word	0x080239c8
 800c514:	080239c8 	.word	0x080239c8
 800c518:	080239cc 	.word	0x080239cc

0800c51c <memcpy>:
 800c51c:	440a      	add	r2, r1
 800c51e:	4291      	cmp	r1, r2
 800c520:	f100 33ff 	add.w	r3, r0, #4294967295
 800c524:	d100      	bne.n	800c528 <memcpy+0xc>
 800c526:	4770      	bx	lr
 800c528:	b510      	push	{r4, lr}
 800c52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c532:	4291      	cmp	r1, r2
 800c534:	d1f9      	bne.n	800c52a <memcpy+0xe>
 800c536:	bd10      	pop	{r4, pc}

0800c538 <atan2f>:
 800c538:	f000 b94c 	b.w	800c7d4 <__ieee754_atan2f>

0800c53c <sqrtf>:
 800c53c:	b508      	push	{r3, lr}
 800c53e:	ed2d 8b02 	vpush	{d8}
 800c542:	eeb0 8a40 	vmov.f32	s16, s0
 800c546:	f000 f8a1 	bl	800c68c <__ieee754_sqrtf>
 800c54a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c552:	d60c      	bvs.n	800c56e <sqrtf+0x32>
 800c554:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c574 <sqrtf+0x38>
 800c558:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c560:	d505      	bpl.n	800c56e <sqrtf+0x32>
 800c562:	f7ff ffb1 	bl	800c4c8 <__errno>
 800c566:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c56a:	2321      	movs	r3, #33	@ 0x21
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	ecbd 8b02 	vpop	{d8}
 800c572:	bd08      	pop	{r3, pc}
 800c574:	00000000 	.word	0x00000000

0800c578 <cosf>:
 800c578:	ee10 3a10 	vmov	r3, s0
 800c57c:	b507      	push	{r0, r1, r2, lr}
 800c57e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5f8 <cosf+0x80>)
 800c580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c584:	4293      	cmp	r3, r2
 800c586:	d806      	bhi.n	800c596 <cosf+0x1e>
 800c588:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c5fc <cosf+0x84>
 800c58c:	b003      	add	sp, #12
 800c58e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c592:	f000 b87f 	b.w	800c694 <__kernel_cosf>
 800c596:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c59a:	d304      	bcc.n	800c5a6 <cosf+0x2e>
 800c59c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c5a0:	b003      	add	sp, #12
 800c5a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5a6:	4668      	mov	r0, sp
 800c5a8:	f000 f9b4 	bl	800c914 <__ieee754_rem_pio2f>
 800c5ac:	f000 0003 	and.w	r0, r0, #3
 800c5b0:	2801      	cmp	r0, #1
 800c5b2:	d009      	beq.n	800c5c8 <cosf+0x50>
 800c5b4:	2802      	cmp	r0, #2
 800c5b6:	d010      	beq.n	800c5da <cosf+0x62>
 800c5b8:	b9b0      	cbnz	r0, 800c5e8 <cosf+0x70>
 800c5ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5be:	ed9d 0a00 	vldr	s0, [sp]
 800c5c2:	f000 f867 	bl	800c694 <__kernel_cosf>
 800c5c6:	e7eb      	b.n	800c5a0 <cosf+0x28>
 800c5c8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5cc:	ed9d 0a00 	vldr	s0, [sp]
 800c5d0:	f000 f8b8 	bl	800c744 <__kernel_sinf>
 800c5d4:	eeb1 0a40 	vneg.f32	s0, s0
 800c5d8:	e7e2      	b.n	800c5a0 <cosf+0x28>
 800c5da:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5de:	ed9d 0a00 	vldr	s0, [sp]
 800c5e2:	f000 f857 	bl	800c694 <__kernel_cosf>
 800c5e6:	e7f5      	b.n	800c5d4 <cosf+0x5c>
 800c5e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5ec:	ed9d 0a00 	vldr	s0, [sp]
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	f000 f8a7 	bl	800c744 <__kernel_sinf>
 800c5f6:	e7d3      	b.n	800c5a0 <cosf+0x28>
 800c5f8:	3f490fd8 	.word	0x3f490fd8
 800c5fc:	00000000 	.word	0x00000000

0800c600 <sinf>:
 800c600:	ee10 3a10 	vmov	r3, s0
 800c604:	b507      	push	{r0, r1, r2, lr}
 800c606:	4a1f      	ldr	r2, [pc, #124]	@ (800c684 <sinf+0x84>)
 800c608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d807      	bhi.n	800c620 <sinf+0x20>
 800c610:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c688 <sinf+0x88>
 800c614:	2000      	movs	r0, #0
 800c616:	b003      	add	sp, #12
 800c618:	f85d eb04 	ldr.w	lr, [sp], #4
 800c61c:	f000 b892 	b.w	800c744 <__kernel_sinf>
 800c620:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c624:	d304      	bcc.n	800c630 <sinf+0x30>
 800c626:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c62a:	b003      	add	sp, #12
 800c62c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c630:	4668      	mov	r0, sp
 800c632:	f000 f96f 	bl	800c914 <__ieee754_rem_pio2f>
 800c636:	f000 0003 	and.w	r0, r0, #3
 800c63a:	2801      	cmp	r0, #1
 800c63c:	d00a      	beq.n	800c654 <sinf+0x54>
 800c63e:	2802      	cmp	r0, #2
 800c640:	d00f      	beq.n	800c662 <sinf+0x62>
 800c642:	b9c0      	cbnz	r0, 800c676 <sinf+0x76>
 800c644:	eddd 0a01 	vldr	s1, [sp, #4]
 800c648:	ed9d 0a00 	vldr	s0, [sp]
 800c64c:	2001      	movs	r0, #1
 800c64e:	f000 f879 	bl	800c744 <__kernel_sinf>
 800c652:	e7ea      	b.n	800c62a <sinf+0x2a>
 800c654:	eddd 0a01 	vldr	s1, [sp, #4]
 800c658:	ed9d 0a00 	vldr	s0, [sp]
 800c65c:	f000 f81a 	bl	800c694 <__kernel_cosf>
 800c660:	e7e3      	b.n	800c62a <sinf+0x2a>
 800c662:	eddd 0a01 	vldr	s1, [sp, #4]
 800c666:	ed9d 0a00 	vldr	s0, [sp]
 800c66a:	2001      	movs	r0, #1
 800c66c:	f000 f86a 	bl	800c744 <__kernel_sinf>
 800c670:	eeb1 0a40 	vneg.f32	s0, s0
 800c674:	e7d9      	b.n	800c62a <sinf+0x2a>
 800c676:	eddd 0a01 	vldr	s1, [sp, #4]
 800c67a:	ed9d 0a00 	vldr	s0, [sp]
 800c67e:	f000 f809 	bl	800c694 <__kernel_cosf>
 800c682:	e7f5      	b.n	800c670 <sinf+0x70>
 800c684:	3f490fd8 	.word	0x3f490fd8
 800c688:	00000000 	.word	0x00000000

0800c68c <__ieee754_sqrtf>:
 800c68c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c690:	4770      	bx	lr
	...

0800c694 <__kernel_cosf>:
 800c694:	ee10 3a10 	vmov	r3, s0
 800c698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c69c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c6a0:	eef0 6a40 	vmov.f32	s13, s0
 800c6a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c6a8:	d204      	bcs.n	800c6b4 <__kernel_cosf+0x20>
 800c6aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c6ae:	ee17 2a90 	vmov	r2, s15
 800c6b2:	b342      	cbz	r2, 800c706 <__kernel_cosf+0x72>
 800c6b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c6b8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c724 <__kernel_cosf+0x90>
 800c6bc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c728 <__kernel_cosf+0x94>
 800c6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800c72c <__kernel_cosf+0x98>)
 800c6c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c730 <__kernel_cosf+0x9c>
 800c6cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6d0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c734 <__kernel_cosf+0xa0>
 800c6d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6d8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c738 <__kernel_cosf+0xa4>
 800c6dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6e0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c73c <__kernel_cosf+0xa8>
 800c6e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6e8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c6ec:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c6f0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c6f4:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fc:	d804      	bhi.n	800c708 <__kernel_cosf+0x74>
 800c6fe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c702:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c706:	4770      	bx	lr
 800c708:	4a0d      	ldr	r2, [pc, #52]	@ (800c740 <__kernel_cosf+0xac>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	bf9a      	itte	ls
 800c70e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c712:	ee07 3a10 	vmovls	s14, r3
 800c716:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c71a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c71e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c722:	e7ec      	b.n	800c6fe <__kernel_cosf+0x6a>
 800c724:	ad47d74e 	.word	0xad47d74e
 800c728:	310f74f6 	.word	0x310f74f6
 800c72c:	3e999999 	.word	0x3e999999
 800c730:	b493f27c 	.word	0xb493f27c
 800c734:	37d00d01 	.word	0x37d00d01
 800c738:	bab60b61 	.word	0xbab60b61
 800c73c:	3d2aaaab 	.word	0x3d2aaaab
 800c740:	3f480000 	.word	0x3f480000

0800c744 <__kernel_sinf>:
 800c744:	ee10 3a10 	vmov	r3, s0
 800c748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c74c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c750:	d204      	bcs.n	800c75c <__kernel_sinf+0x18>
 800c752:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c756:	ee17 3a90 	vmov	r3, s15
 800c75a:	b35b      	cbz	r3, 800c7b4 <__kernel_sinf+0x70>
 800c75c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c760:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c7b8 <__kernel_sinf+0x74>
 800c764:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c7bc <__kernel_sinf+0x78>
 800c768:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c76c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c7c0 <__kernel_sinf+0x7c>
 800c770:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c774:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c7c4 <__kernel_sinf+0x80>
 800c778:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c77c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c7c8 <__kernel_sinf+0x84>
 800c780:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c784:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c788:	b930      	cbnz	r0, 800c798 <__kernel_sinf+0x54>
 800c78a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c7cc <__kernel_sinf+0x88>
 800c78e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c792:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c796:	4770      	bx	lr
 800c798:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c79c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c7a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c7a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c7a8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c7d0 <__kernel_sinf+0x8c>
 800c7ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c7b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	2f2ec9d3 	.word	0x2f2ec9d3
 800c7bc:	b2d72f34 	.word	0xb2d72f34
 800c7c0:	3638ef1b 	.word	0x3638ef1b
 800c7c4:	b9500d01 	.word	0xb9500d01
 800c7c8:	3c088889 	.word	0x3c088889
 800c7cc:	be2aaaab 	.word	0xbe2aaaab
 800c7d0:	3e2aaaab 	.word	0x3e2aaaab

0800c7d4 <__ieee754_atan2f>:
 800c7d4:	ee10 2a90 	vmov	r2, s1
 800c7d8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c7dc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c7e0:	b510      	push	{r4, lr}
 800c7e2:	eef0 7a40 	vmov.f32	s15, s0
 800c7e6:	d806      	bhi.n	800c7f6 <__ieee754_atan2f+0x22>
 800c7e8:	ee10 0a10 	vmov	r0, s0
 800c7ec:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c7f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c7f4:	d904      	bls.n	800c800 <__ieee754_atan2f+0x2c>
 800c7f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c7fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c7fe:	bd10      	pop	{r4, pc}
 800c800:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c804:	d103      	bne.n	800c80e <__ieee754_atan2f+0x3a>
 800c806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c80a:	f000 b9b3 	b.w	800cb74 <atanf>
 800c80e:	1794      	asrs	r4, r2, #30
 800c810:	f004 0402 	and.w	r4, r4, #2
 800c814:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c818:	b943      	cbnz	r3, 800c82c <__ieee754_atan2f+0x58>
 800c81a:	2c02      	cmp	r4, #2
 800c81c:	d05e      	beq.n	800c8dc <__ieee754_atan2f+0x108>
 800c81e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c8f0 <__ieee754_atan2f+0x11c>
 800c822:	2c03      	cmp	r4, #3
 800c824:	bf08      	it	eq
 800c826:	eef0 7a47 	vmoveq.f32	s15, s14
 800c82a:	e7e6      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c82c:	b941      	cbnz	r1, 800c840 <__ieee754_atan2f+0x6c>
 800c82e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c8f4 <__ieee754_atan2f+0x120>
 800c832:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c8f8 <__ieee754_atan2f+0x124>
 800c836:	2800      	cmp	r0, #0
 800c838:	bfa8      	it	ge
 800c83a:	eef0 7a47 	vmovge.f32	s15, s14
 800c83e:	e7dc      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c840:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c844:	d110      	bne.n	800c868 <__ieee754_atan2f+0x94>
 800c846:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c84a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c84e:	d107      	bne.n	800c860 <__ieee754_atan2f+0x8c>
 800c850:	2c02      	cmp	r4, #2
 800c852:	d846      	bhi.n	800c8e2 <__ieee754_atan2f+0x10e>
 800c854:	4b29      	ldr	r3, [pc, #164]	@ (800c8fc <__ieee754_atan2f+0x128>)
 800c856:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c85a:	edd3 7a00 	vldr	s15, [r3]
 800c85e:	e7cc      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c860:	2c02      	cmp	r4, #2
 800c862:	d841      	bhi.n	800c8e8 <__ieee754_atan2f+0x114>
 800c864:	4b26      	ldr	r3, [pc, #152]	@ (800c900 <__ieee754_atan2f+0x12c>)
 800c866:	e7f6      	b.n	800c856 <__ieee754_atan2f+0x82>
 800c868:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c86c:	d0df      	beq.n	800c82e <__ieee754_atan2f+0x5a>
 800c86e:	1a5b      	subs	r3, r3, r1
 800c870:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c874:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c878:	da1a      	bge.n	800c8b0 <__ieee754_atan2f+0xdc>
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	da01      	bge.n	800c882 <__ieee754_atan2f+0xae>
 800c87e:	313c      	adds	r1, #60	@ 0x3c
 800c880:	db19      	blt.n	800c8b6 <__ieee754_atan2f+0xe2>
 800c882:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c886:	f000 fa49 	bl	800cd1c <fabsf>
 800c88a:	f000 f973 	bl	800cb74 <atanf>
 800c88e:	eef0 7a40 	vmov.f32	s15, s0
 800c892:	2c01      	cmp	r4, #1
 800c894:	d012      	beq.n	800c8bc <__ieee754_atan2f+0xe8>
 800c896:	2c02      	cmp	r4, #2
 800c898:	d017      	beq.n	800c8ca <__ieee754_atan2f+0xf6>
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	d0ad      	beq.n	800c7fa <__ieee754_atan2f+0x26>
 800c89e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c904 <__ieee754_atan2f+0x130>
 800c8a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8a6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c908 <__ieee754_atan2f+0x134>
 800c8aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8ae:	e7a4      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8b0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c8f8 <__ieee754_atan2f+0x124>
 800c8b4:	e7ed      	b.n	800c892 <__ieee754_atan2f+0xbe>
 800c8b6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c90c <__ieee754_atan2f+0x138>
 800c8ba:	e7ea      	b.n	800c892 <__ieee754_atan2f+0xbe>
 800c8bc:	ee17 3a90 	vmov	r3, s15
 800c8c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c8c4:	ee07 3a90 	vmov	s15, r3
 800c8c8:	e797      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c904 <__ieee754_atan2f+0x130>
 800c8ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c908 <__ieee754_atan2f+0x134>
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8da:	e78e      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8dc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c908 <__ieee754_atan2f+0x134>
 800c8e0:	e78b      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8e2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c910 <__ieee754_atan2f+0x13c>
 800c8e6:	e788      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8e8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c90c <__ieee754_atan2f+0x138>
 800c8ec:	e785      	b.n	800c7fa <__ieee754_atan2f+0x26>
 800c8ee:	bf00      	nop
 800c8f0:	c0490fdb 	.word	0xc0490fdb
 800c8f4:	bfc90fdb 	.word	0xbfc90fdb
 800c8f8:	3fc90fdb 	.word	0x3fc90fdb
 800c8fc:	080235c4 	.word	0x080235c4
 800c900:	080235b8 	.word	0x080235b8
 800c904:	33bbbd2e 	.word	0x33bbbd2e
 800c908:	40490fdb 	.word	0x40490fdb
 800c90c:	00000000 	.word	0x00000000
 800c910:	3f490fdb 	.word	0x3f490fdb

0800c914 <__ieee754_rem_pio2f>:
 800c914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c916:	ee10 6a10 	vmov	r6, s0
 800c91a:	4b88      	ldr	r3, [pc, #544]	@ (800cb3c <__ieee754_rem_pio2f+0x228>)
 800c91c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c920:	429d      	cmp	r5, r3
 800c922:	b087      	sub	sp, #28
 800c924:	4604      	mov	r4, r0
 800c926:	d805      	bhi.n	800c934 <__ieee754_rem_pio2f+0x20>
 800c928:	2300      	movs	r3, #0
 800c92a:	ed80 0a00 	vstr	s0, [r0]
 800c92e:	6043      	str	r3, [r0, #4]
 800c930:	2000      	movs	r0, #0
 800c932:	e022      	b.n	800c97a <__ieee754_rem_pio2f+0x66>
 800c934:	4b82      	ldr	r3, [pc, #520]	@ (800cb40 <__ieee754_rem_pio2f+0x22c>)
 800c936:	429d      	cmp	r5, r3
 800c938:	d83a      	bhi.n	800c9b0 <__ieee754_rem_pio2f+0x9c>
 800c93a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c93e:	2e00      	cmp	r6, #0
 800c940:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800cb44 <__ieee754_rem_pio2f+0x230>
 800c944:	4a80      	ldr	r2, [pc, #512]	@ (800cb48 <__ieee754_rem_pio2f+0x234>)
 800c946:	f023 030f 	bic.w	r3, r3, #15
 800c94a:	dd18      	ble.n	800c97e <__ieee754_rem_pio2f+0x6a>
 800c94c:	4293      	cmp	r3, r2
 800c94e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c952:	bf09      	itett	eq
 800c954:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800cb4c <__ieee754_rem_pio2f+0x238>
 800c958:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800cb50 <__ieee754_rem_pio2f+0x23c>
 800c95c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800cb54 <__ieee754_rem_pio2f+0x240>
 800c960:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c964:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c96c:	ed80 7a00 	vstr	s14, [r0]
 800c970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c974:	edc0 7a01 	vstr	s15, [r0, #4]
 800c978:	2001      	movs	r0, #1
 800c97a:	b007      	add	sp, #28
 800c97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c97e:	4293      	cmp	r3, r2
 800c980:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c984:	bf09      	itett	eq
 800c986:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800cb4c <__ieee754_rem_pio2f+0x238>
 800c98a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800cb50 <__ieee754_rem_pio2f+0x23c>
 800c98e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800cb54 <__ieee754_rem_pio2f+0x240>
 800c992:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c996:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c99a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c99e:	ed80 7a00 	vstr	s14, [r0]
 800c9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a6:	edc0 7a01 	vstr	s15, [r0, #4]
 800c9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ae:	e7e4      	b.n	800c97a <__ieee754_rem_pio2f+0x66>
 800c9b0:	4b69      	ldr	r3, [pc, #420]	@ (800cb58 <__ieee754_rem_pio2f+0x244>)
 800c9b2:	429d      	cmp	r5, r3
 800c9b4:	d873      	bhi.n	800ca9e <__ieee754_rem_pio2f+0x18a>
 800c9b6:	f000 f9b1 	bl	800cd1c <fabsf>
 800c9ba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cb5c <__ieee754_rem_pio2f+0x248>
 800c9be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c9c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c9c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9ce:	ee17 0a90 	vmov	r0, s15
 800c9d2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cb44 <__ieee754_rem_pio2f+0x230>
 800c9d6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c9da:	281f      	cmp	r0, #31
 800c9dc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cb50 <__ieee754_rem_pio2f+0x23c>
 800c9e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e4:	eeb1 6a47 	vneg.f32	s12, s14
 800c9e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c9ec:	ee16 1a90 	vmov	r1, s13
 800c9f0:	dc09      	bgt.n	800ca06 <__ieee754_rem_pio2f+0xf2>
 800c9f2:	4a5b      	ldr	r2, [pc, #364]	@ (800cb60 <__ieee754_rem_pio2f+0x24c>)
 800c9f4:	1e47      	subs	r7, r0, #1
 800c9f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c9fa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c9fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d107      	bne.n	800ca16 <__ieee754_rem_pio2f+0x102>
 800ca06:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ca0a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ca0e:	2a08      	cmp	r2, #8
 800ca10:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ca14:	dc14      	bgt.n	800ca40 <__ieee754_rem_pio2f+0x12c>
 800ca16:	6021      	str	r1, [r4, #0]
 800ca18:	ed94 7a00 	vldr	s14, [r4]
 800ca1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca20:	2e00      	cmp	r6, #0
 800ca22:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca26:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca2a:	daa6      	bge.n	800c97a <__ieee754_rem_pio2f+0x66>
 800ca2c:	eeb1 7a47 	vneg.f32	s14, s14
 800ca30:	eeb1 0a40 	vneg.f32	s0, s0
 800ca34:	ed84 7a00 	vstr	s14, [r4]
 800ca38:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca3c:	4240      	negs	r0, r0
 800ca3e:	e79c      	b.n	800c97a <__ieee754_rem_pio2f+0x66>
 800ca40:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800cb4c <__ieee754_rem_pio2f+0x238>
 800ca44:	eef0 6a40 	vmov.f32	s13, s0
 800ca48:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ca4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ca50:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ca54:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cb54 <__ieee754_rem_pio2f+0x240>
 800ca58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ca5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ca60:	ee15 2a90 	vmov	r2, s11
 800ca64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ca68:	1a5b      	subs	r3, r3, r1
 800ca6a:	2b19      	cmp	r3, #25
 800ca6c:	dc04      	bgt.n	800ca78 <__ieee754_rem_pio2f+0x164>
 800ca6e:	edc4 5a00 	vstr	s11, [r4]
 800ca72:	eeb0 0a66 	vmov.f32	s0, s13
 800ca76:	e7cf      	b.n	800ca18 <__ieee754_rem_pio2f+0x104>
 800ca78:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800cb64 <__ieee754_rem_pio2f+0x250>
 800ca7c:	eeb0 0a66 	vmov.f32	s0, s13
 800ca80:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ca84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ca88:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800cb68 <__ieee754_rem_pio2f+0x254>
 800ca8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ca90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ca94:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ca98:	ed84 7a00 	vstr	s14, [r4]
 800ca9c:	e7bc      	b.n	800ca18 <__ieee754_rem_pio2f+0x104>
 800ca9e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800caa2:	d306      	bcc.n	800cab2 <__ieee754_rem_pio2f+0x19e>
 800caa4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800caa8:	edc0 7a01 	vstr	s15, [r0, #4]
 800caac:	edc0 7a00 	vstr	s15, [r0]
 800cab0:	e73e      	b.n	800c930 <__ieee754_rem_pio2f+0x1c>
 800cab2:	15ea      	asrs	r2, r5, #23
 800cab4:	3a86      	subs	r2, #134	@ 0x86
 800cab6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cac2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800cb6c <__ieee754_rem_pio2f+0x258>
 800cac6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800caca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cace:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cad6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cae2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800caea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	edcd 7a05 	vstr	s15, [sp, #20]
 800caf6:	d11e      	bne.n	800cb36 <__ieee754_rem_pio2f+0x222>
 800caf8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb00:	bf0c      	ite	eq
 800cb02:	2301      	moveq	r3, #1
 800cb04:	2302      	movne	r3, #2
 800cb06:	491a      	ldr	r1, [pc, #104]	@ (800cb70 <__ieee754_rem_pio2f+0x25c>)
 800cb08:	9101      	str	r1, [sp, #4]
 800cb0a:	2102      	movs	r1, #2
 800cb0c:	9100      	str	r1, [sp, #0]
 800cb0e:	a803      	add	r0, sp, #12
 800cb10:	4621      	mov	r1, r4
 800cb12:	f000 f971 	bl	800cdf8 <__kernel_rem_pio2f>
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	f6bf af2f 	bge.w	800c97a <__ieee754_rem_pio2f+0x66>
 800cb1c:	edd4 7a00 	vldr	s15, [r4]
 800cb20:	eef1 7a67 	vneg.f32	s15, s15
 800cb24:	edc4 7a00 	vstr	s15, [r4]
 800cb28:	edd4 7a01 	vldr	s15, [r4, #4]
 800cb2c:	eef1 7a67 	vneg.f32	s15, s15
 800cb30:	edc4 7a01 	vstr	s15, [r4, #4]
 800cb34:	e782      	b.n	800ca3c <__ieee754_rem_pio2f+0x128>
 800cb36:	2303      	movs	r3, #3
 800cb38:	e7e5      	b.n	800cb06 <__ieee754_rem_pio2f+0x1f2>
 800cb3a:	bf00      	nop
 800cb3c:	3f490fd8 	.word	0x3f490fd8
 800cb40:	4016cbe3 	.word	0x4016cbe3
 800cb44:	3fc90f80 	.word	0x3fc90f80
 800cb48:	3fc90fd0 	.word	0x3fc90fd0
 800cb4c:	37354400 	.word	0x37354400
 800cb50:	37354443 	.word	0x37354443
 800cb54:	2e85a308 	.word	0x2e85a308
 800cb58:	43490f80 	.word	0x43490f80
 800cb5c:	3f22f984 	.word	0x3f22f984
 800cb60:	080235d0 	.word	0x080235d0
 800cb64:	2e85a300 	.word	0x2e85a300
 800cb68:	248d3132 	.word	0x248d3132
 800cb6c:	43800000 	.word	0x43800000
 800cb70:	08023650 	.word	0x08023650

0800cb74 <atanf>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	ee10 5a10 	vmov	r5, s0
 800cb7a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cb7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cb82:	eef0 7a40 	vmov.f32	s15, s0
 800cb86:	d310      	bcc.n	800cbaa <atanf+0x36>
 800cb88:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cb8c:	d904      	bls.n	800cb98 <atanf+0x24>
 800cb8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cb92:	eeb0 0a67 	vmov.f32	s0, s15
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ccd0 <atanf+0x15c>
 800cb9c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ccd4 <atanf+0x160>
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	bfc8      	it	gt
 800cba4:	eef0 7a47 	vmovgt.f32	s15, s14
 800cba8:	e7f3      	b.n	800cb92 <atanf+0x1e>
 800cbaa:	4b4b      	ldr	r3, [pc, #300]	@ (800ccd8 <atanf+0x164>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	d810      	bhi.n	800cbd2 <atanf+0x5e>
 800cbb0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cbb4:	d20a      	bcs.n	800cbcc <atanf+0x58>
 800cbb6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ccdc <atanf+0x168>
 800cbba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cbbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbca:	dce2      	bgt.n	800cb92 <atanf+0x1e>
 800cbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd0:	e013      	b.n	800cbfa <atanf+0x86>
 800cbd2:	f000 f8a3 	bl	800cd1c <fabsf>
 800cbd6:	4b42      	ldr	r3, [pc, #264]	@ (800cce0 <atanf+0x16c>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	d84f      	bhi.n	800cc7c <atanf+0x108>
 800cbdc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cbe0:	429c      	cmp	r4, r3
 800cbe2:	d841      	bhi.n	800cc68 <atanf+0xf4>
 800cbe4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cbe8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cbec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cc00:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cce4 <atanf+0x170>
 800cc04:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800cce8 <atanf+0x174>
 800cc08:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ccec <atanf+0x178>
 800cc0c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cc10:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cc14:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ccf0 <atanf+0x17c>
 800cc18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc1c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ccf4 <atanf+0x180>
 800cc20:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc24:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ccf8 <atanf+0x184>
 800cc28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc2c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ccfc <atanf+0x188>
 800cc30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc34:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800cd00 <atanf+0x18c>
 800cc38:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cc3c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cd04 <atanf+0x190>
 800cc40:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc44:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800cd08 <atanf+0x194>
 800cc48:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cc4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800cd0c <atanf+0x198>
 800cc50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc54:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc58:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cc5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc60:	d121      	bne.n	800cca6 <atanf+0x132>
 800cc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc66:	e794      	b.n	800cb92 <atanf+0x1e>
 800cc68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc70:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc74:	2301      	movs	r3, #1
 800cc76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc7a:	e7be      	b.n	800cbfa <atanf+0x86>
 800cc7c:	4b24      	ldr	r3, [pc, #144]	@ (800cd10 <atanf+0x19c>)
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	d80b      	bhi.n	800cc9a <atanf+0x126>
 800cc82:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cc86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc8e:	2302      	movs	r3, #2
 800cc90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cc94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc98:	e7af      	b.n	800cbfa <atanf+0x86>
 800cc9a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cc9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cca2:	2303      	movs	r3, #3
 800cca4:	e7a9      	b.n	800cbfa <atanf+0x86>
 800cca6:	4a1b      	ldr	r2, [pc, #108]	@ (800cd14 <atanf+0x1a0>)
 800cca8:	491b      	ldr	r1, [pc, #108]	@ (800cd18 <atanf+0x1a4>)
 800ccaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ccae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ccb2:	edd3 6a00 	vldr	s13, [r3]
 800ccb6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ccba:	2d00      	cmp	r5, #0
 800ccbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccc0:	edd2 7a00 	vldr	s15, [r2]
 800ccc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccc8:	bfb8      	it	lt
 800ccca:	eef1 7a67 	vneglt.f32	s15, s15
 800ccce:	e760      	b.n	800cb92 <atanf+0x1e>
 800ccd0:	bfc90fdb 	.word	0xbfc90fdb
 800ccd4:	3fc90fdb 	.word	0x3fc90fdb
 800ccd8:	3edfffff 	.word	0x3edfffff
 800ccdc:	7149f2ca 	.word	0x7149f2ca
 800cce0:	3f97ffff 	.word	0x3f97ffff
 800cce4:	3c8569d7 	.word	0x3c8569d7
 800cce8:	3d4bda59 	.word	0x3d4bda59
 800ccec:	bd6ef16b 	.word	0xbd6ef16b
 800ccf0:	3d886b35 	.word	0x3d886b35
 800ccf4:	3dba2e6e 	.word	0x3dba2e6e
 800ccf8:	3e124925 	.word	0x3e124925
 800ccfc:	3eaaaaab 	.word	0x3eaaaaab
 800cd00:	bd15a221 	.word	0xbd15a221
 800cd04:	bd9d8795 	.word	0xbd9d8795
 800cd08:	bde38e38 	.word	0xbde38e38
 800cd0c:	be4ccccd 	.word	0xbe4ccccd
 800cd10:	401bffff 	.word	0x401bffff
 800cd14:	08023978 	.word	0x08023978
 800cd18:	08023968 	.word	0x08023968

0800cd1c <fabsf>:
 800cd1c:	ee10 3a10 	vmov	r3, s0
 800cd20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd24:	ee00 3a10 	vmov	s0, r3
 800cd28:	4770      	bx	lr
	...

0800cd2c <scalbnf>:
 800cd2c:	ee10 3a10 	vmov	r3, s0
 800cd30:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cd34:	d02b      	beq.n	800cd8e <scalbnf+0x62>
 800cd36:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cd3a:	d302      	bcc.n	800cd42 <scalbnf+0x16>
 800cd3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd40:	4770      	bx	lr
 800cd42:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cd46:	d123      	bne.n	800cd90 <scalbnf+0x64>
 800cd48:	4b24      	ldr	r3, [pc, #144]	@ (800cddc <scalbnf+0xb0>)
 800cd4a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800cde0 <scalbnf+0xb4>
 800cd4e:	4298      	cmp	r0, r3
 800cd50:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cd54:	db17      	blt.n	800cd86 <scalbnf+0x5a>
 800cd56:	ee10 3a10 	vmov	r3, s0
 800cd5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cd5e:	3a19      	subs	r2, #25
 800cd60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cd64:	4288      	cmp	r0, r1
 800cd66:	dd15      	ble.n	800cd94 <scalbnf+0x68>
 800cd68:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800cde4 <scalbnf+0xb8>
 800cd6c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800cde8 <scalbnf+0xbc>
 800cd70:	ee10 3a10 	vmov	r3, s0
 800cd74:	eeb0 7a67 	vmov.f32	s14, s15
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfb8      	it	lt
 800cd7c:	eef0 7a66 	vmovlt.f32	s15, s13
 800cd80:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cd84:	4770      	bx	lr
 800cd86:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cdec <scalbnf+0xc0>
 800cd8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd8e:	4770      	bx	lr
 800cd90:	0dd2      	lsrs	r2, r2, #23
 800cd92:	e7e5      	b.n	800cd60 <scalbnf+0x34>
 800cd94:	4410      	add	r0, r2
 800cd96:	28fe      	cmp	r0, #254	@ 0xfe
 800cd98:	dce6      	bgt.n	800cd68 <scalbnf+0x3c>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	dd06      	ble.n	800cdac <scalbnf+0x80>
 800cd9e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cda2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cda6:	ee00 3a10 	vmov	s0, r3
 800cdaa:	4770      	bx	lr
 800cdac:	f110 0f16 	cmn.w	r0, #22
 800cdb0:	da09      	bge.n	800cdc6 <scalbnf+0x9a>
 800cdb2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800cdec <scalbnf+0xc0>
 800cdb6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800cdf0 <scalbnf+0xc4>
 800cdba:	ee10 3a10 	vmov	r3, s0
 800cdbe:	eeb0 7a67 	vmov.f32	s14, s15
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	e7d9      	b.n	800cd7a <scalbnf+0x4e>
 800cdc6:	3019      	adds	r0, #25
 800cdc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cdcc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cdd0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cdf4 <scalbnf+0xc8>
 800cdd4:	ee07 3a90 	vmov	s15, r3
 800cdd8:	e7d7      	b.n	800cd8a <scalbnf+0x5e>
 800cdda:	bf00      	nop
 800cddc:	ffff3cb0 	.word	0xffff3cb0
 800cde0:	4c000000 	.word	0x4c000000
 800cde4:	7149f2ca 	.word	0x7149f2ca
 800cde8:	f149f2ca 	.word	0xf149f2ca
 800cdec:	0da24260 	.word	0x0da24260
 800cdf0:	8da24260 	.word	0x8da24260
 800cdf4:	33000000 	.word	0x33000000

0800cdf8 <__kernel_rem_pio2f>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	ed2d 8b04 	vpush	{d8-d9}
 800ce00:	b0d9      	sub	sp, #356	@ 0x164
 800ce02:	4690      	mov	r8, r2
 800ce04:	9001      	str	r0, [sp, #4]
 800ce06:	4ab6      	ldr	r2, [pc, #728]	@ (800d0e0 <__kernel_rem_pio2f+0x2e8>)
 800ce08:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ce0a:	f118 0f04 	cmn.w	r8, #4
 800ce0e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ce12:	460f      	mov	r7, r1
 800ce14:	f103 3bff 	add.w	fp, r3, #4294967295
 800ce18:	db26      	blt.n	800ce68 <__kernel_rem_pio2f+0x70>
 800ce1a:	f1b8 0203 	subs.w	r2, r8, #3
 800ce1e:	bf48      	it	mi
 800ce20:	f108 0204 	addmi.w	r2, r8, #4
 800ce24:	10d2      	asrs	r2, r2, #3
 800ce26:	1c55      	adds	r5, r2, #1
 800ce28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ce2a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800ce2e:	00e8      	lsls	r0, r5, #3
 800ce30:	eba2 060b 	sub.w	r6, r2, fp
 800ce34:	9002      	str	r0, [sp, #8]
 800ce36:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ce3a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ce3e:	ac1c      	add	r4, sp, #112	@ 0x70
 800ce40:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ce44:	2000      	movs	r0, #0
 800ce46:	4560      	cmp	r0, ip
 800ce48:	dd10      	ble.n	800ce6c <__kernel_rem_pio2f+0x74>
 800ce4a:	a91c      	add	r1, sp, #112	@ 0x70
 800ce4c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ce50:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ce54:	2600      	movs	r6, #0
 800ce56:	4556      	cmp	r6, sl
 800ce58:	dc24      	bgt.n	800cea4 <__kernel_rem_pio2f+0xac>
 800ce5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ce5e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800ce62:	4684      	mov	ip, r0
 800ce64:	2400      	movs	r4, #0
 800ce66:	e016      	b.n	800ce96 <__kernel_rem_pio2f+0x9e>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	e7dc      	b.n	800ce26 <__kernel_rem_pio2f+0x2e>
 800ce6c:	42c6      	cmn	r6, r0
 800ce6e:	bf5d      	ittte	pl
 800ce70:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ce74:	ee07 1a90 	vmovpl	s15, r1
 800ce78:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ce7c:	eef0 7a47 	vmovmi.f32	s15, s14
 800ce80:	ece4 7a01 	vstmia	r4!, {s15}
 800ce84:	3001      	adds	r0, #1
 800ce86:	e7de      	b.n	800ce46 <__kernel_rem_pio2f+0x4e>
 800ce88:	ecfe 6a01 	vldmia	lr!, {s13}
 800ce8c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800ce90:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce94:	3401      	adds	r4, #1
 800ce96:	455c      	cmp	r4, fp
 800ce98:	ddf6      	ble.n	800ce88 <__kernel_rem_pio2f+0x90>
 800ce9a:	ece9 7a01 	vstmia	r9!, {s15}
 800ce9e:	3601      	adds	r6, #1
 800cea0:	3004      	adds	r0, #4
 800cea2:	e7d8      	b.n	800ce56 <__kernel_rem_pio2f+0x5e>
 800cea4:	a908      	add	r1, sp, #32
 800cea6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceaa:	9104      	str	r1, [sp, #16]
 800ceac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ceae:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d0ec <__kernel_rem_pio2f+0x2f4>
 800ceb2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d0e8 <__kernel_rem_pio2f+0x2f0>
 800ceb6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ceba:	9203      	str	r2, [sp, #12]
 800cebc:	4654      	mov	r4, sl
 800cebe:	00a2      	lsls	r2, r4, #2
 800cec0:	9205      	str	r2, [sp, #20]
 800cec2:	aa58      	add	r2, sp, #352	@ 0x160
 800cec4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cec8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800cecc:	a944      	add	r1, sp, #272	@ 0x110
 800cece:	aa08      	add	r2, sp, #32
 800ced0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ced4:	4694      	mov	ip, r2
 800ced6:	4626      	mov	r6, r4
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	dc4c      	bgt.n	800cf76 <__kernel_rem_pio2f+0x17e>
 800cedc:	4628      	mov	r0, r5
 800cede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cee2:	f7ff ff23 	bl	800cd2c <scalbnf>
 800cee6:	eeb0 8a40 	vmov.f32	s16, s0
 800ceea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ceee:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cef2:	f000 f9e9 	bl	800d2c8 <floorf>
 800cef6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800cefa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cefe:	2d00      	cmp	r5, #0
 800cf00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cf08:	ee17 9a90 	vmov	r9, s15
 800cf0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf10:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cf14:	dd41      	ble.n	800cf9a <__kernel_rem_pio2f+0x1a2>
 800cf16:	f104 3cff 	add.w	ip, r4, #4294967295
 800cf1a:	a908      	add	r1, sp, #32
 800cf1c:	f1c5 0e08 	rsb	lr, r5, #8
 800cf20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800cf24:	fa46 f00e 	asr.w	r0, r6, lr
 800cf28:	4481      	add	r9, r0
 800cf2a:	fa00 f00e 	lsl.w	r0, r0, lr
 800cf2e:	1a36      	subs	r6, r6, r0
 800cf30:	f1c5 0007 	rsb	r0, r5, #7
 800cf34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800cf38:	4106      	asrs	r6, r0
 800cf3a:	2e00      	cmp	r6, #0
 800cf3c:	dd3c      	ble.n	800cfb8 <__kernel_rem_pio2f+0x1c0>
 800cf3e:	f04f 0e00 	mov.w	lr, #0
 800cf42:	f109 0901 	add.w	r9, r9, #1
 800cf46:	4670      	mov	r0, lr
 800cf48:	4574      	cmp	r4, lr
 800cf4a:	dc68      	bgt.n	800d01e <__kernel_rem_pio2f+0x226>
 800cf4c:	2d00      	cmp	r5, #0
 800cf4e:	dd03      	ble.n	800cf58 <__kernel_rem_pio2f+0x160>
 800cf50:	2d01      	cmp	r5, #1
 800cf52:	d074      	beq.n	800d03e <__kernel_rem_pio2f+0x246>
 800cf54:	2d02      	cmp	r5, #2
 800cf56:	d07d      	beq.n	800d054 <__kernel_rem_pio2f+0x25c>
 800cf58:	2e02      	cmp	r6, #2
 800cf5a:	d12d      	bne.n	800cfb8 <__kernel_rem_pio2f+0x1c0>
 800cf5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf60:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cf64:	b340      	cbz	r0, 800cfb8 <__kernel_rem_pio2f+0x1c0>
 800cf66:	4628      	mov	r0, r5
 800cf68:	9306      	str	r3, [sp, #24]
 800cf6a:	f7ff fedf 	bl	800cd2c <scalbnf>
 800cf6e:	9b06      	ldr	r3, [sp, #24]
 800cf70:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cf74:	e020      	b.n	800cfb8 <__kernel_rem_pio2f+0x1c0>
 800cf76:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cf7a:	3e01      	subs	r6, #1
 800cf7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cf88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cf8c:	ecac 0a01 	vstmia	ip!, {s0}
 800cf90:	ed30 0a01 	vldmdb	r0!, {s0}
 800cf94:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cf98:	e79e      	b.n	800ced8 <__kernel_rem_pio2f+0xe0>
 800cf9a:	d105      	bne.n	800cfa8 <__kernel_rem_pio2f+0x1b0>
 800cf9c:	1e60      	subs	r0, r4, #1
 800cf9e:	a908      	add	r1, sp, #32
 800cfa0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800cfa4:	11f6      	asrs	r6, r6, #7
 800cfa6:	e7c8      	b.n	800cf3a <__kernel_rem_pio2f+0x142>
 800cfa8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cfac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	da31      	bge.n	800d01a <__kernel_rem_pio2f+0x222>
 800cfb6:	2600      	movs	r6, #0
 800cfb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc0:	f040 8098 	bne.w	800d0f4 <__kernel_rem_pio2f+0x2fc>
 800cfc4:	1e60      	subs	r0, r4, #1
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	4550      	cmp	r0, sl
 800cfca:	da4b      	bge.n	800d064 <__kernel_rem_pio2f+0x26c>
 800cfcc:	2a00      	cmp	r2, #0
 800cfce:	d065      	beq.n	800d09c <__kernel_rem_pio2f+0x2a4>
 800cfd0:	3c01      	subs	r4, #1
 800cfd2:	ab08      	add	r3, sp, #32
 800cfd4:	3d08      	subs	r5, #8
 800cfd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d0f8      	beq.n	800cfd0 <__kernel_rem_pio2f+0x1d8>
 800cfde:	4628      	mov	r0, r5
 800cfe0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cfe4:	f7ff fea2 	bl	800cd2c <scalbnf>
 800cfe8:	1c63      	adds	r3, r4, #1
 800cfea:	aa44      	add	r2, sp, #272	@ 0x110
 800cfec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d0ec <__kernel_rem_pio2f+0x2f4>
 800cff0:	0099      	lsls	r1, r3, #2
 800cff2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cff6:	4623      	mov	r3, r4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f280 80a9 	bge.w	800d150 <__kernel_rem_pio2f+0x358>
 800cffe:	4623      	mov	r3, r4
 800d000:	2b00      	cmp	r3, #0
 800d002:	f2c0 80c7 	blt.w	800d194 <__kernel_rem_pio2f+0x39c>
 800d006:	aa44      	add	r2, sp, #272	@ 0x110
 800d008:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d00c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d0e4 <__kernel_rem_pio2f+0x2ec>
 800d010:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800d014:	2000      	movs	r0, #0
 800d016:	1ae2      	subs	r2, r4, r3
 800d018:	e0b1      	b.n	800d17e <__kernel_rem_pio2f+0x386>
 800d01a:	2602      	movs	r6, #2
 800d01c:	e78f      	b.n	800cf3e <__kernel_rem_pio2f+0x146>
 800d01e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d022:	b948      	cbnz	r0, 800d038 <__kernel_rem_pio2f+0x240>
 800d024:	b121      	cbz	r1, 800d030 <__kernel_rem_pio2f+0x238>
 800d026:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d02a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d02e:	2101      	movs	r1, #1
 800d030:	f10e 0e01 	add.w	lr, lr, #1
 800d034:	4608      	mov	r0, r1
 800d036:	e787      	b.n	800cf48 <__kernel_rem_pio2f+0x150>
 800d038:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d03c:	e7f5      	b.n	800d02a <__kernel_rem_pio2f+0x232>
 800d03e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d042:	aa08      	add	r2, sp, #32
 800d044:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d04c:	a908      	add	r1, sp, #32
 800d04e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d052:	e781      	b.n	800cf58 <__kernel_rem_pio2f+0x160>
 800d054:	f104 3cff 	add.w	ip, r4, #4294967295
 800d058:	aa08      	add	r2, sp, #32
 800d05a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d05e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d062:	e7f3      	b.n	800d04c <__kernel_rem_pio2f+0x254>
 800d064:	a908      	add	r1, sp, #32
 800d066:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d06a:	3801      	subs	r0, #1
 800d06c:	430a      	orrs	r2, r1
 800d06e:	e7ab      	b.n	800cfc8 <__kernel_rem_pio2f+0x1d0>
 800d070:	3201      	adds	r2, #1
 800d072:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d076:	2e00      	cmp	r6, #0
 800d078:	d0fa      	beq.n	800d070 <__kernel_rem_pio2f+0x278>
 800d07a:	9905      	ldr	r1, [sp, #20]
 800d07c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d080:	eb0d 0001 	add.w	r0, sp, r1
 800d084:	18e6      	adds	r6, r4, r3
 800d086:	a91c      	add	r1, sp, #112	@ 0x70
 800d088:	f104 0c01 	add.w	ip, r4, #1
 800d08c:	384c      	subs	r0, #76	@ 0x4c
 800d08e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d092:	4422      	add	r2, r4
 800d094:	4562      	cmp	r2, ip
 800d096:	da04      	bge.n	800d0a2 <__kernel_rem_pio2f+0x2aa>
 800d098:	4614      	mov	r4, r2
 800d09a:	e710      	b.n	800cebe <__kernel_rem_pio2f+0xc6>
 800d09c:	9804      	ldr	r0, [sp, #16]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	e7e7      	b.n	800d072 <__kernel_rem_pio2f+0x27a>
 800d0a2:	9903      	ldr	r1, [sp, #12]
 800d0a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d0a8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d0ac:	9105      	str	r1, [sp, #20]
 800d0ae:	ee07 1a90 	vmov	s15, r1
 800d0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0b6:	2400      	movs	r4, #0
 800d0b8:	ece6 7a01 	vstmia	r6!, {s15}
 800d0bc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800d0c0:	46b1      	mov	r9, r6
 800d0c2:	455c      	cmp	r4, fp
 800d0c4:	dd04      	ble.n	800d0d0 <__kernel_rem_pio2f+0x2d8>
 800d0c6:	ece0 7a01 	vstmia	r0!, {s15}
 800d0ca:	f10c 0c01 	add.w	ip, ip, #1
 800d0ce:	e7e1      	b.n	800d094 <__kernel_rem_pio2f+0x29c>
 800d0d0:	ecfe 6a01 	vldmia	lr!, {s13}
 800d0d4:	ed39 7a01 	vldmdb	r9!, {s14}
 800d0d8:	3401      	adds	r4, #1
 800d0da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d0de:	e7f0      	b.n	800d0c2 <__kernel_rem_pio2f+0x2ca>
 800d0e0:	080239b4 	.word	0x080239b4
 800d0e4:	08023988 	.word	0x08023988
 800d0e8:	43800000 	.word	0x43800000
 800d0ec:	3b800000 	.word	0x3b800000
 800d0f0:	00000000 	.word	0x00000000
 800d0f4:	9b02      	ldr	r3, [sp, #8]
 800d0f6:	eeb0 0a48 	vmov.f32	s0, s16
 800d0fa:	eba3 0008 	sub.w	r0, r3, r8
 800d0fe:	f7ff fe15 	bl	800cd2c <scalbnf>
 800d102:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d0e8 <__kernel_rem_pio2f+0x2f0>
 800d106:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10e:	db19      	blt.n	800d144 <__kernel_rem_pio2f+0x34c>
 800d110:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d0ec <__kernel_rem_pio2f+0x2f4>
 800d114:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d118:	aa08      	add	r2, sp, #32
 800d11a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d11e:	3508      	adds	r5, #8
 800d120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d124:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d12c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d130:	ee10 3a10 	vmov	r3, s0
 800d134:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d138:	ee17 3a90 	vmov	r3, s15
 800d13c:	3401      	adds	r4, #1
 800d13e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d142:	e74c      	b.n	800cfde <__kernel_rem_pio2f+0x1e6>
 800d144:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d148:	aa08      	add	r2, sp, #32
 800d14a:	ee10 3a10 	vmov	r3, s0
 800d14e:	e7f6      	b.n	800d13e <__kernel_rem_pio2f+0x346>
 800d150:	a808      	add	r0, sp, #32
 800d152:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d156:	9001      	str	r0, [sp, #4]
 800d158:	ee07 0a90 	vmov	s15, r0
 800d15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d160:	3b01      	subs	r3, #1
 800d162:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d166:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d16a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d16e:	e743      	b.n	800cff8 <__kernel_rem_pio2f+0x200>
 800d170:	ecfc 6a01 	vldmia	ip!, {s13}
 800d174:	ecb5 7a01 	vldmia	r5!, {s14}
 800d178:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d17c:	3001      	adds	r0, #1
 800d17e:	4550      	cmp	r0, sl
 800d180:	dc01      	bgt.n	800d186 <__kernel_rem_pio2f+0x38e>
 800d182:	4290      	cmp	r0, r2
 800d184:	ddf4      	ble.n	800d170 <__kernel_rem_pio2f+0x378>
 800d186:	a858      	add	r0, sp, #352	@ 0x160
 800d188:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d18c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d190:	3b01      	subs	r3, #1
 800d192:	e735      	b.n	800d000 <__kernel_rem_pio2f+0x208>
 800d194:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d196:	2b02      	cmp	r3, #2
 800d198:	dc09      	bgt.n	800d1ae <__kernel_rem_pio2f+0x3b6>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dc27      	bgt.n	800d1ee <__kernel_rem_pio2f+0x3f6>
 800d19e:	d040      	beq.n	800d222 <__kernel_rem_pio2f+0x42a>
 800d1a0:	f009 0007 	and.w	r0, r9, #7
 800d1a4:	b059      	add	sp, #356	@ 0x164
 800d1a6:	ecbd 8b04 	vpop	{d8-d9}
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d1f5      	bne.n	800d1a0 <__kernel_rem_pio2f+0x3a8>
 800d1b4:	aa30      	add	r2, sp, #192	@ 0xc0
 800d1b6:	1f0b      	subs	r3, r1, #4
 800d1b8:	4413      	add	r3, r2
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	4620      	mov	r0, r4
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	dc50      	bgt.n	800d264 <__kernel_rem_pio2f+0x46c>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	2a01      	cmp	r2, #1
 800d1c6:	dc5d      	bgt.n	800d284 <__kernel_rem_pio2f+0x48c>
 800d1c8:	ab30      	add	r3, sp, #192	@ 0xc0
 800d1ca:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800d1ce:	440b      	add	r3, r1
 800d1d0:	2c01      	cmp	r4, #1
 800d1d2:	dc67      	bgt.n	800d2a4 <__kernel_rem_pio2f+0x4ac>
 800d1d4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d1d8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	d167      	bne.n	800d2b0 <__kernel_rem_pio2f+0x4b8>
 800d1e0:	edc7 6a00 	vstr	s13, [r7]
 800d1e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800d1e8:	edc7 7a02 	vstr	s15, [r7, #8]
 800d1ec:	e7d8      	b.n	800d1a0 <__kernel_rem_pio2f+0x3a8>
 800d1ee:	ab30      	add	r3, sp, #192	@ 0xc0
 800d1f0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800d1f4:	440b      	add	r3, r1
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	da24      	bge.n	800d246 <__kernel_rem_pio2f+0x44e>
 800d1fc:	b34e      	cbz	r6, 800d252 <__kernel_rem_pio2f+0x45a>
 800d1fe:	eef1 7a47 	vneg.f32	s15, s14
 800d202:	edc7 7a00 	vstr	s15, [r7]
 800d206:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d20a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d20e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d210:	2301      	movs	r3, #1
 800d212:	429c      	cmp	r4, r3
 800d214:	da20      	bge.n	800d258 <__kernel_rem_pio2f+0x460>
 800d216:	b10e      	cbz	r6, 800d21c <__kernel_rem_pio2f+0x424>
 800d218:	eef1 7a67 	vneg.f32	s15, s15
 800d21c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d220:	e7be      	b.n	800d1a0 <__kernel_rem_pio2f+0x3a8>
 800d222:	ab30      	add	r3, sp, #192	@ 0xc0
 800d224:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d0f0 <__kernel_rem_pio2f+0x2f8>
 800d228:	440b      	add	r3, r1
 800d22a:	2c00      	cmp	r4, #0
 800d22c:	da05      	bge.n	800d23a <__kernel_rem_pio2f+0x442>
 800d22e:	b10e      	cbz	r6, 800d234 <__kernel_rem_pio2f+0x43c>
 800d230:	eef1 7a67 	vneg.f32	s15, s15
 800d234:	edc7 7a00 	vstr	s15, [r7]
 800d238:	e7b2      	b.n	800d1a0 <__kernel_rem_pio2f+0x3a8>
 800d23a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d23e:	3c01      	subs	r4, #1
 800d240:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d244:	e7f1      	b.n	800d22a <__kernel_rem_pio2f+0x432>
 800d246:	ed73 7a01 	vldmdb	r3!, {s15}
 800d24a:	3a01      	subs	r2, #1
 800d24c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d250:	e7d2      	b.n	800d1f8 <__kernel_rem_pio2f+0x400>
 800d252:	eef0 7a47 	vmov.f32	s15, s14
 800d256:	e7d4      	b.n	800d202 <__kernel_rem_pio2f+0x40a>
 800d258:	ecb2 7a01 	vldmia	r2!, {s14}
 800d25c:	3301      	adds	r3, #1
 800d25e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d262:	e7d6      	b.n	800d212 <__kernel_rem_pio2f+0x41a>
 800d264:	ed72 7a01 	vldmdb	r2!, {s15}
 800d268:	edd2 6a01 	vldr	s13, [r2, #4]
 800d26c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d270:	3801      	subs	r0, #1
 800d272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d276:	ed82 7a00 	vstr	s14, [r2]
 800d27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27e:	edc2 7a01 	vstr	s15, [r2, #4]
 800d282:	e79c      	b.n	800d1be <__kernel_rem_pio2f+0x3c6>
 800d284:	ed73 7a01 	vldmdb	r3!, {s15}
 800d288:	edd3 6a01 	vldr	s13, [r3, #4]
 800d28c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d290:	3a01      	subs	r2, #1
 800d292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d296:	ed83 7a00 	vstr	s14, [r3]
 800d29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d2a2:	e78f      	b.n	800d1c4 <__kernel_rem_pio2f+0x3cc>
 800d2a4:	ed33 7a01 	vldmdb	r3!, {s14}
 800d2a8:	3c01      	subs	r4, #1
 800d2aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2ae:	e78f      	b.n	800d1d0 <__kernel_rem_pio2f+0x3d8>
 800d2b0:	eef1 6a66 	vneg.f32	s13, s13
 800d2b4:	eeb1 7a47 	vneg.f32	s14, s14
 800d2b8:	edc7 6a00 	vstr	s13, [r7]
 800d2bc:	ed87 7a01 	vstr	s14, [r7, #4]
 800d2c0:	eef1 7a67 	vneg.f32	s15, s15
 800d2c4:	e790      	b.n	800d1e8 <__kernel_rem_pio2f+0x3f0>
 800d2c6:	bf00      	nop

0800d2c8 <floorf>:
 800d2c8:	ee10 3a10 	vmov	r3, s0
 800d2cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2d0:	3a7f      	subs	r2, #127	@ 0x7f
 800d2d2:	2a16      	cmp	r2, #22
 800d2d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d2d8:	dc2b      	bgt.n	800d332 <floorf+0x6a>
 800d2da:	2a00      	cmp	r2, #0
 800d2dc:	da12      	bge.n	800d304 <floorf+0x3c>
 800d2de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d344 <floorf+0x7c>
 800d2e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d2e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ee:	dd06      	ble.n	800d2fe <floorf+0x36>
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	da24      	bge.n	800d33e <floorf+0x76>
 800d2f4:	2900      	cmp	r1, #0
 800d2f6:	4b14      	ldr	r3, [pc, #80]	@ (800d348 <floorf+0x80>)
 800d2f8:	bf08      	it	eq
 800d2fa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d2fe:	ee00 3a10 	vmov	s0, r3
 800d302:	4770      	bx	lr
 800d304:	4911      	ldr	r1, [pc, #68]	@ (800d34c <floorf+0x84>)
 800d306:	4111      	asrs	r1, r2
 800d308:	420b      	tst	r3, r1
 800d30a:	d0fa      	beq.n	800d302 <floorf+0x3a>
 800d30c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d344 <floorf+0x7c>
 800d310:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d314:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31c:	ddef      	ble.n	800d2fe <floorf+0x36>
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfbe      	ittt	lt
 800d322:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d326:	fa40 f202 	asrlt.w	r2, r0, r2
 800d32a:	189b      	addlt	r3, r3, r2
 800d32c:	ea23 0301 	bic.w	r3, r3, r1
 800d330:	e7e5      	b.n	800d2fe <floorf+0x36>
 800d332:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d336:	d3e4      	bcc.n	800d302 <floorf+0x3a>
 800d338:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d33c:	4770      	bx	lr
 800d33e:	2300      	movs	r3, #0
 800d340:	e7dd      	b.n	800d2fe <floorf+0x36>
 800d342:	bf00      	nop
 800d344:	7149f2ca 	.word	0x7149f2ca
 800d348:	bf800000 	.word	0xbf800000
 800d34c:	007fffff 	.word	0x007fffff

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr
