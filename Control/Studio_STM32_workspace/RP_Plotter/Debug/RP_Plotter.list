
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080079fc  080079fc  000089fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ddc  08007ddc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ddc  08007ddc  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ddc  08007ddc  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ddc  08007ddc  00008ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007de0  08007de0  00008de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007de4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000010  08007df0  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08007df0  000093cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd7  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d42  00000000  00000000  00015d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00017a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  00018780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e75  00000000  00000000  000191ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e30b  00000000  00000000  0003f02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77b6  00000000  00000000  0004d33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b30  00000000  00000000  00144b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00148664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080079e4 	.word	0x080079e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080079e4 	.word	0x080079e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	@ 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d84:	ed2d 8b02 	vpush	{d8}
 8000d88:	b0a3      	sub	sp, #140	@ 0x8c
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f002 fd77 	bl	800387e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f001 fa2a 	bl	80021e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f001 fdd6 	bl	8002944 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d98:	f001 fbce 	bl	8002538 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d9c:	f001 fc22 	bl	80025e4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000da0:	f001 fb74 	bl	800248c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000da4:	f001 fc6c 	bl	8002680 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000da8:	f001 fd28 	bl	80027fc <MX_TIM15_Init>
  MX_TIM1_Init();
 8000dac:	f001 fa68 	bl	8002280 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000db0:	f001 faec 	bl	800238c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000db4:	48b6      	ldr	r0, [pc, #728]	@ (8001090 <main+0x310>)
 8000db6:	f003 feaf 	bl	8004b18 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	48b4      	ldr	r0, [pc, #720]	@ (8001090 <main+0x310>)
 8000dbe:	f004 f95f 	bl	8005080 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	48b2      	ldr	r0, [pc, #712]	@ (8001090 <main+0x310>)
 8000dc6:	f004 f95b 	bl	8005080 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start(&htim2);
 8000dca:	48b2      	ldr	r0, [pc, #712]	@ (8001094 <main+0x314>)
 8000dcc:	f003 fea4 	bl	8004b18 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	48b0      	ldr	r0, [pc, #704]	@ (8001094 <main+0x314>)
 8000dd4:	f004 f954 	bl	8005080 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000dd8:	2104      	movs	r1, #4
 8000dda:	48ae      	ldr	r0, [pc, #696]	@ (8001094 <main+0x314>)
 8000ddc:	f004 f950 	bl	8005080 <HAL_TIM_IC_Start>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000de0:	213c      	movs	r1, #60	@ 0x3c
 8000de2:	48ad      	ldr	r0, [pc, #692]	@ (8001098 <main+0x318>)
 8000de4:	f004 faf6 	bl	80053d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000de8:	213c      	movs	r1, #60	@ 0x3c
 8000dea:	48ac      	ldr	r0, [pc, #688]	@ (800109c <main+0x31c>)
 8000dec:	f004 faf2 	bl	80053d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000df0:	48ab      	ldr	r0, [pc, #684]	@ (80010a0 <main+0x320>)
 8000df2:	f003 ff01 	bl	8004bf8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim8);
 8000df6:	48ab      	ldr	r0, [pc, #684]	@ (80010a4 <main+0x324>)
 8000df8:	f003 fe8e 	bl	8004b18 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	48a9      	ldr	r0, [pc, #676]	@ (80010a4 <main+0x324>)
 8000e00:	f003 ffd4 	bl	8004dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e04:	210c      	movs	r1, #12
 8000e06:	48a7      	ldr	r0, [pc, #668]	@ (80010a4 <main+0x324>)
 8000e08:	f003 ffd0 	bl	8004dac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim15);
 8000e0c:	48a6      	ldr	r0, [pc, #664]	@ (80010a8 <main+0x328>)
 8000e0e:	f003 fe83 	bl	8004b18 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000e12:	2100      	movs	r1, #0
 8000e14:	48a4      	ldr	r0, [pc, #656]	@ (80010a8 <main+0x328>)
 8000e16:	f003 ffc9 	bl	8004dac <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
  DWT_Init();
 8000e1a:	f001 febd 	bl	8002b98 <DWT_Init>

  PID.Kp =0.1;
 8000e1e:	4aa3      	ldr	r2, [pc, #652]	@ (80010ac <main+0x32c>)
 8000e20:	4ba3      	ldr	r3, [pc, #652]	@ (80010b0 <main+0x330>)
 8000e22:	6193      	str	r3, [r2, #24]
  PID.Ki =0.00001;
 8000e24:	4aa1      	ldr	r2, [pc, #644]	@ (80010ac <main+0x32c>)
 8000e26:	4ba3      	ldr	r3, [pc, #652]	@ (80010b4 <main+0x334>)
 8000e28:	61d3      	str	r3, [r2, #28]
  PID.Kd = 0.1;
 8000e2a:	4aa0      	ldr	r2, [pc, #640]	@ (80010ac <main+0x32c>)
 8000e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80010b0 <main+0x330>)
 8000e2e:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	489e      	ldr	r0, [pc, #632]	@ (80010ac <main+0x32c>)
 8000e34:	f005 fff6 	bl	8006e24 <arm_pid_init_f32>

  Reset_R();
 8000e38:	f002 fa84 	bl	8003344 <Reset_R>
  Reset_P();
 8000e3c:	f002 fa92 	bl	8003364 <Reset_P>
  calibState = CALIB_IDLE;
 8000e40:	4a9d      	ldr	r2, [pc, #628]	@ (80010b8 <main+0x338>)
 8000e42:	2300      	movs	r3, #0
 8000e44:	7013      	strb	r3, [r2, #0]

  Set_Servo(0);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f002 fa62 	bl	8003310 <Set_Servo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8000e4c:	4b93      	ldr	r3, [pc, #588]	@ (800109c <main+0x31c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e52:	4b9a      	ldr	r3, [pc, #616]	@ (80010bc <main+0x33c>)
 8000e54:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8000e56:	4b90      	ldr	r3, [pc, #576]	@ (8001098 <main+0x318>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e5c:	4b98      	ldr	r3, [pc, #608]	@ (80010c0 <main+0x340>)
 8000e5e:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8000e60:	f001 ff7a 	bl	8002d58 <micros>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
		if (currentTime > timestamp) {
 8000e6c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8000e70:	4b94      	ldr	r3, [pc, #592]	@ (80010c4 <main+0x344>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4282      	cmp	r2, r0
 8000e78:	418b      	sbcs	r3, r1
 8000e7a:	d211      	bcs.n	8000ea0 <main+0x120>
			timestamp = currentTime + 10000;//us
 8000e7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000e80:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	6439      	str	r1, [r7, #64]	@ 0x40
 8000e88:	f143 0300 	adc.w	r3, r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000e92:	4b8c      	ldr	r3, [pc, #560]	@ (80010c4 <main+0x344>)
 8000e94:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8000e98:	f002 f910 	bl	80030bc <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8000e9c:	f002 f840 	bl	8002f20 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8000ea0:	f001 ff5a 	bl	8002d58 <micros>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		if (currentTime1 > timestamp1) {
 8000eac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000eb0:	4b85      	ldr	r3, [pc, #532]	@ (80010c8 <main+0x348>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	418b      	sbcs	r3, r1
 8000eba:	d20c      	bcs.n	8000ed6 <main+0x156>
			timestamp1 = currentTime1 + 100000;//us
 8000ebc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000ec0:	4982      	ldr	r1, [pc, #520]	@ (80010cc <main+0x34c>)
 8000ec2:	1851      	adds	r1, r2, r1
 8000ec4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000ec6:	f143 0300 	adc.w	r3, r3, #0
 8000eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80010c8 <main+0x348>)
 8000ed2:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition * cosf(Revolute_QEIdata.RadPosition*-1);
 8000ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80010d0 <main+0x350>)
 8000ed8:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 8000edc:	4b7d      	ldr	r3, [pc, #500]	@ (80010d4 <main+0x354>)
 8000ede:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ee2:	eef1 7a67 	vneg.f32	s15, s15
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	f005 fffd 	bl	8006ee8 <cosf>
 8000eee:	eef0 7a40 	vmov.f32	s15, s0
 8000ef2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ef6:	4b78      	ldr	r3, [pc, #480]	@ (80010d8 <main+0x358>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition * sinf(Revolute_QEIdata.RadPosition);
 8000efc:	4b74      	ldr	r3, [pc, #464]	@ (80010d0 <main+0x350>)
 8000efe:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 8000f02:	4b74      	ldr	r3, [pc, #464]	@ (80010d4 <main+0x354>)
 8000f04:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f08:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0c:	f006 f830 	bl	8006f70 <sinf>
 8000f10:	eef0 7a40 	vmov.f32	s15, s0
 8000f14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000f18:	4b70      	ldr	r3, [pc, #448]	@ (80010dc <main+0x35c>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////


		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001094 <main+0x314>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b6e      	ldr	r3, [pc, #440]	@ (80010e0 <main+0x360>)
 8000f28:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8000f2a:	4b59      	ldr	r3, [pc, #356]	@ (8001090 <main+0x310>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b6b      	ldr	r3, [pc, #428]	@ (80010e0 <main+0x360>)
 8000f34:	605a      	str	r2, [r3, #4]
		float RX_temp = map(__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00,
 8000f36:	4b57      	ldr	r3, [pc, #348]	@ (8001094 <main+0x314>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff faad 	bl	800049c <__aeabi_ui2d>
 8000f42:	a34f      	add	r3, pc, #316	@ (adr r3, 8001080 <main+0x300>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff f96a 	bl	8000220 <__aeabi_dsub>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fdb6 	bl	8000ac4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	ed9f 2a62 	vldr	s4, [pc, #392]	@ 80010e4 <main+0x364>
 8000f5e:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80010e8 <main+0x368>
 8000f62:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 80010ec <main+0x36c>
 8000f66:	eddf 0a62 	vldr	s1, [pc, #392]	@ 80010f0 <main+0x370>
 8000f6a:	ee00 3a10 	vmov	s0, r3
 8000f6e:	f001 fde5 	bl	8002b3c <map>
 8000f72:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
				-500.00, 500.00, -100.00, 100.00);
		float RY_temp = map(__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00,
 8000f76:	4b46      	ldr	r3, [pc, #280]	@ (8001090 <main+0x310>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa8d 	bl	800049c <__aeabi_ui2d>
 8000f82:	a341      	add	r3, pc, #260	@ (adr r3, 8001088 <main+0x308>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff f94a 	bl	8000220 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fd96 	bl	8000ac4 <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 80010e4 <main+0x364>
 8000f9e:	eddf 1a52 	vldr	s3, [pc, #328]	@ 80010e8 <main+0x368>
 8000fa2:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80010ec <main+0x36c>
 8000fa6:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80010f0 <main+0x370>
 8000faa:	ee00 3a10 	vmov	s0, r3
 8000fae:	f001 fdc5 	bl	8002b3c <map>
 8000fb2:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
				-500.00, 500.00, -100.00, 100.00);

		if(RX_temp >= -4 && RX_temp <= 4) Receiver[0] = 0.00;
 8000fb6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000fba:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8000fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	db0d      	blt.n	8000fe4 <main+0x264>
 8000fc8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000fcc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d804      	bhi.n	8000fe4 <main+0x264>
 8000fda:	4a46      	ldr	r2, [pc, #280]	@ (80010f4 <main+0x374>)
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01c      	b.n	800101e <main+0x29e>
		else if(RX_temp > 100) Receiver[0] = 100.00;
 8000fe4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000fe8:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80010e4 <main+0x364>
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	dd03      	ble.n	8000ffe <main+0x27e>
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80010f4 <main+0x374>)
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <main+0x378>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e00f      	b.n	800101e <main+0x29e>
		else if(RX_temp < -100) Receiver[0] = -100.00;
 8000ffe:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001002:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80010e8 <main+0x368>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	d503      	bpl.n	8001018 <main+0x298>
 8001010:	4a38      	ldr	r2, [pc, #224]	@ (80010f4 <main+0x374>)
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <main+0x37c>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e002      	b.n	800101e <main+0x29e>
		else Receiver[0] = RX_temp;
 8001018:	4a36      	ldr	r2, [pc, #216]	@ (80010f4 <main+0x374>)
 800101a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800101c:	6013      	str	r3, [r2, #0]
		if(RY_temp >= -4 && RY_temp <= 4) Receiver[1] = 0.00;
 800101e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001022:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	db0d      	blt.n	800104c <main+0x2cc>
 8001030:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001034:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d804      	bhi.n	800104c <main+0x2cc>
 8001042:	4a2c      	ldr	r2, [pc, #176]	@ (80010f4 <main+0x374>)
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	6053      	str	r3, [r2, #4]
 800104a:	e05c      	b.n	8001106 <main+0x386>
		else if(RY_temp > 100) Receiver[1] = 100.00;
 800104c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001050:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80010e4 <main+0x364>
 8001054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	dd03      	ble.n	8001066 <main+0x2e6>
 800105e:	4a25      	ldr	r2, [pc, #148]	@ (80010f4 <main+0x374>)
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <main+0x378>)
 8001062:	6053      	str	r3, [r2, #4]
 8001064:	e04f      	b.n	8001106 <main+0x386>
		else if(RY_temp < -100) Receiver[1] = -100.00;
 8001066:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800106a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80010e8 <main+0x368>
 800106e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	d543      	bpl.n	8001100 <main+0x380>
 8001078:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <main+0x374>)
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <main+0x37c>)
 800107c:	6053      	str	r3, [r2, #4]
 800107e:	e042      	b.n	8001106 <main+0x386>
 8001080:	00000000 	.word	0x00000000
 8001084:	40977000 	.word	0x40977000
 8001088:	00000000 	.word	0x00000000
 800108c:	40d21880 	.word	0x40d21880
 8001090:	2000002c 	.word	0x2000002c
 8001094:	20000078 	.word	0x20000078
 8001098:	200000c4 	.word	0x200000c4
 800109c:	20000110 	.word	0x20000110
 80010a0:	2000015c 	.word	0x2000015c
 80010a4:	200001a8 	.word	0x200001a8
 80010a8:	200001f4 	.word	0x200001f4
 80010ac:	20000348 	.word	0x20000348
 80010b0:	3dcccccd 	.word	0x3dcccccd
 80010b4:	3727c5ac 	.word	0x3727c5ac
 80010b8:	20000379 	.word	0x20000379
 80010bc:	20000288 	.word	0x20000288
 80010c0:	2000028c 	.word	0x2000028c
 80010c4:	200003a0 	.word	0x200003a0
 80010c8:	200003a8 	.word	0x200003a8
 80010cc:	000186a0 	.word	0x000186a0
 80010d0:	200002d0 	.word	0x200002d0
 80010d4:	20000290 	.word	0x20000290
 80010d8:	20000310 	.word	0x20000310
 80010dc:	20000314 	.word	0x20000314
 80010e0:	2000025c 	.word	0x2000025c
 80010e4:	42c80000 	.word	0x42c80000
 80010e8:	c2c80000 	.word	0xc2c80000
 80010ec:	43fa0000 	.word	0x43fa0000
 80010f0:	c3fa0000 	.word	0xc3fa0000
 80010f4:	20000248 	.word	0x20000248
 80010f8:	42c80000 	.word	0x42c80000
 80010fc:	c2c80000 	.word	0xc2c80000
		else Receiver[1] = RY_temp;
 8001100:	4ab3      	ldr	r2, [pc, #716]	@ (80013d0 <main+0x650>)
 8001102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001104:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float)pulse_width_us[0] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 8001106:	4bb3      	ldr	r3, [pc, #716]	@ (80013d4 <main+0x654>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	ee17 0a90 	vmov	r0, s15
 8001116:	f7ff f9e3 	bl	80004e0 <__aeabi_f2d>
 800111a:	a3ab      	add	r3, pc, #684	@ (adr r3, 80013c8 <main+0x648>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff f87e 	bl	8000220 <__aeabi_dsub>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcca 	bl	8000ac4 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	ed9f 2aa9 	vldr	s4, [pc, #676]	@ 80013d8 <main+0x658>
 8001136:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 80013dc <main+0x65c>
 800113a:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80013e0 <main+0x660>
 800113e:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80013e4 <main+0x664>
 8001142:	ee00 3a10 	vmov	s0, r3
 8001146:	f001 fcf9 	bl	8002b3c <map>
 800114a:	eef0 7a40 	vmov.f32	s15, s0
 800114e:	4ba0      	ldr	r3, [pc, #640]	@ (80013d0 <main+0x650>)
 8001150:	edc3 7a02 	vstr	s15, [r3, #8]
		Receiver[3] = map((float)pulse_width_us[1] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 8001154:	4b9f      	ldr	r3, [pc, #636]	@ (80013d4 <main+0x654>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001160:	ee17 0a90 	vmov	r0, s15
 8001164:	f7ff f9bc 	bl	80004e0 <__aeabi_f2d>
 8001168:	a397      	add	r3, pc, #604	@ (adr r3, 80013c8 <main+0x648>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f857 	bl	8000220 <__aeabi_dsub>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fca3 	bl	8000ac4 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80013d8 <main+0x658>
 8001184:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80013dc <main+0x65c>
 8001188:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80013e0 <main+0x660>
 800118c:	eddf 0a95 	vldr	s1, [pc, #596]	@ 80013e4 <main+0x664>
 8001190:	ee00 3a10 	vmov	s0, r3
 8001194:	f001 fcd2 	bl	8002b3c <map>
 8001198:	eef0 7a40 	vmov.f32	s15, s0
 800119c:	4b8c      	ldr	r3, [pc, #560]	@ (80013d0 <main+0x650>)
 800119e:	edc3 7a03 	vstr	s15, [r3, #12]
		Receiver[4] = map((float)pulse_width_us[2] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 80011a2:	4b8c      	ldr	r3, [pc, #560]	@ (80013d4 <main+0x654>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
 80011b2:	f7ff f995 	bl	80004e0 <__aeabi_f2d>
 80011b6:	a384      	add	r3, pc, #528	@ (adr r3, 80013c8 <main+0x648>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f830 	bl	8000220 <__aeabi_dsub>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc7c 	bl	8000ac4 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 80013d8 <main+0x658>
 80011d2:	eddf 1a82 	vldr	s3, [pc, #520]	@ 80013dc <main+0x65c>
 80011d6:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 80013e0 <main+0x660>
 80011da:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80013e4 <main+0x664>
 80011de:	ee00 3a10 	vmov	s0, r3
 80011e2:	f001 fcab 	bl	8002b3c <map>
 80011e6:	eef0 7a40 	vmov.f32	s15, s0
 80011ea:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <main+0x650>)
 80011ec:	edc3 7a04 	vstr	s15, [r3, #16]

		//Adjust as needed
		vx = map((float)Receiver[0], -100.00, 100.00, -300.00, 300.00);
 80011f0:	4b77      	ldr	r3, [pc, #476]	@ (80013d0 <main+0x650>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 80013e8 <main+0x668>
 80011fa:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 80013ec <main+0x66c>
 80011fe:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 80013d8 <main+0x658>
 8001202:	eddf 0a76 	vldr	s1, [pc, #472]	@ 80013dc <main+0x65c>
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	f001 fc97 	bl	8002b3c <map>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	4b77      	ldr	r3, [pc, #476]	@ (80013f0 <main+0x670>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float)Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001218:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <main+0x650>)
 800121a:	edd3 7a01 	vldr	s15, [r3, #4]
 800121e:	ed9f 2a72 	vldr	s4, [pc, #456]	@ 80013e8 <main+0x668>
 8001222:	eddf 1a72 	vldr	s3, [pc, #456]	@ 80013ec <main+0x66c>
 8001226:	ed9f 1a6c 	vldr	s2, [pc, #432]	@ 80013d8 <main+0x658>
 800122a:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80013dc <main+0x65c>
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	f001 fc83 	bl	8002b3c <map>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	4b6e      	ldr	r3, [pc, #440]	@ (80013f4 <main+0x674>)
 800123c:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////


	  	//////////////////////// <<STATE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001244:	486c      	ldr	r0, [pc, #432]	@ (80013f8 <main+0x678>)
 8001246:	f002 fe1d 	bl	8003e84 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d109      	bne.n	8001264 <main+0x4e4>
			State = 0;
 8001250:	4a6a      	ldr	r2, [pc, #424]	@ (80013fc <main+0x67c>)
 8001252:	2300      	movs	r3, #0
 8001254:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001256:	4a6a      	ldr	r2, [pc, #424]	@ (8001400 <main+0x680>)
 8001258:	2301      	movs	r3, #1
 800125a:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 800125c:	4b69      	ldr	r3, [pc, #420]	@ (8001404 <main+0x684>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	6353      	str	r3, [r2, #52]	@ 0x34
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001264:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001268:	4867      	ldr	r0, [pc, #412]	@ (8001408 <main+0x688>)
 800126a:	f002 fe0b 	bl	8003e84 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <main+0x4fa>
			EmergencyState = 0;
 8001274:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <main+0x680>)
 8001276:	2300      	movs	r3, #0
 8001278:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1){
 800127a:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <main+0x680>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d103      	bne.n	800128a <main+0x50a>
			State = 0;
 8001282:	4a5e      	ldr	r2, [pc, #376]	@ (80013fc <main+0x67c>)
 8001284:	2300      	movs	r3, #0
 8001286:	7013      	strb	r3, [r2, #0]
 8001288:	e191      	b.n	80015ae <main+0x82e>
		}
		else if (Receiver[2] < -30 && Receiver[4] < -30) {
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <main+0x650>)
 800128c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001290:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	d50d      	bpl.n	80012ba <main+0x53a>
 800129e:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <main+0x650>)
 80012a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80012a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	d503      	bpl.n	80012ba <main+0x53a>
			State = 0;
 80012b2:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <main+0x67c>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	7013      	strb	r3, [r2, #0]
 80012b8:	e179      	b.n	80015ae <main+0x82e>
		}
		else if (Receiver[3] > 0 && IsPress == 0) {
 80012ba:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <main+0x650>)
 80012bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	f340 816e 	ble.w	80015a8 <main+0x828>
 80012cc:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <main+0x68c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f040 8169 	bne.w	80015a8 <main+0x828>
			IsPress = 1;
 80012d6:	4a4d      	ldr	r2, [pc, #308]	@ (800140c <main+0x68c>)
 80012d8:	2301      	movs	r3, #1
 80012da:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 80012dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001410 <main+0x690>)
 80012de:	2300      	movs	r3, #0
 80012e0:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <main+0x650>)
 80012e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80012ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dd2c      	ble.n	8001350 <main+0x5d0>
 80012f6:	4b36      	ldr	r3, [pc, #216]	@ (80013d0 <main+0x650>)
 80012f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d522      	bpl.n	8001350 <main+0x5d0>
					&& Receiver[4] < -30) {
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <main+0x650>)
 800130c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001310:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d518      	bpl.n	8001350 <main+0x5d0>
				if(State != 1){
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <main+0x67c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d003      	beq.n	800132e <main+0x5ae>
					State = 1;
 8001326:	4a35      	ldr	r2, [pc, #212]	@ (80013fc <main+0x67c>)
 8001328:	2301      	movs	r3, #1
 800132a:	7013      	strb	r3, [r2, #0]
				if(State != 1){
 800132c:	e12d      	b.n	800158a <main+0x80a>
				}
				else{
					TargetX = End_x;
 800132e:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <main+0x694>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <main+0x698>)
 8001334:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 8001336:	4b39      	ldr	r3, [pc, #228]	@ (800141c <main+0x69c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <main+0x6a0>)
 800133c:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <main+0x6a4>)
 8001340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001342:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <main+0x6a8>)
 8001344:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8001346:	4b39      	ldr	r3, [pc, #228]	@ (800142c <main+0x6ac>)
 8001348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800134a:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <main+0x6b0>)
 800134c:	601a      	str	r2, [r3, #0]
				if(State != 1){
 800134e:	e11c      	b.n	800158a <main+0x80a>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8001350:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <main+0x650>)
 8001352:	edd3 7a02 	vldr	s15, [r3, #8]
 8001356:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800135a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd0d      	ble.n	8001380 <main+0x600>
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <main+0x650>)
 8001366:	edd3 7a04 	vldr	s15, [r3, #16]
 800136a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800136e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d503      	bpl.n	8001380 <main+0x600>
				State = 2;
 8001378:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <main+0x67c>)
 800137a:	2302      	movs	r3, #2
 800137c:	7013      	strb	r3, [r2, #0]
 800137e:	e104      	b.n	800158a <main+0x80a>
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <main+0x650>)
 8001382:	edd3 7a02 	vldr	s15, [r3, #8]
 8001386:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800138a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d54f      	bpl.n	8001434 <main+0x6b4>
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <main+0x650>)
 8001396:	edd3 7a04 	vldr	s15, [r3, #16]
 800139a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	dd45      	ble.n	8001434 <main+0x6b4>
					&& Receiver[4] < 30) {
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <main+0x650>)
 80013aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ae:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80013b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	d53b      	bpl.n	8001434 <main+0x6b4>
				State = 3;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <main+0x67c>)
 80013be:	2303      	movs	r3, #3
 80013c0:	7013      	strb	r3, [r2, #0]
 80013c2:	e0e2      	b.n	800158a <main+0x80a>
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40977000 	.word	0x40977000
 80013d0:	20000248 	.word	0x20000248
 80013d4:	2000027c 	.word	0x2000027c
 80013d8:	42c80000 	.word	0x42c80000
 80013dc:	c2c80000 	.word	0xc2c80000
 80013e0:	43fa0000 	.word	0x43fa0000
 80013e4:	c3fa0000 	.word	0xc3fa0000
 80013e8:	43960000 	.word	0x43960000
 80013ec:	c3960000 	.word	0xc3960000
 80013f0:	20000308 	.word	0x20000308
 80013f4:	2000030c 	.word	0x2000030c
 80013f8:	48000800 	.word	0x48000800
 80013fc:	20000376 	.word	0x20000376
 8001400:	20000377 	.word	0x20000377
 8001404:	200001f4 	.word	0x200001f4
 8001408:	48000400 	.word	0x48000400
 800140c:	20000378 	.word	0x20000378
 8001410:	20000379 	.word	0x20000379
 8001414:	20000310 	.word	0x20000310
 8001418:	20000318 	.word	0x20000318
 800141c:	20000314 	.word	0x20000314
 8001420:	2000031c 	.word	0x2000031c
 8001424:	20000290 	.word	0x20000290
 8001428:	20000320 	.word	0x20000320
 800142c:	200002d0 	.word	0x200002d0
 8001430:	20000324 	.word	0x20000324
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001434:	4b55      	ldr	r3, [pc, #340]	@ (800158c <main+0x80c>)
 8001436:	edd3 7a02 	vldr	s15, [r3, #8]
 800143a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd21      	ble.n	800148c <main+0x70c>
 8001448:	4b50      	ldr	r3, [pc, #320]	@ (800158c <main+0x80c>)
 800144a:	edd3 7a02 	vldr	s15, [r3, #8]
 800144e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d517      	bpl.n	800148c <main+0x70c>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 800145c:	4b4b      	ldr	r3, [pc, #300]	@ (800158c <main+0x80c>)
 800145e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001462:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	dd0d      	ble.n	800148c <main+0x70c>
 8001470:	4b46      	ldr	r3, [pc, #280]	@ (800158c <main+0x80c>)
 8001472:	edd3 7a04 	vldr	s15, [r3, #16]
 8001476:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800147a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	d503      	bpl.n	800148c <main+0x70c>
				State = 4;
 8001484:	4a42      	ldr	r2, [pc, #264]	@ (8001590 <main+0x810>)
 8001486:	2304      	movs	r3, #4
 8001488:	7013      	strb	r3, [r2, #0]
 800148a:	e07e      	b.n	800158a <main+0x80a>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 800148c:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <main+0x80c>)
 800148e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001492:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd17      	ble.n	80014d0 <main+0x750>
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <main+0x80c>)
 80014a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80014a6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd0d      	ble.n	80014d0 <main+0x750>
					&& Receiver[4] < 30) {
 80014b4:	4b35      	ldr	r3, [pc, #212]	@ (800158c <main+0x80c>)
 80014b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ba:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d503      	bpl.n	80014d0 <main+0x750>
				State = 5;
 80014c8:	4a31      	ldr	r2, [pc, #196]	@ (8001590 <main+0x810>)
 80014ca:	2305      	movs	r3, #5
 80014cc:	7013      	strb	r3, [r2, #0]
 80014ce:	e05c      	b.n	800158a <main+0x80a>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <main+0x80c>)
 80014d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014d6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d50d      	bpl.n	8001500 <main+0x780>
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <main+0x80c>)
 80014e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd03      	ble.n	8001500 <main+0x780>
				State = 6;
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <main+0x810>)
 80014fa:	2306      	movs	r3, #6
 80014fc:	7013      	strb	r3, [r2, #0]
 80014fe:	e044      	b.n	800158a <main+0x80a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <main+0x80c>)
 8001502:	edd3 7a02 	vldr	s15, [r3, #8]
 8001506:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	dd17      	ble.n	8001544 <main+0x7c4>
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <main+0x80c>)
 8001516:	edd3 7a02 	vldr	s15, [r3, #8]
 800151a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d50d      	bpl.n	8001544 <main+0x7c4>
					&& Receiver[4] > 30) {
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <main+0x80c>)
 800152a:	edd3 7a04 	vldr	s15, [r3, #16]
 800152e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd03      	ble.n	8001544 <main+0x7c4>
				State = 7;
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <main+0x810>)
 800153e:	2307      	movs	r3, #7
 8001540:	7013      	strb	r3, [r2, #0]
 8001542:	e022      	b.n	800158a <main+0x80a>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <main+0x80c>)
 8001546:	edd3 7a02 	vldr	s15, [r3, #8]
 800154a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	dc00      	bgt.n	800155a <main+0x7da>
			if (Receiver[2] > -30 && Receiver[2] < 30
 8001558:	e029      	b.n	80015ae <main+0x82e>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <main+0x80c>)
 800155c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001560:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dc00      	bgt.n	8001570 <main+0x7f0>
			if (Receiver[2] > -30 && Receiver[2] < 30
 800156e:	e01e      	b.n	80015ae <main+0x82e>
				loop_counter = 0;
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <main+0x814>)
 8001572:	2300      	movs	r3, #0
 8001574:	6013      	str	r3, [r2, #0]
				TargetR = M_PI;
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <main+0x818>)
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <main+0x81c>)
 800157a:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 800157c:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <main+0x820>)
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <main+0x824>)
 8001580:	6013      	str	r3, [r2, #0]
				State = 8;
 8001582:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <main+0x810>)
 8001584:	2308      	movs	r3, #8
 8001586:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30
 8001588:	e011      	b.n	80015ae <main+0x82e>
 800158a:	e010      	b.n	80015ae <main+0x82e>
 800158c:	20000248 	.word	0x20000248
 8001590:	20000376 	.word	0x20000376
 8001594:	2000039c 	.word	0x2000039c
 8001598:	20000320 	.word	0x20000320
 800159c:	40490fdb 	.word	0x40490fdb
 80015a0:	20000324 	.word	0x20000324
 80015a4:	42480000 	.word	0x42480000
			}
		}
		else{
			IsPress = 0;
 80015a8:	4ab7      	ldr	r2, [pc, #732]	@ (8001888 <main+0xb08>)
 80015aa:	2300      	movs	r3, #0
 80015ac:	7013      	strb	r3, [r2, #0]
//			}
//		}
		//////////////////////////////////////////////////////////////


		if (State == 0) {
 80015ae:	4bb7      	ldr	r3, [pc, #732]	@ (800188c <main+0xb0c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10e      	bne.n	80015d4 <main+0x854>
			Set_Motor(0, 0);
 80015b6:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 8001890 <main+0xb10>
 80015ba:	2000      	movs	r0, #0
 80015bc:	f001 fe28 	bl	8003210 <Set_Motor>
			Set_Motor(1, 0);
 80015c0:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8001890 <main+0xb10>
 80015c4:	2001      	movs	r0, #1
 80015c6:	f001 fe23 	bl	8003210 <Set_Motor>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1500);
 80015ca:	4bb2      	ldr	r3, [pc, #712]	@ (8001894 <main+0xb14>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80015d2:	6353      	str	r3, [r2, #52]	@ 0x34
		}

		//////////////////////// <<MANUAL>> //////////////////////////
		if (State == 1) {
 80015d4:	4bad      	ldr	r3, [pc, #692]	@ (800188c <main+0xb0c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	f040 8134 	bne.w	8001846 <main+0xac6>
		//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel = map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00);
 80015de:	4bae      	ldr	r3, [pc, #696]	@ (8001898 <main+0xb18>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80015e8:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80015ec:	ed9f 1aab 	vldr	s2, [pc, #684]	@ 800189c <main+0xb1c>
 80015f0:	eddf 0aab 	vldr	s1, [pc, #684]	@ 80018a0 <main+0xb20>
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f001 faa0 	bl	8002b3c <map>
 80015fc:	eef0 7a40 	vmov.f32	s15, s0
 8001600:	4ba8      	ldr	r3, [pc, #672]	@ (80018a4 <main+0xb24>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8001606:	4ba4      	ldr	r3, [pc, #656]	@ (8001898 <main+0xb18>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
 800160c:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 80018a8 <main+0xb28>
 8001610:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80018ac <main+0xb2c>
 8001614:	ed9f 1aa1 	vldr	s2, [pc, #644]	@ 800189c <main+0xb1c>
 8001618:	eddf 0aa1 	vldr	s1, [pc, #644]	@ 80018a0 <main+0xb20>
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	f001 fa8c 	bl	8002b3c <map>
 8001624:	eef0 7a40 	vmov.f32	s15, s0
 8001628:	4ba1      	ldr	r3, [pc, #644]	@ (80018b0 <main+0xb30>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
//		PID.Ki = 0.00001;
//		PID.Kd = 0.0;
//		arm_pid_init_f32(&PID, 1);
//		P_Speed = arm_pid_f32(&PID, TargetPVel - Prismatic_QEIdata.Velocity_mm);

			R_Velo_Error = TargetRVel - Revolute_QEIdata.AngularVelocity_rad;
 800162e:	4b9d      	ldr	r3, [pc, #628]	@ (80018a4 <main+0xb24>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	4b9f      	ldr	r3, [pc, #636]	@ (80018b4 <main+0xb34>)
 8001636:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	4b9e      	ldr	r3, [pc, #632]	@ (80018b8 <main+0xb38>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
			PID.Kp = 100;
 8001644:	4a9d      	ldr	r2, [pc, #628]	@ (80018bc <main+0xb3c>)
 8001646:	4b9e      	ldr	r3, [pc, #632]	@ (80018c0 <main+0xb40>)
 8001648:	6193      	str	r3, [r2, #24]
			PID.Ki = 0.1;
 800164a:	4a9c      	ldr	r2, [pc, #624]	@ (80018bc <main+0xb3c>)
 800164c:	4b9d      	ldr	r3, [pc, #628]	@ (80018c4 <main+0xb44>)
 800164e:	61d3      	str	r3, [r2, #28]
			PID.Kd = 0.0;
 8001650:	4a9a      	ldr	r2, [pc, #616]	@ (80018bc <main+0xb3c>)
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001658:	2101      	movs	r1, #1
 800165a:	4898      	ldr	r0, [pc, #608]	@ (80018bc <main+0xb3c>)
 800165c:	f005 fbe2 	bl	8006e24 <arm_pid_init_f32>
			R_Speed = arm_pid_f32(&PID, R_Velo_Error);
 8001660:	4b95      	ldr	r3, [pc, #596]	@ (80018b8 <main+0xb38>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b95      	ldr	r3, [pc, #596]	@ (80018bc <main+0xb3c>)
 8001666:	653b      	str	r3, [r7, #80]	@ 0x50
 8001668:	64fa      	str	r2, [r7, #76]	@ 0x4c
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800166a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001674:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800167a:	edd3 6a01 	vldr	s13, [r3, #4]
 800167e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001680:	edd3 7a03 	vldr	s15, [r3, #12]
 8001684:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001688:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800168c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800168e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001694:	edd3 7a04 	vldr	s15, [r3, #16]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016a2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* Update state */
    S->state[1] = S->state[0];
 80016ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016b4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80016b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ba:	60d3      	str	r3, [r2, #12]
    S->state[2] = out;
 80016bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016c0:	6153      	str	r3, [r2, #20]

    /* return to application */
    return (out);
 80016c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80016c4:	4b80      	ldr	r3, [pc, #512]	@ (80018c8 <main+0xb48>)
 80016c6:	601a      	str	r2, [r3, #0]

			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 80016c8:	4b79      	ldr	r3, [pc, #484]	@ (80018b0 <main+0xb30>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <main+0xb4c>)
 80016d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	4b7d      	ldr	r3, [pc, #500]	@ (80018d0 <main+0xb50>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
			PID.Kp = 0.2;
 80016de:	4a77      	ldr	r2, [pc, #476]	@ (80018bc <main+0xb3c>)
 80016e0:	4b7c      	ldr	r3, [pc, #496]	@ (80018d4 <main+0xb54>)
 80016e2:	6193      	str	r3, [r2, #24]
			PID.Ki = 0.005;
 80016e4:	4a75      	ldr	r2, [pc, #468]	@ (80018bc <main+0xb3c>)
 80016e6:	4b7c      	ldr	r3, [pc, #496]	@ (80018d8 <main+0xb58>)
 80016e8:	61d3      	str	r3, [r2, #28]
			PID.Kd = 0.0;
 80016ea:	4a74      	ldr	r2, [pc, #464]	@ (80018bc <main+0xb3c>)
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	4871      	ldr	r0, [pc, #452]	@ (80018bc <main+0xb3c>)
 80016f6:	f005 fb95 	bl	8006e24 <arm_pid_init_f32>
			P_Speed = arm_pid_f32(&PID, P_Velo_Error);
 80016fa:	4b75      	ldr	r3, [pc, #468]	@ (80018d0 <main+0xb50>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <main+0xb3c>)
 8001700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001702:	65ba      	str	r2, [r7, #88]	@ 0x58
    out = (S->A0 * in) +
 8001704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800170e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001714:	edd3 6a01 	vldr	s13, [r3, #4]
 8001718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800171a:	edd3 7a03 	vldr	s15, [r3, #12]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001722:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001728:	edd3 6a02 	vldr	s13, [r3, #8]
 800172c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800173a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    S->state[1] = S->state[0];
 8001748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001750:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001754:	60d3      	str	r3, [r2, #12]
    S->state[2] = out;
 8001756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	6153      	str	r3, [r2, #20]
    return (out);
 800175c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800175e:	4b5f      	ldr	r3, [pc, #380]	@ (80018dc <main+0xb5c>)
 8001760:	601a      	str	r2, [r3, #0]
//			if (currentTimeState1 > timestampState1) {
//				timestampState1 = currentTimeState1 + 10000;//us
//				P_Speed = PID_Update(P_Velo_Error, 0.2, 0.005, 0.0, 0.01f, -100.0, 100.0);
//			}

			R_Speed = Receiver[0];
 8001762:	4b4d      	ldr	r3, [pc, #308]	@ (8001898 <main+0xb18>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <main+0xb48>)
 8001768:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 800176a:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <main+0xb34>)
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feb6 	bl	80004e0 <__aeabi_f2d>
 8001774:	a340      	add	r3, pc, #256	@ (adr r3, 8001878 <main+0xaf8>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7ff f97b 	bl	8000a74 <__aeabi_dcmplt>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <main+0xa1c>
 8001784:	4b50      	ldr	r3, [pc, #320]	@ (80018c8 <main+0xb48>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dd03      	ble.n	800179c <main+0xa1c>
				R_Speed = 0;
 8001794:	4a4c      	ldr	r2, [pc, #304]	@ (80018c8 <main+0xb48>)
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 800179c:	4b45      	ldr	r3, [pc, #276]	@ (80018b4 <main+0xb34>)
 800179e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe9d 	bl	80004e0 <__aeabi_f2d>
 80017a6:	a336      	add	r3, pc, #216	@ (adr r3, 8001880 <main+0xb00>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f980 	bl	8000ab0 <__aeabi_dcmpgt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <main+0xa4e>
 80017b6:	4b44      	ldr	r3, [pc, #272]	@ (80018c8 <main+0xb48>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d503      	bpl.n	80017ce <main+0xa4e>
				R_Speed = 0;
 80017c6:	4a40      	ldr	r2, [pc, #256]	@ (80018c8 <main+0xb48>)
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 80017ce:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <main+0xb4c>)
 80017d0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017d4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80018e0 <main+0xb60>
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd0b      	ble.n	80017fa <main+0xa7a>
 80017e2:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <main+0xb5c>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dd03      	ble.n	80017fa <main+0xa7a>
				P_Speed = 0;
 80017f2:	4a3a      	ldr	r2, [pc, #232]	@ (80018dc <main+0xb5c>)
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <main+0xb4c>)
 80017fc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001800:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d50b      	bpl.n	8001826 <main+0xaa6>
 800180e:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <main+0xb5c>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d503      	bpl.n	8001826 <main+0xaa6>
				P_Speed = 0;
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <main+0xb5c>)
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 8001826:	4b28      	ldr	r3, [pc, #160]	@ (80018c8 <main+0xb48>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	2000      	movs	r0, #0
 8001832:	f001 fced 	bl	8003210 <Set_Motor>
			Set_Motor(1, P_Speed);
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <main+0xb5c>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	2001      	movs	r0, #1
 8001842:	f001 fce5 	bl	8003210 <Set_Motor>
		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<GOTO>> ////////////////////////////
		if (State == 2) {
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <main+0xb0c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b02      	cmp	r3, #2
 800184c:	f040 80f5 	bne.w	8001a3a <main+0xcba>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition)*-1;
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <main+0xb64>)
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <main+0xb34>)
 8001858:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	eef1 7a67 	vneg.f32	s15, s15
 8001864:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <main+0xb68>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <main+0xb6c>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <main+0xb4c>)
 8001872:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001876:	e03b      	b.n	80018f0 <main+0xb70>
 8001878:	1e8e6080 	.word	0x1e8e6080
 800187c:	bffeb7bf 	.word	0xbffeb7bf
 8001880:	bfb15b57 	.word	0xbfb15b57
 8001884:	40143eec 	.word	0x40143eec
 8001888:	20000378 	.word	0x20000378
 800188c:	20000376 	.word	0x20000376
 8001890:	00000000 	.word	0x00000000
 8001894:	200001f4 	.word	0x200001f4
 8001898:	20000248 	.word	0x20000248
 800189c:	42c80000 	.word	0x42c80000
 80018a0:	c2c80000 	.word	0xc2c80000
 80018a4:	20000328 	.word	0x20000328
 80018a8:	43fa0000 	.word	0x43fa0000
 80018ac:	c3fa0000 	.word	0xc3fa0000
 80018b0:	2000032c 	.word	0x2000032c
 80018b4:	20000290 	.word	0x20000290
 80018b8:	20000338 	.word	0x20000338
 80018bc:	20000348 	.word	0x20000348
 80018c0:	42c80000 	.word	0x42c80000
 80018c4:	3dcccccd 	.word	0x3dcccccd
 80018c8:	2000036c 	.word	0x2000036c
 80018cc:	200002d0 	.word	0x200002d0
 80018d0:	2000033c 	.word	0x2000033c
 80018d4:	3e4ccccd 	.word	0x3e4ccccd
 80018d8:	3ba3d70a 	.word	0x3ba3d70a
 80018dc:	20000370 	.word	0x20000370
 80018e0:	43988000 	.word	0x43988000
 80018e4:	20000320 	.word	0x20000320
 80018e8:	20000330 	.word	0x20000330
 80018ec:	20000324 	.word	0x20000324
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	4bbc      	ldr	r3, [pc, #752]	@ (8001be8 <main+0xe68>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80018fa:	f001 fa2d 	bl	8002d58 <micros>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
			if (currentTimeState2 > timestampState2) {
 8001906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800190a:	4bb8      	ldr	r3, [pc, #736]	@ (8001bec <main+0xe6c>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	4282      	cmp	r2, r0
 8001912:	418b      	sbcs	r3, r1
 8001914:	d23f      	bcs.n	8001996 <main+0xc16>
				timestampState2 = currentTimeState2 + 10000;//us
 8001916:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800191a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800191e:	1851      	adds	r1, r2, r1
 8001920:	6339      	str	r1, [r7, #48]	@ 0x30
 8001922:	f143 0300 	adc.w	r3, r3, #0
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
 8001928:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800192c:	4baf      	ldr	r3, [pc, #700]	@ (8001bec <main+0xe6c>)
 800192e:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
 8001932:	4baf      	ldr	r3, [pc, #700]	@ (8001bf0 <main+0xe70>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	48ae      	ldr	r0, [pc, #696]	@ (8001bf4 <main+0xe74>)
 800193a:	ed9f 3aaf 	vldr	s6, [pc, #700]	@ 8001bf8 <main+0xe78>
 800193e:	eddf 2aaf 	vldr	s5, [pc, #700]	@ 8001bfc <main+0xe7c>
 8001942:	ed9f 2aaf 	vldr	s4, [pc, #700]	@ 8001c00 <main+0xe80>
 8001946:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 800194a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800194e:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f001 fa19 	bl	8002d8c <PID_Update>
 800195a:	eef0 7a40 	vmov.f32	s15, s0
 800195e:	4ba9      	ldr	r3, [pc, #676]	@ (8001c04 <main+0xe84>)
 8001960:	edc3 7a00 	vstr	s15, [r3]
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);
 8001964:	4ba0      	ldr	r3, [pc, #640]	@ (8001be8 <main+0xe68>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	48a7      	ldr	r0, [pc, #668]	@ (8001c08 <main+0xe88>)
 800196c:	ed9f 3aa2 	vldr	s6, [pc, #648]	@ 8001bf8 <main+0xe78>
 8001970:	eddf 2aa2 	vldr	s5, [pc, #648]	@ 8001bfc <main+0xe7c>
 8001974:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 8001c00 <main+0xe80>
 8001978:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 8001c0c <main+0xe8c>
 800197c:	ed9f 1aa4 	vldr	s2, [pc, #656]	@ 8001c10 <main+0xe90>
 8001980:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8001c14 <main+0xe94>
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	f001 fa00 	bl	8002d8c <PID_Update>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	4ba1      	ldr	r3, [pc, #644]	@ (8001c18 <main+0xe98>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
			}

			Set_Motor(0, R_Speed);
 8001996:	4b9b      	ldr	r3, [pc, #620]	@ (8001c04 <main+0xe84>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	2000      	movs	r0, #0
 80019a2:	f001 fc35 	bl	8003210 <Set_Motor>
			Set_Motor(1, P_Speed);
 80019a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001c18 <main+0xe98>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	2001      	movs	r0, #1
 80019b2:	f001 fc2d 	bl	8003210 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 80019b6:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf0 <main+0xe70>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	eef0 7ae7 	vabs.f32	s15, s15
 80019c0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001c1c <main+0xe9c>
 80019c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d52c      	bpl.n	8001a28 <main+0xca8>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 80019ce:	4b86      	ldr	r3, [pc, #536]	@ (8001be8 <main+0xe68>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	eef0 7ae7 	vabs.f32	s15, s15
 80019d8:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001c20 <main+0xea0>
 80019dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d520      	bpl.n	8001a28 <main+0xca8>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 80019e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001c24 <main+0xea4>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	d107      	bne.n	8001a00 <main+0xc80>
					lock_timer_us = micros(); /* start timing */
 80019f0:	f001 f9b2 	bl	8002d58 <micros>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	498a      	ldr	r1, [pc, #552]	@ (8001c24 <main+0xea4>)
 80019fa:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 80019fe:	e01b      	b.n	8001a38 <main+0xcb8>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8001a00:	f001 f9aa 	bl	8002d58 <micros>
 8001a04:	4b87      	ldr	r3, [pc, #540]	@ (8001c24 <main+0xea4>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	1a84      	subs	r4, r0, r2
 8001a0c:	eb61 0503 	sbc.w	r5, r1, r3
 8001a10:	4b85      	ldr	r3, [pc, #532]	@ (8001c28 <main+0xea8>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	f175 0300 	sbcs.w	r3, r5, #0
 8001a18:	d30e      	bcc.n	8001a38 <main+0xcb8>
					Set_Servo(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f001 fc78 	bl	8003310 <Set_Servo>
					State = 1;
 8001a20:	4a82      	ldr	r2, [pc, #520]	@ (8001c2c <main+0xeac>)
 8001a22:	2301      	movs	r3, #1
 8001a24:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 8001a26:	e007      	b.n	8001a38 <main+0xcb8>
				}
			} else {
				lock_timer_us = 0;
 8001a28:	497e      	ldr	r1, [pc, #504]	@ (8001c24 <main+0xea4>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9c1 2300 	strd	r2, r3, [r1]
 8001a36:	e000      	b.n	8001a3a <main+0xcba>
				if (lock_timer_us == 0)
 8001a38:	bf00      	nop
		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<CALIBRATING>> /////////////////////
		if (State == 3) {
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c2c <main+0xeac>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	f040 8287 	bne.w	8001f52 <main+0x11d2>
			switch (calibState) {
 8001a44:	4b7a      	ldr	r3, [pc, #488]	@ (8001c30 <main+0xeb0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	f200 8282 	bhi.w	8001f52 <main+0x11d2>
 8001a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <main+0xcd4>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001abf 	.word	0x08001abf
 8001a5c:	08001b05 	.word	0x08001b05
 8001a60:	08001b4f 	.word	0x08001b4f
 8001a64:	08001b99 	.word	0x08001b99
 8001a68:	08001c5d 	.word	0x08001c5d
 8001a6c:	08001cb5 	.word	0x08001cb5
 8001a70:	08001cf5 	.word	0x08001cf5
 8001a74:	08001d53 	.word	0x08001d53
 8001a78:	08001dbf 	.word	0x08001dbf
 8001a7c:	08001e2b 	.word	0x08001e2b
 8001a80:	08001e95 	.word	0x08001e95
 8001a84:	08001ee7 	.word	0x08001ee7
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8001a88:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8001c58 <main+0xed8>
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f001 fbbf 	bl	8003210 <Set_Motor>
				Set_Motor(1, 0);
 8001a92:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8001c58 <main+0xed8>
 8001a96:	2001      	movs	r0, #1
 8001a98:	f001 fbba 	bl	8003210 <Set_Motor>
				P_Limit = 0;
 8001a9c:	4a65      	ldr	r2, [pc, #404]	@ (8001c34 <main+0xeb4>)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8001aa2:	4a65      	ldr	r2, [pc, #404]	@ (8001c38 <main+0xeb8>)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8001aa8:	4a61      	ldr	r2, [pc, #388]	@ (8001c30 <main+0xeb0>)
 8001aaa:	2301      	movs	r3, #1
 8001aac:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8001aae:	f001 f953 	bl	8002d58 <micros>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4961      	ldr	r1, [pc, #388]	@ (8001c3c <main+0xebc>)
 8001ab8:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001abc:	e249      	b.n	8001f52 <main+0x11d2>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8001abe:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <main+0xec0>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001c44 <main+0xec4>
 8001ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dd06      	ble.n	8001ae0 <main+0xd60>
					Cal_Side = 1;
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c48 <main+0xec8>)
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8001ad8:	4a55      	ldr	r2, [pc, #340]	@ (8001c30 <main+0xeb0>)
 8001ada:	2302      	movs	r3, #2
 8001adc:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8001ade:	e238      	b.n	8001f52 <main+0x11d2>
				} else if (Receiver[0] < -80) {
 8001ae0:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <main+0xec0>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001c4c <main+0xecc>
 8001aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d400      	bmi.n	8001af6 <main+0xd76>
				break;
 8001af4:	e22d      	b.n	8001f52 <main+0x11d2>
					Cal_Side = 2;
 8001af6:	4a54      	ldr	r2, [pc, #336]	@ (8001c48 <main+0xec8>)
 8001af8:	2302      	movs	r3, #2
 8001afa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8001afc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <main+0xeb0>)
 8001afe:	2302      	movs	r3, #2
 8001b00:	7013      	strb	r3, [r2, #0]
				break;
 8001b02:	e226      	b.n	8001f52 <main+0x11d2>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8001b04:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f001 fb81 	bl	8003210 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8001b0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b12:	484f      	ldr	r0, [pc, #316]	@ (8001c50 <main+0xed0>)
 8001b14:	f002 f9b6 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d004      	beq.n	8001b28 <main+0xda8>
 8001b1e:	4b45      	ldr	r3, [pc, #276]	@ (8001c34 <main+0xeb4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 81ef 	beq.w	8001f06 <main+0x1186>
					Set_Motor(1, 0);
 8001b28:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8001c58 <main+0xed8>
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f001 fb6f 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001b32:	f001 f911 	bl	8002d58 <micros>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4940      	ldr	r1, [pc, #256]	@ (8001c3c <main+0xebc>)
 8001b3c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001b40:	4a3c      	ldr	r2, [pc, #240]	@ (8001c34 <main+0xeb4>)
 8001b42:	2300      	movs	r3, #0
 8001b44:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8001b46:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <main+0xeb0>)
 8001b48:	2303      	movs	r3, #3
 8001b4a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001b4c:	e1db      	b.n	8001f06 <main+0x1186>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8001b4e:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8001c58 <main+0xed8>
 8001b52:	2001      	movs	r0, #1
 8001b54:	f001 fb5c 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001b58:	f001 f8fe 	bl	8002d58 <micros>
 8001b5c:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <main+0xebc>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	ebb0 0802 	subs.w	r8, r0, r2
 8001b66:	eb61 0903 	sbc.w	r9, r1, r3
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <main+0xed4>)
 8001b6c:	4598      	cmp	r8, r3
 8001b6e:	f179 0300 	sbcs.w	r3, r9, #0
 8001b72:	d311      	bcc.n	8001b98 <main+0xe18>
					Set_Motor(1, 15);
 8001b74:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f001 fb49 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001b7e:	f001 f8eb 	bl	8002d58 <micros>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	492d      	ldr	r1, [pc, #180]	@ (8001c3c <main+0xebc>)
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001b8c:	4a29      	ldr	r2, [pc, #164]	@ (8001c34 <main+0xeb4>)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8001b92:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <main+0xeb0>)
 8001b94:	2304      	movs	r3, #4
 8001b96:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 8001b98:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f001 fb37 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001ba2:	f001 f8d9 	bl	8002d58 <micros>
 8001ba6:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <main+0xebc>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	ebb0 0a02 	subs.w	sl, r0, r2
 8001bb0:	eb61 0b03 	sbc.w	fp, r1, r3
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <main+0xed4>)
 8001bb6:	459a      	cmp	sl, r3
 8001bb8:	f17b 0300 	sbcs.w	r3, fp, #0
 8001bbc:	f0c0 81a5 	bcc.w	8001f0a <main+0x118a>
					Set_Motor(1, 0);
 8001bc0:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001c58 <main+0xed8>
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f001 fb23 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001bca:	f001 f8c5 	bl	8002d58 <micros>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	491a      	ldr	r1, [pc, #104]	@ (8001c3c <main+0xebc>)
 8001bd4:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001bd8:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <main+0xeb4>)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8001bde:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <main+0xeb0>)
 8001be0:	2305      	movs	r3, #5
 8001be2:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001be4:	e191      	b.n	8001f0a <main+0x118a>
 8001be6:	bf00      	nop
 8001be8:	20000334 	.word	0x20000334
 8001bec:	200003b0 	.word	0x200003b0
 8001bf0:	20000330 	.word	0x20000330
 8001bf4:	2000038c 	.word	0x2000038c
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	c2c80000 	.word	0xc2c80000
 8001c00:	3c23d70a 	.word	0x3c23d70a
 8001c04:	2000036c 	.word	0x2000036c
 8001c08:	20000394 	.word	0x20000394
 8001c0c:	3e19999a 	.word	0x3e19999a
 8001c10:	3f99999a 	.word	0x3f99999a
 8001c14:	3eaa7efa 	.word	0x3eaa7efa
 8001c18:	20000370 	.word	0x20000370
 8001c1c:	3b5ed289 	.word	0x3b5ed289
 8001c20:	3dcccccd 	.word	0x3dcccccd
 8001c24:	20000340 	.word	0x20000340
 8001c28:	000f4240 	.word	0x000f4240
 8001c2c:	20000376 	.word	0x20000376
 8001c30:	20000379 	.word	0x20000379
 8001c34:	20000374 	.word	0x20000374
 8001c38:	20000375 	.word	0x20000375
 8001c3c:	20000380 	.word	0x20000380
 8001c40:	20000248 	.word	0x20000248
 8001c44:	42a00000 	.word	0x42a00000
 8001c48:	20000388 	.word	0x20000388
 8001c4c:	c2a00000 	.word	0xc2a00000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	000186a1 	.word	0x000186a1
 8001c58:	00000000 	.word	0x00000000

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8001c5c:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8001c58 <main+0xed8>
 8001c60:	2001      	movs	r0, #1
 8001c62:	f001 fad5 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001c66:	f001 f877 	bl	8002d58 <micros>
 8001c6a:	4baf      	ldr	r3, [pc, #700]	@ (8001f28 <main+0x11a8>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	1a86      	subs	r6, r0, r2
 8001c72:	62be      	str	r6, [r7, #40]	@ 0x28
 8001c74:	eb61 0303 	sbc.w	r3, r1, r3
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7a:	4bac      	ldr	r3, [pc, #688]	@ (8001f2c <main+0x11ac>)
 8001c7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c80:	4602      	mov	r2, r0
 8001c82:	429a      	cmp	r2, r3
 8001c84:	460b      	mov	r3, r1
 8001c86:	f173 0300 	sbcs.w	r3, r3, #0
 8001c8a:	f0c0 8140 	bcc.w	8001f0e <main+0x118e>
					Set_Motor(1, -5);
 8001c8e:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8001c92:	2001      	movs	r0, #1
 8001c94:	f001 fabc 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001c98:	f001 f85e 	bl	8002d58 <micros>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	49a1      	ldr	r1, [pc, #644]	@ (8001f28 <main+0x11a8>)
 8001ca2:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001ca6:	4aa2      	ldr	r2, [pc, #648]	@ (8001f30 <main+0x11b0>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8001cac:	4aa1      	ldr	r2, [pc, #644]	@ (8001f34 <main+0x11b4>)
 8001cae:	2306      	movs	r3, #6
 8001cb0:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001cb2:	e12c      	b.n	8001f0e <main+0x118e>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8001cb4:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f001 faa9 	bl	8003210 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8001cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc2:	489d      	ldr	r0, [pc, #628]	@ (8001f38 <main+0x11b8>)
 8001cc4:	f002 f8de 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d004      	beq.n	8001cd8 <main+0xf58>
 8001cce:	4b98      	ldr	r3, [pc, #608]	@ (8001f30 <main+0x11b0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 811d 	beq.w	8001f12 <main+0x1192>
					Set_Motor(1, 0);
 8001cd8:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8001f3c <main+0x11bc>
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f001 fa97 	bl	8003210 <Set_Motor>
					Reset_P();
 8001ce2:	f001 fb3f 	bl	8003364 <Reset_P>
					P_Limit = 0;
 8001ce6:	4a92      	ldr	r2, [pc, #584]	@ (8001f30 <main+0x11b0>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8001cec:	4a91      	ldr	r2, [pc, #580]	@ (8001f34 <main+0x11b4>)
 8001cee:	2307      	movs	r3, #7
 8001cf0:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001cf2:	e10e      	b.n	8001f12 <main+0x1192>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8001cf4:	4b92      	ldr	r3, [pc, #584]	@ (8001f40 <main+0x11c0>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <main+0xf88>
					Set_Motor(0, 30);
 8001cfc:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001d00:	2000      	movs	r0, #0
 8001d02:	f001 fa85 	bl	8003210 <Set_Motor>
 8001d06:	e004      	b.n	8001d12 <main+0xf92>
				else
					Set_Motor(0, -30);
 8001d08:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fa7f 	bl	8003210 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8001d12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d16:	4888      	ldr	r0, [pc, #544]	@ (8001f38 <main+0x11b8>)
 8001d18:	f002 f8b4 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d004      	beq.n	8001d2c <main+0xfac>
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <main+0x11c4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80f5 	beq.w	8001f16 <main+0x1196>
					Set_Motor(0, 0);
 8001d2c:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8001f3c <main+0x11bc>
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 fa6d 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001d36:	f001 f80f 	bl	8002d58 <micros>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	497a      	ldr	r1, [pc, #488]	@ (8001f28 <main+0x11a8>)
 8001d40:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001d44:	4a7f      	ldr	r2, [pc, #508]	@ (8001f44 <main+0x11c4>)
 8001d46:	2300      	movs	r3, #0
 8001d48:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8001d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f34 <main+0x11b4>)
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001d50:	e0e1      	b.n	8001f16 <main+0x1196>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8001d52:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8001f3c <main+0x11bc>
 8001d56:	2000      	movs	r0, #0
 8001d58:	f001 fa5a 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001d5c:	f000 fffc 	bl	8002d58 <micros>
 8001d60:	4b71      	ldr	r3, [pc, #452]	@ (8001f28 <main+0x11a8>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	1a86      	subs	r6, r0, r2
 8001d68:	623e      	str	r6, [r7, #32]
 8001d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d70:	4b6e      	ldr	r3, [pc, #440]	@ (8001f2c <main+0x11ac>)
 8001d72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d76:	4602      	mov	r2, r0
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	f173 0300 	sbcs.w	r3, r3, #0
 8001d80:	f0c0 80cb 	bcc.w	8001f1a <main+0x119a>
					if (Cal_Side == 1)
 8001d84:	4b6e      	ldr	r3, [pc, #440]	@ (8001f40 <main+0x11c0>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <main+0x1018>
						Set_Motor(0, -30);
 8001d8c:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f001 fa3d 	bl	8003210 <Set_Motor>
 8001d96:	e004      	b.n	8001da2 <main+0x1022>
					else
						Set_Motor(0, 30);
 8001d98:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f001 fa37 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001da2:	f000 ffd9 	bl	8002d58 <micros>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	495f      	ldr	r1, [pc, #380]	@ (8001f28 <main+0x11a8>)
 8001dac:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001db0:	4a64      	ldr	r2, [pc, #400]	@ (8001f44 <main+0x11c4>)
 8001db2:	2300      	movs	r3, #0
 8001db4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8001db6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f34 <main+0x11b4>)
 8001db8:	2309      	movs	r3, #9
 8001dba:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001dbc:	e0ad      	b.n	8001f1a <main+0x119a>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8001dbe:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <main+0x11c0>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <main+0x1052>
					Set_Motor(0, -30);
 8001dc6:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f001 fa20 	bl	8003210 <Set_Motor>
 8001dd0:	e004      	b.n	8001ddc <main+0x105c>
				else
					Set_Motor(0, 30);
 8001dd2:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f001 fa1a 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8001ddc:	f000 ffbc 	bl	8002d58 <micros>
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <main+0x11a8>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	1a86      	subs	r6, r0, r2
 8001de8:	61be      	str	r6, [r7, #24]
 8001dea:	eb61 0303 	sbc.w	r3, r1, r3
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <main+0x11c8>)
 8001df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df6:	4602      	mov	r2, r0
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f173 0300 	sbcs.w	r3, r3, #0
 8001e00:	f0c0 808d 	bcc.w	8001f1e <main+0x119e>
					Set_Motor(0, 0);
 8001e04:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8001f3c <main+0x11bc>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f001 fa01 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001e0e:	f000 ffa3 	bl	8002d58 <micros>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4944      	ldr	r1, [pc, #272]	@ (8001f28 <main+0x11a8>)
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001e1c:	4a49      	ldr	r2, [pc, #292]	@ (8001f44 <main+0x11c4>)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8001e22:	4a44      	ldr	r2, [pc, #272]	@ (8001f34 <main+0x11b4>)
 8001e24:	230a      	movs	r3, #10
 8001e26:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001e28:	e079      	b.n	8001f1e <main+0x119e>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8001e2a:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8001f3c <main+0x11bc>
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f001 f9ee 	bl	8003210 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001e34:	f000 ff90 	bl	8002d58 <micros>
 8001e38:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <main+0x11a8>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	1a86      	subs	r6, r0, r2
 8001e40:	613e      	str	r6, [r7, #16]
 8001e42:	eb61 0303 	sbc.w	r3, r1, r3
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <main+0x11ac>)
 8001e4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e4e:	4602      	mov	r2, r0
 8001e50:	429a      	cmp	r2, r3
 8001e52:	460b      	mov	r3, r1
 8001e54:	f173 0300 	sbcs.w	r3, r3, #0
 8001e58:	d363      	bcc.n	8001f22 <main+0x11a2>
					if (Cal_Side == 1)
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <main+0x11c0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <main+0x10ee>
						Set_Motor(0, 15);
 8001e62:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001e66:	2000      	movs	r0, #0
 8001e68:	f001 f9d2 	bl	8003210 <Set_Motor>
 8001e6c:	e004      	b.n	8001e78 <main+0x10f8>
					else
						Set_Motor(0, -15);
 8001e6e:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001e72:	2000      	movs	r0, #0
 8001e74:	f001 f9cc 	bl	8003210 <Set_Motor>
					calib_timer = micros();
 8001e78:	f000 ff6e 	bl	8002d58 <micros>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4929      	ldr	r1, [pc, #164]	@ (8001f28 <main+0x11a8>)
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001e86:	4a2f      	ldr	r2, [pc, #188]	@ (8001f44 <main+0x11c4>)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8001e8c:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <main+0x11b4>)
 8001e8e:	230b      	movs	r3, #11
 8001e90:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001e92:	e046      	b.n	8001f22 <main+0x11a2>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <main+0x11c0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <main+0x1128>
					Set_Motor(0, 15);
 8001e9c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f001 f9b5 	bl	8003210 <Set_Motor>
 8001ea6:	e004      	b.n	8001eb2 <main+0x1132>
				else
					Set_Motor(0, -15);
 8001ea8:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f001 f9af 	bl	8003210 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8001eb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eb6:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <main+0x11b8>)
 8001eb8:	f001 ffe4 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d003      	beq.n	8001eca <main+0x114a>
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <main+0x11c4>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d042      	beq.n	8001f50 <main+0x11d0>
					Set_Motor(0, 0);
 8001eca:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001f3c <main+0x11bc>
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f001 f99e 	bl	8003210 <Set_Motor>
					Reset_R();
 8001ed4:	f001 fa36 	bl	8003344 <Reset_R>
					R_Limit = 0;
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f44 <main+0x11c4>)
 8001eda:	2300      	movs	r3, #0
 8001edc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8001ede:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <main+0x11b4>)
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001ee4:	e034      	b.n	8001f50 <main+0x11d0>

			case CALIB_DONE:
				Cal_Side = 0;
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <main+0x11c0>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	7013      	strb	r3, [r2, #0]
				State = 0;
 8001eec:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <main+0x11cc>)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <main+0x11b0>)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <main+0x11c4>)
 8001efa:	2300      	movs	r3, #0
 8001efc:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8001efe:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <main+0x11b4>)
 8001f00:	2300      	movs	r3, #0
 8001f02:	7013      	strb	r3, [r2, #0]
				break;
 8001f04:	e025      	b.n	8001f52 <main+0x11d2>
				break;
 8001f06:	bf00      	nop
 8001f08:	e023      	b.n	8001f52 <main+0x11d2>
				break;
 8001f0a:	bf00      	nop
 8001f0c:	e021      	b.n	8001f52 <main+0x11d2>
				break;
 8001f0e:	bf00      	nop
 8001f10:	e01f      	b.n	8001f52 <main+0x11d2>
				break;
 8001f12:	bf00      	nop
 8001f14:	e01d      	b.n	8001f52 <main+0x11d2>
				break;
 8001f16:	bf00      	nop
 8001f18:	e01b      	b.n	8001f52 <main+0x11d2>
				break;
 8001f1a:	bf00      	nop
 8001f1c:	e019      	b.n	8001f52 <main+0x11d2>
				break;
 8001f1e:	bf00      	nop
 8001f20:	e017      	b.n	8001f52 <main+0x11d2>
				break;
 8001f22:	bf00      	nop
 8001f24:	e015      	b.n	8001f52 <main+0x11d2>
 8001f26:	bf00      	nop
 8001f28:	20000380 	.word	0x20000380
 8001f2c:	000186a1 	.word	0x000186a1
 8001f30:	20000374 	.word	0x20000374
 8001f34:	20000379 	.word	0x20000379
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	00000000 	.word	0x00000000
 8001f40:	20000388 	.word	0x20000388
 8001f44:	20000375 	.word	0x20000375
 8001f48:	00030d41 	.word	0x00030d41
 8001f4c:	20000376 	.word	0x20000376
				break;
 8001f50:	bf00      	nop
			}
		}

		if(State == 6){
 8001f52:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <main+0x13fc>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d102      	bne.n	8001f60 <main+0x11e0>
			Set_Servo(0);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f001 f9d8 	bl	8003310 <Set_Servo>
		}
		if(State == 7){
 8001f60:	4b86      	ldr	r3, [pc, #536]	@ (800217c <main+0x13fc>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b07      	cmp	r3, #7
 8001f66:	d102      	bne.n	8001f6e <main+0x11ee>
			Set_Servo(1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f001 f9d1 	bl	8003310 <Set_Servo>
		}
		if(State == 8){
 8001f6e:	4b83      	ldr	r3, [pc, #524]	@ (800217c <main+0x13fc>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	f47e af6a 	bne.w	8000e4c <main+0xcc>
			if (loop_counter < 100) {
 8001f78:	4b81      	ldr	r3, [pc, #516]	@ (8002180 <main+0x1400>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b63      	cmp	r3, #99	@ 0x63
 8001f7e:	f300 80f5 	bgt.w	800216c <main+0x13ec>
				static loop_temp = 0;

				R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition) * -1;
 8001f82:	4b80      	ldr	r3, [pc, #512]	@ (8002184 <main+0x1404>)
 8001f84:	ed93 7a00 	vldr	s14, [r3]
 8001f88:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <main+0x1408>)
 8001f8a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f92:	eef1 7a67 	vneg.f32	s15, s15
 8001f96:	4b7d      	ldr	r3, [pc, #500]	@ (800218c <main+0x140c>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8001f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002190 <main+0x1410>)
 8001f9e:	ed93 7a00 	vldr	s14, [r3]
 8001fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8002194 <main+0x1414>)
 8001fa4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	4b7a      	ldr	r3, [pc, #488]	@ (8002198 <main+0x1418>)
 8001fae:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState2 = 0;
				int64_t currentTimeState2 = micros();
 8001fb2:	f000 fed1 	bl	8002d58 <micros>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
				if (currentTimeState2 > timestampState2) {
 8001fbe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <main+0x141c>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	4282      	cmp	r2, r0
 8001fca:	418b      	sbcs	r3, r1
 8001fcc:	d23f      	bcs.n	800204e <main+0x12ce>
					timestampState2 = currentTimeState2 + 10000;		//us
 8001fce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001fd2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001fd6:	1851      	adds	r1, r2, r1
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	f143 0300 	adc.w	r3, r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800219c <main+0x141c>)
 8001fe6:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
 8001fea:	4b68      	ldr	r3, [pc, #416]	@ (800218c <main+0x140c>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	486b      	ldr	r0, [pc, #428]	@ (80021a0 <main+0x1420>)
 8001ff2:	ed9f 3a6c 	vldr	s6, [pc, #432]	@ 80021a4 <main+0x1424>
 8001ff6:	eddf 2a6c 	vldr	s5, [pc, #432]	@ 80021a8 <main+0x1428>
 8001ffa:	ed9f 2a6c 	vldr	s4, [pc, #432]	@ 80021ac <main+0x142c>
 8001ffe:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002002:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002006:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	f000 febd 	bl	8002d8c <PID_Update>
 8002012:	eef0 7a40 	vmov.f32	s15, s0
 8002016:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <main+0x1430>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);
 800201c:	4b5e      	ldr	r3, [pc, #376]	@ (8002198 <main+0x1418>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	4864      	ldr	r0, [pc, #400]	@ (80021b4 <main+0x1434>)
 8002024:	ed9f 3a5f 	vldr	s6, [pc, #380]	@ 80021a4 <main+0x1424>
 8002028:	eddf 2a5f 	vldr	s5, [pc, #380]	@ 80021a8 <main+0x1428>
 800202c:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 80021ac <main+0x142c>
 8002030:	eddf 1a61 	vldr	s3, [pc, #388]	@ 80021b8 <main+0x1438>
 8002034:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 80021bc <main+0x143c>
 8002038:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80021c0 <main+0x1440>
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	f000 fea4 	bl	8002d8c <PID_Update>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	4b5e      	ldr	r3, [pc, #376]	@ (80021c4 <main+0x1444>)
 800204a:	edc3 7a00 	vstr	s15, [r3]
				}

				Set_Motor(0, R_Speed);
 800204e:	4b58      	ldr	r3, [pc, #352]	@ (80021b0 <main+0x1430>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	eeb0 0a67 	vmov.f32	s0, s15
 8002058:	2000      	movs	r0, #0
 800205a:	f001 f8d9 	bl	8003210 <Set_Motor>
				Set_Motor(1, P_Speed);
 800205e:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <main+0x1444>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	2001      	movs	r0, #1
 800206a:	f001 f8d1 	bl	8003210 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <main+0x140c>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	eef0 7ae7 	vabs.f32	s15, s15
 8002078:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80021c8 <main+0x1448>
 800207c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	d569      	bpl.n	800215a <main+0x13da>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002086:	4b44      	ldr	r3, [pc, #272]	@ (8002198 <main+0x1418>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	eef0 7ae7 	vabs.f32	s15, s15
 8002090:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80021cc <main+0x144c>
 8002094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209c:	d55d      	bpl.n	800215a <main+0x13da>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <main+0x1450>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	d107      	bne.n	80020b8 <main+0x1338>
						lock_timer_us = micros(); /* start timing */
 80020a8:	f000 fe56 	bl	8002d58 <micros>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4947      	ldr	r1, [pc, #284]	@ (80021d0 <main+0x1450>)
 80020b2:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 80020b6:	e05e      	b.n	8002176 <main+0x13f6>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 80020b8:	f000 fe4e 	bl	8002d58 <micros>
 80020bc:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <main+0x1450>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	1a86      	subs	r6, r0, r2
 80020c4:	603e      	str	r6, [r7, #0]
 80020c6:	eb61 0303 	sbc.w	r3, r1, r3
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <main+0x1454>)
 80020ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d2:	4602      	mov	r2, r0
 80020d4:	429a      	cmp	r2, r3
 80020d6:	460b      	mov	r3, r1
 80020d8:	f173 0300 	sbcs.w	r3, r3, #0
 80020dc:	d34b      	bcc.n	8002176 <main+0x13f6>
						if(loop_temp == 0){
 80020de:	4b3e      	ldr	r3, [pc, #248]	@ (80021d8 <main+0x1458>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11a      	bne.n	800211c <main+0x139c>
							pid_r.integ = 0;
 80020e6:	4a2e      	ldr	r2, [pc, #184]	@ (80021a0 <main+0x1420>)
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 80020ee:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <main+0x1420>)
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 80020f6:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <main+0x1434>)
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 80020fe:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <main+0x1434>)
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	6053      	str	r3, [r2, #4]
							TargetR = 0;
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <main+0x1404>)
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 800210e:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <main+0x1410>)
 8002110:	4b32      	ldr	r3, [pc, #200]	@ (80021dc <main+0x145c>)
 8002112:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002114:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <main+0x1458>)
 8002116:	2301      	movs	r3, #1
 8002118:	6013      	str	r3, [r2, #0]
					if (lock_timer_us == 0)
 800211a:	e02c      	b.n	8002176 <main+0x13f6>
						}
						else{
							pid_r.integ = 0;
 800211c:	4a20      	ldr	r2, [pc, #128]	@ (80021a0 <main+0x1420>)
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002124:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <main+0x1420>)
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 800212c:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <main+0x1434>)
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002134:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <main+0x1434>)
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	6053      	str	r3, [r2, #4]
							TargetR = M_PI;
 800213c:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <main+0x1404>)
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <main+0x1460>)
 8002140:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8002142:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <main+0x1410>)
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <main+0x1464>)
 8002146:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8002148:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <main+0x1458>)
 800214a:	2300      	movs	r3, #0
 800214c:	6013      	str	r3, [r2, #0]
							loop_counter++;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <main+0x1400>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <main+0x1400>)
 8002156:	601a      	str	r2, [r3, #0]
					if (lock_timer_us == 0)
 8002158:	e00d      	b.n	8002176 <main+0x13f6>
						}
					}
				} else {
					lock_timer_us = 0;
 800215a:	491d      	ldr	r1, [pc, #116]	@ (80021d0 <main+0x1450>)
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9c1 2300 	strd	r2, r3, [r1]
 8002168:	f7fe be70 	b.w	8000e4c <main+0xcc>
				}
			}
			else{
				State = 0;
 800216c:	4a03      	ldr	r2, [pc, #12]	@ (800217c <main+0x13fc>)
 800216e:	2300      	movs	r3, #0
 8002170:	7013      	strb	r3, [r2, #0]
 8002172:	f7fe be6b 	b.w	8000e4c <main+0xcc>
					if (lock_timer_us == 0)
 8002176:	bf00      	nop
  {
 8002178:	f7fe be68 	b.w	8000e4c <main+0xcc>
 800217c:	20000376 	.word	0x20000376
 8002180:	2000039c 	.word	0x2000039c
 8002184:	20000320 	.word	0x20000320
 8002188:	20000290 	.word	0x20000290
 800218c:	20000330 	.word	0x20000330
 8002190:	20000324 	.word	0x20000324
 8002194:	200002d0 	.word	0x200002d0
 8002198:	20000334 	.word	0x20000334
 800219c:	200003b8 	.word	0x200003b8
 80021a0:	2000038c 	.word	0x2000038c
 80021a4:	42c80000 	.word	0x42c80000
 80021a8:	c2c80000 	.word	0xc2c80000
 80021ac:	3c23d70a 	.word	0x3c23d70a
 80021b0:	2000036c 	.word	0x2000036c
 80021b4:	20000394 	.word	0x20000394
 80021b8:	3e19999a 	.word	0x3e19999a
 80021bc:	3f99999a 	.word	0x3f99999a
 80021c0:	3eaa7efa 	.word	0x3eaa7efa
 80021c4:	20000370 	.word	0x20000370
 80021c8:	3b5ed289 	.word	0x3b5ed289
 80021cc:	3dcccccd 	.word	0x3dcccccd
 80021d0:	20000340 	.word	0x20000340
 80021d4:	000f4240 	.word	0x000f4240
 80021d8:	200003c0 	.word	0x200003c0
 80021dc:	437a0000 	.word	0x437a0000
 80021e0:	40490fdb 	.word	0x40490fdb
 80021e4:	42480000 	.word	0x42480000

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b094      	sub	sp, #80	@ 0x50
 80021ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	2238      	movs	r2, #56	@ 0x38
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fe4a 	bl	8006e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800220a:	2000      	movs	r0, #0
 800220c:	f001 fe82 	bl	8003f14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800221a:	2340      	movs	r3, #64	@ 0x40
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221e:	2302      	movs	r3, #2
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002222:	2302      	movs	r3, #2
 8002224:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002226:	2304      	movs	r3, #4
 8002228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800222a:	2355      	movs	r3, #85	@ 0x55
 800222c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222e:	2302      	movs	r3, #2
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002232:	2302      	movs	r3, #2
 8002234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002236:	2302      	movs	r3, #2
 8002238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223a:	f107 0318 	add.w	r3, r7, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f001 ff1c 	bl	800407c <HAL_RCC_OscConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800224a:	f001 f89d 	bl	8003388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224e:	230f      	movs	r3, #15
 8002250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002252:	2303      	movs	r3, #3
 8002254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2104      	movs	r1, #4
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fa1a 	bl	80046a0 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002272:	f001 f889 	bl	8003388 <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	@ 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	@ 0x30
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ae:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022b0:	4a35      	ldr	r2, [pc, #212]	@ (8002388 <MX_TIM1_Init+0x108>)
 80022b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022b6:	22a9      	movs	r2, #169	@ 0xa9
 80022b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022c0:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80022da:	482a      	ldr	r0, [pc, #168]	@ (8002384 <MX_TIM1_Init+0x104>)
 80022dc:	f002 fe78 	bl	8004fd0 <HAL_TIM_IC_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80022e6:	f001 f84f 	bl	8003388 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80022ea:	2304      	movs	r3, #4
 80022ec:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80022ee:	2360      	movs	r3, #96	@ 0x60
 80022f0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022f2:	2302      	movs	r3, #2
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	481f      	ldr	r0, [pc, #124]	@ (8002384 <MX_TIM1_Init+0x104>)
 8002306:	f003 fd09 	bl	8005d1c <HAL_TIM_SlaveConfigSynchro>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002310:	f001 f83a 	bl	8003388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	4815      	ldr	r0, [pc, #84]	@ (8002384 <MX_TIM1_Init+0x104>)
 800232e:	f003 fa2e 	bl	800578e <HAL_TIM_IC_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002338:	f001 f826 	bl	8003388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800233c:	2302      	movs	r3, #2
 800233e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	2204      	movs	r2, #4
 800234a:	4619      	mov	r1, r3
 800234c:	480d      	ldr	r0, [pc, #52]	@ (8002384 <MX_TIM1_Init+0x104>)
 800234e:	f003 fa1e 	bl	800578e <HAL_TIM_IC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002358:	f001 f816 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <MX_TIM1_Init+0x104>)
 800236e:	f004 fbe9 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002378:	f001 f806 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	3730      	adds	r7, #48	@ 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000002c 	.word	0x2000002c
 8002388:	40012c00 	.word	0x40012c00

0800238c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	@ 0x30
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ba:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80023c2:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023c4:	22a9      	movs	r2, #169	@ 0xa9
 80023c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023e2:	4829      	ldr	r0, [pc, #164]	@ (8002488 <MX_TIM2_Init+0xfc>)
 80023e4:	f002 fdf4 	bl	8004fd0 <HAL_TIM_IC_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80023ee:	f000 ffcb 	bl	8003388 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80023f2:	2304      	movs	r3, #4
 80023f4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80023f6:	2350      	movs	r3, #80	@ 0x50
 80023f8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	481e      	ldr	r0, [pc, #120]	@ (8002488 <MX_TIM2_Init+0xfc>)
 800240e:	f003 fc85 	bl	8005d1c <HAL_TIM_SlaveConfigSynchro>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002418:	f000 ffb6 	bl	8003388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	4619      	mov	r1, r3
 8002434:	4814      	ldr	r0, [pc, #80]	@ (8002488 <MX_TIM2_Init+0xfc>)
 8002436:	f003 f9aa 	bl	800578e <HAL_TIM_IC_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002440:	f000 ffa2 	bl	8003388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002444:	2302      	movs	r3, #2
 8002446:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002448:	2302      	movs	r3, #2
 800244a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2204      	movs	r2, #4
 8002452:	4619      	mov	r1, r3
 8002454:	480c      	ldr	r0, [pc, #48]	@ (8002488 <MX_TIM2_Init+0xfc>)
 8002456:	f003 f99a 	bl	800578e <HAL_TIM_IC_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002460:	f000 ff92 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800246c:	463b      	mov	r3, r7
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_TIM2_Init+0xfc>)
 8002472:	f004 fb67 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800247c:	f000 ff84 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3730      	adds	r7, #48	@ 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000078 	.word	0x20000078

0800248c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	@ 0x30
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f004 fcf8 	bl	8006e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024ac:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024d0:	2303      	movs	r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	4619      	mov	r1, r3
 80024fa:	480d      	ldr	r0, [pc, #52]	@ (8002530 <MX_TIM3_Init+0xa4>)
 80024fc:	f002 fec4 	bl	8005288 <HAL_TIM_Encoder_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002506:	f000 ff3f 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	@ (8002530 <MX_TIM3_Init+0xa4>)
 8002518:	f004 fb14 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002522:	f000 ff31 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3730      	adds	r7, #48	@ 0x30
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200000c4 	.word	0x200000c4
 8002534:	40000400 	.word	0x40000400

08002538 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	@ 0x30
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2224      	movs	r2, #36	@ 0x24
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f004 fca2 	bl	8006e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	463b      	mov	r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <MX_TIM4_Init+0xa4>)
 8002558:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <MX_TIM4_Init+0xa8>)
 800255a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800255c:	4b1f      	ldr	r3, [pc, #124]	@ (80025dc <MX_TIM4_Init+0xa4>)
 800255e:	2200      	movs	r2, #0
 8002560:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <MX_TIM4_Init+0xa4>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002568:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <MX_TIM4_Init+0xa4>)
 800256a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800256e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <MX_TIM4_Init+0xa4>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002576:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <MX_TIM4_Init+0xa4>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800257c:	2303      	movs	r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002584:	2301      	movs	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002594:	2301      	movs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002598:	2300      	movs	r3, #0
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4619      	mov	r1, r3
 80025a6:	480d      	ldr	r0, [pc, #52]	@ (80025dc <MX_TIM4_Init+0xa4>)
 80025a8:	f002 fe6e 	bl	8005288 <HAL_TIM_Encoder_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80025b2:	f000 fee9 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025be:	463b      	mov	r3, r7
 80025c0:	4619      	mov	r1, r3
 80025c2:	4806      	ldr	r0, [pc, #24]	@ (80025dc <MX_TIM4_Init+0xa4>)
 80025c4:	f004 fabe 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80025ce:	f000 fedb 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	3730      	adds	r7, #48	@ 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000110 	.word	0x20000110
 80025e0:	40000800 	.word	0x40000800

080025e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002604:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <MX_TIM5_Init+0x98>)
 8002606:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <MX_TIM5_Init+0x94>)
 800260a:	22a9      	movs	r2, #169	@ 0xa9
 800260c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002614:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <MX_TIM5_Init+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002628:	4813      	ldr	r0, [pc, #76]	@ (8002678 <MX_TIM5_Init+0x94>)
 800262a:	f002 fa1d 	bl	8004a68 <HAL_TIM_Base_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002634:	f000 fea8 	bl	8003388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002646:	f003 fa53 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002650:	f000 fe9a 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	@ (8002678 <MX_TIM5_Init+0x94>)
 8002662:	f004 fa6f 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800266c:	f000 fe8c 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000015c 	.word	0x2000015c
 800267c:	40000c00 	.word	0x40000c00

08002680 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b09c      	sub	sp, #112	@ 0x70
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	615a      	str	r2, [r3, #20]
 80026b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2234      	movs	r2, #52	@ 0x34
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fbe8 	bl	8006e90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026c0:	4b4c      	ldr	r3, [pc, #304]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026c2:	4a4d      	ldr	r2, [pc, #308]	@ (80027f8 <MX_TIM8_Init+0x178>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80026c6:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026c8:	22a9      	movs	r2, #169	@ 0xa9
 80026ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b49      	ldr	r3, [pc, #292]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80026d2:	4b48      	ldr	r3, [pc, #288]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026e0:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b43      	ldr	r3, [pc, #268]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026ec:	4841      	ldr	r0, [pc, #260]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80026ee:	f002 f9bb 	bl	8004a68 <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80026f8:	f000 fe46 	bl	8003388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002700:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002706:	4619      	mov	r1, r3
 8002708:	483a      	ldr	r0, [pc, #232]	@ (80027f4 <MX_TIM8_Init+0x174>)
 800270a:	f003 f9f1 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002714:	f000 fe38 	bl	8003388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002718:	4836      	ldr	r0, [pc, #216]	@ (80027f4 <MX_TIM8_Init+0x174>)
 800271a:	f002 fae5 	bl	8004ce8 <HAL_TIM_PWM_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002724:	f000 fe30 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002734:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002738:	4619      	mov	r1, r3
 800273a:	482e      	ldr	r0, [pc, #184]	@ (80027f4 <MX_TIM8_Init+0x174>)
 800273c:	f004 fa02 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002746:	f000 fe1f 	bl	8003388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800274a:	2360      	movs	r3, #96	@ 0x60
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1000;
 800274e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002754:	2300      	movs	r3, #0
 8002756:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002758:	2300      	movs	r3, #0
 800275a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002768:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800276c:	2208      	movs	r2, #8
 800276e:	4619      	mov	r1, r3
 8002770:	4820      	ldr	r0, [pc, #128]	@ (80027f4 <MX_TIM8_Init+0x174>)
 8002772:	f003 f8a9 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800277c:	f000 fe04 	bl	8003388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002780:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002784:	220c      	movs	r2, #12
 8002786:	4619      	mov	r1, r3
 8002788:	481a      	ldr	r0, [pc, #104]	@ (80027f4 <MX_TIM8_Init+0x174>)
 800278a:	f003 f89d 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002794:	f000 fdf8 	bl	8003388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4807      	ldr	r0, [pc, #28]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80027d6:	f004 fa4b 	bl	8006c70 <HAL_TIMEx_ConfigBreakDeadTime>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80027e0:	f000 fdd2 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <MX_TIM8_Init+0x174>)
 80027e6:	f000 ff37 	bl	8003658 <HAL_TIM_MspPostInit>

}
 80027ea:	bf00      	nop
 80027ec:	3770      	adds	r7, #112	@ 0x70
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200001a8 	.word	0x200001a8
 80027f8:	40013400 	.word	0x40013400

080027fc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b09c      	sub	sp, #112	@ 0x70
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002802:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2234      	movs	r2, #52	@ 0x34
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f004 fb2a 	bl	8006e90 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800283c:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <MX_TIM15_Init+0x140>)
 800283e:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <MX_TIM15_Init+0x144>)
 8002840:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8002842:	4b3e      	ldr	r3, [pc, #248]	@ (800293c <MX_TIM15_Init+0x140>)
 8002844:	22a9      	movs	r2, #169	@ 0xa9
 8002846:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b3c      	ldr	r3, [pc, #240]	@ (800293c <MX_TIM15_Init+0x140>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 800284e:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <MX_TIM15_Init+0x140>)
 8002850:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002854:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b39      	ldr	r3, [pc, #228]	@ (800293c <MX_TIM15_Init+0x140>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800285c:	4b37      	ldr	r3, [pc, #220]	@ (800293c <MX_TIM15_Init+0x140>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b36      	ldr	r3, [pc, #216]	@ (800293c <MX_TIM15_Init+0x140>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002868:	4834      	ldr	r0, [pc, #208]	@ (800293c <MX_TIM15_Init+0x140>)
 800286a:	f002 f8fd 	bl	8004a68 <HAL_TIM_Base_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002874:	f000 fd88 	bl	8003388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800287e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002882:	4619      	mov	r1, r3
 8002884:	482d      	ldr	r0, [pc, #180]	@ (800293c <MX_TIM15_Init+0x140>)
 8002886:	f003 f933 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002890:	f000 fd7a 	bl	8003388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002894:	4829      	ldr	r0, [pc, #164]	@ (800293c <MX_TIM15_Init+0x140>)
 8002896:	f002 fa27 	bl	8004ce8 <HAL_TIM_PWM_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80028a0:	f000 fd72 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80028ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028b0:	4619      	mov	r1, r3
 80028b2:	4822      	ldr	r0, [pc, #136]	@ (800293c <MX_TIM15_Init+0x140>)
 80028b4:	f004 f946 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80028be:	f000 fd63 	bl	8003388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c2:	2360      	movs	r3, #96	@ 0x60
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ca:	2300      	movs	r3, #0
 80028cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028ce:	2300      	movs	r3, #0
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4815      	ldr	r0, [pc, #84]	@ (800293c <MX_TIM15_Init+0x140>)
 80028e8:	f002 ffee 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80028f2:	f000 fd49 	bl	8003388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800290a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	@ (800293c <MX_TIM15_Init+0x140>)
 800291e:	f004 f9a7 	bl	8006c70 <HAL_TIMEx_ConfigBreakDeadTime>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8002928:	f000 fd2e 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800292c:	4803      	ldr	r0, [pc, #12]	@ (800293c <MX_TIM15_Init+0x140>)
 800292e:	f000 fe93 	bl	8003658 <HAL_TIM_MspPostInit>

}
 8002932:	bf00      	nop
 8002934:	3770      	adds	r7, #112	@ 0x70
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200001f4 	.word	0x200001f4
 8002940:	40014000 	.word	0x40014000

08002944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	4a74      	ldr	r2, [pc, #464]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	4a6e      	ldr	r2, [pc, #440]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002978:	f043 0320 	orr.w	r3, r3, #32
 800297c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	4a68      	ldr	r2, [pc, #416]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002996:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a6:	4a62      	ldr	r2, [pc, #392]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ae:	4b60      	ldr	r3, [pc, #384]	@ (8002b30 <MX_GPIO_Init+0x1ec>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2120      	movs	r1, #32
 80029be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c2:	f001 fa77 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 80029cc:	4859      	ldr	r0, [pc, #356]	@ (8002b34 <MX_GPIO_Init+0x1f0>)
 80029ce:	f001 fa71 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80029d2:	230d      	movs	r3, #13
 80029d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4853      	ldr	r0, [pc, #332]	@ (8002b34 <MX_GPIO_Init+0x1f0>)
 80029e8:	f001 f8ca 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ec:	230c      	movs	r3, #12
 80029ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029fc:	2307      	movs	r3, #7
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0a:	f001 f8b9 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a28:	f001 f8aa 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8002a2c:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8002a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	483b      	ldr	r0, [pc, #236]	@ (8002b34 <MX_GPIO_Init+0x1f0>)
 8002a46:	f001 f89b 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8002a4a:	f640 0304 	movw	r3, #2052	@ 0x804
 8002a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4836      	ldr	r0, [pc, #216]	@ (8002b38 <MX_GPIO_Init+0x1f4>)
 8002a60:	f001 f88e 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a64:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a6a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a70:	2302      	movs	r3, #2
 8002a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482f      	ldr	r0, [pc, #188]	@ (8002b38 <MX_GPIO_Init+0x1f4>)
 8002a7c:	f001 f880 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4828      	ldr	r0, [pc, #160]	@ (8002b38 <MX_GPIO_Init+0x1f4>)
 8002a98:	f001 f872 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab6:	f001 f863 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4818      	ldr	r0, [pc, #96]	@ (8002b34 <MX_GPIO_Init+0x1f0>)
 8002ad2:	f001 f855 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2006      	movs	r0, #6
 8002adc:	f001 f81b 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ae0:	2006      	movs	r0, #6
 8002ae2:	f001 f832 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2008      	movs	r0, #8
 8002aec:	f001 f813 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002af0:	2008      	movs	r0, #8
 8002af2:	f001 f82a 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2009      	movs	r0, #9
 8002afc:	f001 f80b 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b00:	2009      	movs	r0, #9
 8002b02:	f001 f822 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2017      	movs	r0, #23
 8002b0c:	f001 f803 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b10:	2017      	movs	r0, #23
 8002b12:	f001 f81a 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2028      	movs	r0, #40	@ 0x28
 8002b1c:	f000 fffb 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b20:	2028      	movs	r0, #40	@ 0x28
 8002b22:	f001 f812 	bl	8003b4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	@ 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	48000800 	.word	0x48000800
 8002b38:	48000400 	.word	0x48000400

08002b3c <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b46:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b52:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b56:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b62:	edd7 6a01 	vldr	s13, [r7, #4]
 8002b66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b72:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DWT_Init>:

void DWT_Init(void) {
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <DWT_Init+0x28>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <DWT_Init+0x28>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <DWT_Init+0x2c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <DWT_Init+0x2c>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000edf0 	.word	0xe000edf0
 8002bc4:	e0001000 	.word	0xe0001000

08002bc8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002bda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bde:	4845      	ldr	r0, [pc, #276]	@ (8002cf4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002be0:	f001 f950 	bl	8003e84 <HAL_GPIO_ReadPin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_GPIO_EXTI_Callback+0x2e>
			State = 0;
 8002bea:	4b43      	ldr	r3, [pc, #268]	@ (8002cf8 <HAL_GPIO_EXTI_Callback+0x130>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8002bf0:	4b42      	ldr	r3, [pc, #264]	@ (8002cfc <HAL_GPIO_EXTI_Callback+0x134>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bfc:	d10e      	bne.n	8002c1c <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8002bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c02:	483f      	ldr	r0, [pc, #252]	@ (8002d00 <HAL_GPIO_EXTI_Callback+0x138>)
 8002c04:	f001 f93e 	bl	8003e84 <HAL_GPIO_ReadPin>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d103      	bne.n	8002c16 <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8002c16:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c22:	d10e      	bne.n	8002c42 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8002c24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c28:	4835      	ldr	r0, [pc, #212]	@ (8002d00 <HAL_GPIO_EXTI_Callback+0x138>)
 8002c2a:	f001 f92b 	bl	8003e84 <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d103      	bne.n	8002c3c <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_GPIO_EXTI_Callback+0x140>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8002c3c:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <HAL_GPIO_EXTI_Callback+0x140>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c48:	d102      	bne.n	8002c50 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_GPIO_EXTI_Callback+0x134>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
	}

    static uint8_t state[3] = {0};  // 0 = waiting for rise, 1 = waiting for fall

    uint32_t now = DWT->CYCCNT;
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_GPIO_EXTI_Callback+0x144>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
    uint32_t idx;

    if (GPIO_Pin == GPIO_PIN_0) idx = 0;      // PC0
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_GPIO_EXTI_Callback+0x9a>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e00a      	b.n	8002c78 <HAL_GPIO_EXTI_Callback+0xb0>
    else if (GPIO_Pin == GPIO_PIN_2) idx = 1; // PC2
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d102      	bne.n	8002c6e <HAL_GPIO_EXTI_Callback+0xa6>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_EXTI_Callback+0xb0>
    else if (GPIO_Pin == GPIO_PIN_3) idx = 2; // PC3
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d13b      	bne.n	8002cec <HAL_GPIO_EXTI_Callback+0x124>
 8002c74:	2302      	movs	r3, #2
 8002c76:	617b      	str	r3, [r7, #20]
    else return;

    if (state[idx] == 0) {
 8002c78:	4a25      	ldr	r2, [pc, #148]	@ (8002d10 <HAL_GPIO_EXTI_Callback+0x148>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_GPIO_EXTI_Callback+0xd2>
        rise_time[idx] = now;
 8002c84:	4923      	ldr	r1, [pc, #140]	@ (8002d14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        state[idx] = 1;
 8002c8e:	4a20      	ldr	r2, [pc, #128]	@ (8002d10 <HAL_GPIO_EXTI_Callback+0x148>)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4413      	add	r3, r2
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e029      	b.n	8002cee <HAL_GPIO_EXTI_Callback+0x126>
    } else {
        uint32_t delta = (now >= rise_time[idx])
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            ? (now - rise_time[idx])
            : (0xFFFFFFFF - rise_time[idx] + now);
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d306      	bcc.n	8002cb6 <HAL_GPIO_EXTI_Callback+0xee>
            ? (now - rise_time[idx])
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            : (0xFFFFFFFF - rise_time[idx] + now);
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_EXTI_Callback+0xfc>
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	3b01      	subs	r3, #1
        uint32_t delta = (now >= rise_time[idx])
 8002cc4:	60fb      	str	r3, [r7, #12]
        pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8002cc6:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <HAL_GPIO_EXTI_Callback+0x150>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <HAL_GPIO_EXTI_Callback+0x154>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	0c9b      	lsrs	r3, r3, #18
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	4911      	ldr	r1, [pc, #68]	@ (8002d20 <HAL_GPIO_EXTI_Callback+0x158>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        state[idx] = 0;
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <HAL_GPIO_EXTI_Callback+0x148>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e000      	b.n	8002cee <HAL_GPIO_EXTI_Callback+0x126>
    else return;
 8002cec:	bf00      	nop
    }
}
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	48000800 	.word	0x48000800
 8002cf8:	20000376 	.word	0x20000376
 8002cfc:	20000377 	.word	0x20000377
 8002d00:	48000400 	.word	0x48000400
 8002d04:	20000374 	.word	0x20000374
 8002d08:	20000375 	.word	0x20000375
 8002d0c:	e0001000 	.word	0xe0001000
 8002d10:	200003c4 	.word	0x200003c4
 8002d14:	20000270 	.word	0x20000270
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	431bde83 	.word	0x431bde83
 8002d20:	2000027c 	.word	0x2000027c

08002d24 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d24:	b4b0      	push	{r4, r5, r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002d34:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	1e54      	subs	r4, r2, #1
 8002d3c:	f143 0500 	adc.w	r5, r3, #0
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002d42:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bcb0      	pop	{r4, r5, r7}
 8002d4e:	4770      	bx	lr
 8002d50:	2000015c 	.word	0x2000015c
 8002d54:	20000240 	.word	0x20000240

08002d58 <micros>:
uint64_t micros() {
 8002d58:	b4b0      	push	{r4, r5, r7}
 8002d5a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <micros+0x2c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	2200      	movs	r2, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	4611      	mov	r1, r2
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <micros+0x30>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	1884      	adds	r4, r0, r2
 8002d70:	eb41 0503 	adc.w	r5, r1, r3
 8002d74:	4622      	mov	r2, r4
 8002d76:	462b      	mov	r3, r5
}
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bcb0      	pop	{r4, r5, r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	2000015c 	.word	0x2000015c
 8002d88:	20000240 	.word	0x20000240

08002d8c <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b08f      	sub	sp, #60	@ 0x3c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	ed87 0a07 	vstr	s0, [r7, #28]
 8002d96:	edc7 0a06 	vstr	s1, [r7, #24]
 8002d9a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002d9e:	edc7 1a04 	vstr	s3, [r7, #16]
 8002da2:	ed87 2a03 	vstr	s4, [r7, #12]
 8002da6:	edc7 2a02 	vstr	s5, [r7, #8]
 8002daa:	ed87 3a01 	vstr	s6, [r7, #4]
 8002dae:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8002db0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002db4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	ed93 7a00 	vldr	s14, [r3]
 8002dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	ed93 7a00 	vldr	s14, [r3]
 8002de2:	ed97 6a01 	vldr	s12, [r7, #4]
 8002de6:	edd7 6a05 	vldr	s13, [r7, #20]
 8002dea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	dd08      	ble.n	8002e0a <PID_Update+0x7e>
		state->integ = outMax / kI;
 8002df8:	edd7 6a01 	vldr	s13, [r7, #4]
 8002dfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	ed93 7a00 	vldr	s14, [r3]
 8002e10:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e14:	edd7 6a05 	vldr	s13, [r7, #20]
 8002e18:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	d508      	bpl.n	8002e38 <PID_Update+0xac>
		state->integ = outMin / kI;
 8002e26:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8002e38:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	dd0b      	ble.n	8002e5e <PID_Update+0xd2>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	d503      	bpl.n	8002e5e <PID_Update+0xd2>
		state->integ = 0;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8002e5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	d50b      	bpl.n	8002e84 <PID_Update+0xf8>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd03      	ble.n	8002e84 <PID_Update+0xf8>
		state->integ = 0;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ea0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ea4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eac:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8002eb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8002ec6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002eca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8002ede:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	dd01      	ble.n	8002ef4 <PID_Update+0x168>
		out = outMax;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8002ef4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	d501      	bpl.n	8002f0a <PID_Update+0x17e>
		out = outMin;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0c:	ee07 3a90 	vmov	s15, r3
}
 8002f10:	eeb0 0a67 	vmov.f32	s0, s15
 8002f14:	373c      	adds	r7, #60	@ 0x3c
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8002f28:	f7ff ff16 	bl	8002d58 <micros>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	495f      	ldr	r1, [pc, #380]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f32:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8002f36:	4b5f      	ldr	r3, [pc, #380]	@ (80030b4 <Revolute_PosVel_Update+0x194>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f3e:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8002f40:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f50:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f52:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition = Revolute_QEIdata.Position[NEW] - Revolute_QEIdata.Position[OLD];
 8002f56:	4b56      	ldr	r3, [pc, #344]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b55      	ldr	r3, [pc, #340]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition > (65536 / 2))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f68:	dd04      	ble.n	8002f74 <Revolute_PosVel_Update+0x54>
		diffPosition -= 65536;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e007      	b.n	8002f84 <Revolute_PosVel_Update+0x64>
	else if (diffPosition < -(65536 / 2))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002f7a:	da03      	bge.n	8002f84 <Revolute_PosVel_Update+0x64>
		diffPosition += 65536;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002f82:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime = (Revolute_QEIdata.TimeStamp[NEW] - Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8002f84:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f8a:	4b49      	ldr	r3, [pc, #292]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002f8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f90:	ebb0 0a02 	subs.w	sl, r0, r2
 8002f94:	eb61 0b03 	sbc.w	fp, r1, r3
 8002f98:	4650      	mov	r0, sl
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	f7fd feaa 	bl	8000cf4 <__aeabi_ul2f>
 8002fa0:	ee07 0a10 	vmov	s14, r0
 8002fa4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80030b8 <Revolute_PosVel_Update+0x198>
 8002fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fac:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime == 0)
 8002fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d06d      	beq.n	800309a <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts = (float) diffPosition / diffTime;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd0:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts - Revolute_QEIdata.QEIAngularVelocity) / diffTime;
 8002fd4:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002fd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fda:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fea:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002fec:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts;
 8002ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts * (2.0f * M_PI / 16384.0f);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fa72 	bl	80004e0 <__aeabi_f2d>
 8002ffc:	a32a      	add	r3, pc, #168	@ (adr r3, 80030a8 <Revolute_PosVel_Update+0x188>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fac5 	bl	8000590 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fd59 	bl	8000ac4 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
 8003014:	4a26      	ldr	r2, [pc, #152]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003016:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad = Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003018:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa5f 	bl	80004e0 <__aeabi_f2d>
 8003022:	a321      	add	r3, pc, #132	@ (adr r3, 80030a8 <Revolute_PosVel_Update+0x188>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fab2 	bl	8000590 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd46 	bl	8000ac4 <__aeabi_d2f>
 8003038:	4603      	mov	r3, r0
 800303a:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 800303c:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition;
 800303e:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003040:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	17c8      	asrs	r0, r1, #31
 8003048:	460c      	mov	r4, r1
 800304a:	4605      	mov	r5, r0
 800304c:	eb12 0804 	adds.w	r8, r2, r4
 8003050:	eb43 0905 	adc.w	r9, r3, r5
 8003054:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003056:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition * (2.0f * M_PI / 16384.0f);
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 800305c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fa66 	bl	8000534 <__aeabi_l2d>
 8003068:	a30f      	add	r3, pc, #60	@ (adr r3, 80030a8 <Revolute_PosVel_Update+0x188>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd fa8f 	bl	8000590 <__aeabi_dmul>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f7fd fd23 	bl	8000ac4 <__aeabi_d2f>
 800307e:	4603      	mov	r3, r0
 8003080:	4a0b      	ldr	r2, [pc, #44]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003082:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8003084:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 800308a:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 800308e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003092:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <Revolute_PosVel_Update+0x190>)
 8003094:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003098:	e000      	b.n	800309c <Revolute_PosVel_Update+0x17c>
		return;
 800309a:	bf00      	nop
}
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a4:	f3af 8000 	nop.w
 80030a8:	54442d18 	.word	0x54442d18
 80030ac:	3f3921fb 	.word	0x3f3921fb
 80030b0:	20000290 	.word	0x20000290
 80030b4:	20000110 	.word	0x20000110
 80030b8:	358637bd 	.word	0x358637bd

080030bc <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 80030bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 80030c4:	f7ff fe48 	bl	8002d58 <micros>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	494c      	ldr	r1, [pc, #304]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80030ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80030d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003204 <Prismatic_PosVel_Update+0x148>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	4a49      	ldr	r2, [pc, #292]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80030da:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition = Prismatic_QEIdata.Position[NEW] - Prismatic_QEIdata.Position[OLD];
 80030dc:	4b48      	ldr	r3, [pc, #288]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition > (65536 / 2))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ee:	dd04      	ble.n	80030fa <Prismatic_PosVel_Update+0x3e>
		diffPosition -= 65536;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e007      	b.n	800310a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition < -(65536 / 2))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003100:	da03      	bge.n	800310a <Prismatic_PosVel_Update+0x4e>
		diffPosition += 65536;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003108:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime = (Prismatic_QEIdata.TimeStamp[NEW] - Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 800310c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003110:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 8003112:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003116:	ebb0 0a02 	subs.w	sl, r0, r2
 800311a:	eb61 0b03 	sbc.w	fp, r1, r3
 800311e:	4650      	mov	r0, sl
 8003120:	4659      	mov	r1, fp
 8003122:	f7fd fde7 	bl	8000cf4 <__aeabi_ul2f>
 8003126:	ee07 0a10 	vmov	s14, r0
 800312a:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003208 <Prismatic_PosVel_Update+0x14c>
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime == 0)
 8003136:	edd7 7a02 	vldr	s15, [r7, #8]
 800313a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	d057      	beq.n	80031f4 <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts = (float) diffPosition / diffTime;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800314e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003156:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts - Prismatic_QEIdata.QEIVelocity) / diffTime;
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 800315c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003160:	ed97 7a01 	vldr	s14, [r7, #4]
 8003164:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003168:	ed97 7a02 	vldr	s14, [r7, #8]
 800316c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003170:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 8003172:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts;
 8003176:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts * (10.0f / 8192.0f);
 800317c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003180:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800320c <Prismatic_PosVel_Update+0x150>
 8003184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 800318a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration * (10.0f / 8192.0f);
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 8003190:	edd3 7a07 	vldr	s15, [r3, #28]
 8003194:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800320c <Prismatic_PosVel_Update+0x150>
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 800319e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	17c8      	asrs	r0, r1, #31
 80031ac:	460c      	mov	r4, r1
 80031ae:	4605      	mov	r5, r0
 80031b0:	eb12 0804 	adds.w	r8, r2, r4
 80031b4:	eb43 0905 	adc.w	r9, r3, r5
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031ba:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition * (10.0f / 8192.0f);
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f7fd fd9c 	bl	8000d04 <__aeabi_l2f>
 80031cc:	ee07 0a10 	vmov	s14, r0
 80031d0:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800320c <Prismatic_PosVel_Update+0x150>
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031da:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a07      	ldr	r2, [pc, #28]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031e4:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031ec:	4904      	ldr	r1, [pc, #16]	@ (8003200 <Prismatic_PosVel_Update+0x144>)
 80031ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80031f2:	e000      	b.n	80031f6 <Prismatic_PosVel_Update+0x13a>
		return;
 80031f4:	bf00      	nop
}
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fe:	bf00      	nop
 8003200:	200002d0 	.word	0x200002d0
 8003204:	200000c4 	.word	0x200000c4
 8003208:	358637bd 	.word	0x358637bd
 800320c:	3aa00000 	.word	0x3aa00000

08003210 <Set_Motor>:

void Set_Motor(int motor_num,float speed){
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)  speed = 100.0f;
 800321c:	edd7 7a00 	vldr	s15, [r7]
 8003220:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80032f4 <Set_Motor+0xe4>
 8003224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	dd01      	ble.n	8003232 <Set_Motor+0x22>
 800322e:	4b32      	ldr	r3, [pc, #200]	@ (80032f8 <Set_Motor+0xe8>)
 8003230:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f) speed = -100.0f;
 8003232:	edd7 7a00 	vldr	s15, [r7]
 8003236:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80032fc <Set_Motor+0xec>
 800323a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d501      	bpl.n	8003248 <Set_Motor+0x38>
 8003244:	4b2e      	ldr	r3, [pc, #184]	@ (8003300 <Set_Motor+0xf0>)
 8003246:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 1000) / 100);
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	eef0 7ae7 	vabs.f32	s15, s15
 8003250:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003304 <Set_Motor+0xf4>
 8003254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003258:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032f4 <Set_Motor+0xe4>
 800325c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003264:	ee17 3a90 	vmov	r3, s15
 8003268:	60fb      	str	r3, [r7, #12]
	if(motor_num == 0){
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11d      	bne.n	80032ac <Set_Motor+0x9c>
		if (speed > 0) {
 8003270:	edd7 7a00 	vldr	s15, [r7]
 8003274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	dd05      	ble.n	800328a <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2120      	movs	r1, #32
 8003282:	4821      	ldr	r0, [pc, #132]	@ (8003308 <Set_Motor+0xf8>)
 8003284:	f000 fe16 	bl	8003eb4 <HAL_GPIO_WritePin>
 8003288:	e00b      	b.n	80032a2 <Set_Motor+0x92>
		} else if (speed < 0) {
 800328a:	edd7 7a00 	vldr	s15, [r7]
 800328e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	d504      	bpl.n	80032a2 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003298:	2200      	movs	r2, #0
 800329a:	2120      	movs	r1, #32
 800329c:	481a      	ldr	r0, [pc, #104]	@ (8003308 <Set_Motor+0xf8>)
 800329e:	f000 fe09 	bl	8003eb4 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <Set_Motor+0xfc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 80032aa:	e01f      	b.n	80032ec <Set_Motor+0xdc>
	else if(motor_num == 1){
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d11c      	bne.n	80032ec <Set_Motor+0xdc>
		if (speed > 0) {
 80032b2:	edd7 7a00 	vldr	s15, [r7]
 80032b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	dd05      	ble.n	80032cc <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	4810      	ldr	r0, [pc, #64]	@ (8003308 <Set_Motor+0xf8>)
 80032c6:	f000 fdf5 	bl	8003eb4 <HAL_GPIO_WritePin>
 80032ca:	e00b      	b.n	80032e4 <Set_Motor+0xd4>
		} else if (speed < 0) {
 80032cc:	edd7 7a00 	vldr	s15, [r7]
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d504      	bpl.n	80032e4 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	2140      	movs	r1, #64	@ 0x40
 80032de:	480a      	ldr	r0, [pc, #40]	@ (8003308 <Set_Motor+0xf8>)
 80032e0:	f000 fde8 	bl	8003eb4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 80032e4:	4b09      	ldr	r3, [pc, #36]	@ (800330c <Set_Motor+0xfc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	42c80000 	.word	0x42c80000
 80032f8:	42c80000 	.word	0x42c80000
 80032fc:	c2c80000 	.word	0xc2c80000
 8003300:	c2c80000 	.word	0xc2c80000
 8003304:	447a0000 	.word	0x447a0000
 8003308:	48000800 	.word	0x48000800
 800330c:	200001a8 	.word	0x200001a8

08003310 <Set_Servo>:

void Set_Servo(int Pen_Pos){
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	if(Pen_Pos == 0){
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <Set_Servo+0x1a>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1500);
 800331e:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <Set_Servo+0x30>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1900);
	}
}
 8003328:	e004      	b.n	8003334 <Set_Servo+0x24>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1900);
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <Set_Servo+0x30>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8003332:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	200001f4 	.word	0x200001f4

08003344 <Reset_R>:

void Reset_R(){
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8003348:	4905      	ldr	r1, [pc, #20]	@ (8003360 <Reset_R+0x1c>)
 800334a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000290 	.word	0x20000290

08003364 <Reset_P>:
void Reset_P(){
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8003368:	4905      	ldr	r1, [pc, #20]	@ (8003380 <Reset_P+0x1c>)
 800336a:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <Reset_P+0x20>)
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200002d0 	.word	0x200002d0
 8003384:	fffff99a 	.word	0xfffff99a

08003388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <Error_Handler+0x8>

08003394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_MspInit+0x44>)
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	4a0e      	ldr	r2, [pc, #56]	@ (80033d8 <HAL_MspInit+0x44>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a6:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <HAL_MspInit+0x44>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <HAL_MspInit+0x44>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	4a08      	ldr	r2, [pc, #32]	@ (80033d8 <HAL_MspInit+0x44>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033be:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_MspInit+0x44>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033ca:	f000 fe47 	bl	800405c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000

080033dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	@ 0x30
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 031c 	add.w	r3, r7, #28
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2e      	ldr	r2, [pc, #184]	@ (80034b4 <HAL_TIM_IC_MspInit+0xd8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d128      	bne.n	8003450 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003402:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003404:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003408:	6613      	str	r3, [r2, #96]	@ 0x60
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003416:	4b28      	ldr	r3, [pc, #160]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003422:	4b25      	ldr	r3, [pc, #148]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800342e:	2302      	movs	r3, #2
 8003430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800343e:	2302      	movs	r3, #2
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	4619      	mov	r1, r3
 8003448:	481c      	ldr	r0, [pc, #112]	@ (80034bc <HAL_TIM_IC_MspInit+0xe0>)
 800344a:	f000 fb99 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800344e:	e02d      	b.n	80034ac <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d128      	bne.n	80034ac <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345a:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6593      	str	r3, [r2, #88]	@ 0x58
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800347e:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <HAL_TIM_IC_MspInit+0xdc>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800348a:	2301      	movs	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800349a:	2301      	movs	r3, #1
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034a8:	f000 fb6a 	bl	8003b80 <HAL_GPIO_Init>
}
 80034ac:	bf00      	nop
 80034ae:	3730      	adds	r7, #48	@ 0x30
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40021000 	.word	0x40021000
 80034bc:	48000800 	.word	0x48000800

080034c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	@ 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a33      	ldr	r2, [pc, #204]	@ (80035ac <HAL_TIM_Encoder_MspInit+0xec>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d128      	bne.n	8003534 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034e2:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	4a32      	ldr	r2, [pc, #200]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ee:	4b30      	ldr	r3, [pc, #192]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	4a2c      	ldr	r2, [pc, #176]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003506:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003512:	2330      	movs	r3, #48	@ 0x30
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003522:	2302      	movs	r3, #2
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4821      	ldr	r0, [pc, #132]	@ (80035b4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800352e:	f000 fb27 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003532:	e036      	b.n	80035a2 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d131      	bne.n	80035a2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800353e:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6593      	str	r3, [r2, #88]	@ 0x58
 800354a:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003562:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800356e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	2300      	movs	r3, #0
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003580:	230a      	movs	r3, #10
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	4619      	mov	r1, r3
 800358a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358e:	f000 faf7 	bl	8003b80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	201e      	movs	r0, #30
 8003598:	f000 fabd 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800359c:	201e      	movs	r0, #30
 800359e:	f000 fad4 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3730      	adds	r7, #48	@ 0x30
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40021000 	.word	0x40021000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	40000800 	.word	0x40000800

080035bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <HAL_TIM_Base_MspInit+0x8c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d114      	bne.n	80035f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035ce:	4b1f      	ldr	r3, [pc, #124]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035da:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	2032      	movs	r0, #50	@ 0x32
 80035ec:	f000 fa93 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035f0:	2032      	movs	r0, #50	@ 0x32
 80035f2:	f000 faaa 	bl	8003b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80035f6:	e022      	b.n	800363e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <HAL_TIM_Base_MspInit+0x94>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10c      	bne.n	800361c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003602:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	4a11      	ldr	r2, [pc, #68]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 8003608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800360c:	6613      	str	r3, [r2, #96]	@ 0x60
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
}
 800361a:	e010      	b.n	800363e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0c      	ldr	r2, [pc, #48]	@ (8003654 <HAL_TIM_Base_MspInit+0x98>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10b      	bne.n	800363e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	6613      	str	r3, [r2, #96]	@ 0x60
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_TIM_Base_MspInit+0x90>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40013400 	.word	0x40013400
 8003654:	40014000 	.word	0x40014000

08003658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	@ 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	@ (8003704 <HAL_TIM_MspPostInit+0xac>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d11d      	bne.n	80036b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	4a22      	ldr	r2, [pc, #136]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	2300      	movs	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80036a4:	2304      	movs	r3, #4
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4619      	mov	r1, r3
 80036ae:	4817      	ldr	r0, [pc, #92]	@ (800370c <HAL_TIM_MspPostInit+0xb4>)
 80036b0:	f000 fa66 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80036b4:	e021      	b.n	80036fa <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a15      	ldr	r2, [pc, #84]	@ (8003710 <HAL_TIM_MspPostInit+0xb8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d11c      	bne.n	80036fa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a10      	ldr	r2, [pc, #64]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <HAL_TIM_MspPostInit+0xb0>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80036ea:	2301      	movs	r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4619      	mov	r1, r3
 80036f4:	4807      	ldr	r0, [pc, #28]	@ (8003714 <HAL_TIM_MspPostInit+0xbc>)
 80036f6:	f000 fa43 	bl	8003b80 <HAL_GPIO_Init>
}
 80036fa:	bf00      	nop
 80036fc:	3728      	adds	r7, #40	@ 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40013400 	.word	0x40013400
 8003708:	40021000 	.word	0x40021000
 800370c:	48000800 	.word	0x48000800
 8003710:	40014000 	.word	0x40014000
 8003714:	48000400 	.word	0x48000400

08003718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <NMI_Handler+0x4>

08003720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <HardFault_Handler+0x4>

08003728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <MemManage_Handler+0x4>

08003730 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <BusFault_Handler+0x4>

08003738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <UsageFault_Handler+0x4>

08003740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376e:	f000 f8d9 	bl	8003924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}

08003776 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800377a:	2001      	movs	r0, #1
 800377c:	f000 fbb2 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}

08003784 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003788:	2004      	movs	r0, #4
 800378a:	f000 fbab 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}

08003792 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003796:	2008      	movs	r0, #8
 8003798:	f000 fba4 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80037a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80037a8:	f000 fb9c 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80037ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80037b0:	f000 fb98 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037bc:	4802      	ldr	r0, [pc, #8]	@ (80037c8 <TIM4_IRQHandler+0x10>)
 80037be:	f001 fe97 	bl	80054f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000110 	.word	0x20000110

080037cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80037d0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037d4:	f000 fb86 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80037d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80037dc:	f000 fb82 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80037e4:	f000 fb7e 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80037e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80037ec:	f000 fb7a 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <TIM5_IRQHandler+0x10>)
 80037fa:	f001 fe79 	bl	80054f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000015c 	.word	0x2000015c

08003808 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <SystemInit+0x20>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <SystemInit+0x20>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800382c:	480d      	ldr	r0, [pc, #52]	@ (8003864 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800382e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003830:	f7ff ffea 	bl	8003808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003834:	480c      	ldr	r0, [pc, #48]	@ (8003868 <LoopForever+0x6>)
  ldr r1, =_edata
 8003836:	490d      	ldr	r1, [pc, #52]	@ (800386c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <LoopForever+0xe>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800384c:	4c0a      	ldr	r4, [pc, #40]	@ (8003878 <LoopForever+0x16>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800385a:	f003 fb21 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800385e:	f7fd fa8f 	bl	8000d80 <main>

08003862 <LoopForever>:

LoopForever:
    b LoopForever
 8003862:	e7fe      	b.n	8003862 <LoopForever>
  ldr   r0, =_estack
 8003864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800386c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003870:	08007de4 	.word	0x08007de4
  ldr r2, =_sbss
 8003874:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003878:	200003cc 	.word	0x200003cc

0800387c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800387c:	e7fe      	b.n	800387c <ADC1_2_IRQHandler>

0800387e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
 800388a:	f000 f939 	bl	8003b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800388e:	2000      	movs	r0, #0
 8003890:	f000 f80e 	bl	80038b0 <HAL_InitTick>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	71fb      	strb	r3, [r7, #7]
 800389e:	e001      	b.n	80038a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038a0:	f7ff fd78 	bl	8003394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038a4:	79fb      	ldrb	r3, [r7, #7]

}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038bc:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_InitTick+0x68>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038c4:	4b15      	ldr	r3, [pc, #84]	@ (800391c <HAL_InitTick+0x6c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_InitTick+0x68>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80038d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f944 	bl	8003b66 <HAL_SYSTICK_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d809      	bhi.n	80038fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ea:	2200      	movs	r2, #0
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	f000 f910 	bl	8003b16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <HAL_InitTick+0x70>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e007      	b.n	800390e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e004      	b.n	800390e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e001      	b.n	800390e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000008 	.word	0x20000008
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_IncTick+0x1c>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_IncTick+0x20>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4413      	add	r3, r2
 8003932:	4a03      	ldr	r2, [pc, #12]	@ (8003940 <HAL_IncTick+0x1c>)
 8003934:	6013      	str	r3, [r2, #0]
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	200003c8 	.word	0x200003c8
 8003944:	20000008 	.word	0x20000008

08003948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return uwTick;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <HAL_GetTick+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	200003c8 	.word	0x200003c8

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800398c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003992:	4a04      	ldr	r2, [pc, #16]	@ (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60d3      	str	r3, [r2, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4907      	ldr	r1, [pc, #28]	@ (80039fc <__NVIC_EnableIRQ+0x38>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	@ (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	@ (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
         );
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	@ 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003acc:	d301      	bcc.n	8003ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <SysTick_Config+0x40>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ada:	210f      	movs	r1, #15
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f7ff ff8e 	bl	8003a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <SysTick_Config+0x40>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <SysTick_Config+0x40>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff29 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b24:	f7ff ff40 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff90 	bl	8003a54 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5f 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff33 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa4 	bl	8003abc <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b8e:	e15a      	b.n	8003e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 814c 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d005      	beq.n	8003bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0201 	and.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d017      	beq.n	8003c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d123      	bne.n	8003cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a6 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d00:	4b58      	ldr	r3, [pc, #352]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0c:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	220f      	movs	r2, #15
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d36:	d01f      	beq.n	8003d78 <HAL_GPIO_Init+0x1f8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e6c <HAL_GPIO_Init+0x2ec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d019      	beq.n	8003d74 <HAL_GPIO_Init+0x1f4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_GPIO_Init+0x1f0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e74 <HAL_GPIO_Init+0x2f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00d      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a49      	ldr	r2, [pc, #292]	@ (8003e78 <HAL_GPIO_Init+0x2f8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <HAL_GPIO_Init+0x2fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d60:	2305      	movs	r3, #5
 8003d62:	e00a      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d64:	2306      	movs	r3, #6
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d8a:	4937      	ldr	r1, [pc, #220]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a30      	ldr	r2, [pc, #192]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dec:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e10:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3a:	4a11      	ldr	r2, [pc, #68]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f ae9d 	bne.w	8003b90 <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800
 8003e74:	48000c00 	.word	0x48000c00
 8003e78:	48001000 	.word	0x48001000
 8003e7c:	48001400 	.word	0x48001400
 8003e80:	40010400 	.word	0x40010400

08003e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e001      	b.n	8003ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eee:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003efa:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fe60 	bl	8002bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40010400 	.word	0x40010400

08003f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d141      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f22:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2e:	d131      	bne.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f30:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f36:	4a46      	ldr	r2, [pc, #280]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f40:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f48:	4a41      	ldr	r2, [pc, #260]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f50:	4b40      	ldr	r3, [pc, #256]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2232      	movs	r2, #50	@ 0x32
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	0c9b      	lsrs	r3, r3, #18
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f66:	e002      	b.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6e:	4b38      	ldr	r3, [pc, #224]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d102      	bne.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f2      	bne.n	8003f68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f82:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d158      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e057      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f94:	4b2e      	ldr	r3, [pc, #184]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fa4:	e04d      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d141      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d131      	bne.n	8004020 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc2:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fcc:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2232      	movs	r2, #50	@ 0x32
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	0c9b      	lsrs	r3, r3, #18
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff2:	e002      	b.n	8003ffa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d102      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f2      	bne.n	8003ff4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800400e:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d112      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e011      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004030:	e007      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004032:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800403a:	4a05      	ldr	r2, [pc, #20]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004040:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40007000 	.word	0x40007000
 8004054:	20000000 	.word	0x20000000
 8004058:	431bde83 	.word	0x431bde83

0800405c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800406a:	6093      	str	r3, [r2, #8]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000

0800407c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e2fe      	b.n	800468c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4b97      	ldr	r3, [pc, #604]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4b94      	ldr	r3, [pc, #592]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_OscConfig+0x3e>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b8d      	ldr	r3, [pc, #564]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e2d9      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x74>
 80040e2:	4b85      	ldr	r3, [pc, #532]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a84      	ldr	r2, [pc, #528]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b7f      	ldr	r3, [pc, #508]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7e      	ldr	r2, [pc, #504]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b7c      	ldr	r3, [pc, #496]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7b      	ldr	r2, [pc, #492]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 8004114:	4b78      	ldr	r3, [pc, #480]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a77      	ldr	r2, [pc, #476]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b75      	ldr	r3, [pc, #468]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a74      	ldr	r2, [pc, #464]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7ff fc08 	bl	8003948 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7ff fc04 	bl	8003948 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e29e      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414e:	4b6a      	ldr	r3, [pc, #424]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xc0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7ff fbf4 	bl	8003948 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7ff fbf0 	bl	8003948 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e28a      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004176:	4b60      	ldr	r3, [pc, #384]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004192:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	4b56      	ldr	r3, [pc, #344]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d102      	bne.n	80041b2 <HAL_RCC_OscConfig+0x136>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_OscConfig+0x13c>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11f      	bne.n	80041f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b8:	4b4f      	ldr	r3, [pc, #316]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_OscConfig+0x154>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e25d      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b49      	ldr	r3, [pc, #292]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4946      	ldr	r1, [pc, #280]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041e4:	4b45      	ldr	r3, [pc, #276]	@ (80042fc <HAL_RCC_OscConfig+0x280>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fb61 	bl	80038b0 <HAL_InitTick>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d043      	beq.n	800427c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e249      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d023      	beq.n	8004248 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3c      	ldr	r2, [pc, #240]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7ff fb9c 	bl	8003948 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7ff fb98 	bl	8003948 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e232      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004226:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	4b31      	ldr	r3, [pc, #196]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	492d      	ldr	r1, [pc, #180]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	604b      	str	r3, [r1, #4]
 8004246:	e01a      	b.n	800427e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004248:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800424e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7ff fb78 	bl	8003948 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425c:	f7ff fb74 	bl	8003948 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e20e      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426e:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1e0>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d041      	beq.n	800430e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01c      	beq.n	80042cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 8004294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004298:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7ff fb51 	bl	8003948 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042aa:	f7ff fb4d 	bl	8003948 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e1e7      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042bc:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <HAL_RCC_OscConfig+0x22e>
 80042ca:	e020      	b.n	800430e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d2:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7ff fb34 	bl	8003948 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e2:	e00d      	b.n	8004300 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e4:	f7ff fb30 	bl	8003948 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d906      	bls.n	8004300 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1ca      	b.n	800468c <HAL_RCC_OscConfig+0x610>
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004300:	4b8c      	ldr	r3, [pc, #560]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ea      	bne.n	80042e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80a6 	beq.w	8004468 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004320:	4b84      	ldr	r3, [pc, #528]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_OscConfig+0x2b4>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x2b6>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b7f      	ldr	r3, [pc, #508]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433a:	4a7e      	ldr	r2, [pc, #504]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004340:	6593      	str	r3, [r2, #88]	@ 0x58
 8004342:	4b7c      	ldr	r3, [pc, #496]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004352:	4b79      	ldr	r3, [pc, #484]	@ (8004538 <HAL_RCC_OscConfig+0x4bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435e:	4b76      	ldr	r3, [pc, #472]	@ (8004538 <HAL_RCC_OscConfig+0x4bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a75      	ldr	r2, [pc, #468]	@ (8004538 <HAL_RCC_OscConfig+0x4bc>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7ff faed 	bl	8003948 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7ff fae9 	bl	8003948 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e183      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004384:	4b6c      	ldr	r3, [pc, #432]	@ (8004538 <HAL_RCC_OscConfig+0x4bc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d108      	bne.n	80043aa <HAL_RCC_OscConfig+0x32e>
 8004398:	4b66      	ldr	r3, [pc, #408]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	4a65      	ldr	r2, [pc, #404]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a8:	e024      	b.n	80043f4 <HAL_RCC_OscConfig+0x378>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d110      	bne.n	80043d4 <HAL_RCC_OscConfig+0x358>
 80043b2:	4b60      	ldr	r3, [pc, #384]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043d2:	e00f      	b.n	80043f4 <HAL_RCC_OscConfig+0x378>
 80043d4:	4b57      	ldr	r3, [pc, #348]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	4a56      	ldr	r2, [pc, #344]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e4:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	4a52      	ldr	r2, [pc, #328]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d016      	beq.n	800442a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7ff faa4 	bl	8003948 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7ff faa0 	bl	8003948 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e138      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441a:	4b46      	ldr	r3, [pc, #280]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ed      	beq.n	8004404 <HAL_RCC_OscConfig+0x388>
 8004428:	e015      	b.n	8004456 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7ff fa8d 	bl	8003948 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7ff fa89 	bl	8003948 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e121      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004448:	4b3a      	ldr	r3, [pc, #232]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ed      	bne.n	8004432 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4b35      	ldr	r3, [pc, #212]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	4a34      	ldr	r2, [pc, #208]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03c      	beq.n	80044ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800447c:	4b2d      	ldr	r3, [pc, #180]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004482:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7ff fa5c 	bl	8003948 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004494:	f7ff fa58 	bl	8003948 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0f2      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a6:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x418>
 80044b4:	e01b      	b.n	80044ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7ff fa3f 	bl	8003948 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ce:	f7ff fa3b 	bl	8003948 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0d5      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e0:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80c9 	beq.w	800468a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b0c      	cmp	r3, #12
 8004502:	f000 8083 	beq.w	800460c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d15e      	bne.n	80045cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7ff fa15 	bl	8003948 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	e00c      	b.n	800453c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004522:	f7ff fa11 	bl	8003948 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d905      	bls.n	800453c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0ab      	b.n	800468c <HAL_RCC_OscConfig+0x610>
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453c:	4b55      	ldr	r3, [pc, #340]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ec      	bne.n	8004522 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004548:	4b52      	ldr	r3, [pc, #328]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	4b52      	ldr	r3, [pc, #328]	@ (8004698 <HAL_RCC_OscConfig+0x61c>)
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6a11      	ldr	r1, [r2, #32]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004558:	3a01      	subs	r2, #1
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004562:	0212      	lsls	r2, r2, #8
 8004564:	4311      	orrs	r1, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800456a:	0852      	lsrs	r2, r2, #1
 800456c:	3a01      	subs	r2, #1
 800456e:	0552      	lsls	r2, r2, #21
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004576:	0852      	lsrs	r2, r2, #1
 8004578:	3a01      	subs	r2, #1
 800457a:	0652      	lsls	r2, r2, #25
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004582:	06d2      	lsls	r2, r2, #27
 8004584:	430a      	orrs	r2, r1
 8004586:	4943      	ldr	r1, [pc, #268]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004588:	4313      	orrs	r3, r2
 800458a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b41      	ldr	r3, [pc, #260]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a40      	ldr	r2, [pc, #256]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004596:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004598:	4b3e      	ldr	r3, [pc, #248]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a3d      	ldr	r2, [pc, #244]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7ff f9d0 	bl	8003948 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ac:	f7ff f9cc 	bl	8003948 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e066      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045be:	4b35      	ldr	r3, [pc, #212]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x530>
 80045ca:	e05e      	b.n	800468a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045cc:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a30      	ldr	r2, [pc, #192]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7ff f9b6 	bl	8003948 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7ff f9b2 	bl	8003948 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e04c      	b.n	800468c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f2:	4b28      	ldr	r3, [pc, #160]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045fe:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	4924      	ldr	r1, [pc, #144]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_RCC_OscConfig+0x620>)
 8004606:	4013      	ands	r3, r2
 8004608:	60cb      	str	r3, [r1, #12]
 800460a:	e03e      	b.n	800468a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e039      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004618:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <HAL_RCC_OscConfig+0x618>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f003 0203 	and.w	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	429a      	cmp	r2, r3
 800462a:	d12c      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	3b01      	subs	r3, #1
 8004638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d123      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d11b      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d113      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d109      	bne.n	8004686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	019f800c 	.word	0x019f800c
 800469c:	feeefffc 	.word	0xfeeefffc

080046a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e11e      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b91      	ldr	r3, [pc, #580]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 020f 	bic.w	r2, r3, #15
 80046ce:	498c      	ldr	r1, [pc, #560]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e106      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d073      	beq.n	80047dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d129      	bne.n	8004750 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fc:	4b81      	ldr	r3, [pc, #516]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0f4      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800470c:	f000 f966 	bl	80049dc <RCC_GetSysClockFreqFromPLLSource>
 8004710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4a7c      	ldr	r2, [pc, #496]	@ (8004908 <HAL_RCC_ClockConfig+0x268>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d93f      	bls.n	800479a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800471a:	4b7a      	ldr	r3, [pc, #488]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800472e:	2b00      	cmp	r3, #0
 8004730:	d033      	beq.n	800479a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	d12f      	bne.n	800479a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800473a:	4b72      	ldr	r3, [pc, #456]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004742:	4a70      	ldr	r2, [pc, #448]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 8004744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e024      	b.n	800479a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004758:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0c6      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004768:	4b66      	ldr	r3, [pc, #408]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0be      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004778:	f000 f8ce 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 800477c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4a61      	ldr	r2, [pc, #388]	@ (8004908 <HAL_RCC_ClockConfig+0x268>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d909      	bls.n	800479a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004786:	4b5f      	ldr	r3, [pc, #380]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800478e:	4a5d      	ldr	r2, [pc, #372]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 8004790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004794:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b5a      	ldr	r3, [pc, #360]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4957      	ldr	r1, [pc, #348]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7ff f8cc 	bl	8003948 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7ff f8c8 	bl	8003948 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e095      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a42      	ldr	r2, [pc, #264]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800480c:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004814:	4a3b      	ldr	r2, [pc, #236]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 8004816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800481a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4936      	ldr	r1, [pc, #216]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
 800482e:	e008      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	d105      	bne.n	8004842 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004836:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800483c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004840:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004842:	4b2f      	ldr	r3, [pc, #188]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d21d      	bcs.n	800488c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004850:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 020f 	bic.w	r2, r3, #15
 8004858:	4929      	ldr	r1, [pc, #164]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004860:	f7ff f872 	bl	8003948 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7ff f86e 	bl	8003948 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e03b      	b.n	80048f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <HAL_RCC_ClockConfig+0x260>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d1ed      	bne.n	8004868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4917      	ldr	r1, [pc, #92]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b6:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490f      	ldr	r1, [pc, #60]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ca:	f000 f825 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <HAL_RCC_ClockConfig+0x264>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490c      	ldr	r1, [pc, #48]	@ (800490c <HAL_RCC_ClockConfig+0x26c>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <HAL_RCC_ClockConfig+0x270>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <HAL_RCC_ClockConfig+0x274>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe ffde 	bl	80038b0 <HAL_InitTick>
 80048f4:	4603      	mov	r3, r0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40022000 	.word	0x40022000
 8004904:	40021000 	.word	0x40021000
 8004908:	04c4b400 	.word	0x04c4b400
 800490c:	080079fc 	.word	0x080079fc
 8004910:	20000000 	.word	0x20000000
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800491e:	4b2c      	ldr	r3, [pc, #176]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b04      	cmp	r3, #4
 8004928:	d102      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800492a:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e047      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004930:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 030c 	and.w	r3, r3, #12
 8004938:	2b08      	cmp	r3, #8
 800493a:	d102      	bne.n	8004942 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800493c:	4b26      	ldr	r3, [pc, #152]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e03e      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004942:	4b23      	ldr	r3, [pc, #140]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d136      	bne.n	80049bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494e:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3301      	adds	r3, #1
 8004964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d10c      	bne.n	8004986 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496c:	4a1a      	ldr	r2, [pc, #104]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004976:	68d2      	ldr	r2, [r2, #12]
 8004978:	0a12      	lsrs	r2, r2, #8
 800497a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	617b      	str	r3, [r7, #20]
      break;
 8004984:	e00c      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004986:	4a13      	ldr	r2, [pc, #76]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	4a10      	ldr	r2, [pc, #64]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	0a12      	lsrs	r2, r2, #8
 8004994:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
      break;
 800499e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0e5b      	lsrs	r3, r3, #25
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e001      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	016e3600 	.word	0x016e3600

080049dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d10c      	bne.n	8004a1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a00:	4a17      	ldr	r2, [pc, #92]	@ (8004a60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a0a:	68d2      	ldr	r2, [r2, #12]
 8004a0c:	0a12      	lsrs	r2, r2, #8
 8004a0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	617b      	str	r3, [r7, #20]
    break;
 8004a18:	e00c      	b.n	8004a34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a1a:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	4a0e      	ldr	r2, [pc, #56]	@ (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	0a12      	lsrs	r2, r2, #8
 8004a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
    break;
 8004a32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a34:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0e5b      	lsrs	r3, r3, #25
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a4e:	687b      	ldr	r3, [r7, #4]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	016e3600 	.word	0x016e3600
 8004a64:	00f42400 	.word	0x00f42400

08004a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e049      	b.n	8004b0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fe fd94 	bl	80035bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f001 f9a2 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e04c      	b.n	8004bca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	@ (8004bd8 <HAL_TIM_Base_Start+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d022      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4a:	d01d      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a22      	ldr	r2, [pc, #136]	@ (8004bdc <HAL_TIM_Base_Start+0xc4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d018      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a21      	ldr	r2, [pc, #132]	@ (8004be0 <HAL_TIM_Base_Start+0xc8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1f      	ldr	r2, [pc, #124]	@ (8004be4 <HAL_TIM_Base_Start+0xcc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004be8 <HAL_TIM_Base_Start+0xd0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d009      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1c      	ldr	r2, [pc, #112]	@ (8004bec <HAL_TIM_Base_Start+0xd4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_TIM_Base_Start+0x70>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf0 <HAL_TIM_Base_Start+0xd8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d115      	bne.n	8004bb4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	4b19      	ldr	r3, [pc, #100]	@ (8004bf4 <HAL_TIM_Base_Start+0xdc>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b06      	cmp	r3, #6
 8004b98:	d015      	beq.n	8004bc6 <HAL_TIM_Base_Start+0xae>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba0:	d011      	beq.n	8004bc6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	e008      	b.n	8004bc6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e000      	b.n	8004bc8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40013400 	.word	0x40013400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40015000 	.word	0x40015000
 8004bf4:	00010007 	.word	0x00010007

08004bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d001      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e054      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a26      	ldr	r2, [pc, #152]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3a:	d01d      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a22      	ldr	r2, [pc, #136]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d115      	bne.n	8004ca4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0xec>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d015      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0xbe>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d011      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	e008      	b.n	8004cb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40015000 	.word	0x40015000
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e049      	b.n	8004d8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f841 	bl	8004d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f001 f862 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x24>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e03c      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d109      	bne.n	8004dea <HAL_TIM_PWM_Start+0x3e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e02f      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d109      	bne.n	8004e04 <HAL_TIM_PWM_Start+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e022      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d109      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x72>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e015      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x8c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e008      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a6      	b.n	8004fa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xb6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e60:	e023      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xc6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e70:	e01b      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e80:	e013      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xe6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xf6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea0:	e003      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fe20 	bl	8006af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a39      	ldr	r2, [pc, #228]	@ (8004fac <HAL_TIM_PWM_Start+0x200>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a37      	ldr	r2, [pc, #220]	@ (8004fb0 <HAL_TIM_PWM_Start+0x204>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a36      	ldr	r2, [pc, #216]	@ (8004fb4 <HAL_TIM_PWM_Start+0x208>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a34      	ldr	r2, [pc, #208]	@ (8004fb8 <HAL_TIM_PWM_Start+0x20c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <HAL_TIM_PWM_Start+0x210>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x14c>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_TIM_PWM_Start+0x14e>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a25      	ldr	r2, [pc, #148]	@ (8004fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <HAL_TIM_PWM_Start+0x214>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a24      	ldr	r2, [pc, #144]	@ (8004fc4 <HAL_TIM_PWM_Start+0x218>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a23      	ldr	r2, [pc, #140]	@ (8004fc8 <HAL_TIM_PWM_Start+0x21c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <HAL_TIM_PWM_Start+0x200>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <HAL_TIM_PWM_Start+0x204>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <HAL_TIM_PWM_Start+0x210>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d115      	bne.n	8004f8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <HAL_TIM_PWM_Start+0x220>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d015      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f76:	d011      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e008      	b.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e000      	b.n	8004f9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800
 8004fbc:	40015000 	.word	0x40015000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	00010007 	.word	0x00010007

08004fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e049      	b.n	8005076 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fe f9f0 	bl	80033dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 feee 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start+0x1a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e023      	b.n	80050e2 <HAL_TIM_IC_Start+0x62>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_IC_Start+0x2a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e01b      	b.n	80050e2 <HAL_TIM_IC_Start+0x62>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_IC_Start+0x3a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_IC_Start+0x62>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d104      	bne.n	80050ca <HAL_TIM_IC_Start+0x4a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_IC_Start+0x62>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start+0x5a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_IC_Start+0x62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_TIM_IC_Start+0x74>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e013      	b.n	800511c <HAL_TIM_IC_Start+0x9c>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d104      	bne.n	8005104 <HAL_TIM_IC_Start+0x84>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e00b      	b.n	800511c <HAL_TIM_IC_Start+0x9c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d104      	bne.n	8005114 <HAL_TIM_IC_Start+0x94>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e003      	b.n	800511c <HAL_TIM_IC_Start+0x9c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800511a:	b2db      	uxtb	r3, r3
 800511c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d102      	bne.n	800512a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d001      	beq.n	800512e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e097      	b.n	800525e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start+0xbe>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513c:	e023      	b.n	8005186 <HAL_TIM_IC_Start+0x106>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_IC_Start+0xce>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800514c:	e01b      	b.n	8005186 <HAL_TIM_IC_Start+0x106>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start+0xde>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515c:	e013      	b.n	8005186 <HAL_TIM_IC_Start+0x106>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Start+0xee>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800516c:	e00b      	b.n	8005186 <HAL_TIM_IC_Start+0x106>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Start+0xfe>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517c:	e003      	b.n	8005186 <HAL_TIM_IC_Start+0x106>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Start+0x116>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005194:	e013      	b.n	80051be <HAL_TIM_IC_Start+0x13e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_IC_Start+0x126>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a4:	e00b      	b.n	80051be <HAL_TIM_IC_Start+0x13e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_IC_Start+0x136>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b4:	e003      	b.n	80051be <HAL_TIM_IC_Start+0x13e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fc96 	bl	8006af8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a25      	ldr	r2, [pc, #148]	@ (8005268 <HAL_TIM_IC_Start+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d01d      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <HAL_TIM_IC_Start+0x1ec>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <HAL_TIM_IC_Start+0x1f0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <HAL_TIM_IC_Start+0x1f4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_TIM_IC_Start+0x1f8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_TIM_IC_Start+0x1fc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_IC_Start+0x19c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_TIM_IC_Start+0x200>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d115      	bne.n	8005248 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <HAL_TIM_IC_Start+0x204>)
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b06      	cmp	r3, #6
 800522c:	d015      	beq.n	800525a <HAL_TIM_IC_Start+0x1da>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005234:	d011      	beq.n	800525a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	e008      	b.n	800525a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e000      	b.n	800525c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40014000 	.word	0x40014000
 8005280:	40015000 	.word	0x40015000
 8005284:	00010007 	.word	0x00010007

08005288 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e097      	b.n	80053cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fe f905 	bl	80034c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 fd87 	bl	8005df0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	4313      	orrs	r3, r2
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005328:	f023 030c 	bic.w	r3, r3, #12
 800532c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005334:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4313      	orrs	r3, r2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	011a      	lsls	r2, r3, #4
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	031b      	lsls	r3, r3, #12
 8005358:	4313      	orrs	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4313      	orrs	r3, r2
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d110      	bne.n	8005426 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d102      	bne.n	8005410 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800540a:	7b7b      	ldrb	r3, [r7, #13]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d001      	beq.n	8005414 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e069      	b.n	80054e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005424:	e031      	b.n	800548a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b04      	cmp	r3, #4
 800542a:	d110      	bne.n	800544e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d102      	bne.n	8005438 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005432:	7b3b      	ldrb	r3, [r7, #12]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d001      	beq.n	800543c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e055      	b.n	80054e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800544c:	e01d      	b.n	800548a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800545a:	7b7b      	ldrb	r3, [r7, #13]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005460:	7b3b      	ldrb	r3, [r7, #12]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d001      	beq.n	800546a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e03e      	b.n	80054e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_TIM_Encoder_Start+0xc4>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d008      	beq.n	80054a8 <HAL_TIM_Encoder_Start+0xd4>
 8005496:	e00f      	b.n	80054b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2201      	movs	r2, #1
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 fb29 	bl	8006af8 <TIM_CCxChannelCmd>
      break;
 80054a6:	e016      	b.n	80054d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	2104      	movs	r1, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fb21 	bl	8006af8 <TIM_CCxChannelCmd>
      break;
 80054b6:	e00e      	b.n	80054d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 fb19 	bl	8006af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	2104      	movs	r1, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fb12 	bl	8006af8 <TIM_CCxChannelCmd>
      break;
 80054d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0202 	mvn.w	r2, #2
 8005524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fc3a 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc2c 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fc3d 	bl	8005dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0204 	mvn.w	r2, #4
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fc14 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fc06 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fc17 	bl	8005dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0208 	mvn.w	r2, #8
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fbee 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fbe0 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fbf1 	bl	8005dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0210 	mvn.w	r2, #16
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2208      	movs	r2, #8
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fbc8 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fbba 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fbcb 	bl	8005dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0201 	mvn.w	r2, #1
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fd fb64 	bl	8002d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 fb91 	bl	8006dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 fb89 	bl	8006dc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fb85 	bl	8005ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f06f 0220 	mvn.w	r2, #32
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 fb51 	bl	8006d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fb5d 	bl	8006dd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fb55 	bl	8006de8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 fb4d 	bl	8006dfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800577e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fb45 	bl	8006e10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e088      	b.n	80058be <HAL_TIM_IC_ConfigChannel+0x130>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11b      	bne.n	80057f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80057ca:	f000 ffcf 	bl	800676c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 020c 	bic.w	r2, r2, #12
 80057dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6999      	ldr	r1, [r3, #24]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e060      	b.n	80058b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d11c      	bne.n	8005832 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005808:	f001 f853 	bl	80068b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800581a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6999      	ldr	r1, [r3, #24]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	619a      	str	r2, [r3, #24]
 8005830:	e040      	b.n	80058b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005848:	f001 f8a0 	bl	800698c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 020c 	bic.w	r2, r2, #12
 800585a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69d9      	ldr	r1, [r3, #28]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	61da      	str	r2, [r3, #28]
 800586e:	e021      	b.n	80058b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d11c      	bne.n	80058b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005886:	f001 f8bd 	bl	8006a04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005898:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	021a      	lsls	r2, r3, #8
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	e001      	b.n	80058b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ff      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b14      	cmp	r3, #20
 80058f2:	f200 80f0 	bhi.w	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058f6:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005951 	.word	0x08005951
 8005900:	08005ad7 	.word	0x08005ad7
 8005904:	08005ad7 	.word	0x08005ad7
 8005908:	08005ad7 	.word	0x08005ad7
 800590c:	08005991 	.word	0x08005991
 8005910:	08005ad7 	.word	0x08005ad7
 8005914:	08005ad7 	.word	0x08005ad7
 8005918:	08005ad7 	.word	0x08005ad7
 800591c:	080059d3 	.word	0x080059d3
 8005920:	08005ad7 	.word	0x08005ad7
 8005924:	08005ad7 	.word	0x08005ad7
 8005928:	08005ad7 	.word	0x08005ad7
 800592c:	08005a13 	.word	0x08005a13
 8005930:	08005ad7 	.word	0x08005ad7
 8005934:	08005ad7 	.word	0x08005ad7
 8005938:	08005ad7 	.word	0x08005ad7
 800593c:	08005a55 	.word	0x08005a55
 8005940:	08005ad7 	.word	0x08005ad7
 8005944:	08005ad7 	.word	0x08005ad7
 8005948:	08005ad7 	.word	0x08005ad7
 800594c:	08005a95 	.word	0x08005a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fafe 	bl	8005f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0204 	bic.w	r2, r2, #4
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	619a      	str	r2, [r3, #24]
      break;
 800598e:	e0a5      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fb78 	bl	800608c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	619a      	str	r2, [r3, #24]
      break;
 80059d0:	e084      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fbeb 	bl	80061b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0208 	orr.w	r2, r2, #8
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0204 	bic.w	r2, r2, #4
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	61da      	str	r2, [r3, #28]
      break;
 8005a10:	e064      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fc5d 	bl	80062d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	021a      	lsls	r2, r3, #8
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	61da      	str	r2, [r3, #28]
      break;
 8005a52:	e043      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fcd0 	bl	8006400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a92:	e023      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fd1a 	bl	80064d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005abe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	021a      	lsls	r2, r3, #8
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ad4:	e002      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_ConfigClockSource+0x1c>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e0f6      	b.n	8005cfa <HAL_TIM_ConfigClockSource+0x20a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a6f      	ldr	r2, [pc, #444]	@ (8005d04 <HAL_TIM_ConfigClockSource+0x214>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f000 80c1 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8005d04 <HAL_TIM_ConfigClockSource+0x214>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	f200 80c6 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b54:	4a6c      	ldr	r2, [pc, #432]	@ (8005d08 <HAL_TIM_ConfigClockSource+0x218>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f000 80b9 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8005d08 <HAL_TIM_ConfigClockSource+0x218>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f200 80be 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b64:	4a69      	ldr	r2, [pc, #420]	@ (8005d0c <HAL_TIM_ConfigClockSource+0x21c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	f000 80b1 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b6c:	4a67      	ldr	r2, [pc, #412]	@ (8005d0c <HAL_TIM_ConfigClockSource+0x21c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	f200 80b6 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b74:	4a66      	ldr	r2, [pc, #408]	@ (8005d10 <HAL_TIM_ConfigClockSource+0x220>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	f000 80a9 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b7c:	4a64      	ldr	r2, [pc, #400]	@ (8005d10 <HAL_TIM_ConfigClockSource+0x220>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	f200 80ae 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b84:	4a63      	ldr	r2, [pc, #396]	@ (8005d14 <HAL_TIM_ConfigClockSource+0x224>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	f000 80a1 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b8c:	4a61      	ldr	r2, [pc, #388]	@ (8005d14 <HAL_TIM_ConfigClockSource+0x224>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f200 80a6 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b94:	4a60      	ldr	r2, [pc, #384]	@ (8005d18 <HAL_TIM_ConfigClockSource+0x228>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	f000 8099 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005b9c:	4a5e      	ldr	r2, [pc, #376]	@ (8005d18 <HAL_TIM_ConfigClockSource+0x228>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	f200 809e 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ba8:	f000 8091 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005bac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005bb0:	f200 8096 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bb8:	f000 8089 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bc0:	f200 808e 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc8:	d03e      	beq.n	8005c48 <HAL_TIM_ConfigClockSource+0x158>
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bce:	f200 8087 	bhi.w	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd6:	f000 8086 	beq.w	8005ce6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bde:	d87f      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be0:	2b70      	cmp	r3, #112	@ 0x70
 8005be2:	d01a      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x12a>
 8005be4:	2b70      	cmp	r3, #112	@ 0x70
 8005be6:	d87b      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be8:	2b60      	cmp	r3, #96	@ 0x60
 8005bea:	d050      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x19e>
 8005bec:	2b60      	cmp	r3, #96	@ 0x60
 8005bee:	d877      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf0:	2b50      	cmp	r3, #80	@ 0x50
 8005bf2:	d03c      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x17e>
 8005bf4:	2b50      	cmp	r3, #80	@ 0x50
 8005bf6:	d873      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	d058      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x1be>
 8005bfc:	2b40      	cmp	r3, #64	@ 0x40
 8005bfe:	d86f      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c00:	2b30      	cmp	r3, #48	@ 0x30
 8005c02:	d064      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005c04:	2b30      	cmp	r3, #48	@ 0x30
 8005c06:	d86b      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d060      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d867      	bhi.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d05a      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x1de>
 8005c18:	e062      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c2a:	f000 ff45 	bl	8006ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
      break;
 8005c46:	e04f      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c58:	f000 ff2e 	bl	8006ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c6a:	609a      	str	r2, [r3, #8]
      break;
 8005c6c:	e03c      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f000 fdea 	bl	8006854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2150      	movs	r1, #80	@ 0x50
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fef9 	bl	8006a7e <TIM_ITRx_SetConfig>
      break;
 8005c8c:	e02c      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 fe46 	bl	800692c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2160      	movs	r1, #96	@ 0x60
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fee9 	bl	8006a7e <TIM_ITRx_SetConfig>
      break;
 8005cac:	e01c      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 fdca 	bl	8006854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2140      	movs	r1, #64	@ 0x40
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fed9 	bl	8006a7e <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e00c      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f000 fed0 	bl	8006a7e <TIM_ITRx_SetConfig>
      break;
 8005cde:	e003      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	e000      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	00100070 	.word	0x00100070
 8005d08:	00100060 	.word	0x00100060
 8005d0c:	00100050 	.word	0x00100050
 8005d10:	00100040 	.word	0x00100040
 8005d14:	00100030 	.word	0x00100030
 8005d18:	00100020 	.word	0x00100020

08005d1c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e031      	b.n	8005d98 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fc30 	bl	80065ac <TIM_SlaveTimer_SetConfig>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e018      	b.n	8005d98 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d74:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d84:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a4c      	ldr	r2, [pc, #304]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d017      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a49      	ldr	r2, [pc, #292]	@ (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a48      	ldr	r2, [pc, #288]	@ (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a47      	ldr	r2, [pc, #284]	@ (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a46      	ldr	r2, [pc, #280]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a45      	ldr	r2, [pc, #276]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a39      	ldr	r2, [pc, #228]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d023      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d01f      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a36      	ldr	r2, [pc, #216]	@ (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d017      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	@ (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a33      	ldr	r2, [pc, #204]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a33      	ldr	r2, [pc, #204]	@ (8005f4c <TIM_Base_SetConfig+0x15c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a32      	ldr	r2, [pc, #200]	@ (8005f50 <TIM_Base_SetConfig+0x160>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a31      	ldr	r2, [pc, #196]	@ (8005f54 <TIM_Base_SetConfig+0x164>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f4c <TIM_Base_SetConfig+0x15c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a19      	ldr	r2, [pc, #100]	@ (8005f50 <TIM_Base_SetConfig+0x160>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <TIM_Base_SetConfig+0x164>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d103      	bne.n	8005f08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f023 0201 	bic.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	611a      	str	r2, [r3, #16]
  }
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40015000 	.word	0x40015000
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800

08005f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0201 	bic.w	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 0302 	bic.w	r3, r3, #2
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a30      	ldr	r2, [pc, #192]	@ (8006074 <TIM_OC1_SetConfig+0x11c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <TIM_OC1_SetConfig+0x120>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800607c <TIM_OC1_SetConfig+0x124>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a2d      	ldr	r2, [pc, #180]	@ (8006080 <TIM_OC1_SetConfig+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8006084 <TIM_OC1_SetConfig+0x12c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a2b      	ldr	r2, [pc, #172]	@ (8006088 <TIM_OC1_SetConfig+0x130>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10c      	bne.n	8005ffa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0308 	bic.w	r3, r3, #8
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8006074 <TIM_OC1_SetConfig+0x11c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <TIM_OC1_SetConfig+0x120>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00f      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1b      	ldr	r2, [pc, #108]	@ (800607c <TIM_OC1_SetConfig+0x124>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00b      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1a      	ldr	r2, [pc, #104]	@ (8006080 <TIM_OC1_SetConfig+0x128>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a19      	ldr	r2, [pc, #100]	@ (8006084 <TIM_OC1_SetConfig+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a18      	ldr	r2, [pc, #96]	@ (8006088 <TIM_OC1_SetConfig+0x130>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d111      	bne.n	800604e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800
 8006088:	40015000 	.word	0x40015000

0800608c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0210 	bic.w	r2, r3, #16
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0320 	bic.w	r3, r3, #32
 80060da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a2c      	ldr	r2, [pc, #176]	@ (800619c <TIM_OC2_SetConfig+0x110>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_OC2_SetConfig+0x74>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2b      	ldr	r2, [pc, #172]	@ (80061a0 <TIM_OC2_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC2_SetConfig+0x74>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2a      	ldr	r2, [pc, #168]	@ (80061a4 <TIM_OC2_SetConfig+0x118>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10d      	bne.n	800611c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <TIM_OC2_SetConfig+0x110>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <TIM_OC2_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1e      	ldr	r2, [pc, #120]	@ (80061a8 <TIM_OC2_SetConfig+0x11c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <TIM_OC2_SetConfig+0x120>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <TIM_OC2_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a17      	ldr	r2, [pc, #92]	@ (80061a4 <TIM_OC2_SetConfig+0x118>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d113      	bne.n	8006174 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40015000 	.word	0x40015000
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800

080061b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2b      	ldr	r2, [pc, #172]	@ (80062c0 <TIM_OC3_SetConfig+0x10c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <TIM_OC3_SetConfig+0x72>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2a      	ldr	r2, [pc, #168]	@ (80062c4 <TIM_OC3_SetConfig+0x110>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_OC3_SetConfig+0x72>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a29      	ldr	r2, [pc, #164]	@ (80062c8 <TIM_OC3_SetConfig+0x114>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10d      	bne.n	8006242 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800622c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <TIM_OC3_SetConfig+0x10c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <TIM_OC3_SetConfig+0x110>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <TIM_OC3_SetConfig+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00b      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <TIM_OC3_SetConfig+0x11c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <TIM_OC3_SetConfig+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC3_SetConfig+0x114>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40015000 	.word	0x40015000
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800

080062d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2c      	ldr	r2, [pc, #176]	@ (80063e8 <TIM_OC4_SetConfig+0x110>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_OC4_SetConfig+0x74>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a2b      	ldr	r2, [pc, #172]	@ (80063ec <TIM_OC4_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC4_SetConfig+0x74>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a2a      	ldr	r2, [pc, #168]	@ (80063f0 <TIM_OC4_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10d      	bne.n	8006368 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1f      	ldr	r2, [pc, #124]	@ (80063e8 <TIM_OC4_SetConfig+0x110>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <TIM_OC4_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00f      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <TIM_OC4_SetConfig+0x11c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <TIM_OC4_SetConfig+0x120>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <TIM_OC4_SetConfig+0x124>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <TIM_OC4_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d113      	bne.n	80063c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800639e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40015000 	.word	0x40015000
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800

08006400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800642e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <TIM_OC5_SetConfig+0xbc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <TIM_OC5_SetConfig+0xc0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_OC5_SetConfig+0xc4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a16      	ldr	r2, [pc, #88]	@ (80064c8 <TIM_OC5_SetConfig+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_OC5_SetConfig+0xcc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_OC5_SetConfig+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d109      	bne.n	8006496 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40015000 	.word	0x40015000

080064d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800651a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1a      	ldr	r2, [pc, #104]	@ (8006594 <TIM_OC6_SetConfig+0xc0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a19      	ldr	r2, [pc, #100]	@ (8006598 <TIM_OC6_SetConfig+0xc4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00f      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <TIM_OC6_SetConfig+0xc8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <TIM_OC6_SetConfig+0xcc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a16      	ldr	r2, [pc, #88]	@ (80065a4 <TIM_OC6_SetConfig+0xd0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC6_SetConfig+0xd4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40015000 	.word	0x40015000

080065ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a56      	ldr	r2, [pc, #344]	@ (8006754 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	f000 80a2 	beq.w	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006602:	4a54      	ldr	r2, [pc, #336]	@ (8006754 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	f200 809b 	bhi.w	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800660a:	4a53      	ldr	r2, [pc, #332]	@ (8006758 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800660c:	4293      	cmp	r3, r2
 800660e:	f000 809a 	beq.w	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006612:	4a51      	ldr	r2, [pc, #324]	@ (8006758 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006614:	4293      	cmp	r3, r2
 8006616:	f200 8093 	bhi.w	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800661a:	4a50      	ldr	r2, [pc, #320]	@ (800675c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	f000 8092 	beq.w	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006622:	4a4e      	ldr	r2, [pc, #312]	@ (800675c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	f200 808b 	bhi.w	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800662a:	4a4d      	ldr	r2, [pc, #308]	@ (8006760 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	f000 808a 	beq.w	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006632:	4a4b      	ldr	r2, [pc, #300]	@ (8006760 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	f200 8083 	bhi.w	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800663a:	4a4a      	ldr	r2, [pc, #296]	@ (8006764 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	f000 8082 	beq.w	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006642:	4a48      	ldr	r2, [pc, #288]	@ (8006764 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d87b      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006648:	4a47      	ldr	r2, [pc, #284]	@ (8006768 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d07b      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 800664e:	4a46      	ldr	r2, [pc, #280]	@ (8006768 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d875      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006654:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006658:	d075      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 800665a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800665e:	d86f      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006664:	d06f      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666a:	d869      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800666c:	2b70      	cmp	r3, #112	@ 0x70
 800666e:	d01a      	beq.n	80066a6 <TIM_SlaveTimer_SetConfig+0xfa>
 8006670:	2b70      	cmp	r3, #112	@ 0x70
 8006672:	d865      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006674:	2b60      	cmp	r3, #96	@ 0x60
 8006676:	d059      	beq.n	800672c <TIM_SlaveTimer_SetConfig+0x180>
 8006678:	2b60      	cmp	r3, #96	@ 0x60
 800667a:	d861      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800667c:	2b50      	cmp	r3, #80	@ 0x50
 800667e:	d04b      	beq.n	8006718 <TIM_SlaveTimer_SetConfig+0x16c>
 8006680:	2b50      	cmp	r3, #80	@ 0x50
 8006682:	d85d      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006684:	2b40      	cmp	r3, #64	@ 0x40
 8006686:	d019      	beq.n	80066bc <TIM_SlaveTimer_SetConfig+0x110>
 8006688:	2b40      	cmp	r3, #64	@ 0x40
 800668a:	d859      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800668c:	2b30      	cmp	r3, #48	@ 0x30
 800668e:	d05a      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006690:	2b30      	cmp	r3, #48	@ 0x30
 8006692:	d855      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d056      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d851      	bhi.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d052      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d050      	beq.n	8006746 <TIM_SlaveTimer_SetConfig+0x19a>
 80066a4:	e04c      	b.n	8006740 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80066b6:	f000 f9ff 	bl	8006ab8 <TIM_ETR_SetConfig>
      break;
 80066ba:	e045      	b.n	8006748 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d004      	beq.n	80066ce <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80066c8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80066cc:	d101      	bne.n	80066d2 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e03b      	b.n	800674a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
      break;
 8006716:	e017      	b.n	8006748 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006724:	461a      	mov	r2, r3
 8006726:	f000 f895 	bl	8006854 <TIM_TI1_ConfigInputStage>
      break;
 800672a:	e00d      	b.n	8006748 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006738:	461a      	mov	r2, r3
 800673a:	f000 f8f7 	bl	800692c <TIM_TI2_ConfigInputStage>
      break;
 800673e:	e003      	b.n	8006748 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
      break;
 8006744:	e000      	b.n	8006748 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8006746:	bf00      	nop
  }

  return status;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	00100070 	.word	0x00100070
 8006758:	00100060 	.word	0x00100060
 800675c:	00100050 	.word	0x00100050
 8006760:	00100040 	.word	0x00100040
 8006764:	00100030 	.word	0x00100030
 8006768:	00100020 	.word	0x00100020

0800676c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f023 0201 	bic.w	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a28      	ldr	r2, [pc, #160]	@ (8006838 <TIM_TI1_SetConfig+0xcc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01b      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a0:	d017      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a25      	ldr	r2, [pc, #148]	@ (800683c <TIM_TI1_SetConfig+0xd0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a24      	ldr	r2, [pc, #144]	@ (8006840 <TIM_TI1_SetConfig+0xd4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a23      	ldr	r2, [pc, #140]	@ (8006844 <TIM_TI1_SetConfig+0xd8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a22      	ldr	r2, [pc, #136]	@ (8006848 <TIM_TI1_SetConfig+0xdc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a21      	ldr	r2, [pc, #132]	@ (800684c <TIM_TI1_SetConfig+0xe0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_TI1_SetConfig+0x66>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a20      	ldr	r2, [pc, #128]	@ (8006850 <TIM_TI1_SetConfig+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <TIM_TI1_SetConfig+0x6a>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <TIM_TI1_SetConfig+0x6c>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e003      	b.n	80067f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	b2db      	uxtb	r3, r3
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f023 030a 	bic.w	r3, r3, #10
 8006810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 030a 	and.w	r3, r3, #10
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40013400 	.word	0x40013400
 800684c:	40014000 	.word	0x40014000
 8006850:	40015000 	.word	0x40015000

08006854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800687e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 030a 	bic.w	r3, r3, #10
 8006890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	031b      	lsls	r3, r3, #12
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0210 	bic.w	r2, r3, #16
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	031b      	lsls	r3, r3, #12
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006968:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f023 0303 	bic.w	r3, r3, #3
 80069b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	031b      	lsls	r3, r3, #12
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	031b      	lsls	r3, r3, #12
 8006a5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f043 0307 	orr.w	r3, r3, #7
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e074      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a34      	ldr	r2, [pc, #208]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a31      	ldr	r2, [pc, #196]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ba0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a21      	ldr	r2, [pc, #132]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d022      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bdc:	d01d      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a18      	ldr	r2, [pc, #96]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40013400 	.word	0x40013400
 8006c5c:	40015000 	.word	0x40015000
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40000c00 	.word	0x40000c00
 8006c6c:	40014000 	.word	0x40014000

08006c70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e078      	b.n	8006d7e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1c      	ldr	r2, [pc, #112]	@ (8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1b      	ldr	r2, [pc, #108]	@ (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	@ (8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d11c      	bne.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40015000 	.word	0x40015000

08006d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	ed93 7a06 	vldr	s14, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	edd3 7a08 	vldr	s15, [r3, #32]
 8006e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	edd3 7a06 	vldr	s15, [r3, #24]
 8006e54:	eeb1 7a67 	vneg.f32	s14, s15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8006e5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d006      	beq.n	8006e88 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	220c      	movs	r2, #12
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 f804 	bl	8006e90 <memset>
  }

}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <memset>:
 8006e90:	4402      	add	r2, r0
 8006e92:	4603      	mov	r3, r0
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d100      	bne.n	8006e9a <memset+0xa>
 8006e98:	4770      	bx	lr
 8006e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9e:	e7f9      	b.n	8006e94 <memset+0x4>

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 fd96 	bl	80079e4 <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	08007ddc 	.word	0x08007ddc
 8006edc:	08007ddc 	.word	0x08007ddc
 8006ee0:	08007ddc 	.word	0x08007ddc
 8006ee4:	08007de0 	.word	0x08007de0

08006ee8 <cosf>:
 8006ee8:	ee10 3a10 	vmov	r3, s0
 8006eec:	b507      	push	{r0, r1, r2, lr}
 8006eee:	4a1e      	ldr	r2, [pc, #120]	@ (8006f68 <cosf+0x80>)
 8006ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d806      	bhi.n	8006f06 <cosf+0x1e>
 8006ef8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006f6c <cosf+0x84>
 8006efc:	b003      	add	sp, #12
 8006efe:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f02:	f000 b87b 	b.w	8006ffc <__kernel_cosf>
 8006f06:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f0a:	d304      	bcc.n	8006f16 <cosf+0x2e>
 8006f0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f10:	b003      	add	sp, #12
 8006f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f16:	4668      	mov	r0, sp
 8006f18:	f000 f910 	bl	800713c <__ieee754_rem_pio2f>
 8006f1c:	f000 0003 	and.w	r0, r0, #3
 8006f20:	2801      	cmp	r0, #1
 8006f22:	d009      	beq.n	8006f38 <cosf+0x50>
 8006f24:	2802      	cmp	r0, #2
 8006f26:	d010      	beq.n	8006f4a <cosf+0x62>
 8006f28:	b9b0      	cbnz	r0, 8006f58 <cosf+0x70>
 8006f2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f2e:	ed9d 0a00 	vldr	s0, [sp]
 8006f32:	f000 f863 	bl	8006ffc <__kernel_cosf>
 8006f36:	e7eb      	b.n	8006f10 <cosf+0x28>
 8006f38:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f3c:	ed9d 0a00 	vldr	s0, [sp]
 8006f40:	f000 f8b4 	bl	80070ac <__kernel_sinf>
 8006f44:	eeb1 0a40 	vneg.f32	s0, s0
 8006f48:	e7e2      	b.n	8006f10 <cosf+0x28>
 8006f4a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f4e:	ed9d 0a00 	vldr	s0, [sp]
 8006f52:	f000 f853 	bl	8006ffc <__kernel_cosf>
 8006f56:	e7f5      	b.n	8006f44 <cosf+0x5c>
 8006f58:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f5c:	ed9d 0a00 	vldr	s0, [sp]
 8006f60:	2001      	movs	r0, #1
 8006f62:	f000 f8a3 	bl	80070ac <__kernel_sinf>
 8006f66:	e7d3      	b.n	8006f10 <cosf+0x28>
 8006f68:	3f490fd8 	.word	0x3f490fd8
 8006f6c:	00000000 	.word	0x00000000

08006f70 <sinf>:
 8006f70:	ee10 3a10 	vmov	r3, s0
 8006f74:	b507      	push	{r0, r1, r2, lr}
 8006f76:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff4 <sinf+0x84>)
 8006f78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d807      	bhi.n	8006f90 <sinf+0x20>
 8006f80:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8006ff8 <sinf+0x88>
 8006f84:	2000      	movs	r0, #0
 8006f86:	b003      	add	sp, #12
 8006f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f8c:	f000 b88e 	b.w	80070ac <__kernel_sinf>
 8006f90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f94:	d304      	bcc.n	8006fa0 <sinf+0x30>
 8006f96:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f9a:	b003      	add	sp, #12
 8006f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fa0:	4668      	mov	r0, sp
 8006fa2:	f000 f8cb 	bl	800713c <__ieee754_rem_pio2f>
 8006fa6:	f000 0003 	and.w	r0, r0, #3
 8006faa:	2801      	cmp	r0, #1
 8006fac:	d00a      	beq.n	8006fc4 <sinf+0x54>
 8006fae:	2802      	cmp	r0, #2
 8006fb0:	d00f      	beq.n	8006fd2 <sinf+0x62>
 8006fb2:	b9c0      	cbnz	r0, 8006fe6 <sinf+0x76>
 8006fb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fb8:	ed9d 0a00 	vldr	s0, [sp]
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f000 f875 	bl	80070ac <__kernel_sinf>
 8006fc2:	e7ea      	b.n	8006f9a <sinf+0x2a>
 8006fc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fc8:	ed9d 0a00 	vldr	s0, [sp]
 8006fcc:	f000 f816 	bl	8006ffc <__kernel_cosf>
 8006fd0:	e7e3      	b.n	8006f9a <sinf+0x2a>
 8006fd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fd6:	ed9d 0a00 	vldr	s0, [sp]
 8006fda:	2001      	movs	r0, #1
 8006fdc:	f000 f866 	bl	80070ac <__kernel_sinf>
 8006fe0:	eeb1 0a40 	vneg.f32	s0, s0
 8006fe4:	e7d9      	b.n	8006f9a <sinf+0x2a>
 8006fe6:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fea:	ed9d 0a00 	vldr	s0, [sp]
 8006fee:	f000 f805 	bl	8006ffc <__kernel_cosf>
 8006ff2:	e7f5      	b.n	8006fe0 <sinf+0x70>
 8006ff4:	3f490fd8 	.word	0x3f490fd8
 8006ff8:	00000000 	.word	0x00000000

08006ffc <__kernel_cosf>:
 8006ffc:	ee10 3a10 	vmov	r3, s0
 8007000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007004:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007008:	eef0 6a40 	vmov.f32	s13, s0
 800700c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007010:	d204      	bcs.n	800701c <__kernel_cosf+0x20>
 8007012:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007016:	ee17 2a90 	vmov	r2, s15
 800701a:	b342      	cbz	r2, 800706e <__kernel_cosf+0x72>
 800701c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007020:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800708c <__kernel_cosf+0x90>
 8007024:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007090 <__kernel_cosf+0x94>
 8007028:	4a1a      	ldr	r2, [pc, #104]	@ (8007094 <__kernel_cosf+0x98>)
 800702a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800702e:	4293      	cmp	r3, r2
 8007030:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007098 <__kernel_cosf+0x9c>
 8007034:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007038:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800709c <__kernel_cosf+0xa0>
 800703c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007040:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80070a0 <__kernel_cosf+0xa4>
 8007044:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007048:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80070a4 <__kernel_cosf+0xa8>
 800704c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007050:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007054:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007058:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800705c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007064:	d804      	bhi.n	8007070 <__kernel_cosf+0x74>
 8007066:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800706a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800706e:	4770      	bx	lr
 8007070:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <__kernel_cosf+0xac>)
 8007072:	4293      	cmp	r3, r2
 8007074:	bf9a      	itte	ls
 8007076:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800707a:	ee07 3a10 	vmovls	s14, r3
 800707e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007082:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800708a:	e7ec      	b.n	8007066 <__kernel_cosf+0x6a>
 800708c:	ad47d74e 	.word	0xad47d74e
 8007090:	310f74f6 	.word	0x310f74f6
 8007094:	3e999999 	.word	0x3e999999
 8007098:	b493f27c 	.word	0xb493f27c
 800709c:	37d00d01 	.word	0x37d00d01
 80070a0:	bab60b61 	.word	0xbab60b61
 80070a4:	3d2aaaab 	.word	0x3d2aaaab
 80070a8:	3f480000 	.word	0x3f480000

080070ac <__kernel_sinf>:
 80070ac:	ee10 3a10 	vmov	r3, s0
 80070b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070b4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80070b8:	d204      	bcs.n	80070c4 <__kernel_sinf+0x18>
 80070ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80070be:	ee17 3a90 	vmov	r3, s15
 80070c2:	b35b      	cbz	r3, 800711c <__kernel_sinf+0x70>
 80070c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80070c8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007120 <__kernel_sinf+0x74>
 80070cc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007124 <__kernel_sinf+0x78>
 80070d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80070d4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007128 <__kernel_sinf+0x7c>
 80070d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80070dc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800712c <__kernel_sinf+0x80>
 80070e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80070e4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007130 <__kernel_sinf+0x84>
 80070e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80070ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80070f0:	b930      	cbnz	r0, 8007100 <__kernel_sinf+0x54>
 80070f2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007134 <__kernel_sinf+0x88>
 80070f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80070fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80070fe:	4770      	bx	lr
 8007100:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007104:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007108:	eee0 7a86 	vfma.f32	s15, s1, s12
 800710c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007110:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007138 <__kernel_sinf+0x8c>
 8007114:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007118:	ee30 0a60 	vsub.f32	s0, s0, s1
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	2f2ec9d3 	.word	0x2f2ec9d3
 8007124:	b2d72f34 	.word	0xb2d72f34
 8007128:	3638ef1b 	.word	0x3638ef1b
 800712c:	b9500d01 	.word	0xb9500d01
 8007130:	3c088889 	.word	0x3c088889
 8007134:	be2aaaab 	.word	0xbe2aaaab
 8007138:	3e2aaaab 	.word	0x3e2aaaab

0800713c <__ieee754_rem_pio2f>:
 800713c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713e:	ee10 6a10 	vmov	r6, s0
 8007142:	4b88      	ldr	r3, [pc, #544]	@ (8007364 <__ieee754_rem_pio2f+0x228>)
 8007144:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007148:	429d      	cmp	r5, r3
 800714a:	b087      	sub	sp, #28
 800714c:	4604      	mov	r4, r0
 800714e:	d805      	bhi.n	800715c <__ieee754_rem_pio2f+0x20>
 8007150:	2300      	movs	r3, #0
 8007152:	ed80 0a00 	vstr	s0, [r0]
 8007156:	6043      	str	r3, [r0, #4]
 8007158:	2000      	movs	r0, #0
 800715a:	e022      	b.n	80071a2 <__ieee754_rem_pio2f+0x66>
 800715c:	4b82      	ldr	r3, [pc, #520]	@ (8007368 <__ieee754_rem_pio2f+0x22c>)
 800715e:	429d      	cmp	r5, r3
 8007160:	d83a      	bhi.n	80071d8 <__ieee754_rem_pio2f+0x9c>
 8007162:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007166:	2e00      	cmp	r6, #0
 8007168:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800736c <__ieee754_rem_pio2f+0x230>
 800716c:	4a80      	ldr	r2, [pc, #512]	@ (8007370 <__ieee754_rem_pio2f+0x234>)
 800716e:	f023 030f 	bic.w	r3, r3, #15
 8007172:	dd18      	ble.n	80071a6 <__ieee754_rem_pio2f+0x6a>
 8007174:	4293      	cmp	r3, r2
 8007176:	ee70 7a47 	vsub.f32	s15, s0, s14
 800717a:	bf09      	itett	eq
 800717c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007374 <__ieee754_rem_pio2f+0x238>
 8007180:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007378 <__ieee754_rem_pio2f+0x23c>
 8007184:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800737c <__ieee754_rem_pio2f+0x240>
 8007188:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800718c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007194:	ed80 7a00 	vstr	s14, [r0]
 8007198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800719c:	edc0 7a01 	vstr	s15, [r0, #4]
 80071a0:	2001      	movs	r0, #1
 80071a2:	b007      	add	sp, #28
 80071a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a6:	4293      	cmp	r3, r2
 80071a8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80071ac:	bf09      	itett	eq
 80071ae:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007374 <__ieee754_rem_pio2f+0x238>
 80071b2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007378 <__ieee754_rem_pio2f+0x23c>
 80071b6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800737c <__ieee754_rem_pio2f+0x240>
 80071ba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80071be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80071c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071c6:	ed80 7a00 	vstr	s14, [r0]
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	edc0 7a01 	vstr	s15, [r0, #4]
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	e7e4      	b.n	80071a2 <__ieee754_rem_pio2f+0x66>
 80071d8:	4b69      	ldr	r3, [pc, #420]	@ (8007380 <__ieee754_rem_pio2f+0x244>)
 80071da:	429d      	cmp	r5, r3
 80071dc:	d873      	bhi.n	80072c6 <__ieee754_rem_pio2f+0x18a>
 80071de:	f000 f8dd 	bl	800739c <fabsf>
 80071e2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007384 <__ieee754_rem_pio2f+0x248>
 80071e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80071ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 80071ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071f6:	ee17 0a90 	vmov	r0, s15
 80071fa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800736c <__ieee754_rem_pio2f+0x230>
 80071fe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007202:	281f      	cmp	r0, #31
 8007204:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007378 <__ieee754_rem_pio2f+0x23c>
 8007208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720c:	eeb1 6a47 	vneg.f32	s12, s14
 8007210:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007214:	ee16 1a90 	vmov	r1, s13
 8007218:	dc09      	bgt.n	800722e <__ieee754_rem_pio2f+0xf2>
 800721a:	4a5b      	ldr	r2, [pc, #364]	@ (8007388 <__ieee754_rem_pio2f+0x24c>)
 800721c:	1e47      	subs	r7, r0, #1
 800721e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007222:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800722a:	4293      	cmp	r3, r2
 800722c:	d107      	bne.n	800723e <__ieee754_rem_pio2f+0x102>
 800722e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007232:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007236:	2a08      	cmp	r2, #8
 8007238:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800723c:	dc14      	bgt.n	8007268 <__ieee754_rem_pio2f+0x12c>
 800723e:	6021      	str	r1, [r4, #0]
 8007240:	ed94 7a00 	vldr	s14, [r4]
 8007244:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007248:	2e00      	cmp	r6, #0
 800724a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800724e:	ed84 0a01 	vstr	s0, [r4, #4]
 8007252:	daa6      	bge.n	80071a2 <__ieee754_rem_pio2f+0x66>
 8007254:	eeb1 7a47 	vneg.f32	s14, s14
 8007258:	eeb1 0a40 	vneg.f32	s0, s0
 800725c:	ed84 7a00 	vstr	s14, [r4]
 8007260:	ed84 0a01 	vstr	s0, [r4, #4]
 8007264:	4240      	negs	r0, r0
 8007266:	e79c      	b.n	80071a2 <__ieee754_rem_pio2f+0x66>
 8007268:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007374 <__ieee754_rem_pio2f+0x238>
 800726c:	eef0 6a40 	vmov.f32	s13, s0
 8007270:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007274:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007278:	eee6 7a25 	vfma.f32	s15, s12, s11
 800727c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800737c <__ieee754_rem_pio2f+0x240>
 8007280:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007284:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007288:	ee15 2a90 	vmov	r2, s11
 800728c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007290:	1a5b      	subs	r3, r3, r1
 8007292:	2b19      	cmp	r3, #25
 8007294:	dc04      	bgt.n	80072a0 <__ieee754_rem_pio2f+0x164>
 8007296:	edc4 5a00 	vstr	s11, [r4]
 800729a:	eeb0 0a66 	vmov.f32	s0, s13
 800729e:	e7cf      	b.n	8007240 <__ieee754_rem_pio2f+0x104>
 80072a0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800738c <__ieee754_rem_pio2f+0x250>
 80072a4:	eeb0 0a66 	vmov.f32	s0, s13
 80072a8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80072ac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80072b0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007390 <__ieee754_rem_pio2f+0x254>
 80072b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80072b8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80072bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80072c0:	ed84 7a00 	vstr	s14, [r4]
 80072c4:	e7bc      	b.n	8007240 <__ieee754_rem_pio2f+0x104>
 80072c6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80072ca:	d306      	bcc.n	80072da <__ieee754_rem_pio2f+0x19e>
 80072cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80072d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80072d4:	edc0 7a00 	vstr	s15, [r0]
 80072d8:	e73e      	b.n	8007158 <__ieee754_rem_pio2f+0x1c>
 80072da:	15ea      	asrs	r2, r5, #23
 80072dc:	3a86      	subs	r2, #134	@ 0x86
 80072de:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072ea:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007394 <__ieee754_rem_pio2f+0x258>
 80072ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072f6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80072fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800730a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800730e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007312:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731a:	edcd 7a05 	vstr	s15, [sp, #20]
 800731e:	d11e      	bne.n	800735e <__ieee754_rem_pio2f+0x222>
 8007320:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2302      	movne	r3, #2
 800732e:	491a      	ldr	r1, [pc, #104]	@ (8007398 <__ieee754_rem_pio2f+0x25c>)
 8007330:	9101      	str	r1, [sp, #4]
 8007332:	2102      	movs	r1, #2
 8007334:	9100      	str	r1, [sp, #0]
 8007336:	a803      	add	r0, sp, #12
 8007338:	4621      	mov	r1, r4
 800733a:	f000 f89d 	bl	8007478 <__kernel_rem_pio2f>
 800733e:	2e00      	cmp	r6, #0
 8007340:	f6bf af2f 	bge.w	80071a2 <__ieee754_rem_pio2f+0x66>
 8007344:	edd4 7a00 	vldr	s15, [r4]
 8007348:	eef1 7a67 	vneg.f32	s15, s15
 800734c:	edc4 7a00 	vstr	s15, [r4]
 8007350:	edd4 7a01 	vldr	s15, [r4, #4]
 8007354:	eef1 7a67 	vneg.f32	s15, s15
 8007358:	edc4 7a01 	vstr	s15, [r4, #4]
 800735c:	e782      	b.n	8007264 <__ieee754_rem_pio2f+0x128>
 800735e:	2303      	movs	r3, #3
 8007360:	e7e5      	b.n	800732e <__ieee754_rem_pio2f+0x1f2>
 8007362:	bf00      	nop
 8007364:	3f490fd8 	.word	0x3f490fd8
 8007368:	4016cbe3 	.word	0x4016cbe3
 800736c:	3fc90f80 	.word	0x3fc90f80
 8007370:	3fc90fd0 	.word	0x3fc90fd0
 8007374:	37354400 	.word	0x37354400
 8007378:	37354443 	.word	0x37354443
 800737c:	2e85a308 	.word	0x2e85a308
 8007380:	43490f80 	.word	0x43490f80
 8007384:	3f22f984 	.word	0x3f22f984
 8007388:	08007a0c 	.word	0x08007a0c
 800738c:	2e85a300 	.word	0x2e85a300
 8007390:	248d3132 	.word	0x248d3132
 8007394:	43800000 	.word	0x43800000
 8007398:	08007a8c 	.word	0x08007a8c

0800739c <fabsf>:
 800739c:	ee10 3a10 	vmov	r3, s0
 80073a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073a4:	ee00 3a10 	vmov	s0, r3
 80073a8:	4770      	bx	lr
	...

080073ac <scalbnf>:
 80073ac:	ee10 3a10 	vmov	r3, s0
 80073b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80073b4:	d02b      	beq.n	800740e <scalbnf+0x62>
 80073b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80073ba:	d302      	bcc.n	80073c2 <scalbnf+0x16>
 80073bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80073c0:	4770      	bx	lr
 80073c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80073c6:	d123      	bne.n	8007410 <scalbnf+0x64>
 80073c8:	4b24      	ldr	r3, [pc, #144]	@ (800745c <scalbnf+0xb0>)
 80073ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007460 <scalbnf+0xb4>
 80073ce:	4298      	cmp	r0, r3
 80073d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80073d4:	db17      	blt.n	8007406 <scalbnf+0x5a>
 80073d6:	ee10 3a10 	vmov	r3, s0
 80073da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80073de:	3a19      	subs	r2, #25
 80073e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80073e4:	4288      	cmp	r0, r1
 80073e6:	dd15      	ble.n	8007414 <scalbnf+0x68>
 80073e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007464 <scalbnf+0xb8>
 80073ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007468 <scalbnf+0xbc>
 80073f0:	ee10 3a10 	vmov	r3, s0
 80073f4:	eeb0 7a67 	vmov.f32	s14, s15
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfb8      	it	lt
 80073fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8007400:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007404:	4770      	bx	lr
 8007406:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800746c <scalbnf+0xc0>
 800740a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800740e:	4770      	bx	lr
 8007410:	0dd2      	lsrs	r2, r2, #23
 8007412:	e7e5      	b.n	80073e0 <scalbnf+0x34>
 8007414:	4410      	add	r0, r2
 8007416:	28fe      	cmp	r0, #254	@ 0xfe
 8007418:	dce6      	bgt.n	80073e8 <scalbnf+0x3c>
 800741a:	2800      	cmp	r0, #0
 800741c:	dd06      	ble.n	800742c <scalbnf+0x80>
 800741e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007422:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007426:	ee00 3a10 	vmov	s0, r3
 800742a:	4770      	bx	lr
 800742c:	f110 0f16 	cmn.w	r0, #22
 8007430:	da09      	bge.n	8007446 <scalbnf+0x9a>
 8007432:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800746c <scalbnf+0xc0>
 8007436:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007470 <scalbnf+0xc4>
 800743a:	ee10 3a10 	vmov	r3, s0
 800743e:	eeb0 7a67 	vmov.f32	s14, s15
 8007442:	2b00      	cmp	r3, #0
 8007444:	e7d9      	b.n	80073fa <scalbnf+0x4e>
 8007446:	3019      	adds	r0, #25
 8007448:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800744c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007450:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007474 <scalbnf+0xc8>
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	e7d7      	b.n	800740a <scalbnf+0x5e>
 800745a:	bf00      	nop
 800745c:	ffff3cb0 	.word	0xffff3cb0
 8007460:	4c000000 	.word	0x4c000000
 8007464:	7149f2ca 	.word	0x7149f2ca
 8007468:	f149f2ca 	.word	0xf149f2ca
 800746c:	0da24260 	.word	0x0da24260
 8007470:	8da24260 	.word	0x8da24260
 8007474:	33000000 	.word	0x33000000

08007478 <__kernel_rem_pio2f>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b04 	vpush	{d8-d9}
 8007480:	b0d9      	sub	sp, #356	@ 0x164
 8007482:	4690      	mov	r8, r2
 8007484:	9001      	str	r0, [sp, #4]
 8007486:	4ab9      	ldr	r2, [pc, #740]	@ (800776c <__kernel_rem_pio2f+0x2f4>)
 8007488:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800748a:	f118 0f04 	cmn.w	r8, #4
 800748e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007492:	460f      	mov	r7, r1
 8007494:	f103 3bff 	add.w	fp, r3, #4294967295
 8007498:	db27      	blt.n	80074ea <__kernel_rem_pio2f+0x72>
 800749a:	f1b8 0203 	subs.w	r2, r8, #3
 800749e:	bf48      	it	mi
 80074a0:	f108 0204 	addmi.w	r2, r8, #4
 80074a4:	10d2      	asrs	r2, r2, #3
 80074a6:	1c55      	adds	r5, r2, #1
 80074a8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80074aa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800777c <__kernel_rem_pio2f+0x304>
 80074ae:	00e8      	lsls	r0, r5, #3
 80074b0:	eba2 060b 	sub.w	r6, r2, fp
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80074ba:	eb0a 0c0b 	add.w	ip, sl, fp
 80074be:	ac1c      	add	r4, sp, #112	@ 0x70
 80074c0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80074c4:	2000      	movs	r0, #0
 80074c6:	4560      	cmp	r0, ip
 80074c8:	dd11      	ble.n	80074ee <__kernel_rem_pio2f+0x76>
 80074ca:	a91c      	add	r1, sp, #112	@ 0x70
 80074cc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80074d0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80074d4:	f04f 0c00 	mov.w	ip, #0
 80074d8:	45d4      	cmp	ip, sl
 80074da:	dc27      	bgt.n	800752c <__kernel_rem_pio2f+0xb4>
 80074dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80074e0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800777c <__kernel_rem_pio2f+0x304>
 80074e4:	4606      	mov	r6, r0
 80074e6:	2400      	movs	r4, #0
 80074e8:	e016      	b.n	8007518 <__kernel_rem_pio2f+0xa0>
 80074ea:	2200      	movs	r2, #0
 80074ec:	e7db      	b.n	80074a6 <__kernel_rem_pio2f+0x2e>
 80074ee:	42c6      	cmn	r6, r0
 80074f0:	bf5d      	ittte	pl
 80074f2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80074f6:	ee07 1a90 	vmovpl	s15, r1
 80074fa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80074fe:	eef0 7a47 	vmovmi.f32	s15, s14
 8007502:	ece4 7a01 	vstmia	r4!, {s15}
 8007506:	3001      	adds	r0, #1
 8007508:	e7dd      	b.n	80074c6 <__kernel_rem_pio2f+0x4e>
 800750a:	ecfe 6a01 	vldmia	lr!, {s13}
 800750e:	ed96 7a00 	vldr	s14, [r6]
 8007512:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007516:	3401      	adds	r4, #1
 8007518:	455c      	cmp	r4, fp
 800751a:	f1a6 0604 	sub.w	r6, r6, #4
 800751e:	ddf4      	ble.n	800750a <__kernel_rem_pio2f+0x92>
 8007520:	ece9 7a01 	vstmia	r9!, {s15}
 8007524:	f10c 0c01 	add.w	ip, ip, #1
 8007528:	3004      	adds	r0, #4
 800752a:	e7d5      	b.n	80074d8 <__kernel_rem_pio2f+0x60>
 800752c:	a908      	add	r1, sp, #32
 800752e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007532:	9104      	str	r1, [sp, #16]
 8007534:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007536:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8007778 <__kernel_rem_pio2f+0x300>
 800753a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8007774 <__kernel_rem_pio2f+0x2fc>
 800753e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	4654      	mov	r4, sl
 8007546:	00a2      	lsls	r2, r4, #2
 8007548:	9205      	str	r2, [sp, #20]
 800754a:	aa58      	add	r2, sp, #352	@ 0x160
 800754c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007550:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007554:	a944      	add	r1, sp, #272	@ 0x110
 8007556:	aa08      	add	r2, sp, #32
 8007558:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800755c:	4694      	mov	ip, r2
 800755e:	4626      	mov	r6, r4
 8007560:	2e00      	cmp	r6, #0
 8007562:	f1a0 0004 	sub.w	r0, r0, #4
 8007566:	dc4c      	bgt.n	8007602 <__kernel_rem_pio2f+0x18a>
 8007568:	4628      	mov	r0, r5
 800756a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800756e:	f7ff ff1d 	bl	80073ac <scalbnf>
 8007572:	eeb0 8a40 	vmov.f32	s16, s0
 8007576:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800757a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800757e:	f000 f9ed 	bl	800795c <floorf>
 8007582:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007586:	eea0 8a67 	vfms.f32	s16, s0, s15
 800758a:	2d00      	cmp	r5, #0
 800758c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007590:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007594:	ee17 9a90 	vmov	r9, s15
 8007598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800759c:	ee38 8a67 	vsub.f32	s16, s16, s15
 80075a0:	dd41      	ble.n	8007626 <__kernel_rem_pio2f+0x1ae>
 80075a2:	f104 3cff 	add.w	ip, r4, #4294967295
 80075a6:	a908      	add	r1, sp, #32
 80075a8:	f1c5 0e08 	rsb	lr, r5, #8
 80075ac:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80075b0:	fa46 f00e 	asr.w	r0, r6, lr
 80075b4:	4481      	add	r9, r0
 80075b6:	fa00 f00e 	lsl.w	r0, r0, lr
 80075ba:	1a36      	subs	r6, r6, r0
 80075bc:	f1c5 0007 	rsb	r0, r5, #7
 80075c0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80075c4:	4106      	asrs	r6, r0
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	dd3c      	ble.n	8007644 <__kernel_rem_pio2f+0x1cc>
 80075ca:	f04f 0e00 	mov.w	lr, #0
 80075ce:	f109 0901 	add.w	r9, r9, #1
 80075d2:	4670      	mov	r0, lr
 80075d4:	4574      	cmp	r4, lr
 80075d6:	dc68      	bgt.n	80076aa <__kernel_rem_pio2f+0x232>
 80075d8:	2d00      	cmp	r5, #0
 80075da:	dd03      	ble.n	80075e4 <__kernel_rem_pio2f+0x16c>
 80075dc:	2d01      	cmp	r5, #1
 80075de:	d074      	beq.n	80076ca <__kernel_rem_pio2f+0x252>
 80075e0:	2d02      	cmp	r5, #2
 80075e2:	d07d      	beq.n	80076e0 <__kernel_rem_pio2f+0x268>
 80075e4:	2e02      	cmp	r6, #2
 80075e6:	d12d      	bne.n	8007644 <__kernel_rem_pio2f+0x1cc>
 80075e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80075ec:	ee30 8a48 	vsub.f32	s16, s0, s16
 80075f0:	b340      	cbz	r0, 8007644 <__kernel_rem_pio2f+0x1cc>
 80075f2:	4628      	mov	r0, r5
 80075f4:	9306      	str	r3, [sp, #24]
 80075f6:	f7ff fed9 	bl	80073ac <scalbnf>
 80075fa:	9b06      	ldr	r3, [sp, #24]
 80075fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007600:	e020      	b.n	8007644 <__kernel_rem_pio2f+0x1cc>
 8007602:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007606:	3e01      	subs	r6, #1
 8007608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800760c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007610:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007614:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007618:	ecac 0a01 	vstmia	ip!, {s0}
 800761c:	ed90 0a00 	vldr	s0, [r0]
 8007620:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007624:	e79c      	b.n	8007560 <__kernel_rem_pio2f+0xe8>
 8007626:	d105      	bne.n	8007634 <__kernel_rem_pio2f+0x1bc>
 8007628:	1e60      	subs	r0, r4, #1
 800762a:	a908      	add	r1, sp, #32
 800762c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007630:	11f6      	asrs	r6, r6, #7
 8007632:	e7c8      	b.n	80075c6 <__kernel_rem_pio2f+0x14e>
 8007634:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007638:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	da31      	bge.n	80076a6 <__kernel_rem_pio2f+0x22e>
 8007642:	2600      	movs	r6, #0
 8007644:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764c:	f040 8098 	bne.w	8007780 <__kernel_rem_pio2f+0x308>
 8007650:	1e60      	subs	r0, r4, #1
 8007652:	2200      	movs	r2, #0
 8007654:	4550      	cmp	r0, sl
 8007656:	da4b      	bge.n	80076f0 <__kernel_rem_pio2f+0x278>
 8007658:	2a00      	cmp	r2, #0
 800765a:	d065      	beq.n	8007728 <__kernel_rem_pio2f+0x2b0>
 800765c:	3c01      	subs	r4, #1
 800765e:	ab08      	add	r3, sp, #32
 8007660:	3d08      	subs	r5, #8
 8007662:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0f8      	beq.n	800765c <__kernel_rem_pio2f+0x1e4>
 800766a:	4628      	mov	r0, r5
 800766c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007670:	f7ff fe9c 	bl	80073ac <scalbnf>
 8007674:	1c63      	adds	r3, r4, #1
 8007676:	aa44      	add	r2, sp, #272	@ 0x110
 8007678:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007778 <__kernel_rem_pio2f+0x300>
 800767c:	0099      	lsls	r1, r3, #2
 800767e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007682:	4623      	mov	r3, r4
 8007684:	2b00      	cmp	r3, #0
 8007686:	f280 80a9 	bge.w	80077dc <__kernel_rem_pio2f+0x364>
 800768a:	4623      	mov	r3, r4
 800768c:	2b00      	cmp	r3, #0
 800768e:	f2c0 80c7 	blt.w	8007820 <__kernel_rem_pio2f+0x3a8>
 8007692:	aa44      	add	r2, sp, #272	@ 0x110
 8007694:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007698:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007770 <__kernel_rem_pio2f+0x2f8>
 800769c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800777c <__kernel_rem_pio2f+0x304>
 80076a0:	2000      	movs	r0, #0
 80076a2:	1ae2      	subs	r2, r4, r3
 80076a4:	e0b1      	b.n	800780a <__kernel_rem_pio2f+0x392>
 80076a6:	2602      	movs	r6, #2
 80076a8:	e78f      	b.n	80075ca <__kernel_rem_pio2f+0x152>
 80076aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80076ae:	b948      	cbnz	r0, 80076c4 <__kernel_rem_pio2f+0x24c>
 80076b0:	b121      	cbz	r1, 80076bc <__kernel_rem_pio2f+0x244>
 80076b2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80076b6:	f842 1c04 	str.w	r1, [r2, #-4]
 80076ba:	2101      	movs	r1, #1
 80076bc:	f10e 0e01 	add.w	lr, lr, #1
 80076c0:	4608      	mov	r0, r1
 80076c2:	e787      	b.n	80075d4 <__kernel_rem_pio2f+0x15c>
 80076c4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80076c8:	e7f5      	b.n	80076b6 <__kernel_rem_pio2f+0x23e>
 80076ca:	f104 3cff 	add.w	ip, r4, #4294967295
 80076ce:	aa08      	add	r2, sp, #32
 80076d0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80076d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076d8:	a908      	add	r1, sp, #32
 80076da:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80076de:	e781      	b.n	80075e4 <__kernel_rem_pio2f+0x16c>
 80076e0:	f104 3cff 	add.w	ip, r4, #4294967295
 80076e4:	aa08      	add	r2, sp, #32
 80076e6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80076ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80076ee:	e7f3      	b.n	80076d8 <__kernel_rem_pio2f+0x260>
 80076f0:	a908      	add	r1, sp, #32
 80076f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80076f6:	3801      	subs	r0, #1
 80076f8:	430a      	orrs	r2, r1
 80076fa:	e7ab      	b.n	8007654 <__kernel_rem_pio2f+0x1dc>
 80076fc:	3201      	adds	r2, #1
 80076fe:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007702:	2e00      	cmp	r6, #0
 8007704:	d0fa      	beq.n	80076fc <__kernel_rem_pio2f+0x284>
 8007706:	9905      	ldr	r1, [sp, #20]
 8007708:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800770c:	eb0d 0001 	add.w	r0, sp, r1
 8007710:	18e6      	adds	r6, r4, r3
 8007712:	a91c      	add	r1, sp, #112	@ 0x70
 8007714:	f104 0c01 	add.w	ip, r4, #1
 8007718:	384c      	subs	r0, #76	@ 0x4c
 800771a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800771e:	4422      	add	r2, r4
 8007720:	4562      	cmp	r2, ip
 8007722:	da04      	bge.n	800772e <__kernel_rem_pio2f+0x2b6>
 8007724:	4614      	mov	r4, r2
 8007726:	e70e      	b.n	8007546 <__kernel_rem_pio2f+0xce>
 8007728:	9804      	ldr	r0, [sp, #16]
 800772a:	2201      	movs	r2, #1
 800772c:	e7e7      	b.n	80076fe <__kernel_rem_pio2f+0x286>
 800772e:	9903      	ldr	r1, [sp, #12]
 8007730:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007734:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007738:	9105      	str	r1, [sp, #20]
 800773a:	ee07 1a90 	vmov	s15, r1
 800773e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007742:	2400      	movs	r4, #0
 8007744:	ece6 7a01 	vstmia	r6!, {s15}
 8007748:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800777c <__kernel_rem_pio2f+0x304>
 800774c:	46b1      	mov	r9, r6
 800774e:	455c      	cmp	r4, fp
 8007750:	dd04      	ble.n	800775c <__kernel_rem_pio2f+0x2e4>
 8007752:	ece0 7a01 	vstmia	r0!, {s15}
 8007756:	f10c 0c01 	add.w	ip, ip, #1
 800775a:	e7e1      	b.n	8007720 <__kernel_rem_pio2f+0x2a8>
 800775c:	ecfe 6a01 	vldmia	lr!, {s13}
 8007760:	ed39 7a01 	vldmdb	r9!, {s14}
 8007764:	3401      	adds	r4, #1
 8007766:	eee6 7a87 	vfma.f32	s15, s13, s14
 800776a:	e7f0      	b.n	800774e <__kernel_rem_pio2f+0x2d6>
 800776c:	08007dd0 	.word	0x08007dd0
 8007770:	08007da4 	.word	0x08007da4
 8007774:	43800000 	.word	0x43800000
 8007778:	3b800000 	.word	0x3b800000
 800777c:	00000000 	.word	0x00000000
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	eeb0 0a48 	vmov.f32	s0, s16
 8007786:	eba3 0008 	sub.w	r0, r3, r8
 800778a:	f7ff fe0f 	bl	80073ac <scalbnf>
 800778e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007774 <__kernel_rem_pio2f+0x2fc>
 8007792:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	db19      	blt.n	80077d0 <__kernel_rem_pio2f+0x358>
 800779c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007778 <__kernel_rem_pio2f+0x300>
 80077a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80077a4:	aa08      	add	r2, sp, #32
 80077a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077aa:	3508      	adds	r5, #8
 80077ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80077b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077bc:	ee10 3a10 	vmov	r3, s0
 80077c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80077c4:	ee17 3a90 	vmov	r3, s15
 80077c8:	3401      	adds	r4, #1
 80077ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80077ce:	e74c      	b.n	800766a <__kernel_rem_pio2f+0x1f2>
 80077d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077d4:	aa08      	add	r2, sp, #32
 80077d6:	ee10 3a10 	vmov	r3, s0
 80077da:	e7f6      	b.n	80077ca <__kernel_rem_pio2f+0x352>
 80077dc:	a808      	add	r0, sp, #32
 80077de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80077e2:	9001      	str	r0, [sp, #4]
 80077e4:	ee07 0a90 	vmov	s15, r0
 80077e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ec:	3b01      	subs	r3, #1
 80077ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80077f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80077f6:	ed62 7a01 	vstmdb	r2!, {s15}
 80077fa:	e743      	b.n	8007684 <__kernel_rem_pio2f+0x20c>
 80077fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8007800:	ecb5 7a01 	vldmia	r5!, {s14}
 8007804:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007808:	3001      	adds	r0, #1
 800780a:	4550      	cmp	r0, sl
 800780c:	dc01      	bgt.n	8007812 <__kernel_rem_pio2f+0x39a>
 800780e:	4282      	cmp	r2, r0
 8007810:	daf4      	bge.n	80077fc <__kernel_rem_pio2f+0x384>
 8007812:	a858      	add	r0, sp, #352	@ 0x160
 8007814:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007818:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800781c:	3b01      	subs	r3, #1
 800781e:	e735      	b.n	800768c <__kernel_rem_pio2f+0x214>
 8007820:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007822:	2b02      	cmp	r3, #2
 8007824:	dc09      	bgt.n	800783a <__kernel_rem_pio2f+0x3c2>
 8007826:	2b00      	cmp	r3, #0
 8007828:	dc2b      	bgt.n	8007882 <__kernel_rem_pio2f+0x40a>
 800782a:	d044      	beq.n	80078b6 <__kernel_rem_pio2f+0x43e>
 800782c:	f009 0007 	and.w	r0, r9, #7
 8007830:	b059      	add	sp, #356	@ 0x164
 8007832:	ecbd 8b04 	vpop	{d8-d9}
 8007836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800783c:	2b03      	cmp	r3, #3
 800783e:	d1f5      	bne.n	800782c <__kernel_rem_pio2f+0x3b4>
 8007840:	aa30      	add	r2, sp, #192	@ 0xc0
 8007842:	1f0b      	subs	r3, r1, #4
 8007844:	4413      	add	r3, r2
 8007846:	461a      	mov	r2, r3
 8007848:	4620      	mov	r0, r4
 800784a:	2800      	cmp	r0, #0
 800784c:	f1a2 0204 	sub.w	r2, r2, #4
 8007850:	dc52      	bgt.n	80078f8 <__kernel_rem_pio2f+0x480>
 8007852:	4622      	mov	r2, r4
 8007854:	2a01      	cmp	r2, #1
 8007856:	f1a3 0304 	sub.w	r3, r3, #4
 800785a:	dc5d      	bgt.n	8007918 <__kernel_rem_pio2f+0x4a0>
 800785c:	ab30      	add	r3, sp, #192	@ 0xc0
 800785e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800777c <__kernel_rem_pio2f+0x304>
 8007862:	440b      	add	r3, r1
 8007864:	2c01      	cmp	r4, #1
 8007866:	dc67      	bgt.n	8007938 <__kernel_rem_pio2f+0x4c0>
 8007868:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800786c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8007870:	2e00      	cmp	r6, #0
 8007872:	d167      	bne.n	8007944 <__kernel_rem_pio2f+0x4cc>
 8007874:	edc7 6a00 	vstr	s13, [r7]
 8007878:	ed87 7a01 	vstr	s14, [r7, #4]
 800787c:	edc7 7a02 	vstr	s15, [r7, #8]
 8007880:	e7d4      	b.n	800782c <__kernel_rem_pio2f+0x3b4>
 8007882:	ab30      	add	r3, sp, #192	@ 0xc0
 8007884:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800777c <__kernel_rem_pio2f+0x304>
 8007888:	440b      	add	r3, r1
 800788a:	4622      	mov	r2, r4
 800788c:	2a00      	cmp	r2, #0
 800788e:	da24      	bge.n	80078da <__kernel_rem_pio2f+0x462>
 8007890:	b34e      	cbz	r6, 80078e6 <__kernel_rem_pio2f+0x46e>
 8007892:	eef1 7a47 	vneg.f32	s15, s14
 8007896:	edc7 7a00 	vstr	s15, [r7]
 800789a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800789e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078a2:	aa31      	add	r2, sp, #196	@ 0xc4
 80078a4:	2301      	movs	r3, #1
 80078a6:	429c      	cmp	r4, r3
 80078a8:	da20      	bge.n	80078ec <__kernel_rem_pio2f+0x474>
 80078aa:	b10e      	cbz	r6, 80078b0 <__kernel_rem_pio2f+0x438>
 80078ac:	eef1 7a67 	vneg.f32	s15, s15
 80078b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80078b4:	e7ba      	b.n	800782c <__kernel_rem_pio2f+0x3b4>
 80078b6:	ab30      	add	r3, sp, #192	@ 0xc0
 80078b8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800777c <__kernel_rem_pio2f+0x304>
 80078bc:	440b      	add	r3, r1
 80078be:	2c00      	cmp	r4, #0
 80078c0:	da05      	bge.n	80078ce <__kernel_rem_pio2f+0x456>
 80078c2:	b10e      	cbz	r6, 80078c8 <__kernel_rem_pio2f+0x450>
 80078c4:	eef1 7a67 	vneg.f32	s15, s15
 80078c8:	edc7 7a00 	vstr	s15, [r7]
 80078cc:	e7ae      	b.n	800782c <__kernel_rem_pio2f+0x3b4>
 80078ce:	ed33 7a01 	vldmdb	r3!, {s14}
 80078d2:	3c01      	subs	r4, #1
 80078d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078d8:	e7f1      	b.n	80078be <__kernel_rem_pio2f+0x446>
 80078da:	ed73 7a01 	vldmdb	r3!, {s15}
 80078de:	3a01      	subs	r2, #1
 80078e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e4:	e7d2      	b.n	800788c <__kernel_rem_pio2f+0x414>
 80078e6:	eef0 7a47 	vmov.f32	s15, s14
 80078ea:	e7d4      	b.n	8007896 <__kernel_rem_pio2f+0x41e>
 80078ec:	ecb2 7a01 	vldmia	r2!, {s14}
 80078f0:	3301      	adds	r3, #1
 80078f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078f6:	e7d6      	b.n	80078a6 <__kernel_rem_pio2f+0x42e>
 80078f8:	edd2 7a00 	vldr	s15, [r2]
 80078fc:	edd2 6a01 	vldr	s13, [r2, #4]
 8007900:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007904:	3801      	subs	r0, #1
 8007906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800790a:	ed82 7a00 	vstr	s14, [r2]
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	edc2 7a01 	vstr	s15, [r2, #4]
 8007916:	e798      	b.n	800784a <__kernel_rem_pio2f+0x3d2>
 8007918:	edd3 7a00 	vldr	s15, [r3]
 800791c:	edd3 6a01 	vldr	s13, [r3, #4]
 8007920:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007924:	3a01      	subs	r2, #1
 8007926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800792a:	ed83 7a00 	vstr	s14, [r3]
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	edc3 7a01 	vstr	s15, [r3, #4]
 8007936:	e78d      	b.n	8007854 <__kernel_rem_pio2f+0x3dc>
 8007938:	ed33 7a01 	vldmdb	r3!, {s14}
 800793c:	3c01      	subs	r4, #1
 800793e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007942:	e78f      	b.n	8007864 <__kernel_rem_pio2f+0x3ec>
 8007944:	eef1 6a66 	vneg.f32	s13, s13
 8007948:	eeb1 7a47 	vneg.f32	s14, s14
 800794c:	edc7 6a00 	vstr	s13, [r7]
 8007950:	ed87 7a01 	vstr	s14, [r7, #4]
 8007954:	eef1 7a67 	vneg.f32	s15, s15
 8007958:	e790      	b.n	800787c <__kernel_rem_pio2f+0x404>
 800795a:	bf00      	nop

0800795c <floorf>:
 800795c:	ee10 3a10 	vmov	r3, s0
 8007960:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007964:	3a7f      	subs	r2, #127	@ 0x7f
 8007966:	2a16      	cmp	r2, #22
 8007968:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800796c:	dc2b      	bgt.n	80079c6 <floorf+0x6a>
 800796e:	2a00      	cmp	r2, #0
 8007970:	da12      	bge.n	8007998 <floorf+0x3c>
 8007972:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80079d8 <floorf+0x7c>
 8007976:	ee30 0a27 	vadd.f32	s0, s0, s15
 800797a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007982:	dd06      	ble.n	8007992 <floorf+0x36>
 8007984:	2b00      	cmp	r3, #0
 8007986:	da24      	bge.n	80079d2 <floorf+0x76>
 8007988:	2900      	cmp	r1, #0
 800798a:	4b14      	ldr	r3, [pc, #80]	@ (80079dc <floorf+0x80>)
 800798c:	bf08      	it	eq
 800798e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8007992:	ee00 3a10 	vmov	s0, r3
 8007996:	4770      	bx	lr
 8007998:	4911      	ldr	r1, [pc, #68]	@ (80079e0 <floorf+0x84>)
 800799a:	4111      	asrs	r1, r2
 800799c:	420b      	tst	r3, r1
 800799e:	d0fa      	beq.n	8007996 <floorf+0x3a>
 80079a0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80079d8 <floorf+0x7c>
 80079a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80079a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b0:	ddef      	ble.n	8007992 <floorf+0x36>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfbe      	ittt	lt
 80079b6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80079ba:	fa40 f202 	asrlt.w	r2, r0, r2
 80079be:	189b      	addlt	r3, r3, r2
 80079c0:	ea23 0301 	bic.w	r3, r3, r1
 80079c4:	e7e5      	b.n	8007992 <floorf+0x36>
 80079c6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80079ca:	d3e4      	bcc.n	8007996 <floorf+0x3a>
 80079cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80079d0:	4770      	bx	lr
 80079d2:	2300      	movs	r3, #0
 80079d4:	e7dd      	b.n	8007992 <floorf+0x36>
 80079d6:	bf00      	nop
 80079d8:	7149f2ca 	.word	0x7149f2ca
 80079dc:	bf800000 	.word	0xbf800000
 80079e0:	007fffff 	.word	0x007fffff

080079e4 <_init>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr

080079f0 <_fini>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr
