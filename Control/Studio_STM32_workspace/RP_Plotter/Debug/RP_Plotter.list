
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdf4  0800cdf4  0000e25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cdf4  0800cdf4  0000ddf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdfc  0800cdfc  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdfc  0800cdfc  0000ddfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce00  0800ce00  0000de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800ce04  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  20000260  0800d060  0000e260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013f4  0800d060  0000e3f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017894  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce2  00000000  00000000  00025b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00028808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9c  00000000  00000000  00029a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027449  00000000  00000000  0002a934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168a5  00000000  00000000  00051d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd6c  00000000  00000000  00068622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016838e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  001683d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c994 	.word	0x0800c994

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800c994 	.word	0x0800c994

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000027c 	.word	0x2000027c

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000027c 	.word	0x2000027c

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fb77 	bl	800a848 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fb75 	bl	800887c <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 faff 	bl	800a79c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fb16 	bl	800a7d4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fdbd 	bl	8009d30 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 fee5 	bl	8009fa4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f8cf 	bl	8007394 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fc90 	bl	8007b24 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000027c 	.word	0x2000027c
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <Modbus_Protocal_Worker>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void Modbus_Protocal_Worker() {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08b      	sub	sp, #44	@ 0x2c
 800128c:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 800128e:	4bae      	ldr	r3, [pc, #696]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001290:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001294:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 8001296:	4bad      	ldr	r3, [pc, #692]	@ (800154c <Modbus_Protocal_Worker+0x2c4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Modbus_Protocal_Worker+0x1a>
 800129e:	2202      	movs	r2, #2
 80012a0:	e000      	b.n	80012a4 <Modbus_Protocal_Worker+0x1c>
 80012a2:	2201      	movs	r2, #1
 80012a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012a6:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 80012a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012aa:	895b      	ldrh	r3, [r3, #10]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001550 <Modbus_Protocal_Worker+0x2c8>)
 80012ba:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 80012bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001554 <Modbus_Protocal_Worker+0x2cc>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001558 <Modbus_Protocal_Worker+0x2d0>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 80012d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80012da:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8ec 	bl	80004bc <__aeabi_i2d>
 80012e4:	a392      	add	r3, pc, #584	@ (adr r3, 8001530 <Modbus_Protocal_Worker+0x2a8>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f951 	bl	8000590 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc05 	bl	8000b04 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8ef 	bl	80004e0 <__aeabi_f2d>
 8001302:	a38d      	add	r3, pc, #564	@ (adr r3, 8001538 <Modbus_Protocal_Worker+0x2b0>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7fe ff8a 	bl	8000220 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fbf6 	bl	8000b04 <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4a8f      	ldr	r2, [pc, #572]	@ (8001558 <Modbus_Protocal_Worker+0x2d0>)
 800131c:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 800131e:	f107 040c 	add.w	r4, r7, #12
 8001322:	f107 0210 	add.w	r2, r7, #16
 8001326:	f107 0114 	add.w	r1, r7, #20
 800132a:	f107 0018 	add.w	r0, r7, #24
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4623      	mov	r3, r4
 800133a:	f003 fcd5 	bl	8004ce8 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8cd 	bl	80004e0 <__aeabi_f2d>
 8001346:	a37c      	add	r3, pc, #496	@ (adr r3, 8001538 <Modbus_Protocal_Worker+0x2b0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ff6a 	bl	8000224 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	a379      	add	r3, pc, #484	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f917 	bl	8000590 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbcb 	bl	8000b04 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001372:	edd7 7a07 	vldr	s15, [r7, #28]
 8001376:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b6f      	ldr	r3, [pc, #444]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 800138c:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8a5 	bl	80004e0 <__aeabi_f2d>
 8001396:	a36a      	add	r3, pc, #424	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f8f8 	bl	8000590 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fbac 	bl	8000b04 <__aeabi_d2f>
 80013ac:	ee07 0a90 	vmov	s15, r0
 80013b0:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 80013b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 80013ca:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f886 	bl	80004e0 <__aeabi_f2d>
 80013d4:	a35a      	add	r3, pc, #360	@ (adr r3, 8001540 <Modbus_Protocal_Worker+0x2b8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f8d9 	bl	8000590 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb8d 	bl	8000b04 <__aeabi_d2f>
 80013ea:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80013ee:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80013f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013f6:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80013fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fe:	ee17 3a90 	vmov	r3, s15
 8001402:	b21b      	sxth	r3, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b50      	ldr	r3, [pc, #320]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001408:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	eef0 7ae7 	vabs.f32	s15, s15
 8001412:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 3a90 	vmov	r3, s15
 8001422:	b21b      	sxth	r3, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b48      	ldr	r3, [pc, #288]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001428:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	eef0 7ae7 	vabs.f32	s15, s15
 8001432:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	ee17 3a90 	vmov	r3, s15
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) mmPosition * 10.0f;
 800144a:	edd7 7a04 	vldr	s15, [r7, #16]
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21b      	sxth	r3, r3
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b35      	ldr	r3, [pc, #212]	@ (8001548 <Modbus_Protocal_Worker+0x2c0>)
 8001474:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 8001476:	4b39      	ldr	r3, [pc, #228]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7ddb      	ldrb	r3, [r3, #23]
 800147c:	3b01      	subs	r3, #1
 800147e:	2b03      	cmp	r3, #3
 8001480:	d80a      	bhi.n	8001498 <Modbus_Protocal_Worker+0x210>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <Modbus_Protocal_Worker+0x200>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	080014a3 	.word	0x080014a3
 800148c:	08001669 	.word	0x08001669
 8001490:	08001561 	.word	0x08001561
 8001494:	080015a5 	.word	0x080015a5
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	75da      	strb	r2, [r3, #23]
		break;
 80014a0:	e0fa      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80014a2:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <Modbus_Protocal_Worker+0x234>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2202      	movs	r2, #2
 80014b4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80014b6:	f000 f9e5 	bl	8001884 <Modbus_Emission>
 80014ba:	e018      	b.n	80014ee <Modbus_Protocal_Worker+0x266>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d00b      	beq.n	80014ee <Modbus_Protocal_Worker+0x266>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2203      	movs	r2, #3
 80014ec:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 80014ee:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	f040 80c6 	bne.w	800168a <Modbus_Protocal_Worker+0x402>
			hModbus->modbusUartStructure.RxTail = 0;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <Modbus_Protocal_Worker+0x2d4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 800151a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800151e:	4413      	add	r3, r2
 8001520:	3302      	adds	r3, #2
 8001522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001526:	4619      	mov	r1, r3
 8001528:	f008 fd3c 	bl	8009fa4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 800152c:	e0ad      	b.n	800168a <Modbus_Protocal_Worker+0x402>
 800152e:	bf00      	nop
 8001530:	03b761f5 	.word	0x03b761f5
 8001534:	3f5c9871 	.word	0x3f5c9871
 8001538:	54442d18 	.word	0x54442d18
 800153c:	3ff921fb 	.word	0x3ff921fb
 8001540:	1a63c1f8 	.word	0x1a63c1f8
 8001544:	404ca5dc 	.word	0x404ca5dc
 8001548:	200010e0 	.word	0x200010e0
 800154c:	20000b7f 	.word	0x20000b7f
 8001550:	20000bfc 	.word	0x20000bfc
 8001554:	3dcccccd 	.word	0x3dcccccd
 8001558:	20000bf4 	.word	0x20000bf4
 800155c:	2000027c 	.word	0x2000027c
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001560:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	7d1b      	ldrb	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8091 	beq.w	800168e <Modbus_Protocal_Worker+0x406>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	22fe      	movs	r2, #254	@ 0xfe
 8001572:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001590:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001592:	1a8a      	subs	r2, r1, r2
 8001594:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001596:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800159a:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2204      	movs	r2, #4
 80015a0:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015a2:	e074      	b.n	800168e <Modbus_Protocal_Worker+0x406>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80015a4:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80015ac:	f113 0f02 	cmn.w	r3, #2
 80015b0:	d150      	bne.n	8001654 <Modbus_Protocal_Worker+0x3cc>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 80015ba:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 80015ca:	3b02      	subs	r3, #2
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fe22 	bl	8001218 <CRC16>
 80015d4:	4603      	mov	r3, r0
 80015d6:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 80015d8:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 80015e6:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015e8:	440b      	add	r3, r1
 80015ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d10c      	bne.n	800160c <Modbus_Protocal_Worker+0x384>
					&& CalculateCRC.U8[1]
 80015f2:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001600:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001602:	440b      	add	r3, r1
 8001604:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d004      	beq.n	8001616 <Modbus_Protocal_Worker+0x38e>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	22ff      	movs	r2, #255	@ 0xff
 8001612:	759a      	strb	r2, [r3, #22]
				break;
 8001614:	e040      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d113      	bne.n	8001650 <Modbus_Protocal_Worker+0x3c8>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001638:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001642:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001644:	461a      	mov	r2, r3
 8001646:	f00a fa8b 	bl	800bb60 <memcpy>

			//execute command
			Modbus_frame_response();
 800164a:	f000 f903 	bl	8001854 <Modbus_frame_response>
 800164e:	e001      	b.n	8001654 <Modbus_Protocal_Worker+0x3cc>
				break;
 8001650:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001652:	e021      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		if (hModbus->Flag_T35TimeOut) {
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	7d5b      	ldrb	r3, [r3, #21]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <Modbus_Protocal_Worker+0x40a>
			hModbus->Mstatus = Modbus_state_Idle;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	75da      	strb	r2, [r3, #23]
		break;
 8001666:	e014      	b.n	8001692 <Modbus_Protocal_Worker+0x40a>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001672:	2b20      	cmp	r3, #32
 8001674:	d10f      	bne.n	8001696 <Modbus_Protocal_Worker+0x40e>
			hModbus->TxCount = 0;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <Modbus_Protocal_Worker+0x418>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	75da      	strb	r2, [r3, #23]
		break;
 8001688:	e005      	b.n	8001696 <Modbus_Protocal_Worker+0x40e>
		break;
 800168a:	bf00      	nop
 800168c:	e004      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <Modbus_Protocal_Worker+0x410>
		break;
 8001696:	bf00      	nop
}
 8001698:	bf00      	nop
 800169a:	3724      	adds	r7, #36	@ 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	2000027c 	.word	0x2000027c

080016a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	7e5b      	ldrb	r3, [r3, #25]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	7e92      	ldrb	r2, [r2, #26]
 80016ba:	4413      	add	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d903      	bls.n	80016d2 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f000 f8a0 	bl	8001810 <ModbusErrorReply>
		return;
 80016d0:	e023      	b.n	800171a <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	440b      	add	r3, r1
 80016e2:	7ed2      	ldrb	r2, [r2, #27]
 80016e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	7f12      	ldrb	r2, [r2, #28]
 80016f8:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <modbusWrite1Register+0x7c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <modbusWrite1Register+0x7c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3318      	adds	r3, #24
 8001708:	2208      	movs	r2, #8
 800170a:	4619      	mov	r1, r3
 800170c:	f00a fa28 	bl	800bb60 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <modbusWrite1Register+0x7c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000027c 	.word	0x2000027c

08001724 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <modbusRead1Register+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	7edb      	ldrb	r3, [r3, #27]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 8001734:	4a35      	ldr	r2, [pc, #212]	@ (800180c <modbusRead1Register+0xe8>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 800173a:	4413      	add	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <modbusRead1Register+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	7e5b      	ldrb	r3, [r3, #25]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	4a30      	ldr	r2, [pc, #192]	@ (800180c <modbusRead1Register+0xe8>)
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	7e92      	ldrb	r2, [r2, #26]
 800174e:	4413      	add	r3, r2
 8001750:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <modbusRead1Register+0x3a>
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2b7d      	cmp	r3, #125	@ 0x7d
 800175c:	d903      	bls.n	8001766 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f856 	bl	8001810 <ModbusErrorReply>
		return;
 8001764:	e04e      	b.n	8001804 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 8001766:	88ba      	ldrh	r2, [r7, #4]
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <modbusRead1Register+0xe8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d808      	bhi.n	8001784 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001772:	88ba      	ldrh	r2, [r7, #4]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <modbusRead1Register+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d903      	bls.n	800178c <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001784:	2002      	movs	r0, #2
 8001786:	f000 f843 	bl	8001810 <ModbusErrorReply>
		return;
 800178a:	e03b      	b.n	8001804 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <modbusRead1Register+0xe8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2203      	movs	r2, #3
 8001792:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <modbusRead1Register+0xe8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80017a6:	2400      	movs	r4, #0
 80017a8:	e020      	b.n	80017ec <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <modbusRead1Register+0xe8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	4423      	add	r3, r4
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <modbusRead1Register+0xe8>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	1c63      	adds	r3, r4, #1
 80017be:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80017c0:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 80017c2:	4413      	add	r3, r2
 80017c4:	460a      	mov	r2, r1
 80017c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <modbusRead1Register+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	4423      	add	r3, r4
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <modbusRead1Register+0xe8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	0063      	lsls	r3, r4, #1
 80017de:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80017e0:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 80017e2:	4413      	add	r3, r2
 80017e4:	460a      	mov	r2, r1
 80017e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 80017ea:	3401      	adds	r4, #1
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	429c      	cmp	r4, r3
 80017f0:	dbdb      	blt.n	80017aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <modbusRead1Register+0xe8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	2000027c 	.word	0x2000027c

08001810 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <ModbusErrorReply+0x40>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	7e1a      	ldrb	r2, [r3, #24]
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <ModbusErrorReply+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <ModbusErrorReply+0x40>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <ModbusErrorReply+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000027c 	.word	0x2000027c

08001854 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <Modbus_frame_response+0x2c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	7e1b      	ldrb	r3, [r3, #24]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d004      	beq.n	800186c <Modbus_frame_response+0x18>
 8001862:	2b06      	cmp	r3, #6
 8001864:	d105      	bne.n	8001872 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001866:	f7ff ff1d 	bl	80016a4 <modbusWrite1Register>
		break;
 800186a:	e006      	b.n	800187a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800186c:	f7ff ff5a 	bl	8001724 <modbusRead1Register>
		break;
 8001870:	e003      	b.n	800187a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff ffcc 	bl	8001810 <ModbusErrorReply>
		break;
 8001878:	bf00      	nop

	}
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000027c 	.word	0x2000027c

08001884 <Modbus_Emission>:

void Modbus_Emission() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <Modbus_Emission+0xe8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001894:	2b20      	cmp	r3, #32
 8001896:	d15d      	bne.n	8001954 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <Modbus_Emission+0xe8>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <Modbus_Emission+0xe8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80018a6:	4b31      	ldr	r3, [pc, #196]	@ (800196c <Modbus_Emission+0xe8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80018ae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <Modbus_Emission+0xe8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 80018b8:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <Modbus_Emission+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80018c0:	461a      	mov	r2, r3
 80018c2:	f00a f94d 	bl	800bb60 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 80018c6:	4b29      	ldr	r3, [pc, #164]	@ (800196c <Modbus_Emission+0xe8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <Modbus_Emission+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3203      	adds	r2, #3
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018dc:	4b23      	ldr	r3, [pc, #140]	@ (800196c <Modbus_Emission+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <Modbus_Emission+0xe8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018ec:	3b02      	subs	r3, #2
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff fc91 	bl	8001218 <CRC16>
 80018f6:	4603      	mov	r3, r0
 80018f8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <Modbus_Emission+0xe8>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <Modbus_Emission+0xe8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001906:	3b02      	subs	r3, #2
 8001908:	7939      	ldrb	r1, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	460a      	mov	r2, r1
 800190e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <Modbus_Emission+0xe8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <Modbus_Emission+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 800191e:	3b01      	subs	r3, #1
 8001920:	7979      	ldrb	r1, [r7, #5]
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <Modbus_Emission+0xe8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001934:	2b20      	cmp	r3, #32
 8001936:	d10d      	bne.n	8001954 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <Modbus_Emission+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <Modbus_Emission+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <Modbus_Emission+0xe8>)
 8001948:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 800194a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800194e:	461a      	mov	r2, r3
 8001950:	f008 faa8 	bl	8009ea4 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <Modbus_Emission+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <Modbus_Emission+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	755a      	strb	r2, [r3, #21]

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000027c 	.word	0x2000027c

08001970 <Trapezoidal_Init>:

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max,
		float a_max) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	ed87 0a02 	vstr	s0, [r7, #8]
 800197c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001980:	ed87 1a00 	vstr	s2, [r7]
	profile->distance_total = fabsf(distance_total);
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	eef0 7ae7 	vabs.f32	s15, s15
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edc3 7a00 	vstr	s15, [r3]
	profile->v_max = fabsf(v_max);
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef0 7ae7 	vabs.f32	s15, s15
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
	profile->a_max = fabsf(a_max);
 80019a0:	edd7 7a00 	vldr	s15, [r7]
 80019a4:	eef0 7ae7 	vabs.f32	s15, s15
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	edc3 7a03 	vstr	s15, [r3, #12]
	profile->current_position = 0.0f;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
	profile->current_velocity = 0.0f;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
	profile->target_position = distance_total;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	619a      	str	r2, [r3, #24]
	profile->direction = (distance_total >= 0) ? 1.0f : -1.0f;
 80019c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db02      	blt.n	80019d8 <Trapezoidal_Init+0x68>
 80019d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019d6:	e000      	b.n	80019da <Trapezoidal_Init+0x6a>
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <Trapezoidal_Init+0xe8>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	61da      	str	r2, [r3, #28]
	profile->finished = 0;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]

	// Check if triangular or trapezoidal
	float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fe:	edc7 7a05 	vstr	s15, [r7, #20]
	if (profile->distance_total < d_total_min) {
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	dd14      	ble.n	8001a40 <Trapezoidal_Init+0xd0>
		// Triangular profile
		profile->is_triangular = 1;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	f00a f8a6 	bl	800bb80 <sqrtf>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// Full trapezoidal profile
		profile->is_triangular = 0;
		profile->v_peak = profile->v_max;
	}
}
 8001a3e:	e006      	b.n	8001a4e <Trapezoidal_Init+0xde>
		profile->is_triangular = 0;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = profile->v_max;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	bf800000 	.word	0xbf800000

08001a5c <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	ed87 0a00 	vstr	s0, [r7]
	profile->direction = (profile->target_position - profile->current_position >= 0) ? 1.0f : -1.0f;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	db02      	blt.n	8001a88 <Trapezoidal_Update+0x2c>
 8001a82:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a86:	e000      	b.n	8001a8a <Trapezoidal_Update+0x2e>
 8001a88:	4a6d      	ldr	r2, [pc, #436]	@ (8001c40 <Trapezoidal_Update+0x1e4>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	61da      	str	r2, [r3, #28]
    if (profile->finished) return;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80ce 	bne.w	8001c34 <Trapezoidal_Update+0x1d8>

    float remaining_distance = profile->target_position - profile->current_position;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa8:	edc7 7a03 	vstr	s15, [r7, #12]
    float stopping_distance = (profile->current_velocity * profile->current_velocity) / (2.0f * profile->a_max);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ab8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ac2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (fabsf(remaining_distance) <= stopping_distance) {
 8001ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	db3c      	blt.n	8001b5e <Trapezoidal_Update+0x102>
        // Decelerate
        profile->current_velocity -= profile->a_max * dt * profile->direction;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	edd3 6a03 	vldr	s13, [r3, #12]
 8001af0:	edd7 7a00 	vldr	s15, [r7]
 8001af4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edc3 7a05 	vstr	s15, [r3, #20]
        if (profile->direction > 0 && profile->current_velocity < 0.0f) profile->current_velocity = 0.0f;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	dd0b      	ble.n	8001b34 <Trapezoidal_Update+0xd8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d503      	bpl.n	8001b34 <Trapezoidal_Update+0xd8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
        if (profile->direction < 0 && profile->current_velocity > 0.0f) profile->current_velocity = 0.0f;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d545      	bpl.n	8001bd0 <Trapezoidal_Update+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	dd3d      	ble.n	8001bd0 <Trapezoidal_Update+0x174>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	e038      	b.n	8001bd0 <Trapezoidal_Update+0x174>
    } else {
        // Accelerate
        if (fabsf(profile->current_velocity) < profile->v_peak) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b64:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	d52b      	bpl.n	8001bd0 <Trapezoidal_Update+0x174>
            profile->current_velocity += profile->a_max * dt * profile->direction;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b84:	edd7 7a00 	vldr	s15, [r7]
 8001b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	edc3 7a05 	vstr	s15, [r3, #20]
            if (fabsf(profile->current_velocity) > profile->v_peak) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ba6:	eeb0 7ae7 	vabs.f32	s14, s15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	dd0a      	ble.n	8001bd0 <Trapezoidal_Update+0x174>
                profile->current_velocity = profile->v_peak * profile->direction;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	edc3 7a05 	vstr	s15, [r3, #20]

    // Update position
    // profile->current_position += profile->current_velocity * dt;

    // Check if finished
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	dd0a      	ble.n	8001bf6 <Trapezoidal_Update+0x19a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	da12      	bge.n	8001c1c <Trapezoidal_Update+0x1c0>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edd3 7a07 	vldr	s15, [r3, #28]
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d517      	bpl.n	8001c36 <Trapezoidal_Update+0x1da>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d80c      	bhi.n	8001c36 <Trapezoidal_Update+0x1da>
        profile->current_position = profile->target_position;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
        profile->current_velocity = 0.0f;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
        profile->finished = 1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	621a      	str	r2, [r3, #32]
 8001c32:	e000      	b.n	8001c36 <Trapezoidal_Update+0x1da>
    if (profile->finished) return;
 8001c34:	bf00      	nop
    }
}
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	bf800000 	.word	0xbf800000
 8001c44:	00000000 	.word	0x00000000

08001c48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c4c:	ed2d 8b02 	vpush	{d8}
 8001c50:	b0c9      	sub	sp, #292	@ 0x124
 8001c52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c54:	f003 fc1d 	bl	8005492 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c58:	f001 fe8c 	bl	8003974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c5c:	f002 fae6 	bl	800422c <MX_GPIO_Init>
	MX_DMA_Init();
 8001c60:	f002 fab2 	bl	80041c8 <MX_DMA_Init>
	MX_TIM4_Init();
 8001c64:	f002 f82e 	bl	8003cc4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001c68:	f002 f882 	bl	8003d70 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001c6c:	f001 ffd4 	bl	8003c18 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001c70:	f002 f8cc 	bl	8003e0c <MX_TIM8_Init>
	MX_TIM15_Init();
 8001c74:	f002 f986 	bl	8003f84 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001c78:	f001 fec8 	bl	8003a0c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c7c:	f001 ff4c 	bl	8003b18 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001c80:	f002 fa24 	bl	80040cc <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001c84:	f002 fa52 	bl	800412c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001c88:	4860      	ldr	r0, [pc, #384]	@ (8001e0c <main+0x1c4>)
 8001c8a:	f005 fb13 	bl	80072b4 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	485e      	ldr	r0, [pc, #376]	@ (8001e0c <main+0x1c4>)
 8001c92:	f005 fddb 	bl	800784c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001c96:	2104      	movs	r1, #4
 8001c98:	485c      	ldr	r0, [pc, #368]	@ (8001e0c <main+0x1c4>)
 8001c9a:	f005 fdd7 	bl	800784c <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001c9e:	485c      	ldr	r0, [pc, #368]	@ (8001e10 <main+0x1c8>)
 8001ca0:	f005 fb08 	bl	80072b4 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	485a      	ldr	r0, [pc, #360]	@ (8001e10 <main+0x1c8>)
 8001ca8:	f005 fdd0 	bl	800784c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001cac:	2104      	movs	r1, #4
 8001cae:	4858      	ldr	r0, [pc, #352]	@ (8001e10 <main+0x1c8>)
 8001cb0:	f005 fdcc 	bl	800784c <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001cb4:	213c      	movs	r1, #60	@ 0x3c
 8001cb6:	4857      	ldr	r0, [pc, #348]	@ (8001e14 <main+0x1cc>)
 8001cb8:	f006 f876 	bl	8007da8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001cbc:	213c      	movs	r1, #60	@ 0x3c
 8001cbe:	4856      	ldr	r0, [pc, #344]	@ (8001e18 <main+0x1d0>)
 8001cc0:	f006 f872 	bl	8007da8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001cc4:	4855      	ldr	r0, [pc, #340]	@ (8001e1c <main+0x1d4>)
 8001cc6:	f005 fb65 	bl	8007394 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001cca:	4855      	ldr	r0, [pc, #340]	@ (8001e20 <main+0x1d8>)
 8001ccc:	f005 faf2 	bl	80072b4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	4853      	ldr	r0, [pc, #332]	@ (8001e20 <main+0x1d8>)
 8001cd4:	f005 fc44 	bl	8007560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001cd8:	210c      	movs	r1, #12
 8001cda:	4851      	ldr	r0, [pc, #324]	@ (8001e20 <main+0x1d8>)
 8001cdc:	f005 fc40 	bl	8007560 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ce0:	4850      	ldr	r0, [pc, #320]	@ (8001e24 <main+0x1dc>)
 8001ce2:	f005 fae7 	bl	80072b4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	484e      	ldr	r0, [pc, #312]	@ (8001e24 <main+0x1dc>)
 8001cea:	f005 fc39 	bl	8007560 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001cee:	f002 fbc5 	bl	800447c <DWT_Init>

	PID.Kp = 0.1;
 8001cf2:	4a4d      	ldr	r2, [pc, #308]	@ (8001e28 <main+0x1e0>)
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e2c <main+0x1e4>)
 8001cf6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e28 <main+0x1e0>)
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <main+0x1e8>)
 8001cfc:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8001e28 <main+0x1e0>)
 8001d00:	4b4a      	ldr	r3, [pc, #296]	@ (8001e2c <main+0x1e4>)
 8001d02:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	4848      	ldr	r0, [pc, #288]	@ (8001e28 <main+0x1e0>)
 8001d08:	f009 fec2 	bl	800ba90 <arm_pid_init_f32>

	Reset_R();
 8001d0c:	f002 ffca 	bl	8004ca4 <Reset_R>
	Reset_P();
 8001d10:	f002 ffd8 	bl	8004cc4 <Reset_P>
	calibState = CALIB_IDLE;
 8001d14:	4a47      	ldr	r2, [pc, #284]	@ (8001e34 <main+0x1ec>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f002 ff98 	bl	8004c50 <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001d20:	4a45      	ldr	r2, [pc, #276]	@ (8001e38 <main+0x1f0>)
 8001d22:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <main+0x1f4>)
 8001d24:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001d26:	4a44      	ldr	r2, [pc, #272]	@ (8001e38 <main+0x1f0>)
 8001d28:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <main+0x1f8>)
 8001d2a:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001d2c:	4a42      	ldr	r2, [pc, #264]	@ (8001e38 <main+0x1f0>)
 8001d2e:	2315      	movs	r3, #21
 8001d30:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001d32:	4a41      	ldr	r2, [pc, #260]	@ (8001e38 <main+0x1f0>)
 8001d34:	23c8      	movs	r3, #200	@ 0xc8
 8001d36:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001d38:	4942      	ldr	r1, [pc, #264]	@ (8001e44 <main+0x1fc>)
 8001d3a:	483f      	ldr	r0, [pc, #252]	@ (8001e38 <main+0x1f0>)
 8001d3c:	f7ff fa16 	bl	800116c <Modbus_init>
	//////////////////////

	//////////////////////
	VELO_PROFILE revolute;
	VELO_PROFILE prismatic;
	Trapezoidal_Init(&revolute, M_PI * 2.00f, 1.40f, 4.00f);
 8001d40:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001d44:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 8001d48:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001e48 <main+0x200>
 8001d4c:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8001e4c <main+0x204>
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe0d 	bl	8001970 <Trapezoidal_Init>
	Trapezoidal_Init(&prismatic, 300.00f, 600.00f, 3200.00f);
 8001d56:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d5a:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 8001e50 <main+0x208>
 8001d5e:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001e54 <main+0x20c>
 8001d62:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001e58 <main+0x210>
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe02 	bl	8001970 <Trapezoidal_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//BaseSystem//////////

		uint16_t base_status = REG16(REG_BASE_STATUS);
 8001d6c:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <main+0x1fc>)
 8001d6e:	885b      	ldrh	r3, [r3, #2]
 8001d70:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint16_t Last_base_status = 999;
 8001d74:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001d78:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
		if ((base_status != Last_base_status) || (base_status == 1)) {
 8001d7c:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8001d80:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d103      	bne.n	8001d90 <main+0x148>
 8001d88:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d11e      	bne.n	8001dce <main+0x186>
			Last_base_status = base_status;
 8001d90:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8001d94:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			switch (base_status) {
 8001d98:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d00e      	beq.n	8001dbe <main+0x176>
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	dc10      	bgt.n	8001dc6 <main+0x17e>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d002      	beq.n	8001dae <main+0x166>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d004      	beq.n	8001db6 <main+0x16e>
 8001dac:	e00b      	b.n	8001dc6 <main+0x17e>
			case 1:  // Home
				Mode = 3;
 8001dae:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <main+0x214>)
 8001db0:	2303      	movs	r3, #3
 8001db2:	7013      	strb	r3, [r2, #0]
				break;
 8001db4:	e00b      	b.n	8001dce <main+0x186>

			case 2:  // Run Jog Mode
				Mode = 1;
 8001db6:	4a29      	ldr	r2, [pc, #164]	@ (8001e5c <main+0x214>)
 8001db8:	2301      	movs	r3, #1
 8001dba:	7013      	strb	r3, [r2, #0]
				break;
 8001dbc:	e007      	b.n	8001dce <main+0x186>

			case 8:  // Go To Target
				Mode = 2;
 8001dbe:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <main+0x214>)
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	7013      	strb	r3, [r2, #0]
				break;
 8001dc4:	e003      	b.n	8001dce <main+0x186>

			default: // idea
				Mode = 0;
 8001dc6:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <main+0x214>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	7013      	strb	r3, [r2, #0]
				break;
 8001dcc:	bf00      	nop
			}
		}
		switch (Mode) {
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <main+0x214>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d844      	bhi.n	8001e60 <main+0x218>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <main+0x194>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001ded 	.word	0x08001ded
		case 3:  // Home
			REG16(REG_MOTION_STATUS) = 1;
 8001dec:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <main+0x1fc>)
 8001dee:	2301      	movs	r3, #1
 8001df0:	8413      	strh	r3, [r2, #32]
			break;
 8001df2:	e036      	b.n	8001e62 <main+0x21a>

		case 1:  // Run Jog Mode
			REG16(REG_MOTION_STATUS) = 2;
 8001df4:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <main+0x1fc>)
 8001df6:	2302      	movs	r3, #2
 8001df8:	8413      	strh	r3, [r2, #32]
			break;
 8001dfa:	e032      	b.n	8001e62 <main+0x21a>

		case 2:  // Go To Target
			REG16(REG_MOTION_STATUS) = 8;
 8001dfc:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <main+0x1fc>)
 8001dfe:	2308      	movs	r3, #8
 8001e00:	8413      	strh	r3, [r2, #32]
			break;
 8001e02:	e02e      	b.n	8001e62 <main+0x21a>

		case 0:  // idea
			REG16(REG_MOTION_STATUS) = 0;
 8001e04:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <main+0x1fc>)
 8001e06:	2300      	movs	r3, #0
 8001e08:	8413      	strh	r3, [r2, #32]
			break;
 8001e0a:	e02a      	b.n	8001e62 <main+0x21a>
 8001e0c:	20000280 	.word	0x20000280
 8001e10:	2000034c 	.word	0x2000034c
 8001e14:	20000418 	.word	0x20000418
 8001e18:	200004e4 	.word	0x200004e4
 8001e1c:	200005b0 	.word	0x200005b0
 8001e20:	2000067c 	.word	0x2000067c
 8001e24:	20000748 	.word	0x20000748
 8001e28:	20000b90 	.word	0x20000b90
 8001e2c:	3dcccccd 	.word	0x3dcccccd
 8001e30:	3727c5ac 	.word	0x3727c5ac
 8001e34:	20000bd4 	.word	0x20000bd4
 8001e38:	20000c08 	.word	0x20000c08
 8001e3c:	200008e0 	.word	0x200008e0
 8001e40:	20000814 	.word	0x20000814
 8001e44:	200010e0 	.word	0x200010e0
 8001e48:	3fb33333 	.word	0x3fb33333
 8001e4c:	40c90fdb 	.word	0x40c90fdb
 8001e50:	45480000 	.word	0x45480000
 8001e54:	44160000 	.word	0x44160000
 8001e58:	43960000 	.word	0x43960000
 8001e5c:	20000b7c 	.word	0x20000b7c

		default:
			break;
 8001e60:	bf00      	nop
		}

		if (TargetR_BaseSystem != Last_TargetR_BaseSystem) {
 8001e62:	4bbf      	ldr	r3, [pc, #764]	@ (8002160 <main+0x518>)
 8001e64:	ed93 7a00 	vldr	s14, [r3]
 8001e68:	4bbe      	ldr	r3, [pc, #760]	@ (8002164 <main+0x51c>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d00c      	beq.n	8001e92 <main+0x24a>
			Set_Servo(TargetR_BaseSystem);
 8001e78:	4bb9      	ldr	r3, [pc, #740]	@ (8002160 <main+0x518>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e82:	ee17 0a90 	vmov	r0, s15
 8001e86:	f002 fee3 	bl	8004c50 <Set_Servo>
			Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001e8a:	4bb5      	ldr	r3, [pc, #724]	@ (8002160 <main+0x518>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4bb5      	ldr	r3, [pc, #724]	@ (8002164 <main+0x51c>)
 8001e90:	601a      	str	r2, [r3, #0]
		}
		if (TargetP_BaseSystem != Last_Pen_BaseSystem) {
 8001e92:	4bb5      	ldr	r3, [pc, #724]	@ (8002168 <main+0x520>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9e:	4bb3      	ldr	r3, [pc, #716]	@ (800216c <main+0x524>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	d013      	beq.n	8001ed6 <main+0x28e>
			Set_Servo(TargetP_BaseSystem);
 8001eae:	4baf      	ldr	r3, [pc, #700]	@ (800216c <main+0x524>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb8:	ee17 0a90 	vmov	r0, s15
 8001ebc:	f002 fec8 	bl	8004c50 <Set_Servo>
			Last_Pen_BaseSystem = TargetP_BaseSystem;
 8001ec0:	4baa      	ldr	r3, [pc, #680]	@ (800216c <main+0x524>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eca:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ece:	793b      	ldrb	r3, [r7, #4]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4aa5      	ldr	r2, [pc, #660]	@ (8002168 <main+0x520>)
 8001ed4:	7013      	strb	r3, [r2, #0]
		}
		if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 8001ed6:	4ba6      	ldr	r3, [pc, #664]	@ (8002170 <main+0x528>)
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4ba3      	ldr	r3, [pc, #652]	@ (8002168 <main+0x520>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d008      	beq.n	8001ef4 <main+0x2ac>
			Set_Servo(Pen_BaseSystem);
 8001ee2:	4ba3      	ldr	r3, [pc, #652]	@ (8002170 <main+0x528>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 feb2 	bl	8004c50 <Set_Servo>
			Last_Pen_BaseSystem = Pen_BaseSystem;
 8001eec:	4ba0      	ldr	r3, [pc, #640]	@ (8002170 <main+0x528>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4a9d      	ldr	r2, [pc, #628]	@ (8002168 <main+0x520>)
 8001ef2:	7013      	strb	r3, [r2, #0]
		}
//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8001ef4:	f7ff f9c8 	bl	8001288 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8002174 <main+0x52c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efe:	4b9e      	ldr	r3, [pc, #632]	@ (8002178 <main+0x530>)
 8001f00:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001f02:	4b9e      	ldr	r3, [pc, #632]	@ (800217c <main+0x534>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f08:	4b9d      	ldr	r3, [pc, #628]	@ (8002180 <main+0x538>)
 8001f0a:	601a      	str	r2, [r3, #0]
		//Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001f0c:	f002 fbac 	bl	8004668 <micros>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
		if (currentTime > timestamp) {
 8001f18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001f1c:	4b99      	ldr	r3, [pc, #612]	@ (8002184 <main+0x53c>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	4282      	cmp	r2, r0
 8001f24:	418b      	sbcs	r3, r1
 8001f26:	d212      	bcs.n	8001f4e <main+0x306>
			timestamp = currentTime + 1000;  //us
 8001f28:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001f2c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8001f30:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001f34:	f143 0300 	adc.w	r3, r3, #0
 8001f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f3c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f40:	4b90      	ldr	r3, [pc, #576]	@ (8002184 <main+0x53c>)
 8001f42:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8001f46:	f002 fc73 	bl	8004830 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 8001f4a:	f002 fd59 	bl	8004a00 <Prismatic_PosVel_Update>
		}
		//Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001f4e:	f002 fb8b 	bl	8004668 <micros>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		if (currentTime1 > timestamp1) {
 8001f5a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001f5e:	4b8a      	ldr	r3, [pc, #552]	@ (8002188 <main+0x540>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	4282      	cmp	r2, r0
 8001f66:	418b      	sbcs	r3, r1
 8001f68:	d20d      	bcs.n	8001f86 <main+0x33e>
			timestamp1 = currentTime1 + 10000;  //us
 8001f6a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001f6e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001f72:	1851      	adds	r1, r2, r1
 8001f74:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001f76:	f143 0300 	adc.w	r3, r3, #0
 8001f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f7c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001f80:	4b81      	ldr	r3, [pc, #516]	@ (8002188 <main+0x540>)
 8001f82:	e9c3 0100 	strd	r0, r1, [r3]

		}
		//Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 8001f86:	f002 fb6f 	bl	8004668 <micros>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
		if (currentTime2 > timestamp2) {
 8001f92:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001f96:	4b7d      	ldr	r3, [pc, #500]	@ (800218c <main+0x544>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	4282      	cmp	r2, r0
 8001f9e:	418b      	sbcs	r3, r1
 8001fa0:	d20c      	bcs.n	8001fbc <main+0x374>
			timestamp2 = currentTime2 + 100000;  //us
 8001fa2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8001fa6:	497a      	ldr	r1, [pc, #488]	@ (8002190 <main+0x548>)
 8001fa8:	1851      	adds	r1, r2, r1
 8001faa:	6739      	str	r1, [r7, #112]	@ 0x70
 8001fac:	f143 0300 	adc.w	r3, r3, #0
 8001fb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fb2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001fb6:	4b75      	ldr	r3, [pc, #468]	@ (800218c <main+0x544>)
 8001fb8:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001fbc:	4b75      	ldr	r3, [pc, #468]	@ (8002194 <main+0x54c>)
 8001fbe:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001fc2:	4b75      	ldr	r3, [pc, #468]	@ (8002198 <main+0x550>)
 8001fc4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001fc8:	eef1 7a67 	vneg.f32	s15, s15
 8001fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd0:	f009 fdf4 	bl	800bbbc <cosf>
 8001fd4:	eef0 7a40 	vmov.f32	s15, s0
 8001fd8:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <main+0x554>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8002194 <main+0x54c>)
 8001fe4:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	@ (8002198 <main+0x550>)
 8001fea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	f009 fe27 	bl	800bc44 <sinf>
 8001ff6:	eef0 7a40 	vmov.f32	s15, s0
 8001ffa:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001ffe:	4b68      	ldr	r3, [pc, #416]	@ (80021a0 <main+0x558>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002004:	4b67      	ldr	r3, [pc, #412]	@ (80021a4 <main+0x55c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	461a      	mov	r2, r3
 800200c:	4b66      	ldr	r3, [pc, #408]	@ (80021a8 <main+0x560>)
 800200e:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002010:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <main+0x564>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	461a      	mov	r2, r3
 8002018:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <main+0x560>)
 800201a:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 800201c:	4b61      	ldr	r3, [pc, #388]	@ (80021a4 <main+0x55c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa3a 	bl	800049c <__aeabi_ui2d>
 8002028:	a349      	add	r3, pc, #292	@ (adr r3, 8002150 <main+0x508>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f8f7 	bl	8000220 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
		float RX_temp = map(
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fd63 	bl	8000b04 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	ed9f 2a5b 	vldr	s4, [pc, #364]	@ 80021b0 <main+0x568>
 8002044:	eddf 1a60 	vldr	s3, [pc, #384]	@ 80021c8 <main+0x580>
 8002048:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 80021b4 <main+0x56c>
 800204c:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 80021b8 <main+0x570>
 8002050:	ee00 3a10 	vmov	s0, r3
 8002054:	f002 f9e4 	bl	8004420 <map>
 8002058:	ed87 0a3f 	vstr	s0, [r7, #252]	@ 0xfc
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <main+0x564>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa1a 	bl	800049c <__aeabi_ui2d>
 8002068:	a33b      	add	r3, pc, #236	@ (adr r3, 8002158 <main+0x510>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe f8d7 	bl	8000220 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
		float RY_temp = map(
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fd43 	bl	8000b04 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 80021b0 <main+0x568>
 8002084:	eddf 1a50 	vldr	s3, [pc, #320]	@ 80021c8 <main+0x580>
 8002088:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80021b4 <main+0x56c>
 800208c:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 80021b8 <main+0x570>
 8002090:	ee00 3a10 	vmov	s0, r3
 8002094:	f002 f9c4 	bl	8004420 <map>
 8002098:	ed87 0a3e 	vstr	s0, [r7, #248]	@ 0xf8
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 800209c:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80020a0:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80020a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ac:	db0d      	blt.n	80020ca <main+0x482>
 80020ae:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80020b2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80020b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d804      	bhi.n	80020ca <main+0x482>
			Receiver[0] = 0.00;
 80020c0:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <main+0x574>)
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e01d      	b.n	8002106 <main+0x4be>
		else if (RX_temp > 100)
 80020ca:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80020ce:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80021b0 <main+0x568>
 80020d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	dd03      	ble.n	80020e4 <main+0x49c>
			Receiver[0] = 100.00;
 80020dc:	4a37      	ldr	r2, [pc, #220]	@ (80021bc <main+0x574>)
 80020de:	4b38      	ldr	r3, [pc, #224]	@ (80021c0 <main+0x578>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e010      	b.n	8002106 <main+0x4be>
		else if (RX_temp < -100)
 80020e4:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80020e8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80021c8 <main+0x580>
 80020ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	d503      	bpl.n	80020fe <main+0x4b6>
			Receiver[0] = -100.00;
 80020f6:	4a31      	ldr	r2, [pc, #196]	@ (80021bc <main+0x574>)
 80020f8:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <main+0x57c>)
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e003      	b.n	8002106 <main+0x4be>
		else
			Receiver[0] = RX_temp;
 80020fe:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <main+0x574>)
 8002100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002104:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8002106:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 800210a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800210e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	db0d      	blt.n	8002134 <main+0x4ec>
 8002118:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 800211c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d804      	bhi.n	8002134 <main+0x4ec>
			Receiver[1] = 0.00;
 800212a:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <main+0x574>)
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	e05c      	b.n	80021ee <main+0x5a6>
		else if (RY_temp > 100)
 8002134:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8002138:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80021b0 <main+0x568>
 800213c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	dd42      	ble.n	80021cc <main+0x584>
			Receiver[1] = 100.00;
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <main+0x574>)
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <main+0x578>)
 800214a:	6053      	str	r3, [r2, #4]
 800214c:	e04f      	b.n	80021ee <main+0x5a6>
 800214e:	bf00      	nop
 8002150:	00000000 	.word	0x00000000
 8002154:	40977000 	.word	0x40977000
 8002158:	00000000 	.word	0x00000000
 800215c:	40d21880 	.word	0x40d21880
 8002160:	20000bf4 	.word	0x20000bf4
 8002164:	20000c00 	.word	0x20000c00
 8002168:	20000c04 	.word	0x20000c04
 800216c:	20000bf8 	.word	0x20000bf8
 8002170:	20000bfc 	.word	0x20000bfc
 8002174:	200004e4 	.word	0x200004e4
 8002178:	20000ab8 	.word	0x20000ab8
 800217c:	20000418 	.word	0x20000418
 8002180:	20000abc 	.word	0x20000abc
 8002184:	20001270 	.word	0x20001270
 8002188:	20001278 	.word	0x20001278
 800218c:	20001280 	.word	0x20001280
 8002190:	000186a0 	.word	0x000186a0
 8002194:	20000b00 	.word	0x20000b00
 8002198:	20000ac0 	.word	0x20000ac0
 800219c:	20000b44 	.word	0x20000b44
 80021a0:	20000b48 	.word	0x20000b48
 80021a4:	2000034c 	.word	0x2000034c
 80021a8:	20000a8c 	.word	0x20000a8c
 80021ac:	20000280 	.word	0x20000280
 80021b0:	42c80000 	.word	0x42c80000
 80021b4:	43fa0000 	.word	0x43fa0000
 80021b8:	c3fa0000 	.word	0xc3fa0000
 80021bc:	20000a78 	.word	0x20000a78
 80021c0:	42c80000 	.word	0x42c80000
 80021c4:	c2c80000 	.word	0xc2c80000
 80021c8:	c2c80000 	.word	0xc2c80000
		else if (RY_temp < -100)
 80021cc:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80021d0:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80021c8 <main+0x580>
 80021d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	d503      	bpl.n	80021e6 <main+0x59e>
			Receiver[1] = -100.00;
 80021de:	4ab8      	ldr	r2, [pc, #736]	@ (80024c0 <main+0x878>)
 80021e0:	4bb8      	ldr	r3, [pc, #736]	@ (80024c4 <main+0x87c>)
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	e003      	b.n	80021ee <main+0x5a6>
		else
			Receiver[1] = RY_temp;
 80021e6:	4ab6      	ldr	r2, [pc, #728]	@ (80024c0 <main+0x878>)
 80021e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021ec:	6053      	str	r3, [r2, #4]

		if (pulse_width_us[0] > 4000.00)
 80021ee:	4bb6      	ldr	r3, [pc, #728]	@ (80024c8 <main+0x880>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021f6:	d912      	bls.n	800221e <main+0x5d6>
			pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 80021f8:	4bb3      	ldr	r3, [pc, #716]	@ (80024c8 <main+0x880>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f94d 	bl	800049c <__aeabi_ui2d>
 8002202:	a3ab      	add	r3, pc, #684	@ (adr r3, 80024b0 <main+0x868>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe f80a 	bl	8000220 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc56 	bl	8000ac4 <__aeabi_d2uiz>
 8002218:	4602      	mov	r2, r0
 800221a:	4bab      	ldr	r3, [pc, #684]	@ (80024c8 <main+0x880>)
 800221c:	601a      	str	r2, [r3, #0]
		if (pulse_width_us[1] > 4000.00)
 800221e:	4baa      	ldr	r3, [pc, #680]	@ (80024c8 <main+0x880>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002226:	d912      	bls.n	800224e <main+0x606>
			pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002228:	4ba7      	ldr	r3, [pc, #668]	@ (80024c8 <main+0x880>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f935 	bl	800049c <__aeabi_ui2d>
 8002232:	a39f      	add	r3, pc, #636	@ (adr r3, 80024b0 <main+0x868>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fd fff2 	bl	8000220 <__aeabi_dsub>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc3e 	bl	8000ac4 <__aeabi_d2uiz>
 8002248:	4602      	mov	r2, r0
 800224a:	4b9f      	ldr	r3, [pc, #636]	@ (80024c8 <main+0x880>)
 800224c:	605a      	str	r2, [r3, #4]
		if (pulse_width_us[2] > 4000.00)
 800224e:	4b9e      	ldr	r3, [pc, #632]	@ (80024c8 <main+0x880>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002256:	d912      	bls.n	800227e <main+0x636>
			pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002258:	4b9b      	ldr	r3, [pc, #620]	@ (80024c8 <main+0x880>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f91d 	bl	800049c <__aeabi_ui2d>
 8002262:	a393      	add	r3, pc, #588	@ (adr r3, 80024b0 <main+0x868>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fd ffda 	bl	8000220 <__aeabi_dsub>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc26 	bl	8000ac4 <__aeabi_d2uiz>
 8002278:	4602      	mov	r2, r0
 800227a:	4b93      	ldr	r3, [pc, #588]	@ (80024c8 <main+0x880>)
 800227c:	609a      	str	r2, [r3, #8]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 800227e:	4b92      	ldr	r3, [pc, #584]	@ (80024c8 <main+0x880>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	ee17 0a90 	vmov	r0, s15
 800228e:	f7fe f927 	bl	80004e0 <__aeabi_f2d>
 8002292:	a389      	add	r3, pc, #548	@ (adr r3, 80024b8 <main+0x870>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fd ffc2 	bl	8000220 <__aeabi_dsub>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc2e 	bl	8000b04 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	ed9f 2a88 	vldr	s4, [pc, #544]	@ 80024cc <main+0x884>
 80022ae:	eddf 1a88 	vldr	s3, [pc, #544]	@ 80024d0 <main+0x888>
 80022b2:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 80024d4 <main+0x88c>
 80022b6:	eddf 0a88 	vldr	s1, [pc, #544]	@ 80024d8 <main+0x890>
 80022ba:	ee00 3a10 	vmov	s0, r3
 80022be:	f002 f8af 	bl	8004420 <map>
 80022c2:	eef0 7a40 	vmov.f32	s15, s0
 80022c6:	4b7e      	ldr	r3, [pc, #504]	@ (80024c0 <main+0x878>)
 80022c8:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 80022cc:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <main+0x880>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d8:	ee17 0a90 	vmov	r0, s15
 80022dc:	f7fe f900 	bl	80004e0 <__aeabi_f2d>
 80022e0:	a375      	add	r3, pc, #468	@ (adr r3, 80024b8 <main+0x870>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fd ff9b 	bl	8000220 <__aeabi_dsub>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7fe fc07 	bl	8000b04 <__aeabi_d2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 80024cc <main+0x884>
 80022fc:	eddf 1a74 	vldr	s3, [pc, #464]	@ 80024d0 <main+0x888>
 8002300:	ed9f 1a74 	vldr	s2, [pc, #464]	@ 80024d4 <main+0x88c>
 8002304:	eddf 0a74 	vldr	s1, [pc, #464]	@ 80024d8 <main+0x890>
 8002308:	ee00 3a10 	vmov	s0, r3
 800230c:	f002 f888 	bl	8004420 <map>
 8002310:	eef0 7a40 	vmov.f32	s15, s0
 8002314:	4b6a      	ldr	r3, [pc, #424]	@ (80024c0 <main+0x878>)
 8002316:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 800231a:	4b6b      	ldr	r3, [pc, #428]	@ (80024c8 <main+0x880>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002326:	ee17 0a90 	vmov	r0, s15
 800232a:	f7fe f8d9 	bl	80004e0 <__aeabi_f2d>
 800232e:	a362      	add	r3, pc, #392	@ (adr r3, 80024b8 <main+0x870>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fd ff74 	bl	8000220 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fbe0 	bl	8000b04 <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	ed9f 2a61 	vldr	s4, [pc, #388]	@ 80024cc <main+0x884>
 800234a:	eddf 1a61 	vldr	s3, [pc, #388]	@ 80024d0 <main+0x888>
 800234e:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 80024d4 <main+0x88c>
 8002352:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80024d8 <main+0x890>
 8002356:	ee00 3a10 	vmov	s0, r3
 800235a:	f002 f861 	bl	8004420 <map>
 800235e:	eef0 7a40 	vmov.f32	s15, s0
 8002362:	4b57      	ldr	r3, [pc, #348]	@ (80024c0 <main+0x878>)
 8002364:	edc3 7a04 	vstr	s15, [r3, #16]
//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <main+0x878>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ed9f 2a5b 	vldr	s4, [pc, #364]	@ 80024dc <main+0x894>
 8002372:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 80024e0 <main+0x898>
 8002376:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 80024cc <main+0x884>
 800237a:	eddf 0a55 	vldr	s1, [pc, #340]	@ 80024d0 <main+0x888>
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	f002 f84d 	bl	8004420 <map>
 8002386:	eef0 7a40 	vmov.f32	s15, s0
 800238a:	4b56      	ldr	r3, [pc, #344]	@ (80024e4 <main+0x89c>)
 800238c:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002390:	4b4b      	ldr	r3, [pc, #300]	@ (80024c0 <main+0x878>)
 8002392:	edd3 7a01 	vldr	s15, [r3, #4]
 8002396:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 80024dc <main+0x894>
 800239a:	eddf 1a51 	vldr	s3, [pc, #324]	@ 80024e0 <main+0x898>
 800239e:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 80024cc <main+0x884>
 80023a2:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 80024d0 <main+0x888>
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	f002 f839 	bl	8004420 <map>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	4b4d      	ldr	r3, [pc, #308]	@ (80024e8 <main+0x8a0>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 80023b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023bc:	484b      	ldr	r0, [pc, #300]	@ (80024ec <main+0x8a4>)
 80023be:	f003 fe9d 	bl	80060fc <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10e      	bne.n	80023e6 <main+0x79e>
			Mode = 0;
 80023c8:	4a49      	ldr	r2, [pc, #292]	@ (80024f0 <main+0x8a8>)
 80023ca:	2300      	movs	r3, #0
 80023cc:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 80023ce:	4a49      	ldr	r2, [pc, #292]	@ (80024f4 <main+0x8ac>)
 80023d0:	2301      	movs	r3, #1
 80023d2:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f002 fc3b 	bl	8004c50 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 80023da:	2201      	movs	r2, #1
 80023dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023e0:	4842      	ldr	r0, [pc, #264]	@ (80024ec <main+0x8a4>)
 80023e2:	f003 fea3 	bl	800612c <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 80023e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ea:	4843      	ldr	r0, [pc, #268]	@ (80024f8 <main+0x8b0>)
 80023ec:	f003 fe86 	bl	80060fc <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <main+0x7c0>
			EmergencyState = 0;
 80023f6:	4a3f      	ldr	r2, [pc, #252]	@ (80024f4 <main+0x8ac>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002402:	483a      	ldr	r0, [pc, #232]	@ (80024ec <main+0x8a4>)
 8002404:	f003 fe92 	bl	800612c <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8002408:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800240c:	483a      	ldr	r0, [pc, #232]	@ (80024f8 <main+0x8b0>)
 800240e:	f003 fe75 	bl	80060fc <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d102      	bne.n	800241e <main+0x7d6>
			Pen_Status = 0;
 8002418:	4a38      	ldr	r2, [pc, #224]	@ (80024fc <main+0x8b4>)
 800241a:	2300      	movs	r3, #0
 800241c:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 800241e:	2104      	movs	r1, #4
 8002420:	4835      	ldr	r0, [pc, #212]	@ (80024f8 <main+0x8b0>)
 8002422:	f003 fe6b 	bl	80060fc <HAL_GPIO_ReadPin>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <main+0x7ea>
			Pen_Status = 1;
 800242c:	4a33      	ldr	r2, [pc, #204]	@ (80024fc <main+0x8b4>)
 800242e:	2301      	movs	r3, #1
 8002430:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8002432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243a:	f003 fe5f 	bl	80060fc <HAL_GPIO_ReadPin>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d103      	bne.n	800244c <main+0x804>
			z_temp = 1;
 8002444:	4a2e      	ldr	r2, [pc, #184]	@ (8002500 <main+0x8b8>)
 8002446:	2301      	movs	r3, #1
 8002448:	7013      	strb	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <main+0x81c>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 800244c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002454:	f003 fe52 	bl	80060fc <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <main+0x81c>
			z_temp = 0;
 800245e:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <main+0x8b8>)
 8002460:	2300      	movs	r3, #0
 8002462:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <main+0x8ac>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d103      	bne.n	8002474 <main+0x82c>
			Mode = 0;
 800246c:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <main+0x8a8>)
 800246e:	2300      	movs	r3, #0
 8002470:	7013      	strb	r3, [r2, #0]
 8002472:	e1a6      	b.n	80027c2 <main+0xb7a>
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <main+0x878>)
 8002476:	edd3 7a02 	vldr	s15, [r3, #8]
 800247a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800247e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d53d      	bpl.n	8002504 <main+0x8bc>
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <main+0x878>)
 800248a:	edd3 7a04 	vldr	s15, [r3, #16]
 800248e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d533      	bpl.n	8002504 <main+0x8bc>
			Mode = 0;
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <main+0x8a8>)
 800249e:	2300      	movs	r3, #0
 80024a0:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024a8:	4810      	ldr	r0, [pc, #64]	@ (80024ec <main+0x8a4>)
 80024aa:	f003 fe3f 	bl	800612c <HAL_GPIO_WritePin>
 80024ae:	e188      	b.n	80027c2 <main+0xb7a>
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40b32400 	.word	0x40b32400
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40977000 	.word	0x40977000
 80024c0:	20000a78 	.word	0x20000a78
 80024c4:	c2c80000 	.word	0xc2c80000
 80024c8:	20000aac 	.word	0x20000aac
 80024cc:	42c80000 	.word	0x42c80000
 80024d0:	c2c80000 	.word	0xc2c80000
 80024d4:	43fa0000 	.word	0x43fa0000
 80024d8:	c3fa0000 	.word	0xc3fa0000
 80024dc:	43960000 	.word	0x43960000
 80024e0:	c3960000 	.word	0xc3960000
 80024e4:	20000b3c 	.word	0x20000b3c
 80024e8:	20000b40 	.word	0x20000b40
 80024ec:	48000800 	.word	0x48000800
 80024f0:	20000b7c 	.word	0x20000b7c
 80024f4:	20000b7d 	.word	0x20000b7d
 80024f8:	48000400 	.word	0x48000400
 80024fc:	20000b7f 	.word	0x20000b7f
 8002500:	20000b39 	.word	0x20000b39
		} else if (Receiver[3] > 0 && IsPress == 0) {
 8002504:	4b9e      	ldr	r3, [pc, #632]	@ (8002780 <main+0xb38>)
 8002506:	edd3 7a03 	vldr	s15, [r3, #12]
 800250a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	f340 8153 	ble.w	80027bc <main+0xb74>
 8002516:	4b9b      	ldr	r3, [pc, #620]	@ (8002784 <main+0xb3c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 814e 	bne.w	80027bc <main+0xb74>
			IsPress = 1;
 8002520:	4a98      	ldr	r2, [pc, #608]	@ (8002784 <main+0xb3c>)
 8002522:	2301      	movs	r3, #1
 8002524:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 8002526:	4a98      	ldr	r2, [pc, #608]	@ (8002788 <main+0xb40>)
 8002528:	2300      	movs	r3, #0
 800252a:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800252c:	4b94      	ldr	r3, [pc, #592]	@ (8002780 <main+0xb38>)
 800252e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002532:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253e:	dd2c      	ble.n	800259a <main+0x952>
 8002540:	4b8f      	ldr	r3, [pc, #572]	@ (8002780 <main+0xb38>)
 8002542:	edd3 7a02 	vldr	s15, [r3, #8]
 8002546:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800254a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	d522      	bpl.n	800259a <main+0x952>
 8002554:	4b8a      	ldr	r3, [pc, #552]	@ (8002780 <main+0xb38>)
 8002556:	edd3 7a04 	vldr	s15, [r3, #16]
 800255a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800255e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	d518      	bpl.n	800259a <main+0x952>
				if (Mode != 1) {
 8002568:	4b88      	ldr	r3, [pc, #544]	@ (800278c <main+0xb44>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d003      	beq.n	8002578 <main+0x930>
					Mode = 1;
 8002570:	4a86      	ldr	r2, [pc, #536]	@ (800278c <main+0xb44>)
 8002572:	2301      	movs	r3, #1
 8002574:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 8002576:	e101      	b.n	800277c <main+0xb34>
				} else {
					TargetX = End_x;
 8002578:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <main+0xb48>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <main+0xb4c>)
 800257e:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 8002580:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <main+0xb50>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b85      	ldr	r3, [pc, #532]	@ (800279c <main+0xb54>)
 8002586:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8002588:	4b85      	ldr	r3, [pc, #532]	@ (80027a0 <main+0xb58>)
 800258a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258c:	4b85      	ldr	r3, [pc, #532]	@ (80027a4 <main+0xb5c>)
 800258e:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8002590:	4b85      	ldr	r3, [pc, #532]	@ (80027a8 <main+0xb60>)
 8002592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002594:	4b85      	ldr	r3, [pc, #532]	@ (80027ac <main+0xb64>)
 8002596:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 8002598:	e0f0      	b.n	800277c <main+0xb34>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 800259a:	4b79      	ldr	r3, [pc, #484]	@ (8002780 <main+0xb38>)
 800259c:	edd3 7a02 	vldr	s15, [r3, #8]
 80025a0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80025a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	dd13      	ble.n	80025d6 <main+0x98e>
 80025ae:	4b74      	ldr	r3, [pc, #464]	@ (8002780 <main+0xb38>)
 80025b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80025b4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	d509      	bpl.n	80025d6 <main+0x98e>
				revolute.finished = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				prismatic.finished = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				Mode = 2;
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <main+0xb44>)
 80025d0:	2302      	movs	r3, #2
 80025d2:	7013      	strb	r3, [r2, #0]
 80025d4:	e0d2      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 80025d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002780 <main+0xb38>)
 80025d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80025dc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d517      	bpl.n	800261a <main+0x9d2>
 80025ea:	4b65      	ldr	r3, [pc, #404]	@ (8002780 <main+0xb38>)
 80025ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80025f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd0d      	ble.n	800261a <main+0x9d2>
					&& Receiver[4] < 30) {
 80025fe:	4b60      	ldr	r3, [pc, #384]	@ (8002780 <main+0xb38>)
 8002600:	edd3 7a04 	vldr	s15, [r3, #16]
 8002604:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d503      	bpl.n	800261a <main+0x9d2>
				Mode = 3;
 8002612:	4a5e      	ldr	r2, [pc, #376]	@ (800278c <main+0xb44>)
 8002614:	2303      	movs	r3, #3
 8002616:	7013      	strb	r3, [r2, #0]
 8002618:	e0b0      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 800261a:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <main+0xb38>)
 800261c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002620:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	dd27      	ble.n	800267e <main+0xa36>
 800262e:	4b54      	ldr	r3, [pc, #336]	@ (8002780 <main+0xb38>)
 8002630:	edd3 7a02 	vldr	s15, [r3, #8]
 8002634:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d51d      	bpl.n	800267e <main+0xa36>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002642:	4b4f      	ldr	r3, [pc, #316]	@ (8002780 <main+0xb38>)
 8002644:	edd3 7a04 	vldr	s15, [r3, #16]
 8002648:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800264c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	dd13      	ble.n	800267e <main+0xa36>
 8002656:	4b4a      	ldr	r3, [pc, #296]	@ (8002780 <main+0xb38>)
 8002658:	edd3 7a04 	vldr	s15, [r3, #16]
 800265c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	d509      	bpl.n	800267e <main+0xa36>
				revolute.finished = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				prismatic.finished = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				Mode = 4;
 8002676:	4a45      	ldr	r2, [pc, #276]	@ (800278c <main+0xb44>)
 8002678:	2304      	movs	r3, #4
 800267a:	7013      	strb	r3, [r2, #0]
 800267c:	e07e      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 800267e:	4b40      	ldr	r3, [pc, #256]	@ (8002780 <main+0xb38>)
 8002680:	edd3 7a02 	vldr	s15, [r3, #8]
 8002684:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd17      	ble.n	80026c2 <main+0xa7a>
 8002692:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <main+0xb38>)
 8002694:	edd3 7a04 	vldr	s15, [r3, #16]
 8002698:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	dd0d      	ble.n	80026c2 <main+0xa7a>
					&& Receiver[4] < 30) {
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <main+0xb38>)
 80026a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026ac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	d503      	bpl.n	80026c2 <main+0xa7a>
				Mode = 5;
 80026ba:	4a34      	ldr	r2, [pc, #208]	@ (800278c <main+0xb44>)
 80026bc:	2305      	movs	r3, #5
 80026be:	7013      	strb	r3, [r2, #0]
 80026c0:	e05c      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <main+0xb38>)
 80026c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80026cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d50d      	bpl.n	80026f2 <main+0xaaa>
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <main+0xb38>)
 80026d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026dc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	dd03      	ble.n	80026f2 <main+0xaaa>
				Mode = 6;
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <main+0xb44>)
 80026ec:	2306      	movs	r3, #6
 80026ee:	7013      	strb	r3, [r2, #0]
 80026f0:	e044      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80026f2:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <main+0xb38>)
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80026fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	dd17      	ble.n	8002736 <main+0xaee>
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <main+0xb38>)
 8002708:	edd3 7a02 	vldr	s15, [r3, #8]
 800270c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	d50d      	bpl.n	8002736 <main+0xaee>
					&& Receiver[4] > 30) {
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <main+0xb38>)
 800271c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002720:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	dd03      	ble.n	8002736 <main+0xaee>
				Mode = 7;
 800272e:	4a17      	ldr	r2, [pc, #92]	@ (800278c <main+0xb44>)
 8002730:	2307      	movs	r3, #7
 8002732:	7013      	strb	r3, [r2, #0]
 8002734:	e022      	b.n	800277c <main+0xb34>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <main+0xb38>)
 8002738:	edd3 7a02 	vldr	s15, [r3, #8]
 800273c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	dc00      	bgt.n	800274c <main+0xb04>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800274a:	e03a      	b.n	80027c2 <main+0xb7a>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <main+0xb38>)
 800274e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002752:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	dc00      	bgt.n	8002762 <main+0xb1a>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002760:	e02f      	b.n	80027c2 <main+0xb7a>
				loop_counter = 0;
 8002762:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <main+0xb68>)
 8002764:	2300      	movs	r3, #0
 8002766:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 8002768:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <main+0xb5c>)
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <main+0xb6c>)
 800276c:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 800276e:	4a0f      	ldr	r2, [pc, #60]	@ (80027ac <main+0xb64>)
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <main+0xb70>)
 8002772:	6013      	str	r3, [r2, #0]
				Mode = 8;
 8002774:	4a05      	ldr	r2, [pc, #20]	@ (800278c <main+0xb44>)
 8002776:	2308      	movs	r3, #8
 8002778:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800277a:	e022      	b.n	80027c2 <main+0xb7a>
 800277c:	e021      	b.n	80027c2 <main+0xb7a>
 800277e:	bf00      	nop
 8002780:	20000a78 	.word	0x20000a78
 8002784:	20000b7e 	.word	0x20000b7e
 8002788:	20000bd4 	.word	0x20000bd4
 800278c:	20000b7c 	.word	0x20000b7c
 8002790:	20000b44 	.word	0x20000b44
 8002794:	20000b4c 	.word	0x20000b4c
 8002798:	20000b48 	.word	0x20000b48
 800279c:	20000b50 	.word	0x20000b50
 80027a0:	20000ac0 	.word	0x20000ac0
 80027a4:	20000b54 	.word	0x20000b54
 80027a8:	20000b00 	.word	0x20000b00
 80027ac:	20000b58 	.word	0x20000b58
 80027b0:	20000bf0 	.word	0x20000bf0
 80027b4:	40860a91 	.word	0x40860a91
 80027b8:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 80027bc:	4ac8      	ldr	r2, [pc, #800]	@ (8002ae0 <main+0xe98>)
 80027be:	2300      	movs	r3, #0
 80027c0:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 80027c2:	4bc8      	ldr	r3, [pc, #800]	@ (8002ae4 <main+0xe9c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <main+0xb9c>
			Set_Motor(0, 0);
 80027ca:	ed9f 0ac7 	vldr	s0, [pc, #796]	@ 8002ae8 <main+0xea0>
 80027ce:	2000      	movs	r0, #0
 80027d0:	f002 f9c0 	bl	8004b54 <Set_Motor>
			Set_Motor(1, 0);
 80027d4:	ed9f 0ac4 	vldr	s0, [pc, #784]	@ 8002ae8 <main+0xea0>
 80027d8:	2001      	movs	r0, #1
 80027da:	f002 f9bb 	bl	8004b54 <Set_Motor>
			Set_Servo(0);
 80027de:	2000      	movs	r0, #0
 80027e0:	f002 fa36 	bl	8004c50 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 80027e4:	4bbf      	ldr	r3, [pc, #764]	@ (8002ae4 <main+0xe9c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 80fa 	bne.w	80029e2 <main+0xd9a>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00));
 80027ee:	4bbf      	ldr	r3, [pc, #764]	@ (8002aec <main+0xea4>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80027f8:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80027fc:	ed9f 1abc 	vldr	s2, [pc, #752]	@ 8002af0 <main+0xea8>
 8002800:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8002af4 <main+0xeac>
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f001 fe0a 	bl	8004420 <map>
 800280c:	eef0 7a40 	vmov.f32	s15, s0
			TargetRVel =
 8002810:	4bb9      	ldr	r3, [pc, #740]	@ (8002af8 <main+0xeb0>)
 8002812:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002816:	4bb5      	ldr	r3, [pc, #724]	@ (8002aec <main+0xea4>)
 8002818:	edd3 7a01 	vldr	s15, [r3, #4]
 800281c:	ed9f 2ab7 	vldr	s4, [pc, #732]	@ 8002afc <main+0xeb4>
 8002820:	eddf 1ab7 	vldr	s3, [pc, #732]	@ 8002b00 <main+0xeb8>
 8002824:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8002af0 <main+0xea8>
 8002828:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8002af4 <main+0xeac>
 800282c:	eeb0 0a67 	vmov.f32	s0, s15
 8002830:	f001 fdf6 	bl	8004420 <map>
 8002834:	eef0 7a40 	vmov.f32	s15, s0
 8002838:	4bb2      	ldr	r3, [pc, #712]	@ (8002b04 <main+0xebc>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 800283e:	4bae      	ldr	r3, [pc, #696]	@ (8002af8 <main+0xeb0>)
 8002840:	ed93 7a00 	vldr	s14, [r3]
 8002844:	4bb0      	ldr	r3, [pc, #704]	@ (8002b08 <main+0xec0>)
 8002846:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	4baf      	ldr	r3, [pc, #700]	@ (8002b0c <main+0xec4>)
 8002850:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002854:	4bab      	ldr	r3, [pc, #684]	@ (8002b04 <main+0xebc>)
 8002856:	ed93 7a00 	vldr	s14, [r3]
 800285a:	4bad      	ldr	r3, [pc, #692]	@ (8002b10 <main+0xec8>)
 800285c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	4bab      	ldr	r3, [pc, #684]	@ (8002b14 <main+0xecc>)
 8002866:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 800286a:	f001 fefd 	bl	8004668 <micros>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
			if (currentTimeState1 > timestampState1) {
 8002876:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800287a:	4ba7      	ldr	r3, [pc, #668]	@ (8002b18 <main+0xed0>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	4282      	cmp	r2, r0
 8002882:	418b      	sbcs	r3, r1
 8002884:	d23f      	bcs.n	8002906 <main+0xcbe>
				timestampState1 = currentTimeState1 + 10000;		//us
 8002886:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800288a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800288e:	1851      	adds	r1, r2, r1
 8002890:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002892:	f143 0300 	adc.w	r3, r3, #0
 8002896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002898:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800289c:	4b9e      	ldr	r3, [pc, #632]	@ (8002b18 <main+0xed0>)
 800289e:	e9c3 0100 	strd	r0, r1, [r3]
				R_PWM = PID_Update(R_Velo_Error, 100.00f, 150.00f, 0.00f, 0.01f,
 80028a2:	4b9a      	ldr	r3, [pc, #616]	@ (8002b0c <main+0xec4>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	489c      	ldr	r0, [pc, #624]	@ (8002b1c <main+0xed4>)
 80028aa:	ed9f 3a91 	vldr	s6, [pc, #580]	@ 8002af0 <main+0xea8>
 80028ae:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8002af4 <main+0xeac>
 80028b2:	ed9f 2a9b 	vldr	s4, [pc, #620]	@ 8002b20 <main+0xed8>
 80028b6:	eddf 1a8c 	vldr	s3, [pc, #560]	@ 8002ae8 <main+0xea0>
 80028ba:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 8002b24 <main+0xedc>
 80028be:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8002af0 <main+0xea8>
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	f001 fee9 	bl	800469c <PID_Update>
 80028ca:	eef0 7a40 	vmov.f32	s15, s0
 80028ce:	4b96      	ldr	r3, [pc, #600]	@ (8002b28 <main+0xee0>)
 80028d0:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 80028d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b14 <main+0xecc>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	4894      	ldr	r0, [pc, #592]	@ (8002b2c <main+0xee4>)
 80028dc:	ed9f 3a84 	vldr	s6, [pc, #528]	@ 8002af0 <main+0xea8>
 80028e0:	eddf 2a84 	vldr	s5, [pc, #528]	@ 8002af4 <main+0xeac>
 80028e4:	ed9f 2a8e 	vldr	s4, [pc, #568]	@ 8002b20 <main+0xed8>
 80028e8:	eddf 1a7f 	vldr	s3, [pc, #508]	@ 8002ae8 <main+0xea0>
 80028ec:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 80028f0:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8002b30 <main+0xee8>
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	f001 fed0 	bl	800469c <PID_Update>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	4b8c      	ldr	r3, [pc, #560]	@ (8002b34 <main+0xeec>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
			}

//			R_PWM = Receiver[0];
//			P_PWM = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 8002906:	4b80      	ldr	r3, [pc, #512]	@ (8002b08 <main+0xec0>)
 8002908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fde8 	bl	80004e0 <__aeabi_f2d>
 8002910:	a36f      	add	r3, pc, #444	@ (adr r3, 8002ad0 <main+0xe88>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fe f8ad 	bl	8000a74 <__aeabi_dcmplt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <main+0xcf0>
 8002920:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <main+0xee0>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	dd03      	ble.n	8002938 <main+0xcf0>
				R_PWM = 0;
 8002930:	4a7d      	ldr	r2, [pc, #500]	@ (8002b28 <main+0xee0>)
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 8002938:	4b73      	ldr	r3, [pc, #460]	@ (8002b08 <main+0xec0>)
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdcf 	bl	80004e0 <__aeabi_f2d>
 8002942:	a365      	add	r3, pc, #404	@ (adr r3, 8002ad8 <main+0xe90>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fe f8b2 	bl	8000ab0 <__aeabi_dcmpgt>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <main+0xd22>
 8002952:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <main+0xee0>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d503      	bpl.n	800296a <main+0xd22>
				R_PWM = 0;
 8002962:	4a71      	ldr	r2, [pc, #452]	@ (8002b28 <main+0xee0>)
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 800296a:	4b69      	ldr	r3, [pc, #420]	@ (8002b10 <main+0xec8>)
 800296c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002970:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8002b38 <main+0xef0>
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	dd0b      	ble.n	8002996 <main+0xd4e>
 800297e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b34 <main+0xeec>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	dd03      	ble.n	8002996 <main+0xd4e>
				P_PWM = 0;
 800298e:	4a69      	ldr	r2, [pc, #420]	@ (8002b34 <main+0xeec>)
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8002996:	4b5e      	ldr	r3, [pc, #376]	@ (8002b10 <main+0xec8>)
 8002998:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800299c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80029a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d50b      	bpl.n	80029c2 <main+0xd7a>
 80029aa:	4b62      	ldr	r3, [pc, #392]	@ (8002b34 <main+0xeec>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	d503      	bpl.n	80029c2 <main+0xd7a>
				P_PWM = 0;
 80029ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <main+0xeec>)
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_PWM);
 80029c2:	4b59      	ldr	r3, [pc, #356]	@ (8002b28 <main+0xee0>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	eeb0 0a67 	vmov.f32	s0, s15
 80029cc:	2000      	movs	r0, #0
 80029ce:	f002 f8c1 	bl	8004b54 <Set_Motor>
			Set_Motor(1, P_PWM);
 80029d2:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <main+0xeec>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	2001      	movs	r0, #1
 80029de:	f002 f8b9 	bl	8004b54 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 80029e2:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <main+0xe9c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 816f 	bne.w	8002cca <main+0x1082>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <main+0xef4>)
 80029ee:	ed93 7a00 	vldr	s14, [r3]
 80029f2:	4b45      	ldr	r3, [pc, #276]	@ (8002b08 <main+0xec0>)
 80029f4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80029f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fc:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <main+0xef8>)
 80029fe:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 8002a02:	4b4e      	ldr	r3, [pc, #312]	@ (8002b3c <main+0xef4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_PWM = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b44 <main+0xefc>)
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <main+0xec8>)
 8002a12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b48 <main+0xf00>)
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 8002a20:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <main+0xefc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Pos_Error);

			//Call every 0.01 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 8002a28:	f001 fe1e 	bl	8004668 <micros>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			if (currentTimeState2 > timestampState2) {
 8002a34:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8002a38:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <main+0xf04>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	4282      	cmp	r2, r0
 8002a40:	418b      	sbcs	r3, r1
 8002a42:	f080 80f0 	bcs.w	8002c26 <main+0xfde>
				timestampState2 = currentTimeState2 + 10000;		//us
 8002a46:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8002a4a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002a4e:	1851      	adds	r1, r2, r1
 8002a50:	6639      	str	r1, [r7, #96]	@ 0x60
 8002a52:	f143 0300 	adc.w	r3, r3, #0
 8002a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <main+0xf04>)
 8002a5e:	e9c3 0100 	strd	r0, r1, [r3]

//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0) {
 8002a62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d176      	bne.n	8002b58 <main+0xf10>
					revolute.current_position = Revolute_QEIdata.RadPosition;
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <main+0xec0>)
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
					Trapezoidal_Update(&revolute, 0.01);
 8002a72:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002a76:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002b20 <main+0xed8>
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe ffee 	bl	8001a5c <Trapezoidal_Update>
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 8002a80:	4b21      	ldr	r3, [pc, #132]	@ (8002b08 <main+0xec0>)
 8002a82:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
							- revolute.current_velocity) * -1;
 8002a86:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8002a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8e:	eef1 7a67 	vneg.f32	s15, s15
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <main+0xec4>)
 8002a94:	edc3 7a00 	vstr	s15, [r3]
					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f,
 8002a98:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <main+0xec4>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	481f      	ldr	r0, [pc, #124]	@ (8002b1c <main+0xed4>)
 8002aa0:	ed9f 3a13 	vldr	s6, [pc, #76]	@ 8002af0 <main+0xea8>
 8002aa4:	eddf 2a13 	vldr	s5, [pc, #76]	@ 8002af4 <main+0xeac>
 8002aa8:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 8002b20 <main+0xed8>
 8002aac:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8002ae8 <main+0xea0>
 8002ab0:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8002b50 <main+0xf08>
 8002ab4:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8002b54 <main+0xf0c>
 8002ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8002abc:	f001 fdee 	bl	800469c <PID_Update>
 8002ac0:	eef0 7a40 	vmov.f32	s15, s0
 8002ac4:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <main+0xee0>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
 8002aca:	e05e      	b.n	8002b8a <main+0xf42>
 8002acc:	f3af 8000 	nop.w
 8002ad0:	1e8e6080 	.word	0x1e8e6080
 8002ad4:	bffeb7bf 	.word	0xbffeb7bf
 8002ad8:	bfb15b57 	.word	0xbfb15b57
 8002adc:	40143eec 	.word	0x40143eec
 8002ae0:	20000b7e 	.word	0x20000b7e
 8002ae4:	20000b7c 	.word	0x20000b7c
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	20000a78 	.word	0x20000a78
 8002af0:	42c80000 	.word	0x42c80000
 8002af4:	c2c80000 	.word	0xc2c80000
 8002af8:	20000b5c 	.word	0x20000b5c
 8002afc:	43fa0000 	.word	0x43fa0000
 8002b00:	c3fa0000 	.word	0xc3fa0000
 8002b04:	20000b60 	.word	0x20000b60
 8002b08:	20000ac0 	.word	0x20000ac0
 8002b0c:	20000b6c 	.word	0x20000b6c
 8002b10:	20000b00 	.word	0x20000b00
 8002b14:	20000b70 	.word	0x20000b70
 8002b18:	20001288 	.word	0x20001288
 8002b1c:	20000bc4 	.word	0x20000bc4
 8002b20:	3c23d70a 	.word	0x3c23d70a
 8002b24:	43160000 	.word	0x43160000
 8002b28:	20000b74 	.word	0x20000b74
 8002b2c:	20000bcc 	.word	0x20000bcc
 8002b30:	3e4ccccd 	.word	0x3e4ccccd
 8002b34:	20000b78 	.word	0x20000b78
 8002b38:	43988000 	.word	0x43988000
 8002b3c:	20000b54 	.word	0x20000b54
 8002b40:	20000b64 	.word	0x20000b64
 8002b44:	20000b58 	.word	0x20000b58
 8002b48:	20000b68 	.word	0x20000b68
 8002b4c:	20001290 	.word	0x20001290
 8002b50:	3dcccccd 	.word	0x3dcccccd
 8002b54:	428ed70a 	.word	0x428ed70a
							0.01f, -100.0f, 100.0f, &pid_r_v);
				} else {
					R_PWM = PID_Update(R_Pos_Error, 16.00f, 32.00f, 8.00f,
 8002b58:	4bc7      	ldr	r3, [pc, #796]	@ (8002e78 <main+0x1230>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	48c7      	ldr	r0, [pc, #796]	@ (8002e7c <main+0x1234>)
 8002b60:	ed9f 3ac7 	vldr	s6, [pc, #796]	@ 8002e80 <main+0x1238>
 8002b64:	eddf 2ac7 	vldr	s5, [pc, #796]	@ 8002e84 <main+0x123c>
 8002b68:	ed9f 2ac7 	vldr	s4, [pc, #796]	@ 8002e88 <main+0x1240>
 8002b6c:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002b70:	ed9f 1ac6 	vldr	s2, [pc, #792]	@ 8002e8c <main+0x1244>
 8002b74:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	f001 fd8e 	bl	800469c <PID_Update>
 8002b80:	eef0 7a40 	vmov.f32	s15, s0
 8002b84:	4bc2      	ldr	r3, [pc, #776]	@ (8002e90 <main+0x1248>)
 8002b86:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_r);
				}

				if (prismatic.finished == 0) {
 8002b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d130      	bne.n	8002bf4 <main+0xfac>
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 8002b92:	4bc0      	ldr	r3, [pc, #768]	@ (8002e94 <main+0x124c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
					Trapezoidal_Update(&prismatic, 0.01);
 8002b9a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002b9e:	ed9f 0aba 	vldr	s0, [pc, #744]	@ 8002e88 <main+0x1240>
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ff5a 	bl	8001a5c <Trapezoidal_Update>
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 8002ba8:	4bba      	ldr	r3, [pc, #744]	@ (8002e94 <main+0x124c>)
 8002baa:	ed93 7a08 	vldr	s14, [r3, #32]
							- prismatic.current_velocity) * -1;
 8002bae:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb6:	eef1 7a67 	vneg.f32	s15, s15
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 8002bba:	4bb7      	ldr	r3, [pc, #732]	@ (8002e98 <main+0x1250>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002bc0:	4bb5      	ldr	r3, [pc, #724]	@ (8002e98 <main+0x1250>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	48b5      	ldr	r0, [pc, #724]	@ (8002e9c <main+0x1254>)
 8002bc8:	ed9f 3aad 	vldr	s6, [pc, #692]	@ 8002e80 <main+0x1238>
 8002bcc:	eddf 2aad 	vldr	s5, [pc, #692]	@ 8002e84 <main+0x123c>
 8002bd0:	ed9f 2aad 	vldr	s4, [pc, #692]	@ 8002e88 <main+0x1240>
 8002bd4:	eddf 1ac7 	vldr	s3, [pc, #796]	@ 8002ef4 <main+0x12ac>
 8002bd8:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 8002bdc:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8002ea0 <main+0x1258>
 8002be0:	eeb0 0a67 	vmov.f32	s0, s15
 8002be4:	f001 fd5a 	bl	800469c <PID_Update>
 8002be8:	eef0 7a40 	vmov.f32	s15, s0
 8002bec:	4bad      	ldr	r3, [pc, #692]	@ (8002ea4 <main+0x125c>)
 8002bee:	edc3 7a00 	vstr	s15, [r3]
 8002bf2:	e018      	b.n	8002c26 <main+0xfde>
							-100.0f, 100.0f, &pid_p_v);
				} else {
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 8002bf4:	4bac      	ldr	r3, [pc, #688]	@ (8002ea8 <main+0x1260>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	48ac      	ldr	r0, [pc, #688]	@ (8002eac <main+0x1264>)
 8002bfc:	ed9f 3aa0 	vldr	s6, [pc, #640]	@ 8002e80 <main+0x1238>
 8002c00:	eddf 2aa0 	vldr	s5, [pc, #640]	@ 8002e84 <main+0x123c>
 8002c04:	ed9f 2aa0 	vldr	s4, [pc, #640]	@ 8002e88 <main+0x1240>
 8002c08:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8002eb0 <main+0x1268>
 8002c0c:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8002eb4 <main+0x126c>
 8002c10:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8002eb8 <main+0x1270>
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f001 fd40 	bl	800469c <PID_Update>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea4 <main+0x125c>)
 8002c22:	edc3 7a00 	vstr	s15, [r3]
							-100.0f, 100.0f, &pid_p);
				}
			}

			Set_Motor(0, R_PWM);
 8002c26:	4b9a      	ldr	r3, [pc, #616]	@ (8002e90 <main+0x1248>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c30:	2000      	movs	r0, #0
 8002c32:	f001 ff8f 	bl	8004b54 <Set_Motor>
			Set_Motor(1, P_PWM);
 8002c36:	4b9b      	ldr	r3, [pc, #620]	@ (8002ea4 <main+0x125c>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	2001      	movs	r0, #1
 8002c42:	f001 ff87 	bl	8004b54 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002c46:	4b8c      	ldr	r3, [pc, #560]	@ (8002e78 <main+0x1230>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002c50:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002ebc <main+0x1274>
 8002c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d52c      	bpl.n	8002cb8 <main+0x1070>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002c5e:	4b92      	ldr	r3, [pc, #584]	@ (8002ea8 <main+0x1260>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	eef0 7ae7 	vabs.f32	s15, s15
 8002c68:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002ea0 <main+0x1258>
 8002c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d520      	bpl.n	8002cb8 <main+0x1070>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8002c76:	4b92      	ldr	r3, [pc, #584]	@ (8002ec0 <main+0x1278>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	d107      	bne.n	8002c90 <main+0x1048>
					lock_timer_us = micros(); /* start timing */
 8002c80:	f001 fcf2 	bl	8004668 <micros>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	498d      	ldr	r1, [pc, #564]	@ (8002ec0 <main+0x1278>)
 8002c8a:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8002c8e:	e01b      	b.n	8002cc8 <main+0x1080>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002c90:	f001 fcea 	bl	8004668 <micros>
 8002c94:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <main+0x1278>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	1a84      	subs	r4, r0, r2
 8002c9c:	eb61 0503 	sbc.w	r5, r1, r3
 8002ca0:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <main+0x127c>)
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	f175 0300 	sbcs.w	r3, r5, #0
 8002ca8:	d30e      	bcc.n	8002cc8 <main+0x1080>
					Set_Servo(1);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f001 ffd0 	bl	8004c50 <Set_Servo>
					Mode = 1;
 8002cb0:	4a85      	ldr	r2, [pc, #532]	@ (8002ec8 <main+0x1280>)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 8002cb6:	e007      	b.n	8002cc8 <main+0x1080>
				}
			} else {
				lock_timer_us = 0;
 8002cb8:	4981      	ldr	r1, [pc, #516]	@ (8002ec0 <main+0x1278>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9c1 2300 	strd	r2, r3, [r1]
 8002cc6:	e000      	b.n	8002cca <main+0x1082>
				if (lock_timer_us == 0)
 8002cc8:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 8002cca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec8 <main+0x1280>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	f040 828f 	bne.w	80031f2 <main+0x15aa>
			switch (calibState) {
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <main+0x1284>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	f200 828a 	bhi.w	80031f2 <main+0x15aa>
 8002cde:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <main+0x109c>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d19 	.word	0x08002d19
 8002ce8:	08002d4f 	.word	0x08002d4f
 8002cec:	08002d95 	.word	0x08002d95
 8002cf0:	08002ddf 	.word	0x08002ddf
 8002cf4:	08002e29 	.word	0x08002e29
 8002cf8:	08002ef9 	.word	0x08002ef9
 8002cfc:	08002f51 	.word	0x08002f51
 8002d00:	08002f91 	.word	0x08002f91
 8002d04:	08002fef 	.word	0x08002fef
 8002d08:	0800305b 	.word	0x0800305b
 8002d0c:	080030c7 	.word	0x080030c7
 8002d10:	08003137 	.word	0x08003137
 8002d14:	08003179 	.word	0x08003179
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002d18:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8002ef4 <main+0x12ac>
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f001 ff19 	bl	8004b54 <Set_Motor>
				Set_Motor(1, 0);
 8002d22:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002ef4 <main+0x12ac>
 8002d26:	2001      	movs	r0, #1
 8002d28:	f001 ff14 	bl	8004b54 <Set_Motor>
				P_Limit = 0;
 8002d2c:	4a68      	ldr	r2, [pc, #416]	@ (8002ed0 <main+0x1288>)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002d32:	4a68      	ldr	r2, [pc, #416]	@ (8002ed4 <main+0x128c>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002d38:	4a64      	ldr	r2, [pc, #400]	@ (8002ecc <main+0x1284>)
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002d3e:	f001 fc93 	bl	8004668 <micros>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4964      	ldr	r1, [pc, #400]	@ (8002ed8 <main+0x1290>)
 8002d48:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002d4c:	e251      	b.n	80031f2 <main+0x15aa>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <main+0x1294>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8002ee0 <main+0x1298>
 8002d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	dd06      	ble.n	8002d70 <main+0x1128>
					Cal_Side = 1;
 8002d62:	4a60      	ldr	r2, [pc, #384]	@ (8002ee4 <main+0x129c>)
 8002d64:	2301      	movs	r3, #1
 8002d66:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002d68:	4a58      	ldr	r2, [pc, #352]	@ (8002ecc <main+0x1284>)
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002d6e:	e240      	b.n	80031f2 <main+0x15aa>
				} else if (Receiver[0] < -80) {
 8002d70:	4b5a      	ldr	r3, [pc, #360]	@ (8002edc <main+0x1294>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002ee8 <main+0x12a0>
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	d400      	bmi.n	8002d86 <main+0x113e>
				break;
 8002d84:	e235      	b.n	80031f2 <main+0x15aa>
					Cal_Side = 2;
 8002d86:	4a57      	ldr	r2, [pc, #348]	@ (8002ee4 <main+0x129c>)
 8002d88:	2302      	movs	r3, #2
 8002d8a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ecc <main+0x1284>)
 8002d8e:	2302      	movs	r3, #2
 8002d90:	7013      	strb	r3, [r2, #0]
				break;
 8002d92:	e22e      	b.n	80031f2 <main+0x15aa>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002d94:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f001 fedb 	bl	8004b54 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002d9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002da2:	4852      	ldr	r0, [pc, #328]	@ (8002eec <main+0x12a4>)
 8002da4:	f003 f9aa 	bl	80060fc <HAL_GPIO_ReadPin>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d004      	beq.n	8002db8 <main+0x1170>
 8002dae:	4b48      	ldr	r3, [pc, #288]	@ (8002ed0 <main+0x1288>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 81f3 	beq.w	800319e <main+0x1556>
					Set_Motor(1, 0);
 8002db8:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002ef4 <main+0x12ac>
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f001 fec9 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 8002dc2:	f001 fc51 	bl	8004668 <micros>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4943      	ldr	r1, [pc, #268]	@ (8002ed8 <main+0x1290>)
 8002dcc:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ed0 <main+0x1288>)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8002dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8002ecc <main+0x1284>)
 8002dd8:	2303      	movs	r3, #3
 8002dda:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002ddc:	e1df      	b.n	800319e <main+0x1556>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002dde:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002ef4 <main+0x12ac>
 8002de2:	2001      	movs	r0, #1
 8002de4:	f001 feb6 	bl	8004b54 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002de8:	f001 fc3e 	bl	8004668 <micros>
 8002dec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <main+0x1290>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	ebb0 0802 	subs.w	r8, r0, r2
 8002df6:	eb61 0903 	sbc.w	r9, r1, r3
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <main+0x12a8>)
 8002dfc:	4598      	cmp	r8, r3
 8002dfe:	f179 0300 	sbcs.w	r3, r9, #0
 8002e02:	d311      	bcc.n	8002e28 <main+0x11e0>
					Set_Motor(1, 15);
 8002e04:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f001 fea3 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 8002e0e:	f001 fc2b 	bl	8004668 <micros>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4930      	ldr	r1, [pc, #192]	@ (8002ed8 <main+0x1290>)
 8002e18:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed0 <main+0x1288>)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002e22:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <main+0x1284>)
 8002e24:	2304      	movs	r3, #4
 8002e26:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 8002e28:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f001 fe91 	bl	8004b54 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002e32:	f001 fc19 	bl	8004668 <micros>
 8002e36:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <main+0x1290>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	ebb0 0a02 	subs.w	sl, r0, r2
 8002e40:	eb61 0b03 	sbc.w	fp, r1, r3
 8002e44:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <main+0x12a8>)
 8002e46:	459a      	cmp	sl, r3
 8002e48:	f17b 0300 	sbcs.w	r3, fp, #0
 8002e4c:	f0c0 81a9 	bcc.w	80031a2 <main+0x155a>
					Set_Motor(1, 0);
 8002e50:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002ef4 <main+0x12ac>
 8002e54:	2001      	movs	r0, #1
 8002e56:	f001 fe7d 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 8002e5a:	f001 fc05 	bl	8004668 <micros>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	491d      	ldr	r1, [pc, #116]	@ (8002ed8 <main+0x1290>)
 8002e64:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002e68:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <main+0x1288>)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002e6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <main+0x1284>)
 8002e70:	2305      	movs	r3, #5
 8002e72:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002e74:	e195      	b.n	80031a2 <main+0x155a>
 8002e76:	bf00      	nop
 8002e78:	20000b64 	.word	0x20000b64
 8002e7c:	20000bb4 	.word	0x20000bb4
 8002e80:	42c80000 	.word	0x42c80000
 8002e84:	c2c80000 	.word	0xc2c80000
 8002e88:	3c23d70a 	.word	0x3c23d70a
 8002e8c:	42000000 	.word	0x42000000
 8002e90:	20000b74 	.word	0x20000b74
 8002e94:	20000b00 	.word	0x20000b00
 8002e98:	20000b70 	.word	0x20000b70
 8002e9c:	20000bcc 	.word	0x20000bcc
 8002ea0:	3e4ccccd 	.word	0x3e4ccccd
 8002ea4:	20000b78 	.word	0x20000b78
 8002ea8:	20000b68 	.word	0x20000b68
 8002eac:	20000bbc 	.word	0x20000bbc
 8002eb0:	3e19999a 	.word	0x3e19999a
 8002eb4:	3f99999a 	.word	0x3f99999a
 8002eb8:	3eaa7efa 	.word	0x3eaa7efa
 8002ebc:	3d0b4396 	.word	0x3d0b4396
 8002ec0:	20000b88 	.word	0x20000b88
 8002ec4:	000f4240 	.word	0x000f4240
 8002ec8:	20000b7c 	.word	0x20000b7c
 8002ecc:	20000bd4 	.word	0x20000bd4
 8002ed0:	20000b81 	.word	0x20000b81
 8002ed4:	20000b82 	.word	0x20000b82
 8002ed8:	20000bd8 	.word	0x20000bd8
 8002edc:	20000a78 	.word	0x20000a78
 8002ee0:	42a00000 	.word	0x42a00000
 8002ee4:	20000be0 	.word	0x20000be0
 8002ee8:	c2a00000 	.word	0xc2a00000
 8002eec:	48000400 	.word	0x48000400
 8002ef0:	000186a1 	.word	0x000186a1
 8002ef4:	00000000 	.word	0x00000000

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002ef8:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002ef4 <main+0x12ac>
 8002efc:	2001      	movs	r0, #1
 8002efe:	f001 fe29 	bl	8004b54 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002f02:	f001 fbb1 	bl	8004668 <micros>
 8002f06:	4bae      	ldr	r3, [pc, #696]	@ (80031c0 <main+0x1578>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	1a86      	subs	r6, r0, r2
 8002f0e:	65be      	str	r6, [r7, #88]	@ 0x58
 8002f10:	eb61 0303 	sbc.w	r3, r1, r3
 8002f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f16:	4bab      	ldr	r3, [pc, #684]	@ (80031c4 <main+0x157c>)
 8002f18:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	f173 0300 	sbcs.w	r3, r3, #0
 8002f26:	f0c0 813e 	bcc.w	80031a6 <main+0x155e>
					Set_Motor(1, -5);
 8002f2a:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f001 fe10 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 8002f34:	f001 fb98 	bl	8004668 <micros>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	49a0      	ldr	r1, [pc, #640]	@ (80031c0 <main+0x1578>)
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002f42:	4aa1      	ldr	r2, [pc, #644]	@ (80031c8 <main+0x1580>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8002f48:	4aa0      	ldr	r2, [pc, #640]	@ (80031cc <main+0x1584>)
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002f4e:	e12a      	b.n	80031a6 <main+0x155e>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002f50:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002f54:	2001      	movs	r0, #1
 8002f56:	f001 fdfd 	bl	8004b54 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f5e:	489c      	ldr	r0, [pc, #624]	@ (80031d0 <main+0x1588>)
 8002f60:	f003 f8cc 	bl	80060fc <HAL_GPIO_ReadPin>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d004      	beq.n	8002f74 <main+0x132c>
 8002f6a:	4b97      	ldr	r3, [pc, #604]	@ (80031c8 <main+0x1580>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 811b 	beq.w	80031aa <main+0x1562>
					Set_Motor(1, 0);
 8002f74:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 80031d4 <main+0x158c>
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f001 fdeb 	bl	8004b54 <Set_Motor>
					Reset_P();
 8002f7e:	f001 fea1 	bl	8004cc4 <Reset_P>
					P_Limit = 0;
 8002f82:	4a91      	ldr	r2, [pc, #580]	@ (80031c8 <main+0x1580>)
 8002f84:	2300      	movs	r3, #0
 8002f86:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8002f88:	4a90      	ldr	r2, [pc, #576]	@ (80031cc <main+0x1584>)
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002f8e:	e10c      	b.n	80031aa <main+0x1562>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002f90:	4b91      	ldr	r3, [pc, #580]	@ (80031d8 <main+0x1590>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <main+0x135c>
					Set_Motor(0, -30);
 8002f98:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f001 fdd9 	bl	8004b54 <Set_Motor>
 8002fa2:	e004      	b.n	8002fae <main+0x1366>
				else
					Set_Motor(0, 30);
 8002fa4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f001 fdd3 	bl	8004b54 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fb2:	4887      	ldr	r0, [pc, #540]	@ (80031d0 <main+0x1588>)
 8002fb4:	f003 f8a2 	bl	80060fc <HAL_GPIO_ReadPin>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d004      	beq.n	8002fc8 <main+0x1380>
 8002fbe:	4b87      	ldr	r3, [pc, #540]	@ (80031dc <main+0x1594>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80f3 	beq.w	80031ae <main+0x1566>
					Set_Motor(0, 0);
 8002fc8:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 80031d4 <main+0x158c>
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f001 fdc1 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 8002fd2:	f001 fb49 	bl	8004668 <micros>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4979      	ldr	r1, [pc, #484]	@ (80031c0 <main+0x1578>)
 8002fdc:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002fe0:	4a7e      	ldr	r2, [pc, #504]	@ (80031dc <main+0x1594>)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002fe6:	4a79      	ldr	r2, [pc, #484]	@ (80031cc <main+0x1584>)
 8002fe8:	2308      	movs	r3, #8
 8002fea:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002fec:	e0df      	b.n	80031ae <main+0x1566>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002fee:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80031d4 <main+0x158c>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f001 fdae 	bl	8004b54 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002ff8:	f001 fb36 	bl	8004668 <micros>
 8002ffc:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <main+0x1578>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	1a86      	subs	r6, r0, r2
 8003004:	653e      	str	r6, [r7, #80]	@ 0x50
 8003006:	eb61 0303 	sbc.w	r3, r1, r3
 800300a:	657b      	str	r3, [r7, #84]	@ 0x54
 800300c:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <main+0x157c>)
 800300e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003012:	4602      	mov	r2, r0
 8003014:	429a      	cmp	r2, r3
 8003016:	460b      	mov	r3, r1
 8003018:	f173 0300 	sbcs.w	r3, r3, #0
 800301c:	f0c0 80c9 	bcc.w	80031b2 <main+0x156a>
					if (Cal_Side == 1)
 8003020:	4b6d      	ldr	r3, [pc, #436]	@ (80031d8 <main+0x1590>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <main+0x13ec>
						Set_Motor(0, 30);
 8003028:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800302c:	2000      	movs	r0, #0
 800302e:	f001 fd91 	bl	8004b54 <Set_Motor>
 8003032:	e004      	b.n	800303e <main+0x13f6>
					else
						Set_Motor(0, -30);
 8003034:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8003038:	2000      	movs	r0, #0
 800303a:	f001 fd8b 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 800303e:	f001 fb13 	bl	8004668 <micros>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	495e      	ldr	r1, [pc, #376]	@ (80031c0 <main+0x1578>)
 8003048:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800304c:	4a63      	ldr	r2, [pc, #396]	@ (80031dc <main+0x1594>)
 800304e:	2300      	movs	r3, #0
 8003050:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8003052:	4a5e      	ldr	r2, [pc, #376]	@ (80031cc <main+0x1584>)
 8003054:	2309      	movs	r3, #9
 8003056:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003058:	e0ab      	b.n	80031b2 <main+0x156a>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800305a:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <main+0x1590>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <main+0x1426>
					Set_Motor(0, 30);
 8003062:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003066:	2000      	movs	r0, #0
 8003068:	f001 fd74 	bl	8004b54 <Set_Motor>
 800306c:	e004      	b.n	8003078 <main+0x1430>
				else
					Set_Motor(0, -30);
 800306e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8003072:	2000      	movs	r0, #0
 8003074:	f001 fd6e 	bl	8004b54 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8003078:	f001 faf6 	bl	8004668 <micros>
 800307c:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <main+0x1578>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	1a86      	subs	r6, r0, r2
 8003084:	64be      	str	r6, [r7, #72]	@ 0x48
 8003086:	eb61 0303 	sbc.w	r3, r1, r3
 800308a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800308c:	4b54      	ldr	r3, [pc, #336]	@ (80031e0 <main+0x1598>)
 800308e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003092:	4602      	mov	r2, r0
 8003094:	429a      	cmp	r2, r3
 8003096:	460b      	mov	r3, r1
 8003098:	f173 0300 	sbcs.w	r3, r3, #0
 800309c:	f0c0 808b 	bcc.w	80031b6 <main+0x156e>
					Set_Motor(0, 0);
 80030a0:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80031d4 <main+0x158c>
 80030a4:	2000      	movs	r0, #0
 80030a6:	f001 fd55 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 80030aa:	f001 fadd 	bl	8004668 <micros>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4943      	ldr	r1, [pc, #268]	@ (80031c0 <main+0x1578>)
 80030b4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80030b8:	4a48      	ldr	r2, [pc, #288]	@ (80031dc <main+0x1594>)
 80030ba:	2300      	movs	r3, #0
 80030bc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80030be:	4a43      	ldr	r2, [pc, #268]	@ (80031cc <main+0x1584>)
 80030c0:	230a      	movs	r3, #10
 80030c2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80030c4:	e077      	b.n	80031b6 <main+0x156e>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 80030c6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 80031d4 <main+0x158c>
 80030ca:	2000      	movs	r0, #0
 80030cc:	f001 fd42 	bl	8004b54 <Set_Motor>
				Z_index_R = 0;
 80030d0:	4a44      	ldr	r2, [pc, #272]	@ (80031e4 <main+0x159c>)
 80030d2:	2300      	movs	r3, #0
 80030d4:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 80030d6:	f001 fac7 	bl	8004668 <micros>
 80030da:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <main+0x1578>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	1a86      	subs	r6, r0, r2
 80030e2:	643e      	str	r6, [r7, #64]	@ 0x40
 80030e4:	eb61 0303 	sbc.w	r3, r1, r3
 80030e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ea:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <main+0x157c>)
 80030ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80030f0:	4602      	mov	r2, r0
 80030f2:	429a      	cmp	r2, r3
 80030f4:	460b      	mov	r3, r1
 80030f6:	f173 0300 	sbcs.w	r3, r3, #0
 80030fa:	d35e      	bcc.n	80031ba <main+0x1572>
					if (Cal_Side == 1)
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <main+0x1590>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <main+0x14c8>
						Set_Motor(0, -25);
 8003104:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8003108:	2000      	movs	r0, #0
 800310a:	f001 fd23 	bl	8004b54 <Set_Motor>
 800310e:	e004      	b.n	800311a <main+0x14d2>
					else
						Set_Motor(0, 25);
 8003110:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003114:	2000      	movs	r0, #0
 8003116:	f001 fd1d 	bl	8004b54 <Set_Motor>
					calib_timer = micros();
 800311a:	f001 faa5 	bl	8004668 <micros>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4927      	ldr	r1, [pc, #156]	@ (80031c0 <main+0x1578>)
 8003124:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8003128:	4a2c      	ldr	r2, [pc, #176]	@ (80031dc <main+0x1594>)
 800312a:	2300      	movs	r3, #0
 800312c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <main+0x1584>)
 8003130:	230b      	movs	r3, #11
 8003132:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003134:	e041      	b.n	80031ba <main+0x1572>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8003136:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <main+0x1590>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d105      	bne.n	800314a <main+0x1502>
					Set_Motor(0, -25);
 800313e:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8003142:	2000      	movs	r0, #0
 8003144:	f001 fd06 	bl	8004b54 <Set_Motor>
 8003148:	e004      	b.n	8003154 <main+0x150c>
				else
					Set_Motor(0, 25);
 800314a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800314e:	2000      	movs	r0, #0
 8003150:	f001 fd00 	bl	8004b54 <Set_Motor>

//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 8003154:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <main+0x159c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d049      	beq.n	80031f0 <main+0x15a8>
					Set_Motor(0, 0);
 800315c:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80031d4 <main+0x158c>
 8003160:	2000      	movs	r0, #0
 8003162:	f001 fcf7 	bl	8004b54 <Set_Motor>
					Reset_R();
 8003166:	f001 fd9d 	bl	8004ca4 <Reset_R>
					R_Limit = 0;
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <main+0x1594>)
 800316c:	2300      	movs	r3, #0
 800316e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8003170:	4a16      	ldr	r2, [pc, #88]	@ (80031cc <main+0x1584>)
 8003172:	230c      	movs	r3, #12
 8003174:	7013      	strb	r3, [r2, #0]
				}
				break;
 8003176:	e03b      	b.n	80031f0 <main+0x15a8>

			case CALIB_DONE:
				Cal_Side = 0;
 8003178:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <main+0x1590>)
 800317a:	2300      	movs	r3, #0
 800317c:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 800317e:	4a1a      	ldr	r2, [pc, #104]	@ (80031e8 <main+0x15a0>)
 8003180:	2300      	movs	r3, #0
 8003182:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8003184:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <main+0x1580>)
 8003186:	2300      	movs	r3, #0
 8003188:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 800318a:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <main+0x1594>)
 800318c:	2300      	movs	r3, #0
 800318e:	7013      	strb	r3, [r2, #0]
				REG16(REG_MOTION_STATUS) = 0;
 8003190:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <main+0x15a4>)
 8003192:	2300      	movs	r3, #0
 8003194:	8413      	strh	r3, [r2, #32]
				calibState = CALIB_IDLE;
 8003196:	4a0d      	ldr	r2, [pc, #52]	@ (80031cc <main+0x1584>)
 8003198:	2300      	movs	r3, #0
 800319a:	7013      	strb	r3, [r2, #0]
				break;
 800319c:	e029      	b.n	80031f2 <main+0x15aa>
				break;
 800319e:	bf00      	nop
 80031a0:	e027      	b.n	80031f2 <main+0x15aa>
				break;
 80031a2:	bf00      	nop
 80031a4:	e025      	b.n	80031f2 <main+0x15aa>
				break;
 80031a6:	bf00      	nop
 80031a8:	e023      	b.n	80031f2 <main+0x15aa>
				break;
 80031aa:	bf00      	nop
 80031ac:	e021      	b.n	80031f2 <main+0x15aa>
				break;
 80031ae:	bf00      	nop
 80031b0:	e01f      	b.n	80031f2 <main+0x15aa>
				break;
 80031b2:	bf00      	nop
 80031b4:	e01d      	b.n	80031f2 <main+0x15aa>
				break;
 80031b6:	bf00      	nop
 80031b8:	e01b      	b.n	80031f2 <main+0x15aa>
				break;
 80031ba:	bf00      	nop
 80031bc:	e019      	b.n	80031f2 <main+0x15aa>
 80031be:	bf00      	nop
 80031c0:	20000bd8 	.word	0x20000bd8
 80031c4:	000186a1 	.word	0x000186a1
 80031c8:	20000b81 	.word	0x20000b81
 80031cc:	20000bd4 	.word	0x20000bd4
 80031d0:	48000400 	.word	0x48000400
 80031d4:	00000000 	.word	0x00000000
 80031d8:	20000be0 	.word	0x20000be0
 80031dc:	20000b82 	.word	0x20000b82
 80031e0:	00030d41 	.word	0x00030d41
 80031e4:	20000b38 	.word	0x20000b38
 80031e8:	20000b7c 	.word	0x20000b7c
 80031ec:	200010e0 	.word	0x200010e0
				break;
 80031f0:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 4) {
 80031f2:	4bcf      	ldr	r3, [pc, #828]	@ (8003530 <main+0x18e8>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	f040 8178 	bne.w	80034ec <main+0x18a4>
			TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
 80031fc:	4bcd      	ldr	r3, [pc, #820]	@ (8003534 <main+0x18ec>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	eef1 7a67 	vneg.f32	s15, s15
 8003206:	4bcc      	ldr	r3, [pc, #816]	@ (8003538 <main+0x18f0>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	eef0 0a47 	vmov.f32	s1, s14
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	f008 fcb2 	bl	800bb7c <atan2f>
 8003218:	ee10 3a10 	vmov	r3, s0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f95f 	bl	80004e0 <__aeabi_f2d>
 8003222:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003528 <main+0x18e0>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fc fffc 	bl	8000224 <__adddf3>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fc66 	bl	8000b04 <__aeabi_d2f>
 8003238:	4602      	mov	r2, r0
 800323a:	4bc0      	ldr	r3, [pc, #768]	@ (800353c <main+0x18f4>)
 800323c:	601a      	str	r2, [r3, #0]
			TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);
 800323e:	4bbd      	ldr	r3, [pc, #756]	@ (8003534 <main+0x18ec>)
 8003240:	ed93 7a00 	vldr	s14, [r3]
 8003244:	4bbb      	ldr	r3, [pc, #748]	@ (8003534 <main+0x18ec>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800324e:	4bba      	ldr	r3, [pc, #744]	@ (8003538 <main+0x18f0>)
 8003250:	edd3 6a00 	vldr	s13, [r3]
 8003254:	4bb8      	ldr	r3, [pc, #736]	@ (8003538 <main+0x18f0>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	f008 fc8b 	bl	800bb80 <sqrtf>
 800326a:	eef0 7a40 	vmov.f32	s15, s0
 800326e:	4bb4      	ldr	r3, [pc, #720]	@ (8003540 <main+0x18f8>)
 8003270:	edc3 7a00 	vstr	s15, [r3]

			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 8003274:	4bb1      	ldr	r3, [pc, #708]	@ (800353c <main+0x18f4>)
 8003276:	ed93 7a00 	vldr	s14, [r3]
 800327a:	4bb2      	ldr	r3, [pc, #712]	@ (8003544 <main+0x18fc>)
 800327c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	4bb0      	ldr	r3, [pc, #704]	@ (8003548 <main+0x1900>)
 8003286:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 800328a:	4bac      	ldr	r3, [pc, #688]	@ (800353c <main+0x18f4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8003292:	4bab      	ldr	r3, [pc, #684]	@ (8003540 <main+0x18f8>)
 8003294:	ed93 7a00 	vldr	s14, [r3]
 8003298:	4bac      	ldr	r3, [pc, #688]	@ (800354c <main+0x1904>)
 800329a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800329e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a2:	4bab      	ldr	r3, [pc, #684]	@ (8003550 <main+0x1908>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 80032a8:	4ba5      	ldr	r3, [pc, #660]	@ (8003540 <main+0x18f8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

			//Call every 0.01 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80032b0:	f001 f9da 	bl	8004668 <micros>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			if (currentTimeState2 > timestampState2) {
 80032bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032c0:	4ba4      	ldr	r3, [pc, #656]	@ (8003554 <main+0x190c>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	4282      	cmp	r2, r0
 80032c8:	418b      	sbcs	r3, r1
 80032ca:	f080 80aa 	bcs.w	8003422 <main+0x17da>
				timestampState2 = currentTimeState2 + 10000;		//us
 80032ce:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 80032d2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80032d6:	1851      	adds	r1, r2, r1
 80032d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032da:	f143 0300 	adc.w	r3, r3, #0
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80032e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003554 <main+0x190c>)
 80032e6:	e9c3 0100 	strd	r0, r1, [r3]

//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0) {
 80032ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d130      	bne.n	8003354 <main+0x170c>
					revolute.current_position = Revolute_QEIdata.RadPosition;
 80032f2:	4b94      	ldr	r3, [pc, #592]	@ (8003544 <main+0x18fc>)
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
					Trapezoidal_Update(&revolute, 0.01);
 80032fa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80032fe:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8003558 <main+0x1910>
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fbaa 	bl	8001a5c <Trapezoidal_Update>
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 8003308:	4b8e      	ldr	r3, [pc, #568]	@ (8003544 <main+0x18fc>)
 800330a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
							- revolute.current_velocity) * -1;
 800330e:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8003312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003316:	eef1 7a67 	vneg.f32	s15, s15
					R_Velo_Error = (Revolute_QEIdata.Velocity_f
 800331a:	4b90      	ldr	r3, [pc, #576]	@ (800355c <main+0x1914>)
 800331c:	edc3 7a00 	vstr	s15, [r3]
					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f,
 8003320:	4b8e      	ldr	r3, [pc, #568]	@ (800355c <main+0x1914>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	488e      	ldr	r0, [pc, #568]	@ (8003560 <main+0x1918>)
 8003328:	ed9f 3a8e 	vldr	s6, [pc, #568]	@ 8003564 <main+0x191c>
 800332c:	eddf 2a8e 	vldr	s5, [pc, #568]	@ 8003568 <main+0x1920>
 8003330:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8003558 <main+0x1910>
 8003334:	eddf 1a8d 	vldr	s3, [pc, #564]	@ 800356c <main+0x1924>
 8003338:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8003570 <main+0x1928>
 800333c:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 8003574 <main+0x192c>
 8003340:	eeb0 0a67 	vmov.f32	s0, s15
 8003344:	f001 f9aa 	bl	800469c <PID_Update>
 8003348:	eef0 7a40 	vmov.f32	s15, s0
 800334c:	4b8a      	ldr	r3, [pc, #552]	@ (8003578 <main+0x1930>)
 800334e:	edc3 7a00 	vstr	s15, [r3]
 8003352:	e018      	b.n	8003386 <main+0x173e>
							0.01f, -100.0f, 100.0f, &pid_r_v);
				} else {
					R_PWM = PID_Update(R_Pos_Error, 16.00f, 32.00f, 8.00f,
 8003354:	4b7c      	ldr	r3, [pc, #496]	@ (8003548 <main+0x1900>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	4888      	ldr	r0, [pc, #544]	@ (800357c <main+0x1934>)
 800335c:	ed9f 3a81 	vldr	s6, [pc, #516]	@ 8003564 <main+0x191c>
 8003360:	eddf 2a81 	vldr	s5, [pc, #516]	@ 8003568 <main+0x1920>
 8003364:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8003558 <main+0x1910>
 8003368:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 800336c:	ed9f 1a84 	vldr	s2, [pc, #528]	@ 8003580 <main+0x1938>
 8003370:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8003374:	eeb0 0a67 	vmov.f32	s0, s15
 8003378:	f001 f990 	bl	800469c <PID_Update>
 800337c:	eef0 7a40 	vmov.f32	s15, s0
 8003380:	4b7d      	ldr	r3, [pc, #500]	@ (8003578 <main+0x1930>)
 8003382:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_r);
				}

				if (prismatic.finished == 0) {
 8003386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d130      	bne.n	80033f0 <main+0x17a8>
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 800338e:	4b6f      	ldr	r3, [pc, #444]	@ (800354c <main+0x1904>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
					Trapezoidal_Update(&prismatic, 0.01);
 8003396:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800339a:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8003558 <main+0x1910>
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fb5c 	bl	8001a5c <Trapezoidal_Update>
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 80033a4:	4b69      	ldr	r3, [pc, #420]	@ (800354c <main+0x1904>)
 80033a6:	ed93 7a08 	vldr	s14, [r3, #32]
							- prismatic.current_velocity) * -1;
 80033aa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	eef1 7a67 	vneg.f32	s15, s15
					P_Velo_Error = (Prismatic_QEIdata.Velocity
 80033b6:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <main+0x193c>)
 80033b8:	edc3 7a00 	vstr	s15, [r3]
					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 80033bc:	4b71      	ldr	r3, [pc, #452]	@ (8003584 <main+0x193c>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	4871      	ldr	r0, [pc, #452]	@ (8003588 <main+0x1940>)
 80033c4:	ed9f 3a67 	vldr	s6, [pc, #412]	@ 8003564 <main+0x191c>
 80033c8:	eddf 2a67 	vldr	s5, [pc, #412]	@ 8003568 <main+0x1920>
 80033cc:	ed9f 2a62 	vldr	s4, [pc, #392]	@ 8003558 <main+0x1910>
 80033d0:	eddf 1a66 	vldr	s3, [pc, #408]	@ 800356c <main+0x1924>
 80033d4:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 80033d8:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 800358c <main+0x1944>
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	f001 f95c 	bl	800469c <PID_Update>
 80033e4:	eef0 7a40 	vmov.f32	s15, s0
 80033e8:	4b69      	ldr	r3, [pc, #420]	@ (8003590 <main+0x1948>)
 80033ea:	edc3 7a00 	vstr	s15, [r3]
 80033ee:	e018      	b.n	8003422 <main+0x17da>
							-100.0f, 100.0f, &pid_p_v);
				} else {
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 80033f0:	4b57      	ldr	r3, [pc, #348]	@ (8003550 <main+0x1908>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	4867      	ldr	r0, [pc, #412]	@ (8003594 <main+0x194c>)
 80033f8:	ed9f 3a5a 	vldr	s6, [pc, #360]	@ 8003564 <main+0x191c>
 80033fc:	eddf 2a5a 	vldr	s5, [pc, #360]	@ 8003568 <main+0x1920>
 8003400:	ed9f 2a55 	vldr	s4, [pc, #340]	@ 8003558 <main+0x1910>
 8003404:	eddf 1a64 	vldr	s3, [pc, #400]	@ 8003598 <main+0x1950>
 8003408:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 800359c <main+0x1954>
 800340c:	eddf 0a64 	vldr	s1, [pc, #400]	@ 80035a0 <main+0x1958>
 8003410:	eeb0 0a67 	vmov.f32	s0, s15
 8003414:	f001 f942 	bl	800469c <PID_Update>
 8003418:	eef0 7a40 	vmov.f32	s15, s0
 800341c:	4b5c      	ldr	r3, [pc, #368]	@ (8003590 <main+0x1948>)
 800341e:	edc3 7a00 	vstr	s15, [r3]
							-100.0f, 100.0f, &pid_p);
				}
			}

			Set_Motor(0, R_PWM);
 8003422:	4b55      	ldr	r3, [pc, #340]	@ (8003578 <main+0x1930>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	eeb0 0a67 	vmov.f32	s0, s15
 800342c:	2000      	movs	r0, #0
 800342e:	f001 fb91 	bl	8004b54 <Set_Motor>
			Set_Motor(1, P_PWM);
 8003432:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <main+0x1948>)
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	eeb0 0a67 	vmov.f32	s0, s15
 800343c:	2001      	movs	r0, #1
 800343e:	f001 fb89 	bl	8004b54 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8003442:	4b41      	ldr	r3, [pc, #260]	@ (8003548 <main+0x1900>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eef0 7ae7 	vabs.f32	s15, s15
 800344c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80035a4 <main+0x195c>
 8003450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	d53f      	bpl.n	80034da <main+0x1892>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 800345a:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <main+0x1908>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eef0 7ae7 	vabs.f32	s15, s15
 8003464:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800358c <main+0x1944>
 8003468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	d533      	bpl.n	80034da <main+0x1892>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8003472:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <main+0x1960>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	4313      	orrs	r3, r2
 800347a:	d107      	bne.n	800348c <main+0x1844>
					lock_timer_us = micros(); /* start timing */
 800347c:	f001 f8f4 	bl	8004668 <micros>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4948      	ldr	r1, [pc, #288]	@ (80035a8 <main+0x1960>)
 8003486:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 800348a:	e02e      	b.n	80034ea <main+0x18a2>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800348c:	f001 f8ec 	bl	8004668 <micros>
 8003490:	4b45      	ldr	r3, [pc, #276]	@ (80035a8 <main+0x1960>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	1a86      	subs	r6, r0, r2
 8003498:	633e      	str	r6, [r7, #48]	@ 0x30
 800349a:	eb61 0303 	sbc.w	r3, r1, r3
 800349e:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a0:	4b42      	ldr	r3, [pc, #264]	@ (80035ac <main+0x1964>)
 80034a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034a6:	4602      	mov	r2, r0
 80034a8:	429a      	cmp	r2, r3
 80034aa:	460b      	mov	r3, r1
 80034ac:	f173 0300 	sbcs.w	r3, r3, #0
 80034b0:	d31b      	bcc.n	80034ea <main+0x18a2>
					Set_Servo(1);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f001 fbcc 	bl	8004c50 <Set_Servo>
					Set_Motor(0, 0);
 80034b8:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800356c <main+0x1924>
 80034bc:	2000      	movs	r0, #0
 80034be:	f001 fb49 	bl	8004b54 <Set_Motor>
					Set_Motor(1, 0);
 80034c2:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800356c <main+0x1924>
 80034c6:	2001      	movs	r0, #1
 80034c8:	f001 fb44 	bl	8004b54 <Set_Motor>
					revolute.finished = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					prismatic.finished = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				if (lock_timer_us == 0)
 80034d8:	e007      	b.n	80034ea <main+0x18a2>
				}
			} else {
				lock_timer_us = 0;
 80034da:	4933      	ldr	r1, [pc, #204]	@ (80035a8 <main+0x1960>)
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9c1 2300 	strd	r2, r3, [r1]
 80034e8:	e000      	b.n	80034ec <main+0x18a4>
				if (lock_timer_us == 0)
 80034ea:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 5) {
 80034ec:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <main+0x18e8>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d164      	bne.n	80035be <main+0x1976>
			Set_Motor(0, 5);
 80034f4:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80034f8:	2000      	movs	r0, #0
 80034fa:	f001 fb2b 	bl	8004b54 <Set_Motor>
			if (Z_index_R > 0) {
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <main+0x1968>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d056      	beq.n	80035b4 <main+0x196c>
				Set_Motor(0, 0);
 8003506:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800356c <main+0x1924>
 800350a:	2000      	movs	r0, #0
 800350c:	f001 fb22 	bl	8004b54 <Set_Motor>
				Reset_R();
 8003510:	f001 fbc8 	bl	8004ca4 <Reset_R>
				TargetR = Revolute_QEIdata.RadPosition;
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <main+0x18fc>)
 8003516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003518:	4b08      	ldr	r3, [pc, #32]	@ (800353c <main+0x18f4>)
 800351a:	601a      	str	r2, [r3, #0]
				Mode = 0;
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <main+0x18e8>)
 800351e:	2300      	movs	r3, #0
 8003520:	7013      	strb	r3, [r2, #0]
 8003522:	e04c      	b.n	80035be <main+0x1976>
 8003524:	f3af 8000 	nop.w
 8003528:	54442d18 	.word	0x54442d18
 800352c:	3ff921fb 	.word	0x3ff921fb
 8003530:	20000b7c 	.word	0x20000b7c
 8003534:	20000b4c 	.word	0x20000b4c
 8003538:	20000b50 	.word	0x20000b50
 800353c:	20000b54 	.word	0x20000b54
 8003540:	20000b58 	.word	0x20000b58
 8003544:	20000ac0 	.word	0x20000ac0
 8003548:	20000b64 	.word	0x20000b64
 800354c:	20000b00 	.word	0x20000b00
 8003550:	20000b68 	.word	0x20000b68
 8003554:	20001298 	.word	0x20001298
 8003558:	3c23d70a 	.word	0x3c23d70a
 800355c:	20000b6c 	.word	0x20000b6c
 8003560:	20000bc4 	.word	0x20000bc4
 8003564:	42c80000 	.word	0x42c80000
 8003568:	c2c80000 	.word	0xc2c80000
 800356c:	00000000 	.word	0x00000000
 8003570:	3dcccccd 	.word	0x3dcccccd
 8003574:	428ed70a 	.word	0x428ed70a
 8003578:	20000b74 	.word	0x20000b74
 800357c:	20000bb4 	.word	0x20000bb4
 8003580:	42000000 	.word	0x42000000
 8003584:	20000b70 	.word	0x20000b70
 8003588:	20000bcc 	.word	0x20000bcc
 800358c:	3e4ccccd 	.word	0x3e4ccccd
 8003590:	20000b78 	.word	0x20000b78
 8003594:	20000bbc 	.word	0x20000bbc
 8003598:	3e19999a 	.word	0x3e19999a
 800359c:	3f99999a 	.word	0x3f99999a
 80035a0:	3eaa7efa 	.word	0x3eaa7efa
 80035a4:	3d0b4396 	.word	0x3d0b4396
 80035a8:	20000b88 	.word	0x20000b88
 80035ac:	000f4240 	.word	0x000f4240
 80035b0:	20000b38 	.word	0x20000b38
			} else {
				Set_Motor(0, 25);
 80035b4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80035b8:	2000      	movs	r0, #0
 80035ba:	f001 facb 	bl	8004b54 <Set_Motor>
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 80035be:	4bb2      	ldr	r3, [pc, #712]	@ (8003888 <main+0x1c40>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d102      	bne.n	80035cc <main+0x1984>
			Set_Servo(0);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f001 fb42 	bl	8004c50 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 80035cc:	4bae      	ldr	r3, [pc, #696]	@ (8003888 <main+0x1c40>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b07      	cmp	r3, #7
 80035d2:	d102      	bne.n	80035da <main+0x1992>
			Set_Servo(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f001 fb3b 	bl	8004c50 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 80035da:	4bab      	ldr	r3, [pc, #684]	@ (8003888 <main+0x1c40>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	f47e abc4 	bne.w	8001d6c <main+0x124>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 80035e4:	4ba9      	ldr	r3, [pc, #676]	@ (800388c <main+0x1c44>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d120      	bne.n	800362e <main+0x19e6>
 80035ec:	f001 f83c 	bl	8004668 <micros>
 80035f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003890 <main+0x1c48>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	1a86      	subs	r6, r0, r2
 80035f8:	62be      	str	r6, [r7, #40]	@ 0x28
 80035fa:	eb61 0303 	sbc.w	r3, r1, r3
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003600:	4ba4      	ldr	r3, [pc, #656]	@ (8003894 <main+0x1c4c>)
 8003602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003606:	4602      	mov	r2, r0
 8003608:	429a      	cmp	r2, r3
 800360a:	460b      	mov	r3, r1
 800360c:	f173 0300 	sbcs.w	r3, r3, #0
 8003610:	d20d      	bcs.n	800362e <main+0x19e6>
				Set_Motor(0, 0);
 8003612:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8003898 <main+0x1c50>
 8003616:	2000      	movs	r0, #0
 8003618:	f001 fa9c 	bl	8004b54 <Set_Motor>
				Set_Motor(1, 0);
 800361c:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8003898 <main+0x1c50>
 8003620:	2001      	movs	r0, #1
 8003622:	f001 fa97 	bl	8004b54 <Set_Motor>
				Set_Servo(1);
 8003626:	2001      	movs	r0, #1
 8003628:	f001 fb12 	bl	8004c50 <Set_Servo>
 800362c:	e197      	b.n	800395e <main+0x1d16>
			} else if (loop_counter == 1
 800362e:	4b97      	ldr	r3, [pc, #604]	@ (800388c <main+0x1c44>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d116      	bne.n	8003664 <main+0x1a1c>
					&& micros() - pen_delay_timer < 500000) {
 8003636:	f001 f817 	bl	8004668 <micros>
 800363a:	4b95      	ldr	r3, [pc, #596]	@ (8003890 <main+0x1c48>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	1a86      	subs	r6, r0, r2
 8003642:	623e      	str	r6, [r7, #32]
 8003644:	eb61 0303 	sbc.w	r3, r1, r3
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
 800364a:	4b94      	ldr	r3, [pc, #592]	@ (800389c <main+0x1c54>)
 800364c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003650:	4602      	mov	r2, r0
 8003652:	429a      	cmp	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	f173 0300 	sbcs.w	r3, r3, #0
 800365a:	d203      	bcs.n	8003664 <main+0x1a1c>
				Set_Servo(0);
 800365c:	2000      	movs	r0, #0
 800365e:	f001 faf7 	bl	8004c50 <Set_Servo>
 8003662:	e17c      	b.n	800395e <main+0x1d16>
			} else if (loop_counter < 100) {
 8003664:	4b89      	ldr	r3, [pc, #548]	@ (800388c <main+0x1c44>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b63      	cmp	r3, #99	@ 0x63
 800366a:	f300 814d 	bgt.w	8003908 <main+0x1cc0>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 800366e:	2000      	movs	r0, #0
 8003670:	f001 faee 	bl	8004c50 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003674:	4b8a      	ldr	r3, [pc, #552]	@ (80038a0 <main+0x1c58>)
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	4b8a      	ldr	r3, [pc, #552]	@ (80038a4 <main+0x1c5c>)
 800367c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <main+0x1c60>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800368a:	4b88      	ldr	r3, [pc, #544]	@ (80038ac <main+0x1c64>)
 800368c:	ed93 7a00 	vldr	s14, [r3]
 8003690:	4b87      	ldr	r3, [pc, #540]	@ (80038b0 <main+0x1c68>)
 8003692:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369a:	4b86      	ldr	r3, [pc, #536]	@ (80038b4 <main+0x1c6c>)
 800369c:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 80036a0:	f000 ffe2 	bl	8004668 <micros>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
				if (currentTimeState8 > timestampState8) {
 80036ac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80036b0:	4b81      	ldr	r3, [pc, #516]	@ (80038b8 <main+0x1c70>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	4282      	cmp	r2, r0
 80036b8:	418b      	sbcs	r3, r1
 80036ba:	d23f      	bcs.n	800373c <main+0x1af4>
					timestampState8 = currentTimeState8 + 10000;		//us
 80036bc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80036c0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80036c4:	1851      	adds	r1, r2, r1
 80036c6:	61b9      	str	r1, [r7, #24]
 80036c8:	f143 0300 	adc.w	r3, r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036d2:	4b79      	ldr	r3, [pc, #484]	@ (80038b8 <main+0x1c70>)
 80036d4:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 80036d8:	4b73      	ldr	r3, [pc, #460]	@ (80038a8 <main+0x1c60>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	4877      	ldr	r0, [pc, #476]	@ (80038bc <main+0x1c74>)
 80036e0:	ed9f 3a77 	vldr	s6, [pc, #476]	@ 80038c0 <main+0x1c78>
 80036e4:	eddf 2a77 	vldr	s5, [pc, #476]	@ 80038c4 <main+0x1c7c>
 80036e8:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 80038c8 <main+0x1c80>
 80036ec:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 80036f0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80036f4:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 80036f8:	eeb0 0a67 	vmov.f32	s0, s15
 80036fc:	f000 ffce 	bl	800469c <PID_Update>
 8003700:	eef0 7a40 	vmov.f32	s15, s0
 8003704:	4b71      	ldr	r3, [pc, #452]	@ (80038cc <main+0x1c84>)
 8003706:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_r));
					P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 800370a:	4b6a      	ldr	r3, [pc, #424]	@ (80038b4 <main+0x1c6c>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	486f      	ldr	r0, [pc, #444]	@ (80038d0 <main+0x1c88>)
 8003712:	ed9f 3a6b 	vldr	s6, [pc, #428]	@ 80038c0 <main+0x1c78>
 8003716:	eddf 2a6b 	vldr	s5, [pc, #428]	@ 80038c4 <main+0x1c7c>
 800371a:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 80038c8 <main+0x1c80>
 800371e:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 80038d4 <main+0x1c8c>
 8003722:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 80038d8 <main+0x1c90>
 8003726:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 80038dc <main+0x1c94>
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	f000 ffb5 	bl	800469c <PID_Update>
 8003732:	eef0 7a40 	vmov.f32	s15, s0
 8003736:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <main+0x1c98>)
 8003738:	edc3 7a00 	vstr	s15, [r3]
							-100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_PWM);
 800373c:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <main+0x1c84>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb0 0a67 	vmov.f32	s0, s15
 8003746:	2000      	movs	r0, #0
 8003748:	f001 fa04 	bl	8004b54 <Set_Motor>
				Set_Motor(1, P_PWM);
 800374c:	4b64      	ldr	r3, [pc, #400]	@ (80038e0 <main+0x1c98>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	eeb0 0a67 	vmov.f32	s0, s15
 8003756:	2001      	movs	r0, #1
 8003758:	f001 f9fc 	bl	8004b54 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 800375c:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <main+0x1c60>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eef0 7ae7 	vabs.f32	s15, s15
 8003766:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80038e4 <main+0x1c9c>
 800376a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	d57f      	bpl.n	8003874 <main+0x1c2c>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8003774:	4b4f      	ldr	r3, [pc, #316]	@ (80038b4 <main+0x1c6c>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eef0 7ae7 	vabs.f32	s15, s15
 800377e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80038e8 <main+0x1ca0>
 8003782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d573      	bpl.n	8003874 <main+0x1c2c>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 800378c:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <main+0x1ca4>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	4313      	orrs	r3, r2
 8003794:	d107      	bne.n	80037a6 <main+0x1b5e>
						lock_timer_us = micros(); /* start timing */
 8003796:	f000 ff67 	bl	8004668 <micros>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4953      	ldr	r1, [pc, #332]	@ (80038ec <main+0x1ca4>)
 80037a0:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 80037a4:	e0da      	b.n	800395c <main+0x1d14>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 80037a6:	f000 ff5f 	bl	8004668 <micros>
 80037aa:	4b50      	ldr	r3, [pc, #320]	@ (80038ec <main+0x1ca4>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	1a86      	subs	r6, r0, r2
 80037b2:	613e      	str	r6, [r7, #16]
 80037b4:	eb61 0303 	sbc.w	r3, r1, r3
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <main+0x1ca8>)
 80037bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037c0:	4602      	mov	r2, r0
 80037c2:	429a      	cmp	r2, r3
 80037c4:	460b      	mov	r3, r1
 80037c6:	f173 0300 	sbcs.w	r3, r3, #0
 80037ca:	f0c0 80c7 	bcc.w	800395c <main+0x1d14>
						if (loop_temp == 0) {
 80037ce:	4b49      	ldr	r3, [pc, #292]	@ (80038f4 <main+0x1cac>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d119      	bne.n	800380a <main+0x1bc2>
							pid_r.integ = 0;
 80037d6:	4a39      	ldr	r2, [pc, #228]	@ (80038bc <main+0x1c74>)
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 80037de:	4a37      	ldr	r2, [pc, #220]	@ (80038bc <main+0x1c74>)
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 80037e6:	4a3a      	ldr	r2, [pc, #232]	@ (80038d0 <main+0x1c88>)
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 80037ee:	4a38      	ldr	r2, [pc, #224]	@ (80038d0 <main+0x1c88>)
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 80037f6:	4a2a      	ldr	r2, [pc, #168]	@ (80038a0 <main+0x1c58>)
 80037f8:	4b3f      	ldr	r3, [pc, #252]	@ (80038f8 <main+0x1cb0>)
 80037fa:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 80037fc:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <main+0x1c64>)
 80037fe:	4b3f      	ldr	r3, [pc, #252]	@ (80038fc <main+0x1cb4>)
 8003800:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8003802:	4a3c      	ldr	r2, [pc, #240]	@ (80038f4 <main+0x1cac>)
 8003804:	2301      	movs	r3, #1
 8003806:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8003808:	e0a8      	b.n	800395c <main+0x1d14>
						} else {
							pid_r.integ = 0;
 800380a:	4a2c      	ldr	r2, [pc, #176]	@ (80038bc <main+0x1c74>)
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8003812:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <main+0x1c74>)
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 800381a:	4a2d      	ldr	r2, [pc, #180]	@ (80038d0 <main+0x1c88>)
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8003822:	4a2b      	ldr	r2, [pc, #172]	@ (80038d0 <main+0x1c88>)
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 800382a:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <main+0x1c58>)
 800382c:	4b34      	ldr	r3, [pc, #208]	@ (8003900 <main+0x1cb8>)
 800382e:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8003830:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <main+0x1c64>)
 8003832:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <main+0x1cbc>)
 8003834:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8003836:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <main+0x1cac>)
 8003838:	2300      	movs	r3, #0
 800383a:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <main+0x1c44>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <main+0x1c44>)
 8003844:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <main+0x1c44>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d106      	bne.n	800385c <main+0x1c14>
								pen_delay_timer = micros();
 800384e:	f000 ff0b 	bl	8004668 <micros>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	490e      	ldr	r1, [pc, #56]	@ (8003890 <main+0x1c48>)
 8003858:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <main+0x1c44>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b64      	cmp	r3, #100	@ 0x64
 8003862:	d17b      	bne.n	800395c <main+0x1d14>
								pen_delay_timer = micros();
 8003864:	f000 ff00 	bl	8004668 <micros>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4908      	ldr	r1, [pc, #32]	@ (8003890 <main+0x1c48>)
 800386e:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8003872:	e073      	b.n	800395c <main+0x1d14>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8003874:	491d      	ldr	r1, [pc, #116]	@ (80038ec <main+0x1ca4>)
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9c1 2300 	strd	r2, r3, [r1]
 8003882:	f7fe ba73 	b.w	8001d6c <main+0x124>
 8003886:	bf00      	nop
 8003888:	20000b7c 	.word	0x20000b7c
 800388c:	20000bf0 	.word	0x20000bf0
 8003890:	200012a0 	.word	0x200012a0
 8003894:	000493e0 	.word	0x000493e0
 8003898:	00000000 	.word	0x00000000
 800389c:	0007a120 	.word	0x0007a120
 80038a0:	20000b54 	.word	0x20000b54
 80038a4:	20000ac0 	.word	0x20000ac0
 80038a8:	20000b64 	.word	0x20000b64
 80038ac:	20000b58 	.word	0x20000b58
 80038b0:	20000b00 	.word	0x20000b00
 80038b4:	20000b68 	.word	0x20000b68
 80038b8:	200012a8 	.word	0x200012a8
 80038bc:	20000bb4 	.word	0x20000bb4
 80038c0:	42c80000 	.word	0x42c80000
 80038c4:	c2c80000 	.word	0xc2c80000
 80038c8:	3c23d70a 	.word	0x3c23d70a
 80038cc:	20000b74 	.word	0x20000b74
 80038d0:	20000bbc 	.word	0x20000bbc
 80038d4:	3e19999a 	.word	0x3e19999a
 80038d8:	3f99999a 	.word	0x3f99999a
 80038dc:	3eaa7efa 	.word	0x3eaa7efa
 80038e0:	20000b78 	.word	0x20000b78
 80038e4:	3d0b4396 	.word	0x3d0b4396
 80038e8:	3e4ccccd 	.word	0x3e4ccccd
 80038ec:	20000b88 	.word	0x20000b88
 80038f0:	000f4240 	.word	0x000f4240
 80038f4:	200012b0 	.word	0x200012b0
 80038f8:	bf860aa6 	.word	0xbf860aa6
 80038fc:	437a0000 	.word	0x437a0000
 8003900:	40860a91 	.word	0x40860a91
 8003904:	42480000 	.word	0x42480000
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 8003908:	f000 feae 	bl	8004668 <micros>
 800390c:	4b15      	ldr	r3, [pc, #84]	@ (8003964 <main+0x1d1c>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	1a86      	subs	r6, r0, r2
 8003914:	60be      	str	r6, [r7, #8]
 8003916:	eb61 0303 	sbc.w	r3, r1, r3
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <main+0x1d20>)
 800391e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003922:	4602      	mov	r2, r0
 8003924:	429a      	cmp	r2, r3
 8003926:	460b      	mov	r3, r1
 8003928:	f173 0300 	sbcs.w	r3, r3, #0
 800392c:	d20e      	bcs.n	800394c <main+0x1d04>
					Set_Motor(0, 0);
 800392e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800396c <main+0x1d24>
 8003932:	2000      	movs	r0, #0
 8003934:	f001 f90e 	bl	8004b54 <Set_Motor>
					Set_Motor(1, 0);
 8003938:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800396c <main+0x1d24>
 800393c:	2001      	movs	r0, #1
 800393e:	f001 f909 	bl	8004b54 <Set_Motor>
					Set_Servo(1);
 8003942:	2001      	movs	r0, #1
 8003944:	f001 f984 	bl	8004c50 <Set_Servo>
 8003948:	f7fe ba10 	b.w	8001d6c <main+0x124>
				} else {
					Set_Servo(0);
 800394c:	2000      	movs	r0, #0
 800394e:	f001 f97f 	bl	8004c50 <Set_Servo>
					Mode = 0;
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <main+0x1d28>)
 8003954:	2300      	movs	r3, #0
 8003956:	7013      	strb	r3, [r2, #0]
 8003958:	f7fe ba08 	b.w	8001d6c <main+0x124>
					if (lock_timer_us == 0)
 800395c:	bf00      	nop
	while (1) {
 800395e:	f7fe ba05 	b.w	8001d6c <main+0x124>
 8003962:	bf00      	nop
 8003964:	200012a0 	.word	0x200012a0
 8003968:	0007a120 	.word	0x0007a120
 800396c:	00000000 	.word	0x00000000
 8003970:	20000b7c 	.word	0x20000b7c

08003974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b094      	sub	sp, #80	@ 0x50
 8003978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	2238      	movs	r2, #56	@ 0x38
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f008 f8ba 	bl	800bafc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003996:	2000      	movs	r0, #0
 8003998:	f002 fbf8 	bl	800618c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800399c:	2302      	movs	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a6:	2340      	movs	r3, #64	@ 0x40
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039aa:	2302      	movs	r3, #2
 80039ac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ae:	2302      	movs	r3, #2
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039b2:	2304      	movs	r3, #4
 80039b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80039b6:	2355      	movs	r3, #85	@ 0x55
 80039b8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ba:	2302      	movs	r3, #2
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039be:	2302      	movs	r3, #2
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039c2:	2302      	movs	r3, #2
 80039c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039c6:	f107 0318 	add.w	r3, r7, #24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 fc92 	bl	80062f4 <HAL_RCC_OscConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SystemClock_Config+0x66>
		Error_Handler();
 80039d6:	f001 f9c3 	bl	8004d60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80039da:	230f      	movs	r3, #15
 80039dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039de:	2303      	movs	r3, #3
 80039e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	2104      	movs	r1, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 ff90 	bl	8006918 <HAL_RCC_ClockConfig>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <SystemClock_Config+0x8e>
		Error_Handler();
 80039fe:	f001 f9af 	bl	8004d60 <Error_Handler>
	}
}
 8003a02:	bf00      	nop
 8003a04:	3750      	adds	r7, #80	@ 0x50
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	@ 0x30
 8003a10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a30:	463b      	mov	r3, r7
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003a3a:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a3c:	4a35      	ldr	r2, [pc, #212]	@ (8003b14 <MX_TIM1_Init+0x108>)
 8003a3e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003a40:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a42:	22a9      	movs	r2, #169	@ 0xa9
 8003a44:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a46:	4b32      	ldr	r3, [pc, #200]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a52:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a54:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003a66:	482a      	ldr	r0, [pc, #168]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a68:	f003 fe8c 	bl	8007784 <HAL_TIM_IC_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003a72:	f001 f975 	bl	8004d60 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003a76:	2304      	movs	r3, #4
 8003a78:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003a7a:	2360      	movs	r3, #96	@ 0x60
 8003a7c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481f      	ldr	r0, [pc, #124]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003a92:	f004 fe57 	bl	8008744 <HAL_TIM_SlaveConfigSynchro>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM1_Init+0x94>
		Error_Handler();
 8003a9c:	f001 f960 	bl	8004d60 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4815      	ldr	r0, [pc, #84]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003aba:	f004 fb7c 	bl	80081b6 <HAL_TIM_IC_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003ac4:	f001 f94c 	bl	8004d60 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003acc:	2301      	movs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480d      	ldr	r0, [pc, #52]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003ada:	f004 fb6c 	bl	80081b6 <HAL_TIM_IC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003ae4:	f001 f93c 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003af4:	463b      	mov	r3, r7
 8003af6:	4619      	mov	r1, r3
 8003af8:	4805      	ldr	r0, [pc, #20]	@ (8003b10 <MX_TIM1_Init+0x104>)
 8003afa:	f005 ff3f 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003b04:	f001 f92c 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003b08:	bf00      	nop
 8003b0a:	3730      	adds	r7, #48	@ 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000280 	.word	0x20000280
 8003b14:	40012c00 	.word	0x40012c00

08003b18 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	@ 0x30
 8003b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b46:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b4c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b50:	22a9      	movs	r2, #169	@ 0xa9
 8003b52:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b54:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b62:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b68:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003b6e:	4829      	ldr	r0, [pc, #164]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b70:	f003 fe08 	bl	8007784 <HAL_TIM_IC_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM2_Init+0x66>
		Error_Handler();
 8003b7a:	f001 f8f1 	bl	8004d60 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003b7e:	2304      	movs	r3, #4
 8003b80:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003b82:	2350      	movs	r3, #80	@ 0x50
 8003b84:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003b92:	f107 031c 	add.w	r3, r7, #28
 8003b96:	4619      	mov	r1, r3
 8003b98:	481e      	ldr	r0, [pc, #120]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003b9a:	f004 fdd3 	bl	8008744 <HAL_TIM_SlaveConfigSynchro>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003ba4:	f001 f8dc 	bl	8004d60 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4814      	ldr	r0, [pc, #80]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003bc2:	f004 faf8 	bl	80081b6 <HAL_TIM_IC_ConfigChannel>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003bcc:	f001 f8c8 	bl	8004d60 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	480c      	ldr	r0, [pc, #48]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003be2:	f004 fae8 	bl	80081b6 <HAL_TIM_IC_ConfigChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003bec:	f001 f8b8 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4805      	ldr	r0, [pc, #20]	@ (8003c14 <MX_TIM2_Init+0xfc>)
 8003bfe:	f005 febd 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003c08:	f001 f8aa 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003c0c:	bf00      	nop
 8003c0e:	3730      	adds	r7, #48	@ 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	2000034c 	.word	0x2000034c

08003c18 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	@ 0x30
 8003c1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	2224      	movs	r2, #36	@ 0x24
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f007 ff68 	bl	800bafc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <MX_TIM3_Init+0xa8>)
 8003c3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c56:	4b19      	ldr	r3, [pc, #100]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4619      	mov	r1, r3
 8003c86:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003c88:	f003 ffda 	bl	8007c40 <HAL_TIM_Encoder_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c92:	f001 f865 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4806      	ldr	r0, [pc, #24]	@ (8003cbc <MX_TIM3_Init+0xa4>)
 8003ca4:	f005 fe6a 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003cae:	f001 f857 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003cb2:	bf00      	nop
 8003cb4:	3730      	adds	r7, #48	@ 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000418 	.word	0x20000418
 8003cc0:	40000400 	.word	0x40000400

08003cc4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	@ 0x30
 8003cc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f007 ff12 	bl	800bafc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cd8:	463b      	mov	r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003ce4:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <MX_TIM4_Init+0xa8>)
 8003ce6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cfa:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d20:	2301      	movs	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d34:	f003 ff84 	bl	8007c40 <HAL_TIM_Encoder_Init>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003d3e:	f001 f80f 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4806      	ldr	r0, [pc, #24]	@ (8003d68 <MX_TIM4_Init+0xa4>)
 8003d50:	f005 fe14 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003d5a:	f001 f801 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003d5e:	bf00      	nop
 8003d60:	3730      	adds	r7, #48	@ 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200004e4 	.word	0x200004e4
 8003d6c:	40000800 	.word	0x40000800

08003d70 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <MX_TIM5_Init+0x98>)
 8003d92:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d96:	22a9      	movs	r2, #169	@ 0xa9
 8003d98:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	4b16      	ldr	r3, [pc, #88]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003db4:	4813      	ldr	r0, [pc, #76]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003db6:	f003 fa19 	bl	80071ec <HAL_TIM_Base_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003dc0:	f000 ffce 	bl	8004d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480c      	ldr	r0, [pc, #48]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003dd2:	f004 fba1 	bl	8008518 <HAL_TIM_ConfigClockSource>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM5_Init+0x70>
		Error_Handler();
 8003ddc:	f000 ffc0 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <MX_TIM5_Init+0x94>)
 8003dee:	f005 fdc5 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003df8:	f000 ffb2 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200005b0 	.word	0x200005b0
 8003e08:	40000c00 	.word	0x40000c00

08003e0c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b09c      	sub	sp, #112	@ 0x70
 8003e10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
 8003e3c:	615a      	str	r2, [r3, #20]
 8003e3e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2234      	movs	r2, #52	@ 0x34
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f007 fe58 	bl	800bafc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003f80 <MX_TIM8_Init+0x174>)
 8003e50:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e54:	22a9      	movs	r2, #169	@ 0xa9
 8003e56:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e58:	4b48      	ldr	r3, [pc, #288]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e60:	2264      	movs	r2, #100	@ 0x64
 8003e62:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e64:	4b45      	ldr	r3, [pc, #276]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e70:	4b42      	ldr	r3, [pc, #264]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003e76:	4841      	ldr	r0, [pc, #260]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e78:	f003 f9b8 	bl	80071ec <HAL_TIM_Base_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003e82:	f000 ff6d 	bl	8004d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e8a:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003e8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e90:	4619      	mov	r1, r3
 8003e92:	483a      	ldr	r0, [pc, #232]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003e94:	f004 fb40 	bl	8008518 <HAL_TIM_ConfigClockSource>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM8_Init+0x96>
		Error_Handler();
 8003e9e:	f000 ff5f 	bl	8004d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003ea2:	4836      	ldr	r0, [pc, #216]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003ea4:	f003 faee 	bl	8007484 <HAL_TIM_PWM_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003eae:	f000 ff57 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003ebe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	482d      	ldr	r0, [pc, #180]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003ec6:	f005 fd59 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003ed0:	f000 ff46 	bl	8004d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed4:	2360      	movs	r3, #96	@ 0x60
 8003ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003ed8:	2364      	movs	r3, #100	@ 0x64
 8003eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003edc:	2300      	movs	r3, #0
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003ef0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4820      	ldr	r0, [pc, #128]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003efa:	f004 f9f9 	bl	80082f0 <HAL_TIM_PWM_ConfigChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003f04:	f000 ff2c 	bl	8004d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003f08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481a      	ldr	r0, [pc, #104]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f12:	f004 f9ed 	bl	80082f0 <HAL_TIM_PWM_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003f1c:	f000 ff20 	bl	8004d60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f38:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f50:	2300      	movs	r3, #0
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4807      	ldr	r0, [pc, #28]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f5e:	f005 fda3 	bl	8009aa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003f68:	f000 fefa 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <MX_TIM8_Init+0x170>)
 8003f6e:	f001 f88b 	bl	8005088 <HAL_TIM_MspPostInit>

}
 8003f72:	bf00      	nop
 8003f74:	3770      	adds	r7, #112	@ 0x70
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000067c 	.word	0x2000067c
 8003f80:	40013400 	.word	0x40013400

08003f84 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b09c      	sub	sp, #112	@ 0x70
 8003f88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003f8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003fa4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
 8003fb4:	615a      	str	r2, [r3, #20]
 8003fb6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	2234      	movs	r2, #52	@ 0x34
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f007 fd9c 	bl	800bafc <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fc6:	4a40      	ldr	r2, [pc, #256]	@ (80040c8 <MX_TIM15_Init+0x144>)
 8003fc8:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003fca:	4b3e      	ldr	r3, [pc, #248]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fcc:	22a9      	movs	r2, #169	@ 0xa9
 8003fce:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fd8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003fdc:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fde:	4b39      	ldr	r3, [pc, #228]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003fe4:	4b37      	ldr	r3, [pc, #220]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ff0:	4834      	ldr	r0, [pc, #208]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8003ff2:	f003 f8fb 	bl	80071ec <HAL_TIM_Base_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003ffc:	f000 feb0 	bl	8004d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8004006:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800400a:	4619      	mov	r1, r3
 800400c:	482d      	ldr	r0, [pc, #180]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800400e:	f004 fa83 	bl	8008518 <HAL_TIM_ConfigClockSource>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM15_Init+0x98>
		Error_Handler();
 8004018:	f000 fea2 	bl	8004d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800401c:	4829      	ldr	r0, [pc, #164]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800401e:	f003 fa31 	bl	8007484 <HAL_TIM_PWM_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM15_Init+0xa8>
		Error_Handler();
 8004028:	f000 fe9a 	bl	8004d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402c:	2300      	movs	r3, #0
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8004034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004038:	4619      	mov	r1, r3
 800403a:	4822      	ldr	r0, [pc, #136]	@ (80040c4 <MX_TIM15_Init+0x140>)
 800403c:	f005 fc9e 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8004046:	f000 fe8b 	bl	8004d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800404a:	2360      	movs	r3, #96	@ 0x60
 800404c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004052:	2300      	movs	r3, #0
 8004054:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004056:	2300      	movs	r3, #0
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8004066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800406a:	2200      	movs	r2, #0
 800406c:	4619      	mov	r1, r3
 800406e:	4815      	ldr	r0, [pc, #84]	@ (80040c4 <MX_TIM15_Init+0x140>)
 8004070:	f004 f93e 	bl	80082f0 <HAL_TIM_PWM_ConfigChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800407a:	f000 fe71 	bl	8004d60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004096:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <MX_TIM15_Init+0x140>)
 80040a6:	f005 fcff 	bl	8009aa8 <HAL_TIMEx_ConfigBreakDeadTime>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 80040b0:	f000 fe56 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80040b4:	4803      	ldr	r0, [pc, #12]	@ (80040c4 <MX_TIM15_Init+0x140>)
 80040b6:	f000 ffe7 	bl	8005088 <HAL_TIM_MspPostInit>

}
 80040ba:	bf00      	nop
 80040bc:	3770      	adds	r7, #112	@ 0x70
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000748 	.word	0x20000748
 80040c8:	40014000 	.word	0x40014000

080040cc <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <MX_TIM16_Init+0x5c>)
 80040d4:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 80040d6:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040d8:	22a9      	movs	r2, #169	@ 0xa9
 80040da:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040e4:	f240 4279 	movw	r2, #1145	@ 0x479
 80040e8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80040fc:	4809      	ldr	r0, [pc, #36]	@ (8004124 <MX_TIM16_Init+0x58>)
 80040fe:	f003 f875 	bl	80071ec <HAL_TIM_Base_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM16_Init+0x40>
		Error_Handler();
 8004108:	f000 fe2a 	bl	8004d60 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 800410c:	2108      	movs	r1, #8
 800410e:	4805      	ldr	r0, [pc, #20]	@ (8004124 <MX_TIM16_Init+0x58>)
 8004110:	f003 fca0 	bl	8007a54 <HAL_TIM_OnePulse_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM16_Init+0x52>
		Error_Handler();
 800411a:	f000 fe21 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000814 	.word	0x20000814
 8004128:	40014400 	.word	0x40014400

0800412c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004130:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004132:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <MX_USART2_UART_Init+0x98>)
 8004134:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8004136:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004138:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800413c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004144:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004146:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004148:	2200      	movs	r2, #0
 800414a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 800414c:	4b1c      	ldr	r3, [pc, #112]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004156:	220c      	movs	r2, #12
 8004158:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415a:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004166:	4b16      	ldr	r3, [pc, #88]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 8004174:	2200      	movs	r2, #0
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004178:	4811      	ldr	r0, [pc, #68]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800417a:	f005 fd79 	bl	8009c70 <HAL_UART_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8004184:	f000 fdec 	bl	8004d60 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8004188:	2100      	movs	r1, #0
 800418a:	480d      	ldr	r0, [pc, #52]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800418c:	f007 fbb5 	bl	800b8fa <HAL_UARTEx_SetTxFifoThreshold>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8004196:	f000 fde3 	bl	8004d60 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800419a:	2100      	movs	r1, #0
 800419c:	4808      	ldr	r0, [pc, #32]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 800419e:	f007 fbea 	bl	800b976 <HAL_UARTEx_SetRxFifoThreshold>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 80041a8:	f000 fdda 	bl	8004d60 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80041ac:	4804      	ldr	r0, [pc, #16]	@ (80041c0 <MX_USART2_UART_Init+0x94>)
 80041ae:	f007 fb6b 	bl	800b888 <HAL_UARTEx_DisableFifoMode>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USART2_UART_Init+0x90>
		Error_Handler();
 80041b8:	f000 fdd2 	bl	8004d60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200008e0 	.word	0x200008e0
 80041c4:	40004400 	.word	0x40004400

080041c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80041ce:	4b16      	ldr	r3, [pc, #88]	@ (8004228 <MX_DMA_Init+0x60>)
 80041d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d2:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <MX_DMA_Init+0x60>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80041da:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <MX_DMA_Init+0x60>)
 80041dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <MX_DMA_Init+0x60>)
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <MX_DMA_Init+0x60>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <MX_DMA_Init+0x60>)
 80041f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	200b      	movs	r0, #11
 8004204:	f001 fa91 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004208:	200b      	movs	r0, #11
 800420a:	f001 faa8 	bl	800575e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	200c      	movs	r0, #12
 8004214:	f001 fa89 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004218:	200c      	movs	r0, #12
 800421a:	f001 faa0 	bl	800575e <HAL_NVIC_EnableIRQ>

}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000

0800422c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	@ 0x28
 8004230:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004242:	4b74      	ldr	r3, [pc, #464]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	4a73      	ldr	r2, [pc, #460]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424e:	4b71      	ldr	r3, [pc, #452]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800425a:	4b6e      	ldr	r3, [pc, #440]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425e:	4a6d      	ldr	r2, [pc, #436]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004260:	f043 0320 	orr.w	r3, r3, #32
 8004264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004266:	4b6b      	ldr	r3, [pc, #428]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	4b68      	ldr	r3, [pc, #416]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	4a67      	ldr	r2, [pc, #412]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800427e:	4b65      	ldr	r3, [pc, #404]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800428a:	4b62      	ldr	r3, [pc, #392]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	4a61      	ldr	r2, [pc, #388]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004296:	4b5f      	ldr	r3, [pc, #380]	@ (8004414 <MX_GPIO_Init+0x1e8>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2120      	movs	r1, #32
 80042a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042aa:	f001 ff3f 	bl	800612c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 80042ae:	2200      	movs	r2, #0
 80042b0:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 80042b4:	4858      	ldr	r0, [pc, #352]	@ (8004418 <MX_GPIO_Init+0x1ec>)
 80042b6:	f001 ff39 	bl	800612c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 80042ba:	230d      	movs	r3, #13
 80042bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80042be:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80042c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4852      	ldr	r0, [pc, #328]	@ (8004418 <MX_GPIO_Init+0x1ec>)
 80042d0:	f001 fd92 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80042d4:	2320      	movs	r3, #32
 80042d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d8:	2301      	movs	r3, #1
 80042da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042ee:	f001 fd83 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80042f2:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80042f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f8:	2301      	movs	r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004300:	2300      	movs	r3, #0
 8004302:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4619      	mov	r1, r3
 800430a:	4843      	ldr	r0, [pc, #268]	@ (8004418 <MX_GPIO_Init+0x1ec>)
 800430c:	f001 fd74 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8004310:	f640 0304 	movw	r3, #2052	@ 0x804
 8004314:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	483d      	ldr	r0, [pc, #244]	@ (800441c <MX_GPIO_Init+0x1f0>)
 8004326:	f001 fd67 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 800432a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800432e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004330:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004334:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004336:	2302      	movs	r3, #2
 8004338:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	4619      	mov	r1, r3
 8004340:	4836      	ldr	r0, [pc, #216]	@ (800441c <MX_GPIO_Init+0x1f0>)
 8004342:	f001 fd59 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800434c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004350:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004352:	2302      	movs	r3, #2
 8004354:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	4619      	mov	r1, r3
 800435c:	482f      	ldr	r0, [pc, #188]	@ (800441c <MX_GPIO_Init+0x1f0>)
 800435e:	f001 fd4b 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004366:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004368:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800436c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800437c:	f001 fd3c 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004384:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004386:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800438a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800438c:	2302      	movs	r3, #2
 800438e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	4619      	mov	r1, r3
 8004396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800439a:	f001 fd2d 	bl	8005df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800439e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043aa:	2302      	movs	r3, #2
 80043ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	4619      	mov	r1, r3
 80043b4:	4818      	ldr	r0, [pc, #96]	@ (8004418 <MX_GPIO_Init+0x1ec>)
 80043b6:	f001 fd1f 	bl	8005df8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2006      	movs	r0, #6
 80043c0:	f001 f9b3 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80043c4:	2006      	movs	r0, #6
 80043c6:	f001 f9ca 	bl	800575e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2100      	movs	r1, #0
 80043ce:	2008      	movs	r0, #8
 80043d0:	f001 f9ab 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80043d4:	2008      	movs	r0, #8
 80043d6:	f001 f9c2 	bl	800575e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	2009      	movs	r0, #9
 80043e0:	f001 f9a3 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80043e4:	2009      	movs	r0, #9
 80043e6:	f001 f9ba 	bl	800575e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	2017      	movs	r0, #23
 80043f0:	f001 f99b 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043f4:	2017      	movs	r0, #23
 80043f6:	f001 f9b2 	bl	800575e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	2028      	movs	r0, #40	@ 0x28
 8004400:	f001 f993 	bl	800572a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004404:	2028      	movs	r0, #40	@ 0x28
 8004406:	f001 f9aa 	bl	800575e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800440a:	bf00      	nop
 800440c:	3728      	adds	r7, #40	@ 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	48000800 	.word	0x48000800
 800441c:	48000400 	.word	0x48000400

08004420 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	ed87 0a05 	vstr	s0, [r7, #20]
 800442a:	edc7 0a04 	vstr	s1, [r7, #16]
 800442e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004432:	edc7 1a02 	vstr	s3, [r7, #8]
 8004436:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800443a:	ed97 7a05 	vldr	s14, [r7, #20]
 800443e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004446:	edd7 6a01 	vldr	s13, [r7, #4]
 800444a:	edd7 7a02 	vldr	s15, [r7, #8]
 800444e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004452:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004456:	ed97 7a03 	vldr	s14, [r7, #12]
 800445a:	edd7 7a04 	vldr	s15, [r7, #16]
 800445e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	edd7 7a02 	vldr	s15, [r7, #8]
 800446a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800446e:	eeb0 0a67 	vmov.f32	s0, s15
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DWT_Init>:

void DWT_Init(void) {
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <DWT_Init+0x28>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <DWT_Init+0x28>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800448a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <DWT_Init+0x2c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <DWT_Init+0x2c>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000edf0 	.word	0xe000edf0
 80044a8:	e0001000 	.word	0xe0001000

080044ac <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044bc:	d10e      	bne.n	80044dc <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80044be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044c6:	f001 fe19 	bl	80060fc <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 80044d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004600 <HAL_GPIO_EXTI_Callback+0x154>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b49      	ldr	r3, [pc, #292]	@ (8004600 <HAL_GPIO_EXTI_Callback+0x154>)
 80044da:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d10d      	bne.n	8004500 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 80044e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044e8:	4846      	ldr	r0, [pc, #280]	@ (8004604 <HAL_GPIO_EXTI_Callback+0x158>)
 80044ea:	f001 fe07 	bl	80060fc <HAL_GPIO_ReadPin>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 80044f4:	4b44      	ldr	r3, [pc, #272]	@ (8004608 <HAL_GPIO_EXTI_Callback+0x15c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 80044fa:	4b44      	ldr	r3, [pc, #272]	@ (800460c <HAL_GPIO_EXTI_Callback+0x160>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004506:	d10e      	bne.n	8004526 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8004508:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800450c:	4840      	ldr	r0, [pc, #256]	@ (8004610 <HAL_GPIO_EXTI_Callback+0x164>)
 800450e:	f001 fdf5 	bl	80060fc <HAL_GPIO_ReadPin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d103      	bne.n	8004520 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 8004518:	4b3e      	ldr	r3, [pc, #248]	@ (8004614 <HAL_GPIO_EXTI_Callback+0x168>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e002      	b.n	8004526 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 8004520:	4b3c      	ldr	r3, [pc, #240]	@ (8004614 <HAL_GPIO_EXTI_Callback+0x168>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800452c:	d10e      	bne.n	800454c <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 800452e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004532:	4837      	ldr	r0, [pc, #220]	@ (8004610 <HAL_GPIO_EXTI_Callback+0x164>)
 8004534:	f001 fde2 	bl	80060fc <HAL_GPIO_ReadPin>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d103      	bne.n	8004546 <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e002      	b.n	800454c <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 8004546:	4b34      	ldr	r3, [pc, #208]	@ (8004618 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004552:	d102      	bne.n	800455a <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 8004554:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <HAL_GPIO_EXTI_Callback+0x160>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 800455a:	4b30      	ldr	r3, [pc, #192]	@ (800461c <HAL_GPIO_EXTI_Callback+0x170>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0;      // PC0
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e00a      	b.n	8004582 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d102      	bne.n	8004578 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8004572:	2301      	movs	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e004      	b.n	8004582 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b08      	cmp	r3, #8
 800457c:	d13b      	bne.n	80045f6 <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 800457e:	2302      	movs	r3, #2
 8004580:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8004582:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <HAL_GPIO_EXTI_Callback+0x174>)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 800458e:	4925      	ldr	r1, [pc, #148]	@ (8004624 <HAL_GPIO_EXTI_Callback+0x178>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8004598:	4a21      	ldr	r2, [pc, #132]	@ (8004620 <HAL_GPIO_EXTI_Callback+0x174>)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e029      	b.n	80045f8 <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 80045a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004624 <HAL_GPIO_EXTI_Callback+0x178>)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d306      	bcc.n	80045c0 <HAL_GPIO_EXTI_Callback+0x114>
 80045b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004624 <HAL_GPIO_EXTI_Callback+0x178>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	e006      	b.n	80045ce <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <HAL_GPIO_EXTI_Callback+0x178>)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 80045cc:	3b01      	subs	r3, #1
		uint32_t delta =
 80045ce:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 80045d0:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_GPIO_EXTI_Callback+0x17c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a15      	ldr	r2, [pc, #84]	@ (800462c <HAL_GPIO_EXTI_Callback+0x180>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0c9b      	lsrs	r3, r3, #18
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e2:	4913      	ldr	r1, [pc, #76]	@ (8004630 <HAL_GPIO_EXTI_Callback+0x184>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 80045ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004620 <HAL_GPIO_EXTI_Callback+0x174>)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e000      	b.n	80045f8 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80045f6:	bf00      	nop
	}
}
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000b38 	.word	0x20000b38
 8004604:	48000800 	.word	0x48000800
 8004608:	20000b7c 	.word	0x20000b7c
 800460c:	20000b7d 	.word	0x20000b7d
 8004610:	48000400 	.word	0x48000400
 8004614:	20000b81 	.word	0x20000b81
 8004618:	20000b82 	.word	0x20000b82
 800461c:	e0001000 	.word	0xe0001000
 8004620:	200012b4 	.word	0x200012b4
 8004624:	20000aa0 	.word	0x20000aa0
 8004628:	20000200 	.word	0x20000200
 800462c:	431bde83 	.word	0x431bde83
 8004630:	20000aac 	.word	0x20000aac

08004634 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004634:	b4b0      	push	{r4, r5, r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a08      	ldr	r2, [pc, #32]	@ (8004660 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004644:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	1e54      	subs	r4, r2, #1
 800464c:	f143 0500 	adc.w	r5, r3, #0
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004652:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bcb0      	pop	{r4, r5, r7}
 800465e:	4770      	bx	lr
 8004660:	200005b0 	.word	0x200005b0
 8004664:	20000a70 	.word	0x20000a70

08004668 <micros>:
uint64_t micros() {
 8004668:	b4b0      	push	{r4, r5, r7}
 800466a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <micros+0x2c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	2200      	movs	r2, #0
 8004674:	4618      	mov	r0, r3
 8004676:	4611      	mov	r1, r2
 8004678:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <micros+0x30>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	1884      	adds	r4, r0, r2
 8004680:	eb41 0503 	adc.w	r5, r1, r3
 8004684:	4622      	mov	r2, r4
 8004686:	462b      	mov	r3, r5
}
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	bcb0      	pop	{r4, r5, r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200005b0 	.word	0x200005b0
 8004698:	20000a70 	.word	0x20000a70

0800469c <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 800469c:	b480      	push	{r7}
 800469e:	b08f      	sub	sp, #60	@ 0x3c
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	ed87 0a07 	vstr	s0, [r7, #28]
 80046a6:	edc7 0a06 	vstr	s1, [r7, #24]
 80046aa:	ed87 1a05 	vstr	s2, [r7, #20]
 80046ae:	edc7 1a04 	vstr	s3, [r7, #16]
 80046b2:	ed87 2a03 	vstr	s4, [r7, #12]
 80046b6:	edc7 2a02 	vstr	s5, [r7, #8]
 80046ba:	ed87 3a01 	vstr	s6, [r7, #4]
 80046be:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 80046c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80046c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	ed93 7a00 	vldr	s14, [r3]
 80046d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046da:	edd7 7a03 	vldr	s15, [r7, #12]
 80046de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	ed93 7a00 	vldr	s14, [r3]
 80046f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80046f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80046fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80046fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004706:	dd08      	ble.n	800471a <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004708:	edd7 6a01 	vldr	s13, [r7, #4]
 800470c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	ed93 7a00 	vldr	s14, [r3]
 8004720:	ed97 6a02 	vldr	s12, [r7, #8]
 8004724:	edd7 6a05 	vldr	s13, [r7, #20]
 8004728:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800472c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	d508      	bpl.n	8004748 <PID_Update+0xac>
		state->integ = outMin / kI;
 8004736:	edd7 6a02 	vldr	s13, [r7, #8]
 800473a:	ed97 7a05 	vldr	s14, [r7, #20]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004748:	edd7 7a07 	vldr	s15, [r7, #28]
 800474c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	dd0b      	ble.n	800476e <PID_Update+0xd2>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	d503      	bpl.n	800476e <PID_Update+0xd2>
		state->integ = 0;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 800476e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d50b      	bpl.n	8004794 <PID_Update+0xf8>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	dd03      	ble.n	8004794 <PID_Update+0xf8>
		state->integ = 0;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ed97 7a05 	vldr	s14, [r7, #20]
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80047ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80047b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80047b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80047b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047bc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 80047c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80047c4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80047c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 80047d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80047da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80047de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80047e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 80047ee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80047f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	dd01      	ble.n	8004804 <PID_Update+0x168>
		out = outMax;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8004804:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004808:	edd7 7a02 	vldr	s15, [r7, #8]
 800480c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004814:	d501      	bpl.n	800481a <PID_Update+0x17e>
		out = outMin;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 800481a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481c:	ee07 3a90 	vmov	s15, r3
}
 8004820:	eeb0 0a67 	vmov.f32	s0, s15
 8004824:	373c      	adds	r7, #60	@ 0x3c
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004838:	f7ff ff16 	bl	8004668 <micros>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	496b      	ldr	r1, [pc, #428]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004842:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8004846:	4b6b      	ldr	r3, [pc, #428]	@ (80049f4 <Revolute_PosVel_Update+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	4a68      	ldr	r2, [pc, #416]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800484e:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004850:	4b67      	ldr	r3, [pc, #412]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004860:	4b63      	ldr	r3, [pc, #396]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004862:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004866:	4b62      	ldr	r3, [pc, #392]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004868:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 800486a:	4b61      	ldr	r3, [pc, #388]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004870:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004878:	dd04      	ble.n	8004884 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e007      	b.n	8004894 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800488a:	da03      	bge.n	8004894 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004892:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004894:	4b56      	ldr	r3, [pc, #344]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004896:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 800489a:	4b55      	ldr	r3, [pc, #340]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800489c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80048a0:	ebb0 0a02 	subs.w	sl, r0, r2
 80048a4:	eb61 0b03 	sbc.w	fp, r1, r3
 80048a8:	4650      	mov	r0, sl
 80048aa:	4659      	mov	r1, fp
 80048ac:	f7fc fa42 	bl	8000d34 <__aeabi_ul2f>
 80048b0:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 80048b4:	eddf 7a50 	vldr	s15, [pc, #320]	@ 80049f8 <Revolute_PosVel_Update+0x1c8>
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 80048c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80048c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	f000 8087 	beq.w	80049de <Revolute_PosVel_Update+0x1ae>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80048da:	ed97 7a02 	vldr	s14, [r7, #8]
 80048de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e2:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80048e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80048ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80048f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80048f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80048f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 80048fc:	4b3c      	ldr	r3, [pc, #240]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80048fe:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004902:	4a3b      	ldr	r2, [pc, #236]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fb fde9 	bl	80004e0 <__aeabi_f2d>
 800490e:	a336      	add	r3, pc, #216	@ (adr r3, 80049e8 <Revolute_PosVel_Update+0x1b8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe3c 	bl	8000590 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	f7fc f8f0 	bl	8000b04 <__aeabi_d2f>
 8004924:	4603      	mov	r3, r0
 8004926:	4a32      	ldr	r2, [pc, #200]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004928:	6253      	str	r3, [r2, #36]	@ 0x24
	float alpha = 0.4f;
 800492a:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <Revolute_PosVel_Update+0x1cc>)
 800492c:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = alpha * Revolute_QEIdata.Velocity
 800492e:	4b30      	ldr	r3, [pc, #192]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004930:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004934:	edd7 7a00 	vldr	s15, [r7]
 8004938:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - alpha) * Revolute_QEIdata.Velocity_f;
 800493c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004940:	edd7 7a00 	vldr	s15, [r7]
 8004944:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004948:	4b29      	ldr	r3, [pc, #164]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800494a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800494e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004952:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = alpha * Revolute_QEIdata.Velocity
 8004956:	4b26      	ldr	r3, [pc, #152]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004958:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 800495c:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fdbd 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004966:	a320      	add	r3, pc, #128	@ (adr r3, 80049e8 <Revolute_PosVel_Update+0x1b8>)
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fe10 	bl	8000590 <__aeabi_dmul>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	f7fc f8c4 	bl	8000b04 <__aeabi_d2f>
 800497c:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 800497e:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004980:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 8004984:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	17c8      	asrs	r0, r1, #31
 800498c:	460c      	mov	r4, r1
 800498e:	4605      	mov	r5, r0
 8004990:	eb12 0804 	adds.w	r8, r2, r4
 8004994:	eb43 0905 	adc.w	r9, r3, r5
 8004998:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 800499a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 800499e:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7fb fdc4 	bl	8000534 <__aeabi_l2d>
 80049ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80049e8 <Revolute_PosVel_Update+0x1b8>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb fded 	bl	8000590 <__aeabi_dmul>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7fc f8a1 	bl	8000b04 <__aeabi_d2f>
 80049c2:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 80049c4:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049c6:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a08      	ldr	r2, [pc, #32]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049ce:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049d6:	4906      	ldr	r1, [pc, #24]	@ (80049f0 <Revolute_PosVel_Update+0x1c0>)
 80049d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80049dc:	e000      	b.n	80049e0 <Revolute_PosVel_Update+0x1b0>
		return;
 80049de:	bf00      	nop
}
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e8:	54442d18 	.word	0x54442d18
 80049ec:	3f3921fb 	.word	0x3f3921fb
 80049f0:	20000ac0 	.word	0x20000ac0
 80049f4:	200004e4 	.word	0x200004e4
 80049f8:	358637bd 	.word	0x358637bd
 80049fc:	3ecccccd 	.word	0x3ecccccd

08004a00 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004a08:	f7ff fe2e 	bl	8004668 <micros>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	494c      	ldr	r1, [pc, #304]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a12:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004a16:	4b4c      	ldr	r3, [pc, #304]	@ (8004b48 <Prismatic_PosVel_Update+0x148>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	4a49      	ldr	r2, [pc, #292]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a1e:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004a20:	4b48      	ldr	r3, [pc, #288]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a22:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004a24:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004a2a:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a32:	dd04      	ble.n	8004a3e <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e007      	b.n	8004a4e <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004a44:	da03      	bge.n	8004a4e <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004a4c:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004a54:	4b3b      	ldr	r3, [pc, #236]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004a56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a5a:	ebb0 0a02 	subs.w	sl, r0, r2
 8004a5e:	eb61 0b03 	sbc.w	fp, r1, r3
 8004a62:	4650      	mov	r0, sl
 8004a64:	4659      	mov	r1, fp
 8004a66:	f7fc f965 	bl	8000d34 <__aeabi_ul2f>
 8004a6a:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004a6e:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004b4c <Prismatic_PosVel_Update+0x14c>
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d057      	beq.n	8004b38 <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a92:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004a9e:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004aa0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004aa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004aa8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004aac:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004ab4:	4b23      	ldr	r3, [pc, #140]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004ab6:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004aba:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ac4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004b50 <Prismatic_PosVel_Update+0x150>
 8004ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004acc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004ace:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004ad4:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004ad8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004b50 <Prismatic_PosVel_Update+0x150>
 8004adc:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004ae0:	4b18      	ldr	r3, [pc, #96]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004ae2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004ae6:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004ae8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	17c8      	asrs	r0, r1, #31
 8004af0:	460c      	mov	r4, r1
 8004af2:	4605      	mov	r5, r0
 8004af4:	eb12 0804 	adds.w	r8, r2, r4
 8004af8:	eb43 0905 	adc.w	r9, r3, r5
 8004afc:	4b11      	ldr	r3, [pc, #68]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004afe:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f7fc f91a 	bl	8000d44 <__aeabi_l2f>
 8004b10:	ee07 0a10 	vmov	s14, r0
 8004b14:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004b50 <Prismatic_PosVel_Update+0x150>
 8004b18:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004b1c:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b1e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004b22:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b28:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b30:	4904      	ldr	r1, [pc, #16]	@ (8004b44 <Prismatic_PosVel_Update+0x144>)
 8004b32:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004b36:	e000      	b.n	8004b3a <Prismatic_PosVel_Update+0x13a>
		return;
 8004b38:	bf00      	nop
}
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	20000b00 	.word	0x20000b00
 8004b48:	20000418 	.word	0x20000418
 8004b4c:	358637bd 	.word	0x358637bd
 8004b50:	3aa00000 	.word	0x3aa00000

08004b54 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004b60:	edd7 7a00 	vldr	s15, [r7]
 8004b64:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004c38 <Set_Motor+0xe4>
 8004b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	dd01      	ble.n	8004b76 <Set_Motor+0x22>
		speed = 100.0f;
 8004b72:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <Set_Motor+0xe8>)
 8004b74:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004b76:	edd7 7a00 	vldr	s15, [r7]
 8004b7a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004c40 <Set_Motor+0xec>
 8004b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d501      	bpl.n	8004b8c <Set_Motor+0x38>
		speed = -100.0f;
 8004b88:	4b2e      	ldr	r3, [pc, #184]	@ (8004c44 <Set_Motor+0xf0>)
 8004b8a:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004b8c:	edd7 7a00 	vldr	s15, [r7]
 8004b90:	eef0 7ae7 	vabs.f32	s15, s15
 8004b94:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004c38 <Set_Motor+0xe4>
 8004b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b9c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c38 <Set_Motor+0xe4>
 8004ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 3a90 	vmov	r3, s15
 8004bac:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d11d      	bne.n	8004bf0 <Set_Motor+0x9c>
		if (speed > 0) {
 8004bb4:	edd7 7a00 	vldr	s15, [r7]
 8004bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc0:	dd05      	ble.n	8004bce <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2120      	movs	r1, #32
 8004bc6:	4820      	ldr	r0, [pc, #128]	@ (8004c48 <Set_Motor+0xf4>)
 8004bc8:	f001 fab0 	bl	800612c <HAL_GPIO_WritePin>
 8004bcc:	e00b      	b.n	8004be6 <Set_Motor+0x92>
		} else if (speed < 0) {
 8004bce:	edd7 7a00 	vldr	s15, [r7]
 8004bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d504      	bpl.n	8004be6 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2120      	movs	r1, #32
 8004be0:	4819      	ldr	r0, [pc, #100]	@ (8004c48 <Set_Motor+0xf4>)
 8004be2:	f001 faa3 	bl	800612c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004be6:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <Set_Motor+0xf8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004bee:	e01f      	b.n	8004c30 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d11c      	bne.n	8004c30 <Set_Motor+0xdc>
		if (speed > 0) {
 8004bf6:	edd7 7a00 	vldr	s15, [r7]
 8004bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	dd05      	ble.n	8004c10 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	@ 0x40
 8004c08:	480f      	ldr	r0, [pc, #60]	@ (8004c48 <Set_Motor+0xf4>)
 8004c0a:	f001 fa8f 	bl	800612c <HAL_GPIO_WritePin>
 8004c0e:	e00b      	b.n	8004c28 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1c:	d504      	bpl.n	8004c28 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2140      	movs	r1, #64	@ 0x40
 8004c22:	4809      	ldr	r0, [pc, #36]	@ (8004c48 <Set_Motor+0xf4>)
 8004c24:	f001 fa82 	bl	800612c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <Set_Motor+0xf8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	42c80000 	.word	0x42c80000
 8004c3c:	42c80000 	.word	0x42c80000
 8004c40:	c2c80000 	.word	0xc2c80000
 8004c44:	c2c80000 	.word	0xc2c80000
 8004c48:	48000800 	.word	0x48000800
 8004c4c:	2000067c 	.word	0x2000067c

08004c50 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <Set_Servo+0x48>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004c66:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <Set_Servo+0x4c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004c6e:	f7ff fcfb 	bl	8004668 <micros>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	490a      	ldr	r1, [pc, #40]	@ (8004ca0 <Set_Servo+0x50>)
 8004c78:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004c7c:	e007      	b.n	8004c8e <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <Set_Servo+0x48>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c86:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <Set_Servo+0x4c>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000748 	.word	0x20000748
 8004c9c:	20000b80 	.word	0x20000b80
 8004ca0:	20000be8 	.word	0x20000be8

08004ca4 <Reset_R>:

void Reset_R() {
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004ca8:	4905      	ldr	r1, [pc, #20]	@ (8004cc0 <Reset_R+0x1c>)
 8004caa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000ac0 	.word	0x20000ac0

08004cc4 <Reset_P>:
void Reset_P() {
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004cc8:	4905      	ldr	r1, [pc, #20]	@ (8004ce0 <Reset_P+0x1c>)
 8004cca:	4a06      	ldr	r2, [pc, #24]	@ (8004ce4 <Reset_P+0x20>)
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000b00 	.word	0x20000b00
 8004ce4:	fffff99a 	.word	0xfffff99a

08004ce8 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8004cfc:	4b16      	ldr	r3, [pc, #88]	@ (8004d58 <Get_QRIdata+0x70>)
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <Get_QRIdata+0x70>)
 8004d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <Get_QRIdata+0x70>)
 8004d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <Get_QRIdata+0x74>)
 8004d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8004d34:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <Get_QRIdata+0x74>)
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <Get_QRIdata+0x74>)
 8004d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000b00 	.word	0x20000b00
 8004d5c:	20000ac0 	.word	0x20000ac0

08004d60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
}
 8004d66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <Error_Handler+0x8>

08004d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d72:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d76:	4a0e      	ldr	r2, [pc, #56]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	4a08      	ldr	r2, [pc, #32]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d96:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <HAL_MspInit+0x44>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004da2:	f001 fa97 	bl	80062d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000

08004db4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	@ 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	f107 031c 	add.w	r3, r7, #28
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a32      	ldr	r2, [pc, #200]	@ (8004e9c <HAL_TIM_IC_MspInit+0xe8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d130      	bne.n	8004e38 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dd6:	4b32      	ldr	r3, [pc, #200]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dda:	4a31      	ldr	r2, [pc, #196]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004de2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dfa:	4b29      	ldr	r3, [pc, #164]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e06:	2302      	movs	r3, #2
 8004e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004e16:	2302      	movs	r3, #2
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e1a:	f107 031c 	add.w	r3, r7, #28
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4820      	ldr	r0, [pc, #128]	@ (8004ea4 <HAL_TIM_IC_MspInit+0xf0>)
 8004e22:	f000 ffe9 	bl	8005df8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2019      	movs	r0, #25
 8004e2c:	f000 fc7d 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e30:	2019      	movs	r0, #25
 8004e32:	f000 fc94 	bl	800575e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e36:	e02d      	b.n	8004e94 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d128      	bne.n	8004e94 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e42:	4b17      	ldr	r3, [pc, #92]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	4a16      	ldr	r2, [pc, #88]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea0 <HAL_TIM_IC_MspInit+0xec>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e76:	2302      	movs	r3, #2
 8004e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e82:	2301      	movs	r3, #1
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	f107 031c 	add.w	r3, r7, #28
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e90:	f000 ffb2 	bl	8005df8 <HAL_GPIO_Init>
}
 8004e94:	bf00      	nop
 8004e96:	3730      	adds	r7, #48	@ 0x30
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	48000800 	.word	0x48000800

08004ea8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	@ 0x30
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f107 031c 	add.w	r3, r7, #28
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a37      	ldr	r2, [pc, #220]	@ (8004fa4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d130      	bne.n	8004f2c <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eca:	4b37      	ldr	r3, [pc, #220]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	4a36      	ldr	r2, [pc, #216]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed6:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	4a30      	ldr	r2, [pc, #192]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eee:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004efa:	2330      	movs	r3, #48	@ 0x30
 8004efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f06:	2300      	movs	r3, #0
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	4619      	mov	r1, r3
 8004f14:	4825      	ldr	r0, [pc, #148]	@ (8004fac <HAL_TIM_Encoder_MspInit+0x104>)
 8004f16:	f000 ff6f 	bl	8005df8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	201d      	movs	r0, #29
 8004f20:	f000 fc03 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f24:	201d      	movs	r0, #29
 8004f26:	f000 fc1a 	bl	800575e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f2a:	e036      	b.n	8004f9a <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb0 <HAL_TIM_Encoder_MspInit+0x108>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d131      	bne.n	8004f9a <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f36:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f3c:	f043 0304 	orr.w	r3, r3, #4
 8004f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	4a15      	ldr	r2, [pc, #84]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f5a:	4b13      	ldr	r3, [pc, #76]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004f78:	230a      	movs	r3, #10
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7c:	f107 031c 	add.w	r3, r7, #28
 8004f80:	4619      	mov	r1, r3
 8004f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f86:	f000 ff37 	bl	8005df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	201e      	movs	r0, #30
 8004f90:	f000 fbcb 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f94:	201e      	movs	r0, #30
 8004f96:	f000 fbe2 	bl	800575e <HAL_NVIC_EnableIRQ>
}
 8004f9a:	bf00      	nop
 8004f9c:	3730      	adds	r7, #48	@ 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	48000400 	.word	0x48000400
 8004fb0:	40000800 	.word	0x40000800

08004fb4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8005074 <HAL_TIM_Base_MspInit+0xc0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d114      	bne.n	8004ff0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8004fcc:	f043 0308 	orr.w	r3, r3, #8
 8004fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd2:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	2032      	movs	r0, #50	@ 0x32
 8004fe4:	f000 fba1 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004fe8:	2032      	movs	r0, #50	@ 0x32
 8004fea:	f000 fbb8 	bl	800575e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004fee:	e03c      	b.n	800506a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a21      	ldr	r2, [pc, #132]	@ (800507c <HAL_TIM_Base_MspInit+0xc8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10c      	bne.n	8005014 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005000:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005004:	6613      	str	r3, [r2, #96]	@ 0x60
 8005006:	4b1c      	ldr	r3, [pc, #112]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
}
 8005012:	e02a      	b.n	800506a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	@ (8005080 <HAL_TIM_Base_MspInit+0xcc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d10c      	bne.n	8005038 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800501e:	4b16      	ldr	r3, [pc, #88]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005022:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005028:	6613      	str	r3, [r2, #96]	@ 0x60
 800502a:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 800502c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
}
 8005036:	e018      	b.n	800506a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <HAL_TIM_Base_MspInit+0xd0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d113      	bne.n	800506a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	4a0c      	ldr	r2, [pc, #48]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800504c:	6613      	str	r3, [r2, #96]	@ 0x60
 800504e:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <HAL_TIM_Base_MspInit+0xc4>)
 8005050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	2019      	movs	r0, #25
 8005060:	f000 fb63 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005064:	2019      	movs	r0, #25
 8005066:	f000 fb7a 	bl	800575e <HAL_NVIC_EnableIRQ>
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40021000 	.word	0x40021000
 800507c:	40013400 	.word	0x40013400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400

08005088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	@ 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	@ (8005134 <HAL_TIM_MspPostInit+0xac>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d11d      	bne.n	80050e6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050aa:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050b6:	4b20      	ldr	r3, [pc, #128]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80050c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c8:	2302      	movs	r3, #2
 80050ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80050d4:	2304      	movs	r3, #4
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4619      	mov	r1, r3
 80050de:	4817      	ldr	r0, [pc, #92]	@ (800513c <HAL_TIM_MspPostInit+0xb4>)
 80050e0:	f000 fe8a 	bl	8005df8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80050e4:	e021      	b.n	800512a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <HAL_TIM_MspPostInit+0xb8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d11c      	bne.n	800512a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f0:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f4:	4a10      	ldr	r2, [pc, #64]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050f6:	f043 0302 	orr.w	r3, r3, #2
 80050fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005138 <HAL_TIM_MspPostInit+0xb0>)
 80050fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005108:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800510c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510e:	2302      	movs	r3, #2
 8005110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005116:	2300      	movs	r3, #0
 8005118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800511a:	2301      	movs	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	4619      	mov	r1, r3
 8005124:	4807      	ldr	r0, [pc, #28]	@ (8005144 <HAL_TIM_MspPostInit+0xbc>)
 8005126:	f000 fe67 	bl	8005df8 <HAL_GPIO_Init>
}
 800512a:	bf00      	nop
 800512c:	3728      	adds	r7, #40	@ 0x28
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40013400 	.word	0x40013400
 8005138:	40021000 	.word	0x40021000
 800513c:	48000800 	.word	0x48000800
 8005140:	40014000 	.word	0x40014000
 8005144:	48000400 	.word	0x48000400

08005148 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b09e      	sub	sp, #120	@ 0x78
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005160:	f107 0310 	add.w	r3, r7, #16
 8005164:	2254      	movs	r2, #84	@ 0x54
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f006 fcc7 	bl	800bafc <memset>
  if(huart->Instance==USART2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4d      	ldr	r2, [pc, #308]	@ (80052a8 <HAL_UART_MspInit+0x160>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f040 8092 	bne.w	800529e <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800517a:	2302      	movs	r3, #2
 800517c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005182:	f107 0310 	add.w	r3, r7, #16
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fde2 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005192:	f7ff fde5 	bl	8004d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005196:	4b45      	ldr	r3, [pc, #276]	@ (80052ac <HAL_UART_MspInit+0x164>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519a:	4a44      	ldr	r2, [pc, #272]	@ (80052ac <HAL_UART_MspInit+0x164>)
 800519c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a2:	4b42      	ldr	r3, [pc, #264]	@ (80052ac <HAL_UART_MspInit+0x164>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ae:	4b3f      	ldr	r3, [pc, #252]	@ (80052ac <HAL_UART_MspInit+0x164>)
 80051b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b2:	4a3e      	ldr	r2, [pc, #248]	@ (80052ac <HAL_UART_MspInit+0x164>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051ba:	4b3c      	ldr	r3, [pc, #240]	@ (80052ac <HAL_UART_MspInit+0x164>)
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051c6:	230c      	movs	r3, #12
 80051c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d2:	2300      	movs	r3, #0
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d6:	2307      	movs	r3, #7
 80051d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051de:	4619      	mov	r1, r3
 80051e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051e4:	f000 fe08 	bl	8005df8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80051e8:	4b31      	ldr	r3, [pc, #196]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 80051ea:	4a32      	ldr	r2, [pc, #200]	@ (80052b4 <HAL_UART_MspInit+0x16c>)
 80051ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80051ee:	4b30      	ldr	r3, [pc, #192]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 80051f0:	221a      	movs	r2, #26
 80051f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051f4:	4b2e      	ldr	r3, [pc, #184]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051fa:	4b2d      	ldr	r3, [pc, #180]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005202:	2280      	movs	r2, #128	@ 0x80
 8005204:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005206:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800520c:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005212:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005214:	2200      	movs	r2, #0
 8005216:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 800521a:	2200      	movs	r2, #0
 800521c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800521e:	4824      	ldr	r0, [pc, #144]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005220:	f000 fab8 	bl	8005794 <HAL_DMA_Init>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800522a:	f7ff fd99 	bl	8004d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1f      	ldr	r2, [pc, #124]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <HAL_UART_MspInit+0x168>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800523c:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_UART_MspInit+0x174>)
 8005240:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005242:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005244:	221b      	movs	r2, #27
 8005246:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 800524a:	2210      	movs	r2, #16
 800524c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005250:	2200      	movs	r2, #0
 8005252:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005254:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005256:	2280      	movs	r2, #128	@ 0x80
 8005258:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005260:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005266:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005268:	2200      	movs	r2, #0
 800526a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 800526e:	2200      	movs	r2, #0
 8005270:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005272:	4811      	ldr	r0, [pc, #68]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005274:	f000 fa8e 	bl	8005794 <HAL_DMA_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800527e:	f7ff fd6f 	bl	8004d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 8005286:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005288:	4a0b      	ldr	r2, [pc, #44]	@ (80052b8 <HAL_UART_MspInit+0x170>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	2026      	movs	r0, #38	@ 0x26
 8005294:	f000 fa49 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005298:	2026      	movs	r0, #38	@ 0x26
 800529a:	f000 fa60 	bl	800575e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800529e:	bf00      	nop
 80052a0:	3778      	adds	r7, #120	@ 0x78
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40004400 	.word	0x40004400
 80052ac:	40021000 	.word	0x40021000
 80052b0:	200009ac 	.word	0x200009ac
 80052b4:	40020008 	.word	0x40020008
 80052b8:	20000a0c 	.word	0x20000a0c
 80052bc:	4002001c 	.word	0x4002001c

080052c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <NMI_Handler+0x4>

080052c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <HardFault_Handler+0x4>

080052d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <MemManage_Handler+0x4>

080052d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <BusFault_Handler+0x4>

080052e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <UsageFault_Handler+0x4>

080052e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005316:	f000 f90f 	bl	8005538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}

0800531e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005322:	2001      	movs	r0, #1
 8005324:	f000 ff1a 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}

0800532c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005330:	2004      	movs	r0, #4
 8005332:	f000 ff13 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}

0800533a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800533e:	2008      	movs	r0, #8
 8005340:	f000 ff0c 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}

08005348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800534c:	4802      	ldr	r0, [pc, #8]	@ (8005358 <DMA1_Channel1_IRQHandler+0x10>)
 800534e:	f000 fc04 	bl	8005b5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200009ac 	.word	0x200009ac

0800535c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005360:	4802      	ldr	r0, [pc, #8]	@ (800536c <DMA1_Channel2_IRQHandler+0x10>)
 8005362:	f000 fbfa 	bl	8005b5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000a0c 	.word	0x20000a0c

08005370 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005374:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005378:	f000 fef0 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800537c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005380:	f000 feec 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}

08005388 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800538c:	4803      	ldr	r0, [pc, #12]	@ (800539c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800538e:	f002 fd99 	bl	8007ec4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005392:	4803      	ldr	r0, [pc, #12]	@ (80053a0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005394:	f002 fd96 	bl	8007ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000280 	.word	0x20000280
 80053a0:	20000814 	.word	0x20000814

080053a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80053a8:	4802      	ldr	r0, [pc, #8]	@ (80053b4 <TIM3_IRQHandler+0x10>)
 80053aa:	f002 fd8b 	bl	8007ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000418 	.word	0x20000418

080053b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <TIM4_IRQHandler+0x10>)
 80053be:	f002 fd81 	bl	8007ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200004e4 	.word	0x200004e4

080053cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <USART2_IRQHandler+0x10>)
 80053d2:	f004 fe33 	bl	800a03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200008e0 	.word	0x200008e0

080053e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80053e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80053e8:	f000 feb8 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80053ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80053f0:	f000 feb4 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80053f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80053f8:	f000 feb0 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80053fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005400:	f000 feac 	bl	800615c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}

08005408 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800540c:	4802      	ldr	r0, [pc, #8]	@ (8005418 <TIM5_IRQHandler+0x10>)
 800540e:	f002 fd59 	bl	8007ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200005b0 	.word	0x200005b0

0800541c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005420:	4b06      	ldr	r3, [pc, #24]	@ (800543c <SystemInit+0x20>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	4a05      	ldr	r2, [pc, #20]	@ (800543c <SystemInit+0x20>)
 8005428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800542c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005440:	480d      	ldr	r0, [pc, #52]	@ (8005478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005442:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005444:	f7ff ffea 	bl	800541c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005448:	480c      	ldr	r0, [pc, #48]	@ (800547c <LoopForever+0x6>)
  ldr r1, =_edata
 800544a:	490d      	ldr	r1, [pc, #52]	@ (8005480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800544c:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <LoopForever+0xe>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005450:	e002      	b.n	8005458 <LoopCopyDataInit>

08005452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005456:	3304      	adds	r3, #4

08005458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800545c:	d3f9      	bcc.n	8005452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545e:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005460:	4c0a      	ldr	r4, [pc, #40]	@ (800548c <LoopForever+0x16>)
  movs r3, #0
 8005462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005464:	e001      	b.n	800546a <LoopFillZerobss>

08005466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005468:	3204      	adds	r2, #4

0800546a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800546c:	d3fb      	bcc.n	8005466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800546e:	f006 fb53 	bl	800bb18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005472:	f7fc fbe9 	bl	8001c48 <main>

08005476 <LoopForever>:

LoopForever:
    b LoopForever
 8005476:	e7fe      	b.n	8005476 <LoopForever>
  ldr   r0, =_estack
 8005478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005480:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8005484:	0800ce04 	.word	0x0800ce04
  ldr r2, =_sbss
 8005488:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 800548c:	200013f4 	.word	0x200013f4

08005490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005490:	e7fe      	b.n	8005490 <ADC1_2_IRQHandler>

08005492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800549c:	2003      	movs	r0, #3
 800549e:	f000 f939 	bl	8005714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054a2:	2000      	movs	r0, #0
 80054a4:	f000 f80e 	bl	80054c4 <HAL_InitTick>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	71fb      	strb	r3, [r7, #7]
 80054b2:	e001      	b.n	80054b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054b4:	f7ff fc5a 	bl	8004d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054b8:	79fb      	ldrb	r3, [r7, #7]

}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054d0:	4b16      	ldr	r3, [pc, #88]	@ (800552c <HAL_InitTick+0x68>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d022      	beq.n	800551e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054d8:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <HAL_InitTick+0x6c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b13      	ldr	r3, [pc, #76]	@ (800552c <HAL_InitTick+0x68>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f944 	bl	800577a <HAL_SYSTICK_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10f      	bne.n	8005518 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	d809      	bhi.n	8005512 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054fe:	2200      	movs	r2, #0
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	f000 f910 	bl	800572a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800550a:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <HAL_InitTick+0x70>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e007      	b.n	8005522 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	e004      	b.n	8005522 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	e001      	b.n	8005522 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000208 	.word	0x20000208
 8005530:	20000200 	.word	0x20000200
 8005534:	20000204 	.word	0x20000204

08005538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_IncTick+0x1c>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_IncTick+0x20>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4413      	add	r3, r2
 8005546:	4a03      	ldr	r2, [pc, #12]	@ (8005554 <HAL_IncTick+0x1c>)
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	200012b8 	.word	0x200012b8
 8005558:	20000208 	.word	0x20000208

0800555c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return uwTick;
 8005560:	4b03      	ldr	r3, [pc, #12]	@ (8005570 <HAL_GetTick+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	200012b8 	.word	0x200012b8

08005574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800559c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a6:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	60d3      	str	r3, [r2, #12]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c0:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <__NVIC_GetPriorityGrouping+0x18>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	f003 0307 	and.w	r3, r3, #7
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	db0b      	blt.n	8005602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	4907      	ldr	r1, [pc, #28]	@ (8005610 <__NVIC_EnableIRQ+0x38>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	2001      	movs	r0, #1
 80055fa:	fa00 f202 	lsl.w	r2, r0, r2
 80055fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000e100 	.word	0xe000e100

08005614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	6039      	str	r1, [r7, #0]
 800561e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005624:	2b00      	cmp	r3, #0
 8005626:	db0a      	blt.n	800563e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	490c      	ldr	r1, [pc, #48]	@ (8005660 <__NVIC_SetPriority+0x4c>)
 800562e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005632:	0112      	lsls	r2, r2, #4
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	440b      	add	r3, r1
 8005638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800563c:	e00a      	b.n	8005654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	4908      	ldr	r1, [pc, #32]	@ (8005664 <__NVIC_SetPriority+0x50>)
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	3b04      	subs	r3, #4
 800564c:	0112      	lsls	r2, r2, #4
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	440b      	add	r3, r1
 8005652:	761a      	strb	r2, [r3, #24]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000e100 	.word	0xe000e100
 8005664:	e000ed00 	.word	0xe000ed00

08005668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	@ 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f1c3 0307 	rsb	r3, r3, #7
 8005682:	2b04      	cmp	r3, #4
 8005684:	bf28      	it	cs
 8005686:	2304      	movcs	r3, #4
 8005688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3304      	adds	r3, #4
 800568e:	2b06      	cmp	r3, #6
 8005690:	d902      	bls.n	8005698 <NVIC_EncodePriority+0x30>
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3b03      	subs	r3, #3
 8005696:	e000      	b.n	800569a <NVIC_EncodePriority+0x32>
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	401a      	ands	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b0:	f04f 31ff 	mov.w	r1, #4294967295
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	43d9      	mvns	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c0:	4313      	orrs	r3, r2
         );
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	@ 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e0:	d301      	bcc.n	80056e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056e2:	2301      	movs	r3, #1
 80056e4:	e00f      	b.n	8005706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <SysTick_Config+0x40>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ee:	210f      	movs	r1, #15
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	f7ff ff8e 	bl	8005614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <SysTick_Config+0x40>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fe:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <SysTick_Config+0x40>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010

08005714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff29 	bl	8005574 <__NVIC_SetPriorityGrouping>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	4603      	mov	r3, r0
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff40 	bl	80055bc <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff90 	bl	8005668 <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff5f 	bl	8005614 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff33 	bl	80055d8 <__NVIC_EnableIRQ>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffa4 	bl	80056d0 <SysTick_Config>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e08d      	b.n	80058c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b47      	ldr	r3, [pc, #284]	@ (80058cc <HAL_DMA_Init+0x138>)
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d80f      	bhi.n	80057d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b45      	ldr	r3, [pc, #276]	@ (80058d0 <HAL_DMA_Init+0x13c>)
 80057ba:	4413      	add	r3, r2
 80057bc:	4a45      	ldr	r2, [pc, #276]	@ (80058d4 <HAL_DMA_Init+0x140>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	009a      	lsls	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a42      	ldr	r2, [pc, #264]	@ (80058d8 <HAL_DMA_Init+0x144>)
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80057d0:	e00e      	b.n	80057f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	4b40      	ldr	r3, [pc, #256]	@ (80058dc <HAL_DMA_Init+0x148>)
 80057da:	4413      	add	r3, r2
 80057dc:	4a3d      	ldr	r2, [pc, #244]	@ (80058d4 <HAL_DMA_Init+0x140>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	009a      	lsls	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a3c      	ldr	r2, [pc, #240]	@ (80058e0 <HAL_DMA_Init+0x14c>)
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa76 	bl	8005d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005850:	d102      	bne.n	8005858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800586c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_DMA_Init+0x104>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d80c      	bhi.n	8005898 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa96 	bl	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e008      	b.n	80058aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40020407 	.word	0x40020407
 80058d0:	bffdfff8 	.word	0xbffdfff8
 80058d4:	cccccccd 	.word	0xcccccccd
 80058d8:	40020000 	.word	0x40020000
 80058dc:	bffdfbf8 	.word	0xbffdfbf8
 80058e0:	40020400 	.word	0x40020400

080058e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_DMA_Start_IT+0x20>
 8005900:	2302      	movs	r3, #2
 8005902:	e066      	b.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d155      	bne.n	80059c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f9bb 	bl	8005cb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 020e 	orr.w	r2, r2, #14
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e00f      	b.n	800597c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 020a 	orr.w	r2, r2, #10
 800597a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e005      	b.n	80059d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
 80059ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d005      	beq.n	80059fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
 80059fc:	e037      	b.n	8005a6e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 020e 	bic.w	r2, r2, #14
 8005a0c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a1c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	f003 021f 	and.w	r2, r3, #31
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a40:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a4a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a62:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a6c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
 8005abe:	e047      	b.n	8005b50 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 020e 	bic.w	r2, r2, #14
 8005ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af4:	f003 021f 	and.w	r2, r3, #31
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
    }
  }
  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	409a      	lsls	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d026      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x7a>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d021      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	f003 021f 	and.w	r2, r3, #31
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2104      	movs	r1, #4
 8005bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d071      	beq.n	8005cae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005bd2:	e06c      	b.n	8005cae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	2202      	movs	r2, #2
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02e      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d029      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 020a 	bic.w	r2, r2, #10
 8005c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1c:	f003 021f 	and.w	r2, r3, #31
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	2102      	movs	r1, #2
 8005c26:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d038      	beq.n	8005cae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c44:	e033      	b.n	8005cae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2208      	movs	r2, #8
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02a      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d025      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 020e 	bic.w	r2, r2, #14
 8005c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f003 021f 	and.w	r2, r3, #31
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f202 	lsl.w	r2, r1, r2
 8005c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
}
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ce0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f003 021f 	and.w	r2, r3, #31
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d108      	bne.n	8005d18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d16:	e007      	b.n	8005d28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	4b16      	ldr	r3, [pc, #88]	@ (8005d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d802      	bhi.n	8005d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005d48:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e001      	b.n	8005d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005d4e:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005d50:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	3b08      	subs	r3, #8
 8005d5e:	4a12      	ldr	r2, [pc, #72]	@ (8005da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	009a      	lsls	r2, r3, #2
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005dac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2201      	movs	r2, #1
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40020407 	.word	0x40020407
 8005da0:	40020800 	.word	0x40020800
 8005da4:	40020820 	.word	0x40020820
 8005da8:	cccccccd 	.word	0xcccccccd
 8005dac:	40020880 	.word	0x40020880

08005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a08      	ldr	r2, [pc, #32]	@ (8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005dd2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	2201      	movs	r2, #1
 8005dde:	409a      	lsls	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	1000823f 	.word	0x1000823f
 8005df4:	40020940 	.word	0x40020940

08005df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e06:	e15a      	b.n	80060be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 814c 	beq.w	80060b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d005      	beq.n	8005e38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d130      	bne.n	8005e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e6e:	2201      	movs	r2, #1
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0201 	and.w	r2, r3, #1
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d017      	beq.n	8005ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d123      	bne.n	8005f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	08da      	lsrs	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3208      	adds	r2, #8
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	220f      	movs	r2, #15
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4013      	ands	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	08da      	lsrs	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3208      	adds	r2, #8
 8005f24:	6939      	ldr	r1, [r7, #16]
 8005f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	2203      	movs	r2, #3
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f003 0203 	and.w	r2, r3, #3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a6 	beq.w	80060b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80060dc <HAL_GPIO_Init+0x2e4>)
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f70:	4a5a      	ldr	r2, [pc, #360]	@ (80060dc <HAL_GPIO_Init+0x2e4>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f78:	4b58      	ldr	r3, [pc, #352]	@ (80060dc <HAL_GPIO_Init+0x2e4>)
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f84:	4a56      	ldr	r2, [pc, #344]	@ (80060e0 <HAL_GPIO_Init+0x2e8>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	089b      	lsrs	r3, r3, #2
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	220f      	movs	r2, #15
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005fae:	d01f      	beq.n	8005ff0 <HAL_GPIO_Init+0x1f8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a4c      	ldr	r2, [pc, #304]	@ (80060e4 <HAL_GPIO_Init+0x2ec>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d019      	beq.n	8005fec <HAL_GPIO_Init+0x1f4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a4b      	ldr	r2, [pc, #300]	@ (80060e8 <HAL_GPIO_Init+0x2f0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_GPIO_Init+0x1f0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80060ec <HAL_GPIO_Init+0x2f4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_GPIO_Init+0x1ec>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a49      	ldr	r2, [pc, #292]	@ (80060f0 <HAL_GPIO_Init+0x2f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <HAL_GPIO_Init+0x1e8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a48      	ldr	r2, [pc, #288]	@ (80060f4 <HAL_GPIO_Init+0x2fc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d101      	bne.n	8005fdc <HAL_GPIO_Init+0x1e4>
 8005fd8:	2305      	movs	r3, #5
 8005fda:	e00a      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	e008      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e006      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e004      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e002      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_GPIO_Init+0x1fa>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f002 0203 	and.w	r2, r2, #3
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	4093      	lsls	r3, r2
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006002:	4937      	ldr	r1, [pc, #220]	@ (80060e0 <HAL_GPIO_Init+0x2e8>)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	089b      	lsrs	r3, r3, #2
 8006008:	3302      	adds	r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006010:	4b39      	ldr	r3, [pc, #228]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	43db      	mvns	r3, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4013      	ands	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006034:	4a30      	ldr	r2, [pc, #192]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800603a:	4b2f      	ldr	r3, [pc, #188]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	43db      	mvns	r3, r3
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4013      	ands	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800605e:	4a26      	ldr	r2, [pc, #152]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006064:	4b24      	ldr	r3, [pc, #144]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	43db      	mvns	r3, r3
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006088:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800608e:	4b1a      	ldr	r3, [pc, #104]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	43db      	mvns	r3, r3
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4013      	ands	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060b2:	4a11      	ldr	r2, [pc, #68]	@ (80060f8 <HAL_GPIO_Init+0x300>)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	3301      	adds	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f47f ae9d 	bne.w	8005e08 <HAL_GPIO_Init+0x10>
  }
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40021000 	.word	0x40021000
 80060e0:	40010000 	.word	0x40010000
 80060e4:	48000400 	.word	0x48000400
 80060e8:	48000800 	.word	0x48000800
 80060ec:	48000c00 	.word	0x48000c00
 80060f0:	48001000 	.word	0x48001000
 80060f4:	48001400 	.word	0x48001400
 80060f8:	40010400 	.word	0x40010400

080060fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	887b      	ldrh	r3, [r7, #2]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e001      	b.n	800611e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
 8006138:	4613      	mov	r3, r2
 800613a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800613c:	787b      	ldrb	r3, [r7, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006148:	e002      	b.n	8006150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006166:	4b08      	ldr	r3, [pc, #32]	@ (8006188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d006      	beq.n	8006180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006172:	4a05      	ldr	r2, [pc, #20]	@ (8006188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f996 	bl	80044ac <HAL_GPIO_EXTI_Callback>
  }
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40010400 	.word	0x40010400

0800618c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d141      	bne.n	800621e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800619a:	4b4b      	ldr	r3, [pc, #300]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a6:	d131      	bne.n	800620c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061a8:	4b47      	ldr	r3, [pc, #284]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061ae:	4a46      	ldr	r2, [pc, #280]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b8:	4b43      	ldr	r3, [pc, #268]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061c0:	4a41      	ldr	r2, [pc, #260]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061c8:	4b40      	ldr	r3, [pc, #256]	@ (80062cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2232      	movs	r2, #50	@ 0x32
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	4a3f      	ldr	r2, [pc, #252]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	0c9b      	lsrs	r3, r3, #18
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061de:	e002      	b.n	80061e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e6:	4b38      	ldr	r3, [pc, #224]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f2:	d102      	bne.n	80061fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f2      	bne.n	80061e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061fa:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d158      	bne.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e057      	b.n	80062bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800620c:	4b2e      	ldr	r3, [pc, #184]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006212:	4a2d      	ldr	r2, [pc, #180]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800621c:	e04d      	b.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006224:	d141      	bne.n	80062aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006226:	4b28      	ldr	r3, [pc, #160]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006232:	d131      	bne.n	8006298 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006234:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800623a:	4a23      	ldr	r2, [pc, #140]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006244:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800624c:	4a1e      	ldr	r2, [pc, #120]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006254:	4b1d      	ldr	r3, [pc, #116]	@ (80062cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2232      	movs	r2, #50	@ 0x32
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	0c9b      	lsrs	r3, r3, #18
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800626a:	e002      	b.n	8006272 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006272:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d102      	bne.n	8006286 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f2      	bne.n	800626c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006286:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	d112      	bne.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e011      	b.n	80062bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006298:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800629e:	4a0a      	ldr	r2, [pc, #40]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062a8:	e007      	b.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062aa:	4b07      	ldr	r3, [pc, #28]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062b2:	4a05      	ldr	r2, [pc, #20]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40007000 	.word	0x40007000
 80062cc:	20000200 	.word	0x20000200
 80062d0:	431bde83 	.word	0x431bde83

080062d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80062d8:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062e2:	6093      	str	r3, [r2, #8]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40007000 	.word	0x40007000

080062f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e2fe      	b.n	8006904 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b97      	ldr	r3, [pc, #604]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631c:	4b94      	ldr	r3, [pc, #592]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d102      	bne.n	8006332 <HAL_RCC_OscConfig+0x3e>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d002      	beq.n	8006338 <HAL_RCC_OscConfig+0x44>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10b      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	4b8d      	ldr	r3, [pc, #564]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05b      	beq.n	80063fc <HAL_RCC_OscConfig+0x108>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d157      	bne.n	80063fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e2d9      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006358:	d106      	bne.n	8006368 <HAL_RCC_OscConfig+0x74>
 800635a:	4b85      	ldr	r3, [pc, #532]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a84      	ldr	r2, [pc, #528]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0x98>
 8006372:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a7e      	ldr	r2, [pc, #504]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b7c      	ldr	r3, [pc, #496]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a7b      	ldr	r2, [pc, #492]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 800638c:	4b78      	ldr	r3, [pc, #480]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a77      	ldr	r2, [pc, #476]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b75      	ldr	r3, [pc, #468]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a74      	ldr	r2, [pc, #464]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7ff f8d6 	bl	800555c <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b4:	f7ff f8d2 	bl	800555c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	@ 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e29e      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xc0>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7ff f8c2 	bl	800555c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063dc:	f7ff f8be 	bl	800555c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	@ 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e28a      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063ee:	4b60      	ldr	r3, [pc, #384]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0xe8>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d075      	beq.n	80064f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640a:	4b59      	ldr	r3, [pc, #356]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006414:	4b56      	ldr	r3, [pc, #344]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d102      	bne.n	800642a <HAL_RCC_OscConfig+0x136>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d002      	beq.n	8006430 <HAL_RCC_OscConfig+0x13c>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d11f      	bne.n	8006470 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006430:	4b4f      	ldr	r3, [pc, #316]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCC_OscConfig+0x154>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e25d      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006448:	4b49      	ldr	r3, [pc, #292]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	4946      	ldr	r1, [pc, #280]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006458:	4313      	orrs	r3, r2
 800645a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800645c:	4b45      	ldr	r3, [pc, #276]	@ (8006574 <HAL_RCC_OscConfig+0x280>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff f82f 	bl	80054c4 <HAL_InitTick>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d043      	beq.n	80064f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e249      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d023      	beq.n	80064c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006478:	4b3d      	ldr	r3, [pc, #244]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3c      	ldr	r2, [pc, #240]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800647e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7ff f86a 	bl	800555c <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800648c:	f7ff f866 	bl	800555c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e232      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800649e:	4b34      	ldr	r3, [pc, #208]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064aa:	4b31      	ldr	r3, [pc, #196]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	061b      	lsls	r3, r3, #24
 80064b8:	492d      	ldr	r1, [pc, #180]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	604b      	str	r3, [r1, #4]
 80064be:	e01a      	b.n	80064f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7ff f846 	bl	800555c <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d4:	f7ff f842 	bl	800555c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e20e      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064e6:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x1e0>
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d041      	beq.n	8006586 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01c      	beq.n	8006544 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650a:	4b19      	ldr	r3, [pc, #100]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800650c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006510:	4a17      	ldr	r2, [pc, #92]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7ff f81f 	bl	800555c <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7ff f81b 	bl	800555c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e1e7      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006534:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ef      	beq.n	8006522 <HAL_RCC_OscConfig+0x22e>
 8006542:	e020      	b.n	8006586 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006544:	4b0a      	ldr	r3, [pc, #40]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654a:	4a09      	ldr	r2, [pc, #36]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7ff f802 	bl	800555c <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800655a:	e00d      	b.n	8006578 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800655c:	f7fe fffe 	bl	800555c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d906      	bls.n	8006578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e1ca      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
 800656e:	bf00      	nop
 8006570:	40021000 	.word	0x40021000
 8006574:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006578:	4b8c      	ldr	r3, [pc, #560]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800657a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ea      	bne.n	800655c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a6 	beq.w	80066e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006598:	4b84      	ldr	r3, [pc, #528]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800659a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_OscConfig+0x2b4>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <HAL_RCC_OscConfig+0x2b6>
 80065a8:	2300      	movs	r3, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ae:	4b7f      	ldr	r3, [pc, #508]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80065b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b2:	4a7e      	ldr	r2, [pc, #504]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ba:	4b7c      	ldr	r3, [pc, #496]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ca:	4b79      	ldr	r3, [pc, #484]	@ (80067b0 <HAL_RCC_OscConfig+0x4bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065d6:	4b76      	ldr	r3, [pc, #472]	@ (80067b0 <HAL_RCC_OscConfig+0x4bc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a75      	ldr	r2, [pc, #468]	@ (80067b0 <HAL_RCC_OscConfig+0x4bc>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fe ffbb 	bl	800555c <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fe ffb7 	bl	800555c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e183      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fc:	4b6c      	ldr	r3, [pc, #432]	@ (80067b0 <HAL_RCC_OscConfig+0x4bc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d108      	bne.n	8006622 <HAL_RCC_OscConfig+0x32e>
 8006610:	4b66      	ldr	r3, [pc, #408]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	4a65      	ldr	r2, [pc, #404]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006620:	e024      	b.n	800666c <HAL_RCC_OscConfig+0x378>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d110      	bne.n	800664c <HAL_RCC_OscConfig+0x358>
 800662a:	4b60      	ldr	r3, [pc, #384]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006630:	4a5e      	ldr	r2, [pc, #376]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800663a:	4b5c      	ldr	r3, [pc, #368]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006640:	4a5a      	ldr	r2, [pc, #360]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800664a:	e00f      	b.n	800666c <HAL_RCC_OscConfig+0x378>
 800664c:	4b57      	ldr	r3, [pc, #348]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	4a56      	ldr	r2, [pc, #344]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800665c:	4b53      	ldr	r3, [pc, #332]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006662:	4a52      	ldr	r2, [pc, #328]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d016      	beq.n	80066a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006674:	f7fe ff72 	bl	800555c <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800667a:	e00a      	b.n	8006692 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667c:	f7fe ff6e 	bl	800555c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800668a:	4293      	cmp	r3, r2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e138      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006692:	4b46      	ldr	r3, [pc, #280]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ed      	beq.n	800667c <HAL_RCC_OscConfig+0x388>
 80066a0:	e015      	b.n	80066ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a2:	f7fe ff5b 	bl	800555c <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fe ff57 	bl	800555c <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e121      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c0:	4b3a      	ldr	r3, [pc, #232]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ed      	bne.n	80066aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d105      	bne.n	80066e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d4:	4b35      	ldr	r3, [pc, #212]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d8:	4a34      	ldr	r2, [pc, #208]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80066da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d03c      	beq.n	8006766 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01c      	beq.n	800672e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066f4:	4b2d      	ldr	r3, [pc, #180]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80066f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066fa:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fe ff2a 	bl	800555c <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800670c:	f7fe ff26 	bl	800555c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0f2      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800671e:	4b23      	ldr	r3, [pc, #140]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ef      	beq.n	800670c <HAL_RCC_OscConfig+0x418>
 800672c:	e01b      	b.n	8006766 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800672e:	4b1f      	ldr	r3, [pc, #124]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006730:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006734:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fe ff0d 	bl	800555c <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006746:	f7fe ff09 	bl	800555c <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e0d5      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006758:	4b14      	ldr	r3, [pc, #80]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800675a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ef      	bne.n	8006746 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80c9 	beq.w	8006902 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006770:	4b0e      	ldr	r3, [pc, #56]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b0c      	cmp	r3, #12
 800677a:	f000 8083 	beq.w	8006884 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d15e      	bne.n	8006844 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006786:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fe fee3 	bl	800555c <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006798:	e00c      	b.n	80067b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679a:	f7fe fedf 	bl	800555c <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d905      	bls.n	80067b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e0ab      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067b4:	4b55      	ldr	r3, [pc, #340]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ec      	bne.n	800679a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c0:	4b52      	ldr	r3, [pc, #328]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	4b52      	ldr	r3, [pc, #328]	@ (8006910 <HAL_RCC_OscConfig+0x61c>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6a11      	ldr	r1, [r2, #32]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067d0:	3a01      	subs	r2, #1
 80067d2:	0112      	lsls	r2, r2, #4
 80067d4:	4311      	orrs	r1, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80067da:	0212      	lsls	r2, r2, #8
 80067dc:	4311      	orrs	r1, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067e2:	0852      	lsrs	r2, r2, #1
 80067e4:	3a01      	subs	r2, #1
 80067e6:	0552      	lsls	r2, r2, #21
 80067e8:	4311      	orrs	r1, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067ee:	0852      	lsrs	r2, r2, #1
 80067f0:	3a01      	subs	r2, #1
 80067f2:	0652      	lsls	r2, r2, #25
 80067f4:	4311      	orrs	r1, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067fa:	06d2      	lsls	r2, r2, #27
 80067fc:	430a      	orrs	r2, r1
 80067fe:	4943      	ldr	r1, [pc, #268]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006800:	4313      	orrs	r3, r2
 8006802:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b41      	ldr	r3, [pc, #260]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a40      	ldr	r2, [pc, #256]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 800680a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800680e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006810:	4b3e      	ldr	r3, [pc, #248]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4a3d      	ldr	r2, [pc, #244]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800681a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fe fe9e 	bl	800555c <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006824:	f7fe fe9a 	bl	800555c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e066      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006836:	4b35      	ldr	r3, [pc, #212]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0x530>
 8006842:	e05e      	b.n	8006902 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006844:	4b31      	ldr	r3, [pc, #196]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a30      	ldr	r2, [pc, #192]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006850:	f7fe fe84 	bl	800555c <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006858:	f7fe fe80 	bl	800555c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e04c      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800686a:	4b28      	ldr	r3, [pc, #160]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006876:	4b25      	ldr	r3, [pc, #148]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	4924      	ldr	r1, [pc, #144]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <HAL_RCC_OscConfig+0x620>)
 800687e:	4013      	ands	r3, r2
 8006880:	60cb      	str	r3, [r1, #12]
 8006882:	e03e      	b.n	8006902 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e039      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006890:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <HAL_RCC_OscConfig+0x618>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f003 0203 	and.w	r2, r3, #3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d12c      	bne.n	80068fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	3b01      	subs	r3, #1
 80068b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d123      	bne.n	80068fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d11b      	bne.n	80068fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d113      	bne.n	80068fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	3b01      	subs	r3, #1
 80068e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d109      	bne.n	80068fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	3b01      	subs	r3, #1
 80068f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d001      	beq.n	8006902 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40021000 	.word	0x40021000
 8006910:	019f800c 	.word	0x019f800c
 8006914:	feeefffc 	.word	0xfeeefffc

08006918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e11e      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006930:	4b91      	ldr	r3, [pc, #580]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d910      	bls.n	8006960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693e:	4b8e      	ldr	r3, [pc, #568]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 020f 	bic.w	r2, r3, #15
 8006946:	498c      	ldr	r1, [pc, #560]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	4313      	orrs	r3, r2
 800694c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d001      	beq.n	8006960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e106      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d073      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b03      	cmp	r3, #3
 8006972:	d129      	bne.n	80069c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006974:	4b81      	ldr	r3, [pc, #516]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0f4      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006984:	f000 f99e 	bl	8006cc4 <RCC_GetSysClockFreqFromPLLSource>
 8006988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b80 <HAL_RCC_ClockConfig+0x268>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d93f      	bls.n	8006a12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006992:	4b7a      	ldr	r3, [pc, #488]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d033      	beq.n	8006a12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d12f      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069b2:	4b72      	ldr	r3, [pc, #456]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ba:	4a70      	ldr	r2, [pc, #448]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 80069bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069c2:	2380      	movs	r3, #128	@ 0x80
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e024      	b.n	8006a12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0c6      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069e0:	4b66      	ldr	r3, [pc, #408]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0be      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80069f0:	f000 f8ce 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 80069f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4a61      	ldr	r2, [pc, #388]	@ (8006b80 <HAL_RCC_ClockConfig+0x268>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d909      	bls.n	8006a12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069fe:	4b5f      	ldr	r3, [pc, #380]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a06:	4a5d      	ldr	r2, [pc, #372]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a0e:	2380      	movs	r3, #128	@ 0x80
 8006a10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a12:	4b5a      	ldr	r3, [pc, #360]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f023 0203 	bic.w	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4957      	ldr	r1, [pc, #348]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a24:	f7fe fd9a 	bl	800555c <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2a:	e00a      	b.n	8006a42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a2c:	f7fe fd96 	bl	800555c <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e095      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a42:	4b4e      	ldr	r3, [pc, #312]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 020c 	and.w	r2, r3, #12
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d1eb      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d023      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a6c:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a42      	ldr	r2, [pc, #264]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a84:	4b3d      	ldr	r3, [pc, #244]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a94:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4936      	ldr	r1, [pc, #216]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b80      	cmp	r3, #128	@ 0x80
 8006aac:	d105      	bne.n	8006aba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006aae:	4b33      	ldr	r3, [pc, #204]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4a32      	ldr	r2, [pc, #200]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ab8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aba:	4b2f      	ldr	r3, [pc, #188]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d21d      	bcs.n	8006b04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f023 020f 	bic.w	r2, r3, #15
 8006ad0:	4929      	ldr	r1, [pc, #164]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ad8:	f7fe fd40 	bl	800555c <HAL_GetTick>
 8006adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae0:	f7fe fd3c 	bl	800555c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e03b      	b.n	8006b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af6:	4b20      	ldr	r3, [pc, #128]	@ (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d1ed      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b10:	4b1a      	ldr	r3, [pc, #104]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4917      	ldr	r1, [pc, #92]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b2e:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	490f      	ldr	r1, [pc, #60]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b42:	f000 f825 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8006b46:	4602      	mov	r2, r0
 8006b48:	4b0c      	ldr	r3, [pc, #48]	@ (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	490c      	ldr	r1, [pc, #48]	@ (8006b84 <HAL_RCC_ClockConfig+0x26c>)
 8006b54:	5ccb      	ldrb	r3, [r1, r3]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b88 <HAL_RCC_ClockConfig+0x270>)
 8006b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <HAL_RCC_ClockConfig+0x274>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fcac 	bl	80054c4 <HAL_InitTick>
 8006b6c:	4603      	mov	r3, r0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40022000 	.word	0x40022000
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	04c4b400 	.word	0x04c4b400
 8006b84:	0800c9ac 	.word	0x0800c9ac
 8006b88:	20000200 	.word	0x20000200
 8006b8c:	20000204 	.word	0x20000204

08006b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b96:	4b2c      	ldr	r3, [pc, #176]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e047      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ba8:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d102      	bne.n	8006bba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bb4:	4b26      	ldr	r3, [pc, #152]	@ (8006c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	e03e      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006bba:	4b23      	ldr	r3, [pc, #140]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	d136      	bne.n	8006c34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bc6:	4b20      	ldr	r3, [pc, #128]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	091b      	lsrs	r3, r3, #4
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006be4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bee:	68d2      	ldr	r2, [r2, #12]
 8006bf0:	0a12      	lsrs	r2, r2, #8
 8006bf2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	617b      	str	r3, [r7, #20]
      break;
 8006bfc:	e00c      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bfe:	4a13      	ldr	r2, [pc, #76]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	4a10      	ldr	r2, [pc, #64]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	0a12      	lsrs	r2, r2, #8
 8006c0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
      break;
 8006c16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	0e5b      	lsrs	r3, r3, #25
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	3301      	adds	r3, #1
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e001      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c38:	693b      	ldr	r3, [r7, #16]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	00f42400 	.word	0x00f42400
 8006c50:	016e3600 	.word	0x016e3600

08006c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c58:	4b03      	ldr	r3, [pc, #12]	@ (8006c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000200 	.word	0x20000200

08006c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c70:	f7ff fff0 	bl	8006c54 <HAL_RCC_GetHCLKFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40021000 	.word	0x40021000
 8006c94:	0800c9bc 	.word	0x0800c9bc

08006c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c9c:	f7ff ffda 	bl	8006c54 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0adb      	lsrs	r3, r3, #11
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4904      	ldr	r1, [pc, #16]	@ (8006cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	0800c9bc 	.word	0x0800c9bc

08006cc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cca:	4b1e      	ldr	r3, [pc, #120]	@ (8006d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d10c      	bne.n	8006d02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ce8:	4a17      	ldr	r2, [pc, #92]	@ (8006d48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	4a14      	ldr	r2, [pc, #80]	@ (8006d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cf2:	68d2      	ldr	r2, [r2, #12]
 8006cf4:	0a12      	lsrs	r2, r2, #8
 8006cf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	617b      	str	r3, [r7, #20]
    break;
 8006d00:	e00c      	b.n	8006d1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d02:	4a12      	ldr	r2, [pc, #72]	@ (8006d4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d0c:	68d2      	ldr	r2, [r2, #12]
 8006d0e:	0a12      	lsrs	r2, r2, #8
 8006d10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
 8006d18:	617b      	str	r3, [r7, #20]
    break;
 8006d1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d1c:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	0e5b      	lsrs	r3, r3, #25
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	3301      	adds	r3, #1
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d36:	687b      	ldr	r3, [r7, #4]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40021000 	.word	0x40021000
 8006d48:	016e3600 	.word	0x016e3600
 8006d4c:	00f42400 	.word	0x00f42400

08006d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d58:	2300      	movs	r3, #0
 8006d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8098 	beq.w	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d72:	4b43      	ldr	r3, [pc, #268]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7e:	4b40      	ldr	r3, [pc, #256]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d82:	4a3f      	ldr	r2, [pc, #252]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d96:	2301      	movs	r3, #1
 8006d98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a39      	ldr	r2, [pc, #228]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006da6:	f7fe fbd9 	bl	800555c <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dac:	e009      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dae:	f7fe fbd5 	bl	800555c <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d902      	bls.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	74fb      	strb	r3, [r7, #19]
        break;
 8006dc0:	e005      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dc2:	4b30      	ldr	r3, [pc, #192]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0ef      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d159      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01e      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d019      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006df0:	4b23      	ldr	r3, [pc, #140]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dfc:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	4a1f      	ldr	r2, [pc, #124]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e12:	4a1b      	ldr	r2, [pc, #108]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e1c:	4a18      	ldr	r2, [pc, #96]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2e:	f7fe fb95 	bl	800555c <HAL_GetTick>
 8006e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e34:	e00b      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fe fb91 	bl	800555c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d902      	bls.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8006e4c:	e006      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ec      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e62:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e70:	4903      	ldr	r1, [pc, #12]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e78:	e008      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e7a:	7cfb      	ldrb	r3, [r7, #19]
 8006e7c:	74bb      	strb	r3, [r7, #18]
 8006e7e:	e005      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	7cfb      	ldrb	r3, [r7, #19]
 8006e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e8c:	7c7b      	ldrb	r3, [r7, #17]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d105      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e92:	4ba7      	ldr	r3, [pc, #668]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	4aa6      	ldr	r2, [pc, #664]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eaa:	4ba1      	ldr	r3, [pc, #644]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb0:	f023 0203 	bic.w	r2, r3, #3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	499d      	ldr	r1, [pc, #628]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ecc:	4b98      	ldr	r3, [pc, #608]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f023 020c 	bic.w	r2, r3, #12
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	4995      	ldr	r1, [pc, #596]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006eee:	4b90      	ldr	r3, [pc, #576]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	498c      	ldr	r1, [pc, #560]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f10:	4b87      	ldr	r3, [pc, #540]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	4984      	ldr	r1, [pc, #528]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f32:	4b7f      	ldr	r3, [pc, #508]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	497b      	ldr	r1, [pc, #492]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f54:	4b76      	ldr	r3, [pc, #472]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	4973      	ldr	r1, [pc, #460]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f76:	4b6e      	ldr	r3, [pc, #440]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	496a      	ldr	r1, [pc, #424]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f98:	4b65      	ldr	r3, [pc, #404]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4962      	ldr	r1, [pc, #392]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fba:	4b5d      	ldr	r3, [pc, #372]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc8:	4959      	ldr	r1, [pc, #356]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fdc:	4b54      	ldr	r3, [pc, #336]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fe2:	f023 0203 	bic.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	4951      	ldr	r1, [pc, #324]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4948      	ldr	r1, [pc, #288]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007020:	4b43      	ldr	r3, [pc, #268]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007026:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702e:	4940      	ldr	r1, [pc, #256]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800703e:	d105      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007040:	4b3b      	ldr	r3, [pc, #236]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a3a      	ldr	r2, [pc, #232]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800704a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007058:	4b35      	ldr	r3, [pc, #212]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007066:	4932      	ldr	r1, [pc, #200]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007076:	d105      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007078:	4b2d      	ldr	r3, [pc, #180]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a2c      	ldr	r2, [pc, #176]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007082:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007090:	4b27      	ldr	r3, [pc, #156]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	4924      	ldr	r1, [pc, #144]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ae:	d105      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d015      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070c8:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	4916      	ldr	r1, [pc, #88]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e6:	d105      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e8:	4b11      	ldr	r3, [pc, #68]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4a10      	ldr	r2, [pc, #64]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d019      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007100:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	4908      	ldr	r1, [pc, #32]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800711e:	d109      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007120:	4b03      	ldr	r3, [pc, #12]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4a02      	ldr	r2, [pc, #8]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800712a:	60d3      	str	r3, [r2, #12]
 800712c:	e002      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007140:	4b29      	ldr	r3, [pc, #164]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007146:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	4926      	ldr	r1, [pc, #152]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715e:	d105      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007160:	4b21      	ldr	r3, [pc, #132]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a20      	ldr	r2, [pc, #128]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007178:	4b1b      	ldr	r3, [pc, #108]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007186:	4918      	ldr	r1, [pc, #96]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007196:	d105      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007198:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a12      	ldr	r2, [pc, #72]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800719e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071b0:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071be:	490a      	ldr	r1, [pc, #40]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ce:	d105      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4a04      	ldr	r2, [pc, #16]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80071dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40021000 	.word	0x40021000

080071ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e054      	b.n	80072a8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d111      	bne.n	800722e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 fb3c 	bl	8009890 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a23      	ldr	r2, [pc, #140]	@ (80072b0 <HAL_TIM_Base_Init+0xc4>)
 8007224:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f001 fc7b 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	08004fb5 	.word	0x08004fb5

080072b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d001      	beq.n	80072cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e04c      	b.n	8007366 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a26      	ldr	r2, [pc, #152]	@ (8007374 <HAL_TIM_Base_Start+0xc0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d022      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e6:	d01d      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a22      	ldr	r2, [pc, #136]	@ (8007378 <HAL_TIM_Base_Start+0xc4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d018      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a21      	ldr	r2, [pc, #132]	@ (800737c <HAL_TIM_Base_Start+0xc8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <HAL_TIM_Base_Start+0xcc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00e      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1e      	ldr	r2, [pc, #120]	@ (8007384 <HAL_TIM_Base_Start+0xd0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <HAL_TIM_Base_Start+0xd4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_TIM_Base_Start+0x70>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <HAL_TIM_Base_Start+0xd8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d115      	bne.n	8007350 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	4b19      	ldr	r3, [pc, #100]	@ (8007390 <HAL_TIM_Base_Start+0xdc>)
 800732c:	4013      	ands	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b06      	cmp	r3, #6
 8007334:	d015      	beq.n	8007362 <HAL_TIM_Base_Start+0xae>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733c:	d011      	beq.n	8007362 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	e008      	b.n	8007362 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e000      	b.n	8007364 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40015000 	.word	0x40015000
 8007390:	00010007 	.word	0x00010007

08007394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e054      	b.n	8007456 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a26      	ldr	r2, [pc, #152]	@ (8007464 <HAL_TIM_Base_Start_IT+0xd0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d022      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d01d      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a22      	ldr	r2, [pc, #136]	@ (8007468 <HAL_TIM_Base_Start_IT+0xd4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d018      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a21      	ldr	r2, [pc, #132]	@ (800746c <HAL_TIM_Base_Start_IT+0xd8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007470 <HAL_TIM_Base_Start_IT+0xdc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00e      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007474 <HAL_TIM_Base_Start_IT+0xe0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1c      	ldr	r2, [pc, #112]	@ (8007478 <HAL_TIM_Base_Start_IT+0xe4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <HAL_TIM_Base_Start_IT+0xe8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d115      	bne.n	8007440 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <HAL_TIM_Base_Start_IT+0xec>)
 800741c:	4013      	ands	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b06      	cmp	r3, #6
 8007424:	d015      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0xbe>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d011      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743e:	e008      	b.n	8007452 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e000      	b.n	8007454 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40012c00 	.word	0x40012c00
 8007468:	40000400 	.word	0x40000400
 800746c:	40000800 	.word	0x40000800
 8007470:	40000c00 	.word	0x40000c00
 8007474:	40013400 	.word	0x40013400
 8007478:	40014000 	.word	0x40014000
 800747c:	40015000 	.word	0x40015000
 8007480:	00010007 	.word	0x00010007

08007484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e054      	b.n	8007540 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d111      	bne.n	80074c6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f002 f9f0 	bl	8009890 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a23      	ldr	r2, [pc, #140]	@ (8007548 <HAL_TIM_PWM_Init+0xc4>)
 80074bc:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f001 fb2f 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	0800754d 	.word	0x0800754d

0800754c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d109      	bne.n	8007584 <HAL_TIM_PWM_Start+0x24>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e03c      	b.n	80075fe <HAL_TIM_PWM_Start+0x9e>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d109      	bne.n	800759e <HAL_TIM_PWM_Start+0x3e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	e02f      	b.n	80075fe <HAL_TIM_PWM_Start+0x9e>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d109      	bne.n	80075b8 <HAL_TIM_PWM_Start+0x58>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e022      	b.n	80075fe <HAL_TIM_PWM_Start+0x9e>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b0c      	cmp	r3, #12
 80075bc:	d109      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x72>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	bf14      	ite	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	2300      	moveq	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	e015      	b.n	80075fe <HAL_TIM_PWM_Start+0x9e>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d109      	bne.n	80075ec <HAL_TIM_PWM_Start+0x8c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	e008      	b.n	80075fe <HAL_TIM_PWM_Start+0x9e>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e0a6      	b.n	8007754 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0xb6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007614:	e023      	b.n	800765e <HAL_TIM_PWM_Start+0xfe>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b04      	cmp	r3, #4
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0xc6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007624:	e01b      	b.n	800765e <HAL_TIM_PWM_Start+0xfe>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b08      	cmp	r3, #8
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0xd6>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007634:	e013      	b.n	800765e <HAL_TIM_PWM_Start+0xfe>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b0c      	cmp	r3, #12
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xe6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007644:	e00b      	b.n	800765e <HAL_TIM_PWM_Start+0xfe>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b10      	cmp	r3, #16
 800764a:	d104      	bne.n	8007656 <HAL_TIM_PWM_Start+0xf6>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007654:	e003      	b.n	800765e <HAL_TIM_PWM_Start+0xfe>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2201      	movs	r2, #1
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f002 f8ec 	bl	8009844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a3a      	ldr	r2, [pc, #232]	@ (800775c <HAL_TIM_PWM_Start+0x1fc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_TIM_PWM_Start+0x148>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a39      	ldr	r2, [pc, #228]	@ (8007760 <HAL_TIM_PWM_Start+0x200>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_TIM_PWM_Start+0x148>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a37      	ldr	r2, [pc, #220]	@ (8007764 <HAL_TIM_PWM_Start+0x204>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_TIM_PWM_Start+0x148>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a36      	ldr	r2, [pc, #216]	@ (8007768 <HAL_TIM_PWM_Start+0x208>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_TIM_PWM_Start+0x148>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a34      	ldr	r2, [pc, #208]	@ (800776c <HAL_TIM_PWM_Start+0x20c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_TIM_PWM_Start+0x148>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a33      	ldr	r2, [pc, #204]	@ (8007770 <HAL_TIM_PWM_Start+0x210>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d101      	bne.n	80076ac <HAL_TIM_PWM_Start+0x14c>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <HAL_TIM_PWM_Start+0x14e>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a25      	ldr	r2, [pc, #148]	@ (800775c <HAL_TIM_PWM_Start+0x1fc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d01d      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a26      	ldr	r2, [pc, #152]	@ (8007774 <HAL_TIM_PWM_Start+0x214>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a24      	ldr	r2, [pc, #144]	@ (8007778 <HAL_TIM_PWM_Start+0x218>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a23      	ldr	r2, [pc, #140]	@ (800777c <HAL_TIM_PWM_Start+0x21c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a19      	ldr	r2, [pc, #100]	@ (8007760 <HAL_TIM_PWM_Start+0x200>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a18      	ldr	r2, [pc, #96]	@ (8007764 <HAL_TIM_PWM_Start+0x204>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_TIM_PWM_Start+0x1b2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <HAL_TIM_PWM_Start+0x210>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d115      	bne.n	800773e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	4b19      	ldr	r3, [pc, #100]	@ (8007780 <HAL_TIM_PWM_Start+0x220>)
 800771a:	4013      	ands	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b06      	cmp	r3, #6
 8007722:	d015      	beq.n	8007750 <HAL_TIM_PWM_Start+0x1f0>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800772a:	d011      	beq.n	8007750 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773c:	e008      	b.n	8007750 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e000      	b.n	8007752 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40013400 	.word	0x40013400
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800
 8007770:	40015000 	.word	0x40015000
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	00010007 	.word	0x00010007

08007784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e054      	b.n	8007840 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d111      	bne.n	80077c6 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f002 f870 	bl	8009890 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a23      	ldr	r2, [pc, #140]	@ (8007848 <HAL_TIM_IC_Init+0xc4>)
 80077bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f001 f9af 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	08004db5 	.word	0x08004db5

0800784c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <HAL_TIM_IC_Start+0x1a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e023      	b.n	80078ae <HAL_TIM_IC_Start+0x62>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d104      	bne.n	8007876 <HAL_TIM_IC_Start+0x2a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007872:	b2db      	uxtb	r3, r3
 8007874:	e01b      	b.n	80078ae <HAL_TIM_IC_Start+0x62>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b08      	cmp	r3, #8
 800787a:	d104      	bne.n	8007886 <HAL_TIM_IC_Start+0x3a>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007882:	b2db      	uxtb	r3, r3
 8007884:	e013      	b.n	80078ae <HAL_TIM_IC_Start+0x62>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b0c      	cmp	r3, #12
 800788a:	d104      	bne.n	8007896 <HAL_TIM_IC_Start+0x4a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e00b      	b.n	80078ae <HAL_TIM_IC_Start+0x62>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_IC_Start+0x5a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e003      	b.n	80078ae <HAL_TIM_IC_Start+0x62>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_TIM_IC_Start+0x74>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e013      	b.n	80078e8 <HAL_TIM_IC_Start+0x9c>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d104      	bne.n	80078d0 <HAL_TIM_IC_Start+0x84>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e00b      	b.n	80078e8 <HAL_TIM_IC_Start+0x9c>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d104      	bne.n	80078e0 <HAL_TIM_IC_Start+0x94>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e003      	b.n	80078e8 <HAL_TIM_IC_Start+0x9c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e097      	b.n	8007a2a <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <HAL_TIM_IC_Start+0xbe>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007908:	e023      	b.n	8007952 <HAL_TIM_IC_Start+0x106>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d104      	bne.n	800791a <HAL_TIM_IC_Start+0xce>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007918:	e01b      	b.n	8007952 <HAL_TIM_IC_Start+0x106>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d104      	bne.n	800792a <HAL_TIM_IC_Start+0xde>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007928:	e013      	b.n	8007952 <HAL_TIM_IC_Start+0x106>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	d104      	bne.n	800793a <HAL_TIM_IC_Start+0xee>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007938:	e00b      	b.n	8007952 <HAL_TIM_IC_Start+0x106>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b10      	cmp	r3, #16
 800793e:	d104      	bne.n	800794a <HAL_TIM_IC_Start+0xfe>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007948:	e003      	b.n	8007952 <HAL_TIM_IC_Start+0x106>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <HAL_TIM_IC_Start+0x116>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007960:	e013      	b.n	800798a <HAL_TIM_IC_Start+0x13e>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d104      	bne.n	8007972 <HAL_TIM_IC_Start+0x126>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007970:	e00b      	b.n	800798a <HAL_TIM_IC_Start+0x13e>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b08      	cmp	r3, #8
 8007976:	d104      	bne.n	8007982 <HAL_TIM_IC_Start+0x136>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007980:	e003      	b.n	800798a <HAL_TIM_IC_Start+0x13e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2201      	movs	r2, #1
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f001 ff56 	bl	8009844 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a25      	ldr	r2, [pc, #148]	@ (8007a34 <HAL_TIM_IC_Start+0x1e8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d022      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079aa:	d01d      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a21      	ldr	r2, [pc, #132]	@ (8007a38 <HAL_TIM_IC_Start+0x1ec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d018      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a20      	ldr	r2, [pc, #128]	@ (8007a3c <HAL_TIM_IC_Start+0x1f0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a40 <HAL_TIM_IC_Start+0x1f4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00e      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007a44 <HAL_TIM_IC_Start+0x1f8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a48 <HAL_TIM_IC_Start+0x1fc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIM_IC_Start+0x19c>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a4c <HAL_TIM_IC_Start+0x200>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d115      	bne.n	8007a14 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <HAL_TIM_IC_Start+0x204>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b06      	cmp	r3, #6
 80079f8:	d015      	beq.n	8007a26 <HAL_TIM_IC_Start+0x1da>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a00:	d011      	beq.n	8007a26 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	e008      	b.n	8007a26 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e000      	b.n	8007a28 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40013400 	.word	0x40013400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40015000 	.word	0x40015000
 8007a50:	00010007 	.word	0x00010007

08007a54 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e04c      	b.n	8007b02 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d111      	bne.n	8007a98 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 ff07 	bl	8009890 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b0c <HAL_TIM_OnePulse_Init+0xb8>)
 8007a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f001 f846 	bl	8008b3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0208 	bic.w	r2, r2, #8
 8007abe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6819      	ldr	r1, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08007b11 	.word	0x08007b11

08007b10 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b4c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d108      	bne.n	8007b66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b5a:	7b7b      	ldrb	r3, [r7, #13]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d102      	bne.n	8007b66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b60:	7b3b      	ldrb	r3, [r7, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e059      	b.n	8007c1e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2202      	movs	r2, #2
 8007b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0202 	orr.w	r2, r2, #2
 8007b98:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0204 	orr.w	r2, r2, #4
 8007ba8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fe46 	bl	8009844 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fe3f 	bl	8009844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d018      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d013      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a14      	ldr	r2, [pc, #80]	@ (8007c30 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00e      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	@ (8007c34 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a11      	ldr	r2, [pc, #68]	@ (8007c38 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8007c3c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d007      	beq.n	8007c1c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40013400 	.word	0x40013400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40014400 	.word	0x40014400
 8007c38:	40014800 	.word	0x40014800
 8007c3c:	40015000 	.word	0x40015000

08007c40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0a2      	b.n	8007d9a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d111      	bne.n	8007c84 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fe11 	bl	8009890 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a4a      	ldr	r2, [pc, #296]	@ (8007da4 <HAL_TIM_Encoder_Init+0x164>)
 8007c7a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 ff46 	bl	8008b3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cd8:	f023 0303 	bic.w	r3, r3, #3
 8007cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007cf6:	f023 030c 	bic.w	r3, r3, #12
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	4313      	orrs	r3, r2
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	011a      	lsls	r2, r3, #4
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	031b      	lsls	r3, r3, #12
 8007d26:	4313      	orrs	r3, r2
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007d34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007d3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	08004ea9 	.word	0x08004ea9

08007da8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d110      	bne.n	8007dfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d102      	bne.n	8007de4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d001      	beq.n	8007de8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e069      	b.n	8007ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df8:	e031      	b.n	8007e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d110      	bne.n	8007e22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d102      	bne.n	8007e0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e06:	7b3b      	ldrb	r3, [r7, #12]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d001      	beq.n	8007e10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e055      	b.n	8007ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e20:	e01d      	b.n	8007e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d108      	bne.n	8007e3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e2e:	7b7b      	ldrb	r3, [r7, #13]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d102      	bne.n	8007e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e34:	7b3b      	ldrb	r3, [r7, #12]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d001      	beq.n	8007e3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e03e      	b.n	8007ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_TIM_Encoder_Start+0xc4>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d008      	beq.n	8007e7c <HAL_TIM_Encoder_Start+0xd4>
 8007e6a:	e00f      	b.n	8007e8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2201      	movs	r2, #1
 8007e72:	2100      	movs	r1, #0
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fce5 	bl	8009844 <TIM_CCxChannelCmd>
      break;
 8007e7a:	e016      	b.n	8007eaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2201      	movs	r2, #1
 8007e82:	2104      	movs	r1, #4
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fcdd 	bl	8009844 <TIM_CCxChannelCmd>
      break;
 8007e8a:	e00e      	b.n	8007eaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2201      	movs	r2, #1
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fcd5 	bl	8009844 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 fcce 	bl	8009844 <TIM_CCxChannelCmd>
      break;
 8007ea8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d026      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d021      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0202 	mvn.w	r2, #2
 8007ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	e009      	b.n	8007f2e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d026      	beq.n	8007f8c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d021      	beq.n	8007f8c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0204 	mvn.w	r2, #4
 8007f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2202      	movs	r2, #2
 8007f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
 8007f70:	e009      	b.n	8007f86 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f003 0308 	and.w	r3, r3, #8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d026      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d021      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0208 	mvn.w	r2, #8
 8007fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2204      	movs	r2, #4
 8007fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
 8007fc8:	e009      	b.n	8007fde <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d026      	beq.n	800803c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d021      	beq.n	800803c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0210 	mvn.w	r2, #16
 8008000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2208      	movs	r2, #8
 8008006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
 8008020:	e009      	b.n	8008036 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d009      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0201 	mvn.w	r2, #1
 8008058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800808a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00e      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f06f 0220 	mvn.w	r2, #32
 8008102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800812a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00e      	beq.n	8008186 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800817a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80081a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e088      	b.n	80082e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11b      	bne.n	800821a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80081f2:	f001 f961 	bl	80094b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 020c 	bic.w	r2, r2, #12
 8008204:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6999      	ldr	r1, [r3, #24]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	619a      	str	r2, [r3, #24]
 8008218:	e060      	b.n	80082dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d11c      	bne.n	800825a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008230:	f001 f9e5 	bl	80095fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008242:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6999      	ldr	r1, [r3, #24]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	021a      	lsls	r2, r3, #8
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	619a      	str	r2, [r3, #24]
 8008258:	e040      	b.n	80082dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d11b      	bne.n	8008298 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008270:	f001 fa32 	bl	80096d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69da      	ldr	r2, [r3, #28]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 020c 	bic.w	r2, r2, #12
 8008282:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69d9      	ldr	r1, [r3, #28]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	61da      	str	r2, [r3, #28]
 8008296:	e021      	b.n	80082dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b0c      	cmp	r3, #12
 800829c:	d11c      	bne.n	80082d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80082ae:	f001 fa4f 	bl	8009750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69d9      	ldr	r1, [r3, #28]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	021a      	lsls	r2, r3, #8
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	61da      	str	r2, [r3, #28]
 80082d6:	e001      	b.n	80082dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800830a:	2302      	movs	r3, #2
 800830c:	e0ff      	b.n	800850e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b14      	cmp	r3, #20
 800831a:	f200 80f0 	bhi.w	80084fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800831e:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008379 	.word	0x08008379
 8008328:	080084ff 	.word	0x080084ff
 800832c:	080084ff 	.word	0x080084ff
 8008330:	080084ff 	.word	0x080084ff
 8008334:	080083b9 	.word	0x080083b9
 8008338:	080084ff 	.word	0x080084ff
 800833c:	080084ff 	.word	0x080084ff
 8008340:	080084ff 	.word	0x080084ff
 8008344:	080083fb 	.word	0x080083fb
 8008348:	080084ff 	.word	0x080084ff
 800834c:	080084ff 	.word	0x080084ff
 8008350:	080084ff 	.word	0x080084ff
 8008354:	0800843b 	.word	0x0800843b
 8008358:	080084ff 	.word	0x080084ff
 800835c:	080084ff 	.word	0x080084ff
 8008360:	080084ff 	.word	0x080084ff
 8008364:	0800847d 	.word	0x0800847d
 8008368:	080084ff 	.word	0x080084ff
 800836c:	080084ff 	.word	0x080084ff
 8008370:	080084ff 	.word	0x080084ff
 8008374:	080084bd 	.word	0x080084bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fc90 	bl	8008ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0208 	orr.w	r2, r2, #8
 8008392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0204 	bic.w	r2, r2, #4
 80083a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6999      	ldr	r1, [r3, #24]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	619a      	str	r2, [r3, #24]
      break;
 80083b6:	e0a5      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fd0a 	bl	8008dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6999      	ldr	r1, [r3, #24]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	021a      	lsls	r2, r3, #8
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	619a      	str	r2, [r3, #24]
      break;
 80083f8:	e084      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fd7d 	bl	8008f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0208 	orr.w	r2, r2, #8
 8008414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0204 	bic.w	r2, r2, #4
 8008424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69d9      	ldr	r1, [r3, #28]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	61da      	str	r2, [r3, #28]
      break;
 8008438:	e064      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fdef 	bl	8009024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69d9      	ldr	r1, [r3, #28]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	021a      	lsls	r2, r3, #8
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	61da      	str	r2, [r3, #28]
      break;
 800847a:	e043      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fe62 	bl	800914c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0208 	orr.w	r2, r2, #8
 8008496:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0204 	bic.w	r2, r2, #4
 80084a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084ba:	e023      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 feac 	bl	8009220 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	021a      	lsls	r2, r3, #8
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084fc:	e002      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
      break;
 8008502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_TIM_ConfigClockSource+0x1c>
 8008530:	2302      	movs	r3, #2
 8008532:	e0f6      	b.n	8008722 <HAL_TIM_ConfigClockSource+0x20a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008552:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800855e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a6f      	ldr	r2, [pc, #444]	@ (800872c <HAL_TIM_ConfigClockSource+0x214>)
 800856e:	4293      	cmp	r3, r2
 8008570:	f000 80c1 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 8008574:	4a6d      	ldr	r2, [pc, #436]	@ (800872c <HAL_TIM_ConfigClockSource+0x214>)
 8008576:	4293      	cmp	r3, r2
 8008578:	f200 80c6 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 800857c:	4a6c      	ldr	r2, [pc, #432]	@ (8008730 <HAL_TIM_ConfigClockSource+0x218>)
 800857e:	4293      	cmp	r3, r2
 8008580:	f000 80b9 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 8008584:	4a6a      	ldr	r2, [pc, #424]	@ (8008730 <HAL_TIM_ConfigClockSource+0x218>)
 8008586:	4293      	cmp	r3, r2
 8008588:	f200 80be 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 800858c:	4a69      	ldr	r2, [pc, #420]	@ (8008734 <HAL_TIM_ConfigClockSource+0x21c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	f000 80b1 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 8008594:	4a67      	ldr	r2, [pc, #412]	@ (8008734 <HAL_TIM_ConfigClockSource+0x21c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f200 80b6 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 800859c:	4a66      	ldr	r2, [pc, #408]	@ (8008738 <HAL_TIM_ConfigClockSource+0x220>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	f000 80a9 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 80085a4:	4a64      	ldr	r2, [pc, #400]	@ (8008738 <HAL_TIM_ConfigClockSource+0x220>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f200 80ae 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085ac:	4a63      	ldr	r2, [pc, #396]	@ (800873c <HAL_TIM_ConfigClockSource+0x224>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f000 80a1 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 80085b4:	4a61      	ldr	r2, [pc, #388]	@ (800873c <HAL_TIM_ConfigClockSource+0x224>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	f200 80a6 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085bc:	4a60      	ldr	r2, [pc, #384]	@ (8008740 <HAL_TIM_ConfigClockSource+0x228>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	f000 8099 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 80085c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008740 <HAL_TIM_ConfigClockSource+0x228>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f200 809e 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085d0:	f000 8091 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 80085d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085d8:	f200 8096 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085e0:	f000 8089 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 80085e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085e8:	f200 808e 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f0:	d03e      	beq.n	8008670 <HAL_TIM_ConfigClockSource+0x158>
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f6:	f200 8087 	bhi.w	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085fe:	f000 8086 	beq.w	800870e <HAL_TIM_ConfigClockSource+0x1f6>
 8008602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008606:	d87f      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008608:	2b70      	cmp	r3, #112	@ 0x70
 800860a:	d01a      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x12a>
 800860c:	2b70      	cmp	r3, #112	@ 0x70
 800860e:	d87b      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008610:	2b60      	cmp	r3, #96	@ 0x60
 8008612:	d050      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x19e>
 8008614:	2b60      	cmp	r3, #96	@ 0x60
 8008616:	d877      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008618:	2b50      	cmp	r3, #80	@ 0x50
 800861a:	d03c      	beq.n	8008696 <HAL_TIM_ConfigClockSource+0x17e>
 800861c:	2b50      	cmp	r3, #80	@ 0x50
 800861e:	d873      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008620:	2b40      	cmp	r3, #64	@ 0x40
 8008622:	d058      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x1be>
 8008624:	2b40      	cmp	r3, #64	@ 0x40
 8008626:	d86f      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008628:	2b30      	cmp	r3, #48	@ 0x30
 800862a:	d064      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 800862c:	2b30      	cmp	r3, #48	@ 0x30
 800862e:	d86b      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008630:	2b20      	cmp	r3, #32
 8008632:	d060      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 8008634:	2b20      	cmp	r3, #32
 8008636:	d867      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d05c      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 800863c:	2b10      	cmp	r3, #16
 800863e:	d05a      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x1de>
 8008640:	e062      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008652:	f001 f8d7 	bl	8009804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	609a      	str	r2, [r3, #8]
      break;
 800866e:	e04f      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008680:	f001 f8c0 	bl	8009804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008692:	609a      	str	r2, [r3, #8]
      break;
 8008694:	e03c      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	461a      	mov	r2, r3
 80086a4:	f000 ff7c 	bl	80095a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2150      	movs	r1, #80	@ 0x50
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 f88b 	bl	80097ca <TIM_ITRx_SetConfig>
      break;
 80086b4:	e02c      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c2:	461a      	mov	r2, r3
 80086c4:	f000 ffd8 	bl	8009678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2160      	movs	r1, #96	@ 0x60
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 f87b 	bl	80097ca <TIM_ITRx_SetConfig>
      break;
 80086d4:	e01c      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	461a      	mov	r2, r3
 80086e4:	f000 ff5c 	bl	80095a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2140      	movs	r1, #64	@ 0x40
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f86b 	bl	80097ca <TIM_ITRx_SetConfig>
      break;
 80086f4:	e00c      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f001 f862 	bl	80097ca <TIM_ITRx_SetConfig>
      break;
 8008706:	e003      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
      break;
 800870c:	e000      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800870e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	00100070 	.word	0x00100070
 8008730:	00100060 	.word	0x00100060
 8008734:	00100050 	.word	0x00100050
 8008738:	00100040 	.word	0x00100040
 800873c:	00100030 	.word	0x00100030
 8008740:	00100020 	.word	0x00100020

08008744 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008754:	2b01      	cmp	r3, #1
 8008756:	d101      	bne.n	800875c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008758:	2302      	movs	r3, #2
 800875a:	e031      	b.n	80087c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fdc2 	bl	80092f8 <TIM_SlaveTimer_SetConfig>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e018      	b.n	80087c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800879c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	460b      	mov	r3, r1
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e14a      	b.n	8008b2e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	f040 80dd 	bne.w	8008a60 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b1f      	cmp	r3, #31
 80088aa:	f200 80d6 	bhi.w	8008a5a <HAL_TIM_RegisterCallback+0x1de>
 80088ae:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <HAL_TIM_RegisterCallback+0x38>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008935 	.word	0x08008935
 80088b8:	0800893d 	.word	0x0800893d
 80088bc:	08008945 	.word	0x08008945
 80088c0:	0800894d 	.word	0x0800894d
 80088c4:	08008955 	.word	0x08008955
 80088c8:	0800895d 	.word	0x0800895d
 80088cc:	08008965 	.word	0x08008965
 80088d0:	0800896d 	.word	0x0800896d
 80088d4:	08008975 	.word	0x08008975
 80088d8:	0800897d 	.word	0x0800897d
 80088dc:	08008985 	.word	0x08008985
 80088e0:	0800898d 	.word	0x0800898d
 80088e4:	08008995 	.word	0x08008995
 80088e8:	0800899d 	.word	0x0800899d
 80088ec:	080089a7 	.word	0x080089a7
 80088f0:	080089b1 	.word	0x080089b1
 80088f4:	080089bb 	.word	0x080089bb
 80088f8:	080089c5 	.word	0x080089c5
 80088fc:	080089cf 	.word	0x080089cf
 8008900:	080089d9 	.word	0x080089d9
 8008904:	080089e3 	.word	0x080089e3
 8008908:	080089ed 	.word	0x080089ed
 800890c:	080089f7 	.word	0x080089f7
 8008910:	08008a01 	.word	0x08008a01
 8008914:	08008a0b 	.word	0x08008a0b
 8008918:	08008a15 	.word	0x08008a15
 800891c:	08008a1f 	.word	0x08008a1f
 8008920:	08008a29 	.word	0x08008a29
 8008924:	08008a33 	.word	0x08008a33
 8008928:	08008a3d 	.word	0x08008a3d
 800892c:	08008a47 	.word	0x08008a47
 8008930:	08008a51 	.word	0x08008a51
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800893a:	e0f7      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008942:	e0f3      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800894a:	e0ef      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008952:	e0eb      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800895a:	e0e7      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008962:	e0e3      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800896a:	e0df      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008972:	e0db      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800897a:	e0d7      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008982:	e0d3      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800898a:	e0cf      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008992:	e0cb      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800899a:	e0c7      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089a4:	e0c2      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80089ae:	e0bd      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80089b8:	e0b8      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80089c2:	e0b3      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80089cc:	e0ae      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80089d6:	e0a9      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80089e0:	e0a4      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80089ea:	e09f      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80089f4:	e09a      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80089fe:	e095      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a08:	e090      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a12:	e08b      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a1c:	e086      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a26:	e081      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a30:	e07c      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a3a:	e077      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a44:	e072      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a4e:	e06d      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a58:	e068      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
        break;
 8008a5e:	e065      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d15d      	bne.n	8008b28 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	2b0d      	cmp	r3, #13
 8008a70:	d857      	bhi.n	8008b22 <HAL_TIM_RegisterCallback+0x2a6>
 8008a72:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <HAL_TIM_RegisterCallback+0x1fc>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008ab1 	.word	0x08008ab1
 8008a7c:	08008ab9 	.word	0x08008ab9
 8008a80:	08008ac1 	.word	0x08008ac1
 8008a84:	08008ac9 	.word	0x08008ac9
 8008a88:	08008ad1 	.word	0x08008ad1
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ae1 	.word	0x08008ae1
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008af9 	.word	0x08008af9
 8008aa0:	08008b01 	.word	0x08008b01
 8008aa4:	08008b09 	.word	0x08008b09
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008b19 	.word	0x08008b19
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ab6:	e039      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008abe:	e035      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ac6:	e031      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ace:	e02d      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ad6:	e029      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008ade:	e025      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008ae6:	e021      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008aee:	e01d      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008af6:	e019      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008afe:	e015      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b06:	e011      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b0e:	e00d      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b16:	e009      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b20:	e004      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	75fb      	strb	r3, [r7, #23]
        break;
 8008b26:	e001      	b.n	8008b2c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop

08008b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8008c80 <TIM_Base_SetConfig+0x144>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d017      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5a:	d013      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a49      	ldr	r2, [pc, #292]	@ (8008c84 <TIM_Base_SetConfig+0x148>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00f      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a48      	ldr	r2, [pc, #288]	@ (8008c88 <TIM_Base_SetConfig+0x14c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a47      	ldr	r2, [pc, #284]	@ (8008c8c <TIM_Base_SetConfig+0x150>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d007      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a46      	ldr	r2, [pc, #280]	@ (8008c90 <TIM_Base_SetConfig+0x154>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_Base_SetConfig+0x48>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a45      	ldr	r2, [pc, #276]	@ (8008c94 <TIM_Base_SetConfig+0x158>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d108      	bne.n	8008b96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a39      	ldr	r2, [pc, #228]	@ (8008c80 <TIM_Base_SetConfig+0x144>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d023      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba4:	d01f      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a36      	ldr	r2, [pc, #216]	@ (8008c84 <TIM_Base_SetConfig+0x148>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01b      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a35      	ldr	r2, [pc, #212]	@ (8008c88 <TIM_Base_SetConfig+0x14c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d017      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a34      	ldr	r2, [pc, #208]	@ (8008c8c <TIM_Base_SetConfig+0x150>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a33      	ldr	r2, [pc, #204]	@ (8008c90 <TIM_Base_SetConfig+0x154>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a33      	ldr	r2, [pc, #204]	@ (8008c98 <TIM_Base_SetConfig+0x15c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a32      	ldr	r2, [pc, #200]	@ (8008c9c <TIM_Base_SetConfig+0x160>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a31      	ldr	r2, [pc, #196]	@ (8008ca0 <TIM_Base_SetConfig+0x164>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_Base_SetConfig+0xaa>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a2c      	ldr	r2, [pc, #176]	@ (8008c94 <TIM_Base_SetConfig+0x158>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d108      	bne.n	8008bf8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <TIM_Base_SetConfig+0x144>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <TIM_Base_SetConfig+0x110>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1a      	ldr	r2, [pc, #104]	@ (8008c90 <TIM_Base_SetConfig+0x154>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00f      	beq.n	8008c4c <TIM_Base_SetConfig+0x110>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008c98 <TIM_Base_SetConfig+0x15c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <TIM_Base_SetConfig+0x110>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a19      	ldr	r2, [pc, #100]	@ (8008c9c <TIM_Base_SetConfig+0x160>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d007      	beq.n	8008c4c <TIM_Base_SetConfig+0x110>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ca0 <TIM_Base_SetConfig+0x164>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_Base_SetConfig+0x110>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a13      	ldr	r2, [pc, #76]	@ (8008c94 <TIM_Base_SetConfig+0x158>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d103      	bne.n	8008c54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d105      	bne.n	8008c72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f023 0201 	bic.w	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]
  }
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40013400 	.word	0x40013400
 8008c94:	40015000 	.word	0x40015000
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	40014400 	.word	0x40014400
 8008ca0:	40014800 	.word	0x40014800

08008ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	f023 0201 	bic.w	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f023 0302 	bic.w	r3, r3, #2
 8008cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a30      	ldr	r2, [pc, #192]	@ (8008dc0 <TIM_OC1_SetConfig+0x11c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d013      	beq.n	8008d2c <TIM_OC1_SetConfig+0x88>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a2f      	ldr	r2, [pc, #188]	@ (8008dc4 <TIM_OC1_SetConfig+0x120>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00f      	beq.n	8008d2c <TIM_OC1_SetConfig+0x88>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8008dc8 <TIM_OC1_SetConfig+0x124>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00b      	beq.n	8008d2c <TIM_OC1_SetConfig+0x88>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a2d      	ldr	r2, [pc, #180]	@ (8008dcc <TIM_OC1_SetConfig+0x128>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d007      	beq.n	8008d2c <TIM_OC1_SetConfig+0x88>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008dd0 <TIM_OC1_SetConfig+0x12c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d003      	beq.n	8008d2c <TIM_OC1_SetConfig+0x88>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd4 <TIM_OC1_SetConfig+0x130>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d10c      	bne.n	8008d46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f023 0308 	bic.w	r3, r3, #8
 8008d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 0304 	bic.w	r3, r3, #4
 8008d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc0 <TIM_OC1_SetConfig+0x11c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d013      	beq.n	8008d76 <TIM_OC1_SetConfig+0xd2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc4 <TIM_OC1_SetConfig+0x120>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00f      	beq.n	8008d76 <TIM_OC1_SetConfig+0xd2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc8 <TIM_OC1_SetConfig+0x124>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00b      	beq.n	8008d76 <TIM_OC1_SetConfig+0xd2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1a      	ldr	r2, [pc, #104]	@ (8008dcc <TIM_OC1_SetConfig+0x128>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d007      	beq.n	8008d76 <TIM_OC1_SetConfig+0xd2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <TIM_OC1_SetConfig+0x12c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d003      	beq.n	8008d76 <TIM_OC1_SetConfig+0xd2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <TIM_OC1_SetConfig+0x130>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d111      	bne.n	8008d9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	621a      	str	r2, [r3, #32]
}
 8008db4:	bf00      	nop
 8008db6:	371c      	adds	r7, #28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	40012c00 	.word	0x40012c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800
 8008dd4:	40015000 	.word	0x40015000

08008dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f023 0210 	bic.w	r2, r3, #16
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0320 	bic.w	r3, r3, #32
 8008e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a2c      	ldr	r2, [pc, #176]	@ (8008ee8 <TIM_OC2_SetConfig+0x110>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d007      	beq.n	8008e4c <TIM_OC2_SetConfig+0x74>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8008eec <TIM_OC2_SetConfig+0x114>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_OC2_SetConfig+0x74>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a2a      	ldr	r2, [pc, #168]	@ (8008ef0 <TIM_OC2_SetConfig+0x118>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d10d      	bne.n	8008e68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee8 <TIM_OC2_SetConfig+0x110>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <TIM_OC2_SetConfig+0xc0>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a1e      	ldr	r2, [pc, #120]	@ (8008eec <TIM_OC2_SetConfig+0x114>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00f      	beq.n	8008e98 <TIM_OC2_SetConfig+0xc0>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef4 <TIM_OC2_SetConfig+0x11c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00b      	beq.n	8008e98 <TIM_OC2_SetConfig+0xc0>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef8 <TIM_OC2_SetConfig+0x120>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <TIM_OC2_SetConfig+0xc0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <TIM_OC2_SetConfig+0x124>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <TIM_OC2_SetConfig+0xc0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a17      	ldr	r2, [pc, #92]	@ (8008ef0 <TIM_OC2_SetConfig+0x118>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d113      	bne.n	8008ec0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	621a      	str	r2, [r3, #32]
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40013400 	.word	0x40013400
 8008ef0:	40015000 	.word	0x40015000
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800

08008f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800900c <TIM_OC3_SetConfig+0x10c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_OC3_SetConfig+0x72>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a2a      	ldr	r2, [pc, #168]	@ (8009010 <TIM_OC3_SetConfig+0x110>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_OC3_SetConfig+0x72>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a29      	ldr	r2, [pc, #164]	@ (8009014 <TIM_OC3_SetConfig+0x114>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d10d      	bne.n	8008f8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a1e      	ldr	r2, [pc, #120]	@ (800900c <TIM_OC3_SetConfig+0x10c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d013      	beq.n	8008fbe <TIM_OC3_SetConfig+0xbe>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a1d      	ldr	r2, [pc, #116]	@ (8009010 <TIM_OC3_SetConfig+0x110>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00f      	beq.n	8008fbe <TIM_OC3_SetConfig+0xbe>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8009018 <TIM_OC3_SetConfig+0x118>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00b      	beq.n	8008fbe <TIM_OC3_SetConfig+0xbe>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800901c <TIM_OC3_SetConfig+0x11c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d007      	beq.n	8008fbe <TIM_OC3_SetConfig+0xbe>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8009020 <TIM_OC3_SetConfig+0x120>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <TIM_OC3_SetConfig+0xbe>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a16      	ldr	r2, [pc, #88]	@ (8009014 <TIM_OC3_SetConfig+0x114>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d113      	bne.n	8008fe6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40012c00 	.word	0x40012c00
 8009010:	40013400 	.word	0x40013400
 8009014:	40015000 	.word	0x40015000
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800

08009024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	031b      	lsls	r3, r3, #12
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <TIM_OC4_SetConfig+0x110>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d007      	beq.n	8009098 <TIM_OC4_SetConfig+0x74>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a2b      	ldr	r2, [pc, #172]	@ (8009138 <TIM_OC4_SetConfig+0x114>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <TIM_OC4_SetConfig+0x74>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a2a      	ldr	r2, [pc, #168]	@ (800913c <TIM_OC4_SetConfig+0x118>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d10d      	bne.n	80090b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800909e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009134 <TIM_OC4_SetConfig+0x110>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d013      	beq.n	80090e4 <TIM_OC4_SetConfig+0xc0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a1e      	ldr	r2, [pc, #120]	@ (8009138 <TIM_OC4_SetConfig+0x114>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00f      	beq.n	80090e4 <TIM_OC4_SetConfig+0xc0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009140 <TIM_OC4_SetConfig+0x11c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <TIM_OC4_SetConfig+0xc0>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009144 <TIM_OC4_SetConfig+0x120>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <TIM_OC4_SetConfig+0xc0>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009148 <TIM_OC4_SetConfig+0x124>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC4_SetConfig+0xc0>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a17      	ldr	r2, [pc, #92]	@ (800913c <TIM_OC4_SetConfig+0x118>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d113      	bne.n	800910c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	019b      	lsls	r3, r3, #6
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	019b      	lsls	r3, r3, #6
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	621a      	str	r2, [r3, #32]
}
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40012c00 	.word	0x40012c00
 8009138:	40013400 	.word	0x40013400
 800913c:	40015000 	.word	0x40015000
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800917a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	041b      	lsls	r3, r3, #16
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a19      	ldr	r2, [pc, #100]	@ (8009208 <TIM_OC5_SetConfig+0xbc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <TIM_OC5_SetConfig+0x82>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a18      	ldr	r2, [pc, #96]	@ (800920c <TIM_OC5_SetConfig+0xc0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00f      	beq.n	80091ce <TIM_OC5_SetConfig+0x82>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a17      	ldr	r2, [pc, #92]	@ (8009210 <TIM_OC5_SetConfig+0xc4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00b      	beq.n	80091ce <TIM_OC5_SetConfig+0x82>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <TIM_OC5_SetConfig+0xc8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d007      	beq.n	80091ce <TIM_OC5_SetConfig+0x82>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <TIM_OC5_SetConfig+0xcc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_OC5_SetConfig+0x82>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a14      	ldr	r2, [pc, #80]	@ (800921c <TIM_OC5_SetConfig+0xd0>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d109      	bne.n	80091e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	621a      	str	r2, [r3, #32]
}
 80091fc:	bf00      	nop
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	40012c00 	.word	0x40012c00
 800920c:	40013400 	.word	0x40013400
 8009210:	40014000 	.word	0x40014000
 8009214:	40014400 	.word	0x40014400
 8009218:	40014800 	.word	0x40014800
 800921c:	40015000 	.word	0x40015000

08009220 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800924e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	051b      	lsls	r3, r3, #20
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a1a      	ldr	r2, [pc, #104]	@ (80092e0 <TIM_OC6_SetConfig+0xc0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <TIM_OC6_SetConfig+0x84>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a19      	ldr	r2, [pc, #100]	@ (80092e4 <TIM_OC6_SetConfig+0xc4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00f      	beq.n	80092a4 <TIM_OC6_SetConfig+0x84>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a18      	ldr	r2, [pc, #96]	@ (80092e8 <TIM_OC6_SetConfig+0xc8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00b      	beq.n	80092a4 <TIM_OC6_SetConfig+0x84>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a17      	ldr	r2, [pc, #92]	@ (80092ec <TIM_OC6_SetConfig+0xcc>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d007      	beq.n	80092a4 <TIM_OC6_SetConfig+0x84>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a16      	ldr	r2, [pc, #88]	@ (80092f0 <TIM_OC6_SetConfig+0xd0>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d003      	beq.n	80092a4 <TIM_OC6_SetConfig+0x84>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a15      	ldr	r2, [pc, #84]	@ (80092f4 <TIM_OC6_SetConfig+0xd4>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d109      	bne.n	80092b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	029b      	lsls	r3, r3, #10
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40012c00 	.word	0x40012c00
 80092e4:	40013400 	.word	0x40013400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800
 80092f4:	40015000 	.word	0x40015000

080092f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009318:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800932a:	f023 0307 	bic.w	r3, r3, #7
 800932e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4313      	orrs	r3, r2
 8009338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	4a56      	ldr	r2, [pc, #344]	@ (80094a0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	f000 80a2 	beq.w	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800934e:	4a54      	ldr	r2, [pc, #336]	@ (80094a0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009350:	4293      	cmp	r3, r2
 8009352:	f200 809b 	bhi.w	800948c <TIM_SlaveTimer_SetConfig+0x194>
 8009356:	4a53      	ldr	r2, [pc, #332]	@ (80094a4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009358:	4293      	cmp	r3, r2
 800935a:	f000 809a 	beq.w	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800935e:	4a51      	ldr	r2, [pc, #324]	@ (80094a4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009360:	4293      	cmp	r3, r2
 8009362:	f200 8093 	bhi.w	800948c <TIM_SlaveTimer_SetConfig+0x194>
 8009366:	4a50      	ldr	r2, [pc, #320]	@ (80094a8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009368:	4293      	cmp	r3, r2
 800936a:	f000 8092 	beq.w	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800936e:	4a4e      	ldr	r2, [pc, #312]	@ (80094a8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009370:	4293      	cmp	r3, r2
 8009372:	f200 808b 	bhi.w	800948c <TIM_SlaveTimer_SetConfig+0x194>
 8009376:	4a4d      	ldr	r2, [pc, #308]	@ (80094ac <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	f000 808a 	beq.w	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800937e:	4a4b      	ldr	r2, [pc, #300]	@ (80094ac <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	f200 8083 	bhi.w	800948c <TIM_SlaveTimer_SetConfig+0x194>
 8009386:	4a4a      	ldr	r2, [pc, #296]	@ (80094b0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	f000 8082 	beq.w	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800938e:	4a48      	ldr	r2, [pc, #288]	@ (80094b0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d87b      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 8009394:	4a47      	ldr	r2, [pc, #284]	@ (80094b4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d07b      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 800939a:	4a46      	ldr	r2, [pc, #280]	@ (80094b4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d875      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093a4:	d075      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093a6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093aa:	d86f      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093b0:	d06f      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093b6:	d869      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093b8:	2b70      	cmp	r3, #112	@ 0x70
 80093ba:	d01a      	beq.n	80093f2 <TIM_SlaveTimer_SetConfig+0xfa>
 80093bc:	2b70      	cmp	r3, #112	@ 0x70
 80093be:	d865      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093c0:	2b60      	cmp	r3, #96	@ 0x60
 80093c2:	d059      	beq.n	8009478 <TIM_SlaveTimer_SetConfig+0x180>
 80093c4:	2b60      	cmp	r3, #96	@ 0x60
 80093c6:	d861      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093c8:	2b50      	cmp	r3, #80	@ 0x50
 80093ca:	d04b      	beq.n	8009464 <TIM_SlaveTimer_SetConfig+0x16c>
 80093cc:	2b50      	cmp	r3, #80	@ 0x50
 80093ce:	d85d      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	d019      	beq.n	8009408 <TIM_SlaveTimer_SetConfig+0x110>
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	d859      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093d8:	2b30      	cmp	r3, #48	@ 0x30
 80093da:	d05a      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093dc:	2b30      	cmp	r3, #48	@ 0x30
 80093de:	d855      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d056      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d851      	bhi.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d052      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	d050      	beq.n	8009492 <TIM_SlaveTimer_SetConfig+0x19a>
 80093f0:	e04c      	b.n	800948c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009402:	f000 f9ff 	bl	8009804 <TIM_ETR_SetConfig>
      break;
 8009406:	e045      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b05      	cmp	r3, #5
 800940e:	d004      	beq.n	800941a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009414:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009418:	d101      	bne.n	800941e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e03b      	b.n	8009496 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0201 	bic.w	r2, r2, #1
 8009434:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009444:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	621a      	str	r2, [r3, #32]
      break;
 8009462:	e017      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009470:	461a      	mov	r2, r3
 8009472:	f000 f895 	bl	80095a0 <TIM_TI1_ConfigInputStage>
      break;
 8009476:	e00d      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009484:	461a      	mov	r2, r3
 8009486:	f000 f8f7 	bl	8009678 <TIM_TI2_ConfigInputStage>
      break;
 800948a:	e003      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	e000      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009492:	bf00      	nop
  }

  return status;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	00100070 	.word	0x00100070
 80094a4:	00100060 	.word	0x00100060
 80094a8:	00100050 	.word	0x00100050
 80094ac:	00100040 	.word	0x00100040
 80094b0:	00100030 	.word	0x00100030
 80094b4:	00100020 	.word	0x00100020

080094b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f023 0201 	bic.w	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a28      	ldr	r2, [pc, #160]	@ (8009584 <TIM_TI1_SetConfig+0xcc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d01b      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ec:	d017      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4a25      	ldr	r2, [pc, #148]	@ (8009588 <TIM_TI1_SetConfig+0xd0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d013      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a24      	ldr	r2, [pc, #144]	@ (800958c <TIM_TI1_SetConfig+0xd4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00f      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a23      	ldr	r2, [pc, #140]	@ (8009590 <TIM_TI1_SetConfig+0xd8>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00b      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4a22      	ldr	r2, [pc, #136]	@ (8009594 <TIM_TI1_SetConfig+0xdc>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d007      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a21      	ldr	r2, [pc, #132]	@ (8009598 <TIM_TI1_SetConfig+0xe0>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d003      	beq.n	800951e <TIM_TI1_SetConfig+0x66>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a20      	ldr	r2, [pc, #128]	@ (800959c <TIM_TI1_SetConfig+0xe4>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d101      	bne.n	8009522 <TIM_TI1_SetConfig+0x6a>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <TIM_TI1_SetConfig+0x6c>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d008      	beq.n	800953a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e003      	b.n	8009542 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	b2db      	uxtb	r3, r3
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f023 030a 	bic.w	r3, r3, #10
 800955c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f003 030a 	and.w	r3, r3, #10
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40012c00 	.word	0x40012c00
 8009588:	40000400 	.word	0x40000400
 800958c:	40000800 	.word	0x40000800
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40013400 	.word	0x40013400
 8009598:	40014000 	.word	0x40014000
 800959c:	40015000 	.word	0x40015000

080095a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	f023 0201 	bic.w	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f023 030a 	bic.w	r3, r3, #10
 80095dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	621a      	str	r2, [r3, #32]
}
 80095f2:	bf00      	nop
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80095fe:	b480      	push	{r7}
 8009600:	b087      	sub	sp, #28
 8009602:	af00      	add	r7, sp, #0
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
 800960a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f023 0210 	bic.w	r2, r3, #16
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800962a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800963c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	031b      	lsls	r3, r3, #12
 8009642:	b29b      	uxth	r3, r3
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	621a      	str	r2, [r3, #32]
}
 800966c:	bf00      	nop
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f023 0210 	bic.w	r2, r3, #16
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	031b      	lsls	r3, r3, #12
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80096b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	621a      	str	r2, [r3, #32]
}
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f023 0303 	bic.w	r3, r3, #3
 8009704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4313      	orrs	r3, r2
 800970c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	b2db      	uxtb	r3, r3
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	621a      	str	r2, [r3, #32]
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800977c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	031b      	lsls	r3, r3, #12
 8009794:	b29b      	uxth	r3, r3
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80097a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	031b      	lsls	r3, r3, #12
 80097a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b085      	sub	sp, #20
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f043 0307 	orr.w	r3, r3, #7
 80097f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	609a      	str	r2, [r3, #8]
}
 80097f8:	bf00      	nop
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800981e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	021a      	lsls	r2, r3, #8
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	431a      	orrs	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4313      	orrs	r3, r2
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	609a      	str	r2, [r3, #8]
}
 8009838:	bf00      	nop
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f003 031f 	and.w	r3, r3, #31
 8009856:	2201      	movs	r2, #1
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1a      	ldr	r2, [r3, #32]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	43db      	mvns	r3, r3
 8009866:	401a      	ands	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 031f 	and.w	r3, r3, #31
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	431a      	orrs	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a26      	ldr	r2, [pc, #152]	@ (8009934 <TIM_ResetCallback+0xa4>)
 800989c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a25      	ldr	r2, [pc, #148]	@ (8009938 <TIM_ResetCallback+0xa8>)
 80098a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a24      	ldr	r2, [pc, #144]	@ (800993c <TIM_ResetCallback+0xac>)
 80098ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a23      	ldr	r2, [pc, #140]	@ (8009940 <TIM_ResetCallback+0xb0>)
 80098b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a22      	ldr	r2, [pc, #136]	@ (8009944 <TIM_ResetCallback+0xb4>)
 80098bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a21      	ldr	r2, [pc, #132]	@ (8009948 <TIM_ResetCallback+0xb8>)
 80098c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a20      	ldr	r2, [pc, #128]	@ (800994c <TIM_ResetCallback+0xbc>)
 80098cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009950 <TIM_ResetCallback+0xc0>)
 80098d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <TIM_ResetCallback+0xc4>)
 80098dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009958 <TIM_ResetCallback+0xc8>)
 80098e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a1c      	ldr	r2, [pc, #112]	@ (800995c <TIM_ResetCallback+0xcc>)
 80098ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009960 <TIM_ResetCallback+0xd0>)
 80098f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009964 <TIM_ResetCallback+0xd4>)
 80098fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <TIM_ResetCallback+0xd8>)
 8009904:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a18      	ldr	r2, [pc, #96]	@ (800996c <TIM_ResetCallback+0xdc>)
 800990c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a17      	ldr	r2, [pc, #92]	@ (8009970 <TIM_ResetCallback+0xe0>)
 8009914:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <TIM_ResetCallback+0xe4>)
 800991c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a15      	ldr	r2, [pc, #84]	@ (8009978 <TIM_ResetCallback+0xe8>)
 8009924:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	08004635 	.word	0x08004635
 8009938:	080087c9 	.word	0x080087c9
 800993c:	08008841 	.word	0x08008841
 8009940:	08008855 	.word	0x08008855
 8009944:	080087f1 	.word	0x080087f1
 8009948:	08008805 	.word	0x08008805
 800994c:	080087dd 	.word	0x080087dd
 8009950:	08008819 	.word	0x08008819
 8009954:	0800882d 	.word	0x0800882d
 8009958:	08008869 	.word	0x08008869
 800995c:	08009bd1 	.word	0x08009bd1
 8009960:	08009be5 	.word	0x08009be5
 8009964:	08009bf9 	.word	0x08009bf9
 8009968:	08009c0d 	.word	0x08009c0d
 800996c:	08009c21 	.word	0x08009c21
 8009970:	08009c35 	.word	0x08009c35
 8009974:	08009c49 	.word	0x08009c49
 8009978:	08009c5d 	.word	0x08009c5d

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e074      	b.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a34      	ldr	r2, [pc, #208]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d009      	beq.n	80099d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a33      	ldr	r2, [pc, #204]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d004      	beq.n	80099d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a31      	ldr	r2, [pc, #196]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d108      	bne.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a21      	ldr	r2, [pc, #132]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d022      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a14:	d01d      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d018      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a1d      	ldr	r2, [pc, #116]	@ (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d013      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00e      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a15      	ldr	r2, [pc, #84]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d009      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a18      	ldr	r2, [pc, #96]	@ (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d004      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a11      	ldr	r2, [pc, #68]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10c      	bne.n	8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	40012c00 	.word	0x40012c00
 8009a90:	40013400 	.word	0x40013400
 8009a94:	40015000 	.word	0x40015000
 8009a98:	40000400 	.word	0x40000400
 8009a9c:	40000800 	.word	0x40000800
 8009aa0:	40000c00 	.word	0x40000c00
 8009aa4:	40014000 	.word	0x40014000

08009aa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d101      	bne.n	8009ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e078      	b.n	8009bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a1c      	ldr	r2, [pc, #112]	@ (8009bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a19      	ldr	r2, [pc, #100]	@ (8009bcc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d11c      	bne.n	8009ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b74:	051b      	lsls	r3, r3, #20
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	40013400 	.word	0x40013400
 8009bcc:	40015000 	.word	0x40015000

08009bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e050      	b.n	8009d24 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d114      	bne.n	8009cb6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fde5 	bl	800a864 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d103      	bne.n	8009cac <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a21      	ldr	r2, [pc, #132]	@ (8009d2c <HAL_UART_Init+0xbc>)
 8009ca8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2224      	movs	r2, #36	@ 0x24
 8009cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0201 	bic.w	r2, r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 f912 	bl	800af00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fe13 	bl	800a908 <UART_SetConfig>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e01b      	b.n	8009d24 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 f991 	bl	800b044 <UART_CheckIdleState>
 8009d22:	4603      	mov	r3, r0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	08005149 	.word	0x08005149

08009d30 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e09c      	b.n	8009e96 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	d16c      	bne.n	8009e40 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009d66:	7afb      	ldrb	r3, [r7, #11]
 8009d68:	2b0c      	cmp	r3, #12
 8009d6a:	d85e      	bhi.n	8009e2a <HAL_UART_RegisterCallback+0xfa>
 8009d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d74 <HAL_UART_RegisterCallback+0x44>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009da9 	.word	0x08009da9
 8009d78:	08009db3 	.word	0x08009db3
 8009d7c:	08009dbd 	.word	0x08009dbd
 8009d80:	08009dc7 	.word	0x08009dc7
 8009d84:	08009dd1 	.word	0x08009dd1
 8009d88:	08009ddb 	.word	0x08009ddb
 8009d8c:	08009de5 	.word	0x08009de5
 8009d90:	08009def 	.word	0x08009def
 8009d94:	08009df9 	.word	0x08009df9
 8009d98:	08009e03 	.word	0x08009e03
 8009d9c:	08009e0d 	.word	0x08009e0d
 8009da0:	08009e17 	.word	0x08009e17
 8009da4:	08009e21 	.word	0x08009e21
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009db0:	e070      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009dba:	e06b      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009dc4:	e066      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009dce:	e061      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009dd8:	e05c      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009de2:	e057      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009dec:	e052      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009df6:	e04d      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009e00:	e048      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009e0a:	e043      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009e14:	e03e      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009e1e:	e039      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009e28:	e034      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8009e3e:	e029      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11a      	bne.n	8009e80 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b0b      	cmp	r3, #11
 8009e4e:	d002      	beq.n	8009e56 <HAL_UART_RegisterCallback+0x126>
 8009e50:	2b0c      	cmp	r3, #12
 8009e52:	d005      	beq.n	8009e60 <HAL_UART_RegisterCallback+0x130>
 8009e54:	e009      	b.n	8009e6a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009e5e:	e019      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009e68:	e014      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
        break;
 8009e7e:	e009      	b.n	8009e94 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop

08009ea4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	@ 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d167      	bne.n	8009f8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_UART_Transmit_DMA+0x24>
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e060      	b.n	8009f8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	88fa      	ldrh	r2, [r7, #6]
 8009ed6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	88fa      	ldrh	r2, [r7, #6]
 8009ede:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2221      	movs	r2, #33	@ 0x21
 8009eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d028      	beq.n	8009f4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009efe:	4a26      	ldr	r2, [pc, #152]	@ (8009f98 <HAL_UART_Transmit_DMA+0xf4>)
 8009f00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f06:	4a25      	ldr	r2, [pc, #148]	@ (8009f9c <HAL_UART_Transmit_DMA+0xf8>)
 8009f08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f0e:	4a24      	ldr	r2, [pc, #144]	@ (8009fa0 <HAL_UART_Transmit_DMA+0xfc>)
 8009f10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f16:	2200      	movs	r2, #0
 8009f18:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f22:	4619      	mov	r1, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3328      	adds	r3, #40	@ 0x28
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	f7fb fcd9 	bl	80058e4 <HAL_DMA_Start_IT>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2210      	movs	r2, #16
 8009f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e020      	b.n	8009f8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2240      	movs	r2, #64	@ 0x40
 8009f52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	613b      	str	r3, [r7, #16]
   return(result);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3308      	adds	r3, #8
 8009f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f74:	623a      	str	r2, [r7, #32]
 8009f76:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	69f9      	ldr	r1, [r7, #28]
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e5      	bne.n	8009f54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e000      	b.n	8009f8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009f8c:	2302      	movs	r3, #2
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3728      	adds	r7, #40	@ 0x28
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	0800b50f 	.word	0x0800b50f
 8009f9c:	0800b5ad 	.word	0x0800b5ad
 8009fa0:	0800b747 	.word	0x0800b747

08009fa4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fb8:	2b20      	cmp	r3, #32
 8009fba:	d137      	bne.n	800a02c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <HAL_UART_Receive_DMA+0x24>
 8009fc2:	88fb      	ldrh	r3, [r7, #6]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e030      	b.n	800a02e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a18      	ldr	r2, [pc, #96]	@ (800a038 <HAL_UART_Receive_DMA+0x94>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d01f      	beq.n	800a01c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d018      	beq.n	800a01c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	e853 3f00 	ldrex	r3, [r3]
 8009ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	623b      	str	r3, [r7, #32]
 800a00a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	69f9      	ldr	r1, [r7, #28]
 800a00e:	6a3a      	ldr	r2, [r7, #32]
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	61bb      	str	r3, [r7, #24]
   return(result);
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e6      	bne.n	8009fea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	461a      	mov	r2, r3
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f001 f926 	bl	800b274 <UART_Start_Receive_DMA>
 800a028:	4603      	mov	r3, r0
 800a02a:	e000      	b.n	800a02e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a02c:	2302      	movs	r3, #2
  }
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3728      	adds	r7, #40	@ 0x28
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40008000 	.word	0x40008000

0800a03c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b0ba      	sub	sp, #232	@ 0xe8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a066:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a06a:	4013      	ands	r3, r2
 800a06c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d11b      	bne.n	800a0b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07c:	f003 0320 	and.w	r3, r3, #32
 800a080:	2b00      	cmp	r3, #0
 800a082:	d015      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d105      	bne.n	800a09c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d009      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8312 	beq.w	800a6ca <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
      }
      return;
 800a0ae:	e30c      	b.n	800a6ca <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8129 	beq.w	800a30c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0be:	4b90      	ldr	r3, [pc, #576]	@ (800a300 <HAL_UART_IRQHandler+0x2c4>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a0ca:	4b8e      	ldr	r3, [pc, #568]	@ (800a304 <HAL_UART_IRQHandler+0x2c8>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 811c 	beq.w	800a30c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d011      	beq.n	800a104 <HAL_UART_IRQHandler+0xc8>
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0fa:	f043 0201 	orr.w	r2, r3, #1
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d011      	beq.n	800a134 <HAL_UART_IRQHandler+0xf8>
 800a110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2202      	movs	r2, #2
 800a122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a12a:	f043 0204 	orr.w	r2, r3, #4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d011      	beq.n	800a164 <HAL_UART_IRQHandler+0x128>
 800a140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2204      	movs	r2, #4
 800a152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a15a:	f043 0202 	orr.w	r2, r3, #2
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a168:	f003 0308 	and.w	r3, r3, #8
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d017      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a174:	f003 0320 	and.w	r3, r3, #32
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d105      	bne.n	800a188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a17c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a180:	4b5f      	ldr	r3, [pc, #380]	@ (800a300 <HAL_UART_IRQHandler+0x2c4>)
 800a182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2208      	movs	r2, #8
 800a18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a196:	f043 0208 	orr.w	r2, r3, #8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d012      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x196>
 800a1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00c      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c8:	f043 0220 	orr.w	r2, r3, #32
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 8278 	beq.w	800a6ce <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a226:	2b40      	cmp	r3, #64	@ 0x40
 800a228:	d005      	beq.n	800a236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a22e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a232:	2b00      	cmp	r3, #0
 800a234:	d058      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 f903 	bl	800b442 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a246:	2b40      	cmp	r3, #64	@ 0x40
 800a248:	d148      	bne.n	800a2dc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3308      	adds	r3, #8
 800a272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a27a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1d9      	bne.n	800a24a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a6:	4a18      	ldr	r2, [pc, #96]	@ (800a308 <HAL_UART_IRQHandler+0x2cc>)
 800a2a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fb fbeb 	bl	8005a8c <HAL_DMA_Abort_IT>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01f      	beq.n	800a2fc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ce:	e015      	b.n	800a2fc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2da:	e00f      	b.n	800a2fc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e6:	e009      	b.n	800a2fc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a2fa:	e1e8      	b.n	800a6ce <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fc:	bf00      	nop
    return;
 800a2fe:	e1e6      	b.n	800a6ce <HAL_UART_IRQHandler+0x692>
 800a300:	10000001 	.word	0x10000001
 800a304:	04000120 	.word	0x04000120
 800a308:	0800b7cb 	.word	0x0800b7cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a310:	2b01      	cmp	r3, #1
 800a312:	f040 8176 	bne.w	800a602 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a31a:	f003 0310 	and.w	r3, r3, #16
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 816f 	beq.w	800a602 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 8168 	beq.w	800a602 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2210      	movs	r2, #16
 800a338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a344:	2b40      	cmp	r3, #64	@ 0x40
 800a346:	f040 80dc 	bne.w	800a502 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80b1 	beq.w	800a4c4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a36c:	429a      	cmp	r2, r3
 800a36e:	f080 80a9 	bcs.w	800a4c4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a378:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f040 8087 	bne.w	800a49e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a3ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a3c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a3d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1da      	bne.n	800a390 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3308      	adds	r3, #8
 800a3e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3ec:	f023 0301 	bic.w	r3, r3, #1
 800a3f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a402:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a406:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e1      	bne.n	800a3da <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3308      	adds	r3, #8
 800a41c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a42c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a43a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a43c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a440:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e3      	bne.n	800a416 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a46a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a46c:	f023 0310 	bic.w	r3, r3, #16
 800a470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a47e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a480:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e4      	bne.n	800a45c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fb fa9e 	bl	80059da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	1a8a      	subs	r2, r1, r2
 800a4ba:	b292      	uxth	r2, r2
 800a4bc:	4611      	mov	r1, r2
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a4c2:	e106      	b.n	800a6d2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	f040 80ff 	bne.w	800a6d2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	f040 80f5 	bne.w	800a6d2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
      return;
 800a500:	e0e7      	b.n	800a6d2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a50e:	b29b      	uxth	r3, r3
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 80d9 	beq.w	800a6d6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80d4 	beq.w	800a6d6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a550:	647b      	str	r3, [r7, #68]	@ 0x44
 800a552:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e4      	bne.n	800a52e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3308      	adds	r3, #8
 800a56a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	623b      	str	r3, [r7, #32]
   return(result);
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a57a:	f023 0301 	bic.w	r3, r3, #1
 800a57e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3308      	adds	r3, #8
 800a588:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a58c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e1      	bne.n	800a564 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0310 	bic.w	r3, r3, #16
 800a5c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	69b9      	ldr	r1, [r7, #24]
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1e4      	bne.n	800a5b4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5f6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a600:	e069      	b.n	800a6d6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d010      	beq.n	800a630 <HAL_UART_IRQHandler+0x5f4>
 800a60e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a622:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a62e:	e055      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d014      	beq.n	800a666 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a644:	2b00      	cmp	r3, #0
 800a646:	d105      	bne.n	800a654 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a64c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d008      	beq.n	800a666 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d03e      	beq.n	800a6da <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
    }
    return;
 800a664:	e039      	b.n	800a6da <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <HAL_UART_IRQHandler+0x64a>
 800a672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 f8b7 	bl	800b7f2 <UART_EndTransmit_IT>
    return;
 800a684:	e02a      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a68a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <HAL_UART_IRQHandler+0x66e>
 800a692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a696:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d005      	beq.n	800a6aa <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6a8:	e018      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d012      	beq.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da0e      	bge.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6c8:	e008      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a6ca:	bf00      	nop
 800a6cc:	e006      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
    return;
 800a6ce:	bf00      	nop
 800a6d0:	e004      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a6d2:	bf00      	nop
 800a6d4:	e002      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a6d6:	bf00      	nop
 800a6d8:	e000      	b.n	800a6dc <HAL_UART_IRQHandler+0x6a0>
    return;
 800a6da:	bf00      	nop
  }
}
 800a6dc:	37e8      	adds	r7, #232	@ 0xe8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop

0800a6e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a09      	ldr	r2, [pc, #36]	@ (800a7d0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d009      	beq.n	800a7c4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	615a      	str	r2, [r3, #20]
  }
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	40008000 	.word	0x40008000

0800a7d4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a18      	ldr	r2, [pc, #96]	@ (800a844 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d027      	beq.n	800a836 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d120      	bne.n	800a832 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_EnableReceiverTimeout+0x2a>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e01c      	b.n	800a838 <HAL_UART_EnableReceiverTimeout+0x64>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2224      	movs	r2, #36	@ 0x24
 800a80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a81c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	e002      	b.n	800a838 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a832:	2302      	movs	r3, #2
 800a834:	e000      	b.n	800a838 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	40008000 	.word	0x40008000

0800a848 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d8 <UART_InitCallbacksToDefault+0x74>)
 800a870:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a19      	ldr	r2, [pc, #100]	@ (800a8dc <UART_InitCallbacksToDefault+0x78>)
 800a878:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a18      	ldr	r2, [pc, #96]	@ (800a8e0 <UART_InitCallbacksToDefault+0x7c>)
 800a880:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a17      	ldr	r2, [pc, #92]	@ (800a8e4 <UART_InitCallbacksToDefault+0x80>)
 800a888:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a16      	ldr	r2, [pc, #88]	@ (800a8e8 <UART_InitCallbacksToDefault+0x84>)
 800a890:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a15      	ldr	r2, [pc, #84]	@ (800a8ec <UART_InitCallbacksToDefault+0x88>)
 800a898:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a14      	ldr	r2, [pc, #80]	@ (800a8f0 <UART_InitCallbacksToDefault+0x8c>)
 800a8a0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a13      	ldr	r2, [pc, #76]	@ (800a8f4 <UART_InitCallbacksToDefault+0x90>)
 800a8a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a12      	ldr	r2, [pc, #72]	@ (800a8f8 <UART_InitCallbacksToDefault+0x94>)
 800a8b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a11      	ldr	r2, [pc, #68]	@ (800a8fc <UART_InitCallbacksToDefault+0x98>)
 800a8b8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a10      	ldr	r2, [pc, #64]	@ (800a900 <UART_InitCallbacksToDefault+0x9c>)
 800a8c0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a904 <UART_InitCallbacksToDefault+0xa0>)
 800a8c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	0800a6f9 	.word	0x0800a6f9
 800a8dc:	0800a6e5 	.word	0x0800a6e5
 800a8e0:	0800a721 	.word	0x0800a721
 800a8e4:	0800a70d 	.word	0x0800a70d
 800a8e8:	0800a735 	.word	0x0800a735
 800a8ec:	0800a749 	.word	0x0800a749
 800a8f0:	0800a75d 	.word	0x0800a75d
 800a8f4:	0800a771 	.word	0x0800a771
 800a8f8:	0800b84d 	.word	0x0800b84d
 800a8fc:	0800b861 	.word	0x0800b861
 800a900:	0800b875 	.word	0x0800b875
 800a904:	0800a785 	.word	0x0800a785

0800a908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a90c:	b08c      	sub	sp, #48	@ 0x30
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	431a      	orrs	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	431a      	orrs	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4baa      	ldr	r3, [pc, #680]	@ (800abe0 <UART_SetConfig+0x2d8>)
 800a938:	4013      	ands	r3, r2
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	6812      	ldr	r2, [r2, #0]
 800a93e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a940:	430b      	orrs	r3, r1
 800a942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	430a      	orrs	r2, r1
 800a958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a9f      	ldr	r2, [pc, #636]	@ (800abe4 <UART_SetConfig+0x2dc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a970:	4313      	orrs	r3, r2
 800a972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a97e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a988:	430b      	orrs	r3, r1
 800a98a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	f023 010f 	bic.w	r1, r3, #15
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a90      	ldr	r2, [pc, #576]	@ (800abe8 <UART_SetConfig+0x2e0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d125      	bne.n	800a9f8 <UART_SetConfig+0xf0>
 800a9ac:	4b8f      	ldr	r3, [pc, #572]	@ (800abec <UART_SetConfig+0x2e4>)
 800a9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d81a      	bhi.n	800a9f0 <UART_SetConfig+0xe8>
 800a9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c0 <UART_SetConfig+0xb8>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9e1 	.word	0x0800a9e1
 800a9c8:	0800a9d9 	.word	0x0800a9d9
 800a9cc:	0800a9e9 	.word	0x0800a9e9
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9d6:	e116      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9de:	e112      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	e10e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9e8:	2308      	movs	r3, #8
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ee:	e10a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f6:	e106      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a7c      	ldr	r2, [pc, #496]	@ (800abf0 <UART_SetConfig+0x2e8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d138      	bne.n	800aa74 <UART_SetConfig+0x16c>
 800aa02:	4b7a      	ldr	r3, [pc, #488]	@ (800abec <UART_SetConfig+0x2e4>)
 800aa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa08:	f003 030c 	and.w	r3, r3, #12
 800aa0c:	2b0c      	cmp	r3, #12
 800aa0e:	d82d      	bhi.n	800aa6c <UART_SetConfig+0x164>
 800aa10:	a201      	add	r2, pc, #4	@ (adr r2, 800aa18 <UART_SetConfig+0x110>)
 800aa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa16:	bf00      	nop
 800aa18:	0800aa4d 	.word	0x0800aa4d
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	0800aa6d 	.word	0x0800aa6d
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa5d 	.word	0x0800aa5d
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa6d 	.word	0x0800aa6d
 800aa34:	0800aa6d 	.word	0x0800aa6d
 800aa38:	0800aa55 	.word	0x0800aa55
 800aa3c:	0800aa6d 	.word	0x0800aa6d
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	0800aa6d 	.word	0x0800aa6d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa52:	e0d8      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa54:	2302      	movs	r3, #2
 800aa56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5a:	e0d4      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa62:	e0d0      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6a:	e0cc      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e0c8      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a5e      	ldr	r2, [pc, #376]	@ (800abf4 <UART_SetConfig+0x2ec>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d125      	bne.n	800aaca <UART_SetConfig+0x1c2>
 800aa7e:	4b5b      	ldr	r3, [pc, #364]	@ (800abec <UART_SetConfig+0x2e4>)
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa88:	2b30      	cmp	r3, #48	@ 0x30
 800aa8a:	d016      	beq.n	800aaba <UART_SetConfig+0x1b2>
 800aa8c:	2b30      	cmp	r3, #48	@ 0x30
 800aa8e:	d818      	bhi.n	800aac2 <UART_SetConfig+0x1ba>
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	d00a      	beq.n	800aaaa <UART_SetConfig+0x1a2>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d814      	bhi.n	800aac2 <UART_SetConfig+0x1ba>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <UART_SetConfig+0x19a>
 800aa9c:	2b10      	cmp	r3, #16
 800aa9e:	d008      	beq.n	800aab2 <UART_SetConfig+0x1aa>
 800aaa0:	e00f      	b.n	800aac2 <UART_SetConfig+0x1ba>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaa8:	e0ad      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab0:	e0a9      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aab2:	2304      	movs	r3, #4
 800aab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab8:	e0a5      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaba:	2308      	movs	r3, #8
 800aabc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac0:	e0a1      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aac2:	2310      	movs	r3, #16
 800aac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac8:	e09d      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a4a      	ldr	r2, [pc, #296]	@ (800abf8 <UART_SetConfig+0x2f0>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d125      	bne.n	800ab20 <UART_SetConfig+0x218>
 800aad4:	4b45      	ldr	r3, [pc, #276]	@ (800abec <UART_SetConfig+0x2e4>)
 800aad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aada:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aade:	2bc0      	cmp	r3, #192	@ 0xc0
 800aae0:	d016      	beq.n	800ab10 <UART_SetConfig+0x208>
 800aae2:	2bc0      	cmp	r3, #192	@ 0xc0
 800aae4:	d818      	bhi.n	800ab18 <UART_SetConfig+0x210>
 800aae6:	2b80      	cmp	r3, #128	@ 0x80
 800aae8:	d00a      	beq.n	800ab00 <UART_SetConfig+0x1f8>
 800aaea:	2b80      	cmp	r3, #128	@ 0x80
 800aaec:	d814      	bhi.n	800ab18 <UART_SetConfig+0x210>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <UART_SetConfig+0x1f0>
 800aaf2:	2b40      	cmp	r3, #64	@ 0x40
 800aaf4:	d008      	beq.n	800ab08 <UART_SetConfig+0x200>
 800aaf6:	e00f      	b.n	800ab18 <UART_SetConfig+0x210>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aafe:	e082      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab00:	2302      	movs	r3, #2
 800ab02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab06:	e07e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0e:	e07a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab10:	2308      	movs	r3, #8
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	e076      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e072      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a35      	ldr	r2, [pc, #212]	@ (800abfc <UART_SetConfig+0x2f4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d12a      	bne.n	800ab80 <UART_SetConfig+0x278>
 800ab2a:	4b30      	ldr	r3, [pc, #192]	@ (800abec <UART_SetConfig+0x2e4>)
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab38:	d01a      	beq.n	800ab70 <UART_SetConfig+0x268>
 800ab3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab3e:	d81b      	bhi.n	800ab78 <UART_SetConfig+0x270>
 800ab40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab44:	d00c      	beq.n	800ab60 <UART_SetConfig+0x258>
 800ab46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab4a:	d815      	bhi.n	800ab78 <UART_SetConfig+0x270>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <UART_SetConfig+0x250>
 800ab50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab54:	d008      	beq.n	800ab68 <UART_SetConfig+0x260>
 800ab56:	e00f      	b.n	800ab78 <UART_SetConfig+0x270>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab5e:	e052      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab60:	2302      	movs	r3, #2
 800ab62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab66:	e04e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6e:	e04a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab70:	2308      	movs	r3, #8
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab76:	e046      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e042      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a17      	ldr	r2, [pc, #92]	@ (800abe4 <UART_SetConfig+0x2dc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d13a      	bne.n	800ac00 <UART_SetConfig+0x2f8>
 800ab8a:	4b18      	ldr	r3, [pc, #96]	@ (800abec <UART_SetConfig+0x2e4>)
 800ab8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab98:	d01a      	beq.n	800abd0 <UART_SetConfig+0x2c8>
 800ab9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab9e:	d81b      	bhi.n	800abd8 <UART_SetConfig+0x2d0>
 800aba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aba4:	d00c      	beq.n	800abc0 <UART_SetConfig+0x2b8>
 800aba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abaa:	d815      	bhi.n	800abd8 <UART_SetConfig+0x2d0>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <UART_SetConfig+0x2b0>
 800abb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abb4:	d008      	beq.n	800abc8 <UART_SetConfig+0x2c0>
 800abb6:	e00f      	b.n	800abd8 <UART_SetConfig+0x2d0>
 800abb8:	2300      	movs	r3, #0
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e022      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abc0:	2302      	movs	r3, #2
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc6:	e01e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abc8:	2304      	movs	r3, #4
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abce:	e01a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abd0:	2308      	movs	r3, #8
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd6:	e016      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abd8:	2310      	movs	r3, #16
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e012      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abe0:	cfff69f3 	.word	0xcfff69f3
 800abe4:	40008000 	.word	0x40008000
 800abe8:	40013800 	.word	0x40013800
 800abec:	40021000 	.word	0x40021000
 800abf0:	40004400 	.word	0x40004400
 800abf4:	40004800 	.word	0x40004800
 800abf8:	40004c00 	.word	0x40004c00
 800abfc:	40005000 	.word	0x40005000
 800ac00:	2310      	movs	r3, #16
 800ac02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4aae      	ldr	r2, [pc, #696]	@ (800aec4 <UART_SetConfig+0x5bc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	f040 8097 	bne.w	800ad40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d823      	bhi.n	800ac62 <UART_SetConfig+0x35a>
 800ac1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac20 <UART_SetConfig+0x318>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac45 	.word	0x0800ac45
 800ac24:	0800ac63 	.word	0x0800ac63
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac63 	.word	0x0800ac63
 800ac30:	0800ac53 	.word	0x0800ac53
 800ac34:	0800ac63 	.word	0x0800ac63
 800ac38:	0800ac63 	.word	0x0800ac63
 800ac3c:	0800ac63 	.word	0x0800ac63
 800ac40:	0800ac5b 	.word	0x0800ac5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac44:	f7fc f812 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 800ac48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac4a:	e010      	b.n	800ac6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac4c:	4b9e      	ldr	r3, [pc, #632]	@ (800aec8 <UART_SetConfig+0x5c0>)
 800ac4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac50:	e00d      	b.n	800ac6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac52:	f7fb ff9d 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 800ac56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac58:	e009      	b.n	800ac6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac60:	e005      	b.n	800ac6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8130 	beq.w	800aed6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7a:	4a94      	ldr	r2, [pc, #592]	@ (800aecc <UART_SetConfig+0x5c4>)
 800ac7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac80:	461a      	mov	r2, r3
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	4413      	add	r3, r2
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d305      	bcc.n	800aca6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d903      	bls.n	800acae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acac:	e113      	b.n	800aed6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb0:	2200      	movs	r2, #0
 800acb2:	60bb      	str	r3, [r7, #8]
 800acb4:	60fa      	str	r2, [r7, #12]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	4a84      	ldr	r2, [pc, #528]	@ (800aecc <UART_SetConfig+0x5c4>)
 800acbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	2200      	movs	r2, #0
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800accc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acd0:	f7f6 f876 	bl	8000dc0 <__aeabi_uldivmod>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4610      	mov	r0, r2
 800acda:	4619      	mov	r1, r3
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	020b      	lsls	r3, r1, #8
 800ace6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acea:	0202      	lsls	r2, r0, #8
 800acec:	6979      	ldr	r1, [r7, #20]
 800acee:	6849      	ldr	r1, [r1, #4]
 800acf0:	0849      	lsrs	r1, r1, #1
 800acf2:	2000      	movs	r0, #0
 800acf4:	460c      	mov	r4, r1
 800acf6:	4605      	mov	r5, r0
 800acf8:	eb12 0804 	adds.w	r8, r2, r4
 800acfc:	eb43 0905 	adc.w	r9, r3, r5
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	469a      	mov	sl, r3
 800ad08:	4693      	mov	fp, r2
 800ad0a:	4652      	mov	r2, sl
 800ad0c:	465b      	mov	r3, fp
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f6 f855 	bl	8000dc0 <__aeabi_uldivmod>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad24:	d308      	bcc.n	800ad38 <UART_SetConfig+0x430>
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad2c:	d204      	bcs.n	800ad38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6a3a      	ldr	r2, [r7, #32]
 800ad34:	60da      	str	r2, [r3, #12]
 800ad36:	e0ce      	b.n	800aed6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad3e:	e0ca      	b.n	800aed6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad48:	d166      	bne.n	800ae18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ad4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	d827      	bhi.n	800ada2 <UART_SetConfig+0x49a>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <UART_SetConfig+0x450>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad85 	.word	0x0800ad85
 800ad60:	0800ad8d 	.word	0x0800ad8d
 800ad64:	0800ada3 	.word	0x0800ada3
 800ad68:	0800ad93 	.word	0x0800ad93
 800ad6c:	0800ada3 	.word	0x0800ada3
 800ad70:	0800ada3 	.word	0x0800ada3
 800ad74:	0800ada3 	.word	0x0800ada3
 800ad78:	0800ad9b 	.word	0x0800ad9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7c:	f7fb ff76 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 800ad80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad82:	e014      	b.n	800adae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad84:	f7fb ff88 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 800ad88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad8a:	e010      	b.n	800adae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad8c:	4b4e      	ldr	r3, [pc, #312]	@ (800aec8 <UART_SetConfig+0x5c0>)
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad90:	e00d      	b.n	800adae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad92:	f7fb fefd 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 800ad96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad98:	e009      	b.n	800adae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada0:	e005      	b.n	800adae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8090 	beq.w	800aed6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adba:	4a44      	ldr	r2, [pc, #272]	@ (800aecc <UART_SetConfig+0x5c4>)
 800adbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc0:	461a      	mov	r2, r3
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adc8:	005a      	lsls	r2, r3, #1
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	085b      	lsrs	r3, r3, #1
 800add0:	441a      	add	r2, r3
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	2b0f      	cmp	r3, #15
 800ade0:	d916      	bls.n	800ae10 <UART_SetConfig+0x508>
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ade8:	d212      	bcs.n	800ae10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	b29b      	uxth	r3, r3
 800adee:	f023 030f 	bic.w	r3, r3, #15
 800adf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	8bfb      	ldrh	r3, [r7, #30]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	8bfa      	ldrh	r2, [r7, #30]
 800ae0c:	60da      	str	r2, [r3, #12]
 800ae0e:	e062      	b.n	800aed6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae16:	e05e      	b.n	800aed6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d828      	bhi.n	800ae72 <UART_SetConfig+0x56a>
 800ae20:	a201      	add	r2, pc, #4	@ (adr r2, 800ae28 <UART_SetConfig+0x520>)
 800ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae26:	bf00      	nop
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	0800ae73 	.word	0x0800ae73
 800ae38:	0800ae63 	.word	0x0800ae63
 800ae3c:	0800ae73 	.word	0x0800ae73
 800ae40:	0800ae73 	.word	0x0800ae73
 800ae44:	0800ae73 	.word	0x0800ae73
 800ae48:	0800ae6b 	.word	0x0800ae6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae4c:	f7fb ff0e 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 800ae50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae52:	e014      	b.n	800ae7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae54:	f7fb ff20 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 800ae58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae5a:	e010      	b.n	800ae7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae5c:	4b1a      	ldr	r3, [pc, #104]	@ (800aec8 <UART_SetConfig+0x5c0>)
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae60:	e00d      	b.n	800ae7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae62:	f7fb fe95 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 800ae66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae68:	e009      	b.n	800ae7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae70:	e005      	b.n	800ae7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d028      	beq.n	800aed6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae88:	4a10      	ldr	r2, [pc, #64]	@ (800aecc <UART_SetConfig+0x5c4>)
 800ae8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	441a      	add	r2, r3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	2b0f      	cmp	r3, #15
 800aeac:	d910      	bls.n	800aed0 <UART_SetConfig+0x5c8>
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb4:	d20c      	bcs.n	800aed0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60da      	str	r2, [r3, #12]
 800aec0:	e009      	b.n	800aed6 <UART_SetConfig+0x5ce>
 800aec2:	bf00      	nop
 800aec4:	40008000 	.word	0x40008000
 800aec8:	00f42400 	.word	0x00f42400
 800aecc:	0800c9c4 	.word	0x0800c9c4
      }
      else
      {
        ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2200      	movs	r2, #0
 800aeea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2200      	movs	r2, #0
 800aef0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aef2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3730      	adds	r7, #48	@ 0x30
 800aefa:	46bd      	mov	sp, r7
 800aefc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00a      	beq.n	800af2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00a      	beq.n	800af6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00a      	beq.n	800afb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb6:	f003 0320 	and.w	r3, r3, #32
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d01a      	beq.n	800b016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800affe:	d10a      	bne.n	800b016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b098      	sub	sp, #96	@ 0x60
 800b048:	af02      	add	r7, sp, #8
 800b04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b054:	f7fa fa82 	bl	800555c <HAL_GetTick>
 800b058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b08      	cmp	r3, #8
 800b066:	d12f      	bne.n	800b0c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b070:	2200      	movs	r2, #0
 800b072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f88e 	bl	800b198 <UART_WaitOnFlagUntilTimeout>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d022      	beq.n	800b0c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b096:	653b      	str	r3, [r7, #80]	@ 0x50
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e6      	bne.n	800b082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e063      	b.n	800b190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d149      	bne.n	800b16a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f857 	bl	800b198 <UART_WaitOnFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d03c      	beq.n	800b16a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b10e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b110:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e6      	bne.n	800b0f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3308      	adds	r3, #8
 800b128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	e853 3f00 	ldrex	r3, [r3]
 800b130:	60fb      	str	r3, [r7, #12]
   return(result);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f023 0301 	bic.w	r3, r3, #1
 800b138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b142:	61fa      	str	r2, [r7, #28]
 800b144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	69b9      	ldr	r1, [r7, #24]
 800b148:	69fa      	ldr	r2, [r7, #28]
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	617b      	str	r3, [r7, #20]
   return(result);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e5      	bne.n	800b122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e012      	b.n	800b190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3758      	adds	r7, #88	@ 0x58
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a8:	e04f      	b.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b0:	d04b      	beq.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b2:	f7fa f9d3 	bl	800555c <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d302      	bcc.n	800b1c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e04e      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d037      	beq.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b80      	cmp	r3, #128	@ 0x80
 800b1de:	d034      	beq.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2b40      	cmp	r3, #64	@ 0x40
 800b1e4:	d031      	beq.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d110      	bne.n	800b216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2208      	movs	r2, #8
 800b1fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f920 	bl	800b442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2208      	movs	r2, #8
 800b206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e029      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b224:	d111      	bne.n	800b24a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 f906 	bl	800b442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e00f      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	4013      	ands	r3, r2
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	429a      	cmp	r2, r3
 800b258:	bf0c      	ite	eq
 800b25a:	2301      	moveq	r3, #1
 800b25c:	2300      	movne	r3, #0
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	461a      	mov	r2, r3
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	429a      	cmp	r2, r3
 800b266:	d0a0      	beq.n	800b1aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b096      	sub	sp, #88	@ 0x58
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	88fa      	ldrh	r2, [r7, #6]
 800b28c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2222      	movs	r2, #34	@ 0x22
 800b29c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d02d      	beq.n	800b306 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b0:	4a40      	ldr	r2, [pc, #256]	@ (800b3b4 <UART_Start_Receive_DMA+0x140>)
 800b2b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ba:	4a3f      	ldr	r2, [pc, #252]	@ (800b3b8 <UART_Start_Receive_DMA+0x144>)
 800b2bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c4:	4a3d      	ldr	r2, [pc, #244]	@ (800b3bc <UART_Start_Receive_DMA+0x148>)
 800b2c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3324      	adds	r3, #36	@ 0x24
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	88fb      	ldrh	r3, [r7, #6]
 800b2e8:	f7fa fafc 	bl	80058e4 <HAL_DMA_Start_IT>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2210      	movs	r2, #16
 800b2f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	e051      	b.n	800b3aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d018      	beq.n	800b340 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b322:	657b      	str	r3, [r7, #84]	@ 0x54
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b32e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b334:	e841 2300 	strex	r3, r2, [r1]
 800b338:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e6      	bne.n	800b30e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	f043 0301 	orr.w	r3, r3, #1
 800b356:	653b      	str	r3, [r7, #80]	@ 0x50
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b360:	637a      	str	r2, [r7, #52]	@ 0x34
 800b362:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e5      	bne.n	800b340 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3308      	adds	r3, #8
 800b37a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	e853 3f00 	ldrex	r3, [r3]
 800b382:	613b      	str	r3, [r7, #16]
   return(result);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b394:	623a      	str	r2, [r7, #32]
 800b396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b398:	69f9      	ldr	r1, [r7, #28]
 800b39a:	6a3a      	ldr	r2, [r7, #32]
 800b39c:	e841 2300 	strex	r3, r2, [r1]
 800b3a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1e5      	bne.n	800b374 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3758      	adds	r7, #88	@ 0x58
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800b5cd 	.word	0x0800b5cd
 800b3b8:	0800b701 	.word	0x0800b701
 800b3bc:	0800b747 	.word	0x0800b747

0800b3c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b08f      	sub	sp, #60	@ 0x3c
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e6      	bne.n	800b3c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	60bb      	str	r3, [r7, #8]
   return(result);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b410:	633b      	str	r3, [r7, #48]	@ 0x30
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b41a:	61ba      	str	r2, [r7, #24]
 800b41c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6979      	ldr	r1, [r7, #20]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	613b      	str	r3, [r7, #16]
   return(result);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e5      	bne.n	800b3fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b436:	bf00      	nop
 800b438:	373c      	adds	r7, #60	@ 0x3c
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b442:	b480      	push	{r7}
 800b444:	b095      	sub	sp, #84	@ 0x54
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b452:	e853 3f00 	ldrex	r3, [r3]
 800b456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b45e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b468:	643b      	str	r3, [r7, #64]	@ 0x40
 800b46a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b46e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b470:	e841 2300 	strex	r3, r2, [r1]
 800b474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e6      	bne.n	800b44a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	e853 3f00 	ldrex	r3, [r3]
 800b48a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b492:	f023 0301 	bic.w	r3, r3, #1
 800b496:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3308      	adds	r3, #8
 800b49e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e3      	bne.n	800b47c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d118      	bne.n	800b4ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f023 0310 	bic.w	r3, r3, #16
 800b4d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4da:	61bb      	str	r3, [r7, #24]
 800b4dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6979      	ldr	r1, [r7, #20]
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e6      	bne.n	800b4bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b502:	bf00      	nop
 800b504:	3754      	adds	r7, #84	@ 0x54
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b090      	sub	sp, #64	@ 0x40
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d137      	bne.n	800b59a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b552:	633a      	str	r2, [r7, #48]	@ 0x30
 800b554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	60fb      	str	r3, [r7, #12]
   return(result);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b584:	61fb      	str	r3, [r7, #28]
 800b586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	69b9      	ldr	r1, [r7, #24]
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	617b      	str	r3, [r7, #20]
   return(result);
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e6      	bne.n	800b566 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b598:	e004      	b.n	800b5a4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b5a2:	4798      	blx	r3
}
 800b5a4:	bf00      	nop
 800b5a6:	3740      	adds	r7, #64	@ 0x40
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5c4:	bf00      	nop
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b09c      	sub	sp, #112	@ 0x70
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d171      	bne.n	800b6cc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b5e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5f8:	e853 3f00 	ldrex	r3, [r3]
 800b5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b604:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b60e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b610:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b612:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b616:	e841 2300 	strex	r3, r2, [r1]
 800b61a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1e6      	bne.n	800b5f0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3308      	adds	r3, #8
 800b628:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b634:	f023 0301 	bic.w	r3, r3, #1
 800b638:	667b      	str	r3, [r7, #100]	@ 0x64
 800b63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3308      	adds	r3, #8
 800b640:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b642:	647a      	str	r2, [r7, #68]	@ 0x44
 800b644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e5      	bne.n	800b622 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3308      	adds	r3, #8
 800b65c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	623b      	str	r3, [r7, #32]
   return(result);
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b66c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b66e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b676:	633a      	str	r2, [r7, #48]	@ 0x30
 800b678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e5      	bne.n	800b656 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b696:	2b01      	cmp	r3, #1
 800b698:	d118      	bne.n	800b6cc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0310 	bic.w	r3, r3, #16
 800b6ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b8:	61fb      	str	r3, [r7, #28]
 800b6ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	69b9      	ldr	r1, [r7, #24]
 800b6be:	69fa      	ldr	r2, [r7, #28]
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e6      	bne.n	800b69a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d109      	bne.n	800b6ee <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b6da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6ea:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6ec:	e004      	b.n	800b6f8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b6ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6f6:	4798      	blx	r3
}
 800b6f8:	bf00      	nop
 800b6fa:	3770      	adds	r7, #112	@ 0x70
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2201      	movs	r2, #1
 800b712:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10b      	bne.n	800b734 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b728:	0852      	lsrs	r2, r2, #1
 800b72a:	b292      	uxth	r2, r2
 800b72c:	4611      	mov	r1, r2
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b732:	e004      	b.n	800b73e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	4798      	blx	r3
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b752:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b75a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b762:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b76e:	2b80      	cmp	r3, #128	@ 0x80
 800b770:	d109      	bne.n	800b786 <UART_DMAError+0x40>
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2b21      	cmp	r3, #33	@ 0x21
 800b776:	d106      	bne.n	800b786 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b780:	6978      	ldr	r0, [r7, #20]
 800b782:	f7ff fe1d 	bl	800b3c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b790:	2b40      	cmp	r3, #64	@ 0x40
 800b792:	d109      	bne.n	800b7a8 <UART_DMAError+0x62>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b22      	cmp	r3, #34	@ 0x22
 800b798:	d106      	bne.n	800b7a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b7a2:	6978      	ldr	r0, [r7, #20]
 800b7a4:	f7ff fe4d 	bl	800b442 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ae:	f043 0210 	orr.w	r2, r3, #16
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7be:	6978      	ldr	r0, [r7, #20]
 800b7c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c2:	bf00      	nop
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b088      	sub	sp, #32
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	60bb      	str	r3, [r7, #8]
   return(result);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b80e:	61fb      	str	r3, [r7, #28]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6979      	ldr	r1, [r7, #20]
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	613b      	str	r3, [r7, #16]
   return(result);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e6      	bne.n	800b7fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2220      	movs	r2, #32
 800b830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b844:	bf00      	nop
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <HAL_UARTEx_DisableFifoMode+0x16>
 800b89a:	2302      	movs	r3, #2
 800b89c:	e027      	b.n	800b8ee <HAL_UARTEx_DisableFifoMode+0x66>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2224      	movs	r2, #36	@ 0x24
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0201 	bic.w	r2, r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2220      	movs	r2, #32
 800b8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d101      	bne.n	800b912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b90e:	2302      	movs	r3, #2
 800b910:	e02d      	b.n	800b96e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2224      	movs	r2, #36	@ 0x24
 800b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0201 	bic.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f850 	bl	800b9f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2220      	movs	r2, #32
 800b960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b986:	2b01      	cmp	r3, #1
 800b988:	d101      	bne.n	800b98e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b98a:	2302      	movs	r3, #2
 800b98c:	e02d      	b.n	800b9ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2224      	movs	r2, #36	@ 0x24
 800b99a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f022 0201 	bic.w	r2, r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f812 	bl	800b9f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d108      	bne.n	800ba16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba14:	e031      	b.n	800ba7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba16:	2308      	movs	r3, #8
 800ba18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba1a:	2308      	movs	r3, #8
 800ba1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	0e5b      	lsrs	r3, r3, #25
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	0f5b      	lsrs	r3, r3, #29
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f003 0307 	and.w	r3, r3, #7
 800ba3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	7b3a      	ldrb	r2, [r7, #12]
 800ba42:	4911      	ldr	r1, [pc, #68]	@ (800ba88 <UARTEx_SetNbDataToProcess+0x94>)
 800ba44:	5c8a      	ldrb	r2, [r1, r2]
 800ba46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba4a:	7b3a      	ldrb	r2, [r7, #12]
 800ba4c:	490f      	ldr	r1, [pc, #60]	@ (800ba8c <UARTEx_SetNbDataToProcess+0x98>)
 800ba4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	7b7a      	ldrb	r2, [r7, #13]
 800ba60:	4909      	ldr	r1, [pc, #36]	@ (800ba88 <UARTEx_SetNbDataToProcess+0x94>)
 800ba62:	5c8a      	ldrb	r2, [r1, r2]
 800ba64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba68:	7b7a      	ldrb	r2, [r7, #13]
 800ba6a:	4908      	ldr	r1, [pc, #32]	@ (800ba8c <UARTEx_SetNbDataToProcess+0x98>)
 800ba6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba7a:	bf00      	nop
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	0800c9dc 	.word	0x0800c9dc
 800ba8c:	0800c9e4 	.word	0x0800c9e4

0800ba90 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	ed93 7a06 	vldr	s14, [r3, #24]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	edd3 7a07 	vldr	s15, [r3, #28]
 800baa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	edd3 7a08 	vldr	s15, [r3, #32]
 800bab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	edd3 7a06 	vldr	s15, [r3, #24]
 800bac0:	eeb1 7a67 	vneg.f32	s14, s15
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	edd3 7a08 	vldr	s15, [r3, #32]
 800baca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bace:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d006      	beq.n	800baf4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	330c      	adds	r3, #12
 800baea:	220c      	movs	r2, #12
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f804 	bl	800bafc <memset>
  }

}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <memset>:
 800bafc:	4402      	add	r2, r0
 800bafe:	4603      	mov	r3, r0
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d100      	bne.n	800bb06 <memset+0xa>
 800bb04:	4770      	bx	lr
 800bb06:	f803 1b01 	strb.w	r1, [r3], #1
 800bb0a:	e7f9      	b.n	800bb00 <memset+0x4>

0800bb0c <__errno>:
 800bb0c:	4b01      	ldr	r3, [pc, #4]	@ (800bb14 <__errno+0x8>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	2000020c 	.word	0x2000020c

0800bb18 <__libc_init_array>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4d0d      	ldr	r5, [pc, #52]	@ (800bb50 <__libc_init_array+0x38>)
 800bb1c:	4c0d      	ldr	r4, [pc, #52]	@ (800bb54 <__libc_init_array+0x3c>)
 800bb1e:	1b64      	subs	r4, r4, r5
 800bb20:	10a4      	asrs	r4, r4, #2
 800bb22:	2600      	movs	r6, #0
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d109      	bne.n	800bb3c <__libc_init_array+0x24>
 800bb28:	4d0b      	ldr	r5, [pc, #44]	@ (800bb58 <__libc_init_array+0x40>)
 800bb2a:	4c0c      	ldr	r4, [pc, #48]	@ (800bb5c <__libc_init_array+0x44>)
 800bb2c:	f000 ff32 	bl	800c994 <_init>
 800bb30:	1b64      	subs	r4, r4, r5
 800bb32:	10a4      	asrs	r4, r4, #2
 800bb34:	2600      	movs	r6, #0
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	d105      	bne.n	800bb46 <__libc_init_array+0x2e>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb40:	4798      	blx	r3
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7ee      	b.n	800bb24 <__libc_init_array+0xc>
 800bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4a:	4798      	blx	r3
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	e7f2      	b.n	800bb36 <__libc_init_array+0x1e>
 800bb50:	0800cdfc 	.word	0x0800cdfc
 800bb54:	0800cdfc 	.word	0x0800cdfc
 800bb58:	0800cdfc 	.word	0x0800cdfc
 800bb5c:	0800ce00 	.word	0x0800ce00

0800bb60 <memcpy>:
 800bb60:	440a      	add	r2, r1
 800bb62:	4291      	cmp	r1, r2
 800bb64:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb68:	d100      	bne.n	800bb6c <memcpy+0xc>
 800bb6a:	4770      	bx	lr
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb76:	4291      	cmp	r1, r2
 800bb78:	d1f9      	bne.n	800bb6e <memcpy+0xe>
 800bb7a:	bd10      	pop	{r4, pc}

0800bb7c <atan2f>:
 800bb7c:	f000 b94c 	b.w	800be18 <__ieee754_atan2f>

0800bb80 <sqrtf>:
 800bb80:	b508      	push	{r3, lr}
 800bb82:	ed2d 8b02 	vpush	{d8}
 800bb86:	eeb0 8a40 	vmov.f32	s16, s0
 800bb8a:	f000 f8a1 	bl	800bcd0 <__ieee754_sqrtf>
 800bb8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	d60c      	bvs.n	800bbb2 <sqrtf+0x32>
 800bb98:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bbb8 <sqrtf+0x38>
 800bb9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba4:	d505      	bpl.n	800bbb2 <sqrtf+0x32>
 800bba6:	f7ff ffb1 	bl	800bb0c <__errno>
 800bbaa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bbae:	2321      	movs	r3, #33	@ 0x21
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	bd08      	pop	{r3, pc}
 800bbb8:	00000000 	.word	0x00000000

0800bbbc <cosf>:
 800bbbc:	ee10 3a10 	vmov	r3, s0
 800bbc0:	b507      	push	{r0, r1, r2, lr}
 800bbc2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc3c <cosf+0x80>)
 800bbc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d806      	bhi.n	800bbda <cosf+0x1e>
 800bbcc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bc40 <cosf+0x84>
 800bbd0:	b003      	add	sp, #12
 800bbd2:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd6:	f000 b87f 	b.w	800bcd8 <__kernel_cosf>
 800bbda:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbde:	d304      	bcc.n	800bbea <cosf+0x2e>
 800bbe0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bbe4:	b003      	add	sp, #12
 800bbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbea:	4668      	mov	r0, sp
 800bbec:	f000 f9b4 	bl	800bf58 <__ieee754_rem_pio2f>
 800bbf0:	f000 0003 	and.w	r0, r0, #3
 800bbf4:	2801      	cmp	r0, #1
 800bbf6:	d009      	beq.n	800bc0c <cosf+0x50>
 800bbf8:	2802      	cmp	r0, #2
 800bbfa:	d010      	beq.n	800bc1e <cosf+0x62>
 800bbfc:	b9b0      	cbnz	r0, 800bc2c <cosf+0x70>
 800bbfe:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc02:	ed9d 0a00 	vldr	s0, [sp]
 800bc06:	f000 f867 	bl	800bcd8 <__kernel_cosf>
 800bc0a:	e7eb      	b.n	800bbe4 <cosf+0x28>
 800bc0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc10:	ed9d 0a00 	vldr	s0, [sp]
 800bc14:	f000 f8b8 	bl	800bd88 <__kernel_sinf>
 800bc18:	eeb1 0a40 	vneg.f32	s0, s0
 800bc1c:	e7e2      	b.n	800bbe4 <cosf+0x28>
 800bc1e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc22:	ed9d 0a00 	vldr	s0, [sp]
 800bc26:	f000 f857 	bl	800bcd8 <__kernel_cosf>
 800bc2a:	e7f5      	b.n	800bc18 <cosf+0x5c>
 800bc2c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc30:	ed9d 0a00 	vldr	s0, [sp]
 800bc34:	2001      	movs	r0, #1
 800bc36:	f000 f8a7 	bl	800bd88 <__kernel_sinf>
 800bc3a:	e7d3      	b.n	800bbe4 <cosf+0x28>
 800bc3c:	3f490fd8 	.word	0x3f490fd8
 800bc40:	00000000 	.word	0x00000000

0800bc44 <sinf>:
 800bc44:	ee10 3a10 	vmov	r3, s0
 800bc48:	b507      	push	{r0, r1, r2, lr}
 800bc4a:	4a1f      	ldr	r2, [pc, #124]	@ (800bcc8 <sinf+0x84>)
 800bc4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d807      	bhi.n	800bc64 <sinf+0x20>
 800bc54:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bccc <sinf+0x88>
 800bc58:	2000      	movs	r0, #0
 800bc5a:	b003      	add	sp, #12
 800bc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc60:	f000 b892 	b.w	800bd88 <__kernel_sinf>
 800bc64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc68:	d304      	bcc.n	800bc74 <sinf+0x30>
 800bc6a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bc6e:	b003      	add	sp, #12
 800bc70:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc74:	4668      	mov	r0, sp
 800bc76:	f000 f96f 	bl	800bf58 <__ieee754_rem_pio2f>
 800bc7a:	f000 0003 	and.w	r0, r0, #3
 800bc7e:	2801      	cmp	r0, #1
 800bc80:	d00a      	beq.n	800bc98 <sinf+0x54>
 800bc82:	2802      	cmp	r0, #2
 800bc84:	d00f      	beq.n	800bca6 <sinf+0x62>
 800bc86:	b9c0      	cbnz	r0, 800bcba <sinf+0x76>
 800bc88:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc8c:	ed9d 0a00 	vldr	s0, [sp]
 800bc90:	2001      	movs	r0, #1
 800bc92:	f000 f879 	bl	800bd88 <__kernel_sinf>
 800bc96:	e7ea      	b.n	800bc6e <sinf+0x2a>
 800bc98:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc9c:	ed9d 0a00 	vldr	s0, [sp]
 800bca0:	f000 f81a 	bl	800bcd8 <__kernel_cosf>
 800bca4:	e7e3      	b.n	800bc6e <sinf+0x2a>
 800bca6:	eddd 0a01 	vldr	s1, [sp, #4]
 800bcaa:	ed9d 0a00 	vldr	s0, [sp]
 800bcae:	2001      	movs	r0, #1
 800bcb0:	f000 f86a 	bl	800bd88 <__kernel_sinf>
 800bcb4:	eeb1 0a40 	vneg.f32	s0, s0
 800bcb8:	e7d9      	b.n	800bc6e <sinf+0x2a>
 800bcba:	eddd 0a01 	vldr	s1, [sp, #4]
 800bcbe:	ed9d 0a00 	vldr	s0, [sp]
 800bcc2:	f000 f809 	bl	800bcd8 <__kernel_cosf>
 800bcc6:	e7f5      	b.n	800bcb4 <sinf+0x70>
 800bcc8:	3f490fd8 	.word	0x3f490fd8
 800bccc:	00000000 	.word	0x00000000

0800bcd0 <__ieee754_sqrtf>:
 800bcd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bcd4:	4770      	bx	lr
	...

0800bcd8 <__kernel_cosf>:
 800bcd8:	ee10 3a10 	vmov	r3, s0
 800bcdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bce0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bce4:	eef0 6a40 	vmov.f32	s13, s0
 800bce8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bcec:	d204      	bcs.n	800bcf8 <__kernel_cosf+0x20>
 800bcee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bcf2:	ee17 2a90 	vmov	r2, s15
 800bcf6:	b342      	cbz	r2, 800bd4a <__kernel_cosf+0x72>
 800bcf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bcfc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bd68 <__kernel_cosf+0x90>
 800bd00:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bd6c <__kernel_cosf+0x94>
 800bd04:	4a1a      	ldr	r2, [pc, #104]	@ (800bd70 <__kernel_cosf+0x98>)
 800bd06:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bd74 <__kernel_cosf+0x9c>
 800bd10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd14:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bd78 <__kernel_cosf+0xa0>
 800bd18:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd1c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bd7c <__kernel_cosf+0xa4>
 800bd20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd24:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bd80 <__kernel_cosf+0xa8>
 800bd28:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd2c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bd30:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bd34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bd38:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd40:	d804      	bhi.n	800bd4c <__kernel_cosf+0x74>
 800bd42:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bd46:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd4a:	4770      	bx	lr
 800bd4c:	4a0d      	ldr	r2, [pc, #52]	@ (800bd84 <__kernel_cosf+0xac>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	bf9a      	itte	ls
 800bd52:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bd56:	ee07 3a10 	vmovls	s14, r3
 800bd5a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bd5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd66:	e7ec      	b.n	800bd42 <__kernel_cosf+0x6a>
 800bd68:	ad47d74e 	.word	0xad47d74e
 800bd6c:	310f74f6 	.word	0x310f74f6
 800bd70:	3e999999 	.word	0x3e999999
 800bd74:	b493f27c 	.word	0xb493f27c
 800bd78:	37d00d01 	.word	0x37d00d01
 800bd7c:	bab60b61 	.word	0xbab60b61
 800bd80:	3d2aaaab 	.word	0x3d2aaaab
 800bd84:	3f480000 	.word	0x3f480000

0800bd88 <__kernel_sinf>:
 800bd88:	ee10 3a10 	vmov	r3, s0
 800bd8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd94:	d204      	bcs.n	800bda0 <__kernel_sinf+0x18>
 800bd96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd9a:	ee17 3a90 	vmov	r3, s15
 800bd9e:	b35b      	cbz	r3, 800bdf8 <__kernel_sinf+0x70>
 800bda0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bda4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bdfc <__kernel_sinf+0x74>
 800bda8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800be00 <__kernel_sinf+0x78>
 800bdac:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bdb0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800be04 <__kernel_sinf+0x7c>
 800bdb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bdb8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800be08 <__kernel_sinf+0x80>
 800bdbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bdc0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800be0c <__kernel_sinf+0x84>
 800bdc4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bdc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bdcc:	b930      	cbnz	r0, 800bddc <__kernel_sinf+0x54>
 800bdce:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800be10 <__kernel_sinf+0x88>
 800bdd2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bdd6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bdda:	4770      	bx	lr
 800bddc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bde0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bde4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bde8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bdec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be14 <__kernel_sinf+0x8c>
 800bdf0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bdf4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	2f2ec9d3 	.word	0x2f2ec9d3
 800be00:	b2d72f34 	.word	0xb2d72f34
 800be04:	3638ef1b 	.word	0x3638ef1b
 800be08:	b9500d01 	.word	0xb9500d01
 800be0c:	3c088889 	.word	0x3c088889
 800be10:	be2aaaab 	.word	0xbe2aaaab
 800be14:	3e2aaaab 	.word	0x3e2aaaab

0800be18 <__ieee754_atan2f>:
 800be18:	ee10 2a90 	vmov	r2, s1
 800be1c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800be20:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800be24:	b510      	push	{r4, lr}
 800be26:	eef0 7a40 	vmov.f32	s15, s0
 800be2a:	d806      	bhi.n	800be3a <__ieee754_atan2f+0x22>
 800be2c:	ee10 0a10 	vmov	r0, s0
 800be30:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800be34:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be38:	d904      	bls.n	800be44 <__ieee754_atan2f+0x2c>
 800be3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800be3e:	eeb0 0a67 	vmov.f32	s0, s15
 800be42:	bd10      	pop	{r4, pc}
 800be44:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800be48:	d103      	bne.n	800be52 <__ieee754_atan2f+0x3a>
 800be4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be4e:	f000 b9b3 	b.w	800c1b8 <atanf>
 800be52:	1794      	asrs	r4, r2, #30
 800be54:	f004 0402 	and.w	r4, r4, #2
 800be58:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800be5c:	b943      	cbnz	r3, 800be70 <__ieee754_atan2f+0x58>
 800be5e:	2c02      	cmp	r4, #2
 800be60:	d05e      	beq.n	800bf20 <__ieee754_atan2f+0x108>
 800be62:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bf34 <__ieee754_atan2f+0x11c>
 800be66:	2c03      	cmp	r4, #3
 800be68:	bf08      	it	eq
 800be6a:	eef0 7a47 	vmoveq.f32	s15, s14
 800be6e:	e7e6      	b.n	800be3e <__ieee754_atan2f+0x26>
 800be70:	b941      	cbnz	r1, 800be84 <__ieee754_atan2f+0x6c>
 800be72:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bf38 <__ieee754_atan2f+0x120>
 800be76:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bf3c <__ieee754_atan2f+0x124>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	bfa8      	it	ge
 800be7e:	eef0 7a47 	vmovge.f32	s15, s14
 800be82:	e7dc      	b.n	800be3e <__ieee754_atan2f+0x26>
 800be84:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800be88:	d110      	bne.n	800beac <__ieee754_atan2f+0x94>
 800be8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800be92:	d107      	bne.n	800bea4 <__ieee754_atan2f+0x8c>
 800be94:	2c02      	cmp	r4, #2
 800be96:	d846      	bhi.n	800bf26 <__ieee754_atan2f+0x10e>
 800be98:	4b29      	ldr	r3, [pc, #164]	@ (800bf40 <__ieee754_atan2f+0x128>)
 800be9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be9e:	edd3 7a00 	vldr	s15, [r3]
 800bea2:	e7cc      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bea4:	2c02      	cmp	r4, #2
 800bea6:	d841      	bhi.n	800bf2c <__ieee754_atan2f+0x114>
 800bea8:	4b26      	ldr	r3, [pc, #152]	@ (800bf44 <__ieee754_atan2f+0x12c>)
 800beaa:	e7f6      	b.n	800be9a <__ieee754_atan2f+0x82>
 800beac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800beb0:	d0df      	beq.n	800be72 <__ieee754_atan2f+0x5a>
 800beb2:	1a5b      	subs	r3, r3, r1
 800beb4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800beb8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bebc:	da1a      	bge.n	800bef4 <__ieee754_atan2f+0xdc>
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	da01      	bge.n	800bec6 <__ieee754_atan2f+0xae>
 800bec2:	313c      	adds	r1, #60	@ 0x3c
 800bec4:	db19      	blt.n	800befa <__ieee754_atan2f+0xe2>
 800bec6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800beca:	f000 fa49 	bl	800c360 <fabsf>
 800bece:	f000 f973 	bl	800c1b8 <atanf>
 800bed2:	eef0 7a40 	vmov.f32	s15, s0
 800bed6:	2c01      	cmp	r4, #1
 800bed8:	d012      	beq.n	800bf00 <__ieee754_atan2f+0xe8>
 800beda:	2c02      	cmp	r4, #2
 800bedc:	d017      	beq.n	800bf0e <__ieee754_atan2f+0xf6>
 800bede:	2c00      	cmp	r4, #0
 800bee0:	d0ad      	beq.n	800be3e <__ieee754_atan2f+0x26>
 800bee2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bf48 <__ieee754_atan2f+0x130>
 800bee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800beea:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bf4c <__ieee754_atan2f+0x134>
 800beee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bef2:	e7a4      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bef4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800bf3c <__ieee754_atan2f+0x124>
 800bef8:	e7ed      	b.n	800bed6 <__ieee754_atan2f+0xbe>
 800befa:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bf50 <__ieee754_atan2f+0x138>
 800befe:	e7ea      	b.n	800bed6 <__ieee754_atan2f+0xbe>
 800bf00:	ee17 3a90 	vmov	r3, s15
 800bf04:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bf08:	ee07 3a90 	vmov	s15, r3
 800bf0c:	e797      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bf0e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bf48 <__ieee754_atan2f+0x130>
 800bf12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf16:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bf4c <__ieee754_atan2f+0x134>
 800bf1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf1e:	e78e      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bf20:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bf4c <__ieee754_atan2f+0x134>
 800bf24:	e78b      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bf26:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bf54 <__ieee754_atan2f+0x13c>
 800bf2a:	e788      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bf2c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bf50 <__ieee754_atan2f+0x138>
 800bf30:	e785      	b.n	800be3e <__ieee754_atan2f+0x26>
 800bf32:	bf00      	nop
 800bf34:	c0490fdb 	.word	0xc0490fdb
 800bf38:	bfc90fdb 	.word	0xbfc90fdb
 800bf3c:	3fc90fdb 	.word	0x3fc90fdb
 800bf40:	0800c9f8 	.word	0x0800c9f8
 800bf44:	0800c9ec 	.word	0x0800c9ec
 800bf48:	33bbbd2e 	.word	0x33bbbd2e
 800bf4c:	40490fdb 	.word	0x40490fdb
 800bf50:	00000000 	.word	0x00000000
 800bf54:	3f490fdb 	.word	0x3f490fdb

0800bf58 <__ieee754_rem_pio2f>:
 800bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5a:	ee10 6a10 	vmov	r6, s0
 800bf5e:	4b88      	ldr	r3, [pc, #544]	@ (800c180 <__ieee754_rem_pio2f+0x228>)
 800bf60:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bf64:	429d      	cmp	r5, r3
 800bf66:	b087      	sub	sp, #28
 800bf68:	4604      	mov	r4, r0
 800bf6a:	d805      	bhi.n	800bf78 <__ieee754_rem_pio2f+0x20>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	ed80 0a00 	vstr	s0, [r0]
 800bf72:	6043      	str	r3, [r0, #4]
 800bf74:	2000      	movs	r0, #0
 800bf76:	e022      	b.n	800bfbe <__ieee754_rem_pio2f+0x66>
 800bf78:	4b82      	ldr	r3, [pc, #520]	@ (800c184 <__ieee754_rem_pio2f+0x22c>)
 800bf7a:	429d      	cmp	r5, r3
 800bf7c:	d83a      	bhi.n	800bff4 <__ieee754_rem_pio2f+0x9c>
 800bf7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c188 <__ieee754_rem_pio2f+0x230>
 800bf88:	4a80      	ldr	r2, [pc, #512]	@ (800c18c <__ieee754_rem_pio2f+0x234>)
 800bf8a:	f023 030f 	bic.w	r3, r3, #15
 800bf8e:	dd18      	ble.n	800bfc2 <__ieee754_rem_pio2f+0x6a>
 800bf90:	4293      	cmp	r3, r2
 800bf92:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bf96:	bf09      	itett	eq
 800bf98:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c190 <__ieee754_rem_pio2f+0x238>
 800bf9c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c194 <__ieee754_rem_pio2f+0x23c>
 800bfa0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c198 <__ieee754_rem_pio2f+0x240>
 800bfa4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bfa8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bfac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfb0:	ed80 7a00 	vstr	s14, [r0]
 800bfb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bfb8:	edc0 7a01 	vstr	s15, [r0, #4]
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	b007      	add	sp, #28
 800bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bfc8:	bf09      	itett	eq
 800bfca:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c190 <__ieee754_rem_pio2f+0x238>
 800bfce:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c194 <__ieee754_rem_pio2f+0x23c>
 800bfd2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c198 <__ieee754_rem_pio2f+0x240>
 800bfd6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bfda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bfde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfe2:	ed80 7a00 	vstr	s14, [r0]
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfea:	edc0 7a01 	vstr	s15, [r0, #4]
 800bfee:	f04f 30ff 	mov.w	r0, #4294967295
 800bff2:	e7e4      	b.n	800bfbe <__ieee754_rem_pio2f+0x66>
 800bff4:	4b69      	ldr	r3, [pc, #420]	@ (800c19c <__ieee754_rem_pio2f+0x244>)
 800bff6:	429d      	cmp	r5, r3
 800bff8:	d873      	bhi.n	800c0e2 <__ieee754_rem_pio2f+0x18a>
 800bffa:	f000 f9b1 	bl	800c360 <fabsf>
 800bffe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c1a0 <__ieee754_rem_pio2f+0x248>
 800c002:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c006:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c00a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c00e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c012:	ee17 0a90 	vmov	r0, s15
 800c016:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c188 <__ieee754_rem_pio2f+0x230>
 800c01a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c01e:	281f      	cmp	r0, #31
 800c020:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c194 <__ieee754_rem_pio2f+0x23c>
 800c024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c028:	eeb1 6a47 	vneg.f32	s12, s14
 800c02c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c030:	ee16 1a90 	vmov	r1, s13
 800c034:	dc09      	bgt.n	800c04a <__ieee754_rem_pio2f+0xf2>
 800c036:	4a5b      	ldr	r2, [pc, #364]	@ (800c1a4 <__ieee754_rem_pio2f+0x24c>)
 800c038:	1e47      	subs	r7, r0, #1
 800c03a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c03e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c046:	4293      	cmp	r3, r2
 800c048:	d107      	bne.n	800c05a <__ieee754_rem_pio2f+0x102>
 800c04a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c04e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c052:	2a08      	cmp	r2, #8
 800c054:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c058:	dc14      	bgt.n	800c084 <__ieee754_rem_pio2f+0x12c>
 800c05a:	6021      	str	r1, [r4, #0]
 800c05c:	ed94 7a00 	vldr	s14, [r4]
 800c060:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c064:	2e00      	cmp	r6, #0
 800c066:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c06a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c06e:	daa6      	bge.n	800bfbe <__ieee754_rem_pio2f+0x66>
 800c070:	eeb1 7a47 	vneg.f32	s14, s14
 800c074:	eeb1 0a40 	vneg.f32	s0, s0
 800c078:	ed84 7a00 	vstr	s14, [r4]
 800c07c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c080:	4240      	negs	r0, r0
 800c082:	e79c      	b.n	800bfbe <__ieee754_rem_pio2f+0x66>
 800c084:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c190 <__ieee754_rem_pio2f+0x238>
 800c088:	eef0 6a40 	vmov.f32	s13, s0
 800c08c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c090:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c094:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c098:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c198 <__ieee754_rem_pio2f+0x240>
 800c09c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c0a0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c0a4:	ee15 2a90 	vmov	r2, s11
 800c0a8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c0ac:	1a5b      	subs	r3, r3, r1
 800c0ae:	2b19      	cmp	r3, #25
 800c0b0:	dc04      	bgt.n	800c0bc <__ieee754_rem_pio2f+0x164>
 800c0b2:	edc4 5a00 	vstr	s11, [r4]
 800c0b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c0ba:	e7cf      	b.n	800c05c <__ieee754_rem_pio2f+0x104>
 800c0bc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c1a8 <__ieee754_rem_pio2f+0x250>
 800c0c0:	eeb0 0a66 	vmov.f32	s0, s13
 800c0c4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c0c8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c0cc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c1ac <__ieee754_rem_pio2f+0x254>
 800c0d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c0d4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c0d8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c0dc:	ed84 7a00 	vstr	s14, [r4]
 800c0e0:	e7bc      	b.n	800c05c <__ieee754_rem_pio2f+0x104>
 800c0e2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c0e6:	d306      	bcc.n	800c0f6 <__ieee754_rem_pio2f+0x19e>
 800c0e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c0ec:	edc0 7a01 	vstr	s15, [r0, #4]
 800c0f0:	edc0 7a00 	vstr	s15, [r0]
 800c0f4:	e73e      	b.n	800bf74 <__ieee754_rem_pio2f+0x1c>
 800c0f6:	15ea      	asrs	r2, r5, #23
 800c0f8:	3a86      	subs	r2, #134	@ 0x86
 800c0fa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c106:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c1b0 <__ieee754_rem_pio2f+0x258>
 800c10a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c10e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c112:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c116:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c11a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c11e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c126:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c12a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c12e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c136:	edcd 7a05 	vstr	s15, [sp, #20]
 800c13a:	d11e      	bne.n	800c17a <__ieee754_rem_pio2f+0x222>
 800c13c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c144:	bf0c      	ite	eq
 800c146:	2301      	moveq	r3, #1
 800c148:	2302      	movne	r3, #2
 800c14a:	491a      	ldr	r1, [pc, #104]	@ (800c1b4 <__ieee754_rem_pio2f+0x25c>)
 800c14c:	9101      	str	r1, [sp, #4]
 800c14e:	2102      	movs	r1, #2
 800c150:	9100      	str	r1, [sp, #0]
 800c152:	a803      	add	r0, sp, #12
 800c154:	4621      	mov	r1, r4
 800c156:	f000 f971 	bl	800c43c <__kernel_rem_pio2f>
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	f6bf af2f 	bge.w	800bfbe <__ieee754_rem_pio2f+0x66>
 800c160:	edd4 7a00 	vldr	s15, [r4]
 800c164:	eef1 7a67 	vneg.f32	s15, s15
 800c168:	edc4 7a00 	vstr	s15, [r4]
 800c16c:	edd4 7a01 	vldr	s15, [r4, #4]
 800c170:	eef1 7a67 	vneg.f32	s15, s15
 800c174:	edc4 7a01 	vstr	s15, [r4, #4]
 800c178:	e782      	b.n	800c080 <__ieee754_rem_pio2f+0x128>
 800c17a:	2303      	movs	r3, #3
 800c17c:	e7e5      	b.n	800c14a <__ieee754_rem_pio2f+0x1f2>
 800c17e:	bf00      	nop
 800c180:	3f490fd8 	.word	0x3f490fd8
 800c184:	4016cbe3 	.word	0x4016cbe3
 800c188:	3fc90f80 	.word	0x3fc90f80
 800c18c:	3fc90fd0 	.word	0x3fc90fd0
 800c190:	37354400 	.word	0x37354400
 800c194:	37354443 	.word	0x37354443
 800c198:	2e85a308 	.word	0x2e85a308
 800c19c:	43490f80 	.word	0x43490f80
 800c1a0:	3f22f984 	.word	0x3f22f984
 800c1a4:	0800ca04 	.word	0x0800ca04
 800c1a8:	2e85a300 	.word	0x2e85a300
 800c1ac:	248d3132 	.word	0x248d3132
 800c1b0:	43800000 	.word	0x43800000
 800c1b4:	0800ca84 	.word	0x0800ca84

0800c1b8 <atanf>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	ee10 5a10 	vmov	r5, s0
 800c1be:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c1c2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c1c6:	eef0 7a40 	vmov.f32	s15, s0
 800c1ca:	d310      	bcc.n	800c1ee <atanf+0x36>
 800c1cc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c1d0:	d904      	bls.n	800c1dc <atanf+0x24>
 800c1d2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c1d6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c314 <atanf+0x15c>
 800c1e0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c318 <atanf+0x160>
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	bfc8      	it	gt
 800c1e8:	eef0 7a47 	vmovgt.f32	s15, s14
 800c1ec:	e7f3      	b.n	800c1d6 <atanf+0x1e>
 800c1ee:	4b4b      	ldr	r3, [pc, #300]	@ (800c31c <atanf+0x164>)
 800c1f0:	429c      	cmp	r4, r3
 800c1f2:	d810      	bhi.n	800c216 <atanf+0x5e>
 800c1f4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c1f8:	d20a      	bcs.n	800c210 <atanf+0x58>
 800c1fa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c320 <atanf+0x168>
 800c1fe:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c206:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20e:	dce2      	bgt.n	800c1d6 <atanf+0x1e>
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	e013      	b.n	800c23e <atanf+0x86>
 800c216:	f000 f8a3 	bl	800c360 <fabsf>
 800c21a:	4b42      	ldr	r3, [pc, #264]	@ (800c324 <atanf+0x16c>)
 800c21c:	429c      	cmp	r4, r3
 800c21e:	d84f      	bhi.n	800c2c0 <atanf+0x108>
 800c220:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c224:	429c      	cmp	r4, r3
 800c226:	d841      	bhi.n	800c2ac <atanf+0xf4>
 800c228:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c22c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c230:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c234:	2300      	movs	r3, #0
 800c236:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c23a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c244:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c328 <atanf+0x170>
 800c248:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c32c <atanf+0x174>
 800c24c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c330 <atanf+0x178>
 800c250:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c254:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c258:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c334 <atanf+0x17c>
 800c25c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c260:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c338 <atanf+0x180>
 800c264:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c268:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c33c <atanf+0x184>
 800c26c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c270:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c340 <atanf+0x188>
 800c274:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c278:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c344 <atanf+0x18c>
 800c27c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c280:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c348 <atanf+0x190>
 800c284:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c288:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c34c <atanf+0x194>
 800c28c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c290:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c350 <atanf+0x198>
 800c294:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c298:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c29c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c2a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2a4:	d121      	bne.n	800c2ea <atanf+0x132>
 800c2a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2aa:	e794      	b.n	800c1d6 <atanf+0x1e>
 800c2ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c2b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c2b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c2be:	e7be      	b.n	800c23e <atanf+0x86>
 800c2c0:	4b24      	ldr	r3, [pc, #144]	@ (800c354 <atanf+0x19c>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	d80b      	bhi.n	800c2de <atanf+0x126>
 800c2c6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c2ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2ce:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2dc:	e7af      	b.n	800c23e <atanf+0x86>
 800c2de:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c2e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e7a9      	b.n	800c23e <atanf+0x86>
 800c2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c358 <atanf+0x1a0>)
 800c2ec:	491b      	ldr	r1, [pc, #108]	@ (800c35c <atanf+0x1a4>)
 800c2ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c2f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c2f6:	edd3 6a00 	vldr	s13, [r3]
 800c2fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c2fe:	2d00      	cmp	r5, #0
 800c300:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c304:	edd2 7a00 	vldr	s15, [r2]
 800c308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c30c:	bfb8      	it	lt
 800c30e:	eef1 7a67 	vneglt.f32	s15, s15
 800c312:	e760      	b.n	800c1d6 <atanf+0x1e>
 800c314:	bfc90fdb 	.word	0xbfc90fdb
 800c318:	3fc90fdb 	.word	0x3fc90fdb
 800c31c:	3edfffff 	.word	0x3edfffff
 800c320:	7149f2ca 	.word	0x7149f2ca
 800c324:	3f97ffff 	.word	0x3f97ffff
 800c328:	3c8569d7 	.word	0x3c8569d7
 800c32c:	3d4bda59 	.word	0x3d4bda59
 800c330:	bd6ef16b 	.word	0xbd6ef16b
 800c334:	3d886b35 	.word	0x3d886b35
 800c338:	3dba2e6e 	.word	0x3dba2e6e
 800c33c:	3e124925 	.word	0x3e124925
 800c340:	3eaaaaab 	.word	0x3eaaaaab
 800c344:	bd15a221 	.word	0xbd15a221
 800c348:	bd9d8795 	.word	0xbd9d8795
 800c34c:	bde38e38 	.word	0xbde38e38
 800c350:	be4ccccd 	.word	0xbe4ccccd
 800c354:	401bffff 	.word	0x401bffff
 800c358:	0800cdac 	.word	0x0800cdac
 800c35c:	0800cd9c 	.word	0x0800cd9c

0800c360 <fabsf>:
 800c360:	ee10 3a10 	vmov	r3, s0
 800c364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c368:	ee00 3a10 	vmov	s0, r3
 800c36c:	4770      	bx	lr
	...

0800c370 <scalbnf>:
 800c370:	ee10 3a10 	vmov	r3, s0
 800c374:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c378:	d02b      	beq.n	800c3d2 <scalbnf+0x62>
 800c37a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c37e:	d302      	bcc.n	800c386 <scalbnf+0x16>
 800c380:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c384:	4770      	bx	lr
 800c386:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c38a:	d123      	bne.n	800c3d4 <scalbnf+0x64>
 800c38c:	4b24      	ldr	r3, [pc, #144]	@ (800c420 <scalbnf+0xb0>)
 800c38e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c424 <scalbnf+0xb4>
 800c392:	4298      	cmp	r0, r3
 800c394:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c398:	db17      	blt.n	800c3ca <scalbnf+0x5a>
 800c39a:	ee10 3a10 	vmov	r3, s0
 800c39e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c3a2:	3a19      	subs	r2, #25
 800c3a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c3a8:	4288      	cmp	r0, r1
 800c3aa:	dd15      	ble.n	800c3d8 <scalbnf+0x68>
 800c3ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c428 <scalbnf+0xb8>
 800c3b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c42c <scalbnf+0xbc>
 800c3b4:	ee10 3a10 	vmov	r3, s0
 800c3b8:	eeb0 7a67 	vmov.f32	s14, s15
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfb8      	it	lt
 800c3c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800c3c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c3c8:	4770      	bx	lr
 800c3ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c430 <scalbnf+0xc0>
 800c3ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c3d2:	4770      	bx	lr
 800c3d4:	0dd2      	lsrs	r2, r2, #23
 800c3d6:	e7e5      	b.n	800c3a4 <scalbnf+0x34>
 800c3d8:	4410      	add	r0, r2
 800c3da:	28fe      	cmp	r0, #254	@ 0xfe
 800c3dc:	dce6      	bgt.n	800c3ac <scalbnf+0x3c>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	dd06      	ble.n	800c3f0 <scalbnf+0x80>
 800c3e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c3e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c3ea:	ee00 3a10 	vmov	s0, r3
 800c3ee:	4770      	bx	lr
 800c3f0:	f110 0f16 	cmn.w	r0, #22
 800c3f4:	da09      	bge.n	800c40a <scalbnf+0x9a>
 800c3f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c430 <scalbnf+0xc0>
 800c3fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c434 <scalbnf+0xc4>
 800c3fe:	ee10 3a10 	vmov	r3, s0
 800c402:	eeb0 7a67 	vmov.f32	s14, s15
 800c406:	2b00      	cmp	r3, #0
 800c408:	e7d9      	b.n	800c3be <scalbnf+0x4e>
 800c40a:	3019      	adds	r0, #25
 800c40c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c410:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c414:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c438 <scalbnf+0xc8>
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	e7d7      	b.n	800c3ce <scalbnf+0x5e>
 800c41e:	bf00      	nop
 800c420:	ffff3cb0 	.word	0xffff3cb0
 800c424:	4c000000 	.word	0x4c000000
 800c428:	7149f2ca 	.word	0x7149f2ca
 800c42c:	f149f2ca 	.word	0xf149f2ca
 800c430:	0da24260 	.word	0x0da24260
 800c434:	8da24260 	.word	0x8da24260
 800c438:	33000000 	.word	0x33000000

0800c43c <__kernel_rem_pio2f>:
 800c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	ed2d 8b04 	vpush	{d8-d9}
 800c444:	b0d9      	sub	sp, #356	@ 0x164
 800c446:	4690      	mov	r8, r2
 800c448:	9001      	str	r0, [sp, #4]
 800c44a:	4ab6      	ldr	r2, [pc, #728]	@ (800c724 <__kernel_rem_pio2f+0x2e8>)
 800c44c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c44e:	f118 0f04 	cmn.w	r8, #4
 800c452:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c456:	460f      	mov	r7, r1
 800c458:	f103 3bff 	add.w	fp, r3, #4294967295
 800c45c:	db26      	blt.n	800c4ac <__kernel_rem_pio2f+0x70>
 800c45e:	f1b8 0203 	subs.w	r2, r8, #3
 800c462:	bf48      	it	mi
 800c464:	f108 0204 	addmi.w	r2, r8, #4
 800c468:	10d2      	asrs	r2, r2, #3
 800c46a:	1c55      	adds	r5, r2, #1
 800c46c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c46e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c472:	00e8      	lsls	r0, r5, #3
 800c474:	eba2 060b 	sub.w	r6, r2, fp
 800c478:	9002      	str	r0, [sp, #8]
 800c47a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c47e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c482:	ac1c      	add	r4, sp, #112	@ 0x70
 800c484:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c488:	2000      	movs	r0, #0
 800c48a:	4560      	cmp	r0, ip
 800c48c:	dd10      	ble.n	800c4b0 <__kernel_rem_pio2f+0x74>
 800c48e:	a91c      	add	r1, sp, #112	@ 0x70
 800c490:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c494:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c498:	2600      	movs	r6, #0
 800c49a:	4556      	cmp	r6, sl
 800c49c:	dc24      	bgt.n	800c4e8 <__kernel_rem_pio2f+0xac>
 800c49e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c4a2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c4a6:	4684      	mov	ip, r0
 800c4a8:	2400      	movs	r4, #0
 800c4aa:	e016      	b.n	800c4da <__kernel_rem_pio2f+0x9e>
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	e7dc      	b.n	800c46a <__kernel_rem_pio2f+0x2e>
 800c4b0:	42c6      	cmn	r6, r0
 800c4b2:	bf5d      	ittte	pl
 800c4b4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c4b8:	ee07 1a90 	vmovpl	s15, r1
 800c4bc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c4c0:	eef0 7a47 	vmovmi.f32	s15, s14
 800c4c4:	ece4 7a01 	vstmia	r4!, {s15}
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	e7de      	b.n	800c48a <__kernel_rem_pio2f+0x4e>
 800c4cc:	ecfe 6a01 	vldmia	lr!, {s13}
 800c4d0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c4d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4d8:	3401      	adds	r4, #1
 800c4da:	455c      	cmp	r4, fp
 800c4dc:	ddf6      	ble.n	800c4cc <__kernel_rem_pio2f+0x90>
 800c4de:	ece9 7a01 	vstmia	r9!, {s15}
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	3004      	adds	r0, #4
 800c4e6:	e7d8      	b.n	800c49a <__kernel_rem_pio2f+0x5e>
 800c4e8:	a908      	add	r1, sp, #32
 800c4ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4ee:	9104      	str	r1, [sp, #16]
 800c4f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c4f2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c730 <__kernel_rem_pio2f+0x2f4>
 800c4f6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c72c <__kernel_rem_pio2f+0x2f0>
 800c4fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c4fe:	9203      	str	r2, [sp, #12]
 800c500:	4654      	mov	r4, sl
 800c502:	00a2      	lsls	r2, r4, #2
 800c504:	9205      	str	r2, [sp, #20]
 800c506:	aa58      	add	r2, sp, #352	@ 0x160
 800c508:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c50c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c510:	a944      	add	r1, sp, #272	@ 0x110
 800c512:	aa08      	add	r2, sp, #32
 800c514:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c518:	4694      	mov	ip, r2
 800c51a:	4626      	mov	r6, r4
 800c51c:	2e00      	cmp	r6, #0
 800c51e:	dc4c      	bgt.n	800c5ba <__kernel_rem_pio2f+0x17e>
 800c520:	4628      	mov	r0, r5
 800c522:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c526:	f7ff ff23 	bl	800c370 <scalbnf>
 800c52a:	eeb0 8a40 	vmov.f32	s16, s0
 800c52e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c532:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c536:	f000 f9e9 	bl	800c90c <floorf>
 800c53a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c53e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c542:	2d00      	cmp	r5, #0
 800c544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c548:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c54c:	ee17 9a90 	vmov	r9, s15
 800c550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c554:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c558:	dd41      	ble.n	800c5de <__kernel_rem_pio2f+0x1a2>
 800c55a:	f104 3cff 	add.w	ip, r4, #4294967295
 800c55e:	a908      	add	r1, sp, #32
 800c560:	f1c5 0e08 	rsb	lr, r5, #8
 800c564:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c568:	fa46 f00e 	asr.w	r0, r6, lr
 800c56c:	4481      	add	r9, r0
 800c56e:	fa00 f00e 	lsl.w	r0, r0, lr
 800c572:	1a36      	subs	r6, r6, r0
 800c574:	f1c5 0007 	rsb	r0, r5, #7
 800c578:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c57c:	4106      	asrs	r6, r0
 800c57e:	2e00      	cmp	r6, #0
 800c580:	dd3c      	ble.n	800c5fc <__kernel_rem_pio2f+0x1c0>
 800c582:	f04f 0e00 	mov.w	lr, #0
 800c586:	f109 0901 	add.w	r9, r9, #1
 800c58a:	4670      	mov	r0, lr
 800c58c:	4574      	cmp	r4, lr
 800c58e:	dc68      	bgt.n	800c662 <__kernel_rem_pio2f+0x226>
 800c590:	2d00      	cmp	r5, #0
 800c592:	dd03      	ble.n	800c59c <__kernel_rem_pio2f+0x160>
 800c594:	2d01      	cmp	r5, #1
 800c596:	d074      	beq.n	800c682 <__kernel_rem_pio2f+0x246>
 800c598:	2d02      	cmp	r5, #2
 800c59a:	d07d      	beq.n	800c698 <__kernel_rem_pio2f+0x25c>
 800c59c:	2e02      	cmp	r6, #2
 800c59e:	d12d      	bne.n	800c5fc <__kernel_rem_pio2f+0x1c0>
 800c5a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c5a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c5a8:	b340      	cbz	r0, 800c5fc <__kernel_rem_pio2f+0x1c0>
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	9306      	str	r3, [sp, #24]
 800c5ae:	f7ff fedf 	bl	800c370 <scalbnf>
 800c5b2:	9b06      	ldr	r3, [sp, #24]
 800c5b4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c5b8:	e020      	b.n	800c5fc <__kernel_rem_pio2f+0x1c0>
 800c5ba:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c5be:	3e01      	subs	r6, #1
 800c5c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5c8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c5cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c5d0:	ecac 0a01 	vstmia	ip!, {s0}
 800c5d4:	ed30 0a01 	vldmdb	r0!, {s0}
 800c5d8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c5dc:	e79e      	b.n	800c51c <__kernel_rem_pio2f+0xe0>
 800c5de:	d105      	bne.n	800c5ec <__kernel_rem_pio2f+0x1b0>
 800c5e0:	1e60      	subs	r0, r4, #1
 800c5e2:	a908      	add	r1, sp, #32
 800c5e4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c5e8:	11f6      	asrs	r6, r6, #7
 800c5ea:	e7c8      	b.n	800c57e <__kernel_rem_pio2f+0x142>
 800c5ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c5f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f8:	da31      	bge.n	800c65e <__kernel_rem_pio2f+0x222>
 800c5fa:	2600      	movs	r6, #0
 800c5fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c604:	f040 8098 	bne.w	800c738 <__kernel_rem_pio2f+0x2fc>
 800c608:	1e60      	subs	r0, r4, #1
 800c60a:	2200      	movs	r2, #0
 800c60c:	4550      	cmp	r0, sl
 800c60e:	da4b      	bge.n	800c6a8 <__kernel_rem_pio2f+0x26c>
 800c610:	2a00      	cmp	r2, #0
 800c612:	d065      	beq.n	800c6e0 <__kernel_rem_pio2f+0x2a4>
 800c614:	3c01      	subs	r4, #1
 800c616:	ab08      	add	r3, sp, #32
 800c618:	3d08      	subs	r5, #8
 800c61a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0f8      	beq.n	800c614 <__kernel_rem_pio2f+0x1d8>
 800c622:	4628      	mov	r0, r5
 800c624:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c628:	f7ff fea2 	bl	800c370 <scalbnf>
 800c62c:	1c63      	adds	r3, r4, #1
 800c62e:	aa44      	add	r2, sp, #272	@ 0x110
 800c630:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c730 <__kernel_rem_pio2f+0x2f4>
 800c634:	0099      	lsls	r1, r3, #2
 800c636:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c63a:	4623      	mov	r3, r4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f280 80a9 	bge.w	800c794 <__kernel_rem_pio2f+0x358>
 800c642:	4623      	mov	r3, r4
 800c644:	2b00      	cmp	r3, #0
 800c646:	f2c0 80c7 	blt.w	800c7d8 <__kernel_rem_pio2f+0x39c>
 800c64a:	aa44      	add	r2, sp, #272	@ 0x110
 800c64c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c650:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c728 <__kernel_rem_pio2f+0x2ec>
 800c654:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c658:	2000      	movs	r0, #0
 800c65a:	1ae2      	subs	r2, r4, r3
 800c65c:	e0b1      	b.n	800c7c2 <__kernel_rem_pio2f+0x386>
 800c65e:	2602      	movs	r6, #2
 800c660:	e78f      	b.n	800c582 <__kernel_rem_pio2f+0x146>
 800c662:	f852 1b04 	ldr.w	r1, [r2], #4
 800c666:	b948      	cbnz	r0, 800c67c <__kernel_rem_pio2f+0x240>
 800c668:	b121      	cbz	r1, 800c674 <__kernel_rem_pio2f+0x238>
 800c66a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c66e:	f842 1c04 	str.w	r1, [r2, #-4]
 800c672:	2101      	movs	r1, #1
 800c674:	f10e 0e01 	add.w	lr, lr, #1
 800c678:	4608      	mov	r0, r1
 800c67a:	e787      	b.n	800c58c <__kernel_rem_pio2f+0x150>
 800c67c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c680:	e7f5      	b.n	800c66e <__kernel_rem_pio2f+0x232>
 800c682:	f104 3cff 	add.w	ip, r4, #4294967295
 800c686:	aa08      	add	r2, sp, #32
 800c688:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c68c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c690:	a908      	add	r1, sp, #32
 800c692:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c696:	e781      	b.n	800c59c <__kernel_rem_pio2f+0x160>
 800c698:	f104 3cff 	add.w	ip, r4, #4294967295
 800c69c:	aa08      	add	r2, sp, #32
 800c69e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c6a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c6a6:	e7f3      	b.n	800c690 <__kernel_rem_pio2f+0x254>
 800c6a8:	a908      	add	r1, sp, #32
 800c6aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c6ae:	3801      	subs	r0, #1
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	e7ab      	b.n	800c60c <__kernel_rem_pio2f+0x1d0>
 800c6b4:	3201      	adds	r2, #1
 800c6b6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	d0fa      	beq.n	800c6b4 <__kernel_rem_pio2f+0x278>
 800c6be:	9905      	ldr	r1, [sp, #20]
 800c6c0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c6c4:	eb0d 0001 	add.w	r0, sp, r1
 800c6c8:	18e6      	adds	r6, r4, r3
 800c6ca:	a91c      	add	r1, sp, #112	@ 0x70
 800c6cc:	f104 0c01 	add.w	ip, r4, #1
 800c6d0:	384c      	subs	r0, #76	@ 0x4c
 800c6d2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c6d6:	4422      	add	r2, r4
 800c6d8:	4562      	cmp	r2, ip
 800c6da:	da04      	bge.n	800c6e6 <__kernel_rem_pio2f+0x2aa>
 800c6dc:	4614      	mov	r4, r2
 800c6de:	e710      	b.n	800c502 <__kernel_rem_pio2f+0xc6>
 800c6e0:	9804      	ldr	r0, [sp, #16]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	e7e7      	b.n	800c6b6 <__kernel_rem_pio2f+0x27a>
 800c6e6:	9903      	ldr	r1, [sp, #12]
 800c6e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c6ec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c6f0:	9105      	str	r1, [sp, #20]
 800c6f2:	ee07 1a90 	vmov	s15, r1
 800c6f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6fa:	2400      	movs	r4, #0
 800c6fc:	ece6 7a01 	vstmia	r6!, {s15}
 800c700:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c704:	46b1      	mov	r9, r6
 800c706:	455c      	cmp	r4, fp
 800c708:	dd04      	ble.n	800c714 <__kernel_rem_pio2f+0x2d8>
 800c70a:	ece0 7a01 	vstmia	r0!, {s15}
 800c70e:	f10c 0c01 	add.w	ip, ip, #1
 800c712:	e7e1      	b.n	800c6d8 <__kernel_rem_pio2f+0x29c>
 800c714:	ecfe 6a01 	vldmia	lr!, {s13}
 800c718:	ed39 7a01 	vldmdb	r9!, {s14}
 800c71c:	3401      	adds	r4, #1
 800c71e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c722:	e7f0      	b.n	800c706 <__kernel_rem_pio2f+0x2ca>
 800c724:	0800cde8 	.word	0x0800cde8
 800c728:	0800cdbc 	.word	0x0800cdbc
 800c72c:	43800000 	.word	0x43800000
 800c730:	3b800000 	.word	0x3b800000
 800c734:	00000000 	.word	0x00000000
 800c738:	9b02      	ldr	r3, [sp, #8]
 800c73a:	eeb0 0a48 	vmov.f32	s0, s16
 800c73e:	eba3 0008 	sub.w	r0, r3, r8
 800c742:	f7ff fe15 	bl	800c370 <scalbnf>
 800c746:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c72c <__kernel_rem_pio2f+0x2f0>
 800c74a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c752:	db19      	blt.n	800c788 <__kernel_rem_pio2f+0x34c>
 800c754:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c730 <__kernel_rem_pio2f+0x2f4>
 800c758:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c75c:	aa08      	add	r2, sp, #32
 800c75e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c762:	3508      	adds	r5, #8
 800c764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c768:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c76c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c770:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c774:	ee10 3a10 	vmov	r3, s0
 800c778:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c77c:	ee17 3a90 	vmov	r3, s15
 800c780:	3401      	adds	r4, #1
 800c782:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c786:	e74c      	b.n	800c622 <__kernel_rem_pio2f+0x1e6>
 800c788:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c78c:	aa08      	add	r2, sp, #32
 800c78e:	ee10 3a10 	vmov	r3, s0
 800c792:	e7f6      	b.n	800c782 <__kernel_rem_pio2f+0x346>
 800c794:	a808      	add	r0, sp, #32
 800c796:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c79a:	9001      	str	r0, [sp, #4]
 800c79c:	ee07 0a90 	vmov	s15, r0
 800c7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c7aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c7ae:	ed62 7a01 	vstmdb	r2!, {s15}
 800c7b2:	e743      	b.n	800c63c <__kernel_rem_pio2f+0x200>
 800c7b4:	ecfc 6a01 	vldmia	ip!, {s13}
 800c7b8:	ecb5 7a01 	vldmia	r5!, {s14}
 800c7bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	4550      	cmp	r0, sl
 800c7c4:	dc01      	bgt.n	800c7ca <__kernel_rem_pio2f+0x38e>
 800c7c6:	4290      	cmp	r0, r2
 800c7c8:	ddf4      	ble.n	800c7b4 <__kernel_rem_pio2f+0x378>
 800c7ca:	a858      	add	r0, sp, #352	@ 0x160
 800c7cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c7d0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	e735      	b.n	800c644 <__kernel_rem_pio2f+0x208>
 800c7d8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	dc09      	bgt.n	800c7f2 <__kernel_rem_pio2f+0x3b6>
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	dc27      	bgt.n	800c832 <__kernel_rem_pio2f+0x3f6>
 800c7e2:	d040      	beq.n	800c866 <__kernel_rem_pio2f+0x42a>
 800c7e4:	f009 0007 	and.w	r0, r9, #7
 800c7e8:	b059      	add	sp, #356	@ 0x164
 800c7ea:	ecbd 8b04 	vpop	{d8-d9}
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d1f5      	bne.n	800c7e4 <__kernel_rem_pio2f+0x3a8>
 800c7f8:	aa30      	add	r2, sp, #192	@ 0xc0
 800c7fa:	1f0b      	subs	r3, r1, #4
 800c7fc:	4413      	add	r3, r2
 800c7fe:	461a      	mov	r2, r3
 800c800:	4620      	mov	r0, r4
 800c802:	2800      	cmp	r0, #0
 800c804:	dc50      	bgt.n	800c8a8 <__kernel_rem_pio2f+0x46c>
 800c806:	4622      	mov	r2, r4
 800c808:	2a01      	cmp	r2, #1
 800c80a:	dc5d      	bgt.n	800c8c8 <__kernel_rem_pio2f+0x48c>
 800c80c:	ab30      	add	r3, sp, #192	@ 0xc0
 800c80e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c812:	440b      	add	r3, r1
 800c814:	2c01      	cmp	r4, #1
 800c816:	dc67      	bgt.n	800c8e8 <__kernel_rem_pio2f+0x4ac>
 800c818:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c81c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c820:	2e00      	cmp	r6, #0
 800c822:	d167      	bne.n	800c8f4 <__kernel_rem_pio2f+0x4b8>
 800c824:	edc7 6a00 	vstr	s13, [r7]
 800c828:	ed87 7a01 	vstr	s14, [r7, #4]
 800c82c:	edc7 7a02 	vstr	s15, [r7, #8]
 800c830:	e7d8      	b.n	800c7e4 <__kernel_rem_pio2f+0x3a8>
 800c832:	ab30      	add	r3, sp, #192	@ 0xc0
 800c834:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c838:	440b      	add	r3, r1
 800c83a:	4622      	mov	r2, r4
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	da24      	bge.n	800c88a <__kernel_rem_pio2f+0x44e>
 800c840:	b34e      	cbz	r6, 800c896 <__kernel_rem_pio2f+0x45a>
 800c842:	eef1 7a47 	vneg.f32	s15, s14
 800c846:	edc7 7a00 	vstr	s15, [r7]
 800c84a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c84e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c852:	aa31      	add	r2, sp, #196	@ 0xc4
 800c854:	2301      	movs	r3, #1
 800c856:	429c      	cmp	r4, r3
 800c858:	da20      	bge.n	800c89c <__kernel_rem_pio2f+0x460>
 800c85a:	b10e      	cbz	r6, 800c860 <__kernel_rem_pio2f+0x424>
 800c85c:	eef1 7a67 	vneg.f32	s15, s15
 800c860:	edc7 7a01 	vstr	s15, [r7, #4]
 800c864:	e7be      	b.n	800c7e4 <__kernel_rem_pio2f+0x3a8>
 800c866:	ab30      	add	r3, sp, #192	@ 0xc0
 800c868:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c734 <__kernel_rem_pio2f+0x2f8>
 800c86c:	440b      	add	r3, r1
 800c86e:	2c00      	cmp	r4, #0
 800c870:	da05      	bge.n	800c87e <__kernel_rem_pio2f+0x442>
 800c872:	b10e      	cbz	r6, 800c878 <__kernel_rem_pio2f+0x43c>
 800c874:	eef1 7a67 	vneg.f32	s15, s15
 800c878:	edc7 7a00 	vstr	s15, [r7]
 800c87c:	e7b2      	b.n	800c7e4 <__kernel_rem_pio2f+0x3a8>
 800c87e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c882:	3c01      	subs	r4, #1
 800c884:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c888:	e7f1      	b.n	800c86e <__kernel_rem_pio2f+0x432>
 800c88a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c88e:	3a01      	subs	r2, #1
 800c890:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c894:	e7d2      	b.n	800c83c <__kernel_rem_pio2f+0x400>
 800c896:	eef0 7a47 	vmov.f32	s15, s14
 800c89a:	e7d4      	b.n	800c846 <__kernel_rem_pio2f+0x40a>
 800c89c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8a6:	e7d6      	b.n	800c856 <__kernel_rem_pio2f+0x41a>
 800c8a8:	ed72 7a01 	vldmdb	r2!, {s15}
 800c8ac:	edd2 6a01 	vldr	s13, [r2, #4]
 800c8b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c8b4:	3801      	subs	r0, #1
 800c8b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8ba:	ed82 7a00 	vstr	s14, [r2]
 800c8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8c2:	edc2 7a01 	vstr	s15, [r2, #4]
 800c8c6:	e79c      	b.n	800c802 <__kernel_rem_pio2f+0x3c6>
 800c8c8:	ed73 7a01 	vldmdb	r3!, {s15}
 800c8cc:	edd3 6a01 	vldr	s13, [r3, #4]
 800c8d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c8d4:	3a01      	subs	r2, #1
 800c8d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8da:	ed83 7a00 	vstr	s14, [r3]
 800c8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e2:	edc3 7a01 	vstr	s15, [r3, #4]
 800c8e6:	e78f      	b.n	800c808 <__kernel_rem_pio2f+0x3cc>
 800c8e8:	ed33 7a01 	vldmdb	r3!, {s14}
 800c8ec:	3c01      	subs	r4, #1
 800c8ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8f2:	e78f      	b.n	800c814 <__kernel_rem_pio2f+0x3d8>
 800c8f4:	eef1 6a66 	vneg.f32	s13, s13
 800c8f8:	eeb1 7a47 	vneg.f32	s14, s14
 800c8fc:	edc7 6a00 	vstr	s13, [r7]
 800c900:	ed87 7a01 	vstr	s14, [r7, #4]
 800c904:	eef1 7a67 	vneg.f32	s15, s15
 800c908:	e790      	b.n	800c82c <__kernel_rem_pio2f+0x3f0>
 800c90a:	bf00      	nop

0800c90c <floorf>:
 800c90c:	ee10 3a10 	vmov	r3, s0
 800c910:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c914:	3a7f      	subs	r2, #127	@ 0x7f
 800c916:	2a16      	cmp	r2, #22
 800c918:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c91c:	dc2b      	bgt.n	800c976 <floorf+0x6a>
 800c91e:	2a00      	cmp	r2, #0
 800c920:	da12      	bge.n	800c948 <floorf+0x3c>
 800c922:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c988 <floorf+0x7c>
 800c926:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c92a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c932:	dd06      	ble.n	800c942 <floorf+0x36>
 800c934:	2b00      	cmp	r3, #0
 800c936:	da24      	bge.n	800c982 <floorf+0x76>
 800c938:	2900      	cmp	r1, #0
 800c93a:	4b14      	ldr	r3, [pc, #80]	@ (800c98c <floorf+0x80>)
 800c93c:	bf08      	it	eq
 800c93e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c942:	ee00 3a10 	vmov	s0, r3
 800c946:	4770      	bx	lr
 800c948:	4911      	ldr	r1, [pc, #68]	@ (800c990 <floorf+0x84>)
 800c94a:	4111      	asrs	r1, r2
 800c94c:	420b      	tst	r3, r1
 800c94e:	d0fa      	beq.n	800c946 <floorf+0x3a>
 800c950:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c988 <floorf+0x7c>
 800c954:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c958:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c960:	ddef      	ble.n	800c942 <floorf+0x36>
 800c962:	2b00      	cmp	r3, #0
 800c964:	bfbe      	ittt	lt
 800c966:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c96a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c96e:	189b      	addlt	r3, r3, r2
 800c970:	ea23 0301 	bic.w	r3, r3, r1
 800c974:	e7e5      	b.n	800c942 <floorf+0x36>
 800c976:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c97a:	d3e4      	bcc.n	800c946 <floorf+0x3a>
 800c97c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c980:	4770      	bx	lr
 800c982:	2300      	movs	r3, #0
 800c984:	e7dd      	b.n	800c942 <floorf+0x36>
 800c986:	bf00      	nop
 800c988:	7149f2ca 	.word	0x7149f2ca
 800c98c:	bf800000 	.word	0xbf800000
 800c990:	007fffff 	.word	0x007fffff

0800c994 <_init>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr

0800c9a0 <_fini>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr
